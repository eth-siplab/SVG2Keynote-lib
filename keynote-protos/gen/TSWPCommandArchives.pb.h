// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSWPCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSWPCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSWPArchives.sos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSWPCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSWPCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[47]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSWPCommandArchives_2eproto;
namespace TSWP {
class AddFlowInfoCommandArchive;
struct AddFlowInfoCommandArchiveDefaultTypeInternal;
extern AddFlowInfoCommandArchiveDefaultTypeInternal _AddFlowInfoCommandArchive_default_instance_;
class AnchorAttachmentCommandArchive;
struct AnchorAttachmentCommandArchiveDefaultTypeInternal;
extern AnchorAttachmentCommandArchiveDefaultTypeInternal _AnchorAttachmentCommandArchive_default_instance_;
class ApplyPlaceholderTextCommandArchive;
struct ApplyPlaceholderTextCommandArchiveDefaultTypeInternal;
extern ApplyPlaceholderTextCommandArchiveDefaultTypeInternal _ApplyPlaceholderTextCommandArchive_default_instance_;
class ApplyRubyTextCommandArchive;
struct ApplyRubyTextCommandArchiveDefaultTypeInternal;
extern ApplyRubyTextCommandArchiveDefaultTypeInternal _ApplyRubyTextCommandArchive_default_instance_;
class CharacterStyleChangePropertyCommand_GArchive;
struct CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal;
extern CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal _CharacterStyleChangePropertyCommand_GArchive_default_instance_;
class ContainedObjectsCommandArchive;
struct ContainedObjectsCommandArchiveDefaultTypeInternal;
extern ContainedObjectsCommandArchiveDefaultTypeInternal _ContainedObjectsCommandArchive_default_instance_;
class ContainedObjectsCommandArchive_AddBehaviorArgs;
struct ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal;
extern ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_AddBehaviorArgs_default_instance_;
class ContainedObjectsCommandArchive_RearrangeBehaviorArgs;
struct ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal;
extern ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_RearrangeBehaviorArgs_default_instance_;
class ContainedObjectsCommandArchive_RemoveBehaviorArgs;
struct ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal;
extern ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_RemoveBehaviorArgs_default_instance_;
class DummyCommandArchive;
struct DummyCommandArchiveDefaultTypeInternal;
extern DummyCommandArchiveDefaultTypeInternal _DummyCommandArchive_default_instance_;
class EquationInfoGeometryCommandArchive;
struct EquationInfoGeometryCommandArchiveDefaultTypeInternal;
extern EquationInfoGeometryCommandArchiveDefaultTypeInternal _EquationInfoGeometryCommandArchive_default_instance_;
class InsertColumnsCommandArchive;
struct InsertColumnsCommandArchiveDefaultTypeInternal;
extern InsertColumnsCommandArchiveDefaultTypeInternal _InsertColumnsCommandArchive_default_instance_;
class InsertRowsCommandArchive;
struct InsertRowsCommandArchiveDefaultTypeInternal;
extern InsertRowsCommandArchiveDefaultTypeInternal _InsertRowsCommandArchive_default_instance_;
class MergeCellsCommandArchive;
struct MergeCellsCommandArchiveDefaultTypeInternal;
extern MergeCellsCommandArchiveDefaultTypeInternal _MergeCellsCommandArchive_default_instance_;
class ModifyRubyTextCommandArchive;
struct ModifyRubyTextCommandArchiveDefaultTypeInternal;
extern ModifyRubyTextCommandArchiveDefaultTypeInternal _ModifyRubyTextCommandArchive_default_instance_;
class ModifyTOCSettingsBaseCommandArchive;
struct ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal;
extern ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal _ModifyTOCSettingsBaseCommandArchive_default_instance_;
class ModifyTOCSettingsForTOCInfoCommandArchive;
struct ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal;
extern ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal _ModifyTOCSettingsForTOCInfoCommandArchive_default_instance_;
class ModifyTOCSettingsPresetForThemeCommandArchive;
struct ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal;
extern ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal _ModifyTOCSettingsPresetForThemeCommandArchive_default_instance_;
class MoveColumnsCommandArchive;
struct MoveColumnsCommandArchiveDefaultTypeInternal;
extern MoveColumnsCommandArchiveDefaultTypeInternal _MoveColumnsCommandArchive_default_instance_;
class MoveRowsCommandArchive;
struct MoveRowsCommandArchiveDefaultTypeInternal;
extern MoveRowsCommandArchiveDefaultTypeInternal _MoveRowsCommandArchive_default_instance_;
class ObjectPropertyArchive;
struct ObjectPropertyArchiveDefaultTypeInternal;
extern ObjectPropertyArchiveDefaultTypeInternal _ObjectPropertyArchive_default_instance_;
class ParagraphStyleChangePropertyCommand_GArchive;
struct ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal;
extern ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal _ParagraphStyleChangePropertyCommand_GArchive_default_instance_;
class PencilAnnotationSelectionTransformerArchive;
struct PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal;
extern PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal _PencilAnnotationSelectionTransformerArchive_default_instance_;
class RemoveColumnsCommandArchive;
struct RemoveColumnsCommandArchiveDefaultTypeInternal;
extern RemoveColumnsCommandArchiveDefaultTypeInternal _RemoveColumnsCommandArchive_default_instance_;
class RemoveFlowInfoCommandArchive;
struct RemoveFlowInfoCommandArchiveDefaultTypeInternal;
extern RemoveFlowInfoCommandArchiveDefaultTypeInternal _RemoveFlowInfoCommandArchive_default_instance_;
class RemoveRowsCommandArchive;
struct RemoveRowsCommandArchiveDefaultTypeInternal;
extern RemoveRowsCommandArchiveDefaultTypeInternal _RemoveRowsCommandArchive_default_instance_;
class ReplaceAllUsesOfStyleCommandArchive;
struct ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal;
extern ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal _ReplaceAllUsesOfStyleCommandArchive_default_instance_;
class SelectionTransformerArchive;
struct SelectionTransformerArchiveDefaultTypeInternal;
extern SelectionTransformerArchiveDefaultTypeInternal _SelectionTransformerArchive_default_instance_;
class SetColumnStyleCommandArchive;
struct SetColumnStyleCommandArchiveDefaultTypeInternal;
extern SetColumnStyleCommandArchiveDefaultTypeInternal _SetColumnStyleCommandArchive_default_instance_;
class SetObjectPropertiesCommandArchive;
struct SetObjectPropertiesCommandArchiveDefaultTypeInternal;
extern SetObjectPropertiesCommandArchiveDefaultTypeInternal _SetObjectPropertiesCommandArchive_default_instance_;
class ShapeApplyPresetCommandArchive;
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal;
extern ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
class ShapeContentDescription;
struct ShapeContentDescriptionDefaultTypeInternal;
extern ShapeContentDescriptionDefaultTypeInternal _ShapeContentDescription_default_instance_;
class ShapeSelectionTransformerArchive;
struct ShapeSelectionTransformerArchiveDefaultTypeInternal;
extern ShapeSelectionTransformerArchiveDefaultTypeInternal _ShapeSelectionTransformerArchive_default_instance_;
class ShapeStyleSetValueCommandArchive;
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal;
extern ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
class StorageActionCommandArchive;
struct StorageActionCommandArchiveDefaultTypeInternal;
extern StorageActionCommandArchiveDefaultTypeInternal _StorageActionCommandArchive_default_instance_;
class StyleBaseCommandArchive;
struct StyleBaseCommandArchiveDefaultTypeInternal;
extern StyleBaseCommandArchiveDefaultTypeInternal _StyleBaseCommandArchive_default_instance_;
class StyleCreateCommandArchive;
struct StyleCreateCommandArchiveDefaultTypeInternal;
extern StyleCreateCommandArchiveDefaultTypeInternal _StyleCreateCommandArchive_default_instance_;
class StyleDeleteCommandArchive;
struct StyleDeleteCommandArchiveDefaultTypeInternal;
extern StyleDeleteCommandArchiveDefaultTypeInternal _StyleDeleteCommandArchive_default_instance_;
class StyleRenameCommandArchive;
struct StyleRenameCommandArchiveDefaultTypeInternal;
extern StyleRenameCommandArchiveDefaultTypeInternal _StyleRenameCommandArchive_default_instance_;
class StyleReorderCommandArchive;
struct StyleReorderCommandArchiveDefaultTypeInternal;
extern StyleReorderCommandArchiveDefaultTypeInternal _StyleReorderCommandArchive_default_instance_;
class StyleUpdateCommandArchive;
struct StyleUpdateCommandArchiveDefaultTypeInternal;
extern StyleUpdateCommandArchiveDefaultTypeInternal _StyleUpdateCommandArchive_default_instance_;
class StyleUpdatePropertyMapCommandArchive;
struct StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal;
extern StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal _StyleUpdatePropertyMapCommandArchive_default_instance_;
class TextApplyThemeCommandArchive;
struct TextApplyThemeCommandArchiveDefaultTypeInternal;
extern TextApplyThemeCommandArchiveDefaultTypeInternal _TextApplyThemeCommandArchive_default_instance_;
class TextCommandArchive;
struct TextCommandArchiveDefaultTypeInternal;
extern TextCommandArchiveDefaultTypeInternal _TextCommandArchive_default_instance_;
class TextCommentReplyCommandArchive;
struct TextCommentReplyCommandArchiveDefaultTypeInternal;
extern TextCommentReplyCommandArchiveDefaultTypeInternal _TextCommentReplyCommandArchive_default_instance_;
class UpdateDateTimeFieldCommandArchive;
struct UpdateDateTimeFieldCommandArchiveDefaultTypeInternal;
extern UpdateDateTimeFieldCommandArchiveDefaultTypeInternal _UpdateDateTimeFieldCommandArchive_default_instance_;
class UpdateFlowInfoCommandArchive;
struct UpdateFlowInfoCommandArchiveDefaultTypeInternal;
extern UpdateFlowInfoCommandArchiveDefaultTypeInternal _UpdateFlowInfoCommandArchive_default_instance_;
}  // namespace TSWP
PROTOBUF_NAMESPACE_OPEN
template<> ::TSWP::AddFlowInfoCommandArchive* Arena::CreateMaybeMessage<::TSWP::AddFlowInfoCommandArchive>(Arena*);
template<> ::TSWP::AnchorAttachmentCommandArchive* Arena::CreateMaybeMessage<::TSWP::AnchorAttachmentCommandArchive>(Arena*);
template<> ::TSWP::ApplyPlaceholderTextCommandArchive* Arena::CreateMaybeMessage<::TSWP::ApplyPlaceholderTextCommandArchive>(Arena*);
template<> ::TSWP::ApplyRubyTextCommandArchive* Arena::CreateMaybeMessage<::TSWP::ApplyRubyTextCommandArchive>(Arena*);
template<> ::TSWP::CharacterStyleChangePropertyCommand_GArchive* Arena::CreateMaybeMessage<::TSWP::CharacterStyleChangePropertyCommand_GArchive>(Arena*);
template<> ::TSWP::ContainedObjectsCommandArchive* Arena::CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive>(Arena*);
template<> ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* Arena::CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs>(Arena*);
template<> ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* Arena::CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs>(Arena*);
template<> ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* Arena::CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs>(Arena*);
template<> ::TSWP::DummyCommandArchive* Arena::CreateMaybeMessage<::TSWP::DummyCommandArchive>(Arena*);
template<> ::TSWP::EquationInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TSWP::EquationInfoGeometryCommandArchive>(Arena*);
template<> ::TSWP::InsertColumnsCommandArchive* Arena::CreateMaybeMessage<::TSWP::InsertColumnsCommandArchive>(Arena*);
template<> ::TSWP::InsertRowsCommandArchive* Arena::CreateMaybeMessage<::TSWP::InsertRowsCommandArchive>(Arena*);
template<> ::TSWP::MergeCellsCommandArchive* Arena::CreateMaybeMessage<::TSWP::MergeCellsCommandArchive>(Arena*);
template<> ::TSWP::ModifyRubyTextCommandArchive* Arena::CreateMaybeMessage<::TSWP::ModifyRubyTextCommandArchive>(Arena*);
template<> ::TSWP::ModifyTOCSettingsBaseCommandArchive* Arena::CreateMaybeMessage<::TSWP::ModifyTOCSettingsBaseCommandArchive>(Arena*);
template<> ::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive* Arena::CreateMaybeMessage<::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive>(Arena*);
template<> ::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive* Arena::CreateMaybeMessage<::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive>(Arena*);
template<> ::TSWP::MoveColumnsCommandArchive* Arena::CreateMaybeMessage<::TSWP::MoveColumnsCommandArchive>(Arena*);
template<> ::TSWP::MoveRowsCommandArchive* Arena::CreateMaybeMessage<::TSWP::MoveRowsCommandArchive>(Arena*);
template<> ::TSWP::ObjectPropertyArchive* Arena::CreateMaybeMessage<::TSWP::ObjectPropertyArchive>(Arena*);
template<> ::TSWP::ParagraphStyleChangePropertyCommand_GArchive* Arena::CreateMaybeMessage<::TSWP::ParagraphStyleChangePropertyCommand_GArchive>(Arena*);
template<> ::TSWP::PencilAnnotationSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSWP::PencilAnnotationSelectionTransformerArchive>(Arena*);
template<> ::TSWP::RemoveColumnsCommandArchive* Arena::CreateMaybeMessage<::TSWP::RemoveColumnsCommandArchive>(Arena*);
template<> ::TSWP::RemoveFlowInfoCommandArchive* Arena::CreateMaybeMessage<::TSWP::RemoveFlowInfoCommandArchive>(Arena*);
template<> ::TSWP::RemoveRowsCommandArchive* Arena::CreateMaybeMessage<::TSWP::RemoveRowsCommandArchive>(Arena*);
template<> ::TSWP::ReplaceAllUsesOfStyleCommandArchive* Arena::CreateMaybeMessage<::TSWP::ReplaceAllUsesOfStyleCommandArchive>(Arena*);
template<> ::TSWP::SelectionTransformerArchive* Arena::CreateMaybeMessage<::TSWP::SelectionTransformerArchive>(Arena*);
template<> ::TSWP::SetColumnStyleCommandArchive* Arena::CreateMaybeMessage<::TSWP::SetColumnStyleCommandArchive>(Arena*);
template<> ::TSWP::SetObjectPropertiesCommandArchive* Arena::CreateMaybeMessage<::TSWP::SetObjectPropertiesCommandArchive>(Arena*);
template<> ::TSWP::ShapeApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSWP::ShapeApplyPresetCommandArchive>(Arena*);
template<> ::TSWP::ShapeContentDescription* Arena::CreateMaybeMessage<::TSWP::ShapeContentDescription>(Arena*);
template<> ::TSWP::ShapeSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSWP::ShapeSelectionTransformerArchive>(Arena*);
template<> ::TSWP::ShapeStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSWP::ShapeStyleSetValueCommandArchive>(Arena*);
template<> ::TSWP::StorageActionCommandArchive* Arena::CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(Arena*);
template<> ::TSWP::StyleBaseCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(Arena*);
template<> ::TSWP::StyleCreateCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleCreateCommandArchive>(Arena*);
template<> ::TSWP::StyleDeleteCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleDeleteCommandArchive>(Arena*);
template<> ::TSWP::StyleRenameCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleRenameCommandArchive>(Arena*);
template<> ::TSWP::StyleReorderCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleReorderCommandArchive>(Arena*);
template<> ::TSWP::StyleUpdateCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleUpdateCommandArchive>(Arena*);
template<> ::TSWP::StyleUpdatePropertyMapCommandArchive* Arena::CreateMaybeMessage<::TSWP::StyleUpdatePropertyMapCommandArchive>(Arena*);
template<> ::TSWP::TextApplyThemeCommandArchive* Arena::CreateMaybeMessage<::TSWP::TextApplyThemeCommandArchive>(Arena*);
template<> ::TSWP::TextCommandArchive* Arena::CreateMaybeMessage<::TSWP::TextCommandArchive>(Arena*);
template<> ::TSWP::TextCommentReplyCommandArchive* Arena::CreateMaybeMessage<::TSWP::TextCommentReplyCommandArchive>(Arena*);
template<> ::TSWP::UpdateDateTimeFieldCommandArchive* Arena::CreateMaybeMessage<::TSWP::UpdateDateTimeFieldCommandArchive>(Arena*);
template<> ::TSWP::UpdateFlowInfoCommandArchive* Arena::CreateMaybeMessage<::TSWP::UpdateFlowInfoCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSWP {

enum TextCommandArchive_Kind : int {
  TextCommandArchive_Kind_kKindContained = 0,
  TextCommandArchive_Kind_kKindReplaceText = 1,
  TextCommandArchive_Kind_kKindPaste = 2,
  TextCommandArchive_Kind_kKindParagraphStyle = 3,
  TextCommandArchive_Kind_kKindListStyle = 4,
  TextCommandArchive_Kind_kKindIndentParagraphLevel = 5,
  TextCommandArchive_Kind_kKindDragText = 6,
  TextCommandArchive_Kind_kKindPasteStyle = 7,
  TextCommandArchive_Kind_kKindApplyChangesInRange = 8,
  TextCommandArchive_Kind_kKindInsertCitationField = 10,
  TextCommandArchive_Kind_kKindInsertBibliographyEntry = 11,
  TextCommandArchive_Kind_kKindFormatCitationFields = 12,
  TextCommandArchive_Kind_kKindInsertTOCSmartField = 13,
  TextCommandArchive_Kind_kKindInsertDateTimeField = 14,
  TextCommandArchive_Kind_kKindUpdateDateTimeField = 15,
  TextCommandArchive_Kind_kKindSetParagraphFirstTopicNumber = 16,
  TextCommandArchive_Kind_kKindCharacterStyle = 17,
  TextCommandArchive_Kind_kKindRevertStyles = 18,
  TextCommandArchive_Kind_kKindSetParagraphBidi = 19
};
bool TextCommandArchive_Kind_IsValid(int value);
constexpr TextCommandArchive_Kind TextCommandArchive_Kind_Kind_MIN = TextCommandArchive_Kind_kKindContained;
constexpr TextCommandArchive_Kind TextCommandArchive_Kind_Kind_MAX = TextCommandArchive_Kind_kKindSetParagraphBidi;
constexpr int TextCommandArchive_Kind_Kind_ARRAYSIZE = TextCommandArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextCommandArchive_Kind_descriptor();
template<typename T>
inline const std::string& TextCommandArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextCommandArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextCommandArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextCommandArchive_Kind_descriptor(), enum_t_value);
}
inline bool TextCommandArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextCommandArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextCommandArchive_Kind>(
    TextCommandArchive_Kind_descriptor(), name, value);
}
enum StorageActionCommandArchive_Kind : int {
  StorageActionCommandArchive_Kind_kKindContained = 0,
  StorageActionCommandArchive_Kind_kKindReplaceText = 1,
  StorageActionCommandArchive_Kind_kKindPaste = 2,
  StorageActionCommandArchive_Kind_kKindParagraphStyle = 3,
  StorageActionCommandArchive_Kind_kKindListStyle = 4,
  StorageActionCommandArchive_Kind_kKindIndentParagraphLevel = 5,
  StorageActionCommandArchive_Kind_kKindDragText = 6,
  StorageActionCommandArchive_Kind_kKindPasteStyle = 7,
  StorageActionCommandArchive_Kind_kKindApplyChangesInRange = 8,
  StorageActionCommandArchive_Kind_kKindInsertCitationField = 10,
  StorageActionCommandArchive_Kind_kKindInsertBibliographyEntry = 11,
  StorageActionCommandArchive_Kind_kKindFormatCitationFields = 12,
  StorageActionCommandArchive_Kind_kKindInsertTOCSmartField = 13,
  StorageActionCommandArchive_Kind_kKindInsertDateTimeField = 14,
  StorageActionCommandArchive_Kind_kKindUpdateDateTimeField = 15,
  StorageActionCommandArchive_Kind_kKindSetParagraphFirstTopicNumber = 16,
  StorageActionCommandArchive_Kind_kKindCharacterStyle = 17,
  StorageActionCommandArchive_Kind_kKindRevertStyles = 18,
  StorageActionCommandArchive_Kind_kKindSetParagraphBidi = 19,
  StorageActionCommandArchive_Kind_kKindFormatText = 20,
  StorageActionCommandArchive_Kind_kKindInsertAttachment = 21,
  StorageActionCommandArchive_Kind_kKindCreateHyperlink = 22,
  StorageActionCommandArchive_Kind_kKindModifyHyperlink = 23,
  StorageActionCommandArchive_Kind_kKindRemoveHyperlink = 24,
  StorageActionCommandArchive_Kind_kKindApplyHighlightText = 25,
  StorageActionCommandArchive_Kind_kKindPropagateStyleChanges = 26,
  StorageActionCommandArchive_Kind_kKindMovedAnchoredDrawableInline = 27,
  StorageActionCommandArchive_Kind_kKindMoveDrawablesAttached = 28,
  StorageActionCommandArchive_Kind_kKindMoveMoveDrawablesFloating = 29,
  StorageActionCommandArchive_Kind_kKindMoveInlineDrawableAnchored = 30,
  StorageActionCommandArchive_Kind_kKindAnchorAttachment = 31,
  StorageActionCommandArchive_Kind_kKindBookmark = 32,
  StorageActionCommandArchive_Kind_kKindReplaceSection = 33,
  StorageActionCommandArchive_Kind_kKindApplyPencilAnnotation = 34,
  StorageActionCommandArchive_Kind_kKindCreateRuby = 35,
  StorageActionCommandArchive_Kind_kKindModifyRuby = 36,
  StorageActionCommandArchive_Kind_kKindRemoveRuby = 37,
  StorageActionCommandArchive_Kind_kKindTateChuYoko = 38,
  StorageActionCommandArchive_Kind_kKindDropCapStyle = 39
};
bool StorageActionCommandArchive_Kind_IsValid(int value);
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive_Kind_Kind_MIN = StorageActionCommandArchive_Kind_kKindContained;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive_Kind_Kind_MAX = StorageActionCommandArchive_Kind_kKindDropCapStyle;
constexpr int StorageActionCommandArchive_Kind_Kind_ARRAYSIZE = StorageActionCommandArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageActionCommandArchive_Kind_descriptor();
template<typename T>
inline const std::string& StorageActionCommandArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StorageActionCommandArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StorageActionCommandArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StorageActionCommandArchive_Kind_descriptor(), enum_t_value);
}
inline bool StorageActionCommandArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StorageActionCommandArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageActionCommandArchive_Kind>(
    StorageActionCommandArchive_Kind_descriptor(), name, value);
}
enum UpdateFlowInfoCommandArchive_Mode : int {
  UpdateFlowInfoCommandArchive_Mode_kModeRearrange = 0,
  UpdateFlowInfoCommandArchive_Mode_kModeAdd = 1,
  UpdateFlowInfoCommandArchive_Mode_kModeRemove = 2,
  UpdateFlowInfoCommandArchive_Mode_kModeCompensate = 3
};
bool UpdateFlowInfoCommandArchive_Mode_IsValid(int value);
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive_Mode_Mode_MIN = UpdateFlowInfoCommandArchive_Mode_kModeRearrange;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive_Mode_Mode_MAX = UpdateFlowInfoCommandArchive_Mode_kModeCompensate;
constexpr int UpdateFlowInfoCommandArchive_Mode_Mode_ARRAYSIZE = UpdateFlowInfoCommandArchive_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateFlowInfoCommandArchive_Mode_descriptor();
template<typename T>
inline const std::string& UpdateFlowInfoCommandArchive_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateFlowInfoCommandArchive_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateFlowInfoCommandArchive_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateFlowInfoCommandArchive_Mode_descriptor(), enum_t_value);
}
inline bool UpdateFlowInfoCommandArchive_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateFlowInfoCommandArchive_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateFlowInfoCommandArchive_Mode>(
    UpdateFlowInfoCommandArchive_Mode_descriptor(), name, value);
}
enum ObjectPropertyType : int {
  kObjectPropertyTypeBool = 0,
  kObjectPropertyTypeFloat = 1,
  kObjectPropertyTypeInteger = 2,
  kObjectPropertyTypeString = 3,
  kObjectPropertyTypeIdPath = 4,
  kObjectPropertyTypeFill = 5,
  kObjectPropertyTypeColor = 6,
  kObjectPropertyTypeShadow = 7
};
bool ObjectPropertyType_IsValid(int value);
constexpr ObjectPropertyType ObjectPropertyType_MIN = kObjectPropertyTypeBool;
constexpr ObjectPropertyType ObjectPropertyType_MAX = kObjectPropertyTypeShadow;
constexpr int ObjectPropertyType_ARRAYSIZE = ObjectPropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectPropertyType_descriptor();
template<typename T>
inline const std::string& ObjectPropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectPropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectPropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectPropertyType_descriptor(), enum_t_value);
}
inline bool ObjectPropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectPropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectPropertyType>(
    ObjectPropertyType_descriptor(), name, value);
}
// ===================================================================

class DummyCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.DummyCommandArchive) */ {
 public:
  inline DummyCommandArchive() : DummyCommandArchive(nullptr) {}
  ~DummyCommandArchive() override;
  explicit constexpr DummyCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DummyCommandArchive(const DummyCommandArchive& from);
  DummyCommandArchive(DummyCommandArchive&& from) noexcept
    : DummyCommandArchive() {
    *this = ::std::move(from);
  }

  inline DummyCommandArchive& operator=(const DummyCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyCommandArchive& operator=(DummyCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DummyCommandArchive*>(
               &_DummyCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DummyCommandArchive& a, DummyCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyCommandArchive* New() const final {
    return new DummyCommandArchive();
  }

  DummyCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DummyCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DummyCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.DummyCommandArchive";
  }
  protected:
  explicit DummyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 1,
  };
  // required uint32 foo = 1;
  bool has_foo() const;
  private:
  bool _internal_has_foo() const;
  public:
  void clear_foo();
  ::PROTOBUF_NAMESPACE_ID::uint32 foo() const;
  void set_foo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_foo() const;
  void _internal_set_foo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.DummyCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 foo_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TextCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextCommandArchive) */ {
 public:
  inline TextCommandArchive() : TextCommandArchive(nullptr) {}
  ~TextCommandArchive() override;
  explicit constexpr TextCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextCommandArchive(const TextCommandArchive& from);
  TextCommandArchive(TextCommandArchive&& from) noexcept
    : TextCommandArchive() {
    *this = ::std::move(from);
  }

  inline TextCommandArchive& operator=(const TextCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextCommandArchive& operator=(TextCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TextCommandArchive*>(
               &_TextCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextCommandArchive& a, TextCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextCommandArchive* New() const final {
    return new TextCommandArchive();
  }

  TextCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextCommandArchive";
  }
  protected:
  explicit TextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TextCommandArchive_Kind Kind;
  static constexpr Kind kKindContained =
    TextCommandArchive_Kind_kKindContained;
  static constexpr Kind kKindReplaceText =
    TextCommandArchive_Kind_kKindReplaceText;
  static constexpr Kind kKindPaste =
    TextCommandArchive_Kind_kKindPaste;
  static constexpr Kind kKindParagraphStyle =
    TextCommandArchive_Kind_kKindParagraphStyle;
  static constexpr Kind kKindListStyle =
    TextCommandArchive_Kind_kKindListStyle;
  static constexpr Kind kKindIndentParagraphLevel =
    TextCommandArchive_Kind_kKindIndentParagraphLevel;
  static constexpr Kind kKindDragText =
    TextCommandArchive_Kind_kKindDragText;
  static constexpr Kind kKindPasteStyle =
    TextCommandArchive_Kind_kKindPasteStyle;
  static constexpr Kind kKindApplyChangesInRange =
    TextCommandArchive_Kind_kKindApplyChangesInRange;
  static constexpr Kind kKindInsertCitationField =
    TextCommandArchive_Kind_kKindInsertCitationField;
  static constexpr Kind kKindInsertBibliographyEntry =
    TextCommandArchive_Kind_kKindInsertBibliographyEntry;
  static constexpr Kind kKindFormatCitationFields =
    TextCommandArchive_Kind_kKindFormatCitationFields;
  static constexpr Kind kKindInsertTOCSmartField =
    TextCommandArchive_Kind_kKindInsertTOCSmartField;
  static constexpr Kind kKindInsertDateTimeField =
    TextCommandArchive_Kind_kKindInsertDateTimeField;
  static constexpr Kind kKindUpdateDateTimeField =
    TextCommandArchive_Kind_kKindUpdateDateTimeField;
  static constexpr Kind kKindSetParagraphFirstTopicNumber =
    TextCommandArchive_Kind_kKindSetParagraphFirstTopicNumber;
  static constexpr Kind kKindCharacterStyle =
    TextCommandArchive_Kind_kKindCharacterStyle;
  static constexpr Kind kKindRevertStyles =
    TextCommandArchive_Kind_kKindRevertStyles;
  static constexpr Kind kKindSetParagraphBidi =
    TextCommandArchive_Kind_kKindSetParagraphBidi;
  static inline bool Kind_IsValid(int value) {
    return TextCommandArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    TextCommandArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    TextCommandArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    TextCommandArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return TextCommandArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return TextCommandArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return TextCommandArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 3,
    kRestoreRangeLocationFieldNumber = 4,
    kRestoreRangeLengthFieldNumber = 5,
    kRedoRestoreRangeLocationFieldNumber = 6,
    kRedoRestoreRangeLengthFieldNumber = 7,
    kTextCommandFlagsFieldNumber = 9,
    kKindFieldNumber = 10,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 restore_range_location = 4;
  bool has_restore_range_location() const;
  private:
  bool _internal_has_restore_range_location() const;
  public:
  void clear_restore_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 restore_range_location() const;
  void set_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_restore_range_location() const;
  void _internal_set_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 restore_range_length = 5;
  bool has_restore_range_length() const;
  private:
  bool _internal_has_restore_range_length() const;
  public:
  void clear_restore_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 restore_range_length() const;
  void set_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_restore_range_length() const;
  void _internal_set_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 redo_restore_range_location = 6;
  bool has_redo_restore_range_location() const;
  private:
  bool _internal_has_redo_restore_range_location() const;
  public:
  void clear_redo_restore_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_restore_range_location() const;
  void set_redo_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redo_restore_range_location() const;
  void _internal_set_redo_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 redo_restore_range_length = 7;
  bool has_redo_restore_range_length() const;
  private:
  bool _internal_has_redo_restore_range_length() const;
  public:
  void clear_redo_restore_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_restore_range_length() const;
  void set_redo_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redo_restore_range_length() const;
  void _internal_set_redo_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 text_command_flags = 9;
  bool has_text_command_flags() const;
  private:
  bool _internal_has_text_command_flags() const;
  public:
  void clear_text_command_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 text_command_flags() const;
  void set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_text_command_flags() const;
  void _internal_set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::TextCommandArchive_Kind kind() const;
  void set_kind(::TSWP::TextCommandArchive_Kind value);
  private:
  ::TSWP::TextCommandArchive_Kind _internal_kind() const;
  void _internal_set_kind(::TSWP::TextCommandArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TextCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 restore_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 restore_range_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_restore_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_restore_range_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 text_command_flags_;
  int kind_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StorageActionCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StorageActionCommandArchive) */ {
 public:
  inline StorageActionCommandArchive() : StorageActionCommandArchive(nullptr) {}
  ~StorageActionCommandArchive() override;
  explicit constexpr StorageActionCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageActionCommandArchive(const StorageActionCommandArchive& from);
  StorageActionCommandArchive(StorageActionCommandArchive&& from) noexcept
    : StorageActionCommandArchive() {
    *this = ::std::move(from);
  }

  inline StorageActionCommandArchive& operator=(const StorageActionCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageActionCommandArchive& operator=(StorageActionCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageActionCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageActionCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StorageActionCommandArchive*>(
               &_StorageActionCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StorageActionCommandArchive& a, StorageActionCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageActionCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageActionCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageActionCommandArchive* New() const final {
    return new StorageActionCommandArchive();
  }

  StorageActionCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageActionCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageActionCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StorageActionCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageActionCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StorageActionCommandArchive";
  }
  protected:
  explicit StorageActionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StorageActionCommandArchive_Kind Kind;
  static constexpr Kind kKindContained =
    StorageActionCommandArchive_Kind_kKindContained;
  static constexpr Kind kKindReplaceText =
    StorageActionCommandArchive_Kind_kKindReplaceText;
  static constexpr Kind kKindPaste =
    StorageActionCommandArchive_Kind_kKindPaste;
  static constexpr Kind kKindParagraphStyle =
    StorageActionCommandArchive_Kind_kKindParagraphStyle;
  static constexpr Kind kKindListStyle =
    StorageActionCommandArchive_Kind_kKindListStyle;
  static constexpr Kind kKindIndentParagraphLevel =
    StorageActionCommandArchive_Kind_kKindIndentParagraphLevel;
  static constexpr Kind kKindDragText =
    StorageActionCommandArchive_Kind_kKindDragText;
  static constexpr Kind kKindPasteStyle =
    StorageActionCommandArchive_Kind_kKindPasteStyle;
  static constexpr Kind kKindApplyChangesInRange =
    StorageActionCommandArchive_Kind_kKindApplyChangesInRange;
  static constexpr Kind kKindInsertCitationField =
    StorageActionCommandArchive_Kind_kKindInsertCitationField;
  static constexpr Kind kKindInsertBibliographyEntry =
    StorageActionCommandArchive_Kind_kKindInsertBibliographyEntry;
  static constexpr Kind kKindFormatCitationFields =
    StorageActionCommandArchive_Kind_kKindFormatCitationFields;
  static constexpr Kind kKindInsertTOCSmartField =
    StorageActionCommandArchive_Kind_kKindInsertTOCSmartField;
  static constexpr Kind kKindInsertDateTimeField =
    StorageActionCommandArchive_Kind_kKindInsertDateTimeField;
  static constexpr Kind kKindUpdateDateTimeField =
    StorageActionCommandArchive_Kind_kKindUpdateDateTimeField;
  static constexpr Kind kKindSetParagraphFirstTopicNumber =
    StorageActionCommandArchive_Kind_kKindSetParagraphFirstTopicNumber;
  static constexpr Kind kKindCharacterStyle =
    StorageActionCommandArchive_Kind_kKindCharacterStyle;
  static constexpr Kind kKindRevertStyles =
    StorageActionCommandArchive_Kind_kKindRevertStyles;
  static constexpr Kind kKindSetParagraphBidi =
    StorageActionCommandArchive_Kind_kKindSetParagraphBidi;
  static constexpr Kind kKindFormatText =
    StorageActionCommandArchive_Kind_kKindFormatText;
  static constexpr Kind kKindInsertAttachment =
    StorageActionCommandArchive_Kind_kKindInsertAttachment;
  static constexpr Kind kKindCreateHyperlink =
    StorageActionCommandArchive_Kind_kKindCreateHyperlink;
  static constexpr Kind kKindModifyHyperlink =
    StorageActionCommandArchive_Kind_kKindModifyHyperlink;
  static constexpr Kind kKindRemoveHyperlink =
    StorageActionCommandArchive_Kind_kKindRemoveHyperlink;
  static constexpr Kind kKindApplyHighlightText =
    StorageActionCommandArchive_Kind_kKindApplyHighlightText;
  static constexpr Kind kKindPropagateStyleChanges =
    StorageActionCommandArchive_Kind_kKindPropagateStyleChanges;
  static constexpr Kind kKindMovedAnchoredDrawableInline =
    StorageActionCommandArchive_Kind_kKindMovedAnchoredDrawableInline;
  static constexpr Kind kKindMoveDrawablesAttached =
    StorageActionCommandArchive_Kind_kKindMoveDrawablesAttached;
  static constexpr Kind kKindMoveMoveDrawablesFloating =
    StorageActionCommandArchive_Kind_kKindMoveMoveDrawablesFloating;
  static constexpr Kind kKindMoveInlineDrawableAnchored =
    StorageActionCommandArchive_Kind_kKindMoveInlineDrawableAnchored;
  static constexpr Kind kKindAnchorAttachment =
    StorageActionCommandArchive_Kind_kKindAnchorAttachment;
  static constexpr Kind kKindBookmark =
    StorageActionCommandArchive_Kind_kKindBookmark;
  static constexpr Kind kKindReplaceSection =
    StorageActionCommandArchive_Kind_kKindReplaceSection;
  static constexpr Kind kKindApplyPencilAnnotation =
    StorageActionCommandArchive_Kind_kKindApplyPencilAnnotation;
  static constexpr Kind kKindCreateRuby =
    StorageActionCommandArchive_Kind_kKindCreateRuby;
  static constexpr Kind kKindModifyRuby =
    StorageActionCommandArchive_Kind_kKindModifyRuby;
  static constexpr Kind kKindRemoveRuby =
    StorageActionCommandArchive_Kind_kKindRemoveRuby;
  static constexpr Kind kKindTateChuYoko =
    StorageActionCommandArchive_Kind_kKindTateChuYoko;
  static constexpr Kind kKindDropCapStyle =
    StorageActionCommandArchive_Kind_kKindDropCapStyle;
  static inline bool Kind_IsValid(int value) {
    return StorageActionCommandArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    StorageActionCommandArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    StorageActionCommandArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    StorageActionCommandArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return StorageActionCommandArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return StorageActionCommandArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return StorageActionCommandArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 6,
    kCoalescingPropertyFieldNumber = 12,
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 3,
    kChangedDataReferenceRecordFieldNumber = 11,
    kTextCommandFlagsFieldNumber = 4,
    kKindFieldNumber = 5,
    kIsForwardInverseCommandFieldNumber = 7,
    kCoalesceableFieldNumber = 8,
    kCoalescingTextFieldNumber = 9,
    kShouldMigrateStylesFieldNumber = 10,
  };
  // repeated .TSP.UUID custom_format_keys = 6;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // optional string coalescing_property = 12;
  bool has_coalescing_property() const;
  private:
  bool _internal_has_coalescing_property() const;
  public:
  void clear_coalescing_property();
  const std::string& coalescing_property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coalescing_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coalescing_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_coalescing_property();
  void set_allocated_coalescing_property(std::string* coalescing_property);
  private:
  const std::string& _internal_coalescing_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coalescing_property(const std::string& value);
  std::string* _internal_mutable_coalescing_property();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::UUIDPath& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage();
  ::TSP::UUIDPath* mutable_storage();
  void set_allocated_storage(::TSP::UUIDPath* storage);
  private:
  const ::TSP::UUIDPath& _internal_storage() const;
  ::TSP::UUIDPath* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::UUIDPath* storage);
  ::TSP::UUIDPath* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional .TSK.DataReferenceRecord changed_data_reference_record = 11;
  bool has_changed_data_reference_record() const;
  private:
  bool _internal_has_changed_data_reference_record() const;
  public:
  void clear_changed_data_reference_record();
  const ::TSK::DataReferenceRecord& changed_data_reference_record() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::DataReferenceRecord* release_changed_data_reference_record();
  ::TSK::DataReferenceRecord* mutable_changed_data_reference_record();
  void set_allocated_changed_data_reference_record(::TSK::DataReferenceRecord* changed_data_reference_record);
  private:
  const ::TSK::DataReferenceRecord& _internal_changed_data_reference_record() const;
  ::TSK::DataReferenceRecord* _internal_mutable_changed_data_reference_record();
  public:
  void unsafe_arena_set_allocated_changed_data_reference_record(
      ::TSK::DataReferenceRecord* changed_data_reference_record);
  ::TSK::DataReferenceRecord* unsafe_arena_release_changed_data_reference_record();

  // optional uint32 text_command_flags = 4;
  bool has_text_command_flags() const;
  private:
  bool _internal_has_text_command_flags() const;
  public:
  void clear_text_command_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 text_command_flags() const;
  void set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_text_command_flags() const;
  void _internal_set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TSWP.StorageActionCommandArchive.Kind kind = 5 [default = kKindContained];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TSWP::StorageActionCommandArchive_Kind kind() const;
  void set_kind(::TSWP::StorageActionCommandArchive_Kind value);
  private:
  ::TSWP::StorageActionCommandArchive_Kind _internal_kind() const;
  void _internal_set_kind(::TSWP::StorageActionCommandArchive_Kind value);
  public:

  // optional bool is_forward_inverse_command = 7;
  bool has_is_forward_inverse_command() const;
  private:
  bool _internal_has_is_forward_inverse_command() const;
  public:
  void clear_is_forward_inverse_command();
  bool is_forward_inverse_command() const;
  void set_is_forward_inverse_command(bool value);
  private:
  bool _internal_is_forward_inverse_command() const;
  void _internal_set_is_forward_inverse_command(bool value);
  public:

  // optional bool coalesceable = 8;
  bool has_coalesceable() const;
  private:
  bool _internal_has_coalesceable() const;
  public:
  void clear_coalesceable();
  bool coalesceable() const;
  void set_coalesceable(bool value);
  private:
  bool _internal_coalesceable() const;
  void _internal_set_coalesceable(bool value);
  public:

  // optional bool coalescing_text = 9;
  bool has_coalescing_text() const;
  private:
  bool _internal_has_coalescing_text() const;
  public:
  void clear_coalescing_text();
  bool coalescing_text() const;
  void set_coalescing_text(bool value);
  private:
  bool _internal_coalescing_text() const;
  void _internal_set_coalescing_text(bool value);
  public:

  // optional bool should_migrate_styles = 10;
  bool has_should_migrate_styles() const;
  private:
  bool _internal_has_should_migrate_styles() const;
  public:
  void clear_should_migrate_styles();
  bool should_migrate_styles() const;
  void set_should_migrate_styles(bool value);
  private:
  bool _internal_should_migrate_styles() const;
  void _internal_set_should_migrate_styles(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StorageActionCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coalescing_property_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::TSK::DataReferenceRecord* changed_data_reference_record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 text_command_flags_;
  int kind_;
  bool is_forward_inverse_command_;
  bool coalesceable_;
  bool coalescing_text_;
  bool should_migrate_styles_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SetColumnStyleCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SetColumnStyleCommandArchive) */ {
 public:
  inline SetColumnStyleCommandArchive() : SetColumnStyleCommandArchive(nullptr) {}
  ~SetColumnStyleCommandArchive() override;
  explicit constexpr SetColumnStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetColumnStyleCommandArchive(const SetColumnStyleCommandArchive& from);
  SetColumnStyleCommandArchive(SetColumnStyleCommandArchive&& from) noexcept
    : SetColumnStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline SetColumnStyleCommandArchive& operator=(const SetColumnStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetColumnStyleCommandArchive& operator=(SetColumnStyleCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetColumnStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetColumnStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SetColumnStyleCommandArchive*>(
               &_SetColumnStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetColumnStyleCommandArchive& a, SetColumnStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SetColumnStyleCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetColumnStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetColumnStyleCommandArchive* New() const final {
    return new SetColumnStyleCommandArchive();
  }

  SetColumnStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetColumnStyleCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetColumnStyleCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetColumnStyleCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetColumnStyleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SetColumnStyleCommandArchive";
  }
  protected:
  explicit SetColumnStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 3,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // @@protoc_insertion_point(class_scope:TSWP.SetColumnStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ReplaceAllUsesOfStyleCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ReplaceAllUsesOfStyleCommandArchive) */ {
 public:
  inline ReplaceAllUsesOfStyleCommandArchive() : ReplaceAllUsesOfStyleCommandArchive(nullptr) {}
  ~ReplaceAllUsesOfStyleCommandArchive() override;
  explicit constexpr ReplaceAllUsesOfStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceAllUsesOfStyleCommandArchive(const ReplaceAllUsesOfStyleCommandArchive& from);
  ReplaceAllUsesOfStyleCommandArchive(ReplaceAllUsesOfStyleCommandArchive&& from) noexcept
    : ReplaceAllUsesOfStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline ReplaceAllUsesOfStyleCommandArchive& operator=(const ReplaceAllUsesOfStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceAllUsesOfStyleCommandArchive& operator=(ReplaceAllUsesOfStyleCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceAllUsesOfStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceAllUsesOfStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ReplaceAllUsesOfStyleCommandArchive*>(
               &_ReplaceAllUsesOfStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplaceAllUsesOfStyleCommandArchive& a, ReplaceAllUsesOfStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceAllUsesOfStyleCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceAllUsesOfStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceAllUsesOfStyleCommandArchive* New() const final {
    return new ReplaceAllUsesOfStyleCommandArchive();
  }

  ReplaceAllUsesOfStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceAllUsesOfStyleCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceAllUsesOfStyleCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReplaceAllUsesOfStyleCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceAllUsesOfStyleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ReplaceAllUsesOfStyleCommandArchive";
  }
  protected:
  explicit ReplaceAllUsesOfStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 3,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // @@protoc_insertion_point(class_scope:TSWP.ReplaceAllUsesOfStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertColumnsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.InsertColumnsCommandArchive) */ {
 public:
  inline InsertColumnsCommandArchive() : InsertColumnsCommandArchive(nullptr) {}
  ~InsertColumnsCommandArchive() override;
  explicit constexpr InsertColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertColumnsCommandArchive(const InsertColumnsCommandArchive& from);
  InsertColumnsCommandArchive(InsertColumnsCommandArchive&& from) noexcept
    : InsertColumnsCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertColumnsCommandArchive& operator=(const InsertColumnsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertColumnsCommandArchive& operator=(InsertColumnsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertColumnsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertColumnsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertColumnsCommandArchive*>(
               &_InsertColumnsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InsertColumnsCommandArchive& a, InsertColumnsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertColumnsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertColumnsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertColumnsCommandArchive* New() const final {
    return new InsertColumnsCommandArchive();
  }

  InsertColumnsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertColumnsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertColumnsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertColumnsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertColumnsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.InsertColumnsCommandArchive";
  }
  protected:
  explicit InsertColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
    kColumnIndexFieldNumber = 3,
    kColumnCountFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 column_index = 3;
  bool has_column_index() const;
  private:
  bool _internal_has_column_index() const;
  public:
  void clear_column_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_index() const;
  void set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_index() const;
  void _internal_set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column_count = 4;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.InsertColumnsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertRowsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.InsertRowsCommandArchive) */ {
 public:
  inline InsertRowsCommandArchive() : InsertRowsCommandArchive(nullptr) {}
  ~InsertRowsCommandArchive() override;
  explicit constexpr InsertRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertRowsCommandArchive(const InsertRowsCommandArchive& from);
  InsertRowsCommandArchive(InsertRowsCommandArchive&& from) noexcept
    : InsertRowsCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertRowsCommandArchive& operator=(const InsertRowsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRowsCommandArchive& operator=(InsertRowsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertRowsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertRowsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertRowsCommandArchive*>(
               &_InsertRowsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InsertRowsCommandArchive& a, InsertRowsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRowsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRowsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertRowsCommandArchive* New() const final {
    return new InsertRowsCommandArchive();
  }

  InsertRowsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertRowsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertRowsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertRowsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRowsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.InsertRowsCommandArchive";
  }
  protected:
  explicit InsertRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
    kRowIndexFieldNumber = 3,
    kRowCountFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 row_index = 3;
  bool has_row_index() const;
  private:
  bool _internal_has_row_index() const;
  public:
  void clear_row_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_index() const;
  void set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_index() const;
  void _internal_set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row_count = 4;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.InsertRowsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveColumnsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.RemoveColumnsCommandArchive) */ {
 public:
  inline RemoveColumnsCommandArchive() : RemoveColumnsCommandArchive(nullptr) {}
  ~RemoveColumnsCommandArchive() override;
  explicit constexpr RemoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveColumnsCommandArchive(const RemoveColumnsCommandArchive& from);
  RemoveColumnsCommandArchive(RemoveColumnsCommandArchive&& from) noexcept
    : RemoveColumnsCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveColumnsCommandArchive& operator=(const RemoveColumnsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveColumnsCommandArchive& operator=(RemoveColumnsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveColumnsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveColumnsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveColumnsCommandArchive*>(
               &_RemoveColumnsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoveColumnsCommandArchive& a, RemoveColumnsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveColumnsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveColumnsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveColumnsCommandArchive* New() const final {
    return new RemoveColumnsCommandArchive();
  }

  RemoveColumnsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveColumnsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveColumnsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveColumnsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveColumnsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.RemoveColumnsCommandArchive";
  }
  protected:
  explicit RemoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
    kColumnIndexFieldNumber = 3,
    kColumnCountFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 column_index = 3;
  bool has_column_index() const;
  private:
  bool _internal_has_column_index() const;
  public:
  void clear_column_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_index() const;
  void set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_index() const;
  void _internal_set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column_count = 4;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.RemoveColumnsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveRowsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.RemoveRowsCommandArchive) */ {
 public:
  inline RemoveRowsCommandArchive() : RemoveRowsCommandArchive(nullptr) {}
  ~RemoveRowsCommandArchive() override;
  explicit constexpr RemoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveRowsCommandArchive(const RemoveRowsCommandArchive& from);
  RemoveRowsCommandArchive(RemoveRowsCommandArchive&& from) noexcept
    : RemoveRowsCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveRowsCommandArchive& operator=(const RemoveRowsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRowsCommandArchive& operator=(RemoveRowsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveRowsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRowsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveRowsCommandArchive*>(
               &_RemoveRowsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveRowsCommandArchive& a, RemoveRowsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRowsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRowsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRowsCommandArchive* New() const final {
    return new RemoveRowsCommandArchive();
  }

  RemoveRowsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRowsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveRowsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveRowsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRowsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.RemoveRowsCommandArchive";
  }
  protected:
  explicit RemoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
    kRowIndexFieldNumber = 3,
    kRowCountFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 row_index = 3;
  bool has_row_index() const;
  private:
  bool _internal_has_row_index() const;
  public:
  void clear_row_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_index() const;
  void set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_index() const;
  void _internal_set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row_count = 4;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.RemoveRowsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeCellsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.MergeCellsCommandArchive) */ {
 public:
  inline MergeCellsCommandArchive() : MergeCellsCommandArchive(nullptr) {}
  ~MergeCellsCommandArchive() override;
  explicit constexpr MergeCellsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeCellsCommandArchive(const MergeCellsCommandArchive& from);
  MergeCellsCommandArchive(MergeCellsCommandArchive&& from) noexcept
    : MergeCellsCommandArchive() {
    *this = ::std::move(from);
  }

  inline MergeCellsCommandArchive& operator=(const MergeCellsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeCellsCommandArchive& operator=(MergeCellsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeCellsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeCellsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MergeCellsCommandArchive*>(
               &_MergeCellsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MergeCellsCommandArchive& a, MergeCellsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeCellsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeCellsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeCellsCommandArchive* New() const final {
    return new MergeCellsCommandArchive();
  }

  MergeCellsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeCellsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MergeCellsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MergeCellsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeCellsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.MergeCellsCommandArchive";
  }
  protected:
  explicit MergeCellsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 7,
    kRowFieldNumber = 3,
    kColumnFieldNumber = 4,
    kRowCountFieldNumber = 5,
    kColumnCountFieldNumber = 6,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 7;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 row = 3;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column = 4;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row_count = 5;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column_count = 6;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.MergeCellsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ApplyPlaceholderTextCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ApplyPlaceholderTextCommandArchive) */ {
 public:
  inline ApplyPlaceholderTextCommandArchive() : ApplyPlaceholderTextCommandArchive(nullptr) {}
  ~ApplyPlaceholderTextCommandArchive() override;
  explicit constexpr ApplyPlaceholderTextCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyPlaceholderTextCommandArchive(const ApplyPlaceholderTextCommandArchive& from);
  ApplyPlaceholderTextCommandArchive(ApplyPlaceholderTextCommandArchive&& from) noexcept
    : ApplyPlaceholderTextCommandArchive() {
    *this = ::std::move(from);
  }

  inline ApplyPlaceholderTextCommandArchive& operator=(const ApplyPlaceholderTextCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyPlaceholderTextCommandArchive& operator=(ApplyPlaceholderTextCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyPlaceholderTextCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyPlaceholderTextCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ApplyPlaceholderTextCommandArchive*>(
               &_ApplyPlaceholderTextCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ApplyPlaceholderTextCommandArchive& a, ApplyPlaceholderTextCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyPlaceholderTextCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyPlaceholderTextCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyPlaceholderTextCommandArchive* New() const final {
    return new ApplyPlaceholderTextCommandArchive();
  }

  ApplyPlaceholderTextCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyPlaceholderTextCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyPlaceholderTextCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyPlaceholderTextCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyPlaceholderTextCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ApplyPlaceholderTextCommandArchive";
  }
  protected:
  explicit ApplyPlaceholderTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptTagFieldNumber = 6,
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
    kSelectionRangeLocationFieldNumber = 3,
    kSelectionRangeLengthFieldNumber = 4,
  };
  // optional string script_tag = 6;
  bool has_script_tag() const;
  private:
  bool _internal_has_script_tag() const;
  public:
  void clear_script_tag();
  const std::string& script_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_script_tag();
  void set_allocated_script_tag(std::string* script_tag);
  private:
  const std::string& _internal_script_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_tag(const std::string& value);
  std::string* _internal_mutable_script_tag();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 selection_range_location = 3;
  bool has_selection_range_location() const;
  private:
  bool _internal_has_selection_range_location() const;
  public:
  void clear_selection_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_location() const;
  void set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selection_range_location() const;
  void _internal_set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 selection_range_length = 4;
  bool has_selection_range_length() const;
  private:
  bool _internal_has_selection_range_length() const;
  public:
  void clear_selection_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_length() const;
  void set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selection_range_length() const;
  void _internal_set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ApplyPlaceholderTextCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_tag_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_length_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UpdateDateTimeFieldCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UpdateDateTimeFieldCommandArchive) */ {
 public:
  inline UpdateDateTimeFieldCommandArchive() : UpdateDateTimeFieldCommandArchive(nullptr) {}
  ~UpdateDateTimeFieldCommandArchive() override;
  explicit constexpr UpdateDateTimeFieldCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDateTimeFieldCommandArchive(const UpdateDateTimeFieldCommandArchive& from);
  UpdateDateTimeFieldCommandArchive(UpdateDateTimeFieldCommandArchive&& from) noexcept
    : UpdateDateTimeFieldCommandArchive() {
    *this = ::std::move(from);
  }

  inline UpdateDateTimeFieldCommandArchive& operator=(const UpdateDateTimeFieldCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDateTimeFieldCommandArchive& operator=(UpdateDateTimeFieldCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDateTimeFieldCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDateTimeFieldCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UpdateDateTimeFieldCommandArchive*>(
               &_UpdateDateTimeFieldCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateDateTimeFieldCommandArchive& a, UpdateDateTimeFieldCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDateTimeFieldCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDateTimeFieldCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDateTimeFieldCommandArchive* New() const final {
    return new UpdateDateTimeFieldCommandArchive();
  }

  UpdateDateTimeFieldCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDateTimeFieldCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDateTimeFieldCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDateTimeFieldCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDateTimeFieldCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UpdateDateTimeFieldCommandArchive";
  }
  protected:
  explicit UpdateDateTimeFieldCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDateTimeFieldFieldNumber = 2,
    kDateFieldNumber = 3,
    kDateStyleFieldNumber = 4,
    kTimeStyleFieldNumber = 5,
  };
  // optional .TSWP.TextCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::TextCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::TextCommandArchive* release_super();
  ::TSWP::TextCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::TextCommandArchive* super);
  private:
  const ::TSWP::TextCommandArchive& _internal_super() const;
  ::TSWP::TextCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::TextCommandArchive* super);
  ::TSWP::TextCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference date_time_field = 2;
  bool has_date_time_field() const;
  private:
  bool _internal_has_date_time_field() const;
  public:
  void clear_date_time_field();
  const ::TSP::Reference& date_time_field() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_date_time_field();
  ::TSP::Reference* mutable_date_time_field();
  void set_allocated_date_time_field(::TSP::Reference* date_time_field);
  private:
  const ::TSP::Reference& _internal_date_time_field() const;
  ::TSP::Reference* _internal_mutable_date_time_field();
  public:
  void unsafe_arena_set_allocated_date_time_field(
      ::TSP::Reference* date_time_field);
  ::TSP::Reference* unsafe_arena_release_date_time_field();

  // optional .TSP.Date date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::TSP::Date& date() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Date* release_date();
  ::TSP::Date* mutable_date();
  void set_allocated_date(::TSP::Date* date);
  private:
  const ::TSP::Date& _internal_date() const;
  ::TSP::Date* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::TSP::Date* date);
  ::TSP::Date* unsafe_arena_release_date();

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  bool has_date_style() const;
  private:
  bool _internal_has_date_style() const;
  public:
  void clear_date_style();
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle date_style() const;
  void set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  private:
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle _internal_date_style() const;
  void _internal_set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  public:

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  bool has_time_style() const;
  private:
  bool _internal_has_time_style() const;
  public:
  void clear_time_style();
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle time_style() const;
  void set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  private:
  ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle _internal_time_style() const;
  void _internal_set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UpdateDateTimeFieldCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::TextCommandArchive* super_;
  ::TSP::Reference* date_time_field_;
  ::TSP::Date* date_;
  int date_style_;
  int time_style_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ApplyRubyTextCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ApplyRubyTextCommandArchive) */ {
 public:
  inline ApplyRubyTextCommandArchive() : ApplyRubyTextCommandArchive(nullptr) {}
  ~ApplyRubyTextCommandArchive() override;
  explicit constexpr ApplyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyRubyTextCommandArchive(const ApplyRubyTextCommandArchive& from);
  ApplyRubyTextCommandArchive(ApplyRubyTextCommandArchive&& from) noexcept
    : ApplyRubyTextCommandArchive() {
    *this = ::std::move(from);
  }

  inline ApplyRubyTextCommandArchive& operator=(const ApplyRubyTextCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyRubyTextCommandArchive& operator=(ApplyRubyTextCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyRubyTextCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyRubyTextCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ApplyRubyTextCommandArchive*>(
               &_ApplyRubyTextCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ApplyRubyTextCommandArchive& a, ApplyRubyTextCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyRubyTextCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyRubyTextCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyRubyTextCommandArchive* New() const final {
    return new ApplyRubyTextCommandArchive();
  }

  ApplyRubyTextCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyRubyTextCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyRubyTextCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplyRubyTextCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyRubyTextCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ApplyRubyTextCommandArchive";
  }
  protected:
  explicit ApplyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRubyTextFieldNumber = 5,
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
    kSelectionRangeLocationFieldNumber = 3,
    kSelectionRangeLengthFieldNumber = 4,
  };
  // optional string ruby_text = 5;
  bool has_ruby_text() const;
  private:
  bool _internal_has_ruby_text() const;
  public:
  void clear_ruby_text();
  const std::string& ruby_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ruby_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ruby_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_ruby_text();
  void set_allocated_ruby_text(std::string* ruby_text);
  private:
  const std::string& _internal_ruby_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ruby_text(const std::string& value);
  std::string* _internal_mutable_ruby_text();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 selection_range_location = 3;
  bool has_selection_range_location() const;
  private:
  bool _internal_has_selection_range_location() const;
  public:
  void clear_selection_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_location() const;
  void set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selection_range_location() const;
  void _internal_set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 selection_range_length = 4;
  bool has_selection_range_length() const;
  private:
  bool _internal_has_selection_range_length() const;
  public:
  void clear_selection_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_length() const;
  void set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selection_range_length() const;
  void _internal_set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ApplyRubyTextCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ruby_text_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_range_length_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ModifyRubyTextCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ModifyRubyTextCommandArchive) */ {
 public:
  inline ModifyRubyTextCommandArchive() : ModifyRubyTextCommandArchive(nullptr) {}
  ~ModifyRubyTextCommandArchive() override;
  explicit constexpr ModifyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyRubyTextCommandArchive(const ModifyRubyTextCommandArchive& from);
  ModifyRubyTextCommandArchive(ModifyRubyTextCommandArchive&& from) noexcept
    : ModifyRubyTextCommandArchive() {
    *this = ::std::move(from);
  }

  inline ModifyRubyTextCommandArchive& operator=(const ModifyRubyTextCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyRubyTextCommandArchive& operator=(ModifyRubyTextCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyRubyTextCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyRubyTextCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ModifyRubyTextCommandArchive*>(
               &_ModifyRubyTextCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ModifyRubyTextCommandArchive& a, ModifyRubyTextCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyRubyTextCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyRubyTextCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyRubyTextCommandArchive* New() const final {
    return new ModifyRubyTextCommandArchive();
  }

  ModifyRubyTextCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyRubyTextCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyRubyTextCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyRubyTextCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyRubyTextCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ModifyRubyTextCommandArchive";
  }
  protected:
  explicit ModifyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRubyTextFieldNumber = 3,
    kBaseTextFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRubyFieldFieldNumber = 2,
    kUndoTransactionFieldNumber = 5,
  };
  // optional string ruby_text = 3;
  bool has_ruby_text() const;
  private:
  bool _internal_has_ruby_text() const;
  public:
  void clear_ruby_text();
  const std::string& ruby_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ruby_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ruby_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_ruby_text();
  void set_allocated_ruby_text(std::string* ruby_text);
  private:
  const std::string& _internal_ruby_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ruby_text(const std::string& value);
  std::string* _internal_mutable_ruby_text();
  public:

  // optional string base_text = 4;
  bool has_base_text() const;
  private:
  bool _internal_has_base_text() const;
  public:
  void clear_base_text();
  const std::string& base_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_base_text();
  void set_allocated_base_text(std::string* base_text);
  private:
  const std::string& _internal_base_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_text(const std::string& value);
  std::string* _internal_mutable_base_text();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference ruby_field = 2;
  bool has_ruby_field() const;
  private:
  bool _internal_has_ruby_field() const;
  public:
  void clear_ruby_field();
  const ::TSP::Reference& ruby_field() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_ruby_field();
  ::TSP::Reference* mutable_ruby_field();
  void set_allocated_ruby_field(::TSP::Reference* ruby_field);
  private:
  const ::TSP::Reference& _internal_ruby_field() const;
  ::TSP::Reference* _internal_mutable_ruby_field();
  public:
  void unsafe_arena_set_allocated_ruby_field(
      ::TSP::Reference* ruby_field);
  ::TSP::Reference* unsafe_arena_release_ruby_field();

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // @@protoc_insertion_point(class_scope:TSWP.ModifyRubyTextCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ruby_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_text_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* ruby_field_;
  ::TSWP::UndoTransaction* undo_transaction_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ModifyTOCSettingsBaseCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ModifyTOCSettingsBaseCommandArchive) */ {
 public:
  inline ModifyTOCSettingsBaseCommandArchive() : ModifyTOCSettingsBaseCommandArchive(nullptr) {}
  ~ModifyTOCSettingsBaseCommandArchive() override;
  explicit constexpr ModifyTOCSettingsBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyTOCSettingsBaseCommandArchive(const ModifyTOCSettingsBaseCommandArchive& from);
  ModifyTOCSettingsBaseCommandArchive(ModifyTOCSettingsBaseCommandArchive&& from) noexcept
    : ModifyTOCSettingsBaseCommandArchive() {
    *this = ::std::move(from);
  }

  inline ModifyTOCSettingsBaseCommandArchive& operator=(const ModifyTOCSettingsBaseCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTOCSettingsBaseCommandArchive& operator=(ModifyTOCSettingsBaseCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyTOCSettingsBaseCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyTOCSettingsBaseCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ModifyTOCSettingsBaseCommandArchive*>(
               &_ModifyTOCSettingsBaseCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ModifyTOCSettingsBaseCommandArchive& a, ModifyTOCSettingsBaseCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTOCSettingsBaseCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTOCSettingsBaseCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTOCSettingsBaseCommandArchive* New() const final {
    return new ModifyTOCSettingsBaseCommandArchive();
  }

  ModifyTOCSettingsBaseCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTOCSettingsBaseCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyTOCSettingsBaseCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyTOCSettingsBaseCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTOCSettingsBaseCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ModifyTOCSettingsBaseCommandArchive";
  }
  protected:
  explicit ModifyTOCSettingsBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldTocSettingsFieldNumber = 2,
    kNewTocSettingsFieldNumber = 3,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_toc_settings = 2;
  bool has_old_toc_settings() const;
  private:
  bool _internal_has_old_toc_settings() const;
  public:
  void clear_old_toc_settings();
  const ::TSP::Reference& old_toc_settings() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_toc_settings();
  ::TSP::Reference* mutable_old_toc_settings();
  void set_allocated_old_toc_settings(::TSP::Reference* old_toc_settings);
  private:
  const ::TSP::Reference& _internal_old_toc_settings() const;
  ::TSP::Reference* _internal_mutable_old_toc_settings();
  public:
  void unsafe_arena_set_allocated_old_toc_settings(
      ::TSP::Reference* old_toc_settings);
  ::TSP::Reference* unsafe_arena_release_old_toc_settings();

  // optional .TSP.Reference new_toc_settings = 3;
  bool has_new_toc_settings() const;
  private:
  bool _internal_has_new_toc_settings() const;
  public:
  void clear_new_toc_settings();
  const ::TSP::Reference& new_toc_settings() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_new_toc_settings();
  ::TSP::Reference* mutable_new_toc_settings();
  void set_allocated_new_toc_settings(::TSP::Reference* new_toc_settings);
  private:
  const ::TSP::Reference& _internal_new_toc_settings() const;
  ::TSP::Reference* _internal_mutable_new_toc_settings();
  public:
  void unsafe_arena_set_allocated_new_toc_settings(
      ::TSP::Reference* new_toc_settings);
  ::TSP::Reference* unsafe_arena_release_new_toc_settings();

  // @@protoc_insertion_point(class_scope:TSWP.ModifyTOCSettingsBaseCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* old_toc_settings_;
  ::TSP::Reference* new_toc_settings_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ModifyTOCSettingsForTOCInfoCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive) */ {
 public:
  inline ModifyTOCSettingsForTOCInfoCommandArchive() : ModifyTOCSettingsForTOCInfoCommandArchive(nullptr) {}
  ~ModifyTOCSettingsForTOCInfoCommandArchive() override;
  explicit constexpr ModifyTOCSettingsForTOCInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyTOCSettingsForTOCInfoCommandArchive(const ModifyTOCSettingsForTOCInfoCommandArchive& from);
  ModifyTOCSettingsForTOCInfoCommandArchive(ModifyTOCSettingsForTOCInfoCommandArchive&& from) noexcept
    : ModifyTOCSettingsForTOCInfoCommandArchive() {
    *this = ::std::move(from);
  }

  inline ModifyTOCSettingsForTOCInfoCommandArchive& operator=(const ModifyTOCSettingsForTOCInfoCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTOCSettingsForTOCInfoCommandArchive& operator=(ModifyTOCSettingsForTOCInfoCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyTOCSettingsForTOCInfoCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyTOCSettingsForTOCInfoCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ModifyTOCSettingsForTOCInfoCommandArchive*>(
               &_ModifyTOCSettingsForTOCInfoCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ModifyTOCSettingsForTOCInfoCommandArchive& a, ModifyTOCSettingsForTOCInfoCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTOCSettingsForTOCInfoCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTOCSettingsForTOCInfoCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTOCSettingsForTOCInfoCommandArchive* New() const final {
    return new ModifyTOCSettingsForTOCInfoCommandArchive();
  }

  ModifyTOCSettingsForTOCInfoCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTOCSettingsForTOCInfoCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTOCSettingsForTOCInfoCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ModifyTOCSettingsForTOCInfoCommandArchive";
  }
  protected:
  explicit ModifyTOCSettingsForTOCInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTocInfoUuidPathFieldNumber = 2,
  };
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ModifyTOCSettingsBaseCommandArchive* release_super();
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::ModifyTOCSettingsBaseCommandArchive* super);
  private:
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive& _internal_super() const;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ModifyTOCSettingsBaseCommandArchive* super);
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath toc_info_uuid_path = 2;
  bool has_toc_info_uuid_path() const;
  private:
  bool _internal_has_toc_info_uuid_path() const;
  public:
  void clear_toc_info_uuid_path();
  const ::TSP::UUIDPath& toc_info_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_toc_info_uuid_path();
  ::TSP::UUIDPath* mutable_toc_info_uuid_path();
  void set_allocated_toc_info_uuid_path(::TSP::UUIDPath* toc_info_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_toc_info_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_toc_info_uuid_path();
  public:
  void unsafe_arena_set_allocated_toc_info_uuid_path(
      ::TSP::UUIDPath* toc_info_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_toc_info_uuid_path();

  // @@protoc_insertion_point(class_scope:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* super_;
  ::TSP::UUIDPath* toc_info_uuid_path_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ModifyTOCSettingsPresetForThemeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive) */ {
 public:
  inline ModifyTOCSettingsPresetForThemeCommandArchive() : ModifyTOCSettingsPresetForThemeCommandArchive(nullptr) {}
  ~ModifyTOCSettingsPresetForThemeCommandArchive() override;
  explicit constexpr ModifyTOCSettingsPresetForThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyTOCSettingsPresetForThemeCommandArchive(const ModifyTOCSettingsPresetForThemeCommandArchive& from);
  ModifyTOCSettingsPresetForThemeCommandArchive(ModifyTOCSettingsPresetForThemeCommandArchive&& from) noexcept
    : ModifyTOCSettingsPresetForThemeCommandArchive() {
    *this = ::std::move(from);
  }

  inline ModifyTOCSettingsPresetForThemeCommandArchive& operator=(const ModifyTOCSettingsPresetForThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTOCSettingsPresetForThemeCommandArchive& operator=(ModifyTOCSettingsPresetForThemeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyTOCSettingsPresetForThemeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyTOCSettingsPresetForThemeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ModifyTOCSettingsPresetForThemeCommandArchive*>(
               &_ModifyTOCSettingsPresetForThemeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ModifyTOCSettingsPresetForThemeCommandArchive& a, ModifyTOCSettingsPresetForThemeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTOCSettingsPresetForThemeCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTOCSettingsPresetForThemeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTOCSettingsPresetForThemeCommandArchive* New() const final {
    return new ModifyTOCSettingsPresetForThemeCommandArchive();
  }

  ModifyTOCSettingsPresetForThemeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTOCSettingsPresetForThemeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTOCSettingsPresetForThemeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ModifyTOCSettingsPresetForThemeCommandArchive";
  }
  protected:
  explicit ModifyTOCSettingsPresetForThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kPresetIndexFieldNumber = 3,
  };
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ModifyTOCSettingsBaseCommandArchive* release_super();
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::ModifyTOCSettingsBaseCommandArchive* super);
  private:
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive& _internal_super() const;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ModifyTOCSettingsBaseCommandArchive* super);
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional uint32 preset_index = 3;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index() const;
  void set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preset_index() const;
  void _internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* super_;
  ::TSP::Reference* theme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class AnchorAttachmentCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.AnchorAttachmentCommandArchive) */ {
 public:
  inline AnchorAttachmentCommandArchive() : AnchorAttachmentCommandArchive(nullptr) {}
  ~AnchorAttachmentCommandArchive() override;
  explicit constexpr AnchorAttachmentCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorAttachmentCommandArchive(const AnchorAttachmentCommandArchive& from);
  AnchorAttachmentCommandArchive(AnchorAttachmentCommandArchive&& from) noexcept
    : AnchorAttachmentCommandArchive() {
    *this = ::std::move(from);
  }

  inline AnchorAttachmentCommandArchive& operator=(const AnchorAttachmentCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorAttachmentCommandArchive& operator=(AnchorAttachmentCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorAttachmentCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchorAttachmentCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AnchorAttachmentCommandArchive*>(
               &_AnchorAttachmentCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AnchorAttachmentCommandArchive& a, AnchorAttachmentCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorAttachmentCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorAttachmentCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnchorAttachmentCommandArchive* New() const final {
    return new AnchorAttachmentCommandArchive();
  }

  AnchorAttachmentCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnchorAttachmentCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnchorAttachmentCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnchorAttachmentCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorAttachmentCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.AnchorAttachmentCommandArchive";
  }
  protected:
  explicit AnchorAttachmentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAttachmentFieldNumber = 2,
    kHOffsetTypeFieldNumber = 3,
    kHOffsetFieldNumber = 4,
    kVOffsetTypeFieldNumber = 5,
    kVOffsetFieldNumber = 6,
    kUndoHOffsetTypeFieldNumber = 8,
    kUndoHOffsetFieldNumber = 9,
    kIsHtmlWrapFieldNumber = 7,
    kUndoIsHtmlWrapFieldNumber = 12,
    kUndoVOffsetTypeFieldNumber = 10,
    kUndoVOffsetFieldNumber = 11,
  };
  // optional .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference attachment = 2;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::TSP::Reference& attachment() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_attachment();
  ::TSP::Reference* mutable_attachment();
  void set_allocated_attachment(::TSP::Reference* attachment);
  private:
  const ::TSP::Reference& _internal_attachment() const;
  ::TSP::Reference* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::TSP::Reference* attachment);
  ::TSP::Reference* unsafe_arena_release_attachment();

  // optional uint32 h_offset_type = 3;
  bool has_h_offset_type() const;
  private:
  bool _internal_has_h_offset_type() const;
  public:
  void clear_h_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type() const;
  void set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h_offset_type() const;
  void _internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float h_offset = 4;
  bool has_h_offset() const;
  private:
  bool _internal_has_h_offset() const;
  public:
  void clear_h_offset();
  float h_offset() const;
  void set_h_offset(float value);
  private:
  float _internal_h_offset() const;
  void _internal_set_h_offset(float value);
  public:

  // optional uint32 v_offset_type = 5;
  bool has_v_offset_type() const;
  private:
  bool _internal_has_v_offset_type() const;
  public:
  void clear_v_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type() const;
  void set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_offset_type() const;
  void _internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float v_offset = 6;
  bool has_v_offset() const;
  private:
  bool _internal_has_v_offset() const;
  public:
  void clear_v_offset();
  float v_offset() const;
  void set_v_offset(float value);
  private:
  float _internal_v_offset() const;
  void _internal_set_v_offset(float value);
  public:

  // optional uint32 undo_h_offset_type = 8;
  bool has_undo_h_offset_type() const;
  private:
  bool _internal_has_undo_h_offset_type() const;
  public:
  void clear_undo_h_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_h_offset_type() const;
  void set_undo_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_h_offset_type() const;
  void _internal_set_undo_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float undo_h_offset = 9;
  bool has_undo_h_offset() const;
  private:
  bool _internal_has_undo_h_offset() const;
  public:
  void clear_undo_h_offset();
  float undo_h_offset() const;
  void set_undo_h_offset(float value);
  private:
  float _internal_undo_h_offset() const;
  void _internal_set_undo_h_offset(float value);
  public:

  // optional bool is_html_wrap = 7;
  bool has_is_html_wrap() const;
  private:
  bool _internal_has_is_html_wrap() const;
  public:
  void clear_is_html_wrap();
  bool is_html_wrap() const;
  void set_is_html_wrap(bool value);
  private:
  bool _internal_is_html_wrap() const;
  void _internal_set_is_html_wrap(bool value);
  public:

  // optional bool undo_is_html_wrap = 12;
  bool has_undo_is_html_wrap() const;
  private:
  bool _internal_has_undo_is_html_wrap() const;
  public:
  void clear_undo_is_html_wrap();
  bool undo_is_html_wrap() const;
  void set_undo_is_html_wrap(bool value);
  private:
  bool _internal_undo_is_html_wrap() const;
  void _internal_set_undo_is_html_wrap(bool value);
  public:

  // optional uint32 undo_v_offset_type = 10;
  bool has_undo_v_offset_type() const;
  private:
  bool _internal_has_undo_v_offset_type() const;
  public:
  void clear_undo_v_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_v_offset_type() const;
  void set_undo_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_v_offset_type() const;
  void _internal_set_undo_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float undo_v_offset = 11;
  bool has_undo_v_offset() const;
  private:
  bool _internal_has_undo_v_offset() const;
  public:
  void clear_undo_v_offset();
  float undo_v_offset() const;
  void set_undo_v_offset(float value);
  private:
  float _internal_undo_v_offset() const;
  void _internal_set_undo_v_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.AnchorAttachmentCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StorageActionCommandArchive* super_;
  ::TSP::Reference* attachment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type_;
  float h_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type_;
  float v_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_h_offset_type_;
  float undo_h_offset_;
  bool is_html_wrap_;
  bool undo_is_html_wrap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_v_offset_type_;
  float undo_v_offset_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TextApplyThemeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextApplyThemeCommandArchive) */ {
 public:
  inline TextApplyThemeCommandArchive() : TextApplyThemeCommandArchive(nullptr) {}
  ~TextApplyThemeCommandArchive() override;
  explicit constexpr TextApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextApplyThemeCommandArchive(const TextApplyThemeCommandArchive& from);
  TextApplyThemeCommandArchive(TextApplyThemeCommandArchive&& from) noexcept
    : TextApplyThemeCommandArchive() {
    *this = ::std::move(from);
  }

  inline TextApplyThemeCommandArchive& operator=(const TextApplyThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextApplyThemeCommandArchive& operator=(TextApplyThemeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextApplyThemeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextApplyThemeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TextApplyThemeCommandArchive*>(
               &_TextApplyThemeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TextApplyThemeCommandArchive& a, TextApplyThemeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextApplyThemeCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextApplyThemeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextApplyThemeCommandArchive* New() const final {
    return new TextApplyThemeCommandArchive();
  }

  TextApplyThemeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextApplyThemeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextApplyThemeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextApplyThemeCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextApplyThemeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextApplyThemeCommandArchive";
  }
  protected:
  explicit TextApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
  };
  // optional .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // @@protoc_insertion_point(class_scope:TSWP.TextApplyThemeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::ApplyThemeChildCommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveColumnsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.MoveColumnsCommandArchive) */ {
 public:
  inline MoveColumnsCommandArchive() : MoveColumnsCommandArchive(nullptr) {}
  ~MoveColumnsCommandArchive() override;
  explicit constexpr MoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveColumnsCommandArchive(const MoveColumnsCommandArchive& from);
  MoveColumnsCommandArchive(MoveColumnsCommandArchive&& from) noexcept
    : MoveColumnsCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveColumnsCommandArchive& operator=(const MoveColumnsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveColumnsCommandArchive& operator=(MoveColumnsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveColumnsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveColumnsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveColumnsCommandArchive*>(
               &_MoveColumnsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MoveColumnsCommandArchive& a, MoveColumnsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveColumnsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveColumnsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveColumnsCommandArchive* New() const final {
    return new MoveColumnsCommandArchive();
  }

  MoveColumnsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveColumnsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveColumnsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveColumnsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveColumnsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.MoveColumnsCommandArchive";
  }
  protected:
  explicit MoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
    kSrcIndexFieldNumber = 3,
    kDstIndexFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 src_index = 3;
  bool has_src_index() const;
  private:
  bool _internal_has_src_index() const;
  public:
  void clear_src_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_index() const;
  void set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_index() const;
  void _internal_set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dst_index = 4;
  bool has_dst_index() const;
  private:
  bool _internal_has_dst_index() const;
  public:
  void clear_dst_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_index() const;
  void set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_index() const;
  void _internal_set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 5;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.MoveColumnsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveRowsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.MoveRowsCommandArchive) */ {
 public:
  inline MoveRowsCommandArchive() : MoveRowsCommandArchive(nullptr) {}
  ~MoveRowsCommandArchive() override;
  explicit constexpr MoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRowsCommandArchive(const MoveRowsCommandArchive& from);
  MoveRowsCommandArchive(MoveRowsCommandArchive&& from) noexcept
    : MoveRowsCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveRowsCommandArchive& operator=(const MoveRowsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRowsCommandArchive& operator=(MoveRowsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRowsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRowsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveRowsCommandArchive*>(
               &_MoveRowsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MoveRowsCommandArchive& a, MoveRowsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRowsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRowsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRowsCommandArchive* New() const final {
    return new MoveRowsCommandArchive();
  }

  MoveRowsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRowsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRowsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveRowsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRowsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.MoveRowsCommandArchive";
  }
  protected:
  explicit MoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
    kSrcIndexFieldNumber = 3,
    kDstIndexFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional uint32 src_index = 3;
  bool has_src_index() const;
  private:
  bool _internal_has_src_index() const;
  public:
  void clear_src_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_index() const;
  void set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_index() const;
  void _internal_set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dst_index = 4;
  bool has_dst_index() const;
  private:
  bool _internal_has_dst_index() const;
  public:
  void clear_dst_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_index() const;
  void set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_index() const;
  void _internal_set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 5;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.MoveRowsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* storage_;
  ::TSWP::UndoTransaction* undo_transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeApplyPresetCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeApplyPresetCommandArchive) */ {
 public:
  inline ShapeApplyPresetCommandArchive() : ShapeApplyPresetCommandArchive(nullptr) {}
  ~ShapeApplyPresetCommandArchive() override;
  explicit constexpr ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from);
  ShapeApplyPresetCommandArchive(ShapeApplyPresetCommandArchive&& from) noexcept
    : ShapeApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeApplyPresetCommandArchive& operator=(const ShapeApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeApplyPresetCommandArchive& operator=(ShapeApplyPresetCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeApplyPresetCommandArchive*>(
               &_ShapeApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ShapeApplyPresetCommandArchive& a, ShapeApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeApplyPresetCommandArchive* New() const final {
    return new ShapeApplyPresetCommandArchive();
  }

  ShapeApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeApplyPresetCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeApplyPresetCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShapeApplyPresetCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeApplyPresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeApplyPresetCommandArchive";
  }
  protected:
  explicit ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoStyleFieldNumber = 2,
  };
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseApplyPresetCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::BaseApplyPresetCommandArchive* release_super();
  ::TSD::BaseApplyPresetCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super);
  private:
  const ::TSD::BaseApplyPresetCommandArchive& _internal_super() const;
  ::TSD::BaseApplyPresetCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseApplyPresetCommandArchive* super);
  ::TSD::BaseApplyPresetCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference undo_style = 2;
  bool has_undo_style() const;
  private:
  bool _internal_has_undo_style() const;
  public:
  void clear_undo_style();
  const ::TSP::Reference& undo_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_style();
  ::TSP::Reference* mutable_undo_style();
  void set_allocated_undo_style(::TSP::Reference* undo_style);
  private:
  const ::TSP::Reference& _internal_undo_style() const;
  ::TSP::Reference* _internal_mutable_undo_style();
  public:
  void unsafe_arena_set_allocated_undo_style(
      ::TSP::Reference* undo_style);
  ::TSP::Reference* unsafe_arena_release_undo_style();

  // @@protoc_insertion_point(class_scope:TSWP.ShapeApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseApplyPresetCommandArchive* super_;
  ::TSP::Reference* undo_style_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleBaseCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleBaseCommandArchive) */ {
 public:
  inline StyleBaseCommandArchive() : StyleBaseCommandArchive(nullptr) {}
  ~StyleBaseCommandArchive() override;
  explicit constexpr StyleBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleBaseCommandArchive(const StyleBaseCommandArchive& from);
  StyleBaseCommandArchive(StyleBaseCommandArchive&& from) noexcept
    : StyleBaseCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleBaseCommandArchive& operator=(const StyleBaseCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleBaseCommandArchive& operator=(StyleBaseCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleBaseCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleBaseCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleBaseCommandArchive*>(
               &_StyleBaseCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StyleBaseCommandArchive& a, StyleBaseCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleBaseCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleBaseCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleBaseCommandArchive* New() const final {
    return new StyleBaseCommandArchive();
  }

  StyleBaseCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleBaseCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleBaseCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleBaseCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleBaseCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleBaseCommandArchive";
  }
  protected:
  explicit StyleBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kStyleFieldNumber = 3,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSWP.StyleBaseCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* style_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleCreateCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleCreateCommandArchive) */ {
 public:
  inline StyleCreateCommandArchive() : StyleCreateCommandArchive(nullptr) {}
  ~StyleCreateCommandArchive() override;
  explicit constexpr StyleCreateCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleCreateCommandArchive(const StyleCreateCommandArchive& from);
  StyleCreateCommandArchive(StyleCreateCommandArchive&& from) noexcept
    : StyleCreateCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleCreateCommandArchive& operator=(const StyleCreateCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleCreateCommandArchive& operator=(StyleCreateCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleCreateCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleCreateCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleCreateCommandArchive*>(
               &_StyleCreateCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StyleCreateCommandArchive& a, StyleCreateCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleCreateCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleCreateCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleCreateCommandArchive* New() const final {
    return new StyleCreateCommandArchive();
  }

  StyleCreateCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleCreateCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleCreateCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleCreateCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleCreateCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleCreateCommandArchive";
  }
  protected:
  explicit StyleCreateCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPresetIndexFieldNumber = 2,
  };
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StyleBaseCommandArchive* release_super();
  ::TSWP::StyleBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleBaseCommandArchive* super);
  private:
  const ::TSWP::StyleBaseCommandArchive& _internal_super() const;
  ::TSWP::StyleBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleBaseCommandArchive* super);
  ::TSWP::StyleBaseCommandArchive* unsafe_arena_release_super();

  // optional uint32 preset_index = 2;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index() const;
  void set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preset_index() const;
  void _internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StyleCreateCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StyleBaseCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleRenameCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleRenameCommandArchive) */ {
 public:
  inline StyleRenameCommandArchive() : StyleRenameCommandArchive(nullptr) {}
  ~StyleRenameCommandArchive() override;
  explicit constexpr StyleRenameCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleRenameCommandArchive(const StyleRenameCommandArchive& from);
  StyleRenameCommandArchive(StyleRenameCommandArchive&& from) noexcept
    : StyleRenameCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleRenameCommandArchive& operator=(const StyleRenameCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleRenameCommandArchive& operator=(StyleRenameCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleRenameCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleRenameCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleRenameCommandArchive*>(
               &_StyleRenameCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StyleRenameCommandArchive& a, StyleRenameCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleRenameCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleRenameCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleRenameCommandArchive* New() const final {
    return new StyleRenameCommandArchive();
  }

  StyleRenameCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleRenameCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleRenameCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleRenameCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleRenameCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleRenameCommandArchive";
  }
  protected:
  explicit StyleRenameCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedNameFieldNumber = 2,
    kOldNameFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string updated_name = 2;
  bool has_updated_name() const;
  private:
  bool _internal_has_updated_name() const;
  public:
  void clear_updated_name();
  const std::string& updated_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_updated_name();
  void set_allocated_updated_name(std::string* updated_name);
  private:
  const std::string& _internal_updated_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_name(const std::string& value);
  std::string* _internal_mutable_updated_name();
  public:

  // optional string old_name = 3;
  bool has_old_name() const;
  private:
  bool _internal_has_old_name() const;
  public:
  void clear_old_name();
  const std::string& old_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_old_name();
  void set_allocated_old_name(std::string* old_name);
  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(const std::string& value);
  std::string* _internal_mutable_old_name();
  public:

  // optional .TSWP.StyleBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StyleBaseCommandArchive* release_super();
  ::TSWP::StyleBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleBaseCommandArchive* super);
  private:
  const ::TSWP::StyleBaseCommandArchive& _internal_super() const;
  ::TSWP::StyleBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleBaseCommandArchive* super);
  ::TSWP::StyleBaseCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.StyleRenameCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_name_;
  ::TSWP::StyleBaseCommandArchive* super_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleUpdateCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleUpdateCommandArchive) */ {
 public:
  inline StyleUpdateCommandArchive() : StyleUpdateCommandArchive(nullptr) {}
  ~StyleUpdateCommandArchive() override;
  explicit constexpr StyleUpdateCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleUpdateCommandArchive(const StyleUpdateCommandArchive& from);
  StyleUpdateCommandArchive(StyleUpdateCommandArchive&& from) noexcept
    : StyleUpdateCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleUpdateCommandArchive& operator=(const StyleUpdateCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleUpdateCommandArchive& operator=(StyleUpdateCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleUpdateCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleUpdateCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleUpdateCommandArchive*>(
               &_StyleUpdateCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StyleUpdateCommandArchive& a, StyleUpdateCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleUpdateCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleUpdateCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleUpdateCommandArchive* New() const final {
    return new StyleUpdateCommandArchive();
  }

  StyleUpdateCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleUpdateCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleUpdateCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleUpdateCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleUpdateCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleUpdateCommandArchive";
  }
  protected:
  explicit StyleUpdateCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOriginalStyleFieldNumber = 2,
    kUpdatedStyleFieldNumber = 3,
  };
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StyleBaseCommandArchive* release_super();
  ::TSWP::StyleBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleBaseCommandArchive* super);
  private:
  const ::TSWP::StyleBaseCommandArchive& _internal_super() const;
  ::TSWP::StyleBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleBaseCommandArchive* super);
  ::TSWP::StyleBaseCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference original_style = 2;
  bool has_original_style() const;
  private:
  bool _internal_has_original_style() const;
  public:
  void clear_original_style();
  const ::TSP::Reference& original_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_original_style();
  ::TSP::Reference* mutable_original_style();
  void set_allocated_original_style(::TSP::Reference* original_style);
  private:
  const ::TSP::Reference& _internal_original_style() const;
  ::TSP::Reference* _internal_mutable_original_style();
  public:
  void unsafe_arena_set_allocated_original_style(
      ::TSP::Reference* original_style);
  ::TSP::Reference* unsafe_arena_release_original_style();

  // optional .TSP.Reference updated_style = 3;
  bool has_updated_style() const;
  private:
  bool _internal_has_updated_style() const;
  public:
  void clear_updated_style();
  const ::TSP::Reference& updated_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_updated_style();
  ::TSP::Reference* mutable_updated_style();
  void set_allocated_updated_style(::TSP::Reference* updated_style);
  private:
  const ::TSP::Reference& _internal_updated_style() const;
  ::TSP::Reference* _internal_mutable_updated_style();
  public:
  void unsafe_arena_set_allocated_updated_style(
      ::TSP::Reference* updated_style);
  ::TSP::Reference* unsafe_arena_release_updated_style();

  // @@protoc_insertion_point(class_scope:TSWP.StyleUpdateCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StyleBaseCommandArchive* super_;
  ::TSP::Reference* original_style_;
  ::TSP::Reference* updated_style_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleDeleteCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleDeleteCommandArchive) */ {
 public:
  inline StyleDeleteCommandArchive() : StyleDeleteCommandArchive(nullptr) {}
  ~StyleDeleteCommandArchive() override;
  explicit constexpr StyleDeleteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleDeleteCommandArchive(const StyleDeleteCommandArchive& from);
  StyleDeleteCommandArchive(StyleDeleteCommandArchive&& from) noexcept
    : StyleDeleteCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleDeleteCommandArchive& operator=(const StyleDeleteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleDeleteCommandArchive& operator=(StyleDeleteCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleDeleteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleDeleteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleDeleteCommandArchive*>(
               &_StyleDeleteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StyleDeleteCommandArchive& a, StyleDeleteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleDeleteCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleDeleteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleDeleteCommandArchive* New() const final {
    return new StyleDeleteCommandArchive();
  }

  StyleDeleteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleDeleteCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleDeleteCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleDeleteCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleDeleteCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleDeleteCommandArchive";
  }
  protected:
  explicit StyleDeleteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldPresetIndexFieldNumber = 2,
  };
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StyleBaseCommandArchive* release_super();
  ::TSWP::StyleBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleBaseCommandArchive* super);
  private:
  const ::TSWP::StyleBaseCommandArchive& _internal_super() const;
  ::TSWP::StyleBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleBaseCommandArchive* super);
  ::TSWP::StyleBaseCommandArchive* unsafe_arena_release_super();

  // optional uint32 old_preset_index = 2;
  bool has_old_preset_index() const;
  private:
  bool _internal_has_old_preset_index() const;
  public:
  void clear_old_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_preset_index() const;
  void set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_preset_index() const;
  void _internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StyleDeleteCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StyleBaseCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_preset_index_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleReorderCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleReorderCommandArchive) */ {
 public:
  inline StyleReorderCommandArchive() : StyleReorderCommandArchive(nullptr) {}
  ~StyleReorderCommandArchive() override;
  explicit constexpr StyleReorderCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleReorderCommandArchive(const StyleReorderCommandArchive& from);
  StyleReorderCommandArchive(StyleReorderCommandArchive&& from) noexcept
    : StyleReorderCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleReorderCommandArchive& operator=(const StyleReorderCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleReorderCommandArchive& operator=(StyleReorderCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleReorderCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleReorderCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleReorderCommandArchive*>(
               &_StyleReorderCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(StyleReorderCommandArchive& a, StyleReorderCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleReorderCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleReorderCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleReorderCommandArchive* New() const final {
    return new StyleReorderCommandArchive();
  }

  StyleReorderCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleReorderCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleReorderCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleReorderCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleReorderCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleReorderCommandArchive";
  }
  protected:
  explicit StyleReorderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldPresetIndexFieldNumber = 2,
    kNewPresetIndexFieldNumber = 3,
  };
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleBaseCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StyleBaseCommandArchive* release_super();
  ::TSWP::StyleBaseCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleBaseCommandArchive* super);
  private:
  const ::TSWP::StyleBaseCommandArchive& _internal_super() const;
  ::TSWP::StyleBaseCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleBaseCommandArchive* super);
  ::TSWP::StyleBaseCommandArchive* unsafe_arena_release_super();

  // optional uint32 old_preset_index = 2;
  bool has_old_preset_index() const;
  private:
  bool _internal_has_old_preset_index() const;
  public:
  void clear_old_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_preset_index() const;
  void set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_preset_index() const;
  void _internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 new_preset_index = 3;
  bool has_new_preset_index() const;
  private:
  bool _internal_has_new_preset_index() const;
  public:
  void clear_new_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_preset_index() const;
  void set_new_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_preset_index() const;
  void _internal_set_new_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.StyleReorderCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StyleBaseCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_preset_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_preset_index_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleUpdatePropertyMapCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.StyleUpdatePropertyMapCommandArchive) */ {
 public:
  inline StyleUpdatePropertyMapCommandArchive() : StyleUpdatePropertyMapCommandArchive(nullptr) {}
  ~StyleUpdatePropertyMapCommandArchive() override;
  explicit constexpr StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from);
  StyleUpdatePropertyMapCommandArchive(StyleUpdatePropertyMapCommandArchive&& from) noexcept
    : StyleUpdatePropertyMapCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleUpdatePropertyMapCommandArchive& operator=(const StyleUpdatePropertyMapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleUpdatePropertyMapCommandArchive& operator=(StyleUpdatePropertyMapCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleUpdatePropertyMapCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleUpdatePropertyMapCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleUpdatePropertyMapCommandArchive*>(
               &_StyleUpdatePropertyMapCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(StyleUpdatePropertyMapCommandArchive& a, StyleUpdatePropertyMapCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleUpdatePropertyMapCommandArchive* New() const final {
    return new StyleUpdatePropertyMapCommandArchive();
  }

  StyleUpdatePropertyMapCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleUpdatePropertyMapCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleUpdatePropertyMapCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleUpdatePropertyMapCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleUpdatePropertyMapCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.StyleUpdatePropertyMapCommandArchive";
  }
  protected:
  explicit StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleUpdatePropertyMapCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSS::StyleUpdatePropertyMapCommandArchive* release_super();
  ::TSS::StyleUpdatePropertyMapCommandArchive* mutable_super();
  void set_allocated_super(::TSS::StyleUpdatePropertyMapCommandArchive* super);
  private:
  const ::TSS::StyleUpdatePropertyMapCommandArchive& _internal_super() const;
  ::TSS::StyleUpdatePropertyMapCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleUpdatePropertyMapCommandArchive* super);
  ::TSS::StyleUpdatePropertyMapCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.StyleUpdatePropertyMapCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleUpdatePropertyMapCommandArchive* super_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeStyleSetValueCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeStyleSetValueCommandArchive) */ {
 public:
  inline ShapeStyleSetValueCommandArchive() : ShapeStyleSetValueCommandArchive(nullptr) {}
  ~ShapeStyleSetValueCommandArchive() override;
  explicit constexpr ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from);
  ShapeStyleSetValueCommandArchive(ShapeStyleSetValueCommandArchive&& from) noexcept
    : ShapeStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeStyleSetValueCommandArchive& operator=(const ShapeStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeStyleSetValueCommandArchive& operator=(ShapeStyleSetValueCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeStyleSetValueCommandArchive*>(
               &_ShapeStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ShapeStyleSetValueCommandArchive& a, ShapeStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeStyleSetValueCommandArchive* New() const final {
    return new ShapeStyleSetValueCommandArchive();
  }

  ShapeStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeStyleSetValueCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeStyleSetValueCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShapeStyleSetValueCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeStyleSetValueCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeStyleSetValueCommandArchive";
  }
  protected:
  explicit ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kChangeFieldNumber = 4,
  };
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseStyleSetValueCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::BaseStyleSetValueCommandArchive* release_super();
  ::TSD::BaseStyleSetValueCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super);
  private:
  const ::TSD::BaseStyleSetValueCommandArchive& _internal_super() const;
  ::TSD::BaseStyleSetValueCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseStyleSetValueCommandArchive* super);
  ::TSD::BaseStyleSetValueCommandArchive* unsafe_arena_release_super();

  // optional .TSWPSOS.ShapeStylePropertyChangeSetArchive change = 4;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::TSWPSOS::ShapeStylePropertyChangeSetArchive& change() const;
  PROTOBUF_MUST_USE_RESULT ::TSWPSOS::ShapeStylePropertyChangeSetArchive* release_change();
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* mutable_change();
  void set_allocated_change(::TSWPSOS::ShapeStylePropertyChangeSetArchive* change);
  private:
  const ::TSWPSOS::ShapeStylePropertyChangeSetArchive& _internal_change() const;
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::TSWPSOS::ShapeStylePropertyChangeSetArchive* change);
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* unsafe_arena_release_change();

  // @@protoc_insertion_point(class_scope:TSWP.ShapeStyleSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseStyleSetValueCommandArchive* super_;
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* change_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SelectionTransformerArchive) */ {
 public:
  inline SelectionTransformerArchive() : SelectionTransformerArchive(nullptr) {}
  ~SelectionTransformerArchive() override;
  explicit constexpr SelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionTransformerArchive(const SelectionTransformerArchive& from);
  SelectionTransformerArchive(SelectionTransformerArchive&& from) noexcept
    : SelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline SelectionTransformerArchive& operator=(const SelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionTransformerArchive& operator=(SelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const SelectionTransformerArchive*>(
               &_SelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SelectionTransformerArchive& a, SelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectionTransformerArchive* New() const final {
    return new SelectionTransformerArchive();
  }

  SelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SelectionTransformerArchive";
  }
  protected:
  explicit SelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageUuidPathFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kTransformedToNoopFieldNumber = 3,
  };
  // required .TSP.UUIDPath storage_uuid_path = 1;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // required .TSP.Reference selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TSP::Reference& selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_selection();
  ::TSP::Reference* mutable_selection();
  void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  ::TSP::Reference* unsafe_arena_release_selection();

  // optional bool transformed_to_noop = 3;
  bool has_transformed_to_noop() const;
  private:
  bool _internal_has_transformed_to_noop() const;
  public:
  void clear_transformed_to_noop();
  bool transformed_to_noop() const;
  void set_transformed_to_noop(bool value);
  private:
  bool _internal_transformed_to_noop() const;
  void _internal_set_transformed_to_noop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.SelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUIDPath* storage_uuid_path_;
  ::TSP::Reference* selection_;
  bool transformed_to_noop_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.PencilAnnotationSelectionTransformerArchive) */ {
 public:
  inline PencilAnnotationSelectionTransformerArchive() : PencilAnnotationSelectionTransformerArchive(nullptr) {}
  ~PencilAnnotationSelectionTransformerArchive() override;
  explicit constexpr PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationSelectionTransformerArchive(const PencilAnnotationSelectionTransformerArchive& from);
  PencilAnnotationSelectionTransformerArchive(PencilAnnotationSelectionTransformerArchive&& from) noexcept
    : PencilAnnotationSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationSelectionTransformerArchive& operator=(const PencilAnnotationSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationSelectionTransformerArchive& operator=(PencilAnnotationSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationSelectionTransformerArchive*>(
               &_PencilAnnotationSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PencilAnnotationSelectionTransformerArchive& a, PencilAnnotationSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationSelectionTransformerArchive* New() const final {
    return new PencilAnnotationSelectionTransformerArchive();
  }

  PencilAnnotationSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PencilAnnotationSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PencilAnnotationSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.PencilAnnotationSelectionTransformerArchive";
  }
  protected:
  explicit PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextPencilAnnotationUuidFieldNumber = 2,
    kStorageUuidPathFieldNumber = 1,
  };
  // required string text_pencil_annotation_uuid = 2;
  bool has_text_pencil_annotation_uuid() const;
  private:
  bool _internal_has_text_pencil_annotation_uuid() const;
  public:
  void clear_text_pencil_annotation_uuid();
  const std::string& text_pencil_annotation_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_pencil_annotation_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_pencil_annotation_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_text_pencil_annotation_uuid();
  void set_allocated_text_pencil_annotation_uuid(std::string* text_pencil_annotation_uuid);
  private:
  const std::string& _internal_text_pencil_annotation_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_pencil_annotation_uuid(const std::string& value);
  std::string* _internal_mutable_text_pencil_annotation_uuid();
  public:

  // required .TSP.UUIDPath storage_uuid_path = 1;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TSWP.PencilAnnotationSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_pencil_annotation_uuid_;
  ::TSP::UUIDPath* storage_uuid_path_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeSelectionTransformerArchive) */ {
 public:
  inline ShapeSelectionTransformerArchive() : ShapeSelectionTransformerArchive(nullptr) {}
  ~ShapeSelectionTransformerArchive() override;
  explicit constexpr ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeSelectionTransformerArchive(const ShapeSelectionTransformerArchive& from);
  ShapeSelectionTransformerArchive(ShapeSelectionTransformerArchive&& from) noexcept
    : ShapeSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ShapeSelectionTransformerArchive& operator=(const ShapeSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeSelectionTransformerArchive& operator=(ShapeSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeSelectionTransformerArchive*>(
               &_ShapeSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ShapeSelectionTransformerArchive& a, ShapeSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeSelectionTransformerArchive* New() const final {
    return new ShapeSelectionTransformerArchive();
  }

  ShapeSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShapeSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeSelectionTransformerArchive";
  }
  protected:
  explicit ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageUuidPathFieldNumber = 2,
  };
  // required .TSD.ShapeSelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ShapeSelectionTransformerArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShapeSelectionTransformerArchive* release_super();
  ::TSD::ShapeSelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSD::ShapeSelectionTransformerArchive* super);
  private:
  const ::TSD::ShapeSelectionTransformerArchive& _internal_super() const;
  ::TSD::ShapeSelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ShapeSelectionTransformerArchive* super);
  ::TSD::ShapeSelectionTransformerArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TSWP.ShapeSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ShapeSelectionTransformerArchive* super_;
  ::TSP::UUIDPath* storage_uuid_path_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeContentDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ShapeContentDescription) */ {
 public:
  inline ShapeContentDescription() : ShapeContentDescription(nullptr) {}
  ~ShapeContentDescription() override;
  explicit constexpr ShapeContentDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeContentDescription(const ShapeContentDescription& from);
  ShapeContentDescription(ShapeContentDescription&& from) noexcept
    : ShapeContentDescription() {
    *this = ::std::move(from);
  }

  inline ShapeContentDescription& operator=(const ShapeContentDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeContentDescription& operator=(ShapeContentDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeContentDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeContentDescription* internal_default_instance() {
    return reinterpret_cast<const ShapeContentDescription*>(
               &_ShapeContentDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ShapeContentDescription& a, ShapeContentDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeContentDescription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeContentDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeContentDescription* New() const final {
    return new ShapeContentDescription();
  }

  ShapeContentDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeContentDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeContentDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShapeContentDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeContentDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ShapeContentDescription";
  }
  protected:
  explicit ShapeContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTextRangeLocationFieldNumber = 2,
    kTextRangeLengthFieldNumber = 3,
  };
  // required .TSD.DrawableContentDescription super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableContentDescription& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::DrawableContentDescription* release_super();
  ::TSD::DrawableContentDescription* mutable_super();
  void set_allocated_super(::TSD::DrawableContentDescription* super);
  private:
  const ::TSD::DrawableContentDescription& _internal_super() const;
  ::TSD::DrawableContentDescription* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableContentDescription* super);
  ::TSD::DrawableContentDescription* unsafe_arena_release_super();

  // optional uint32 text_range_location = 2;
  bool has_text_range_location() const;
  private:
  bool _internal_has_text_range_location() const;
  public:
  void clear_text_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 text_range_location() const;
  void set_text_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_text_range_location() const;
  void _internal_set_text_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 text_range_length = 3;
  bool has_text_range_length() const;
  private:
  bool _internal_has_text_range_length() const;
  public:
  void clear_text_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 text_range_length() const;
  void set_text_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_text_range_length() const;
  void _internal_set_text_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ShapeContentDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableContentDescription* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 text_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 text_range_length_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ObjectPropertyArchive) */ {
 public:
  inline ObjectPropertyArchive() : ObjectPropertyArchive(nullptr) {}
  ~ObjectPropertyArchive() override;
  explicit constexpr ObjectPropertyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyArchive(const ObjectPropertyArchive& from);
  ObjectPropertyArchive(ObjectPropertyArchive&& from) noexcept
    : ObjectPropertyArchive() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyArchive& operator=(const ObjectPropertyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyArchive& operator=(ObjectPropertyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyArchive* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyArchive*>(
               &_ObjectPropertyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ObjectPropertyArchive& a, ObjectPropertyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyArchive* New() const final {
    return new ObjectPropertyArchive();
  }

  ObjectPropertyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectPropertyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectPropertyArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ObjectPropertyArchive";
  }
  protected:
  explicit ObjectPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringValueFieldNumber = 6,
    kIdPathValueFieldNumber = 7,
    kFillValueFieldNumber = 8,
    kColorValueFieldNumber = 9,
    kShadowValueFieldNumber = 10,
    kTypeFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
    kIntegerValueFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string string_value = 6;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional .TSP.UUIDPath id_path_value = 7;
  bool has_id_path_value() const;
  private:
  bool _internal_has_id_path_value() const;
  public:
  void clear_id_path_value();
  const ::TSP::UUIDPath& id_path_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_id_path_value();
  ::TSP::UUIDPath* mutable_id_path_value();
  void set_allocated_id_path_value(::TSP::UUIDPath* id_path_value);
  private:
  const ::TSP::UUIDPath& _internal_id_path_value() const;
  ::TSP::UUIDPath* _internal_mutable_id_path_value();
  public:
  void unsafe_arena_set_allocated_id_path_value(
      ::TSP::UUIDPath* id_path_value);
  ::TSP::UUIDPath* unsafe_arena_release_id_path_value();

  // optional .TSD.FillArchive fill_value = 8;
  bool has_fill_value() const;
  private:
  bool _internal_has_fill_value() const;
  public:
  void clear_fill_value();
  const ::TSD::FillArchive& fill_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_fill_value();
  ::TSD::FillArchive* mutable_fill_value();
  void set_allocated_fill_value(::TSD::FillArchive* fill_value);
  private:
  const ::TSD::FillArchive& _internal_fill_value() const;
  ::TSD::FillArchive* _internal_mutable_fill_value();
  public:
  void unsafe_arena_set_allocated_fill_value(
      ::TSD::FillArchive* fill_value);
  ::TSD::FillArchive* unsafe_arena_release_fill_value();

  // optional .TSP.Color color_value = 9;
  bool has_color_value() const;
  private:
  bool _internal_has_color_value() const;
  public:
  void clear_color_value();
  const ::TSP::Color& color_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Color* release_color_value();
  ::TSP::Color* mutable_color_value();
  void set_allocated_color_value(::TSP::Color* color_value);
  private:
  const ::TSP::Color& _internal_color_value() const;
  ::TSP::Color* _internal_mutable_color_value();
  public:
  void unsafe_arena_set_allocated_color_value(
      ::TSP::Color* color_value);
  ::TSP::Color* unsafe_arena_release_color_value();

  // optional .TSD.ShadowArchive shadow_value = 10;
  bool has_shadow_value() const;
  private:
  bool _internal_has_shadow_value() const;
  public:
  void clear_shadow_value();
  const ::TSD::ShadowArchive& shadow_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_shadow_value();
  ::TSD::ShadowArchive* mutable_shadow_value();
  void set_allocated_shadow_value(::TSD::ShadowArchive* shadow_value);
  private:
  const ::TSD::ShadowArchive& _internal_shadow_value() const;
  ::TSD::ShadowArchive* _internal_mutable_shadow_value();
  public:
  void unsafe_arena_set_allocated_shadow_value(
      ::TSD::ShadowArchive* shadow_value);
  ::TSD::ShadowArchive* unsafe_arena_release_shadow_value();

  // required .TSWP.ObjectPropertyType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSWP::ObjectPropertyType type() const;
  void set_type(::TSWP::ObjectPropertyType value);
  private:
  ::TSWP::ObjectPropertyType _internal_type() const;
  void _internal_set_type(::TSWP::ObjectPropertyType value);
  public:

  // optional bool bool_value = 3;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional float float_value = 4;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional int32 integer_value = 5;
  bool has_integer_value() const;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  ::PROTOBUF_NAMESPACE_ID::int32 integer_value() const;
  void set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_integer_value() const;
  void _internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ObjectPropertyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::TSP::UUIDPath* id_path_value_;
  ::TSD::FillArchive* fill_value_;
  ::TSP::Color* color_value_;
  ::TSD::ShadowArchive* shadow_value_;
  int type_;
  bool bool_value_;
  float float_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 integer_value_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SetObjectPropertiesCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.SetObjectPropertiesCommandArchive) */ {
 public:
  inline SetObjectPropertiesCommandArchive() : SetObjectPropertiesCommandArchive(nullptr) {}
  ~SetObjectPropertiesCommandArchive() override;
  explicit constexpr SetObjectPropertiesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetObjectPropertiesCommandArchive(const SetObjectPropertiesCommandArchive& from);
  SetObjectPropertiesCommandArchive(SetObjectPropertiesCommandArchive&& from) noexcept
    : SetObjectPropertiesCommandArchive() {
    *this = ::std::move(from);
  }

  inline SetObjectPropertiesCommandArchive& operator=(const SetObjectPropertiesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetObjectPropertiesCommandArchive& operator=(SetObjectPropertiesCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetObjectPropertiesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetObjectPropertiesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SetObjectPropertiesCommandArchive*>(
               &_SetObjectPropertiesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetObjectPropertiesCommandArchive& a, SetObjectPropertiesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SetObjectPropertiesCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetObjectPropertiesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetObjectPropertiesCommandArchive* New() const final {
    return new SetObjectPropertiesCommandArchive();
  }

  SetObjectPropertiesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetObjectPropertiesCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetObjectPropertiesCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetObjectPropertiesCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetObjectPropertiesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.SetObjectPropertiesCommandArchive";
  }
  protected:
  explicit SetObjectPropertiesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kOldPropertiesFieldNumber = 5,
    kActionStringFieldNumber = 4,
    kSuperFieldNumber = 1,
    kObjectUuidPathFieldNumber = 2,
  };
  // repeated .TSWP.ObjectPropertyArchive properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::TSWP::ObjectPropertyArchive* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >*
      mutable_properties();
  private:
  const ::TSWP::ObjectPropertyArchive& _internal_properties(int index) const;
  ::TSWP::ObjectPropertyArchive* _internal_add_properties();
  public:
  const ::TSWP::ObjectPropertyArchive& properties(int index) const;
  ::TSWP::ObjectPropertyArchive* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >&
      properties() const;

  // repeated .TSWP.ObjectPropertyArchive old_properties = 5;
  int old_properties_size() const;
  private:
  int _internal_old_properties_size() const;
  public:
  void clear_old_properties();
  ::TSWP::ObjectPropertyArchive* mutable_old_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >*
      mutable_old_properties();
  private:
  const ::TSWP::ObjectPropertyArchive& _internal_old_properties(int index) const;
  ::TSWP::ObjectPropertyArchive* _internal_add_old_properties();
  public:
  const ::TSWP::ObjectPropertyArchive& old_properties(int index) const;
  ::TSWP::ObjectPropertyArchive* add_old_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >&
      old_properties() const;

  // optional string action_string = 4;
  bool has_action_string() const;
  private:
  bool _internal_has_action_string() const;
  public:
  void clear_action_string();
  const std::string& action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_action_string();
  void set_allocated_action_string(std::string* action_string);
  private:
  const std::string& _internal_action_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_string(const std::string& value);
  std::string* _internal_mutable_action_string();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath object_uuid_path = 2;
  bool has_object_uuid_path() const;
  private:
  bool _internal_has_object_uuid_path() const;
  public:
  void clear_object_uuid_path();
  const ::TSP::UUIDPath& object_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_object_uuid_path();
  ::TSP::UUIDPath* mutable_object_uuid_path();
  void set_allocated_object_uuid_path(::TSP::UUIDPath* object_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_object_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_object_uuid_path();
  public:
  void unsafe_arena_set_allocated_object_uuid_path(
      ::TSP::UUIDPath* object_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_object_uuid_path();

  // @@protoc_insertion_point(class_scope:TSWP.SetObjectPropertiesCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive > old_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* object_uuid_path_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UpdateFlowInfoCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.UpdateFlowInfoCommandArchive) */ {
 public:
  inline UpdateFlowInfoCommandArchive() : UpdateFlowInfoCommandArchive(nullptr) {}
  ~UpdateFlowInfoCommandArchive() override;
  explicit constexpr UpdateFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateFlowInfoCommandArchive(const UpdateFlowInfoCommandArchive& from);
  UpdateFlowInfoCommandArchive(UpdateFlowInfoCommandArchive&& from) noexcept
    : UpdateFlowInfoCommandArchive() {
    *this = ::std::move(from);
  }

  inline UpdateFlowInfoCommandArchive& operator=(const UpdateFlowInfoCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFlowInfoCommandArchive& operator=(UpdateFlowInfoCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateFlowInfoCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateFlowInfoCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UpdateFlowInfoCommandArchive*>(
               &_UpdateFlowInfoCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UpdateFlowInfoCommandArchive& a, UpdateFlowInfoCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFlowInfoCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFlowInfoCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFlowInfoCommandArchive* New() const final {
    return new UpdateFlowInfoCommandArchive();
  }

  UpdateFlowInfoCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFlowInfoCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateFlowInfoCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateFlowInfoCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFlowInfoCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.UpdateFlowInfoCommandArchive";
  }
  protected:
  explicit UpdateFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateFlowInfoCommandArchive_Mode Mode;
  static constexpr Mode kModeRearrange =
    UpdateFlowInfoCommandArchive_Mode_kModeRearrange;
  static constexpr Mode kModeAdd =
    UpdateFlowInfoCommandArchive_Mode_kModeAdd;
  static constexpr Mode kModeRemove =
    UpdateFlowInfoCommandArchive_Mode_kModeRemove;
  static constexpr Mode kModeCompensate =
    UpdateFlowInfoCommandArchive_Mode_kModeCompensate;
  static inline bool Mode_IsValid(int value) {
    return UpdateFlowInfoCommandArchive_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    UpdateFlowInfoCommandArchive_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    UpdateFlowInfoCommandArchive_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    UpdateFlowInfoCommandArchive_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return UpdateFlowInfoCommandArchive_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return UpdateFlowInfoCommandArchive_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return UpdateFlowInfoCommandArchive_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextBoxIdPathsAtStartFieldNumber = 5,
    kSuggestedTextBoxIdPathsAtEndFieldNumber = 6,
    kUndoTextBoxesToRestoreFieldNumber = 7,
    kSuperFieldNumber = 1,
    kFlowInfoUuidPathFieldNumber = 3,
    kTextBoxIdPathToAddOrRemoveFieldNumber = 4,
    kUndoAddedShapeInfoFieldNumber = 8,
    kUndoRemovedShapeInfoFieldNumber = 9,
    kCommandModeFieldNumber = 2,
  };
  // repeated .TSP.UUIDPath text_box_id_paths_at_start = 5;
  int text_box_id_paths_at_start_size() const;
  private:
  int _internal_text_box_id_paths_at_start_size() const;
  public:
  void clear_text_box_id_paths_at_start();
  ::TSP::UUIDPath* mutable_text_box_id_paths_at_start(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_text_box_id_paths_at_start();
  private:
  const ::TSP::UUIDPath& _internal_text_box_id_paths_at_start(int index) const;
  ::TSP::UUIDPath* _internal_add_text_box_id_paths_at_start();
  public:
  const ::TSP::UUIDPath& text_box_id_paths_at_start(int index) const;
  ::TSP::UUIDPath* add_text_box_id_paths_at_start();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      text_box_id_paths_at_start() const;

  // repeated .TSP.UUIDPath suggested_text_box_id_paths_at_end = 6;
  int suggested_text_box_id_paths_at_end_size() const;
  private:
  int _internal_suggested_text_box_id_paths_at_end_size() const;
  public:
  void clear_suggested_text_box_id_paths_at_end();
  ::TSP::UUIDPath* mutable_suggested_text_box_id_paths_at_end(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_suggested_text_box_id_paths_at_end();
  private:
  const ::TSP::UUIDPath& _internal_suggested_text_box_id_paths_at_end(int index) const;
  ::TSP::UUIDPath* _internal_add_suggested_text_box_id_paths_at_end();
  public:
  const ::TSP::UUIDPath& suggested_text_box_id_paths_at_end(int index) const;
  ::TSP::UUIDPath* add_suggested_text_box_id_paths_at_end();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      suggested_text_box_id_paths_at_end() const;

  // repeated .TSP.Reference undo_text_boxes_to_restore = 7;
  int undo_text_boxes_to_restore_size() const;
  private:
  int _internal_undo_text_boxes_to_restore_size() const;
  public:
  void clear_undo_text_boxes_to_restore();
  ::TSP::Reference* mutable_undo_text_boxes_to_restore(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_undo_text_boxes_to_restore();
  private:
  const ::TSP::Reference& _internal_undo_text_boxes_to_restore(int index) const;
  ::TSP::Reference* _internal_add_undo_text_boxes_to_restore();
  public:
  const ::TSP::Reference& undo_text_boxes_to_restore(int index) const;
  ::TSP::Reference* add_undo_text_boxes_to_restore();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      undo_text_boxes_to_restore() const;

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath flow_info_uuid_path = 3;
  bool has_flow_info_uuid_path() const;
  private:
  bool _internal_has_flow_info_uuid_path() const;
  public:
  void clear_flow_info_uuid_path();
  const ::TSP::UUIDPath& flow_info_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_flow_info_uuid_path();
  ::TSP::UUIDPath* mutable_flow_info_uuid_path();
  void set_allocated_flow_info_uuid_path(::TSP::UUIDPath* flow_info_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_flow_info_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_flow_info_uuid_path();
  public:
  void unsafe_arena_set_allocated_flow_info_uuid_path(
      ::TSP::UUIDPath* flow_info_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_flow_info_uuid_path();

  // optional .TSP.UUIDPath text_box_id_path_to_add_or_remove = 4;
  bool has_text_box_id_path_to_add_or_remove() const;
  private:
  bool _internal_has_text_box_id_path_to_add_or_remove() const;
  public:
  void clear_text_box_id_path_to_add_or_remove();
  const ::TSP::UUIDPath& text_box_id_path_to_add_or_remove() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_text_box_id_path_to_add_or_remove();
  ::TSP::UUIDPath* mutable_text_box_id_path_to_add_or_remove();
  void set_allocated_text_box_id_path_to_add_or_remove(::TSP::UUIDPath* text_box_id_path_to_add_or_remove);
  private:
  const ::TSP::UUIDPath& _internal_text_box_id_path_to_add_or_remove() const;
  ::TSP::UUIDPath* _internal_mutable_text_box_id_path_to_add_or_remove();
  public:
  void unsafe_arena_set_allocated_text_box_id_path_to_add_or_remove(
      ::TSP::UUIDPath* text_box_id_path_to_add_or_remove);
  ::TSP::UUIDPath* unsafe_arena_release_text_box_id_path_to_add_or_remove();

  // optional .TSP.Reference undo_added_shape_info = 8;
  bool has_undo_added_shape_info() const;
  private:
  bool _internal_has_undo_added_shape_info() const;
  public:
  void clear_undo_added_shape_info();
  const ::TSP::Reference& undo_added_shape_info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_added_shape_info();
  ::TSP::Reference* mutable_undo_added_shape_info();
  void set_allocated_undo_added_shape_info(::TSP::Reference* undo_added_shape_info);
  private:
  const ::TSP::Reference& _internal_undo_added_shape_info() const;
  ::TSP::Reference* _internal_mutable_undo_added_shape_info();
  public:
  void unsafe_arena_set_allocated_undo_added_shape_info(
      ::TSP::Reference* undo_added_shape_info);
  ::TSP::Reference* unsafe_arena_release_undo_added_shape_info();

  // optional .TSP.Reference undo_removed_shape_info = 9;
  bool has_undo_removed_shape_info() const;
  private:
  bool _internal_has_undo_removed_shape_info() const;
  public:
  void clear_undo_removed_shape_info();
  const ::TSP::Reference& undo_removed_shape_info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_removed_shape_info();
  ::TSP::Reference* mutable_undo_removed_shape_info();
  void set_allocated_undo_removed_shape_info(::TSP::Reference* undo_removed_shape_info);
  private:
  const ::TSP::Reference& _internal_undo_removed_shape_info() const;
  ::TSP::Reference* _internal_mutable_undo_removed_shape_info();
  public:
  void unsafe_arena_set_allocated_undo_removed_shape_info(
      ::TSP::Reference* undo_removed_shape_info);
  ::TSP::Reference* unsafe_arena_release_undo_removed_shape_info();

  // optional .TSWP.UpdateFlowInfoCommandArchive.Mode command_mode = 2 [default = kModeRearrange];
  bool has_command_mode() const;
  private:
  bool _internal_has_command_mode() const;
  public:
  void clear_command_mode();
  ::TSWP::UpdateFlowInfoCommandArchive_Mode command_mode() const;
  void set_command_mode(::TSWP::UpdateFlowInfoCommandArchive_Mode value);
  private:
  ::TSWP::UpdateFlowInfoCommandArchive_Mode _internal_command_mode() const;
  void _internal_set_command_mode(::TSWP::UpdateFlowInfoCommandArchive_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.UpdateFlowInfoCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > text_box_id_paths_at_start_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > suggested_text_box_id_paths_at_end_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > undo_text_boxes_to_restore_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* flow_info_uuid_path_;
  ::TSP::UUIDPath* text_box_id_path_to_add_or_remove_;
  ::TSP::Reference* undo_added_shape_info_;
  ::TSP::Reference* undo_removed_shape_info_;
  int command_mode_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class AddFlowInfoCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.AddFlowInfoCommandArchive) */ {
 public:
  inline AddFlowInfoCommandArchive() : AddFlowInfoCommandArchive(nullptr) {}
  ~AddFlowInfoCommandArchive() override;
  explicit constexpr AddFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFlowInfoCommandArchive(const AddFlowInfoCommandArchive& from);
  AddFlowInfoCommandArchive(AddFlowInfoCommandArchive&& from) noexcept
    : AddFlowInfoCommandArchive() {
    *this = ::std::move(from);
  }

  inline AddFlowInfoCommandArchive& operator=(const AddFlowInfoCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFlowInfoCommandArchive& operator=(AddFlowInfoCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFlowInfoCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFlowInfoCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AddFlowInfoCommandArchive*>(
               &_AddFlowInfoCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AddFlowInfoCommandArchive& a, AddFlowInfoCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFlowInfoCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFlowInfoCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFlowInfoCommandArchive* New() const final {
    return new AddFlowInfoCommandArchive();
  }

  AddFlowInfoCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFlowInfoCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFlowInfoCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFlowInfoCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFlowInfoCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.AddFlowInfoCommandArchive";
  }
  protected:
  explicit AddFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFlowInfoToAddFieldNumber = 2,
    kFlowInfoArchiveFieldNumber = 3,
    kWorkingUndoObjectFieldNumber = 6,
    kUndoUserInterfaceIdentifierToRestoreFieldNumber = 4,
    kUndoNextUserInterfaceIdentifierToRestoreFieldNumber = 5,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference flow_info_to_add = 2;
  bool has_flow_info_to_add() const;
  private:
  bool _internal_has_flow_info_to_add() const;
  public:
  void clear_flow_info_to_add();
  const ::TSP::Reference& flow_info_to_add() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_flow_info_to_add();
  ::TSP::Reference* mutable_flow_info_to_add();
  void set_allocated_flow_info_to_add(::TSP::Reference* flow_info_to_add);
  private:
  const ::TSP::Reference& _internal_flow_info_to_add() const;
  ::TSP::Reference* _internal_mutable_flow_info_to_add();
  public:
  void unsafe_arena_set_allocated_flow_info_to_add(
      ::TSP::Reference* flow_info_to_add);
  ::TSP::Reference* unsafe_arena_release_flow_info_to_add();

  // optional .TSP.Reference flow_info_archive = 3;
  bool has_flow_info_archive() const;
  private:
  bool _internal_has_flow_info_archive() const;
  public:
  void clear_flow_info_archive();
  const ::TSP::Reference& flow_info_archive() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_flow_info_archive();
  ::TSP::Reference* mutable_flow_info_archive();
  void set_allocated_flow_info_archive(::TSP::Reference* flow_info_archive);
  private:
  const ::TSP::Reference& _internal_flow_info_archive() const;
  ::TSP::Reference* _internal_mutable_flow_info_archive();
  public:
  void unsafe_arena_set_allocated_flow_info_archive(
      ::TSP::Reference* flow_info_archive);
  ::TSP::Reference* unsafe_arena_release_flow_info_archive();

  // optional .TSP.Reference working_undo_object = 6;
  bool has_working_undo_object() const;
  private:
  bool _internal_has_working_undo_object() const;
  public:
  void clear_working_undo_object();
  const ::TSP::Reference& working_undo_object() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_working_undo_object();
  ::TSP::Reference* mutable_working_undo_object();
  void set_allocated_working_undo_object(::TSP::Reference* working_undo_object);
  private:
  const ::TSP::Reference& _internal_working_undo_object() const;
  ::TSP::Reference* _internal_mutable_working_undo_object();
  public:
  void unsafe_arena_set_allocated_working_undo_object(
      ::TSP::Reference* working_undo_object);
  ::TSP::Reference* unsafe_arena_release_working_undo_object();

  // optional uint32 undo_user_interface_identifier_to_restore = 4;
  bool has_undo_user_interface_identifier_to_restore() const;
  private:
  bool _internal_has_undo_user_interface_identifier_to_restore() const;
  public:
  void clear_undo_user_interface_identifier_to_restore();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_user_interface_identifier_to_restore() const;
  void set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_user_interface_identifier_to_restore() const;
  void _internal_set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
  bool has_undo_next_user_interface_identifier_to_restore() const;
  private:
  bool _internal_has_undo_next_user_interface_identifier_to_restore() const;
  public:
  void clear_undo_next_user_interface_identifier_to_restore();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_next_user_interface_identifier_to_restore() const;
  void set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_next_user_interface_identifier_to_restore() const;
  void _internal_set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.AddFlowInfoCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* flow_info_to_add_;
  ::TSP::Reference* flow_info_archive_;
  ::TSP::Reference* working_undo_object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_user_interface_identifier_to_restore_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_next_user_interface_identifier_to_restore_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveFlowInfoCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.RemoveFlowInfoCommandArchive) */ {
 public:
  inline RemoveFlowInfoCommandArchive() : RemoveFlowInfoCommandArchive(nullptr) {}
  ~RemoveFlowInfoCommandArchive() override;
  explicit constexpr RemoveFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveFlowInfoCommandArchive(const RemoveFlowInfoCommandArchive& from);
  RemoveFlowInfoCommandArchive(RemoveFlowInfoCommandArchive&& from) noexcept
    : RemoveFlowInfoCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveFlowInfoCommandArchive& operator=(const RemoveFlowInfoCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFlowInfoCommandArchive& operator=(RemoveFlowInfoCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFlowInfoCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFlowInfoCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveFlowInfoCommandArchive*>(
               &_RemoveFlowInfoCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RemoveFlowInfoCommandArchive& a, RemoveFlowInfoCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveFlowInfoCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFlowInfoCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveFlowInfoCommandArchive* New() const final {
    return new RemoveFlowInfoCommandArchive();
  }

  RemoveFlowInfoCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveFlowInfoCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveFlowInfoCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveFlowInfoCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveFlowInfoCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.RemoveFlowInfoCommandArchive";
  }
  protected:
  explicit RemoveFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFlowInfoUuidPathFieldNumber = 2,
    kUndoObjectFieldNumber = 3,
    kUndoUserInterfaceIdentifierToRestoreFieldNumber = 4,
    kUndoNextUserInterfaceIdentifierToRestoreFieldNumber = 5,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath flow_info_uuid_path = 2;
  bool has_flow_info_uuid_path() const;
  private:
  bool _internal_has_flow_info_uuid_path() const;
  public:
  void clear_flow_info_uuid_path();
  const ::TSP::UUIDPath& flow_info_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_flow_info_uuid_path();
  ::TSP::UUIDPath* mutable_flow_info_uuid_path();
  void set_allocated_flow_info_uuid_path(::TSP::UUIDPath* flow_info_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_flow_info_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_flow_info_uuid_path();
  public:
  void unsafe_arena_set_allocated_flow_info_uuid_path(
      ::TSP::UUIDPath* flow_info_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_flow_info_uuid_path();

  // optional .TSP.Reference undo_object = 3;
  bool has_undo_object() const;
  private:
  bool _internal_has_undo_object() const;
  public:
  void clear_undo_object();
  const ::TSP::Reference& undo_object() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_object();
  ::TSP::Reference* mutable_undo_object();
  void set_allocated_undo_object(::TSP::Reference* undo_object);
  private:
  const ::TSP::Reference& _internal_undo_object() const;
  ::TSP::Reference* _internal_mutable_undo_object();
  public:
  void unsafe_arena_set_allocated_undo_object(
      ::TSP::Reference* undo_object);
  ::TSP::Reference* unsafe_arena_release_undo_object();

  // optional uint32 undo_user_interface_identifier_to_restore = 4;
  bool has_undo_user_interface_identifier_to_restore() const;
  private:
  bool _internal_has_undo_user_interface_identifier_to_restore() const;
  public:
  void clear_undo_user_interface_identifier_to_restore();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_user_interface_identifier_to_restore() const;
  void set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_user_interface_identifier_to_restore() const;
  void _internal_set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
  bool has_undo_next_user_interface_identifier_to_restore() const;
  private:
  bool _internal_has_undo_next_user_interface_identifier_to_restore() const;
  public:
  void clear_undo_next_user_interface_identifier_to_restore();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_next_user_interface_identifier_to_restore() const;
  void set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_next_user_interface_identifier_to_restore() const;
  void _internal_set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.RemoveFlowInfoCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* flow_info_uuid_path_;
  ::TSP::Reference* undo_object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_user_interface_identifier_to_restore_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_next_user_interface_identifier_to_restore_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TextCommentReplyCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.TextCommentReplyCommandArchive) */ {
 public:
  inline TextCommentReplyCommandArchive() : TextCommentReplyCommandArchive(nullptr) {}
  ~TextCommentReplyCommandArchive() override;
  explicit constexpr TextCommentReplyCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextCommentReplyCommandArchive(const TextCommentReplyCommandArchive& from);
  TextCommentReplyCommandArchive(TextCommentReplyCommandArchive&& from) noexcept
    : TextCommentReplyCommandArchive() {
    *this = ::std::move(from);
  }

  inline TextCommentReplyCommandArchive& operator=(const TextCommentReplyCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextCommentReplyCommandArchive& operator=(TextCommentReplyCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextCommentReplyCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextCommentReplyCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TextCommentReplyCommandArchive*>(
               &_TextCommentReplyCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TextCommentReplyCommandArchive& a, TextCommentReplyCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextCommentReplyCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextCommentReplyCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextCommentReplyCommandArchive* New() const final {
    return new TextCommentReplyCommandArchive();
  }

  TextCommentReplyCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextCommentReplyCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextCommentReplyCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TextCommentReplyCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextCommentReplyCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.TextCommentReplyCommandArchive";
  }
  protected:
  explicit TextCommentReplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationUuidFieldNumber = 3,
    kSuperFieldNumber = 1,
    kStorageUuidPathFieldNumber = 2,
    kForwardCommentFieldNumber = 4,
    kInverseCommentFieldNumber = 5,
    kForwardVariantFieldNumber = 6,
    kInverseVariantFieldNumber = 7,
  };
  // optional string annotation_uuid = 3;
  bool has_annotation_uuid() const;
  private:
  bool _internal_has_annotation_uuid() const;
  public:
  void clear_annotation_uuid();
  const std::string& annotation_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_annotation_uuid();
  void set_allocated_annotation_uuid(std::string* annotation_uuid);
  private:
  const std::string& _internal_annotation_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation_uuid(const std::string& value);
  std::string* _internal_mutable_annotation_uuid();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // optional .TSP.Reference forward_comment = 4;
  bool has_forward_comment() const;
  private:
  bool _internal_has_forward_comment() const;
  public:
  void clear_forward_comment();
  const ::TSP::Reference& forward_comment() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_forward_comment();
  ::TSP::Reference* mutable_forward_comment();
  void set_allocated_forward_comment(::TSP::Reference* forward_comment);
  private:
  const ::TSP::Reference& _internal_forward_comment() const;
  ::TSP::Reference* _internal_mutable_forward_comment();
  public:
  void unsafe_arena_set_allocated_forward_comment(
      ::TSP::Reference* forward_comment);
  ::TSP::Reference* unsafe_arena_release_forward_comment();

  // optional .TSP.Reference inverse_comment = 5;
  bool has_inverse_comment() const;
  private:
  bool _internal_has_inverse_comment() const;
  public:
  void clear_inverse_comment();
  const ::TSP::Reference& inverse_comment() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_inverse_comment();
  ::TSP::Reference* mutable_inverse_comment();
  void set_allocated_inverse_comment(::TSP::Reference* inverse_comment);
  private:
  const ::TSP::Reference& _internal_inverse_comment() const;
  ::TSP::Reference* _internal_mutable_inverse_comment();
  public:
  void unsafe_arena_set_allocated_inverse_comment(
      ::TSP::Reference* inverse_comment);
  ::TSP::Reference* unsafe_arena_release_inverse_comment();

  // optional .TSD.CommentCommandVariant forward_variant = 6;
  bool has_forward_variant() const;
  private:
  bool _internal_has_forward_variant() const;
  public:
  void clear_forward_variant();
  ::TSD::CommentCommandVariant forward_variant() const;
  void set_forward_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_forward_variant() const;
  void _internal_set_forward_variant(::TSD::CommentCommandVariant value);
  public:

  // optional .TSD.CommentCommandVariant inverse_variant = 7;
  bool has_inverse_variant() const;
  private:
  bool _internal_has_inverse_variant() const;
  public:
  void clear_inverse_variant();
  ::TSD::CommentCommandVariant inverse_variant() const;
  void set_inverse_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_inverse_variant() const;
  void _internal_set_inverse_variant(::TSD::CommentCommandVariant value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.TextCommentReplyCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_uuid_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* storage_uuid_path_;
  ::TSP::Reference* forward_comment_;
  ::TSP::Reference* inverse_comment_;
  int forward_variant_;
  int inverse_variant_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainedObjectsCommandArchive_AddBehaviorArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs) */ {
 public:
  inline ContainedObjectsCommandArchive_AddBehaviorArgs() : ContainedObjectsCommandArchive_AddBehaviorArgs(nullptr) {}
  ~ContainedObjectsCommandArchive_AddBehaviorArgs() override;
  explicit constexpr ContainedObjectsCommandArchive_AddBehaviorArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainedObjectsCommandArchive_AddBehaviorArgs(const ContainedObjectsCommandArchive_AddBehaviorArgs& from);
  ContainedObjectsCommandArchive_AddBehaviorArgs(ContainedObjectsCommandArchive_AddBehaviorArgs&& from) noexcept
    : ContainedObjectsCommandArchive_AddBehaviorArgs() {
    *this = ::std::move(from);
  }

  inline ContainedObjectsCommandArchive_AddBehaviorArgs& operator=(const ContainedObjectsCommandArchive_AddBehaviorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainedObjectsCommandArchive_AddBehaviorArgs& operator=(ContainedObjectsCommandArchive_AddBehaviorArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainedObjectsCommandArchive_AddBehaviorArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainedObjectsCommandArchive_AddBehaviorArgs* internal_default_instance() {
    return reinterpret_cast<const ContainedObjectsCommandArchive_AddBehaviorArgs*>(
               &_ContainedObjectsCommandArchive_AddBehaviorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ContainedObjectsCommandArchive_AddBehaviorArgs& a, ContainedObjectsCommandArchive_AddBehaviorArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainedObjectsCommandArchive_AddBehaviorArgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainedObjectsCommandArchive_AddBehaviorArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainedObjectsCommandArchive_AddBehaviorArgs* New() const final {
    return new ContainedObjectsCommandArchive_AddBehaviorArgs();
  }

  ContainedObjectsCommandArchive_AddBehaviorArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainedObjectsCommandArchive_AddBehaviorArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainedObjectsCommandArchive_AddBehaviorArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainedObjectsCommandArchive_AddBehaviorArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainedObjectsCommandArchive_AddBehaviorArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs";
  }
  protected:
  explicit ContainedObjectsCommandArchive_AddBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 1,
  };
  // repeated .TSK.AddIdOperationArgs args_list = 1;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::AddIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::AddIdOperationArgs& args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      args_list() const;

  // @@protoc_insertion_point(class_scope:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > args_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainedObjectsCommandArchive_RemoveBehaviorArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs) */ {
 public:
  inline ContainedObjectsCommandArchive_RemoveBehaviorArgs() : ContainedObjectsCommandArchive_RemoveBehaviorArgs(nullptr) {}
  ~ContainedObjectsCommandArchive_RemoveBehaviorArgs() override;
  explicit constexpr ContainedObjectsCommandArchive_RemoveBehaviorArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainedObjectsCommandArchive_RemoveBehaviorArgs(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from);
  ContainedObjectsCommandArchive_RemoveBehaviorArgs(ContainedObjectsCommandArchive_RemoveBehaviorArgs&& from) noexcept
    : ContainedObjectsCommandArchive_RemoveBehaviorArgs() {
    *this = ::std::move(from);
  }

  inline ContainedObjectsCommandArchive_RemoveBehaviorArgs& operator=(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainedObjectsCommandArchive_RemoveBehaviorArgs& operator=(ContainedObjectsCommandArchive_RemoveBehaviorArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainedObjectsCommandArchive_RemoveBehaviorArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainedObjectsCommandArchive_RemoveBehaviorArgs* internal_default_instance() {
    return reinterpret_cast<const ContainedObjectsCommandArchive_RemoveBehaviorArgs*>(
               &_ContainedObjectsCommandArchive_RemoveBehaviorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ContainedObjectsCommandArchive_RemoveBehaviorArgs& a, ContainedObjectsCommandArchive_RemoveBehaviorArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainedObjectsCommandArchive_RemoveBehaviorArgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainedObjectsCommandArchive_RemoveBehaviorArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainedObjectsCommandArchive_RemoveBehaviorArgs* New() const final {
    return new ContainedObjectsCommandArchive_RemoveBehaviorArgs();
  }

  ContainedObjectsCommandArchive_RemoveBehaviorArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainedObjectsCommandArchive_RemoveBehaviorArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainedObjectsCommandArchive_RemoveBehaviorArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs";
  }
  protected:
  explicit ContainedObjectsCommandArchive_RemoveBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 1,
  };
  // repeated .TSK.RemoveIdOperationArgs args_list = 1;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      args_list() const;

  // @@protoc_insertion_point(class_scope:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > args_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainedObjectsCommandArchive_RearrangeBehaviorArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs) */ {
 public:
  inline ContainedObjectsCommandArchive_RearrangeBehaviorArgs() : ContainedObjectsCommandArchive_RearrangeBehaviorArgs(nullptr) {}
  ~ContainedObjectsCommandArchive_RearrangeBehaviorArgs() override;
  explicit constexpr ContainedObjectsCommandArchive_RearrangeBehaviorArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainedObjectsCommandArchive_RearrangeBehaviorArgs(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from);
  ContainedObjectsCommandArchive_RearrangeBehaviorArgs(ContainedObjectsCommandArchive_RearrangeBehaviorArgs&& from) noexcept
    : ContainedObjectsCommandArchive_RearrangeBehaviorArgs() {
    *this = ::std::move(from);
  }

  inline ContainedObjectsCommandArchive_RearrangeBehaviorArgs& operator=(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainedObjectsCommandArchive_RearrangeBehaviorArgs& operator=(ContainedObjectsCommandArchive_RearrangeBehaviorArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainedObjectsCommandArchive_RearrangeBehaviorArgs* internal_default_instance() {
    return reinterpret_cast<const ContainedObjectsCommandArchive_RearrangeBehaviorArgs*>(
               &_ContainedObjectsCommandArchive_RearrangeBehaviorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ContainedObjectsCommandArchive_RearrangeBehaviorArgs& a, ContainedObjectsCommandArchive_RearrangeBehaviorArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainedObjectsCommandArchive_RearrangeBehaviorArgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainedObjectsCommandArchive_RearrangeBehaviorArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainedObjectsCommandArchive_RearrangeBehaviorArgs* New() const final {
    return new ContainedObjectsCommandArchive_RearrangeBehaviorArgs();
  }

  ContainedObjectsCommandArchive_RearrangeBehaviorArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainedObjectsCommandArchive_RearrangeBehaviorArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainedObjectsCommandArchive_RearrangeBehaviorArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs";
  }
  protected:
  explicit ContainedObjectsCommandArchive_RearrangeBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 1,
  };
  // repeated .TSK.RearrangeIdOperationArgs args_list = 1;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      args_list() const;

  // @@protoc_insertion_point(class_scope:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > args_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainedObjectsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ContainedObjectsCommandArchive) */ {
 public:
  inline ContainedObjectsCommandArchive() : ContainedObjectsCommandArchive(nullptr) {}
  ~ContainedObjectsCommandArchive() override;
  explicit constexpr ContainedObjectsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainedObjectsCommandArchive(const ContainedObjectsCommandArchive& from);
  ContainedObjectsCommandArchive(ContainedObjectsCommandArchive&& from) noexcept
    : ContainedObjectsCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainedObjectsCommandArchive& operator=(const ContainedObjectsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainedObjectsCommandArchive& operator=(ContainedObjectsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainedObjectsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainedObjectsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainedObjectsCommandArchive*>(
               &_ContainedObjectsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ContainedObjectsCommandArchive& a, ContainedObjectsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainedObjectsCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainedObjectsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainedObjectsCommandArchive* New() const final {
    return new ContainedObjectsCommandArchive();
  }

  ContainedObjectsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainedObjectsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainedObjectsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContainedObjectsCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainedObjectsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ContainedObjectsCommandArchive";
  }
  protected:
  explicit ContainedObjectsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContainedObjectsCommandArchive_AddBehaviorArgs AddBehaviorArgs;
  typedef ContainedObjectsCommandArchive_RemoveBehaviorArgs RemoveBehaviorArgs;
  typedef ContainedObjectsCommandArchive_RearrangeBehaviorArgs RearrangeBehaviorArgs;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 3,
    kContainerNameFieldNumber = 9,
    kSuperFieldNumber = 1,
    kTargetFieldNumber = 2,
    kUndoObjectForCommitFieldNumber = 4,
    kUndoObjectForMakeInverseFieldNumber = 5,
    kAddBehaviorArgsFieldNumber = 6,
    kRemoveBehaviorArgsFieldNumber = 7,
    kRearrangeBehaviorArgsFieldNumber = 8,
  };
  // repeated .TSP.Reference objects = 3;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::TSP::Reference* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_objects();
  private:
  const ::TSP::Reference& _internal_objects(int index) const;
  ::TSP::Reference* _internal_add_objects();
  public:
  const ::TSP::Reference& objects(int index) const;
  ::TSP::Reference* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      objects() const;

  // optional string container_name = 9;
  bool has_container_name() const;
  private:
  bool _internal_has_container_name() const;
  public:
  void clear_container_name();
  const std::string& container_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_container_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_container_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_container_name();
  void set_allocated_container_name(std::string* container_name);
  private:
  const std::string& _internal_container_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_container_name(const std::string& value);
  std::string* _internal_mutable_container_name();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::TSP::Reference& target() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_target();
  ::TSP::Reference* mutable_target();
  void set_allocated_target(::TSP::Reference* target);
  private:
  const ::TSP::Reference& _internal_target() const;
  ::TSP::Reference* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::TSP::Reference* target);
  ::TSP::Reference* unsafe_arena_release_target();

  // optional .TSP.Reference undo_object_for_commit = 4;
  bool has_undo_object_for_commit() const;
  private:
  bool _internal_has_undo_object_for_commit() const;
  public:
  void clear_undo_object_for_commit();
  const ::TSP::Reference& undo_object_for_commit() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_object_for_commit();
  ::TSP::Reference* mutable_undo_object_for_commit();
  void set_allocated_undo_object_for_commit(::TSP::Reference* undo_object_for_commit);
  private:
  const ::TSP::Reference& _internal_undo_object_for_commit() const;
  ::TSP::Reference* _internal_mutable_undo_object_for_commit();
  public:
  void unsafe_arena_set_allocated_undo_object_for_commit(
      ::TSP::Reference* undo_object_for_commit);
  ::TSP::Reference* unsafe_arena_release_undo_object_for_commit();

  // optional .TSP.Reference undo_object_for_make_inverse = 5;
  bool has_undo_object_for_make_inverse() const;
  private:
  bool _internal_has_undo_object_for_make_inverse() const;
  public:
  void clear_undo_object_for_make_inverse();
  const ::TSP::Reference& undo_object_for_make_inverse() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_object_for_make_inverse();
  ::TSP::Reference* mutable_undo_object_for_make_inverse();
  void set_allocated_undo_object_for_make_inverse(::TSP::Reference* undo_object_for_make_inverse);
  private:
  const ::TSP::Reference& _internal_undo_object_for_make_inverse() const;
  ::TSP::Reference* _internal_mutable_undo_object_for_make_inverse();
  public:
  void unsafe_arena_set_allocated_undo_object_for_make_inverse(
      ::TSP::Reference* undo_object_for_make_inverse);
  ::TSP::Reference* unsafe_arena_release_undo_object_for_make_inverse();

  // optional .TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs add_behavior_args = 6;
  bool has_add_behavior_args() const;
  private:
  bool _internal_has_add_behavior_args() const;
  public:
  void clear_add_behavior_args();
  const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs& add_behavior_args() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* release_add_behavior_args();
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* mutable_add_behavior_args();
  void set_allocated_add_behavior_args(::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* add_behavior_args);
  private:
  const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs& _internal_add_behavior_args() const;
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* _internal_mutable_add_behavior_args();
  public:
  void unsafe_arena_set_allocated_add_behavior_args(
      ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* add_behavior_args);
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* unsafe_arena_release_add_behavior_args();

  // optional .TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs remove_behavior_args = 7;
  bool has_remove_behavior_args() const;
  private:
  bool _internal_has_remove_behavior_args() const;
  public:
  void clear_remove_behavior_args();
  const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs& remove_behavior_args() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* release_remove_behavior_args();
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* mutable_remove_behavior_args();
  void set_allocated_remove_behavior_args(::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* remove_behavior_args);
  private:
  const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs& _internal_remove_behavior_args() const;
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* _internal_mutable_remove_behavior_args();
  public:
  void unsafe_arena_set_allocated_remove_behavior_args(
      ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* remove_behavior_args);
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* unsafe_arena_release_remove_behavior_args();

  // optional .TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs rearrange_behavior_args = 8;
  bool has_rearrange_behavior_args() const;
  private:
  bool _internal_has_rearrange_behavior_args() const;
  public:
  void clear_rearrange_behavior_args();
  const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs& rearrange_behavior_args() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* release_rearrange_behavior_args();
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* mutable_rearrange_behavior_args();
  void set_allocated_rearrange_behavior_args(::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* rearrange_behavior_args);
  private:
  const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs& _internal_rearrange_behavior_args() const;
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* _internal_mutable_rearrange_behavior_args();
  public:
  void unsafe_arena_set_allocated_rearrange_behavior_args(
      ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* rearrange_behavior_args);
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* unsafe_arena_release_rearrange_behavior_args();

  // @@protoc_insertion_point(class_scope:TSWP.ContainedObjectsCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_name_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* target_;
  ::TSP::Reference* undo_object_for_commit_;
  ::TSP::Reference* undo_object_for_make_inverse_;
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* add_behavior_args_;
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* remove_behavior_args_;
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* rearrange_behavior_args_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class EquationInfoGeometryCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.EquationInfoGeometryCommandArchive) */ {
 public:
  inline EquationInfoGeometryCommandArchive() : EquationInfoGeometryCommandArchive(nullptr) {}
  ~EquationInfoGeometryCommandArchive() override;
  explicit constexpr EquationInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquationInfoGeometryCommandArchive(const EquationInfoGeometryCommandArchive& from);
  EquationInfoGeometryCommandArchive(EquationInfoGeometryCommandArchive&& from) noexcept
    : EquationInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline EquationInfoGeometryCommandArchive& operator=(const EquationInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquationInfoGeometryCommandArchive& operator=(EquationInfoGeometryCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquationInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquationInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const EquationInfoGeometryCommandArchive*>(
               &_EquationInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(EquationInfoGeometryCommandArchive& a, EquationInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EquationInfoGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquationInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquationInfoGeometryCommandArchive* New() const final {
    return new EquationInfoGeometryCommandArchive();
  }

  EquationInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquationInfoGeometryCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquationInfoGeometryCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EquationInfoGeometryCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquationInfoGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.EquationInfoGeometryCommandArchive";
  }
  protected:
  explicit EquationInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // optional .TSD.MediaInfoGeometryCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::MediaInfoGeometryCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::MediaInfoGeometryCommandArchive* release_super();
  ::TSD::MediaInfoGeometryCommandArchive* mutable_super();
  void set_allocated_super(::TSD::MediaInfoGeometryCommandArchive* super);
  private:
  const ::TSD::MediaInfoGeometryCommandArchive& _internal_super() const;
  ::TSD::MediaInfoGeometryCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::MediaInfoGeometryCommandArchive* super);
  ::TSD::MediaInfoGeometryCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSWP.EquationInfoGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::MediaInfoGeometryCommandArchive* super_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CharacterStyleChangePropertyCommand_GArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.CharacterStyleChangePropertyCommand_GArchive) */ {
 public:
  inline CharacterStyleChangePropertyCommand_GArchive() : CharacterStyleChangePropertyCommand_GArchive(nullptr) {}
  ~CharacterStyleChangePropertyCommand_GArchive() override;
  explicit constexpr CharacterStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterStyleChangePropertyCommand_GArchive(const CharacterStyleChangePropertyCommand_GArchive& from);
  CharacterStyleChangePropertyCommand_GArchive(CharacterStyleChangePropertyCommand_GArchive&& from) noexcept
    : CharacterStyleChangePropertyCommand_GArchive() {
    *this = ::std::move(from);
  }

  inline CharacterStyleChangePropertyCommand_GArchive& operator=(const CharacterStyleChangePropertyCommand_GArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterStyleChangePropertyCommand_GArchive& operator=(CharacterStyleChangePropertyCommand_GArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterStyleChangePropertyCommand_GArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterStyleChangePropertyCommand_GArchive* internal_default_instance() {
    return reinterpret_cast<const CharacterStyleChangePropertyCommand_GArchive*>(
               &_CharacterStyleChangePropertyCommand_GArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CharacterStyleChangePropertyCommand_GArchive& a, CharacterStyleChangePropertyCommand_GArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterStyleChangePropertyCommand_GArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterStyleChangePropertyCommand_GArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterStyleChangePropertyCommand_GArchive* New() const final {
    return new CharacterStyleChangePropertyCommand_GArchive();
  }

  CharacterStyleChangePropertyCommand_GArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterStyleChangePropertyCommand_GArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterStyleChangePropertyCommand_GArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterStyleChangePropertyCommand_GArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStyleChangePropertyCommand_GArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.CharacterStyleChangePropertyCommand_GArchive";
  }
  protected:
  explicit CharacterStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeListFieldNumber = 2,
    kChangeListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRangeListUndefinedFieldNumber = 3,
    kChangeListUndefinedFieldNumber = 5,
    kDisableCharacterStylePromotionFieldNumber = 6,
  };
  // repeated .TSP.Range range_list = 2;
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  ::TSP::Range* mutable_range_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_range_list();
  private:
  const ::TSP::Range& _internal_range_list(int index) const;
  ::TSP::Range* _internal_add_range_list();
  public:
  const ::TSP::Range& range_list(int index) const;
  ::TSP::Range* add_range_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      range_list() const;

  // repeated .TSWPSOS.CharacterStylePropertyChangeSetArchive change_list = 4;
  int change_list_size() const;
  private:
  int _internal_change_list_size() const;
  public:
  void clear_change_list();
  ::TSWPSOS::CharacterStylePropertyChangeSetArchive* mutable_change_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::CharacterStylePropertyChangeSetArchive >*
      mutable_change_list();
  private:
  const ::TSWPSOS::CharacterStylePropertyChangeSetArchive& _internal_change_list(int index) const;
  ::TSWPSOS::CharacterStylePropertyChangeSetArchive* _internal_add_change_list();
  public:
  const ::TSWPSOS::CharacterStylePropertyChangeSetArchive& change_list(int index) const;
  ::TSWPSOS::CharacterStylePropertyChangeSetArchive* add_change_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::CharacterStylePropertyChangeSetArchive >&
      change_list() const;

  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // optional bool range_list_undefined = 3;
  bool has_range_list_undefined() const;
  private:
  bool _internal_has_range_list_undefined() const;
  public:
  void clear_range_list_undefined();
  bool range_list_undefined() const;
  void set_range_list_undefined(bool value);
  private:
  bool _internal_range_list_undefined() const;
  void _internal_set_range_list_undefined(bool value);
  public:

  // optional bool change_list_undefined = 5;
  bool has_change_list_undefined() const;
  private:
  bool _internal_has_change_list_undefined() const;
  public:
  void clear_change_list_undefined();
  bool change_list_undefined() const;
  void set_change_list_undefined(bool value);
  private:
  bool _internal_change_list_undefined() const;
  void _internal_set_change_list_undefined(bool value);
  public:

  // required bool disable_character_style_promotion = 6;
  bool has_disable_character_style_promotion() const;
  private:
  bool _internal_has_disable_character_style_promotion() const;
  public:
  void clear_disable_character_style_promotion();
  bool disable_character_style_promotion() const;
  void set_disable_character_style_promotion(bool value);
  private:
  bool _internal_disable_character_style_promotion() const;
  void _internal_set_disable_character_style_promotion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.CharacterStyleChangePropertyCommand_GArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > range_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::CharacterStylePropertyChangeSetArchive > change_list_;
  ::TSWP::StorageActionCommandArchive* super_;
  bool range_list_undefined_;
  bool change_list_undefined_;
  bool disable_character_style_promotion_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ParagraphStyleChangePropertyCommand_GArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSWP.ParagraphStyleChangePropertyCommand_GArchive) */ {
 public:
  inline ParagraphStyleChangePropertyCommand_GArchive() : ParagraphStyleChangePropertyCommand_GArchive(nullptr) {}
  ~ParagraphStyleChangePropertyCommand_GArchive() override;
  explicit constexpr ParagraphStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParagraphStyleChangePropertyCommand_GArchive(const ParagraphStyleChangePropertyCommand_GArchive& from);
  ParagraphStyleChangePropertyCommand_GArchive(ParagraphStyleChangePropertyCommand_GArchive&& from) noexcept
    : ParagraphStyleChangePropertyCommand_GArchive() {
    *this = ::std::move(from);
  }

  inline ParagraphStyleChangePropertyCommand_GArchive& operator=(const ParagraphStyleChangePropertyCommand_GArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParagraphStyleChangePropertyCommand_GArchive& operator=(ParagraphStyleChangePropertyCommand_GArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParagraphStyleChangePropertyCommand_GArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParagraphStyleChangePropertyCommand_GArchive* internal_default_instance() {
    return reinterpret_cast<const ParagraphStyleChangePropertyCommand_GArchive*>(
               &_ParagraphStyleChangePropertyCommand_GArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ParagraphStyleChangePropertyCommand_GArchive& a, ParagraphStyleChangePropertyCommand_GArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ParagraphStyleChangePropertyCommand_GArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParagraphStyleChangePropertyCommand_GArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParagraphStyleChangePropertyCommand_GArchive* New() const final {
    return new ParagraphStyleChangePropertyCommand_GArchive();
  }

  ParagraphStyleChangePropertyCommand_GArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParagraphStyleChangePropertyCommand_GArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParagraphStyleChangePropertyCommand_GArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParagraphStyleChangePropertyCommand_GArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParagraphStyleChangePropertyCommand_GArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSWP.ParagraphStyleChangePropertyCommand_GArchive";
  }
  protected:
  explicit ParagraphStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeListFieldNumber = 2,
    kChangeListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRangeListUndefinedFieldNumber = 3,
    kChangeListUndefinedFieldNumber = 5,
  };
  // repeated .TSP.Range range_list = 2;
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  ::TSP::Range* mutable_range_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_range_list();
  private:
  const ::TSP::Range& _internal_range_list(int index) const;
  ::TSP::Range* _internal_add_range_list();
  public:
  const ::TSP::Range& range_list(int index) const;
  ::TSP::Range* add_range_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      range_list() const;

  // repeated .TSWPSOS.ParagraphStylePropertyChangeSetArchive change_list = 4;
  int change_list_size() const;
  private:
  int _internal_change_list_size() const;
  public:
  void clear_change_list();
  ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* mutable_change_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::ParagraphStylePropertyChangeSetArchive >*
      mutable_change_list();
  private:
  const ::TSWPSOS::ParagraphStylePropertyChangeSetArchive& _internal_change_list(int index) const;
  ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* _internal_add_change_list();
  public:
  const ::TSWPSOS::ParagraphStylePropertyChangeSetArchive& change_list(int index) const;
  ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* add_change_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::ParagraphStylePropertyChangeSetArchive >&
      change_list() const;

  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // optional bool range_list_undefined = 3;
  bool has_range_list_undefined() const;
  private:
  bool _internal_has_range_list_undefined() const;
  public:
  void clear_range_list_undefined();
  bool range_list_undefined() const;
  void set_range_list_undefined(bool value);
  private:
  bool _internal_range_list_undefined() const;
  void _internal_set_range_list_undefined(bool value);
  public:

  // optional bool change_list_undefined = 5;
  bool has_change_list_undefined() const;
  private:
  bool _internal_has_change_list_undefined() const;
  public:
  void clear_change_list_undefined();
  bool change_list_undefined() const;
  void set_change_list_undefined(bool value);
  private:
  bool _internal_change_list_undefined() const;
  void _internal_set_change_list_undefined(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > range_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::ParagraphStylePropertyChangeSetArchive > change_list_;
  ::TSWP::StorageActionCommandArchive* super_;
  bool range_list_undefined_;
  bool change_list_undefined_;
  friend struct ::TableStruct_TSWPCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DummyCommandArchive

// required uint32 foo = 1;
inline bool DummyCommandArchive::_internal_has_foo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DummyCommandArchive::has_foo() const {
  return _internal_has_foo();
}
inline void DummyCommandArchive::clear_foo() {
  foo_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyCommandArchive::_internal_foo() const {
  return foo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DummyCommandArchive::foo() const {
  // @@protoc_insertion_point(field_get:TSWP.DummyCommandArchive.foo)
  return _internal_foo();
}
inline void DummyCommandArchive::_internal_set_foo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  foo_ = value;
}
inline void DummyCommandArchive::set_foo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_foo(value);
  // @@protoc_insertion_point(field_set:TSWP.DummyCommandArchive.foo)
}

// -------------------------------------------------------------------

// TextCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool TextCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TextCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TextCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TextCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.super)
  return _internal_super();
}
inline void TextCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommandArchive.super)
}
inline ::TSK::CommandArchive* TextCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TextCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TextCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* TextCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommandArchive.super)
  return _msg;
}
inline void TextCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool TextCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool TextCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& TextCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.storage)
  return _internal_storage();
}
inline void TextCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommandArchive.storage)
}
inline ::TSP::Reference* TextCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TextCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* TextCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommandArchive.storage)
  return _msg;
}
inline void TextCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommandArchive.storage)
}

// optional .TSWP.UndoTransaction undo_transaction = 3;
inline bool TextCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool TextCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& TextCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& TextCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void TextCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* TextCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* TextCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* TextCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* TextCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommandArchive.undo_transaction)
  return _msg;
}
inline void TextCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommandArchive.undo_transaction)
}

// optional uint32 restore_range_location = 4;
inline bool TextCommandArchive::_internal_has_restore_range_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TextCommandArchive::has_restore_range_location() const {
  return _internal_has_restore_range_location();
}
inline void TextCommandArchive::clear_restore_range_location() {
  restore_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::_internal_restore_range_location() const {
  return restore_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::restore_range_location() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.restore_range_location)
  return _internal_restore_range_location();
}
inline void TextCommandArchive::_internal_set_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  restore_range_location_ = value;
}
inline void TextCommandArchive::set_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_restore_range_location(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.restore_range_location)
}

// optional uint32 restore_range_length = 5;
inline bool TextCommandArchive::_internal_has_restore_range_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TextCommandArchive::has_restore_range_length() const {
  return _internal_has_restore_range_length();
}
inline void TextCommandArchive::clear_restore_range_length() {
  restore_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::_internal_restore_range_length() const {
  return restore_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::restore_range_length() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.restore_range_length)
  return _internal_restore_range_length();
}
inline void TextCommandArchive::_internal_set_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  restore_range_length_ = value;
}
inline void TextCommandArchive::set_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_restore_range_length(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.restore_range_length)
}

// optional uint32 redo_restore_range_location = 6;
inline bool TextCommandArchive::_internal_has_redo_restore_range_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TextCommandArchive::has_redo_restore_range_location() const {
  return _internal_has_redo_restore_range_location();
}
inline void TextCommandArchive::clear_redo_restore_range_location() {
  redo_restore_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::_internal_redo_restore_range_location() const {
  return redo_restore_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::redo_restore_range_location() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.redo_restore_range_location)
  return _internal_redo_restore_range_location();
}
inline void TextCommandArchive::_internal_set_redo_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  redo_restore_range_location_ = value;
}
inline void TextCommandArchive::set_redo_restore_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redo_restore_range_location(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.redo_restore_range_location)
}

// optional uint32 redo_restore_range_length = 7;
inline bool TextCommandArchive::_internal_has_redo_restore_range_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TextCommandArchive::has_redo_restore_range_length() const {
  return _internal_has_redo_restore_range_length();
}
inline void TextCommandArchive::clear_redo_restore_range_length() {
  redo_restore_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::_internal_redo_restore_range_length() const {
  return redo_restore_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::redo_restore_range_length() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.redo_restore_range_length)
  return _internal_redo_restore_range_length();
}
inline void TextCommandArchive::_internal_set_redo_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  redo_restore_range_length_ = value;
}
inline void TextCommandArchive::set_redo_restore_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redo_restore_range_length(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.redo_restore_range_length)
}

// optional uint32 text_command_flags = 9;
inline bool TextCommandArchive::_internal_has_text_command_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TextCommandArchive::has_text_command_flags() const {
  return _internal_has_text_command_flags();
}
inline void TextCommandArchive::clear_text_command_flags() {
  text_command_flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::_internal_text_command_flags() const {
  return text_command_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextCommandArchive::text_command_flags() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.text_command_flags)
  return _internal_text_command_flags();
}
inline void TextCommandArchive::_internal_set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  text_command_flags_ = value;
}
inline void TextCommandArchive::set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_text_command_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.text_command_flags)
}

// optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
inline bool TextCommandArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TextCommandArchive::has_kind() const {
  return _internal_has_kind();
}
inline void TextCommandArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TSWP::TextCommandArchive_Kind TextCommandArchive::_internal_kind() const {
  return static_cast< ::TSWP::TextCommandArchive_Kind >(kind_);
}
inline ::TSWP::TextCommandArchive_Kind TextCommandArchive::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommandArchive.kind)
  return _internal_kind();
}
inline void TextCommandArchive::_internal_set_kind(::TSWP::TextCommandArchive_Kind value) {
  assert(::TSWP::TextCommandArchive_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  kind_ = value;
}
inline void TextCommandArchive::set_kind(::TSWP::TextCommandArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommandArchive.kind)
}

// -------------------------------------------------------------------

// StorageActionCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool StorageActionCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StorageActionCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& StorageActionCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& StorageActionCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.super)
  return _internal_super();
}
inline void StorageActionCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageActionCommandArchive.super)
}
inline ::TSK::CommandArchive* StorageActionCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* StorageActionCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StorageActionCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* StorageActionCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* StorageActionCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.super)
  return _msg;
}
inline void StorageActionCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageActionCommandArchive.super)
}

// optional .TSP.UUIDPath storage = 2;
inline bool StorageActionCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool StorageActionCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::UUIDPath& StorageActionCommandArchive::_internal_storage() const {
  const ::TSP::UUIDPath* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& StorageActionCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.storage)
  return _internal_storage();
}
inline void StorageActionCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::UUIDPath* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageActionCommandArchive.storage)
}
inline ::TSP::UUIDPath* StorageActionCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* StorageActionCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.StorageActionCommandArchive.storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* StorageActionCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::UUIDPath* StorageActionCommandArchive::mutable_storage() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.storage)
  return _msg;
}
inline void StorageActionCommandArchive::set_allocated_storage(::TSP::UUIDPath* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageActionCommandArchive.storage)
}

// optional .TSWP.UndoTransaction undo_transaction = 3;
inline bool StorageActionCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool StorageActionCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& StorageActionCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& StorageActionCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void StorageActionCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageActionCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* StorageActionCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* StorageActionCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.StorageActionCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* StorageActionCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* StorageActionCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.undo_transaction)
  return _msg;
}
inline void StorageActionCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageActionCommandArchive.undo_transaction)
}

// optional uint32 text_command_flags = 4;
inline bool StorageActionCommandArchive::_internal_has_text_command_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_text_command_flags() const {
  return _internal_has_text_command_flags();
}
inline void StorageActionCommandArchive::clear_text_command_flags() {
  text_command_flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageActionCommandArchive::_internal_text_command_flags() const {
  return text_command_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StorageActionCommandArchive::text_command_flags() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.text_command_flags)
  return _internal_text_command_flags();
}
inline void StorageActionCommandArchive::_internal_set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  text_command_flags_ = value;
}
inline void StorageActionCommandArchive::set_text_command_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_text_command_flags(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.text_command_flags)
}

// optional .TSWP.StorageActionCommandArchive.Kind kind = 5 [default = kKindContained];
inline bool StorageActionCommandArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_kind() const {
  return _internal_has_kind();
}
inline void StorageActionCommandArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSWP::StorageActionCommandArchive_Kind StorageActionCommandArchive::_internal_kind() const {
  return static_cast< ::TSWP::StorageActionCommandArchive_Kind >(kind_);
}
inline ::TSWP::StorageActionCommandArchive_Kind StorageActionCommandArchive::kind() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.kind)
  return _internal_kind();
}
inline void StorageActionCommandArchive::_internal_set_kind(::TSWP::StorageActionCommandArchive_Kind value) {
  assert(::TSWP::StorageActionCommandArchive_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  kind_ = value;
}
inline void StorageActionCommandArchive::set_kind(::TSWP::StorageActionCommandArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.kind)
}

// repeated .TSP.UUID custom_format_keys = 6;
inline int StorageActionCommandArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int StorageActionCommandArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* StorageActionCommandArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
StorageActionCommandArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.StorageActionCommandArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& StorageActionCommandArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& StorageActionCommandArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* StorageActionCommandArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* StorageActionCommandArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:TSWP.StorageActionCommandArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
StorageActionCommandArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TSWP.StorageActionCommandArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional bool is_forward_inverse_command = 7;
inline bool StorageActionCommandArchive::_internal_has_is_forward_inverse_command() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_is_forward_inverse_command() const {
  return _internal_has_is_forward_inverse_command();
}
inline void StorageActionCommandArchive::clear_is_forward_inverse_command() {
  is_forward_inverse_command_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool StorageActionCommandArchive::_internal_is_forward_inverse_command() const {
  return is_forward_inverse_command_;
}
inline bool StorageActionCommandArchive::is_forward_inverse_command() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.is_forward_inverse_command)
  return _internal_is_forward_inverse_command();
}
inline void StorageActionCommandArchive::_internal_set_is_forward_inverse_command(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_forward_inverse_command_ = value;
}
inline void StorageActionCommandArchive::set_is_forward_inverse_command(bool value) {
  _internal_set_is_forward_inverse_command(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.is_forward_inverse_command)
}

// optional bool coalesceable = 8;
inline bool StorageActionCommandArchive::_internal_has_coalesceable() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_coalesceable() const {
  return _internal_has_coalesceable();
}
inline void StorageActionCommandArchive::clear_coalesceable() {
  coalesceable_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool StorageActionCommandArchive::_internal_coalesceable() const {
  return coalesceable_;
}
inline bool StorageActionCommandArchive::coalesceable() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.coalesceable)
  return _internal_coalesceable();
}
inline void StorageActionCommandArchive::_internal_set_coalesceable(bool value) {
  _has_bits_[0] |= 0x00000100u;
  coalesceable_ = value;
}
inline void StorageActionCommandArchive::set_coalesceable(bool value) {
  _internal_set_coalesceable(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.coalesceable)
}

// optional bool coalescing_text = 9;
inline bool StorageActionCommandArchive::_internal_has_coalescing_text() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_coalescing_text() const {
  return _internal_has_coalescing_text();
}
inline void StorageActionCommandArchive::clear_coalescing_text() {
  coalescing_text_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool StorageActionCommandArchive::_internal_coalescing_text() const {
  return coalescing_text_;
}
inline bool StorageActionCommandArchive::coalescing_text() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.coalescing_text)
  return _internal_coalescing_text();
}
inline void StorageActionCommandArchive::_internal_set_coalescing_text(bool value) {
  _has_bits_[0] |= 0x00000200u;
  coalescing_text_ = value;
}
inline void StorageActionCommandArchive::set_coalescing_text(bool value) {
  _internal_set_coalescing_text(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.coalescing_text)
}

// optional bool should_migrate_styles = 10;
inline bool StorageActionCommandArchive::_internal_has_should_migrate_styles() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_should_migrate_styles() const {
  return _internal_has_should_migrate_styles();
}
inline void StorageActionCommandArchive::clear_should_migrate_styles() {
  should_migrate_styles_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool StorageActionCommandArchive::_internal_should_migrate_styles() const {
  return should_migrate_styles_;
}
inline bool StorageActionCommandArchive::should_migrate_styles() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.should_migrate_styles)
  return _internal_should_migrate_styles();
}
inline void StorageActionCommandArchive::_internal_set_should_migrate_styles(bool value) {
  _has_bits_[0] |= 0x00000400u;
  should_migrate_styles_ = value;
}
inline void StorageActionCommandArchive::set_should_migrate_styles(bool value) {
  _internal_set_should_migrate_styles(value);
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.should_migrate_styles)
}

// optional .TSK.DataReferenceRecord changed_data_reference_record = 11;
inline bool StorageActionCommandArchive::_internal_has_changed_data_reference_record() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || changed_data_reference_record_ != nullptr);
  return value;
}
inline bool StorageActionCommandArchive::has_changed_data_reference_record() const {
  return _internal_has_changed_data_reference_record();
}
inline const ::TSK::DataReferenceRecord& StorageActionCommandArchive::_internal_changed_data_reference_record() const {
  const ::TSK::DataReferenceRecord* p = changed_data_reference_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::DataReferenceRecord&>(
      ::TSK::_DataReferenceRecord_default_instance_);
}
inline const ::TSK::DataReferenceRecord& StorageActionCommandArchive::changed_data_reference_record() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.changed_data_reference_record)
  return _internal_changed_data_reference_record();
}
inline void StorageActionCommandArchive::unsafe_arena_set_allocated_changed_data_reference_record(
    ::TSK::DataReferenceRecord* changed_data_reference_record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changed_data_reference_record_);
  }
  changed_data_reference_record_ = changed_data_reference_record;
  if (changed_data_reference_record) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StorageActionCommandArchive.changed_data_reference_record)
}
inline ::TSK::DataReferenceRecord* StorageActionCommandArchive::release_changed_data_reference_record() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::DataReferenceRecord* temp = changed_data_reference_record_;
  changed_data_reference_record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::DataReferenceRecord* StorageActionCommandArchive::unsafe_arena_release_changed_data_reference_record() {
  // @@protoc_insertion_point(field_release:TSWP.StorageActionCommandArchive.changed_data_reference_record)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::DataReferenceRecord* temp = changed_data_reference_record_;
  changed_data_reference_record_ = nullptr;
  return temp;
}
inline ::TSK::DataReferenceRecord* StorageActionCommandArchive::_internal_mutable_changed_data_reference_record() {
  _has_bits_[0] |= 0x00000010u;
  if (changed_data_reference_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::DataReferenceRecord>(GetArenaForAllocation());
    changed_data_reference_record_ = p;
  }
  return changed_data_reference_record_;
}
inline ::TSK::DataReferenceRecord* StorageActionCommandArchive::mutable_changed_data_reference_record() {
  ::TSK::DataReferenceRecord* _msg = _internal_mutable_changed_data_reference_record();
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.changed_data_reference_record)
  return _msg;
}
inline void StorageActionCommandArchive::set_allocated_changed_data_reference_record(::TSK::DataReferenceRecord* changed_data_reference_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(changed_data_reference_record_);
  }
  if (changed_data_reference_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changed_data_reference_record));
    if (message_arena != submessage_arena) {
      changed_data_reference_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changed_data_reference_record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  changed_data_reference_record_ = changed_data_reference_record;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageActionCommandArchive.changed_data_reference_record)
}

// optional string coalescing_property = 12;
inline bool StorageActionCommandArchive::_internal_has_coalescing_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageActionCommandArchive::has_coalescing_property() const {
  return _internal_has_coalescing_property();
}
inline void StorageActionCommandArchive::clear_coalescing_property() {
  coalescing_property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StorageActionCommandArchive::coalescing_property() const {
  // @@protoc_insertion_point(field_get:TSWP.StorageActionCommandArchive.coalescing_property)
  return _internal_coalescing_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageActionCommandArchive::set_coalescing_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 coalescing_property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.StorageActionCommandArchive.coalescing_property)
}
inline std::string* StorageActionCommandArchive::mutable_coalescing_property() {
  std::string* _s = _internal_mutable_coalescing_property();
  // @@protoc_insertion_point(field_mutable:TSWP.StorageActionCommandArchive.coalescing_property)
  return _s;
}
inline const std::string& StorageActionCommandArchive::_internal_coalescing_property() const {
  return coalescing_property_.Get();
}
inline void StorageActionCommandArchive::_internal_set_coalescing_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  coalescing_property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StorageActionCommandArchive::_internal_mutable_coalescing_property() {
  _has_bits_[0] |= 0x00000001u;
  return coalescing_property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StorageActionCommandArchive::release_coalescing_property() {
  // @@protoc_insertion_point(field_release:TSWP.StorageActionCommandArchive.coalescing_property)
  if (!_internal_has_coalescing_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return coalescing_property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StorageActionCommandArchive::set_allocated_coalescing_property(std::string* coalescing_property) {
  if (coalescing_property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coalescing_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coalescing_property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.StorageActionCommandArchive.coalescing_property)
}

// -------------------------------------------------------------------

// SetColumnStyleCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool SetColumnStyleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SetColumnStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& SetColumnStyleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& SetColumnStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.SetColumnStyleCommandArchive.super)
  return _internal_super();
}
inline void SetColumnStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SetColumnStyleCommandArchive.super)
}
inline ::TSK::CommandArchive* SetColumnStyleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* SetColumnStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.SetColumnStyleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* SetColumnStyleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* SetColumnStyleCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.SetColumnStyleCommandArchive.super)
  return _msg;
}
inline void SetColumnStyleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetColumnStyleCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool SetColumnStyleCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool SetColumnStyleCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& SetColumnStyleCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SetColumnStyleCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.SetColumnStyleCommandArchive.storage)
  return _internal_storage();
}
inline void SetColumnStyleCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SetColumnStyleCommandArchive.storage)
}
inline ::TSP::Reference* SetColumnStyleCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SetColumnStyleCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.SetColumnStyleCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SetColumnStyleCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* SetColumnStyleCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.SetColumnStyleCommandArchive.storage)
  return _msg;
}
inline void SetColumnStyleCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetColumnStyleCommandArchive.storage)
}

// optional .TSWP.UndoTransaction undo_transaction = 3;
inline bool SetColumnStyleCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool SetColumnStyleCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& SetColumnStyleCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& SetColumnStyleCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.SetColumnStyleCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void SetColumnStyleCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SetColumnStyleCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* SetColumnStyleCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* SetColumnStyleCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.SetColumnStyleCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* SetColumnStyleCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* SetColumnStyleCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.SetColumnStyleCommandArchive.undo_transaction)
  return _msg;
}
inline void SetColumnStyleCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetColumnStyleCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ReplaceAllUsesOfStyleCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ReplaceAllUsesOfStyleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ReplaceAllUsesOfStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ReplaceAllUsesOfStyleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ReplaceAllUsesOfStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ReplaceAllUsesOfStyleCommandArchive.super)
  return _internal_super();
}
inline void ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.super)
}
inline ::TSK::CommandArchive* ReplaceAllUsesOfStyleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ReplaceAllUsesOfStyleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ReplaceAllUsesOfStyleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ReplaceAllUsesOfStyleCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ReplaceAllUsesOfStyleCommandArchive.super)
  return _msg;
}
inline void ReplaceAllUsesOfStyleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool ReplaceAllUsesOfStyleCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool ReplaceAllUsesOfStyleCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& ReplaceAllUsesOfStyleCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReplaceAllUsesOfStyleCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.ReplaceAllUsesOfStyleCommandArchive.storage)
  return _internal_storage();
}
inline void ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.storage)
}
inline ::TSP::Reference* ReplaceAllUsesOfStyleCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.ReplaceAllUsesOfStyleCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReplaceAllUsesOfStyleCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* ReplaceAllUsesOfStyleCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.ReplaceAllUsesOfStyleCommandArchive.storage)
  return _msg;
}
inline void ReplaceAllUsesOfStyleCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.storage)
}

// optional .TSWP.UndoTransaction undo_transaction = 3;
inline bool ReplaceAllUsesOfStyleCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool ReplaceAllUsesOfStyleCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& ReplaceAllUsesOfStyleCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& ReplaceAllUsesOfStyleCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* ReplaceAllUsesOfStyleCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* ReplaceAllUsesOfStyleCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* ReplaceAllUsesOfStyleCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* ReplaceAllUsesOfStyleCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction)
  return _msg;
}
inline void ReplaceAllUsesOfStyleCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// InsertColumnsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool InsertColumnsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertColumnsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InsertColumnsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InsertColumnsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertColumnsCommandArchive.super)
  return _internal_super();
}
inline void InsertColumnsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertColumnsCommandArchive.super)
}
inline ::TSK::CommandArchive* InsertColumnsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InsertColumnsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.InsertColumnsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InsertColumnsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InsertColumnsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertColumnsCommandArchive.super)
  return _msg;
}
inline void InsertColumnsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertColumnsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool InsertColumnsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool InsertColumnsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& InsertColumnsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertColumnsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertColumnsCommandArchive.storage)
  return _internal_storage();
}
inline void InsertColumnsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertColumnsCommandArchive.storage)
}
inline ::TSP::Reference* InsertColumnsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* InsertColumnsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.InsertColumnsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertColumnsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* InsertColumnsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertColumnsCommandArchive.storage)
  return _msg;
}
inline void InsertColumnsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertColumnsCommandArchive.storage)
}

// optional uint32 column_index = 3;
inline bool InsertColumnsCommandArchive::_internal_has_column_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InsertColumnsCommandArchive::has_column_index() const {
  return _internal_has_column_index();
}
inline void InsertColumnsCommandArchive::clear_column_index() {
  column_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertColumnsCommandArchive::_internal_column_index() const {
  return column_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertColumnsCommandArchive::column_index() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertColumnsCommandArchive.column_index)
  return _internal_column_index();
}
inline void InsertColumnsCommandArchive::_internal_set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  column_index_ = value;
}
inline void InsertColumnsCommandArchive::set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_index(value);
  // @@protoc_insertion_point(field_set:TSWP.InsertColumnsCommandArchive.column_index)
}

// optional uint32 column_count = 4;
inline bool InsertColumnsCommandArchive::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InsertColumnsCommandArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void InsertColumnsCommandArchive::clear_column_count() {
  column_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertColumnsCommandArchive::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertColumnsCommandArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertColumnsCommandArchive.column_count)
  return _internal_column_count();
}
inline void InsertColumnsCommandArchive::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  column_count_ = value;
}
inline void InsertColumnsCommandArchive::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TSWP.InsertColumnsCommandArchive.column_count)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool InsertColumnsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool InsertColumnsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& InsertColumnsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& InsertColumnsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertColumnsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void InsertColumnsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertColumnsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* InsertColumnsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* InsertColumnsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.InsertColumnsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* InsertColumnsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* InsertColumnsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertColumnsCommandArchive.undo_transaction)
  return _msg;
}
inline void InsertColumnsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertColumnsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// InsertRowsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool InsertRowsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertRowsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InsertRowsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InsertRowsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertRowsCommandArchive.super)
  return _internal_super();
}
inline void InsertRowsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertRowsCommandArchive.super)
}
inline ::TSK::CommandArchive* InsertRowsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InsertRowsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.InsertRowsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InsertRowsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InsertRowsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertRowsCommandArchive.super)
  return _msg;
}
inline void InsertRowsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertRowsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool InsertRowsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool InsertRowsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& InsertRowsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertRowsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertRowsCommandArchive.storage)
  return _internal_storage();
}
inline void InsertRowsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertRowsCommandArchive.storage)
}
inline ::TSP::Reference* InsertRowsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* InsertRowsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.InsertRowsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertRowsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* InsertRowsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertRowsCommandArchive.storage)
  return _msg;
}
inline void InsertRowsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertRowsCommandArchive.storage)
}

// optional uint32 row_index = 3;
inline bool InsertRowsCommandArchive::_internal_has_row_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InsertRowsCommandArchive::has_row_index() const {
  return _internal_has_row_index();
}
inline void InsertRowsCommandArchive::clear_row_index() {
  row_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRowsCommandArchive::_internal_row_index() const {
  return row_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRowsCommandArchive::row_index() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertRowsCommandArchive.row_index)
  return _internal_row_index();
}
inline void InsertRowsCommandArchive::_internal_set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  row_index_ = value;
}
inline void InsertRowsCommandArchive::set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:TSWP.InsertRowsCommandArchive.row_index)
}

// optional uint32 row_count = 4;
inline bool InsertRowsCommandArchive::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InsertRowsCommandArchive::has_row_count() const {
  return _internal_has_row_count();
}
inline void InsertRowsCommandArchive::clear_row_count() {
  row_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRowsCommandArchive::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertRowsCommandArchive::row_count() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertRowsCommandArchive.row_count)
  return _internal_row_count();
}
inline void InsertRowsCommandArchive::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  row_count_ = value;
}
inline void InsertRowsCommandArchive::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:TSWP.InsertRowsCommandArchive.row_count)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool InsertRowsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool InsertRowsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& InsertRowsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& InsertRowsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.InsertRowsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void InsertRowsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.InsertRowsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* InsertRowsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* InsertRowsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.InsertRowsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* InsertRowsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* InsertRowsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.InsertRowsCommandArchive.undo_transaction)
  return _msg;
}
inline void InsertRowsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.InsertRowsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// RemoveColumnsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool RemoveColumnsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveColumnsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveColumnsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveColumnsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveColumnsCommandArchive.super)
  return _internal_super();
}
inline void RemoveColumnsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveColumnsCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveColumnsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* RemoveColumnsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveColumnsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveColumnsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveColumnsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveColumnsCommandArchive.super)
  return _msg;
}
inline void RemoveColumnsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveColumnsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool RemoveColumnsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool RemoveColumnsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& RemoveColumnsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveColumnsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveColumnsCommandArchive.storage)
  return _internal_storage();
}
inline void RemoveColumnsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveColumnsCommandArchive.storage)
}
inline ::TSP::Reference* RemoveColumnsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RemoveColumnsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveColumnsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveColumnsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* RemoveColumnsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveColumnsCommandArchive.storage)
  return _msg;
}
inline void RemoveColumnsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveColumnsCommandArchive.storage)
}

// optional uint32 column_index = 3;
inline bool RemoveColumnsCommandArchive::_internal_has_column_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoveColumnsCommandArchive::has_column_index() const {
  return _internal_has_column_index();
}
inline void RemoveColumnsCommandArchive::clear_column_index() {
  column_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveColumnsCommandArchive::_internal_column_index() const {
  return column_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveColumnsCommandArchive::column_index() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveColumnsCommandArchive.column_index)
  return _internal_column_index();
}
inline void RemoveColumnsCommandArchive::_internal_set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  column_index_ = value;
}
inline void RemoveColumnsCommandArchive::set_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_index(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveColumnsCommandArchive.column_index)
}

// optional uint32 column_count = 4;
inline bool RemoveColumnsCommandArchive::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoveColumnsCommandArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void RemoveColumnsCommandArchive::clear_column_count() {
  column_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveColumnsCommandArchive::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveColumnsCommandArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveColumnsCommandArchive.column_count)
  return _internal_column_count();
}
inline void RemoveColumnsCommandArchive::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  column_count_ = value;
}
inline void RemoveColumnsCommandArchive::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveColumnsCommandArchive.column_count)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool RemoveColumnsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool RemoveColumnsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& RemoveColumnsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& RemoveColumnsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveColumnsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void RemoveColumnsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveColumnsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* RemoveColumnsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* RemoveColumnsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveColumnsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* RemoveColumnsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* RemoveColumnsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveColumnsCommandArchive.undo_transaction)
  return _msg;
}
inline void RemoveColumnsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveColumnsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// RemoveRowsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool RemoveRowsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveRowsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveRowsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveRowsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveRowsCommandArchive.super)
  return _internal_super();
}
inline void RemoveRowsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveRowsCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveRowsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* RemoveRowsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveRowsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveRowsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveRowsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveRowsCommandArchive.super)
  return _msg;
}
inline void RemoveRowsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveRowsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool RemoveRowsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool RemoveRowsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& RemoveRowsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveRowsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveRowsCommandArchive.storage)
  return _internal_storage();
}
inline void RemoveRowsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveRowsCommandArchive.storage)
}
inline ::TSP::Reference* RemoveRowsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RemoveRowsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveRowsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveRowsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* RemoveRowsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveRowsCommandArchive.storage)
  return _msg;
}
inline void RemoveRowsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveRowsCommandArchive.storage)
}

// optional uint32 row_index = 3;
inline bool RemoveRowsCommandArchive::_internal_has_row_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoveRowsCommandArchive::has_row_index() const {
  return _internal_has_row_index();
}
inline void RemoveRowsCommandArchive::clear_row_index() {
  row_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRowsCommandArchive::_internal_row_index() const {
  return row_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRowsCommandArchive::row_index() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveRowsCommandArchive.row_index)
  return _internal_row_index();
}
inline void RemoveRowsCommandArchive::_internal_set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  row_index_ = value;
}
inline void RemoveRowsCommandArchive::set_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveRowsCommandArchive.row_index)
}

// optional uint32 row_count = 4;
inline bool RemoveRowsCommandArchive::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoveRowsCommandArchive::has_row_count() const {
  return _internal_has_row_count();
}
inline void RemoveRowsCommandArchive::clear_row_count() {
  row_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRowsCommandArchive::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveRowsCommandArchive::row_count() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveRowsCommandArchive.row_count)
  return _internal_row_count();
}
inline void RemoveRowsCommandArchive::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  row_count_ = value;
}
inline void RemoveRowsCommandArchive::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveRowsCommandArchive.row_count)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool RemoveRowsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool RemoveRowsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& RemoveRowsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& RemoveRowsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveRowsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void RemoveRowsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveRowsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* RemoveRowsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* RemoveRowsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveRowsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* RemoveRowsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* RemoveRowsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveRowsCommandArchive.undo_transaction)
  return _msg;
}
inline void RemoveRowsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveRowsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// MergeCellsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool MergeCellsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MergeCellsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MergeCellsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MergeCellsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.super)
  return _internal_super();
}
inline void MergeCellsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MergeCellsCommandArchive.super)
}
inline ::TSK::CommandArchive* MergeCellsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MergeCellsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.MergeCellsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MergeCellsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MergeCellsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.MergeCellsCommandArchive.super)
  return _msg;
}
inline void MergeCellsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeCellsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool MergeCellsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool MergeCellsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& MergeCellsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MergeCellsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.storage)
  return _internal_storage();
}
inline void MergeCellsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MergeCellsCommandArchive.storage)
}
inline ::TSP::Reference* MergeCellsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MergeCellsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.MergeCellsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MergeCellsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* MergeCellsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.MergeCellsCommandArchive.storage)
  return _msg;
}
inline void MergeCellsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeCellsCommandArchive.storage)
}

// optional uint32 row = 3;
inline bool MergeCellsCommandArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MergeCellsCommandArchive::has_row() const {
  return _internal_has_row();
}
inline void MergeCellsCommandArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::row() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.row)
  return _internal_row();
}
inline void MergeCellsCommandArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  row_ = value;
}
inline void MergeCellsCommandArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeCellsCommandArchive.row)
}

// optional uint32 column = 4;
inline bool MergeCellsCommandArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MergeCellsCommandArchive::has_column() const {
  return _internal_has_column();
}
inline void MergeCellsCommandArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::column() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.column)
  return _internal_column();
}
inline void MergeCellsCommandArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  column_ = value;
}
inline void MergeCellsCommandArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeCellsCommandArchive.column)
}

// optional uint32 row_count = 5;
inline bool MergeCellsCommandArchive::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MergeCellsCommandArchive::has_row_count() const {
  return _internal_has_row_count();
}
inline void MergeCellsCommandArchive::clear_row_count() {
  row_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::row_count() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.row_count)
  return _internal_row_count();
}
inline void MergeCellsCommandArchive::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  row_count_ = value;
}
inline void MergeCellsCommandArchive::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeCellsCommandArchive.row_count)
}

// optional uint32 column_count = 6;
inline bool MergeCellsCommandArchive::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MergeCellsCommandArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void MergeCellsCommandArchive::clear_column_count() {
  column_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeCellsCommandArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.column_count)
  return _internal_column_count();
}
inline void MergeCellsCommandArchive::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  column_count_ = value;
}
inline void MergeCellsCommandArchive::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TSWP.MergeCellsCommandArchive.column_count)
}

// optional .TSWP.UndoTransaction undo_transaction = 7;
inline bool MergeCellsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool MergeCellsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& MergeCellsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& MergeCellsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.MergeCellsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void MergeCellsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MergeCellsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* MergeCellsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* MergeCellsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.MergeCellsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* MergeCellsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* MergeCellsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.MergeCellsCommandArchive.undo_transaction)
  return _msg;
}
inline void MergeCellsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MergeCellsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ApplyPlaceholderTextCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ApplyPlaceholderTextCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ApplyPlaceholderTextCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.super)
  return _internal_super();
}
inline void ApplyPlaceholderTextCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.super)
}
inline ::TSK::CommandArchive* ApplyPlaceholderTextCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ApplyPlaceholderTextCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyPlaceholderTextCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ApplyPlaceholderTextCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ApplyPlaceholderTextCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyPlaceholderTextCommandArchive.super)
  return _msg;
}
inline void ApplyPlaceholderTextCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& ApplyPlaceholderTextCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ApplyPlaceholderTextCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.storage)
  return _internal_storage();
}
inline void ApplyPlaceholderTextCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.storage)
}
inline ::TSP::Reference* ApplyPlaceholderTextCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ApplyPlaceholderTextCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyPlaceholderTextCommandArchive.storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ApplyPlaceholderTextCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* ApplyPlaceholderTextCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyPlaceholderTextCommandArchive.storage)
  return _msg;
}
inline void ApplyPlaceholderTextCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.storage)
}

// optional uint32 selection_range_location = 3;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_selection_range_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_selection_range_location() const {
  return _internal_has_selection_range_location();
}
inline void ApplyPlaceholderTextCommandArchive::clear_selection_range_location() {
  selection_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyPlaceholderTextCommandArchive::_internal_selection_range_location() const {
  return selection_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyPlaceholderTextCommandArchive::selection_range_location() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.selection_range_location)
  return _internal_selection_range_location();
}
inline void ApplyPlaceholderTextCommandArchive::_internal_set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  selection_range_location_ = value;
}
inline void ApplyPlaceholderTextCommandArchive::set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selection_range_location(value);
  // @@protoc_insertion_point(field_set:TSWP.ApplyPlaceholderTextCommandArchive.selection_range_location)
}

// optional uint32 selection_range_length = 4;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_selection_range_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_selection_range_length() const {
  return _internal_has_selection_range_length();
}
inline void ApplyPlaceholderTextCommandArchive::clear_selection_range_length() {
  selection_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyPlaceholderTextCommandArchive::_internal_selection_range_length() const {
  return selection_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyPlaceholderTextCommandArchive::selection_range_length() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.selection_range_length)
  return _internal_selection_range_length();
}
inline void ApplyPlaceholderTextCommandArchive::_internal_set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  selection_range_length_ = value;
}
inline void ApplyPlaceholderTextCommandArchive::set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selection_range_length(value);
  // @@protoc_insertion_point(field_set:TSWP.ApplyPlaceholderTextCommandArchive.selection_range_length)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& ApplyPlaceholderTextCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& ApplyPlaceholderTextCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void ApplyPlaceholderTextCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* ApplyPlaceholderTextCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* ApplyPlaceholderTextCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* ApplyPlaceholderTextCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* ApplyPlaceholderTextCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction)
  return _msg;
}
inline void ApplyPlaceholderTextCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction)
}

// optional string script_tag = 6;
inline bool ApplyPlaceholderTextCommandArchive::_internal_has_script_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplyPlaceholderTextCommandArchive::has_script_tag() const {
  return _internal_has_script_tag();
}
inline void ApplyPlaceholderTextCommandArchive::clear_script_tag() {
  script_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplyPlaceholderTextCommandArchive::script_tag() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyPlaceholderTextCommandArchive.script_tag)
  return _internal_script_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplyPlaceholderTextCommandArchive::set_script_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ApplyPlaceholderTextCommandArchive.script_tag)
}
inline std::string* ApplyPlaceholderTextCommandArchive::mutable_script_tag() {
  std::string* _s = _internal_mutable_script_tag();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyPlaceholderTextCommandArchive.script_tag)
  return _s;
}
inline const std::string& ApplyPlaceholderTextCommandArchive::_internal_script_tag() const {
  return script_tag_.Get();
}
inline void ApplyPlaceholderTextCommandArchive::_internal_set_script_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApplyPlaceholderTextCommandArchive::_internal_mutable_script_tag() {
  _has_bits_[0] |= 0x00000001u;
  return script_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApplyPlaceholderTextCommandArchive::release_script_tag() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyPlaceholderTextCommandArchive.script_tag)
  if (!_internal_has_script_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return script_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApplyPlaceholderTextCommandArchive::set_allocated_script_tag(std::string* script_tag) {
  if (script_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  script_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyPlaceholderTextCommandArchive.script_tag)
}

// -------------------------------------------------------------------

// UpdateDateTimeFieldCommandArchive

// optional .TSWP.TextCommandArchive super = 1;
inline bool UpdateDateTimeFieldCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UpdateDateTimeFieldCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void UpdateDateTimeFieldCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::TextCommandArchive& UpdateDateTimeFieldCommandArchive::_internal_super() const {
  const ::TSWP::TextCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::TextCommandArchive&>(
      ::TSWP::_TextCommandArchive_default_instance_);
}
inline const ::TSWP::TextCommandArchive& UpdateDateTimeFieldCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateDateTimeFieldCommandArchive.super)
  return _internal_super();
}
inline void UpdateDateTimeFieldCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::TextCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.super)
}
inline ::TSWP::TextCommandArchive* UpdateDateTimeFieldCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::TextCommandArchive* UpdateDateTimeFieldCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateDateTimeFieldCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::TextCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::TextCommandArchive* UpdateDateTimeFieldCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::TextCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::TextCommandArchive* UpdateDateTimeFieldCommandArchive::mutable_super() {
  ::TSWP::TextCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateDateTimeFieldCommandArchive.super)
  return _msg;
}
inline void UpdateDateTimeFieldCommandArchive::set_allocated_super(::TSWP::TextCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::TextCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.super)
}

// optional .TSP.Reference date_time_field = 2;
inline bool UpdateDateTimeFieldCommandArchive::_internal_has_date_time_field() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || date_time_field_ != nullptr);
  return value;
}
inline bool UpdateDateTimeFieldCommandArchive::has_date_time_field() const {
  return _internal_has_date_time_field();
}
inline const ::TSP::Reference& UpdateDateTimeFieldCommandArchive::_internal_date_time_field() const {
  const ::TSP::Reference* p = date_time_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UpdateDateTimeFieldCommandArchive::date_time_field() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateDateTimeFieldCommandArchive.date_time_field)
  return _internal_date_time_field();
}
inline void UpdateDateTimeFieldCommandArchive::unsafe_arena_set_allocated_date_time_field(
    ::TSP::Reference* date_time_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_time_field_);
  }
  date_time_field_ = date_time_field;
  if (date_time_field) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.date_time_field)
}
inline ::TSP::Reference* UpdateDateTimeFieldCommandArchive::release_date_time_field() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = date_time_field_;
  date_time_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UpdateDateTimeFieldCommandArchive::unsafe_arena_release_date_time_field() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateDateTimeFieldCommandArchive.date_time_field)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = date_time_field_;
  date_time_field_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UpdateDateTimeFieldCommandArchive::_internal_mutable_date_time_field() {
  _has_bits_[0] |= 0x00000002u;
  if (date_time_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    date_time_field_ = p;
  }
  return date_time_field_;
}
inline ::TSP::Reference* UpdateDateTimeFieldCommandArchive::mutable_date_time_field() {
  ::TSP::Reference* _msg = _internal_mutable_date_time_field();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateDateTimeFieldCommandArchive.date_time_field)
  return _msg;
}
inline void UpdateDateTimeFieldCommandArchive::set_allocated_date_time_field(::TSP::Reference* date_time_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_time_field_);
  }
  if (date_time_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_time_field));
    if (message_arena != submessage_arena) {
      date_time_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time_field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_time_field_ = date_time_field;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.date_time_field)
}

// optional .TSP.Date date = 3;
inline bool UpdateDateTimeFieldCommandArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool UpdateDateTimeFieldCommandArchive::has_date() const {
  return _internal_has_date();
}
inline const ::TSP::Date& UpdateDateTimeFieldCommandArchive::_internal_date() const {
  const ::TSP::Date* p = date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& UpdateDateTimeFieldCommandArchive::date() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateDateTimeFieldCommandArchive.date)
  return _internal_date();
}
inline void UpdateDateTimeFieldCommandArchive::unsafe_arena_set_allocated_date(
    ::TSP::Date* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.date)
}
inline ::TSP::Date* UpdateDateTimeFieldCommandArchive::release_date() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Date* UpdateDateTimeFieldCommandArchive::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateDateTimeFieldCommandArchive.date)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Date* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::TSP::Date* UpdateDateTimeFieldCommandArchive::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000004u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArenaForAllocation());
    date_ = p;
  }
  return date_;
}
inline ::TSP::Date* UpdateDateTimeFieldCommandArchive::mutable_date() {
  ::TSP::Date* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateDateTimeFieldCommandArchive.date)
  return _msg;
}
inline void UpdateDateTimeFieldCommandArchive::set_allocated_date(::TSP::Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateDateTimeFieldCommandArchive.date)
}

// optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
inline bool UpdateDateTimeFieldCommandArchive::_internal_has_date_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateDateTimeFieldCommandArchive::has_date_style() const {
  return _internal_has_date_style();
}
inline void UpdateDateTimeFieldCommandArchive::clear_date_style() {
  date_style_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle UpdateDateTimeFieldCommandArchive::_internal_date_style() const {
  return static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(date_style_);
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle UpdateDateTimeFieldCommandArchive::date_style() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateDateTimeFieldCommandArchive.date_style)
  return _internal_date_style();
}
inline void UpdateDateTimeFieldCommandArchive::_internal_set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  assert(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  date_style_ = value;
}
inline void UpdateDateTimeFieldCommandArchive::set_date_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  _internal_set_date_style(value);
  // @@protoc_insertion_point(field_set:TSWP.UpdateDateTimeFieldCommandArchive.date_style)
}

// optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
inline bool UpdateDateTimeFieldCommandArchive::_internal_has_time_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UpdateDateTimeFieldCommandArchive::has_time_style() const {
  return _internal_has_time_style();
}
inline void UpdateDateTimeFieldCommandArchive::clear_time_style() {
  time_style_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle UpdateDateTimeFieldCommandArchive::_internal_time_style() const {
  return static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(time_style_);
}
inline ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle UpdateDateTimeFieldCommandArchive::time_style() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateDateTimeFieldCommandArchive.time_style)
  return _internal_time_style();
}
inline void UpdateDateTimeFieldCommandArchive::_internal_set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  assert(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  time_style_ = value;
}
inline void UpdateDateTimeFieldCommandArchive::set_time_style(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle value) {
  _internal_set_time_style(value);
  // @@protoc_insertion_point(field_set:TSWP.UpdateDateTimeFieldCommandArchive.time_style)
}

// -------------------------------------------------------------------

// ApplyRubyTextCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ApplyRubyTextCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ApplyRubyTextCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ApplyRubyTextCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.super)
  return _internal_super();
}
inline void ApplyRubyTextCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyRubyTextCommandArchive.super)
}
inline ::TSK::CommandArchive* ApplyRubyTextCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ApplyRubyTextCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyRubyTextCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ApplyRubyTextCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ApplyRubyTextCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyRubyTextCommandArchive.super)
  return _msg;
}
inline void ApplyRubyTextCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyRubyTextCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool ApplyRubyTextCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& ApplyRubyTextCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ApplyRubyTextCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.storage)
  return _internal_storage();
}
inline void ApplyRubyTextCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyRubyTextCommandArchive.storage)
}
inline ::TSP::Reference* ApplyRubyTextCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ApplyRubyTextCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyRubyTextCommandArchive.storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ApplyRubyTextCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* ApplyRubyTextCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyRubyTextCommandArchive.storage)
  return _msg;
}
inline void ApplyRubyTextCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyRubyTextCommandArchive.storage)
}

// optional uint32 selection_range_location = 3;
inline bool ApplyRubyTextCommandArchive::_internal_has_selection_range_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_selection_range_location() const {
  return _internal_has_selection_range_location();
}
inline void ApplyRubyTextCommandArchive::clear_selection_range_location() {
  selection_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyRubyTextCommandArchive::_internal_selection_range_location() const {
  return selection_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyRubyTextCommandArchive::selection_range_location() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.selection_range_location)
  return _internal_selection_range_location();
}
inline void ApplyRubyTextCommandArchive::_internal_set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  selection_range_location_ = value;
}
inline void ApplyRubyTextCommandArchive::set_selection_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selection_range_location(value);
  // @@protoc_insertion_point(field_set:TSWP.ApplyRubyTextCommandArchive.selection_range_location)
}

// optional uint32 selection_range_length = 4;
inline bool ApplyRubyTextCommandArchive::_internal_has_selection_range_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_selection_range_length() const {
  return _internal_has_selection_range_length();
}
inline void ApplyRubyTextCommandArchive::clear_selection_range_length() {
  selection_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyRubyTextCommandArchive::_internal_selection_range_length() const {
  return selection_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ApplyRubyTextCommandArchive::selection_range_length() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.selection_range_length)
  return _internal_selection_range_length();
}
inline void ApplyRubyTextCommandArchive::_internal_set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  selection_range_length_ = value;
}
inline void ApplyRubyTextCommandArchive::set_selection_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selection_range_length(value);
  // @@protoc_insertion_point(field_set:TSWP.ApplyRubyTextCommandArchive.selection_range_length)
}

// optional string ruby_text = 5;
inline bool ApplyRubyTextCommandArchive::_internal_has_ruby_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_ruby_text() const {
  return _internal_has_ruby_text();
}
inline void ApplyRubyTextCommandArchive::clear_ruby_text() {
  ruby_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplyRubyTextCommandArchive::ruby_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.ruby_text)
  return _internal_ruby_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplyRubyTextCommandArchive::set_ruby_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ApplyRubyTextCommandArchive.ruby_text)
}
inline std::string* ApplyRubyTextCommandArchive::mutable_ruby_text() {
  std::string* _s = _internal_mutable_ruby_text();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyRubyTextCommandArchive.ruby_text)
  return _s;
}
inline const std::string& ApplyRubyTextCommandArchive::_internal_ruby_text() const {
  return ruby_text_.Get();
}
inline void ApplyRubyTextCommandArchive::_internal_set_ruby_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApplyRubyTextCommandArchive::_internal_mutable_ruby_text() {
  _has_bits_[0] |= 0x00000001u;
  return ruby_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApplyRubyTextCommandArchive::release_ruby_text() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyRubyTextCommandArchive.ruby_text)
  if (!_internal_has_ruby_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ruby_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApplyRubyTextCommandArchive::set_allocated_ruby_text(std::string* ruby_text) {
  if (ruby_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ruby_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ruby_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyRubyTextCommandArchive.ruby_text)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool ApplyRubyTextCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool ApplyRubyTextCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& ApplyRubyTextCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& ApplyRubyTextCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.ApplyRubyTextCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void ApplyRubyTextCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ApplyRubyTextCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* ApplyRubyTextCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* ApplyRubyTextCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.ApplyRubyTextCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* ApplyRubyTextCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* ApplyRubyTextCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.ApplyRubyTextCommandArchive.undo_transaction)
  return _msg;
}
inline void ApplyRubyTextCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ApplyRubyTextCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ModifyRubyTextCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ModifyRubyTextCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ModifyRubyTextCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ModifyRubyTextCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ModifyRubyTextCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyRubyTextCommandArchive.super)
  return _internal_super();
}
inline void ModifyRubyTextCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyRubyTextCommandArchive.super)
}
inline ::TSK::CommandArchive* ModifyRubyTextCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ModifyRubyTextCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyRubyTextCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ModifyRubyTextCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ModifyRubyTextCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyRubyTextCommandArchive.super)
  return _msg;
}
inline void ModifyRubyTextCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyRubyTextCommandArchive.super)
}

// optional .TSP.Reference ruby_field = 2;
inline bool ModifyRubyTextCommandArchive::_internal_has_ruby_field() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ruby_field_ != nullptr);
  return value;
}
inline bool ModifyRubyTextCommandArchive::has_ruby_field() const {
  return _internal_has_ruby_field();
}
inline const ::TSP::Reference& ModifyRubyTextCommandArchive::_internal_ruby_field() const {
  const ::TSP::Reference* p = ruby_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ModifyRubyTextCommandArchive::ruby_field() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyRubyTextCommandArchive.ruby_field)
  return _internal_ruby_field();
}
inline void ModifyRubyTextCommandArchive::unsafe_arena_set_allocated_ruby_field(
    ::TSP::Reference* ruby_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ruby_field_);
  }
  ruby_field_ = ruby_field;
  if (ruby_field) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyRubyTextCommandArchive.ruby_field)
}
inline ::TSP::Reference* ModifyRubyTextCommandArchive::release_ruby_field() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = ruby_field_;
  ruby_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ModifyRubyTextCommandArchive::unsafe_arena_release_ruby_field() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyRubyTextCommandArchive.ruby_field)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = ruby_field_;
  ruby_field_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ModifyRubyTextCommandArchive::_internal_mutable_ruby_field() {
  _has_bits_[0] |= 0x00000008u;
  if (ruby_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    ruby_field_ = p;
  }
  return ruby_field_;
}
inline ::TSP::Reference* ModifyRubyTextCommandArchive::mutable_ruby_field() {
  ::TSP::Reference* _msg = _internal_mutable_ruby_field();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyRubyTextCommandArchive.ruby_field)
  return _msg;
}
inline void ModifyRubyTextCommandArchive::set_allocated_ruby_field(::TSP::Reference* ruby_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ruby_field_);
  }
  if (ruby_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ruby_field));
    if (message_arena != submessage_arena) {
      ruby_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ruby_field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ruby_field_ = ruby_field;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyRubyTextCommandArchive.ruby_field)
}

// optional string ruby_text = 3;
inline bool ModifyRubyTextCommandArchive::_internal_has_ruby_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModifyRubyTextCommandArchive::has_ruby_text() const {
  return _internal_has_ruby_text();
}
inline void ModifyRubyTextCommandArchive::clear_ruby_text() {
  ruby_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModifyRubyTextCommandArchive::ruby_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyRubyTextCommandArchive.ruby_text)
  return _internal_ruby_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyRubyTextCommandArchive::set_ruby_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ModifyRubyTextCommandArchive.ruby_text)
}
inline std::string* ModifyRubyTextCommandArchive::mutable_ruby_text() {
  std::string* _s = _internal_mutable_ruby_text();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyRubyTextCommandArchive.ruby_text)
  return _s;
}
inline const std::string& ModifyRubyTextCommandArchive::_internal_ruby_text() const {
  return ruby_text_.Get();
}
inline void ModifyRubyTextCommandArchive::_internal_set_ruby_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModifyRubyTextCommandArchive::_internal_mutable_ruby_text() {
  _has_bits_[0] |= 0x00000001u;
  return ruby_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModifyRubyTextCommandArchive::release_ruby_text() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyRubyTextCommandArchive.ruby_text)
  if (!_internal_has_ruby_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ruby_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModifyRubyTextCommandArchive::set_allocated_ruby_text(std::string* ruby_text) {
  if (ruby_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ruby_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ruby_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyRubyTextCommandArchive.ruby_text)
}

// optional string base_text = 4;
inline bool ModifyRubyTextCommandArchive::_internal_has_base_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModifyRubyTextCommandArchive::has_base_text() const {
  return _internal_has_base_text();
}
inline void ModifyRubyTextCommandArchive::clear_base_text() {
  base_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModifyRubyTextCommandArchive::base_text() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyRubyTextCommandArchive.base_text)
  return _internal_base_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyRubyTextCommandArchive::set_base_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 base_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ModifyRubyTextCommandArchive.base_text)
}
inline std::string* ModifyRubyTextCommandArchive::mutable_base_text() {
  std::string* _s = _internal_mutable_base_text();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyRubyTextCommandArchive.base_text)
  return _s;
}
inline const std::string& ModifyRubyTextCommandArchive::_internal_base_text() const {
  return base_text_.Get();
}
inline void ModifyRubyTextCommandArchive::_internal_set_base_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  base_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModifyRubyTextCommandArchive::_internal_mutable_base_text() {
  _has_bits_[0] |= 0x00000002u;
  return base_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModifyRubyTextCommandArchive::release_base_text() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyRubyTextCommandArchive.base_text)
  if (!_internal_has_base_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return base_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModifyRubyTextCommandArchive::set_allocated_base_text(std::string* base_text) {
  if (base_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  base_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyRubyTextCommandArchive.base_text)
}

// optional .TSWP.UndoTransaction undo_transaction = 5;
inline bool ModifyRubyTextCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool ModifyRubyTextCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& ModifyRubyTextCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& ModifyRubyTextCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyRubyTextCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void ModifyRubyTextCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyRubyTextCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* ModifyRubyTextCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* ModifyRubyTextCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyRubyTextCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000010u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* ModifyRubyTextCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* ModifyRubyTextCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyRubyTextCommandArchive.undo_transaction)
  return _msg;
}
inline void ModifyRubyTextCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyRubyTextCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ModifyTOCSettingsBaseCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ModifyTOCSettingsBaseCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsBaseCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ModifyTOCSettingsBaseCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ModifyTOCSettingsBaseCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsBaseCommandArchive.super)
  return _internal_super();
}
inline void ModifyTOCSettingsBaseCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.super)
}
inline ::TSK::CommandArchive* ModifyTOCSettingsBaseCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ModifyTOCSettingsBaseCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsBaseCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ModifyTOCSettingsBaseCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ModifyTOCSettingsBaseCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsBaseCommandArchive.super)
  return _msg;
}
inline void ModifyTOCSettingsBaseCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.super)
}

// optional .TSP.Reference old_toc_settings = 2;
inline bool ModifyTOCSettingsBaseCommandArchive::_internal_has_old_toc_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_toc_settings_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsBaseCommandArchive::has_old_toc_settings() const {
  return _internal_has_old_toc_settings();
}
inline const ::TSP::Reference& ModifyTOCSettingsBaseCommandArchive::_internal_old_toc_settings() const {
  const ::TSP::Reference* p = old_toc_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ModifyTOCSettingsBaseCommandArchive::old_toc_settings() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings)
  return _internal_old_toc_settings();
}
inline void ModifyTOCSettingsBaseCommandArchive::unsafe_arena_set_allocated_old_toc_settings(
    ::TSP::Reference* old_toc_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_toc_settings_);
  }
  old_toc_settings_ = old_toc_settings;
  if (old_toc_settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings)
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::release_old_toc_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_toc_settings_;
  old_toc_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::unsafe_arena_release_old_toc_settings() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_toc_settings_;
  old_toc_settings_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::_internal_mutable_old_toc_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (old_toc_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_toc_settings_ = p;
  }
  return old_toc_settings_;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::mutable_old_toc_settings() {
  ::TSP::Reference* _msg = _internal_mutable_old_toc_settings();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings)
  return _msg;
}
inline void ModifyTOCSettingsBaseCommandArchive::set_allocated_old_toc_settings(::TSP::Reference* old_toc_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_toc_settings_);
  }
  if (old_toc_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_toc_settings));
    if (message_arena != submessage_arena) {
      old_toc_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_toc_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_toc_settings_ = old_toc_settings;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings)
}

// optional .TSP.Reference new_toc_settings = 3;
inline bool ModifyTOCSettingsBaseCommandArchive::_internal_has_new_toc_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_toc_settings_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsBaseCommandArchive::has_new_toc_settings() const {
  return _internal_has_new_toc_settings();
}
inline const ::TSP::Reference& ModifyTOCSettingsBaseCommandArchive::_internal_new_toc_settings() const {
  const ::TSP::Reference* p = new_toc_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ModifyTOCSettingsBaseCommandArchive::new_toc_settings() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings)
  return _internal_new_toc_settings();
}
inline void ModifyTOCSettingsBaseCommandArchive::unsafe_arena_set_allocated_new_toc_settings(
    ::TSP::Reference* new_toc_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_toc_settings_);
  }
  new_toc_settings_ = new_toc_settings;
  if (new_toc_settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings)
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::release_new_toc_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_toc_settings_;
  new_toc_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::unsafe_arena_release_new_toc_settings() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_toc_settings_;
  new_toc_settings_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::_internal_mutable_new_toc_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (new_toc_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    new_toc_settings_ = p;
  }
  return new_toc_settings_;
}
inline ::TSP::Reference* ModifyTOCSettingsBaseCommandArchive::mutable_new_toc_settings() {
  ::TSP::Reference* _msg = _internal_mutable_new_toc_settings();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings)
  return _msg;
}
inline void ModifyTOCSettingsBaseCommandArchive::set_allocated_new_toc_settings(::TSP::Reference* new_toc_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_toc_settings_);
  }
  if (new_toc_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_toc_settings));
    if (message_arena != submessage_arena) {
      new_toc_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_toc_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_toc_settings_ = new_toc_settings;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings)
}

// -------------------------------------------------------------------

// ModifyTOCSettingsForTOCInfoCommandArchive

// optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
inline bool ModifyTOCSettingsForTOCInfoCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsForTOCInfoCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ModifyTOCSettingsForTOCInfoCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ModifyTOCSettingsBaseCommandArchive& ModifyTOCSettingsForTOCInfoCommandArchive::_internal_super() const {
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ModifyTOCSettingsBaseCommandArchive&>(
      ::TSWP::_ModifyTOCSettingsBaseCommandArchive_default_instance_);
}
inline const ::TSWP::ModifyTOCSettingsBaseCommandArchive& ModifyTOCSettingsForTOCInfoCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super)
  return _internal_super();
}
inline void ModifyTOCSettingsForTOCInfoCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ModifyTOCSettingsBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super)
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ModifyTOCSettingsBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsForTOCInfoCommandArchive::mutable_super() {
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super)
  return _msg;
}
inline void ModifyTOCSettingsForTOCInfoCommandArchive::set_allocated_super(::TSWP::ModifyTOCSettingsBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::ModifyTOCSettingsBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super)
}

// optional .TSP.UUIDPath toc_info_uuid_path = 2;
inline bool ModifyTOCSettingsForTOCInfoCommandArchive::_internal_has_toc_info_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || toc_info_uuid_path_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsForTOCInfoCommandArchive::has_toc_info_uuid_path() const {
  return _internal_has_toc_info_uuid_path();
}
inline const ::TSP::UUIDPath& ModifyTOCSettingsForTOCInfoCommandArchive::_internal_toc_info_uuid_path() const {
  const ::TSP::UUIDPath* p = toc_info_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ModifyTOCSettingsForTOCInfoCommandArchive::toc_info_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path)
  return _internal_toc_info_uuid_path();
}
inline void ModifyTOCSettingsForTOCInfoCommandArchive::unsafe_arena_set_allocated_toc_info_uuid_path(
    ::TSP::UUIDPath* toc_info_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_info_uuid_path_);
  }
  toc_info_uuid_path_ = toc_info_uuid_path;
  if (toc_info_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path)
}
inline ::TSP::UUIDPath* ModifyTOCSettingsForTOCInfoCommandArchive::release_toc_info_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = toc_info_uuid_path_;
  toc_info_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* ModifyTOCSettingsForTOCInfoCommandArchive::unsafe_arena_release_toc_info_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = toc_info_uuid_path_;
  toc_info_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ModifyTOCSettingsForTOCInfoCommandArchive::_internal_mutable_toc_info_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (toc_info_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    toc_info_uuid_path_ = p;
  }
  return toc_info_uuid_path_;
}
inline ::TSP::UUIDPath* ModifyTOCSettingsForTOCInfoCommandArchive::mutable_toc_info_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_toc_info_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path)
  return _msg;
}
inline void ModifyTOCSettingsForTOCInfoCommandArchive::set_allocated_toc_info_uuid_path(::TSP::UUIDPath* toc_info_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_info_uuid_path_);
  }
  if (toc_info_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toc_info_uuid_path));
    if (message_arena != submessage_arena) {
      toc_info_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toc_info_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  toc_info_uuid_path_ = toc_info_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path)
}

// -------------------------------------------------------------------

// ModifyTOCSettingsPresetForThemeCommandArchive

// optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::ModifyTOCSettingsBaseCommandArchive& ModifyTOCSettingsPresetForThemeCommandArchive::_internal_super() const {
  const ::TSWP::ModifyTOCSettingsBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ModifyTOCSettingsBaseCommandArchive&>(
      ::TSWP::_ModifyTOCSettingsBaseCommandArchive_default_instance_);
}
inline const ::TSWP::ModifyTOCSettingsBaseCommandArchive& ModifyTOCSettingsPresetForThemeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super)
  return _internal_super();
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ModifyTOCSettingsBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super)
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ModifyTOCSettingsBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ModifyTOCSettingsBaseCommandArchive* ModifyTOCSettingsPresetForThemeCommandArchive::mutable_super() {
  ::TSWP::ModifyTOCSettingsBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super)
  return _msg;
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::set_allocated_super(::TSWP::ModifyTOCSettingsBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::ModifyTOCSettingsBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super)
}

// optional .TSP.Reference theme = 2;
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ModifyTOCSettingsPresetForThemeCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ModifyTOCSettingsPresetForThemeCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme)
  return _internal_theme();
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme)
}
inline ::TSP::Reference* ModifyTOCSettingsPresetForThemeCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsPresetForThemeCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ModifyTOCSettingsPresetForThemeCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ModifyTOCSettingsPresetForThemeCommandArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme)
  return _msg;
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme)
}

// optional uint32 preset_index = 3;
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::_internal_has_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModifyTOCSettingsPresetForThemeCommandArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::clear_preset_index() {
  preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTOCSettingsPresetForThemeCommandArchive::_internal_preset_index() const {
  return preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModifyTOCSettingsPresetForThemeCommandArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.preset_index)
  return _internal_preset_index();
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::_internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  preset_index_ = value;
}
inline void ModifyTOCSettingsPresetForThemeCommandArchive::set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.preset_index)
}

// -------------------------------------------------------------------

// AnchorAttachmentCommandArchive

// optional .TSWP.StorageActionCommandArchive super = 1;
inline bool AnchorAttachmentCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void AnchorAttachmentCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StorageActionCommandArchive& AnchorAttachmentCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& AnchorAttachmentCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.super)
  return _internal_super();
}
inline void AnchorAttachmentCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AnchorAttachmentCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* AnchorAttachmentCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* AnchorAttachmentCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.AnchorAttachmentCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* AnchorAttachmentCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* AnchorAttachmentCommandArchive::mutable_super() {
  ::TSWP::StorageActionCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.AnchorAttachmentCommandArchive.super)
  return _msg;
}
inline void AnchorAttachmentCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StorageActionCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AnchorAttachmentCommandArchive.super)
}

// optional .TSP.Reference attachment = 2;
inline bool AnchorAttachmentCommandArchive::_internal_has_attachment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || attachment_ != nullptr);
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_attachment() const {
  return _internal_has_attachment();
}
inline const ::TSP::Reference& AnchorAttachmentCommandArchive::_internal_attachment() const {
  const ::TSP::Reference* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AnchorAttachmentCommandArchive::attachment() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.attachment)
  return _internal_attachment();
}
inline void AnchorAttachmentCommandArchive::unsafe_arena_set_allocated_attachment(
    ::TSP::Reference* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AnchorAttachmentCommandArchive.attachment)
}
inline ::TSP::Reference* AnchorAttachmentCommandArchive::release_attachment() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* AnchorAttachmentCommandArchive::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:TSWP.AnchorAttachmentCommandArchive.attachment)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AnchorAttachmentCommandArchive::_internal_mutable_attachment() {
  _has_bits_[0] |= 0x00000002u;
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::TSP::Reference* AnchorAttachmentCommandArchive::mutable_attachment() {
  ::TSP::Reference* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:TSWP.AnchorAttachmentCommandArchive.attachment)
  return _msg;
}
inline void AnchorAttachmentCommandArchive::set_allocated_attachment(::TSP::Reference* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment));
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AnchorAttachmentCommandArchive.attachment)
}

// optional uint32 h_offset_type = 3;
inline bool AnchorAttachmentCommandArchive::_internal_has_h_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_h_offset_type() const {
  return _internal_has_h_offset_type();
}
inline void AnchorAttachmentCommandArchive::clear_h_offset_type() {
  h_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::_internal_h_offset_type() const {
  return h_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::h_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.h_offset_type)
  return _internal_h_offset_type();
}
inline void AnchorAttachmentCommandArchive::_internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  h_offset_type_ = value;
}
inline void AnchorAttachmentCommandArchive::set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.h_offset_type)
}

// optional float h_offset = 4;
inline bool AnchorAttachmentCommandArchive::_internal_has_h_offset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_h_offset() const {
  return _internal_has_h_offset();
}
inline void AnchorAttachmentCommandArchive::clear_h_offset() {
  h_offset_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AnchorAttachmentCommandArchive::_internal_h_offset() const {
  return h_offset_;
}
inline float AnchorAttachmentCommandArchive::h_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.h_offset)
  return _internal_h_offset();
}
inline void AnchorAttachmentCommandArchive::_internal_set_h_offset(float value) {
  _has_bits_[0] |= 0x00000008u;
  h_offset_ = value;
}
inline void AnchorAttachmentCommandArchive::set_h_offset(float value) {
  _internal_set_h_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.h_offset)
}

// optional uint32 v_offset_type = 5;
inline bool AnchorAttachmentCommandArchive::_internal_has_v_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_v_offset_type() const {
  return _internal_has_v_offset_type();
}
inline void AnchorAttachmentCommandArchive::clear_v_offset_type() {
  v_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::_internal_v_offset_type() const {
  return v_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::v_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.v_offset_type)
  return _internal_v_offset_type();
}
inline void AnchorAttachmentCommandArchive::_internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  v_offset_type_ = value;
}
inline void AnchorAttachmentCommandArchive::set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.v_offset_type)
}

// optional float v_offset = 6;
inline bool AnchorAttachmentCommandArchive::_internal_has_v_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_v_offset() const {
  return _internal_has_v_offset();
}
inline void AnchorAttachmentCommandArchive::clear_v_offset() {
  v_offset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AnchorAttachmentCommandArchive::_internal_v_offset() const {
  return v_offset_;
}
inline float AnchorAttachmentCommandArchive::v_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.v_offset)
  return _internal_v_offset();
}
inline void AnchorAttachmentCommandArchive::_internal_set_v_offset(float value) {
  _has_bits_[0] |= 0x00000020u;
  v_offset_ = value;
}
inline void AnchorAttachmentCommandArchive::set_v_offset(float value) {
  _internal_set_v_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.v_offset)
}

// optional bool is_html_wrap = 7;
inline bool AnchorAttachmentCommandArchive::_internal_has_is_html_wrap() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_is_html_wrap() const {
  return _internal_has_is_html_wrap();
}
inline void AnchorAttachmentCommandArchive::clear_is_html_wrap() {
  is_html_wrap_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool AnchorAttachmentCommandArchive::_internal_is_html_wrap() const {
  return is_html_wrap_;
}
inline bool AnchorAttachmentCommandArchive::is_html_wrap() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.is_html_wrap)
  return _internal_is_html_wrap();
}
inline void AnchorAttachmentCommandArchive::_internal_set_is_html_wrap(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_html_wrap_ = value;
}
inline void AnchorAttachmentCommandArchive::set_is_html_wrap(bool value) {
  _internal_set_is_html_wrap(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.is_html_wrap)
}

// optional uint32 undo_h_offset_type = 8;
inline bool AnchorAttachmentCommandArchive::_internal_has_undo_h_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_undo_h_offset_type() const {
  return _internal_has_undo_h_offset_type();
}
inline void AnchorAttachmentCommandArchive::clear_undo_h_offset_type() {
  undo_h_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::_internal_undo_h_offset_type() const {
  return undo_h_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::undo_h_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.undo_h_offset_type)
  return _internal_undo_h_offset_type();
}
inline void AnchorAttachmentCommandArchive::_internal_set_undo_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  undo_h_offset_type_ = value;
}
inline void AnchorAttachmentCommandArchive::set_undo_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_h_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.undo_h_offset_type)
}

// optional float undo_h_offset = 9;
inline bool AnchorAttachmentCommandArchive::_internal_has_undo_h_offset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_undo_h_offset() const {
  return _internal_has_undo_h_offset();
}
inline void AnchorAttachmentCommandArchive::clear_undo_h_offset() {
  undo_h_offset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float AnchorAttachmentCommandArchive::_internal_undo_h_offset() const {
  return undo_h_offset_;
}
inline float AnchorAttachmentCommandArchive::undo_h_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.undo_h_offset)
  return _internal_undo_h_offset();
}
inline void AnchorAttachmentCommandArchive::_internal_set_undo_h_offset(float value) {
  _has_bits_[0] |= 0x00000080u;
  undo_h_offset_ = value;
}
inline void AnchorAttachmentCommandArchive::set_undo_h_offset(float value) {
  _internal_set_undo_h_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.undo_h_offset)
}

// optional uint32 undo_v_offset_type = 10;
inline bool AnchorAttachmentCommandArchive::_internal_has_undo_v_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_undo_v_offset_type() const {
  return _internal_has_undo_v_offset_type();
}
inline void AnchorAttachmentCommandArchive::clear_undo_v_offset_type() {
  undo_v_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::_internal_undo_v_offset_type() const {
  return undo_v_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnchorAttachmentCommandArchive::undo_v_offset_type() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.undo_v_offset_type)
  return _internal_undo_v_offset_type();
}
inline void AnchorAttachmentCommandArchive::_internal_set_undo_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  undo_v_offset_type_ = value;
}
inline void AnchorAttachmentCommandArchive::set_undo_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_v_offset_type(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.undo_v_offset_type)
}

// optional float undo_v_offset = 11;
inline bool AnchorAttachmentCommandArchive::_internal_has_undo_v_offset() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_undo_v_offset() const {
  return _internal_has_undo_v_offset();
}
inline void AnchorAttachmentCommandArchive::clear_undo_v_offset() {
  undo_v_offset_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float AnchorAttachmentCommandArchive::_internal_undo_v_offset() const {
  return undo_v_offset_;
}
inline float AnchorAttachmentCommandArchive::undo_v_offset() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.undo_v_offset)
  return _internal_undo_v_offset();
}
inline void AnchorAttachmentCommandArchive::_internal_set_undo_v_offset(float value) {
  _has_bits_[0] |= 0x00000800u;
  undo_v_offset_ = value;
}
inline void AnchorAttachmentCommandArchive::set_undo_v_offset(float value) {
  _internal_set_undo_v_offset(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.undo_v_offset)
}

// optional bool undo_is_html_wrap = 12;
inline bool AnchorAttachmentCommandArchive::_internal_has_undo_is_html_wrap() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AnchorAttachmentCommandArchive::has_undo_is_html_wrap() const {
  return _internal_has_undo_is_html_wrap();
}
inline void AnchorAttachmentCommandArchive::clear_undo_is_html_wrap() {
  undo_is_html_wrap_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AnchorAttachmentCommandArchive::_internal_undo_is_html_wrap() const {
  return undo_is_html_wrap_;
}
inline bool AnchorAttachmentCommandArchive::undo_is_html_wrap() const {
  // @@protoc_insertion_point(field_get:TSWP.AnchorAttachmentCommandArchive.undo_is_html_wrap)
  return _internal_undo_is_html_wrap();
}
inline void AnchorAttachmentCommandArchive::_internal_set_undo_is_html_wrap(bool value) {
  _has_bits_[0] |= 0x00000200u;
  undo_is_html_wrap_ = value;
}
inline void AnchorAttachmentCommandArchive::set_undo_is_html_wrap(bool value) {
  _internal_set_undo_is_html_wrap(value);
  // @@protoc_insertion_point(field_set:TSWP.AnchorAttachmentCommandArchive.undo_is_html_wrap)
}

// -------------------------------------------------------------------

// TextApplyThemeCommandArchive

// optional .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool TextApplyThemeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TextApplyThemeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& TextApplyThemeCommandArchive::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& TextApplyThemeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TextApplyThemeCommandArchive.super)
  return _internal_super();
}
inline void TextApplyThemeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextApplyThemeCommandArchive.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* TextApplyThemeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* TextApplyThemeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TextApplyThemeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* TextApplyThemeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* TextApplyThemeCommandArchive::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.TextApplyThemeCommandArchive.super)
  return _msg;
}
inline void TextApplyThemeCommandArchive::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextApplyThemeCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool TextApplyThemeCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool TextApplyThemeCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& TextApplyThemeCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextApplyThemeCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.TextApplyThemeCommandArchive.storage)
  return _internal_storage();
}
inline void TextApplyThemeCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextApplyThemeCommandArchive.storage)
}
inline ::TSP::Reference* TextApplyThemeCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TextApplyThemeCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.TextApplyThemeCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextApplyThemeCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* TextApplyThemeCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.TextApplyThemeCommandArchive.storage)
  return _msg;
}
inline void TextApplyThemeCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextApplyThemeCommandArchive.storage)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool TextApplyThemeCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool TextApplyThemeCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& TextApplyThemeCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& TextApplyThemeCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.TextApplyThemeCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void TextApplyThemeCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextApplyThemeCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* TextApplyThemeCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* TextApplyThemeCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.TextApplyThemeCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* TextApplyThemeCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* TextApplyThemeCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.TextApplyThemeCommandArchive.undo_transaction)
  return _msg;
}
inline void TextApplyThemeCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextApplyThemeCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// MoveColumnsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool MoveColumnsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveColumnsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MoveColumnsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MoveColumnsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.super)
  return _internal_super();
}
inline void MoveColumnsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveColumnsCommandArchive.super)
}
inline ::TSK::CommandArchive* MoveColumnsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MoveColumnsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.MoveColumnsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MoveColumnsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MoveColumnsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveColumnsCommandArchive.super)
  return _msg;
}
inline void MoveColumnsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveColumnsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool MoveColumnsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool MoveColumnsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& MoveColumnsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MoveColumnsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.storage)
  return _internal_storage();
}
inline void MoveColumnsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveColumnsCommandArchive.storage)
}
inline ::TSP::Reference* MoveColumnsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MoveColumnsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.MoveColumnsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MoveColumnsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* MoveColumnsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveColumnsCommandArchive.storage)
  return _msg;
}
inline void MoveColumnsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveColumnsCommandArchive.storage)
}

// optional uint32 src_index = 3;
inline bool MoveColumnsCommandArchive::_internal_has_src_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoveColumnsCommandArchive::has_src_index() const {
  return _internal_has_src_index();
}
inline void MoveColumnsCommandArchive::clear_src_index() {
  src_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::_internal_src_index() const {
  return src_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::src_index() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.src_index)
  return _internal_src_index();
}
inline void MoveColumnsCommandArchive::_internal_set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  src_index_ = value;
}
inline void MoveColumnsCommandArchive::set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_index(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveColumnsCommandArchive.src_index)
}

// optional uint32 dst_index = 4;
inline bool MoveColumnsCommandArchive::_internal_has_dst_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MoveColumnsCommandArchive::has_dst_index() const {
  return _internal_has_dst_index();
}
inline void MoveColumnsCommandArchive::clear_dst_index() {
  dst_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::_internal_dst_index() const {
  return dst_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::dst_index() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.dst_index)
  return _internal_dst_index();
}
inline void MoveColumnsCommandArchive::_internal_set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  dst_index_ = value;
}
inline void MoveColumnsCommandArchive::set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_index(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveColumnsCommandArchive.dst_index)
}

// optional uint32 count = 5;
inline bool MoveColumnsCommandArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MoveColumnsCommandArchive::has_count() const {
  return _internal_has_count();
}
inline void MoveColumnsCommandArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveColumnsCommandArchive::count() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.count)
  return _internal_count();
}
inline void MoveColumnsCommandArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  count_ = value;
}
inline void MoveColumnsCommandArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveColumnsCommandArchive.count)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool MoveColumnsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool MoveColumnsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& MoveColumnsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& MoveColumnsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveColumnsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void MoveColumnsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveColumnsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* MoveColumnsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* MoveColumnsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.MoveColumnsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* MoveColumnsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* MoveColumnsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveColumnsCommandArchive.undo_transaction)
  return _msg;
}
inline void MoveColumnsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveColumnsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// MoveRowsCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool MoveRowsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveRowsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MoveRowsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MoveRowsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.super)
  return _internal_super();
}
inline void MoveRowsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveRowsCommandArchive.super)
}
inline ::TSK::CommandArchive* MoveRowsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MoveRowsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.MoveRowsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MoveRowsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MoveRowsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveRowsCommandArchive.super)
  return _msg;
}
inline void MoveRowsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveRowsCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool MoveRowsCommandArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool MoveRowsCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& MoveRowsCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MoveRowsCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.storage)
  return _internal_storage();
}
inline void MoveRowsCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveRowsCommandArchive.storage)
}
inline ::TSP::Reference* MoveRowsCommandArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MoveRowsCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSWP.MoveRowsCommandArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MoveRowsCommandArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* MoveRowsCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveRowsCommandArchive.storage)
  return _msg;
}
inline void MoveRowsCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveRowsCommandArchive.storage)
}

// optional uint32 src_index = 3;
inline bool MoveRowsCommandArchive::_internal_has_src_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoveRowsCommandArchive::has_src_index() const {
  return _internal_has_src_index();
}
inline void MoveRowsCommandArchive::clear_src_index() {
  src_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::_internal_src_index() const {
  return src_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::src_index() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.src_index)
  return _internal_src_index();
}
inline void MoveRowsCommandArchive::_internal_set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  src_index_ = value;
}
inline void MoveRowsCommandArchive::set_src_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_index(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveRowsCommandArchive.src_index)
}

// optional uint32 dst_index = 4;
inline bool MoveRowsCommandArchive::_internal_has_dst_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MoveRowsCommandArchive::has_dst_index() const {
  return _internal_has_dst_index();
}
inline void MoveRowsCommandArchive::clear_dst_index() {
  dst_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::_internal_dst_index() const {
  return dst_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::dst_index() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.dst_index)
  return _internal_dst_index();
}
inline void MoveRowsCommandArchive::_internal_set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  dst_index_ = value;
}
inline void MoveRowsCommandArchive::set_dst_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_index(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveRowsCommandArchive.dst_index)
}

// optional uint32 count = 5;
inline bool MoveRowsCommandArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MoveRowsCommandArchive::has_count() const {
  return _internal_has_count();
}
inline void MoveRowsCommandArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveRowsCommandArchive::count() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.count)
  return _internal_count();
}
inline void MoveRowsCommandArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  count_ = value;
}
inline void MoveRowsCommandArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSWP.MoveRowsCommandArchive.count)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool MoveRowsCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool MoveRowsCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& MoveRowsCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& MoveRowsCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TSWP.MoveRowsCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void MoveRowsCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.MoveRowsCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* MoveRowsCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* MoveRowsCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TSWP.MoveRowsCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* MoveRowsCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* MoveRowsCommandArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TSWP.MoveRowsCommandArchive.undo_transaction)
  return _msg;
}
inline void MoveRowsCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TSWP.MoveRowsCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ShapeApplyPresetCommandArchive

// required .TSD.BaseApplyPresetCommandArchive super = 1;
inline bool ShapeApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::BaseApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::BaseApplyPresetCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseApplyPresetCommandArchive&>(
      ::TSD::_BaseApplyPresetCommandArchive_default_instance_);
}
inline const ::TSD::BaseApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseApplyPresetCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeApplyPresetCommandArchive.super)
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeApplyPresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseApplyPresetCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::mutable_super() {
  ::TSD::BaseApplyPresetCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeApplyPresetCommandArchive.super)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeApplyPresetCommandArchive.super)
}

// optional .TSP.Reference undo_style = 2;
inline bool ShapeApplyPresetCommandArchive::_internal_has_undo_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undo_style_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_undo_style() const {
  return _internal_has_undo_style();
}
inline const ::TSP::Reference& ShapeApplyPresetCommandArchive::_internal_undo_style() const {
  const ::TSP::Reference* p = undo_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeApplyPresetCommandArchive::undo_style() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeApplyPresetCommandArchive.undo_style)
  return _internal_undo_style();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_undo_style(
    ::TSP::Reference* undo_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_style_);
  }
  undo_style_ = undo_style;
  if (undo_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeApplyPresetCommandArchive.undo_style)
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::release_undo_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_style_;
  undo_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::unsafe_arena_release_undo_style() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeApplyPresetCommandArchive.undo_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_style_;
  undo_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::_internal_mutable_undo_style() {
  _has_bits_[0] |= 0x00000002u;
  if (undo_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_style_ = p;
  }
  return undo_style_;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::mutable_undo_style() {
  ::TSP::Reference* _msg = _internal_mutable_undo_style();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeApplyPresetCommandArchive.undo_style)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_undo_style(::TSP::Reference* undo_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_style_);
  }
  if (undo_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_style));
    if (message_arena != submessage_arena) {
      undo_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undo_style_ = undo_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeApplyPresetCommandArchive.undo_style)
}

// -------------------------------------------------------------------

// StyleBaseCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool StyleBaseCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleBaseCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& StyleBaseCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& StyleBaseCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleBaseCommandArchive.super)
  return _internal_super();
}
inline void StyleBaseCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleBaseCommandArchive.super)
}
inline ::TSK::CommandArchive* StyleBaseCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* StyleBaseCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleBaseCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* StyleBaseCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* StyleBaseCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleBaseCommandArchive.super)
  return _msg;
}
inline void StyleBaseCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleBaseCommandArchive.super)
}

// optional .TSP.Reference theme = 2;
inline bool StyleBaseCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool StyleBaseCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& StyleBaseCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleBaseCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleBaseCommandArchive.theme)
  return _internal_theme();
}
inline void StyleBaseCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleBaseCommandArchive.theme)
}
inline ::TSP::Reference* StyleBaseCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleBaseCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSWP.StyleBaseCommandArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleBaseCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* StyleBaseCommandArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleBaseCommandArchive.theme)
  return _msg;
}
inline void StyleBaseCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleBaseCommandArchive.theme)
}

// optional .TSP.Reference style = 3;
inline bool StyleBaseCommandArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool StyleBaseCommandArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& StyleBaseCommandArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleBaseCommandArchive::style() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleBaseCommandArchive.style)
  return _internal_style();
}
inline void StyleBaseCommandArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleBaseCommandArchive.style)
}
inline ::TSP::Reference* StyleBaseCommandArchive::release_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleBaseCommandArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSWP.StyleBaseCommandArchive.style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleBaseCommandArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000004u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* StyleBaseCommandArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleBaseCommandArchive.style)
  return _msg;
}
inline void StyleBaseCommandArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleBaseCommandArchive.style)
}

// -------------------------------------------------------------------

// StyleCreateCommandArchive

// optional .TSWP.StyleBaseCommandArchive super = 1;
inline bool StyleCreateCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleCreateCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyleCreateCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StyleBaseCommandArchive& StyleCreateCommandArchive::_internal_super() const {
  const ::TSWP::StyleBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleBaseCommandArchive&>(
      ::TSWP::_StyleBaseCommandArchive_default_instance_);
}
inline const ::TSWP::StyleBaseCommandArchive& StyleCreateCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleCreateCommandArchive.super)
  return _internal_super();
}
inline void StyleCreateCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleCreateCommandArchive.super)
}
inline ::TSWP::StyleBaseCommandArchive* StyleCreateCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleCreateCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleCreateCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleCreateCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StyleBaseCommandArchive* StyleCreateCommandArchive::mutable_super() {
  ::TSWP::StyleBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleCreateCommandArchive.super)
  return _msg;
}
inline void StyleCreateCommandArchive::set_allocated_super(::TSWP::StyleBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StyleBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleCreateCommandArchive.super)
}

// optional uint32 preset_index = 2;
inline bool StyleCreateCommandArchive::_internal_has_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleCreateCommandArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void StyleCreateCommandArchive::clear_preset_index() {
  preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleCreateCommandArchive::_internal_preset_index() const {
  return preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleCreateCommandArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleCreateCommandArchive.preset_index)
  return _internal_preset_index();
}
inline void StyleCreateCommandArchive::_internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  preset_index_ = value;
}
inline void StyleCreateCommandArchive::set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.StyleCreateCommandArchive.preset_index)
}

// -------------------------------------------------------------------

// StyleRenameCommandArchive

// optional .TSWP.StyleBaseCommandArchive super = 1;
inline bool StyleRenameCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleRenameCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyleRenameCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSWP::StyleBaseCommandArchive& StyleRenameCommandArchive::_internal_super() const {
  const ::TSWP::StyleBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleBaseCommandArchive&>(
      ::TSWP::_StyleBaseCommandArchive_default_instance_);
}
inline const ::TSWP::StyleBaseCommandArchive& StyleRenameCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleRenameCommandArchive.super)
  return _internal_super();
}
inline void StyleRenameCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleRenameCommandArchive.super)
}
inline ::TSWP::StyleBaseCommandArchive* StyleRenameCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleRenameCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleRenameCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleRenameCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StyleBaseCommandArchive* StyleRenameCommandArchive::mutable_super() {
  ::TSWP::StyleBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleRenameCommandArchive.super)
  return _msg;
}
inline void StyleRenameCommandArchive::set_allocated_super(::TSWP::StyleBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StyleBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleRenameCommandArchive.super)
}

// optional string updated_name = 2;
inline bool StyleRenameCommandArchive::_internal_has_updated_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StyleRenameCommandArchive::has_updated_name() const {
  return _internal_has_updated_name();
}
inline void StyleRenameCommandArchive::clear_updated_name() {
  updated_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StyleRenameCommandArchive::updated_name() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleRenameCommandArchive.updated_name)
  return _internal_updated_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StyleRenameCommandArchive::set_updated_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 updated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.StyleRenameCommandArchive.updated_name)
}
inline std::string* StyleRenameCommandArchive::mutable_updated_name() {
  std::string* _s = _internal_mutable_updated_name();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleRenameCommandArchive.updated_name)
  return _s;
}
inline const std::string& StyleRenameCommandArchive::_internal_updated_name() const {
  return updated_name_.Get();
}
inline void StyleRenameCommandArchive::_internal_set_updated_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  updated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StyleRenameCommandArchive::_internal_mutable_updated_name() {
  _has_bits_[0] |= 0x00000001u;
  return updated_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StyleRenameCommandArchive::release_updated_name() {
  // @@protoc_insertion_point(field_release:TSWP.StyleRenameCommandArchive.updated_name)
  if (!_internal_has_updated_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return updated_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StyleRenameCommandArchive::set_allocated_updated_name(std::string* updated_name) {
  if (updated_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updated_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleRenameCommandArchive.updated_name)
}

// optional string old_name = 3;
inline bool StyleRenameCommandArchive::_internal_has_old_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleRenameCommandArchive::has_old_name() const {
  return _internal_has_old_name();
}
inline void StyleRenameCommandArchive::clear_old_name() {
  old_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StyleRenameCommandArchive::old_name() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleRenameCommandArchive.old_name)
  return _internal_old_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StyleRenameCommandArchive::set_old_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.StyleRenameCommandArchive.old_name)
}
inline std::string* StyleRenameCommandArchive::mutable_old_name() {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleRenameCommandArchive.old_name)
  return _s;
}
inline const std::string& StyleRenameCommandArchive::_internal_old_name() const {
  return old_name_.Get();
}
inline void StyleRenameCommandArchive::_internal_set_old_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StyleRenameCommandArchive::_internal_mutable_old_name() {
  _has_bits_[0] |= 0x00000002u;
  return old_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StyleRenameCommandArchive::release_old_name() {
  // @@protoc_insertion_point(field_release:TSWP.StyleRenameCommandArchive.old_name)
  if (!_internal_has_old_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return old_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StyleRenameCommandArchive::set_allocated_old_name(std::string* old_name) {
  if (old_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleRenameCommandArchive.old_name)
}

// -------------------------------------------------------------------

// StyleUpdateCommandArchive

// optional .TSWP.StyleBaseCommandArchive super = 1;
inline bool StyleUpdateCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleUpdateCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyleUpdateCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StyleBaseCommandArchive& StyleUpdateCommandArchive::_internal_super() const {
  const ::TSWP::StyleBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleBaseCommandArchive&>(
      ::TSWP::_StyleBaseCommandArchive_default_instance_);
}
inline const ::TSWP::StyleBaseCommandArchive& StyleUpdateCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleUpdateCommandArchive.super)
  return _internal_super();
}
inline void StyleUpdateCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleUpdateCommandArchive.super)
}
inline ::TSWP::StyleBaseCommandArchive* StyleUpdateCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleUpdateCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleUpdateCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleUpdateCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StyleBaseCommandArchive* StyleUpdateCommandArchive::mutable_super() {
  ::TSWP::StyleBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleUpdateCommandArchive.super)
  return _msg;
}
inline void StyleUpdateCommandArchive::set_allocated_super(::TSWP::StyleBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StyleBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleUpdateCommandArchive.super)
}

// optional .TSP.Reference original_style = 2;
inline bool StyleUpdateCommandArchive::_internal_has_original_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || original_style_ != nullptr);
  return value;
}
inline bool StyleUpdateCommandArchive::has_original_style() const {
  return _internal_has_original_style();
}
inline const ::TSP::Reference& StyleUpdateCommandArchive::_internal_original_style() const {
  const ::TSP::Reference* p = original_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdateCommandArchive::original_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleUpdateCommandArchive.original_style)
  return _internal_original_style();
}
inline void StyleUpdateCommandArchive::unsafe_arena_set_allocated_original_style(
    ::TSP::Reference* original_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_style_);
  }
  original_style_ = original_style;
  if (original_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleUpdateCommandArchive.original_style)
}
inline ::TSP::Reference* StyleUpdateCommandArchive::release_original_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = original_style_;
  original_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::unsafe_arena_release_original_style() {
  // @@protoc_insertion_point(field_release:TSWP.StyleUpdateCommandArchive.original_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = original_style_;
  original_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::_internal_mutable_original_style() {
  _has_bits_[0] |= 0x00000002u;
  if (original_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    original_style_ = p;
  }
  return original_style_;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::mutable_original_style() {
  ::TSP::Reference* _msg = _internal_mutable_original_style();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleUpdateCommandArchive.original_style)
  return _msg;
}
inline void StyleUpdateCommandArchive::set_allocated_original_style(::TSP::Reference* original_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_style_);
  }
  if (original_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_style));
    if (message_arena != submessage_arena) {
      original_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_style_ = original_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleUpdateCommandArchive.original_style)
}

// optional .TSP.Reference updated_style = 3;
inline bool StyleUpdateCommandArchive::_internal_has_updated_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || updated_style_ != nullptr);
  return value;
}
inline bool StyleUpdateCommandArchive::has_updated_style() const {
  return _internal_has_updated_style();
}
inline const ::TSP::Reference& StyleUpdateCommandArchive::_internal_updated_style() const {
  const ::TSP::Reference* p = updated_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdateCommandArchive::updated_style() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleUpdateCommandArchive.updated_style)
  return _internal_updated_style();
}
inline void StyleUpdateCommandArchive::unsafe_arena_set_allocated_updated_style(
    ::TSP::Reference* updated_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_style_);
  }
  updated_style_ = updated_style;
  if (updated_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleUpdateCommandArchive.updated_style)
}
inline ::TSP::Reference* StyleUpdateCommandArchive::release_updated_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = updated_style_;
  updated_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::unsafe_arena_release_updated_style() {
  // @@protoc_insertion_point(field_release:TSWP.StyleUpdateCommandArchive.updated_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = updated_style_;
  updated_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::_internal_mutable_updated_style() {
  _has_bits_[0] |= 0x00000004u;
  if (updated_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    updated_style_ = p;
  }
  return updated_style_;
}
inline ::TSP::Reference* StyleUpdateCommandArchive::mutable_updated_style() {
  ::TSP::Reference* _msg = _internal_mutable_updated_style();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleUpdateCommandArchive.updated_style)
  return _msg;
}
inline void StyleUpdateCommandArchive::set_allocated_updated_style(::TSP::Reference* updated_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_style_);
  }
  if (updated_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_style));
    if (message_arena != submessage_arena) {
      updated_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  updated_style_ = updated_style;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleUpdateCommandArchive.updated_style)
}

// -------------------------------------------------------------------

// StyleDeleteCommandArchive

// optional .TSWP.StyleBaseCommandArchive super = 1;
inline bool StyleDeleteCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleDeleteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyleDeleteCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StyleBaseCommandArchive& StyleDeleteCommandArchive::_internal_super() const {
  const ::TSWP::StyleBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleBaseCommandArchive&>(
      ::TSWP::_StyleBaseCommandArchive_default_instance_);
}
inline const ::TSWP::StyleBaseCommandArchive& StyleDeleteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleDeleteCommandArchive.super)
  return _internal_super();
}
inline void StyleDeleteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleDeleteCommandArchive.super)
}
inline ::TSWP::StyleBaseCommandArchive* StyleDeleteCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleDeleteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleDeleteCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleDeleteCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StyleBaseCommandArchive* StyleDeleteCommandArchive::mutable_super() {
  ::TSWP::StyleBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleDeleteCommandArchive.super)
  return _msg;
}
inline void StyleDeleteCommandArchive::set_allocated_super(::TSWP::StyleBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StyleBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleDeleteCommandArchive.super)
}

// optional uint32 old_preset_index = 2;
inline bool StyleDeleteCommandArchive::_internal_has_old_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleDeleteCommandArchive::has_old_preset_index() const {
  return _internal_has_old_preset_index();
}
inline void StyleDeleteCommandArchive::clear_old_preset_index() {
  old_preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleDeleteCommandArchive::_internal_old_preset_index() const {
  return old_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleDeleteCommandArchive::old_preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleDeleteCommandArchive.old_preset_index)
  return _internal_old_preset_index();
}
inline void StyleDeleteCommandArchive::_internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  old_preset_index_ = value;
}
inline void StyleDeleteCommandArchive::set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.StyleDeleteCommandArchive.old_preset_index)
}

// -------------------------------------------------------------------

// StyleReorderCommandArchive

// optional .TSWP.StyleBaseCommandArchive super = 1;
inline bool StyleReorderCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleReorderCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyleReorderCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StyleBaseCommandArchive& StyleReorderCommandArchive::_internal_super() const {
  const ::TSWP::StyleBaseCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleBaseCommandArchive&>(
      ::TSWP::_StyleBaseCommandArchive_default_instance_);
}
inline const ::TSWP::StyleBaseCommandArchive& StyleReorderCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleReorderCommandArchive.super)
  return _internal_super();
}
inline void StyleReorderCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleBaseCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleReorderCommandArchive.super)
}
inline ::TSWP::StyleBaseCommandArchive* StyleReorderCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleReorderCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleReorderCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleBaseCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleBaseCommandArchive* StyleReorderCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleBaseCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StyleBaseCommandArchive* StyleReorderCommandArchive::mutable_super() {
  ::TSWP::StyleBaseCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleReorderCommandArchive.super)
  return _msg;
}
inline void StyleReorderCommandArchive::set_allocated_super(::TSWP::StyleBaseCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StyleBaseCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleReorderCommandArchive.super)
}

// optional uint32 old_preset_index = 2;
inline bool StyleReorderCommandArchive::_internal_has_old_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleReorderCommandArchive::has_old_preset_index() const {
  return _internal_has_old_preset_index();
}
inline void StyleReorderCommandArchive::clear_old_preset_index() {
  old_preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleReorderCommandArchive::_internal_old_preset_index() const {
  return old_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleReorderCommandArchive::old_preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleReorderCommandArchive.old_preset_index)
  return _internal_old_preset_index();
}
inline void StyleReorderCommandArchive::_internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  old_preset_index_ = value;
}
inline void StyleReorderCommandArchive::set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.StyleReorderCommandArchive.old_preset_index)
}

// optional uint32 new_preset_index = 3;
inline bool StyleReorderCommandArchive::_internal_has_new_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StyleReorderCommandArchive::has_new_preset_index() const {
  return _internal_has_new_preset_index();
}
inline void StyleReorderCommandArchive::clear_new_preset_index() {
  new_preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleReorderCommandArchive::_internal_new_preset_index() const {
  return new_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleReorderCommandArchive::new_preset_index() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleReorderCommandArchive.new_preset_index)
  return _internal_new_preset_index();
}
inline void StyleReorderCommandArchive::_internal_set_new_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  new_preset_index_ = value;
}
inline void StyleReorderCommandArchive::set_new_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_preset_index(value);
  // @@protoc_insertion_point(field_set:TSWP.StyleReorderCommandArchive.new_preset_index)
}

// -------------------------------------------------------------------

// StyleUpdatePropertyMapCommandArchive

// required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::_internal_super() const {
  const ::TSS::StyleUpdatePropertyMapCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleUpdatePropertyMapCommandArchive&>(
      ::TSS::_StyleUpdatePropertyMapCommandArchive_default_instance_);
}
inline const ::TSS::StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.StyleUpdatePropertyMapCommandArchive.super)
  return _internal_super();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleUpdatePropertyMapCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.StyleUpdatePropertyMapCommandArchive.super)
}
inline ::TSS::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleUpdatePropertyMapCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.StyleUpdatePropertyMapCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleUpdatePropertyMapCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleUpdatePropertyMapCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::mutable_super() {
  ::TSS::StyleUpdatePropertyMapCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.StyleUpdatePropertyMapCommandArchive.super)
  return _msg;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_super(::TSS::StyleUpdatePropertyMapCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.StyleUpdatePropertyMapCommandArchive.super)
}

// -------------------------------------------------------------------

// ShapeStyleSetValueCommandArchive

// required .TSD.BaseStyleSetValueCommandArchive super = 1;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::BaseStyleSetValueCommandArchive& ShapeStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::BaseStyleSetValueCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseStyleSetValueCommandArchive&>(
      ::TSD::_BaseStyleSetValueCommandArchive_default_instance_);
}
inline const ::TSD::BaseStyleSetValueCommandArchive& ShapeStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseStyleSetValueCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStyleSetValueCommandArchive.super)
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStyleSetValueCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseStyleSetValueCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::mutable_super() {
  ::TSD::BaseStyleSetValueCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStyleSetValueCommandArchive.super)
  return _msg;
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStyleSetValueCommandArchive.super)
}

// optional .TSWPSOS.ShapeStylePropertyChangeSetArchive change = 4;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_change() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || change_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_change() const {
  return _internal_has_change();
}
inline const ::TSWPSOS::ShapeStylePropertyChangeSetArchive& ShapeStyleSetValueCommandArchive::_internal_change() const {
  const ::TSWPSOS::ShapeStylePropertyChangeSetArchive* p = change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWPSOS::ShapeStylePropertyChangeSetArchive&>(
      ::TSWPSOS::_ShapeStylePropertyChangeSetArchive_default_instance_);
}
inline const ::TSWPSOS::ShapeStylePropertyChangeSetArchive& ShapeStyleSetValueCommandArchive::change() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeStyleSetValueCommandArchive.change)
  return _internal_change();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_change(
    ::TSWPSOS::ShapeStylePropertyChangeSetArchive* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  change_ = change;
  if (change) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeStyleSetValueCommandArchive.change)
}
inline ::TSWPSOS::ShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::release_change() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWPSOS::ShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeStyleSetValueCommandArchive.change)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
  return temp;
}
inline ::TSWPSOS::ShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_change() {
  _has_bits_[0] |= 0x00000002u;
  if (change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWPSOS::ShapeStylePropertyChangeSetArchive>(GetArenaForAllocation());
    change_ = p;
  }
  return change_;
}
inline ::TSWPSOS::ShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::mutable_change() {
  ::TSWPSOS::ShapeStylePropertyChangeSetArchive* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeStyleSetValueCommandArchive.change)
  return _msg;
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_change(::TSWPSOS::ShapeStylePropertyChangeSetArchive* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change));
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  change_ = change;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeStyleSetValueCommandArchive.change)
}

// -------------------------------------------------------------------

// SelectionTransformerArchive

// required .TSP.UUIDPath storage_uuid_path = 1;
inline bool SelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool SelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& SelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void SelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* SelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* SelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.SelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000001u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* SelectionTransformerArchive::mutable_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.SelectionTransformerArchive.storage_uuid_path)
  return _msg;
}
inline void SelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path));
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SelectionTransformerArchive.storage_uuid_path)
}

// required .TSP.Reference selection = 2;
inline bool SelectionTransformerArchive::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool SelectionTransformerArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& SelectionTransformerArchive::_internal_selection() const {
  const ::TSP::Reference* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SelectionTransformerArchive::selection() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionTransformerArchive.selection)
  return _internal_selection();
}
inline void SelectionTransformerArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SelectionTransformerArchive.selection)
}
inline ::TSP::Reference* SelectionTransformerArchive::release_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SelectionTransformerArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TSWP.SelectionTransformerArchive.selection)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SelectionTransformerArchive::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::TSP::Reference* SelectionTransformerArchive::mutable_selection() {
  ::TSP::Reference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TSWP.SelectionTransformerArchive.selection)
  return _msg;
}
inline void SelectionTransformerArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SelectionTransformerArchive.selection)
}

// optional bool transformed_to_noop = 3;
inline bool SelectionTransformerArchive::_internal_has_transformed_to_noop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SelectionTransformerArchive::has_transformed_to_noop() const {
  return _internal_has_transformed_to_noop();
}
inline void SelectionTransformerArchive::clear_transformed_to_noop() {
  transformed_to_noop_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SelectionTransformerArchive::_internal_transformed_to_noop() const {
  return transformed_to_noop_;
}
inline bool SelectionTransformerArchive::transformed_to_noop() const {
  // @@protoc_insertion_point(field_get:TSWP.SelectionTransformerArchive.transformed_to_noop)
  return _internal_transformed_to_noop();
}
inline void SelectionTransformerArchive::_internal_set_transformed_to_noop(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transformed_to_noop_ = value;
}
inline void SelectionTransformerArchive::set_transformed_to_noop(bool value) {
  _internal_set_transformed_to_noop(value);
  // @@protoc_insertion_point(field_set:TSWP.SelectionTransformerArchive.transformed_to_noop)
}

// -------------------------------------------------------------------

// PencilAnnotationSelectionTransformerArchive

// required .TSP.UUIDPath storage_uuid_path = 1;
inline bool PencilAnnotationSelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool PencilAnnotationSelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& PencilAnnotationSelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& PencilAnnotationSelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.PencilAnnotationSelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void PencilAnnotationSelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.PencilAnnotationSelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* PencilAnnotationSelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* PencilAnnotationSelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.PencilAnnotationSelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* PencilAnnotationSelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* PencilAnnotationSelectionTransformerArchive::mutable_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.PencilAnnotationSelectionTransformerArchive.storage_uuid_path)
  return _msg;
}
inline void PencilAnnotationSelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path));
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.PencilAnnotationSelectionTransformerArchive.storage_uuid_path)
}

// required string text_pencil_annotation_uuid = 2;
inline bool PencilAnnotationSelectionTransformerArchive::_internal_has_text_pencil_annotation_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PencilAnnotationSelectionTransformerArchive::has_text_pencil_annotation_uuid() const {
  return _internal_has_text_pencil_annotation_uuid();
}
inline void PencilAnnotationSelectionTransformerArchive::clear_text_pencil_annotation_uuid() {
  text_pencil_annotation_uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PencilAnnotationSelectionTransformerArchive::text_pencil_annotation_uuid() const {
  // @@protoc_insertion_point(field_get:TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid)
  return _internal_text_pencil_annotation_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PencilAnnotationSelectionTransformerArchive::set_text_pencil_annotation_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_pencil_annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid)
}
inline std::string* PencilAnnotationSelectionTransformerArchive::mutable_text_pencil_annotation_uuid() {
  std::string* _s = _internal_mutable_text_pencil_annotation_uuid();
  // @@protoc_insertion_point(field_mutable:TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid)
  return _s;
}
inline const std::string& PencilAnnotationSelectionTransformerArchive::_internal_text_pencil_annotation_uuid() const {
  return text_pencil_annotation_uuid_.Get();
}
inline void PencilAnnotationSelectionTransformerArchive::_internal_set_text_pencil_annotation_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_pencil_annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PencilAnnotationSelectionTransformerArchive::_internal_mutable_text_pencil_annotation_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return text_pencil_annotation_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PencilAnnotationSelectionTransformerArchive::release_text_pencil_annotation_uuid() {
  // @@protoc_insertion_point(field_release:TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid)
  if (!_internal_has_text_pencil_annotation_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_pencil_annotation_uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PencilAnnotationSelectionTransformerArchive::set_allocated_text_pencil_annotation_uuid(std::string* text_pencil_annotation_uuid) {
  if (text_pencil_annotation_uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_pencil_annotation_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_pencil_annotation_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid)
}

// -------------------------------------------------------------------

// ShapeSelectionTransformerArchive

// required .TSD.ShapeSelectionTransformerArchive super = 1;
inline bool ShapeSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ShapeSelectionTransformerArchive& ShapeSelectionTransformerArchive::_internal_super() const {
  const ::TSD::ShapeSelectionTransformerArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShapeSelectionTransformerArchive&>(
      ::TSD::_ShapeSelectionTransformerArchive_default_instance_);
}
inline const ::TSD::ShapeSelectionTransformerArchive& ShapeSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeSelectionTransformerArchive.super)
  return _internal_super();
}
inline void ShapeSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TSD::ShapeSelectionTransformerArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeSelectionTransformerArchive.super)
}
inline ::TSD::ShapeSelectionTransformerArchive* ShapeSelectionTransformerArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShapeSelectionTransformerArchive* ShapeSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeSelectionTransformerArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ShapeSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ShapeSelectionTransformerArchive* ShapeSelectionTransformerArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShapeSelectionTransformerArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ShapeSelectionTransformerArchive* ShapeSelectionTransformerArchive::mutable_super() {
  ::TSD::ShapeSelectionTransformerArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeSelectionTransformerArchive.super)
  return _msg;
}
inline void ShapeSelectionTransformerArchive::set_allocated_super(::TSD::ShapeSelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeSelectionTransformerArchive.super)
}

// optional .TSP.UUIDPath storage_uuid_path = 2;
inline bool ShapeSelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool ShapeSelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& ShapeSelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ShapeSelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeSelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void ShapeSelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeSelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* ShapeSelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* ShapeSelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeSelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ShapeSelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* ShapeSelectionTransformerArchive::mutable_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeSelectionTransformerArchive.storage_uuid_path)
  return _msg;
}
inline void ShapeSelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path));
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeSelectionTransformerArchive.storage_uuid_path)
}

// -------------------------------------------------------------------

// ShapeContentDescription

// required .TSD.DrawableContentDescription super = 1;
inline bool ShapeContentDescription::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeContentDescription::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableContentDescription& ShapeContentDescription::_internal_super() const {
  const ::TSD::DrawableContentDescription* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableContentDescription&>(
      ::TSD::_DrawableContentDescription_default_instance_);
}
inline const ::TSD::DrawableContentDescription& ShapeContentDescription::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeContentDescription.super)
  return _internal_super();
}
inline void ShapeContentDescription::unsafe_arena_set_allocated_super(
    ::TSD::DrawableContentDescription* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ShapeContentDescription.super)
}
inline ::TSD::DrawableContentDescription* ShapeContentDescription::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableContentDescription* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableContentDescription* ShapeContentDescription::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ShapeContentDescription.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableContentDescription* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableContentDescription* ShapeContentDescription::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableContentDescription>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableContentDescription* ShapeContentDescription::mutable_super() {
  ::TSD::DrawableContentDescription* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ShapeContentDescription.super)
  return _msg;
}
inline void ShapeContentDescription::set_allocated_super(::TSD::DrawableContentDescription* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ShapeContentDescription.super)
}

// optional uint32 text_range_location = 2;
inline bool ShapeContentDescription::_internal_has_text_range_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShapeContentDescription::has_text_range_location() const {
  return _internal_has_text_range_location();
}
inline void ShapeContentDescription::clear_text_range_location() {
  text_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeContentDescription::_internal_text_range_location() const {
  return text_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeContentDescription::text_range_location() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeContentDescription.text_range_location)
  return _internal_text_range_location();
}
inline void ShapeContentDescription::_internal_set_text_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  text_range_location_ = value;
}
inline void ShapeContentDescription::set_text_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_text_range_location(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeContentDescription.text_range_location)
}

// optional uint32 text_range_length = 3;
inline bool ShapeContentDescription::_internal_has_text_range_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShapeContentDescription::has_text_range_length() const {
  return _internal_has_text_range_length();
}
inline void ShapeContentDescription::clear_text_range_length() {
  text_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeContentDescription::_internal_text_range_length() const {
  return text_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeContentDescription::text_range_length() const {
  // @@protoc_insertion_point(field_get:TSWP.ShapeContentDescription.text_range_length)
  return _internal_text_range_length();
}
inline void ShapeContentDescription::_internal_set_text_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  text_range_length_ = value;
}
inline void ShapeContentDescription::set_text_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_text_range_length(value);
  // @@protoc_insertion_point(field_set:TSWP.ShapeContentDescription.text_range_length)
}

// -------------------------------------------------------------------

// ObjectPropertyArchive

// required string name = 1;
inline bool ObjectPropertyArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_name() const {
  return _internal_has_name();
}
inline void ObjectPropertyArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjectPropertyArchive::name() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectPropertyArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.name)
}
inline std::string* ObjectPropertyArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.name)
  return _s;
}
inline const std::string& ObjectPropertyArchive::_internal_name() const {
  return name_.Get();
}
inline void ObjectPropertyArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectPropertyArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectPropertyArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectPropertyArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.name)
}

// required .TSWP.ObjectPropertyType type = 2;
inline bool ObjectPropertyArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_type() const {
  return _internal_has_type();
}
inline void ObjectPropertyArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSWP::ObjectPropertyType ObjectPropertyArchive::_internal_type() const {
  return static_cast< ::TSWP::ObjectPropertyType >(type_);
}
inline ::TSWP::ObjectPropertyType ObjectPropertyArchive::type() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.type)
  return _internal_type();
}
inline void ObjectPropertyArchive::_internal_set_type(::TSWP::ObjectPropertyType value) {
  assert(::TSWP::ObjectPropertyType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void ObjectPropertyArchive::set_type(::TSWP::ObjectPropertyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.type)
}

// optional bool bool_value = 3;
inline bool ObjectPropertyArchive::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ObjectPropertyArchive::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ObjectPropertyArchive::_internal_bool_value() const {
  return bool_value_;
}
inline bool ObjectPropertyArchive::bool_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.bool_value)
  return _internal_bool_value();
}
inline void ObjectPropertyArchive::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000080u;
  bool_value_ = value;
}
inline void ObjectPropertyArchive::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.bool_value)
}

// optional float float_value = 4;
inline bool ObjectPropertyArchive::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_float_value() const {
  return _internal_has_float_value();
}
inline void ObjectPropertyArchive::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ObjectPropertyArchive::_internal_float_value() const {
  return float_value_;
}
inline float ObjectPropertyArchive::float_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.float_value)
  return _internal_float_value();
}
inline void ObjectPropertyArchive::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000100u;
  float_value_ = value;
}
inline void ObjectPropertyArchive::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.float_value)
}

// optional int32 integer_value = 5;
inline bool ObjectPropertyArchive::_internal_has_integer_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_integer_value() const {
  return _internal_has_integer_value();
}
inline void ObjectPropertyArchive::clear_integer_value() {
  integer_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectPropertyArchive::_internal_integer_value() const {
  return integer_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectPropertyArchive::integer_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.integer_value)
  return _internal_integer_value();
}
inline void ObjectPropertyArchive::_internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  integer_value_ = value;
}
inline void ObjectPropertyArchive::set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.integer_value)
}

// optional string string_value = 6;
inline bool ObjectPropertyArchive::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectPropertyArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void ObjectPropertyArchive::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObjectPropertyArchive::string_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectPropertyArchive::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ObjectPropertyArchive.string_value)
}
inline std::string* ObjectPropertyArchive::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.string_value)
  return _s;
}
inline const std::string& ObjectPropertyArchive::_internal_string_value() const {
  return string_value_.Get();
}
inline void ObjectPropertyArchive::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectPropertyArchive::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000002u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectPropertyArchive::release_string_value() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectPropertyArchive::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.string_value)
}

// optional .TSP.UUIDPath id_path_value = 7;
inline bool ObjectPropertyArchive::_internal_has_id_path_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_path_value_ != nullptr);
  return value;
}
inline bool ObjectPropertyArchive::has_id_path_value() const {
  return _internal_has_id_path_value();
}
inline const ::TSP::UUIDPath& ObjectPropertyArchive::_internal_id_path_value() const {
  const ::TSP::UUIDPath* p = id_path_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ObjectPropertyArchive::id_path_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.id_path_value)
  return _internal_id_path_value();
}
inline void ObjectPropertyArchive::unsafe_arena_set_allocated_id_path_value(
    ::TSP::UUIDPath* id_path_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_value_);
  }
  id_path_value_ = id_path_value;
  if (id_path_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ObjectPropertyArchive.id_path_value)
}
inline ::TSP::UUIDPath* ObjectPropertyArchive::release_id_path_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = id_path_value_;
  id_path_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* ObjectPropertyArchive::unsafe_arena_release_id_path_value() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.id_path_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = id_path_value_;
  id_path_value_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ObjectPropertyArchive::_internal_mutable_id_path_value() {
  _has_bits_[0] |= 0x00000004u;
  if (id_path_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    id_path_value_ = p;
  }
  return id_path_value_;
}
inline ::TSP::UUIDPath* ObjectPropertyArchive::mutable_id_path_value() {
  ::TSP::UUIDPath* _msg = _internal_mutable_id_path_value();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.id_path_value)
  return _msg;
}
inline void ObjectPropertyArchive::set_allocated_id_path_value(::TSP::UUIDPath* id_path_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_value_);
  }
  if (id_path_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_value));
    if (message_arena != submessage_arena) {
      id_path_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_path_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_path_value_ = id_path_value;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.id_path_value)
}

// optional .TSD.FillArchive fill_value = 8;
inline bool ObjectPropertyArchive::_internal_has_fill_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || fill_value_ != nullptr);
  return value;
}
inline bool ObjectPropertyArchive::has_fill_value() const {
  return _internal_has_fill_value();
}
inline const ::TSD::FillArchive& ObjectPropertyArchive::_internal_fill_value() const {
  const ::TSD::FillArchive* p = fill_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ObjectPropertyArchive::fill_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.fill_value)
  return _internal_fill_value();
}
inline void ObjectPropertyArchive::unsafe_arena_set_allocated_fill_value(
    ::TSD::FillArchive* fill_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_value_);
  }
  fill_value_ = fill_value;
  if (fill_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ObjectPropertyArchive.fill_value)
}
inline ::TSD::FillArchive* ObjectPropertyArchive::release_fill_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = fill_value_;
  fill_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ObjectPropertyArchive::unsafe_arena_release_fill_value() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.fill_value)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = fill_value_;
  fill_value_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ObjectPropertyArchive::_internal_mutable_fill_value() {
  _has_bits_[0] |= 0x00000008u;
  if (fill_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    fill_value_ = p;
  }
  return fill_value_;
}
inline ::TSD::FillArchive* ObjectPropertyArchive::mutable_fill_value() {
  ::TSD::FillArchive* _msg = _internal_mutable_fill_value();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.fill_value)
  return _msg;
}
inline void ObjectPropertyArchive::set_allocated_fill_value(::TSD::FillArchive* fill_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_value_);
  }
  if (fill_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_value));
    if (message_arena != submessage_arena) {
      fill_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fill_value_ = fill_value;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.fill_value)
}

// optional .TSP.Color color_value = 9;
inline bool ObjectPropertyArchive::_internal_has_color_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || color_value_ != nullptr);
  return value;
}
inline bool ObjectPropertyArchive::has_color_value() const {
  return _internal_has_color_value();
}
inline const ::TSP::Color& ObjectPropertyArchive::_internal_color_value() const {
  const ::TSP::Color* p = color_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ObjectPropertyArchive::color_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.color_value)
  return _internal_color_value();
}
inline void ObjectPropertyArchive::unsafe_arena_set_allocated_color_value(
    ::TSP::Color* color_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value_);
  }
  color_value_ = color_value;
  if (color_value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ObjectPropertyArchive.color_value)
}
inline ::TSP::Color* ObjectPropertyArchive::release_color_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Color* temp = color_value_;
  color_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* ObjectPropertyArchive::unsafe_arena_release_color_value() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.color_value)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Color* temp = color_value_;
  color_value_ = nullptr;
  return temp;
}
inline ::TSP::Color* ObjectPropertyArchive::_internal_mutable_color_value() {
  _has_bits_[0] |= 0x00000010u;
  if (color_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    color_value_ = p;
  }
  return color_value_;
}
inline ::TSP::Color* ObjectPropertyArchive::mutable_color_value() {
  ::TSP::Color* _msg = _internal_mutable_color_value();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.color_value)
  return _msg;
}
inline void ObjectPropertyArchive::set_allocated_color_value(::TSP::Color* color_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value_);
  }
  if (color_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value));
    if (message_arena != submessage_arena) {
      color_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  color_value_ = color_value;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.color_value)
}

// optional .TSD.ShadowArchive shadow_value = 10;
inline bool ObjectPropertyArchive::_internal_has_shadow_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || shadow_value_ != nullptr);
  return value;
}
inline bool ObjectPropertyArchive::has_shadow_value() const {
  return _internal_has_shadow_value();
}
inline const ::TSD::ShadowArchive& ObjectPropertyArchive::_internal_shadow_value() const {
  const ::TSD::ShadowArchive* p = shadow_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ObjectPropertyArchive::shadow_value() const {
  // @@protoc_insertion_point(field_get:TSWP.ObjectPropertyArchive.shadow_value)
  return _internal_shadow_value();
}
inline void ObjectPropertyArchive::unsafe_arena_set_allocated_shadow_value(
    ::TSD::ShadowArchive* shadow_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_value_);
  }
  shadow_value_ = shadow_value;
  if (shadow_value) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ObjectPropertyArchive.shadow_value)
}
inline ::TSD::ShadowArchive* ObjectPropertyArchive::release_shadow_value() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::ShadowArchive* temp = shadow_value_;
  shadow_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ObjectPropertyArchive::unsafe_arena_release_shadow_value() {
  // @@protoc_insertion_point(field_release:TSWP.ObjectPropertyArchive.shadow_value)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::ShadowArchive* temp = shadow_value_;
  shadow_value_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ObjectPropertyArchive::_internal_mutable_shadow_value() {
  _has_bits_[0] |= 0x00000020u;
  if (shadow_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    shadow_value_ = p;
  }
  return shadow_value_;
}
inline ::TSD::ShadowArchive* ObjectPropertyArchive::mutable_shadow_value() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_shadow_value();
  // @@protoc_insertion_point(field_mutable:TSWP.ObjectPropertyArchive.shadow_value)
  return _msg;
}
inline void ObjectPropertyArchive::set_allocated_shadow_value(::TSD::ShadowArchive* shadow_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_value_);
  }
  if (shadow_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadow_value));
    if (message_arena != submessage_arena) {
      shadow_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  shadow_value_ = shadow_value;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ObjectPropertyArchive.shadow_value)
}

// -------------------------------------------------------------------

// SetObjectPropertiesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool SetObjectPropertiesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SetObjectPropertiesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& SetObjectPropertiesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& SetObjectPropertiesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.SetObjectPropertiesCommandArchive.super)
  return _internal_super();
}
inline void SetObjectPropertiesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SetObjectPropertiesCommandArchive.super)
}
inline ::TSK::CommandArchive* SetObjectPropertiesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* SetObjectPropertiesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.SetObjectPropertiesCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* SetObjectPropertiesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* SetObjectPropertiesCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.SetObjectPropertiesCommandArchive.super)
  return _msg;
}
inline void SetObjectPropertiesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetObjectPropertiesCommandArchive.super)
}

// required .TSP.UUIDPath object_uuid_path = 2;
inline bool SetObjectPropertiesCommandArchive::_internal_has_object_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || object_uuid_path_ != nullptr);
  return value;
}
inline bool SetObjectPropertiesCommandArchive::has_object_uuid_path() const {
  return _internal_has_object_uuid_path();
}
inline const ::TSP::UUIDPath& SetObjectPropertiesCommandArchive::_internal_object_uuid_path() const {
  const ::TSP::UUIDPath* p = object_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SetObjectPropertiesCommandArchive::object_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.SetObjectPropertiesCommandArchive.object_uuid_path)
  return _internal_object_uuid_path();
}
inline void SetObjectPropertiesCommandArchive::unsafe_arena_set_allocated_object_uuid_path(
    ::TSP::UUIDPath* object_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_uuid_path_);
  }
  object_uuid_path_ = object_uuid_path;
  if (object_uuid_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.SetObjectPropertiesCommandArchive.object_uuid_path)
}
inline ::TSP::UUIDPath* SetObjectPropertiesCommandArchive::release_object_uuid_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = object_uuid_path_;
  object_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* SetObjectPropertiesCommandArchive::unsafe_arena_release_object_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.SetObjectPropertiesCommandArchive.object_uuid_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = object_uuid_path_;
  object_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SetObjectPropertiesCommandArchive::_internal_mutable_object_uuid_path() {
  _has_bits_[0] |= 0x00000004u;
  if (object_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    object_uuid_path_ = p;
  }
  return object_uuid_path_;
}
inline ::TSP::UUIDPath* SetObjectPropertiesCommandArchive::mutable_object_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_object_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.SetObjectPropertiesCommandArchive.object_uuid_path)
  return _msg;
}
inline void SetObjectPropertiesCommandArchive::set_allocated_object_uuid_path(::TSP::UUIDPath* object_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_uuid_path_);
  }
  if (object_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_uuid_path));
    if (message_arena != submessage_arena) {
      object_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  object_uuid_path_ = object_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetObjectPropertiesCommandArchive.object_uuid_path)
}

// repeated .TSWP.ObjectPropertyArchive properties = 3;
inline int SetObjectPropertiesCommandArchive::_internal_properties_size() const {
  return properties_.size();
}
inline int SetObjectPropertiesCommandArchive::properties_size() const {
  return _internal_properties_size();
}
inline void SetObjectPropertiesCommandArchive::clear_properties() {
  properties_.Clear();
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.SetObjectPropertiesCommandArchive.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >*
SetObjectPropertiesCommandArchive::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.SetObjectPropertiesCommandArchive.properties)
  return &properties_;
}
inline const ::TSWP::ObjectPropertyArchive& SetObjectPropertiesCommandArchive::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::TSWP::ObjectPropertyArchive& SetObjectPropertiesCommandArchive::properties(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.SetObjectPropertiesCommandArchive.properties)
  return _internal_properties(index);
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::_internal_add_properties() {
  return properties_.Add();
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::add_properties() {
  ::TSWP::ObjectPropertyArchive* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:TSWP.SetObjectPropertiesCommandArchive.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >&
SetObjectPropertiesCommandArchive::properties() const {
  // @@protoc_insertion_point(field_list:TSWP.SetObjectPropertiesCommandArchive.properties)
  return properties_;
}

// optional string action_string = 4;
inline bool SetObjectPropertiesCommandArchive::_internal_has_action_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetObjectPropertiesCommandArchive::has_action_string() const {
  return _internal_has_action_string();
}
inline void SetObjectPropertiesCommandArchive::clear_action_string() {
  action_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetObjectPropertiesCommandArchive::action_string() const {
  // @@protoc_insertion_point(field_get:TSWP.SetObjectPropertiesCommandArchive.action_string)
  return _internal_action_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetObjectPropertiesCommandArchive::set_action_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.SetObjectPropertiesCommandArchive.action_string)
}
inline std::string* SetObjectPropertiesCommandArchive::mutable_action_string() {
  std::string* _s = _internal_mutable_action_string();
  // @@protoc_insertion_point(field_mutable:TSWP.SetObjectPropertiesCommandArchive.action_string)
  return _s;
}
inline const std::string& SetObjectPropertiesCommandArchive::_internal_action_string() const {
  return action_string_.Get();
}
inline void SetObjectPropertiesCommandArchive::_internal_set_action_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetObjectPropertiesCommandArchive::_internal_mutable_action_string() {
  _has_bits_[0] |= 0x00000001u;
  return action_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetObjectPropertiesCommandArchive::release_action_string() {
  // @@protoc_insertion_point(field_release:TSWP.SetObjectPropertiesCommandArchive.action_string)
  if (!_internal_has_action_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetObjectPropertiesCommandArchive::set_allocated_action_string(std::string* action_string) {
  if (action_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.SetObjectPropertiesCommandArchive.action_string)
}

// repeated .TSWP.ObjectPropertyArchive old_properties = 5;
inline int SetObjectPropertiesCommandArchive::_internal_old_properties_size() const {
  return old_properties_.size();
}
inline int SetObjectPropertiesCommandArchive::old_properties_size() const {
  return _internal_old_properties_size();
}
inline void SetObjectPropertiesCommandArchive::clear_old_properties() {
  old_properties_.Clear();
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::mutable_old_properties(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.SetObjectPropertiesCommandArchive.old_properties)
  return old_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >*
SetObjectPropertiesCommandArchive::mutable_old_properties() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.SetObjectPropertiesCommandArchive.old_properties)
  return &old_properties_;
}
inline const ::TSWP::ObjectPropertyArchive& SetObjectPropertiesCommandArchive::_internal_old_properties(int index) const {
  return old_properties_.Get(index);
}
inline const ::TSWP::ObjectPropertyArchive& SetObjectPropertiesCommandArchive::old_properties(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.SetObjectPropertiesCommandArchive.old_properties)
  return _internal_old_properties(index);
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::_internal_add_old_properties() {
  return old_properties_.Add();
}
inline ::TSWP::ObjectPropertyArchive* SetObjectPropertiesCommandArchive::add_old_properties() {
  ::TSWP::ObjectPropertyArchive* _add = _internal_add_old_properties();
  // @@protoc_insertion_point(field_add:TSWP.SetObjectPropertiesCommandArchive.old_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::ObjectPropertyArchive >&
SetObjectPropertiesCommandArchive::old_properties() const {
  // @@protoc_insertion_point(field_list:TSWP.SetObjectPropertiesCommandArchive.old_properties)
  return old_properties_;
}

// -------------------------------------------------------------------

// UpdateFlowInfoCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool UpdateFlowInfoCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& UpdateFlowInfoCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& UpdateFlowInfoCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.super)
  return _internal_super();
}
inline void UpdateFlowInfoCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateFlowInfoCommandArchive.super)
}
inline ::TSK::CommandArchive* UpdateFlowInfoCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* UpdateFlowInfoCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateFlowInfoCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* UpdateFlowInfoCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* UpdateFlowInfoCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.super)
  return _msg;
}
inline void UpdateFlowInfoCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateFlowInfoCommandArchive.super)
}

// optional .TSWP.UpdateFlowInfoCommandArchive.Mode command_mode = 2 [default = kModeRearrange];
inline bool UpdateFlowInfoCommandArchive::_internal_has_command_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_command_mode() const {
  return _internal_has_command_mode();
}
inline void UpdateFlowInfoCommandArchive::clear_command_mode() {
  command_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSWP::UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::_internal_command_mode() const {
  return static_cast< ::TSWP::UpdateFlowInfoCommandArchive_Mode >(command_mode_);
}
inline ::TSWP::UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::command_mode() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.command_mode)
  return _internal_command_mode();
}
inline void UpdateFlowInfoCommandArchive::_internal_set_command_mode(::TSWP::UpdateFlowInfoCommandArchive_Mode value) {
  assert(::TSWP::UpdateFlowInfoCommandArchive_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  command_mode_ = value;
}
inline void UpdateFlowInfoCommandArchive::set_command_mode(::TSWP::UpdateFlowInfoCommandArchive_Mode value) {
  _internal_set_command_mode(value);
  // @@protoc_insertion_point(field_set:TSWP.UpdateFlowInfoCommandArchive.command_mode)
}

// optional .TSP.UUIDPath flow_info_uuid_path = 3;
inline bool UpdateFlowInfoCommandArchive::_internal_has_flow_info_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || flow_info_uuid_path_ != nullptr);
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_flow_info_uuid_path() const {
  return _internal_has_flow_info_uuid_path();
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::_internal_flow_info_uuid_path() const {
  const ::TSP::UUIDPath* p = flow_info_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::flow_info_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path)
  return _internal_flow_info_uuid_path();
}
inline void UpdateFlowInfoCommandArchive::unsafe_arena_set_allocated_flow_info_uuid_path(
    ::TSP::UUIDPath* flow_info_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path_);
  }
  flow_info_uuid_path_ = flow_info_uuid_path;
  if (flow_info_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path)
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::release_flow_info_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = flow_info_uuid_path_;
  flow_info_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::unsafe_arena_release_flow_info_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = flow_info_uuid_path_;
  flow_info_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::_internal_mutable_flow_info_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (flow_info_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    flow_info_uuid_path_ = p;
  }
  return flow_info_uuid_path_;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::mutable_flow_info_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_flow_info_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path)
  return _msg;
}
inline void UpdateFlowInfoCommandArchive::set_allocated_flow_info_uuid_path(::TSP::UUIDPath* flow_info_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path_);
  }
  if (flow_info_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path));
    if (message_arena != submessage_arena) {
      flow_info_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_info_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  flow_info_uuid_path_ = flow_info_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path)
}

// optional .TSP.UUIDPath text_box_id_path_to_add_or_remove = 4;
inline bool UpdateFlowInfoCommandArchive::_internal_has_text_box_id_path_to_add_or_remove() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_box_id_path_to_add_or_remove_ != nullptr);
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_text_box_id_path_to_add_or_remove() const {
  return _internal_has_text_box_id_path_to_add_or_remove();
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::_internal_text_box_id_path_to_add_or_remove() const {
  const ::TSP::UUIDPath* p = text_box_id_path_to_add_or_remove_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::text_box_id_path_to_add_or_remove() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove)
  return _internal_text_box_id_path_to_add_or_remove();
}
inline void UpdateFlowInfoCommandArchive::unsafe_arena_set_allocated_text_box_id_path_to_add_or_remove(
    ::TSP::UUIDPath* text_box_id_path_to_add_or_remove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_box_id_path_to_add_or_remove_);
  }
  text_box_id_path_to_add_or_remove_ = text_box_id_path_to_add_or_remove;
  if (text_box_id_path_to_add_or_remove) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove)
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::release_text_box_id_path_to_add_or_remove() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = text_box_id_path_to_add_or_remove_;
  text_box_id_path_to_add_or_remove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::unsafe_arena_release_text_box_id_path_to_add_or_remove() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = text_box_id_path_to_add_or_remove_;
  text_box_id_path_to_add_or_remove_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::_internal_mutable_text_box_id_path_to_add_or_remove() {
  _has_bits_[0] |= 0x00000004u;
  if (text_box_id_path_to_add_or_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    text_box_id_path_to_add_or_remove_ = p;
  }
  return text_box_id_path_to_add_or_remove_;
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::mutable_text_box_id_path_to_add_or_remove() {
  ::TSP::UUIDPath* _msg = _internal_mutable_text_box_id_path_to_add_or_remove();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove)
  return _msg;
}
inline void UpdateFlowInfoCommandArchive::set_allocated_text_box_id_path_to_add_or_remove(::TSP::UUIDPath* text_box_id_path_to_add_or_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_box_id_path_to_add_or_remove_);
  }
  if (text_box_id_path_to_add_or_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_box_id_path_to_add_or_remove));
    if (message_arena != submessage_arena) {
      text_box_id_path_to_add_or_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_box_id_path_to_add_or_remove, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_box_id_path_to_add_or_remove_ = text_box_id_path_to_add_or_remove;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove)
}

// repeated .TSP.UUIDPath text_box_id_paths_at_start = 5;
inline int UpdateFlowInfoCommandArchive::_internal_text_box_id_paths_at_start_size() const {
  return text_box_id_paths_at_start_.size();
}
inline int UpdateFlowInfoCommandArchive::text_box_id_paths_at_start_size() const {
  return _internal_text_box_id_paths_at_start_size();
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::mutable_text_box_id_paths_at_start(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start)
  return text_box_id_paths_at_start_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
UpdateFlowInfoCommandArchive::mutable_text_box_id_paths_at_start() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start)
  return &text_box_id_paths_at_start_;
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::_internal_text_box_id_paths_at_start(int index) const {
  return text_box_id_paths_at_start_.Get(index);
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::text_box_id_paths_at_start(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start)
  return _internal_text_box_id_paths_at_start(index);
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::_internal_add_text_box_id_paths_at_start() {
  return text_box_id_paths_at_start_.Add();
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::add_text_box_id_paths_at_start() {
  ::TSP::UUIDPath* _add = _internal_add_text_box_id_paths_at_start();
  // @@protoc_insertion_point(field_add:TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
UpdateFlowInfoCommandArchive::text_box_id_paths_at_start() const {
  // @@protoc_insertion_point(field_list:TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start)
  return text_box_id_paths_at_start_;
}

// repeated .TSP.UUIDPath suggested_text_box_id_paths_at_end = 6;
inline int UpdateFlowInfoCommandArchive::_internal_suggested_text_box_id_paths_at_end_size() const {
  return suggested_text_box_id_paths_at_end_.size();
}
inline int UpdateFlowInfoCommandArchive::suggested_text_box_id_paths_at_end_size() const {
  return _internal_suggested_text_box_id_paths_at_end_size();
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::mutable_suggested_text_box_id_paths_at_end(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end)
  return suggested_text_box_id_paths_at_end_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
UpdateFlowInfoCommandArchive::mutable_suggested_text_box_id_paths_at_end() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end)
  return &suggested_text_box_id_paths_at_end_;
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::_internal_suggested_text_box_id_paths_at_end(int index) const {
  return suggested_text_box_id_paths_at_end_.Get(index);
}
inline const ::TSP::UUIDPath& UpdateFlowInfoCommandArchive::suggested_text_box_id_paths_at_end(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end)
  return _internal_suggested_text_box_id_paths_at_end(index);
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::_internal_add_suggested_text_box_id_paths_at_end() {
  return suggested_text_box_id_paths_at_end_.Add();
}
inline ::TSP::UUIDPath* UpdateFlowInfoCommandArchive::add_suggested_text_box_id_paths_at_end() {
  ::TSP::UUIDPath* _add = _internal_add_suggested_text_box_id_paths_at_end();
  // @@protoc_insertion_point(field_add:TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
UpdateFlowInfoCommandArchive::suggested_text_box_id_paths_at_end() const {
  // @@protoc_insertion_point(field_list:TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end)
  return suggested_text_box_id_paths_at_end_;
}

// repeated .TSP.Reference undo_text_boxes_to_restore = 7;
inline int UpdateFlowInfoCommandArchive::_internal_undo_text_boxes_to_restore_size() const {
  return undo_text_boxes_to_restore_.size();
}
inline int UpdateFlowInfoCommandArchive::undo_text_boxes_to_restore_size() const {
  return _internal_undo_text_boxes_to_restore_size();
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::mutable_undo_text_boxes_to_restore(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore)
  return undo_text_boxes_to_restore_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UpdateFlowInfoCommandArchive::mutable_undo_text_boxes_to_restore() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore)
  return &undo_text_boxes_to_restore_;
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::_internal_undo_text_boxes_to_restore(int index) const {
  return undo_text_boxes_to_restore_.Get(index);
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::undo_text_boxes_to_restore(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore)
  return _internal_undo_text_boxes_to_restore(index);
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::_internal_add_undo_text_boxes_to_restore() {
  return undo_text_boxes_to_restore_.Add();
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::add_undo_text_boxes_to_restore() {
  ::TSP::Reference* _add = _internal_add_undo_text_boxes_to_restore();
  // @@protoc_insertion_point(field_add:TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UpdateFlowInfoCommandArchive::undo_text_boxes_to_restore() const {
  // @@protoc_insertion_point(field_list:TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore)
  return undo_text_boxes_to_restore_;
}

// optional .TSP.Reference undo_added_shape_info = 8;
inline bool UpdateFlowInfoCommandArchive::_internal_has_undo_added_shape_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_added_shape_info_ != nullptr);
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_undo_added_shape_info() const {
  return _internal_has_undo_added_shape_info();
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::_internal_undo_added_shape_info() const {
  const ::TSP::Reference* p = undo_added_shape_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::undo_added_shape_info() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info)
  return _internal_undo_added_shape_info();
}
inline void UpdateFlowInfoCommandArchive::unsafe_arena_set_allocated_undo_added_shape_info(
    ::TSP::Reference* undo_added_shape_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_added_shape_info_);
  }
  undo_added_shape_info_ = undo_added_shape_info;
  if (undo_added_shape_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info)
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::release_undo_added_shape_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_added_shape_info_;
  undo_added_shape_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::unsafe_arena_release_undo_added_shape_info() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_added_shape_info_;
  undo_added_shape_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::_internal_mutable_undo_added_shape_info() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_added_shape_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_added_shape_info_ = p;
  }
  return undo_added_shape_info_;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::mutable_undo_added_shape_info() {
  ::TSP::Reference* _msg = _internal_mutable_undo_added_shape_info();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info)
  return _msg;
}
inline void UpdateFlowInfoCommandArchive::set_allocated_undo_added_shape_info(::TSP::Reference* undo_added_shape_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_added_shape_info_);
  }
  if (undo_added_shape_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_added_shape_info));
    if (message_arena != submessage_arena) {
      undo_added_shape_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_added_shape_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_added_shape_info_ = undo_added_shape_info;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info)
}

// optional .TSP.Reference undo_removed_shape_info = 9;
inline bool UpdateFlowInfoCommandArchive::_internal_has_undo_removed_shape_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_removed_shape_info_ != nullptr);
  return value;
}
inline bool UpdateFlowInfoCommandArchive::has_undo_removed_shape_info() const {
  return _internal_has_undo_removed_shape_info();
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::_internal_undo_removed_shape_info() const {
  const ::TSP::Reference* p = undo_removed_shape_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UpdateFlowInfoCommandArchive::undo_removed_shape_info() const {
  // @@protoc_insertion_point(field_get:TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info)
  return _internal_undo_removed_shape_info();
}
inline void UpdateFlowInfoCommandArchive::unsafe_arena_set_allocated_undo_removed_shape_info(
    ::TSP::Reference* undo_removed_shape_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_removed_shape_info_);
  }
  undo_removed_shape_info_ = undo_removed_shape_info;
  if (undo_removed_shape_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info)
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::release_undo_removed_shape_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_removed_shape_info_;
  undo_removed_shape_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::unsafe_arena_release_undo_removed_shape_info() {
  // @@protoc_insertion_point(field_release:TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_removed_shape_info_;
  undo_removed_shape_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::_internal_mutable_undo_removed_shape_info() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_removed_shape_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_removed_shape_info_ = p;
  }
  return undo_removed_shape_info_;
}
inline ::TSP::Reference* UpdateFlowInfoCommandArchive::mutable_undo_removed_shape_info() {
  ::TSP::Reference* _msg = _internal_mutable_undo_removed_shape_info();
  // @@protoc_insertion_point(field_mutable:TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info)
  return _msg;
}
inline void UpdateFlowInfoCommandArchive::set_allocated_undo_removed_shape_info(::TSP::Reference* undo_removed_shape_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_removed_shape_info_);
  }
  if (undo_removed_shape_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_removed_shape_info));
    if (message_arena != submessage_arena) {
      undo_removed_shape_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_removed_shape_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_removed_shape_info_ = undo_removed_shape_info;
  // @@protoc_insertion_point(field_set_allocated:TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info)
}

// -------------------------------------------------------------------

// AddFlowInfoCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool AddFlowInfoCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AddFlowInfoCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& AddFlowInfoCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& AddFlowInfoCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.super)
  return _internal_super();
}
inline void AddFlowInfoCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AddFlowInfoCommandArchive.super)
}
inline ::TSK::CommandArchive* AddFlowInfoCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* AddFlowInfoCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.AddFlowInfoCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* AddFlowInfoCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* AddFlowInfoCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.AddFlowInfoCommandArchive.super)
  return _msg;
}
inline void AddFlowInfoCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AddFlowInfoCommandArchive.super)
}

// optional .TSP.Reference flow_info_to_add = 2;
inline bool AddFlowInfoCommandArchive::_internal_has_flow_info_to_add() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || flow_info_to_add_ != nullptr);
  return value;
}
inline bool AddFlowInfoCommandArchive::has_flow_info_to_add() const {
  return _internal_has_flow_info_to_add();
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::_internal_flow_info_to_add() const {
  const ::TSP::Reference* p = flow_info_to_add_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::flow_info_to_add() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.flow_info_to_add)
  return _internal_flow_info_to_add();
}
inline void AddFlowInfoCommandArchive::unsafe_arena_set_allocated_flow_info_to_add(
    ::TSP::Reference* flow_info_to_add) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_to_add_);
  }
  flow_info_to_add_ = flow_info_to_add;
  if (flow_info_to_add) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AddFlowInfoCommandArchive.flow_info_to_add)
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::release_flow_info_to_add() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = flow_info_to_add_;
  flow_info_to_add_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::unsafe_arena_release_flow_info_to_add() {
  // @@protoc_insertion_point(field_release:TSWP.AddFlowInfoCommandArchive.flow_info_to_add)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = flow_info_to_add_;
  flow_info_to_add_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::_internal_mutable_flow_info_to_add() {
  _has_bits_[0] |= 0x00000002u;
  if (flow_info_to_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    flow_info_to_add_ = p;
  }
  return flow_info_to_add_;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::mutable_flow_info_to_add() {
  ::TSP::Reference* _msg = _internal_mutable_flow_info_to_add();
  // @@protoc_insertion_point(field_mutable:TSWP.AddFlowInfoCommandArchive.flow_info_to_add)
  return _msg;
}
inline void AddFlowInfoCommandArchive::set_allocated_flow_info_to_add(::TSP::Reference* flow_info_to_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_to_add_);
  }
  if (flow_info_to_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_to_add));
    if (message_arena != submessage_arena) {
      flow_info_to_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_info_to_add, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  flow_info_to_add_ = flow_info_to_add;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AddFlowInfoCommandArchive.flow_info_to_add)
}

// optional .TSP.Reference flow_info_archive = 3;
inline bool AddFlowInfoCommandArchive::_internal_has_flow_info_archive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || flow_info_archive_ != nullptr);
  return value;
}
inline bool AddFlowInfoCommandArchive::has_flow_info_archive() const {
  return _internal_has_flow_info_archive();
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::_internal_flow_info_archive() const {
  const ::TSP::Reference* p = flow_info_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::flow_info_archive() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.flow_info_archive)
  return _internal_flow_info_archive();
}
inline void AddFlowInfoCommandArchive::unsafe_arena_set_allocated_flow_info_archive(
    ::TSP::Reference* flow_info_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_archive_);
  }
  flow_info_archive_ = flow_info_archive;
  if (flow_info_archive) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AddFlowInfoCommandArchive.flow_info_archive)
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::release_flow_info_archive() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = flow_info_archive_;
  flow_info_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::unsafe_arena_release_flow_info_archive() {
  // @@protoc_insertion_point(field_release:TSWP.AddFlowInfoCommandArchive.flow_info_archive)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = flow_info_archive_;
  flow_info_archive_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::_internal_mutable_flow_info_archive() {
  _has_bits_[0] |= 0x00000004u;
  if (flow_info_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    flow_info_archive_ = p;
  }
  return flow_info_archive_;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::mutable_flow_info_archive() {
  ::TSP::Reference* _msg = _internal_mutable_flow_info_archive();
  // @@protoc_insertion_point(field_mutable:TSWP.AddFlowInfoCommandArchive.flow_info_archive)
  return _msg;
}
inline void AddFlowInfoCommandArchive::set_allocated_flow_info_archive(::TSP::Reference* flow_info_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_archive_);
  }
  if (flow_info_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_archive));
    if (message_arena != submessage_arena) {
      flow_info_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_info_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  flow_info_archive_ = flow_info_archive;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AddFlowInfoCommandArchive.flow_info_archive)
}

// optional uint32 undo_user_interface_identifier_to_restore = 4;
inline bool AddFlowInfoCommandArchive::_internal_has_undo_user_interface_identifier_to_restore() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AddFlowInfoCommandArchive::has_undo_user_interface_identifier_to_restore() const {
  return _internal_has_undo_user_interface_identifier_to_restore();
}
inline void AddFlowInfoCommandArchive::clear_undo_user_interface_identifier_to_restore() {
  undo_user_interface_identifier_to_restore_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddFlowInfoCommandArchive::_internal_undo_user_interface_identifier_to_restore() const {
  return undo_user_interface_identifier_to_restore_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddFlowInfoCommandArchive::undo_user_interface_identifier_to_restore() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.undo_user_interface_identifier_to_restore)
  return _internal_undo_user_interface_identifier_to_restore();
}
inline void AddFlowInfoCommandArchive::_internal_set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  undo_user_interface_identifier_to_restore_ = value;
}
inline void AddFlowInfoCommandArchive::set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_user_interface_identifier_to_restore(value);
  // @@protoc_insertion_point(field_set:TSWP.AddFlowInfoCommandArchive.undo_user_interface_identifier_to_restore)
}

// optional uint32 undo_next_user_interface_identifier_to_restore = 5;
inline bool AddFlowInfoCommandArchive::_internal_has_undo_next_user_interface_identifier_to_restore() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AddFlowInfoCommandArchive::has_undo_next_user_interface_identifier_to_restore() const {
  return _internal_has_undo_next_user_interface_identifier_to_restore();
}
inline void AddFlowInfoCommandArchive::clear_undo_next_user_interface_identifier_to_restore() {
  undo_next_user_interface_identifier_to_restore_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddFlowInfoCommandArchive::_internal_undo_next_user_interface_identifier_to_restore() const {
  return undo_next_user_interface_identifier_to_restore_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddFlowInfoCommandArchive::undo_next_user_interface_identifier_to_restore() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.undo_next_user_interface_identifier_to_restore)
  return _internal_undo_next_user_interface_identifier_to_restore();
}
inline void AddFlowInfoCommandArchive::_internal_set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  undo_next_user_interface_identifier_to_restore_ = value;
}
inline void AddFlowInfoCommandArchive::set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_next_user_interface_identifier_to_restore(value);
  // @@protoc_insertion_point(field_set:TSWP.AddFlowInfoCommandArchive.undo_next_user_interface_identifier_to_restore)
}

// optional .TSP.Reference working_undo_object = 6;
inline bool AddFlowInfoCommandArchive::_internal_has_working_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || working_undo_object_ != nullptr);
  return value;
}
inline bool AddFlowInfoCommandArchive::has_working_undo_object() const {
  return _internal_has_working_undo_object();
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::_internal_working_undo_object() const {
  const ::TSP::Reference* p = working_undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AddFlowInfoCommandArchive::working_undo_object() const {
  // @@protoc_insertion_point(field_get:TSWP.AddFlowInfoCommandArchive.working_undo_object)
  return _internal_working_undo_object();
}
inline void AddFlowInfoCommandArchive::unsafe_arena_set_allocated_working_undo_object(
    ::TSP::Reference* working_undo_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(working_undo_object_);
  }
  working_undo_object_ = working_undo_object;
  if (working_undo_object) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.AddFlowInfoCommandArchive.working_undo_object)
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::release_working_undo_object() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = working_undo_object_;
  working_undo_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::unsafe_arena_release_working_undo_object() {
  // @@protoc_insertion_point(field_release:TSWP.AddFlowInfoCommandArchive.working_undo_object)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = working_undo_object_;
  working_undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::_internal_mutable_working_undo_object() {
  _has_bits_[0] |= 0x00000008u;
  if (working_undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    working_undo_object_ = p;
  }
  return working_undo_object_;
}
inline ::TSP::Reference* AddFlowInfoCommandArchive::mutable_working_undo_object() {
  ::TSP::Reference* _msg = _internal_mutable_working_undo_object();
  // @@protoc_insertion_point(field_mutable:TSWP.AddFlowInfoCommandArchive.working_undo_object)
  return _msg;
}
inline void AddFlowInfoCommandArchive::set_allocated_working_undo_object(::TSP::Reference* working_undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(working_undo_object_);
  }
  if (working_undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(working_undo_object));
    if (message_arena != submessage_arena) {
      working_undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, working_undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  working_undo_object_ = working_undo_object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.AddFlowInfoCommandArchive.working_undo_object)
}

// -------------------------------------------------------------------

// RemoveFlowInfoCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool RemoveFlowInfoCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveFlowInfoCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveFlowInfoCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveFlowInfoCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveFlowInfoCommandArchive.super)
  return _internal_super();
}
inline void RemoveFlowInfoCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveFlowInfoCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveFlowInfoCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* RemoveFlowInfoCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveFlowInfoCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveFlowInfoCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveFlowInfoCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveFlowInfoCommandArchive.super)
  return _msg;
}
inline void RemoveFlowInfoCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveFlowInfoCommandArchive.super)
}

// optional .TSP.UUIDPath flow_info_uuid_path = 2;
inline bool RemoveFlowInfoCommandArchive::_internal_has_flow_info_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || flow_info_uuid_path_ != nullptr);
  return value;
}
inline bool RemoveFlowInfoCommandArchive::has_flow_info_uuid_path() const {
  return _internal_has_flow_info_uuid_path();
}
inline const ::TSP::UUIDPath& RemoveFlowInfoCommandArchive::_internal_flow_info_uuid_path() const {
  const ::TSP::UUIDPath* p = flow_info_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& RemoveFlowInfoCommandArchive::flow_info_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path)
  return _internal_flow_info_uuid_path();
}
inline void RemoveFlowInfoCommandArchive::unsafe_arena_set_allocated_flow_info_uuid_path(
    ::TSP::UUIDPath* flow_info_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path_);
  }
  flow_info_uuid_path_ = flow_info_uuid_path;
  if (flow_info_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path)
}
inline ::TSP::UUIDPath* RemoveFlowInfoCommandArchive::release_flow_info_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = flow_info_uuid_path_;
  flow_info_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* RemoveFlowInfoCommandArchive::unsafe_arena_release_flow_info_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = flow_info_uuid_path_;
  flow_info_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* RemoveFlowInfoCommandArchive::_internal_mutable_flow_info_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (flow_info_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    flow_info_uuid_path_ = p;
  }
  return flow_info_uuid_path_;
}
inline ::TSP::UUIDPath* RemoveFlowInfoCommandArchive::mutable_flow_info_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_flow_info_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path)
  return _msg;
}
inline void RemoveFlowInfoCommandArchive::set_allocated_flow_info_uuid_path(::TSP::UUIDPath* flow_info_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path_);
  }
  if (flow_info_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_uuid_path));
    if (message_arena != submessage_arena) {
      flow_info_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_info_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  flow_info_uuid_path_ = flow_info_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path)
}

// optional .TSP.Reference undo_object = 3;
inline bool RemoveFlowInfoCommandArchive::_internal_has_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_ != nullptr);
  return value;
}
inline bool RemoveFlowInfoCommandArchive::has_undo_object() const {
  return _internal_has_undo_object();
}
inline const ::TSP::Reference& RemoveFlowInfoCommandArchive::_internal_undo_object() const {
  const ::TSP::Reference* p = undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveFlowInfoCommandArchive::undo_object() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveFlowInfoCommandArchive.undo_object)
  return _internal_undo_object();
}
inline void RemoveFlowInfoCommandArchive::unsafe_arena_set_allocated_undo_object(
    ::TSP::Reference* undo_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  undo_object_ = undo_object;
  if (undo_object) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.RemoveFlowInfoCommandArchive.undo_object)
}
inline ::TSP::Reference* RemoveFlowInfoCommandArchive::release_undo_object() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* RemoveFlowInfoCommandArchive::unsafe_arena_release_undo_object() {
  // @@protoc_insertion_point(field_release:TSWP.RemoveFlowInfoCommandArchive.undo_object)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveFlowInfoCommandArchive::_internal_mutable_undo_object() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_object_ = p;
  }
  return undo_object_;
}
inline ::TSP::Reference* RemoveFlowInfoCommandArchive::mutable_undo_object() {
  ::TSP::Reference* _msg = _internal_mutable_undo_object();
  // @@protoc_insertion_point(field_mutable:TSWP.RemoveFlowInfoCommandArchive.undo_object)
  return _msg;
}
inline void RemoveFlowInfoCommandArchive::set_allocated_undo_object(::TSP::Reference* undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  if (undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object));
    if (message_arena != submessage_arena) {
      undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_object_ = undo_object;
  // @@protoc_insertion_point(field_set_allocated:TSWP.RemoveFlowInfoCommandArchive.undo_object)
}

// optional uint32 undo_user_interface_identifier_to_restore = 4;
inline bool RemoveFlowInfoCommandArchive::_internal_has_undo_user_interface_identifier_to_restore() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoveFlowInfoCommandArchive::has_undo_user_interface_identifier_to_restore() const {
  return _internal_has_undo_user_interface_identifier_to_restore();
}
inline void RemoveFlowInfoCommandArchive::clear_undo_user_interface_identifier_to_restore() {
  undo_user_interface_identifier_to_restore_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveFlowInfoCommandArchive::_internal_undo_user_interface_identifier_to_restore() const {
  return undo_user_interface_identifier_to_restore_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveFlowInfoCommandArchive::undo_user_interface_identifier_to_restore() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveFlowInfoCommandArchive.undo_user_interface_identifier_to_restore)
  return _internal_undo_user_interface_identifier_to_restore();
}
inline void RemoveFlowInfoCommandArchive::_internal_set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  undo_user_interface_identifier_to_restore_ = value;
}
inline void RemoveFlowInfoCommandArchive::set_undo_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_user_interface_identifier_to_restore(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveFlowInfoCommandArchive.undo_user_interface_identifier_to_restore)
}

// optional uint32 undo_next_user_interface_identifier_to_restore = 5;
inline bool RemoveFlowInfoCommandArchive::_internal_has_undo_next_user_interface_identifier_to_restore() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoveFlowInfoCommandArchive::has_undo_next_user_interface_identifier_to_restore() const {
  return _internal_has_undo_next_user_interface_identifier_to_restore();
}
inline void RemoveFlowInfoCommandArchive::clear_undo_next_user_interface_identifier_to_restore() {
  undo_next_user_interface_identifier_to_restore_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveFlowInfoCommandArchive::_internal_undo_next_user_interface_identifier_to_restore() const {
  return undo_next_user_interface_identifier_to_restore_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveFlowInfoCommandArchive::undo_next_user_interface_identifier_to_restore() const {
  // @@protoc_insertion_point(field_get:TSWP.RemoveFlowInfoCommandArchive.undo_next_user_interface_identifier_to_restore)
  return _internal_undo_next_user_interface_identifier_to_restore();
}
inline void RemoveFlowInfoCommandArchive::_internal_set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  undo_next_user_interface_identifier_to_restore_ = value;
}
inline void RemoveFlowInfoCommandArchive::set_undo_next_user_interface_identifier_to_restore(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_next_user_interface_identifier_to_restore(value);
  // @@protoc_insertion_point(field_set:TSWP.RemoveFlowInfoCommandArchive.undo_next_user_interface_identifier_to_restore)
}

// -------------------------------------------------------------------

// TextCommentReplyCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool TextCommentReplyCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TextCommentReplyCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TextCommentReplyCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TextCommentReplyCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.super)
  return _internal_super();
}
inline void TextCommentReplyCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommentReplyCommandArchive.super)
}
inline ::TSK::CommandArchive* TextCommentReplyCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TextCommentReplyCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommentReplyCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TextCommentReplyCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* TextCommentReplyCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommentReplyCommandArchive.super)
  return _msg;
}
inline void TextCommentReplyCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommentReplyCommandArchive.super)
}

// optional .TSP.UUIDPath storage_uuid_path = 2;
inline bool TextCommentReplyCommandArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool TextCommentReplyCommandArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& TextCommentReplyCommandArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& TextCommentReplyCommandArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void TextCommentReplyCommandArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommentReplyCommandArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* TextCommentReplyCommandArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* TextCommentReplyCommandArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommentReplyCommandArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* TextCommentReplyCommandArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* TextCommentReplyCommandArchive::mutable_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommentReplyCommandArchive.storage_uuid_path)
  return _msg;
}
inline void TextCommentReplyCommandArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path));
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommentReplyCommandArchive.storage_uuid_path)
}

// optional string annotation_uuid = 3;
inline bool TextCommentReplyCommandArchive::_internal_has_annotation_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextCommentReplyCommandArchive::has_annotation_uuid() const {
  return _internal_has_annotation_uuid();
}
inline void TextCommentReplyCommandArchive::clear_annotation_uuid() {
  annotation_uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextCommentReplyCommandArchive::annotation_uuid() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.annotation_uuid)
  return _internal_annotation_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextCommentReplyCommandArchive::set_annotation_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.TextCommentReplyCommandArchive.annotation_uuid)
}
inline std::string* TextCommentReplyCommandArchive::mutable_annotation_uuid() {
  std::string* _s = _internal_mutable_annotation_uuid();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommentReplyCommandArchive.annotation_uuid)
  return _s;
}
inline const std::string& TextCommentReplyCommandArchive::_internal_annotation_uuid() const {
  return annotation_uuid_.Get();
}
inline void TextCommentReplyCommandArchive::_internal_set_annotation_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TextCommentReplyCommandArchive::_internal_mutable_annotation_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return annotation_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TextCommentReplyCommandArchive::release_annotation_uuid() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommentReplyCommandArchive.annotation_uuid)
  if (!_internal_has_annotation_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return annotation_uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TextCommentReplyCommandArchive::set_allocated_annotation_uuid(std::string* annotation_uuid) {
  if (annotation_uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  annotation_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommentReplyCommandArchive.annotation_uuid)
}

// optional .TSP.Reference forward_comment = 4;
inline bool TextCommentReplyCommandArchive::_internal_has_forward_comment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || forward_comment_ != nullptr);
  return value;
}
inline bool TextCommentReplyCommandArchive::has_forward_comment() const {
  return _internal_has_forward_comment();
}
inline const ::TSP::Reference& TextCommentReplyCommandArchive::_internal_forward_comment() const {
  const ::TSP::Reference* p = forward_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextCommentReplyCommandArchive::forward_comment() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.forward_comment)
  return _internal_forward_comment();
}
inline void TextCommentReplyCommandArchive::unsafe_arena_set_allocated_forward_comment(
    ::TSP::Reference* forward_comment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_comment_);
  }
  forward_comment_ = forward_comment;
  if (forward_comment) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommentReplyCommandArchive.forward_comment)
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::release_forward_comment() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = forward_comment_;
  forward_comment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::unsafe_arena_release_forward_comment() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommentReplyCommandArchive.forward_comment)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = forward_comment_;
  forward_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::_internal_mutable_forward_comment() {
  _has_bits_[0] |= 0x00000008u;
  if (forward_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    forward_comment_ = p;
  }
  return forward_comment_;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::mutable_forward_comment() {
  ::TSP::Reference* _msg = _internal_mutable_forward_comment();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommentReplyCommandArchive.forward_comment)
  return _msg;
}
inline void TextCommentReplyCommandArchive::set_allocated_forward_comment(::TSP::Reference* forward_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_comment_);
  }
  if (forward_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_comment));
    if (message_arena != submessage_arena) {
      forward_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_comment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  forward_comment_ = forward_comment;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommentReplyCommandArchive.forward_comment)
}

// optional .TSP.Reference inverse_comment = 5;
inline bool TextCommentReplyCommandArchive::_internal_has_inverse_comment() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || inverse_comment_ != nullptr);
  return value;
}
inline bool TextCommentReplyCommandArchive::has_inverse_comment() const {
  return _internal_has_inverse_comment();
}
inline const ::TSP::Reference& TextCommentReplyCommandArchive::_internal_inverse_comment() const {
  const ::TSP::Reference* p = inverse_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TextCommentReplyCommandArchive::inverse_comment() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.inverse_comment)
  return _internal_inverse_comment();
}
inline void TextCommentReplyCommandArchive::unsafe_arena_set_allocated_inverse_comment(
    ::TSP::Reference* inverse_comment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_comment_);
  }
  inverse_comment_ = inverse_comment;
  if (inverse_comment) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.TextCommentReplyCommandArchive.inverse_comment)
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::release_inverse_comment() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = inverse_comment_;
  inverse_comment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::unsafe_arena_release_inverse_comment() {
  // @@protoc_insertion_point(field_release:TSWP.TextCommentReplyCommandArchive.inverse_comment)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = inverse_comment_;
  inverse_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::_internal_mutable_inverse_comment() {
  _has_bits_[0] |= 0x00000010u;
  if (inverse_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    inverse_comment_ = p;
  }
  return inverse_comment_;
}
inline ::TSP::Reference* TextCommentReplyCommandArchive::mutable_inverse_comment() {
  ::TSP::Reference* _msg = _internal_mutable_inverse_comment();
  // @@protoc_insertion_point(field_mutable:TSWP.TextCommentReplyCommandArchive.inverse_comment)
  return _msg;
}
inline void TextCommentReplyCommandArchive::set_allocated_inverse_comment(::TSP::Reference* inverse_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_comment_);
  }
  if (inverse_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_comment));
    if (message_arena != submessage_arena) {
      inverse_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_comment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  inverse_comment_ = inverse_comment;
  // @@protoc_insertion_point(field_set_allocated:TSWP.TextCommentReplyCommandArchive.inverse_comment)
}

// optional .TSD.CommentCommandVariant forward_variant = 6;
inline bool TextCommentReplyCommandArchive::_internal_has_forward_variant() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TextCommentReplyCommandArchive::has_forward_variant() const {
  return _internal_has_forward_variant();
}
inline void TextCommentReplyCommandArchive::clear_forward_variant() {
  forward_variant_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::CommentCommandVariant TextCommentReplyCommandArchive::_internal_forward_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(forward_variant_);
}
inline ::TSD::CommentCommandVariant TextCommentReplyCommandArchive::forward_variant() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.forward_variant)
  return _internal_forward_variant();
}
inline void TextCommentReplyCommandArchive::_internal_set_forward_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  forward_variant_ = value;
}
inline void TextCommentReplyCommandArchive::set_forward_variant(::TSD::CommentCommandVariant value) {
  _internal_set_forward_variant(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommentReplyCommandArchive.forward_variant)
}

// optional .TSD.CommentCommandVariant inverse_variant = 7;
inline bool TextCommentReplyCommandArchive::_internal_has_inverse_variant() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TextCommentReplyCommandArchive::has_inverse_variant() const {
  return _internal_has_inverse_variant();
}
inline void TextCommentReplyCommandArchive::clear_inverse_variant() {
  inverse_variant_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSD::CommentCommandVariant TextCommentReplyCommandArchive::_internal_inverse_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(inverse_variant_);
}
inline ::TSD::CommentCommandVariant TextCommentReplyCommandArchive::inverse_variant() const {
  // @@protoc_insertion_point(field_get:TSWP.TextCommentReplyCommandArchive.inverse_variant)
  return _internal_inverse_variant();
}
inline void TextCommentReplyCommandArchive::_internal_set_inverse_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  inverse_variant_ = value;
}
inline void TextCommentReplyCommandArchive::set_inverse_variant(::TSD::CommentCommandVariant value) {
  _internal_set_inverse_variant(value);
  // @@protoc_insertion_point(field_set:TSWP.TextCommentReplyCommandArchive.inverse_variant)
}

// -------------------------------------------------------------------

// ContainedObjectsCommandArchive_AddBehaviorArgs

// repeated .TSK.AddIdOperationArgs args_list = 1;
inline int ContainedObjectsCommandArchive_AddBehaviorArgs::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainedObjectsCommandArchive_AddBehaviorArgs::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::AddIdOperationArgs* ContainedObjectsCommandArchive_AddBehaviorArgs::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
ContainedObjectsCommandArchive_AddBehaviorArgs::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list)
  return &args_list_;
}
inline const ::TSK::AddIdOperationArgs& ContainedObjectsCommandArchive_AddBehaviorArgs::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& ContainedObjectsCommandArchive_AddBehaviorArgs::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list)
  return _internal_args_list(index);
}
inline ::TSK::AddIdOperationArgs* ContainedObjectsCommandArchive_AddBehaviorArgs::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* ContainedObjectsCommandArchive_AddBehaviorArgs::add_args_list() {
  ::TSK::AddIdOperationArgs* _add = _internal_add_args_list();
  // @@protoc_insertion_point(field_add:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
ContainedObjectsCommandArchive_AddBehaviorArgs::args_list() const {
  // @@protoc_insertion_point(field_list:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list)
  return args_list_;
}

// -------------------------------------------------------------------

// ContainedObjectsCommandArchive_RemoveBehaviorArgs

// repeated .TSK.RemoveIdOperationArgs args_list = 1;
inline int ContainedObjectsCommandArchive_RemoveBehaviorArgs::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainedObjectsCommandArchive_RemoveBehaviorArgs::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* ContainedObjectsCommandArchive_RemoveBehaviorArgs::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
ContainedObjectsCommandArchive_RemoveBehaviorArgs::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list)
  return &args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& ContainedObjectsCommandArchive_RemoveBehaviorArgs::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& ContainedObjectsCommandArchive_RemoveBehaviorArgs::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* ContainedObjectsCommandArchive_RemoveBehaviorArgs::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* ContainedObjectsCommandArchive_RemoveBehaviorArgs::add_args_list() {
  ::TSK::RemoveIdOperationArgs* _add = _internal_add_args_list();
  // @@protoc_insertion_point(field_add:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
ContainedObjectsCommandArchive_RemoveBehaviorArgs::args_list() const {
  // @@protoc_insertion_point(field_list:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list)
  return args_list_;
}

// -------------------------------------------------------------------

// ContainedObjectsCommandArchive_RearrangeBehaviorArgs

// repeated .TSK.RearrangeIdOperationArgs args_list = 1;
inline int ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainedObjectsCommandArchive_RearrangeBehaviorArgs::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* ContainedObjectsCommandArchive_RearrangeBehaviorArgs::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
ContainedObjectsCommandArchive_RearrangeBehaviorArgs::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list)
  return &args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& ContainedObjectsCommandArchive_RearrangeBehaviorArgs::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* ContainedObjectsCommandArchive_RearrangeBehaviorArgs::add_args_list() {
  ::TSK::RearrangeIdOperationArgs* _add = _internal_add_args_list();
  // @@protoc_insertion_point(field_add:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
ContainedObjectsCommandArchive_RearrangeBehaviorArgs::args_list() const {
  // @@protoc_insertion_point(field_list:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list)
  return args_list_;
}

// -------------------------------------------------------------------

// ContainedObjectsCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainedObjectsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainedObjectsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainedObjectsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.super)
  return _internal_super();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainedObjectsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ContainedObjectsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainedObjectsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ContainedObjectsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.super)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.super)
}

// required .TSP.Reference target = 2;
inline bool ContainedObjectsCommandArchive::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_target() const {
  return _internal_has_target();
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::_internal_target() const {
  const ::TSP::Reference* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::target() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.target)
  return _internal_target();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_target(
    ::TSP::Reference* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.target)
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::release_target() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.target)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000004u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::mutable_target() {
  ::TSP::Reference* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.target)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_target(::TSP::Reference* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.target)
}

// repeated .TSP.Reference objects = 3;
inline int ContainedObjectsCommandArchive::_internal_objects_size() const {
  return objects_.size();
}
inline int ContainedObjectsCommandArchive::objects_size() const {
  return _internal_objects_size();
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainedObjectsCommandArchive::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ContainedObjectsCommandArchive.objects)
  return &objects_;
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::objects(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.objects)
  return _internal_objects(index);
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::_internal_add_objects() {
  return objects_.Add();
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::add_objects() {
  ::TSP::Reference* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:TSWP.ContainedObjectsCommandArchive.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainedObjectsCommandArchive::objects() const {
  // @@protoc_insertion_point(field_list:TSWP.ContainedObjectsCommandArchive.objects)
  return objects_;
}

// optional .TSP.Reference undo_object_for_commit = 4;
inline bool ContainedObjectsCommandArchive::_internal_has_undo_object_for_commit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_for_commit_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_undo_object_for_commit() const {
  return _internal_has_undo_object_for_commit();
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::_internal_undo_object_for_commit() const {
  const ::TSP::Reference* p = undo_object_for_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::undo_object_for_commit() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.undo_object_for_commit)
  return _internal_undo_object_for_commit();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_undo_object_for_commit(
    ::TSP::Reference* undo_object_for_commit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_commit_);
  }
  undo_object_for_commit_ = undo_object_for_commit;
  if (undo_object_for_commit) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.undo_object_for_commit)
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::release_undo_object_for_commit() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_object_for_commit_;
  undo_object_for_commit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::unsafe_arena_release_undo_object_for_commit() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.undo_object_for_commit)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_object_for_commit_;
  undo_object_for_commit_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::_internal_mutable_undo_object_for_commit() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_object_for_commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_object_for_commit_ = p;
  }
  return undo_object_for_commit_;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::mutable_undo_object_for_commit() {
  ::TSP::Reference* _msg = _internal_mutable_undo_object_for_commit();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.undo_object_for_commit)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_undo_object_for_commit(::TSP::Reference* undo_object_for_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_commit_);
  }
  if (undo_object_for_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_commit));
    if (message_arena != submessage_arena) {
      undo_object_for_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object_for_commit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_object_for_commit_ = undo_object_for_commit;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.undo_object_for_commit)
}

// optional .TSP.Reference undo_object_for_make_inverse = 5;
inline bool ContainedObjectsCommandArchive::_internal_has_undo_object_for_make_inverse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_for_make_inverse_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_undo_object_for_make_inverse() const {
  return _internal_has_undo_object_for_make_inverse();
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::_internal_undo_object_for_make_inverse() const {
  const ::TSP::Reference* p = undo_object_for_make_inverse_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainedObjectsCommandArchive::undo_object_for_make_inverse() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse)
  return _internal_undo_object_for_make_inverse();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_undo_object_for_make_inverse(
    ::TSP::Reference* undo_object_for_make_inverse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_make_inverse_);
  }
  undo_object_for_make_inverse_ = undo_object_for_make_inverse;
  if (undo_object_for_make_inverse) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse)
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::release_undo_object_for_make_inverse() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_object_for_make_inverse_;
  undo_object_for_make_inverse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::unsafe_arena_release_undo_object_for_make_inverse() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_object_for_make_inverse_;
  undo_object_for_make_inverse_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::_internal_mutable_undo_object_for_make_inverse() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_object_for_make_inverse_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_object_for_make_inverse_ = p;
  }
  return undo_object_for_make_inverse_;
}
inline ::TSP::Reference* ContainedObjectsCommandArchive::mutable_undo_object_for_make_inverse() {
  ::TSP::Reference* _msg = _internal_mutable_undo_object_for_make_inverse();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_undo_object_for_make_inverse(::TSP::Reference* undo_object_for_make_inverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_make_inverse_);
  }
  if (undo_object_for_make_inverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_for_make_inverse));
    if (message_arena != submessage_arena) {
      undo_object_for_make_inverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object_for_make_inverse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_object_for_make_inverse_ = undo_object_for_make_inverse;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse)
}

// optional .TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs add_behavior_args = 6;
inline bool ContainedObjectsCommandArchive::_internal_has_add_behavior_args() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || add_behavior_args_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_add_behavior_args() const {
  return _internal_has_add_behavior_args();
}
inline void ContainedObjectsCommandArchive::clear_add_behavior_args() {
  if (add_behavior_args_ != nullptr) add_behavior_args_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs& ContainedObjectsCommandArchive::_internal_add_behavior_args() const {
  const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* p = add_behavior_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs&>(
      ::TSWP::_ContainedObjectsCommandArchive_AddBehaviorArgs_default_instance_);
}
inline const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs& ContainedObjectsCommandArchive::add_behavior_args() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.add_behavior_args)
  return _internal_add_behavior_args();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_add_behavior_args(
    ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* add_behavior_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_behavior_args_);
  }
  add_behavior_args_ = add_behavior_args;
  if (add_behavior_args) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.add_behavior_args)
}
inline ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* ContainedObjectsCommandArchive::release_add_behavior_args() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* temp = add_behavior_args_;
  add_behavior_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* ContainedObjectsCommandArchive::unsafe_arena_release_add_behavior_args() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.add_behavior_args)
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* temp = add_behavior_args_;
  add_behavior_args_ = nullptr;
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* ContainedObjectsCommandArchive::_internal_mutable_add_behavior_args() {
  _has_bits_[0] |= 0x00000020u;
  if (add_behavior_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs>(GetArenaForAllocation());
    add_behavior_args_ = p;
  }
  return add_behavior_args_;
}
inline ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* ContainedObjectsCommandArchive::mutable_add_behavior_args() {
  ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* _msg = _internal_mutable_add_behavior_args();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.add_behavior_args)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_add_behavior_args(::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* add_behavior_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_behavior_args_;
  }
  if (add_behavior_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs>::GetOwningArena(add_behavior_args);
    if (message_arena != submessage_arena) {
      add_behavior_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_behavior_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  add_behavior_args_ = add_behavior_args;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.add_behavior_args)
}

// optional .TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs remove_behavior_args = 7;
inline bool ContainedObjectsCommandArchive::_internal_has_remove_behavior_args() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || remove_behavior_args_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_remove_behavior_args() const {
  return _internal_has_remove_behavior_args();
}
inline void ContainedObjectsCommandArchive::clear_remove_behavior_args() {
  if (remove_behavior_args_ != nullptr) remove_behavior_args_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs& ContainedObjectsCommandArchive::_internal_remove_behavior_args() const {
  const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* p = remove_behavior_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs&>(
      ::TSWP::_ContainedObjectsCommandArchive_RemoveBehaviorArgs_default_instance_);
}
inline const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs& ContainedObjectsCommandArchive::remove_behavior_args() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.remove_behavior_args)
  return _internal_remove_behavior_args();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_remove_behavior_args(
    ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* remove_behavior_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_behavior_args_);
  }
  remove_behavior_args_ = remove_behavior_args;
  if (remove_behavior_args) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.remove_behavior_args)
}
inline ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* ContainedObjectsCommandArchive::release_remove_behavior_args() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* temp = remove_behavior_args_;
  remove_behavior_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* ContainedObjectsCommandArchive::unsafe_arena_release_remove_behavior_args() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.remove_behavior_args)
  _has_bits_[0] &= ~0x00000040u;
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* temp = remove_behavior_args_;
  remove_behavior_args_ = nullptr;
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* ContainedObjectsCommandArchive::_internal_mutable_remove_behavior_args() {
  _has_bits_[0] |= 0x00000040u;
  if (remove_behavior_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs>(GetArenaForAllocation());
    remove_behavior_args_ = p;
  }
  return remove_behavior_args_;
}
inline ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* ContainedObjectsCommandArchive::mutable_remove_behavior_args() {
  ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* _msg = _internal_mutable_remove_behavior_args();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.remove_behavior_args)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_remove_behavior_args(::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* remove_behavior_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remove_behavior_args_;
  }
  if (remove_behavior_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs>::GetOwningArena(remove_behavior_args);
    if (message_arena != submessage_arena) {
      remove_behavior_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_behavior_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  remove_behavior_args_ = remove_behavior_args;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.remove_behavior_args)
}

// optional .TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs rearrange_behavior_args = 8;
inline bool ContainedObjectsCommandArchive::_internal_has_rearrange_behavior_args() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || rearrange_behavior_args_ != nullptr);
  return value;
}
inline bool ContainedObjectsCommandArchive::has_rearrange_behavior_args() const {
  return _internal_has_rearrange_behavior_args();
}
inline void ContainedObjectsCommandArchive::clear_rearrange_behavior_args() {
  if (rearrange_behavior_args_ != nullptr) rearrange_behavior_args_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs& ContainedObjectsCommandArchive::_internal_rearrange_behavior_args() const {
  const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* p = rearrange_behavior_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs&>(
      ::TSWP::_ContainedObjectsCommandArchive_RearrangeBehaviorArgs_default_instance_);
}
inline const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs& ContainedObjectsCommandArchive::rearrange_behavior_args() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args)
  return _internal_rearrange_behavior_args();
}
inline void ContainedObjectsCommandArchive::unsafe_arena_set_allocated_rearrange_behavior_args(
    ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* rearrange_behavior_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rearrange_behavior_args_);
  }
  rearrange_behavior_args_ = rearrange_behavior_args;
  if (rearrange_behavior_args) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args)
}
inline ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* ContainedObjectsCommandArchive::release_rearrange_behavior_args() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* temp = rearrange_behavior_args_;
  rearrange_behavior_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* ContainedObjectsCommandArchive::unsafe_arena_release_rearrange_behavior_args() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args)
  _has_bits_[0] &= ~0x00000080u;
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* temp = rearrange_behavior_args_;
  rearrange_behavior_args_ = nullptr;
  return temp;
}
inline ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* ContainedObjectsCommandArchive::_internal_mutable_rearrange_behavior_args() {
  _has_bits_[0] |= 0x00000080u;
  if (rearrange_behavior_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs>(GetArenaForAllocation());
    rearrange_behavior_args_ = p;
  }
  return rearrange_behavior_args_;
}
inline ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* ContainedObjectsCommandArchive::mutable_rearrange_behavior_args() {
  ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* _msg = _internal_mutable_rearrange_behavior_args();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args)
  return _msg;
}
inline void ContainedObjectsCommandArchive::set_allocated_rearrange_behavior_args(::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* rearrange_behavior_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rearrange_behavior_args_;
  }
  if (rearrange_behavior_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs>::GetOwningArena(rearrange_behavior_args);
    if (message_arena != submessage_arena) {
      rearrange_behavior_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rearrange_behavior_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  rearrange_behavior_args_ = rearrange_behavior_args;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args)
}

// optional string container_name = 9;
inline bool ContainedObjectsCommandArchive::_internal_has_container_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContainedObjectsCommandArchive::has_container_name() const {
  return _internal_has_container_name();
}
inline void ContainedObjectsCommandArchive::clear_container_name() {
  container_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContainedObjectsCommandArchive::container_name() const {
  // @@protoc_insertion_point(field_get:TSWP.ContainedObjectsCommandArchive.container_name)
  return _internal_container_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainedObjectsCommandArchive::set_container_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSWP.ContainedObjectsCommandArchive.container_name)
}
inline std::string* ContainedObjectsCommandArchive::mutable_container_name() {
  std::string* _s = _internal_mutable_container_name();
  // @@protoc_insertion_point(field_mutable:TSWP.ContainedObjectsCommandArchive.container_name)
  return _s;
}
inline const std::string& ContainedObjectsCommandArchive::_internal_container_name() const {
  return container_name_.Get();
}
inline void ContainedObjectsCommandArchive::_internal_set_container_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainedObjectsCommandArchive::_internal_mutable_container_name() {
  _has_bits_[0] |= 0x00000001u;
  return container_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainedObjectsCommandArchive::release_container_name() {
  // @@protoc_insertion_point(field_release:TSWP.ContainedObjectsCommandArchive.container_name)
  if (!_internal_has_container_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return container_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainedObjectsCommandArchive::set_allocated_container_name(std::string* container_name) {
  if (container_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  container_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSWP.ContainedObjectsCommandArchive.container_name)
}

// -------------------------------------------------------------------

// EquationInfoGeometryCommandArchive

// optional .TSD.MediaInfoGeometryCommandArchive super = 1;
inline bool EquationInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool EquationInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::MediaInfoGeometryCommandArchive& EquationInfoGeometryCommandArchive::_internal_super() const {
  const ::TSD::MediaInfoGeometryCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::MediaInfoGeometryCommandArchive&>(
      ::TSD::_MediaInfoGeometryCommandArchive_default_instance_);
}
inline const ::TSD::MediaInfoGeometryCommandArchive& EquationInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.EquationInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void EquationInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::MediaInfoGeometryCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.EquationInfoGeometryCommandArchive.super)
}
inline ::TSD::MediaInfoGeometryCommandArchive* EquationInfoGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::MediaInfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::MediaInfoGeometryCommandArchive* EquationInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.EquationInfoGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::MediaInfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::MediaInfoGeometryCommandArchive* EquationInfoGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::MediaInfoGeometryCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::MediaInfoGeometryCommandArchive* EquationInfoGeometryCommandArchive::mutable_super() {
  ::TSD::MediaInfoGeometryCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.EquationInfoGeometryCommandArchive.super)
  return _msg;
}
inline void EquationInfoGeometryCommandArchive::set_allocated_super(::TSD::MediaInfoGeometryCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.EquationInfoGeometryCommandArchive.super)
}

// -------------------------------------------------------------------

// CharacterStyleChangePropertyCommand_GArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::has_super() const {
  return _internal_has_super();
}
inline void CharacterStyleChangePropertyCommand_GArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StorageActionCommandArchive& CharacterStyleChangePropertyCommand_GArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& CharacterStyleChangePropertyCommand_GArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.super)
  return _internal_super();
}
inline void CharacterStyleChangePropertyCommand_GArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.CharacterStyleChangePropertyCommand_GArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* CharacterStyleChangePropertyCommand_GArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* CharacterStyleChangePropertyCommand_GArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.CharacterStyleChangePropertyCommand_GArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* CharacterStyleChangePropertyCommand_GArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* CharacterStyleChangePropertyCommand_GArchive::mutable_super() {
  ::TSWP::StorageActionCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStyleChangePropertyCommand_GArchive.super)
  return _msg;
}
inline void CharacterStyleChangePropertyCommand_GArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StorageActionCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.CharacterStyleChangePropertyCommand_GArchive.super)
}

// repeated .TSP.Range range_list = 2;
inline int CharacterStyleChangePropertyCommand_GArchive::_internal_range_list_size() const {
  return range_list_.size();
}
inline int CharacterStyleChangePropertyCommand_GArchive::range_list_size() const {
  return _internal_range_list_size();
}
inline ::TSP::Range* CharacterStyleChangePropertyCommand_GArchive::mutable_range_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list)
  return range_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
CharacterStyleChangePropertyCommand_GArchive::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list)
  return &range_list_;
}
inline const ::TSP::Range& CharacterStyleChangePropertyCommand_GArchive::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline const ::TSP::Range& CharacterStyleChangePropertyCommand_GArchive::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list)
  return _internal_range_list(index);
}
inline ::TSP::Range* CharacterStyleChangePropertyCommand_GArchive::_internal_add_range_list() {
  return range_list_.Add();
}
inline ::TSP::Range* CharacterStyleChangePropertyCommand_GArchive::add_range_list() {
  ::TSP::Range* _add = _internal_add_range_list();
  // @@protoc_insertion_point(field_add:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
CharacterStyleChangePropertyCommand_GArchive::range_list() const {
  // @@protoc_insertion_point(field_list:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list)
  return range_list_;
}

// optional bool range_list_undefined = 3;
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_has_range_list_undefined() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::has_range_list_undefined() const {
  return _internal_has_range_list_undefined();
}
inline void CharacterStyleChangePropertyCommand_GArchive::clear_range_list_undefined() {
  range_list_undefined_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_range_list_undefined() const {
  return range_list_undefined_;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::range_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list_undefined)
  return _internal_range_list_undefined();
}
inline void CharacterStyleChangePropertyCommand_GArchive::_internal_set_range_list_undefined(bool value) {
  _has_bits_[0] |= 0x00000002u;
  range_list_undefined_ = value;
}
inline void CharacterStyleChangePropertyCommand_GArchive::set_range_list_undefined(bool value) {
  _internal_set_range_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStyleChangePropertyCommand_GArchive.range_list_undefined)
}

// repeated .TSWPSOS.CharacterStylePropertyChangeSetArchive change_list = 4;
inline int CharacterStyleChangePropertyCommand_GArchive::_internal_change_list_size() const {
  return change_list_.size();
}
inline int CharacterStyleChangePropertyCommand_GArchive::change_list_size() const {
  return _internal_change_list_size();
}
inline ::TSWPSOS::CharacterStylePropertyChangeSetArchive* CharacterStyleChangePropertyCommand_GArchive::mutable_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list)
  return change_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::CharacterStylePropertyChangeSetArchive >*
CharacterStyleChangePropertyCommand_GArchive::mutable_change_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list)
  return &change_list_;
}
inline const ::TSWPSOS::CharacterStylePropertyChangeSetArchive& CharacterStyleChangePropertyCommand_GArchive::_internal_change_list(int index) const {
  return change_list_.Get(index);
}
inline const ::TSWPSOS::CharacterStylePropertyChangeSetArchive& CharacterStyleChangePropertyCommand_GArchive::change_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list)
  return _internal_change_list(index);
}
inline ::TSWPSOS::CharacterStylePropertyChangeSetArchive* CharacterStyleChangePropertyCommand_GArchive::_internal_add_change_list() {
  return change_list_.Add();
}
inline ::TSWPSOS::CharacterStylePropertyChangeSetArchive* CharacterStyleChangePropertyCommand_GArchive::add_change_list() {
  ::TSWPSOS::CharacterStylePropertyChangeSetArchive* _add = _internal_add_change_list();
  // @@protoc_insertion_point(field_add:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::CharacterStylePropertyChangeSetArchive >&
CharacterStyleChangePropertyCommand_GArchive::change_list() const {
  // @@protoc_insertion_point(field_list:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list)
  return change_list_;
}

// optional bool change_list_undefined = 5;
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_has_change_list_undefined() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::has_change_list_undefined() const {
  return _internal_has_change_list_undefined();
}
inline void CharacterStyleChangePropertyCommand_GArchive::clear_change_list_undefined() {
  change_list_undefined_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_change_list_undefined() const {
  return change_list_undefined_;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::change_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list_undefined)
  return _internal_change_list_undefined();
}
inline void CharacterStyleChangePropertyCommand_GArchive::_internal_set_change_list_undefined(bool value) {
  _has_bits_[0] |= 0x00000004u;
  change_list_undefined_ = value;
}
inline void CharacterStyleChangePropertyCommand_GArchive::set_change_list_undefined(bool value) {
  _internal_set_change_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStyleChangePropertyCommand_GArchive.change_list_undefined)
}

// required bool disable_character_style_promotion = 6;
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_has_disable_character_style_promotion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::has_disable_character_style_promotion() const {
  return _internal_has_disable_character_style_promotion();
}
inline void CharacterStyleChangePropertyCommand_GArchive::clear_disable_character_style_promotion() {
  disable_character_style_promotion_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::_internal_disable_character_style_promotion() const {
  return disable_character_style_promotion_;
}
inline bool CharacterStyleChangePropertyCommand_GArchive::disable_character_style_promotion() const {
  // @@protoc_insertion_point(field_get:TSWP.CharacterStyleChangePropertyCommand_GArchive.disable_character_style_promotion)
  return _internal_disable_character_style_promotion();
}
inline void CharacterStyleChangePropertyCommand_GArchive::_internal_set_disable_character_style_promotion(bool value) {
  _has_bits_[0] |= 0x00000008u;
  disable_character_style_promotion_ = value;
}
inline void CharacterStyleChangePropertyCommand_GArchive::set_disable_character_style_promotion(bool value) {
  _internal_set_disable_character_style_promotion(value);
  // @@protoc_insertion_point(field_set:TSWP.CharacterStyleChangePropertyCommand_GArchive.disable_character_style_promotion)
}

// -------------------------------------------------------------------

// ParagraphStyleChangePropertyCommand_GArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool ParagraphStyleChangePropertyCommand_GArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::has_super() const {
  return _internal_has_super();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSWP::StorageActionCommandArchive& ParagraphStyleChangePropertyCommand_GArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& ParagraphStyleChangePropertyCommand_GArchive::super() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleChangePropertyCommand_GArchive.super)
  return _internal_super();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSWP.ParagraphStyleChangePropertyCommand_GArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* ParagraphStyleChangePropertyCommand_GArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* ParagraphStyleChangePropertyCommand_GArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSWP.ParagraphStyleChangePropertyCommand_GArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* ParagraphStyleChangePropertyCommand_GArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* ParagraphStyleChangePropertyCommand_GArchive::mutable_super() {
  ::TSWP::StorageActionCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleChangePropertyCommand_GArchive.super)
  return _msg;
}
inline void ParagraphStyleChangePropertyCommand_GArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSWP::StorageActionCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSWP.ParagraphStyleChangePropertyCommand_GArchive.super)
}

// repeated .TSP.Range range_list = 2;
inline int ParagraphStyleChangePropertyCommand_GArchive::_internal_range_list_size() const {
  return range_list_.size();
}
inline int ParagraphStyleChangePropertyCommand_GArchive::range_list_size() const {
  return _internal_range_list_size();
}
inline ::TSP::Range* ParagraphStyleChangePropertyCommand_GArchive::mutable_range_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list)
  return range_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
ParagraphStyleChangePropertyCommand_GArchive::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list)
  return &range_list_;
}
inline const ::TSP::Range& ParagraphStyleChangePropertyCommand_GArchive::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline const ::TSP::Range& ParagraphStyleChangePropertyCommand_GArchive::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list)
  return _internal_range_list(index);
}
inline ::TSP::Range* ParagraphStyleChangePropertyCommand_GArchive::_internal_add_range_list() {
  return range_list_.Add();
}
inline ::TSP::Range* ParagraphStyleChangePropertyCommand_GArchive::add_range_list() {
  ::TSP::Range* _add = _internal_add_range_list();
  // @@protoc_insertion_point(field_add:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
ParagraphStyleChangePropertyCommand_GArchive::range_list() const {
  // @@protoc_insertion_point(field_list:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list)
  return range_list_;
}

// optional bool range_list_undefined = 3;
inline bool ParagraphStyleChangePropertyCommand_GArchive::_internal_has_range_list_undefined() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::has_range_list_undefined() const {
  return _internal_has_range_list_undefined();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::clear_range_list_undefined() {
  range_list_undefined_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::_internal_range_list_undefined() const {
  return range_list_undefined_;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::range_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list_undefined)
  return _internal_range_list_undefined();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::_internal_set_range_list_undefined(bool value) {
  _has_bits_[0] |= 0x00000002u;
  range_list_undefined_ = value;
}
inline void ParagraphStyleChangePropertyCommand_GArchive::set_range_list_undefined(bool value) {
  _internal_set_range_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStyleChangePropertyCommand_GArchive.range_list_undefined)
}

// repeated .TSWPSOS.ParagraphStylePropertyChangeSetArchive change_list = 4;
inline int ParagraphStyleChangePropertyCommand_GArchive::_internal_change_list_size() const {
  return change_list_.size();
}
inline int ParagraphStyleChangePropertyCommand_GArchive::change_list_size() const {
  return _internal_change_list_size();
}
inline ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* ParagraphStyleChangePropertyCommand_GArchive::mutable_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list)
  return change_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::ParagraphStylePropertyChangeSetArchive >*
ParagraphStyleChangePropertyCommand_GArchive::mutable_change_list() {
  // @@protoc_insertion_point(field_mutable_list:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list)
  return &change_list_;
}
inline const ::TSWPSOS::ParagraphStylePropertyChangeSetArchive& ParagraphStyleChangePropertyCommand_GArchive::_internal_change_list(int index) const {
  return change_list_.Get(index);
}
inline const ::TSWPSOS::ParagraphStylePropertyChangeSetArchive& ParagraphStyleChangePropertyCommand_GArchive::change_list(int index) const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list)
  return _internal_change_list(index);
}
inline ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* ParagraphStyleChangePropertyCommand_GArchive::_internal_add_change_list() {
  return change_list_.Add();
}
inline ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* ParagraphStyleChangePropertyCommand_GArchive::add_change_list() {
  ::TSWPSOS::ParagraphStylePropertyChangeSetArchive* _add = _internal_add_change_list();
  // @@protoc_insertion_point(field_add:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWPSOS::ParagraphStylePropertyChangeSetArchive >&
ParagraphStyleChangePropertyCommand_GArchive::change_list() const {
  // @@protoc_insertion_point(field_list:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list)
  return change_list_;
}

// optional bool change_list_undefined = 5;
inline bool ParagraphStyleChangePropertyCommand_GArchive::_internal_has_change_list_undefined() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::has_change_list_undefined() const {
  return _internal_has_change_list_undefined();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::clear_change_list_undefined() {
  change_list_undefined_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::_internal_change_list_undefined() const {
  return change_list_undefined_;
}
inline bool ParagraphStyleChangePropertyCommand_GArchive::change_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list_undefined)
  return _internal_change_list_undefined();
}
inline void ParagraphStyleChangePropertyCommand_GArchive::_internal_set_change_list_undefined(bool value) {
  _has_bits_[0] |= 0x00000004u;
  change_list_undefined_ = value;
}
inline void ParagraphStyleChangePropertyCommand_GArchive::set_change_list_undefined(bool value) {
  _internal_set_change_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSWP.ParagraphStyleChangePropertyCommand_GArchive.change_list_undefined)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSWP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSWP::TextCommandArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::TextCommandArchive_Kind>() {
  return ::TSWP::TextCommandArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::StorageActionCommandArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::StorageActionCommandArchive_Kind>() {
  return ::TSWP::StorageActionCommandArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::TSWP::UpdateFlowInfoCommandArchive_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::UpdateFlowInfoCommandArchive_Mode>() {
  return ::TSWP::UpdateFlowInfoCommandArchive_Mode_descriptor();
}
template <> struct is_proto_enum< ::TSWP::ObjectPropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSWP::ObjectPropertyType>() {
  return ::TSWP::ObjectPropertyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSWPCommandArchives_2eproto
