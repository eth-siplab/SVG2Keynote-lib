// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCH3DArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCH3DArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCH3DArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCH3DArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCH3DArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCH3DArchives_2eproto;
namespace TSCH {
class Chart3DBaseImageTextureTilingArchive;
struct Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal;
extern Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal _Chart3DBaseImageTextureTilingArchive_default_instance_;
class Chart3DDiffuseMaterialArchive;
struct Chart3DDiffuseMaterialArchiveDefaultTypeInternal;
extern Chart3DDiffuseMaterialArchiveDefaultTypeInternal _Chart3DDiffuseMaterialArchive_default_instance_;
class Chart3DDirectionalLightArchive;
struct Chart3DDirectionalLightArchiveDefaultTypeInternal;
extern Chart3DDirectionalLightArchiveDefaultTypeInternal _Chart3DDirectionalLightArchive_default_instance_;
class Chart3DEmissiveMaterialArchive;
struct Chart3DEmissiveMaterialArchiveDefaultTypeInternal;
extern Chart3DEmissiveMaterialArchiveDefaultTypeInternal _Chart3DEmissiveMaterialArchive_default_instance_;
class Chart3DEnvironmentMaterialArchive;
struct Chart3DEnvironmentMaterialArchiveDefaultTypeInternal;
extern Chart3DEnvironmentMaterialArchiveDefaultTypeInternal _Chart3DEnvironmentMaterialArchive_default_instance_;
class Chart3DEnvironmentPackageArchive;
struct Chart3DEnvironmentPackageArchiveDefaultTypeInternal;
extern Chart3DEnvironmentPackageArchiveDefaultTypeInternal _Chart3DEnvironmentPackageArchive_default_instance_;
class Chart3DFillArchive;
struct Chart3DFillArchiveDefaultTypeInternal;
extern Chart3DFillArchiveDefaultTypeInternal _Chart3DFillArchive_default_instance_;
class Chart3DFixedFunctionLightingModelArchive;
struct Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal;
extern Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal _Chart3DFixedFunctionLightingModelArchive_default_instance_;
class Chart3DImageTextureTilingArchive;
struct Chart3DImageTextureTilingArchiveDefaultTypeInternal;
extern Chart3DImageTextureTilingArchiveDefaultTypeInternal _Chart3DImageTextureTilingArchive_default_instance_;
class Chart3DLightArchive;
struct Chart3DLightArchiveDefaultTypeInternal;
extern Chart3DLightArchiveDefaultTypeInternal _Chart3DLightArchive_default_instance_;
class Chart3DLightingModelArchive;
struct Chart3DLightingModelArchiveDefaultTypeInternal;
extern Chart3DLightingModelArchiveDefaultTypeInternal _Chart3DLightingModelArchive_default_instance_;
class Chart3DLightingPackageArchive;
struct Chart3DLightingPackageArchiveDefaultTypeInternal;
extern Chart3DLightingPackageArchiveDefaultTypeInternal _Chart3DLightingPackageArchive_default_instance_;
class Chart3DModulateMaterialArchive;
struct Chart3DModulateMaterialArchiveDefaultTypeInternal;
extern Chart3DModulateMaterialArchiveDefaultTypeInternal _Chart3DModulateMaterialArchive_default_instance_;
class Chart3DPhongLightingModelArchive;
struct Chart3DPhongLightingModelArchiveDefaultTypeInternal;
extern Chart3DPhongLightingModelArchiveDefaultTypeInternal _Chart3DPhongLightingModelArchive_default_instance_;
class Chart3DPhongMaterialPackageArchive;
struct Chart3DPhongMaterialPackageArchiveDefaultTypeInternal;
extern Chart3DPhongMaterialPackageArchiveDefaultTypeInternal _Chart3DPhongMaterialPackageArchive_default_instance_;
class Chart3DPointLightArchive;
struct Chart3DPointLightArchiveDefaultTypeInternal;
extern Chart3DPointLightArchiveDefaultTypeInternal _Chart3DPointLightArchive_default_instance_;
class Chart3DShininessMaterialArchive;
struct Chart3DShininessMaterialArchiveDefaultTypeInternal;
extern Chart3DShininessMaterialArchiveDefaultTypeInternal _Chart3DShininessMaterialArchive_default_instance_;
class Chart3DSpecularMaterialArchive;
struct Chart3DSpecularMaterialArchiveDefaultTypeInternal;
extern Chart3DSpecularMaterialArchiveDefaultTypeInternal _Chart3DSpecularMaterialArchive_default_instance_;
class Chart3DSpotLightArchive;
struct Chart3DSpotLightArchiveDefaultTypeInternal;
extern Chart3DSpotLightArchiveDefaultTypeInternal _Chart3DSpotLightArchive_default_instance_;
class Chart3DTSPImageDataTextureArchive;
struct Chart3DTSPImageDataTextureArchiveDefaultTypeInternal;
extern Chart3DTSPImageDataTextureArchiveDefaultTypeInternal _Chart3DTSPImageDataTextureArchive_default_instance_;
class Chart3DTexturesMaterialArchive;
struct Chart3DTexturesMaterialArchiveDefaultTypeInternal;
extern Chart3DTexturesMaterialArchiveDefaultTypeInternal _Chart3DTexturesMaterialArchive_default_instance_;
class Chart3DVectorArchive;
struct Chart3DVectorArchiveDefaultTypeInternal;
extern Chart3DVectorArchiveDefaultTypeInternal _Chart3DVectorArchive_default_instance_;
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::Chart3DBaseImageTextureTilingArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DBaseImageTextureTilingArchive>(Arena*);
template<> ::TSCH::Chart3DDiffuseMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DDiffuseMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DDirectionalLightArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DDirectionalLightArchive>(Arena*);
template<> ::TSCH::Chart3DEmissiveMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DEmissiveMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DEnvironmentMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DEnvironmentMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DEnvironmentPackageArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DEnvironmentPackageArchive>(Arena*);
template<> ::TSCH::Chart3DFillArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DFillArchive>(Arena*);
template<> ::TSCH::Chart3DFixedFunctionLightingModelArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DFixedFunctionLightingModelArchive>(Arena*);
template<> ::TSCH::Chart3DImageTextureTilingArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DImageTextureTilingArchive>(Arena*);
template<> ::TSCH::Chart3DLightArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DLightArchive>(Arena*);
template<> ::TSCH::Chart3DLightingModelArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DLightingModelArchive>(Arena*);
template<> ::TSCH::Chart3DLightingPackageArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(Arena*);
template<> ::TSCH::Chart3DModulateMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DModulateMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DPhongLightingModelArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DPhongLightingModelArchive>(Arena*);
template<> ::TSCH::Chart3DPhongMaterialPackageArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DPhongMaterialPackageArchive>(Arena*);
template<> ::TSCH::Chart3DPointLightArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DPointLightArchive>(Arena*);
template<> ::TSCH::Chart3DShininessMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DShininessMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DSpecularMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DSpecularMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DSpotLightArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DSpotLightArchive>(Arena*);
template<> ::TSCH::Chart3DTSPImageDataTextureArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DTSPImageDataTextureArchive>(Arena*);
template<> ::TSCH::Chart3DTexturesMaterialArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(Arena*);
template<> ::TSCH::Chart3DVectorArchive* Arena::CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {

enum TextureTilingMode : int {
  textureTilingModeNone = 0,
  textureTilingModeTallest = 1
};
bool TextureTilingMode_IsValid(int value);
constexpr TextureTilingMode TextureTilingMode_MIN = textureTilingModeNone;
constexpr TextureTilingMode TextureTilingMode_MAX = textureTilingModeTallest;
constexpr int TextureTilingMode_ARRAYSIZE = TextureTilingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingMode_descriptor();
template<typename T>
inline const std::string& TextureTilingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingMode_descriptor(), enum_t_value);
}
inline bool TextureTilingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingMode>(
    TextureTilingMode_descriptor(), name, value);
}
enum TextureTilingFace : int {
  textureTilingFaceAll = 0,
  textureTilingFaceTopAndBottom = 1,
  textureTilingFaceSide = 2
};
bool TextureTilingFace_IsValid(int value);
constexpr TextureTilingFace TextureTilingFace_MIN = textureTilingFaceAll;
constexpr TextureTilingFace TextureTilingFace_MAX = textureTilingFaceSide;
constexpr int TextureTilingFace_ARRAYSIZE = TextureTilingFace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingFace_descriptor();
template<typename T>
inline const std::string& TextureTilingFace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingFace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingFace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingFace_descriptor(), enum_t_value);
}
inline bool TextureTilingFace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingFace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingFace>(
    TextureTilingFace_descriptor(), name, value);
}
enum TextureTilingWrap : int {
  textureTilingWrapProjected = 0,
  textureTilingWrapFaceWrap = 1
};
bool TextureTilingWrap_IsValid(int value);
constexpr TextureTilingWrap TextureTilingWrap_MIN = textureTilingWrapProjected;
constexpr TextureTilingWrap TextureTilingWrap_MAX = textureTilingWrapFaceWrap;
constexpr int TextureTilingWrap_ARRAYSIZE = TextureTilingWrap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingWrap_descriptor();
template<typename T>
inline const std::string& TextureTilingWrap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingWrap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingWrap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingWrap_descriptor(), enum_t_value);
}
inline bool TextureTilingWrap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingWrap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingWrap>(
    TextureTilingWrap_descriptor(), name, value);
}
enum TextureTilingXPosition : int {
  textureTilingXPositionLeft = 0,
  textureTilingXPositionCenter = 1,
  textureTilingXPositionRight = 2
};
bool TextureTilingXPosition_IsValid(int value);
constexpr TextureTilingXPosition TextureTilingXPosition_MIN = textureTilingXPositionLeft;
constexpr TextureTilingXPosition TextureTilingXPosition_MAX = textureTilingXPositionRight;
constexpr int TextureTilingXPosition_ARRAYSIZE = TextureTilingXPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingXPosition_descriptor();
template<typename T>
inline const std::string& TextureTilingXPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingXPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingXPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingXPosition_descriptor(), enum_t_value);
}
inline bool TextureTilingXPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingXPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingXPosition>(
    TextureTilingXPosition_descriptor(), name, value);
}
enum TextureTilingYPosition : int {
  textureTilingYPositionTop = 0,
  textureTilingYPositionMiddle = 1,
  textureTilingYPositionBottom = 2
};
bool TextureTilingYPosition_IsValid(int value);
constexpr TextureTilingYPosition TextureTilingYPosition_MIN = textureTilingYPositionTop;
constexpr TextureTilingYPosition TextureTilingYPosition_MAX = textureTilingYPositionBottom;
constexpr int TextureTilingYPosition_ARRAYSIZE = TextureTilingYPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingYPosition_descriptor();
template<typename T>
inline const std::string& TextureTilingYPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingYPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingYPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingYPosition_descriptor(), enum_t_value);
}
inline bool TextureTilingYPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingYPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingYPosition>(
    TextureTilingYPosition_descriptor(), name, value);
}
enum TextureTilingContinuity : int {
  textureTilingContinuityNone = 0,
  textureTilingContinuityGlobal = 1,
  textureTilingContinuitySeries = 2,
  textureTilingContinuityJittered = 3
};
bool TextureTilingContinuity_IsValid(int value);
constexpr TextureTilingContinuity TextureTilingContinuity_MIN = textureTilingContinuityNone;
constexpr TextureTilingContinuity TextureTilingContinuity_MAX = textureTilingContinuityJittered;
constexpr int TextureTilingContinuity_ARRAYSIZE = TextureTilingContinuity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingContinuity_descriptor();
template<typename T>
inline const std::string& TextureTilingContinuity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureTilingContinuity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureTilingContinuity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureTilingContinuity_descriptor(), enum_t_value);
}
inline bool TextureTilingContinuity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextureTilingContinuity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureTilingContinuity>(
    TextureTilingContinuity_descriptor(), name, value);
}
enum FillPropertyType : int {
  fillPropertyTypeUndefined = 0,
  fillPropertyTypeArea = 1,
  fillPropertyTypeBar = 2,
  fillPropertyTypeColumn = 3,
  fillPropertyTypeLine = 4,
  fillPropertyTypePie = 5
};
bool FillPropertyType_IsValid(int value);
constexpr FillPropertyType FillPropertyType_MIN = fillPropertyTypeUndefined;
constexpr FillPropertyType FillPropertyType_MAX = fillPropertyTypePie;
constexpr int FillPropertyType_ARRAYSIZE = FillPropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillPropertyType_descriptor();
template<typename T>
inline const std::string& FillPropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FillPropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FillPropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FillPropertyType_descriptor(), enum_t_value);
}
inline bool FillPropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FillPropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FillPropertyType>(
    FillPropertyType_descriptor(), name, value);
}
// ===================================================================

class Chart3DEnvironmentPackageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DEnvironmentPackageArchive) */ {
 public:
  inline Chart3DEnvironmentPackageArchive() : Chart3DEnvironmentPackageArchive(nullptr) {}
  ~Chart3DEnvironmentPackageArchive() override;
  explicit constexpr Chart3DEnvironmentPackageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DEnvironmentPackageArchive(const Chart3DEnvironmentPackageArchive& from);
  Chart3DEnvironmentPackageArchive(Chart3DEnvironmentPackageArchive&& from) noexcept
    : Chart3DEnvironmentPackageArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DEnvironmentPackageArchive& operator=(const Chart3DEnvironmentPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DEnvironmentPackageArchive& operator=(Chart3DEnvironmentPackageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DEnvironmentPackageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DEnvironmentPackageArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DEnvironmentPackageArchive*>(
               &_Chart3DEnvironmentPackageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chart3DEnvironmentPackageArchive& a, Chart3DEnvironmentPackageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DEnvironmentPackageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DEnvironmentPackageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DEnvironmentPackageArchive* New() const final {
    return CreateMaybeMessage<Chart3DEnvironmentPackageArchive>(nullptr);
  }

  Chart3DEnvironmentPackageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DEnvironmentPackageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DEnvironmentPackageArchive& from);
  void MergeFrom(const Chart3DEnvironmentPackageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DEnvironmentPackageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DEnvironmentPackageArchive";
  }
  protected:
  explicit Chart3DEnvironmentPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::TSCH::Chart3DEnvironmentMaterialArchive* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >*
      mutable_materials();
  private:
  const ::TSCH::Chart3DEnvironmentMaterialArchive& _internal_materials(int index) const;
  ::TSCH::Chart3DEnvironmentMaterialArchive* _internal_add_materials();
  public:
  const ::TSCH::Chart3DEnvironmentMaterialArchive& materials(int index) const;
  ::TSCH::Chart3DEnvironmentMaterialArchive* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >&
      materials() const;

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEnvironmentPackageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive > materials_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DFillArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DFillArchive) */ {
 public:
  inline Chart3DFillArchive() : Chart3DFillArchive(nullptr) {}
  ~Chart3DFillArchive() override;
  explicit constexpr Chart3DFillArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DFillArchive(const Chart3DFillArchive& from);
  Chart3DFillArchive(Chart3DFillArchive&& from) noexcept
    : Chart3DFillArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DFillArchive& operator=(const Chart3DFillArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DFillArchive& operator=(Chart3DFillArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DFillArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DFillArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DFillArchive*>(
               &_Chart3DFillArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chart3DFillArchive& a, Chart3DFillArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DFillArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DFillArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DFillArchive* New() const final {
    return CreateMaybeMessage<Chart3DFillArchive>(nullptr);
  }

  Chart3DFillArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DFillArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DFillArchive& from);
  void MergeFrom(const Chart3DFillArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DFillArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DFillArchive";
  }
  protected:
  explicit Chart3DFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesetIdFieldNumber = 2,
    kLightingmodelFieldNumber = 1,
    kFillTypeFieldNumber = 3,
    kSeriesIndexFieldNumber = 4,
  };
  // optional string textureset_id = 2;
  bool has_textureset_id() const;
  private:
  bool _internal_has_textureset_id() const;
  public:
  void clear_textureset_id();
  const std::string& textureset_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textureset_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textureset_id();
  std::string* release_textureset_id();
  void set_allocated_textureset_id(std::string* textureset_id);
  private:
  const std::string& _internal_textureset_id() const;
  void _internal_set_textureset_id(const std::string& value);
  std::string* _internal_mutable_textureset_id();
  public:

  // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
  bool has_lightingmodel() const;
  private:
  bool _internal_has_lightingmodel() const;
  public:
  void clear_lightingmodel();
  const ::TSCH::Chart3DLightingModelArchive& lightingmodel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingModelArchive* release_lightingmodel();
  ::TSCH::Chart3DLightingModelArchive* mutable_lightingmodel();
  void set_allocated_lightingmodel(::TSCH::Chart3DLightingModelArchive* lightingmodel);
  private:
  const ::TSCH::Chart3DLightingModelArchive& _internal_lightingmodel() const;
  ::TSCH::Chart3DLightingModelArchive* _internal_mutable_lightingmodel();
  public:
  void unsafe_arena_set_allocated_lightingmodel(
      ::TSCH::Chart3DLightingModelArchive* lightingmodel);
  ::TSCH::Chart3DLightingModelArchive* unsafe_arena_release_lightingmodel();

  // optional .TSCH.FillPropertyType fill_type = 3;
  bool has_fill_type() const;
  private:
  bool _internal_has_fill_type() const;
  public:
  void clear_fill_type();
  ::TSCH::FillPropertyType fill_type() const;
  void set_fill_type(::TSCH::FillPropertyType value);
  private:
  ::TSCH::FillPropertyType _internal_fill_type() const;
  void _internal_set_fill_type(::TSCH::FillPropertyType value);
  public:

  // optional uint32 series_index = 4;
  bool has_series_index() const;
  private:
  bool _internal_has_series_index() const;
  public:
  void clear_series_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_index() const;
  void set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_index() const;
  void _internal_set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DFillArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textureset_id_;
  ::TSCH::Chart3DLightingModelArchive* lightingmodel_;
  int fill_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_index_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DPointLightArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DPointLightArchive) */ {
 public:
  inline Chart3DPointLightArchive() : Chart3DPointLightArchive(nullptr) {}
  ~Chart3DPointLightArchive() override;
  explicit constexpr Chart3DPointLightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DPointLightArchive(const Chart3DPointLightArchive& from);
  Chart3DPointLightArchive(Chart3DPointLightArchive&& from) noexcept
    : Chart3DPointLightArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DPointLightArchive& operator=(const Chart3DPointLightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DPointLightArchive& operator=(Chart3DPointLightArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DPointLightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DPointLightArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DPointLightArchive*>(
               &_Chart3DPointLightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chart3DPointLightArchive& a, Chart3DPointLightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DPointLightArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DPointLightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DPointLightArchive* New() const final {
    return CreateMaybeMessage<Chart3DPointLightArchive>(nullptr);
  }

  Chart3DPointLightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DPointLightArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DPointLightArchive& from);
  void MergeFrom(const Chart3DPointLightArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DPointLightArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DPointLightArchive";
  }
  protected:
  explicit Chart3DPointLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // required .TSCH.Chart3DVectorArchive position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TSCH::Chart3DVectorArchive& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_position();
  ::TSCH::Chart3DVectorArchive* mutable_position();
  void set_allocated_position(::TSCH::Chart3DVectorArchive* position);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_position() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TSCH::Chart3DVectorArchive* position);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPointLightArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DVectorArchive* position_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DDirectionalLightArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DDirectionalLightArchive) */ {
 public:
  inline Chart3DDirectionalLightArchive() : Chart3DDirectionalLightArchive(nullptr) {}
  ~Chart3DDirectionalLightArchive() override;
  explicit constexpr Chart3DDirectionalLightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DDirectionalLightArchive(const Chart3DDirectionalLightArchive& from);
  Chart3DDirectionalLightArchive(Chart3DDirectionalLightArchive&& from) noexcept
    : Chart3DDirectionalLightArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DDirectionalLightArchive& operator=(const Chart3DDirectionalLightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DDirectionalLightArchive& operator=(Chart3DDirectionalLightArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DDirectionalLightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DDirectionalLightArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DDirectionalLightArchive*>(
               &_Chart3DDirectionalLightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chart3DDirectionalLightArchive& a, Chart3DDirectionalLightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DDirectionalLightArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DDirectionalLightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DDirectionalLightArchive* New() const final {
    return CreateMaybeMessage<Chart3DDirectionalLightArchive>(nullptr);
  }

  Chart3DDirectionalLightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DDirectionalLightArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DDirectionalLightArchive& from);
  void MergeFrom(const Chart3DDirectionalLightArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DDirectionalLightArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DDirectionalLightArchive";
  }
  protected:
  explicit Chart3DDirectionalLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
  };
  // required .TSCH.Chart3DVectorArchive direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::TSCH::Chart3DVectorArchive& direction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_direction();
  ::TSCH::Chart3DVectorArchive* mutable_direction();
  void set_allocated_direction(::TSCH::Chart3DVectorArchive* direction);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_direction() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::TSCH::Chart3DVectorArchive* direction);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_direction();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DDirectionalLightArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DVectorArchive* direction_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DSpotLightArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DSpotLightArchive) */ {
 public:
  inline Chart3DSpotLightArchive() : Chart3DSpotLightArchive(nullptr) {}
  ~Chart3DSpotLightArchive() override;
  explicit constexpr Chart3DSpotLightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DSpotLightArchive(const Chart3DSpotLightArchive& from);
  Chart3DSpotLightArchive(Chart3DSpotLightArchive&& from) noexcept
    : Chart3DSpotLightArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DSpotLightArchive& operator=(const Chart3DSpotLightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DSpotLightArchive& operator=(Chart3DSpotLightArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DSpotLightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DSpotLightArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DSpotLightArchive*>(
               &_Chart3DSpotLightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Chart3DSpotLightArchive& a, Chart3DSpotLightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DSpotLightArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DSpotLightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DSpotLightArchive* New() const final {
    return CreateMaybeMessage<Chart3DSpotLightArchive>(nullptr);
  }

  Chart3DSpotLightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DSpotLightArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DSpotLightArchive& from);
  void MergeFrom(const Chart3DSpotLightArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DSpotLightArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DSpotLightArchive";
  }
  protected:
  explicit Chart3DSpotLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kCutoffFieldNumber = 3,
    kDropoffFieldNumber = 4,
  };
  // required .TSCH.Chart3DVectorArchive position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TSCH::Chart3DVectorArchive& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_position();
  ::TSCH::Chart3DVectorArchive* mutable_position();
  void set_allocated_position(::TSCH::Chart3DVectorArchive* position);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_position() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TSCH::Chart3DVectorArchive* position);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_position();

  // required .TSCH.Chart3DVectorArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::TSCH::Chart3DVectorArchive& direction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_direction();
  ::TSCH::Chart3DVectorArchive* mutable_direction();
  void set_allocated_direction(::TSCH::Chart3DVectorArchive* direction);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_direction() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::TSCH::Chart3DVectorArchive* direction);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_direction();

  // required float cutoff = 3;
  bool has_cutoff() const;
  private:
  bool _internal_has_cutoff() const;
  public:
  void clear_cutoff();
  float cutoff() const;
  void set_cutoff(float value);
  private:
  float _internal_cutoff() const;
  void _internal_set_cutoff(float value);
  public:

  // required float dropoff = 4;
  bool has_dropoff() const;
  private:
  bool _internal_has_dropoff() const;
  public:
  void clear_dropoff();
  float dropoff() const;
  void set_dropoff(float value);
  private:
  float _internal_dropoff() const;
  void _internal_set_dropoff(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DSpotLightArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DVectorArchive* position_;
  ::TSCH::Chart3DVectorArchive* direction_;
  float cutoff_;
  float dropoff_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DLightArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DLightArchive) */ {
 public:
  inline Chart3DLightArchive() : Chart3DLightArchive(nullptr) {}
  ~Chart3DLightArchive() override;
  explicit constexpr Chart3DLightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DLightArchive(const Chart3DLightArchive& from);
  Chart3DLightArchive(Chart3DLightArchive&& from) noexcept
    : Chart3DLightArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DLightArchive& operator=(const Chart3DLightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DLightArchive& operator=(Chart3DLightArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DLightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DLightArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DLightArchive*>(
               &_Chart3DLightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Chart3DLightArchive& a, Chart3DLightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DLightArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DLightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DLightArchive* New() const final {
    return CreateMaybeMessage<Chart3DLightArchive>(nullptr);
  }

  Chart3DLightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DLightArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DLightArchive& from);
  void MergeFrom(const Chart3DLightArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DLightArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DLightArchive";
  }
  protected:
  explicit Chart3DLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAmbientColorFieldNumber = 2,
    kDiffuseColorFieldNumber = 3,
    kSpecularColorFieldNumber = 4,
    kAttenuationFieldNumber = 6,
    kPointLightFieldNumber = 9,
    kDirectionalLightFieldNumber = 10,
    kSpotLightFieldNumber = 11,
    kIntensityFieldNumber = 5,
    kCoordinateSpaceFieldNumber = 7,
    kEnabledFieldNumber = 8,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .TSCH.Chart3DVectorArchive ambient_color = 2;
  bool has_ambient_color() const;
  private:
  bool _internal_has_ambient_color() const;
  public:
  void clear_ambient_color();
  const ::TSCH::Chart3DVectorArchive& ambient_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_ambient_color();
  ::TSCH::Chart3DVectorArchive* mutable_ambient_color();
  void set_allocated_ambient_color(::TSCH::Chart3DVectorArchive* ambient_color);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_ambient_color() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_ambient_color();
  public:
  void unsafe_arena_set_allocated_ambient_color(
      ::TSCH::Chart3DVectorArchive* ambient_color);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_ambient_color();

  // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
  bool has_diffuse_color() const;
  private:
  bool _internal_has_diffuse_color() const;
  public:
  void clear_diffuse_color();
  const ::TSCH::Chart3DVectorArchive& diffuse_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_diffuse_color();
  ::TSCH::Chart3DVectorArchive* mutable_diffuse_color();
  void set_allocated_diffuse_color(::TSCH::Chart3DVectorArchive* diffuse_color);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_diffuse_color() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_diffuse_color();
  public:
  void unsafe_arena_set_allocated_diffuse_color(
      ::TSCH::Chart3DVectorArchive* diffuse_color);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_diffuse_color();

  // required .TSCH.Chart3DVectorArchive specular_color = 4;
  bool has_specular_color() const;
  private:
  bool _internal_has_specular_color() const;
  public:
  void clear_specular_color();
  const ::TSCH::Chart3DVectorArchive& specular_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_specular_color();
  ::TSCH::Chart3DVectorArchive* mutable_specular_color();
  void set_allocated_specular_color(::TSCH::Chart3DVectorArchive* specular_color);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_specular_color() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_specular_color();
  public:
  void unsafe_arena_set_allocated_specular_color(
      ::TSCH::Chart3DVectorArchive* specular_color);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_specular_color();

  // required .TSCH.Chart3DVectorArchive attenuation = 6;
  bool has_attenuation() const;
  private:
  bool _internal_has_attenuation() const;
  public:
  void clear_attenuation();
  const ::TSCH::Chart3DVectorArchive& attenuation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_attenuation();
  ::TSCH::Chart3DVectorArchive* mutable_attenuation();
  void set_allocated_attenuation(::TSCH::Chart3DVectorArchive* attenuation);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_attenuation() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_attenuation();
  public:
  void unsafe_arena_set_allocated_attenuation(
      ::TSCH::Chart3DVectorArchive* attenuation);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_attenuation();

  // optional .TSCH.Chart3DPointLightArchive point_light = 9;
  bool has_point_light() const;
  private:
  bool _internal_has_point_light() const;
  public:
  void clear_point_light();
  const ::TSCH::Chart3DPointLightArchive& point_light() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DPointLightArchive* release_point_light();
  ::TSCH::Chart3DPointLightArchive* mutable_point_light();
  void set_allocated_point_light(::TSCH::Chart3DPointLightArchive* point_light);
  private:
  const ::TSCH::Chart3DPointLightArchive& _internal_point_light() const;
  ::TSCH::Chart3DPointLightArchive* _internal_mutable_point_light();
  public:
  void unsafe_arena_set_allocated_point_light(
      ::TSCH::Chart3DPointLightArchive* point_light);
  ::TSCH::Chart3DPointLightArchive* unsafe_arena_release_point_light();

  // optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
  bool has_directional_light() const;
  private:
  bool _internal_has_directional_light() const;
  public:
  void clear_directional_light();
  const ::TSCH::Chart3DDirectionalLightArchive& directional_light() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DDirectionalLightArchive* release_directional_light();
  ::TSCH::Chart3DDirectionalLightArchive* mutable_directional_light();
  void set_allocated_directional_light(::TSCH::Chart3DDirectionalLightArchive* directional_light);
  private:
  const ::TSCH::Chart3DDirectionalLightArchive& _internal_directional_light() const;
  ::TSCH::Chart3DDirectionalLightArchive* _internal_mutable_directional_light();
  public:
  void unsafe_arena_set_allocated_directional_light(
      ::TSCH::Chart3DDirectionalLightArchive* directional_light);
  ::TSCH::Chart3DDirectionalLightArchive* unsafe_arena_release_directional_light();

  // optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
  bool has_spot_light() const;
  private:
  bool _internal_has_spot_light() const;
  public:
  void clear_spot_light();
  const ::TSCH::Chart3DSpotLightArchive& spot_light() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DSpotLightArchive* release_spot_light();
  ::TSCH::Chart3DSpotLightArchive* mutable_spot_light();
  void set_allocated_spot_light(::TSCH::Chart3DSpotLightArchive* spot_light);
  private:
  const ::TSCH::Chart3DSpotLightArchive& _internal_spot_light() const;
  ::TSCH::Chart3DSpotLightArchive* _internal_mutable_spot_light();
  public:
  void unsafe_arena_set_allocated_spot_light(
      ::TSCH::Chart3DSpotLightArchive* spot_light);
  ::TSCH::Chart3DSpotLightArchive* unsafe_arena_release_spot_light();

  // required float intensity = 5;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // required uint32 coordinate_space = 7;
  bool has_coordinate_space() const;
  private:
  bool _internal_has_coordinate_space() const;
  public:
  void clear_coordinate_space();
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinate_space() const;
  void set_coordinate_space(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coordinate_space() const;
  void _internal_set_coordinate_space(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool enabled = 8;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSCH::Chart3DVectorArchive* ambient_color_;
  ::TSCH::Chart3DVectorArchive* diffuse_color_;
  ::TSCH::Chart3DVectorArchive* specular_color_;
  ::TSCH::Chart3DVectorArchive* attenuation_;
  ::TSCH::Chart3DPointLightArchive* point_light_;
  ::TSCH::Chart3DDirectionalLightArchive* directional_light_;
  ::TSCH::Chart3DSpotLightArchive* spot_light_;
  float intensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinate_space_;
  bool enabled_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DLightingModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DLightingModelArchive) */ {
 public:
  inline Chart3DLightingModelArchive() : Chart3DLightingModelArchive(nullptr) {}
  ~Chart3DLightingModelArchive() override;
  explicit constexpr Chart3DLightingModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DLightingModelArchive(const Chart3DLightingModelArchive& from);
  Chart3DLightingModelArchive(Chart3DLightingModelArchive&& from) noexcept
    : Chart3DLightingModelArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DLightingModelArchive& operator=(const Chart3DLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DLightingModelArchive& operator=(Chart3DLightingModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DLightingModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DLightingModelArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DLightingModelArchive*>(
               &_Chart3DLightingModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Chart3DLightingModelArchive& a, Chart3DLightingModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DLightingModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DLightingModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DLightingModelArchive* New() const final {
    return CreateMaybeMessage<Chart3DLightingModelArchive>(nullptr);
  }

  Chart3DLightingModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DLightingModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DLightingModelArchive& from);
  void MergeFrom(const Chart3DLightingModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DLightingModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DLightingModelArchive";
  }
  protected:
  explicit Chart3DLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhongFieldNumber = 1,
    kFixedFunctionFieldNumber = 2,
    kEnvironmentFieldNumber = 3,
  };
  // optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
  bool has_phong() const;
  private:
  bool _internal_has_phong() const;
  public:
  void clear_phong();
  const ::TSCH::Chart3DPhongLightingModelArchive& phong() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DPhongLightingModelArchive* release_phong();
  ::TSCH::Chart3DPhongLightingModelArchive* mutable_phong();
  void set_allocated_phong(::TSCH::Chart3DPhongLightingModelArchive* phong);
  private:
  const ::TSCH::Chart3DPhongLightingModelArchive& _internal_phong() const;
  ::TSCH::Chart3DPhongLightingModelArchive* _internal_mutable_phong();
  public:
  void unsafe_arena_set_allocated_phong(
      ::TSCH::Chart3DPhongLightingModelArchive* phong);
  ::TSCH::Chart3DPhongLightingModelArchive* unsafe_arena_release_phong();

  // optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
  bool has_fixed_function() const;
  private:
  bool _internal_has_fixed_function() const;
  public:
  void clear_fixed_function();
  const ::TSCH::Chart3DFixedFunctionLightingModelArchive& fixed_function() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DFixedFunctionLightingModelArchive* release_fixed_function();
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* mutable_fixed_function();
  void set_allocated_fixed_function(::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function);
  private:
  const ::TSCH::Chart3DFixedFunctionLightingModelArchive& _internal_fixed_function() const;
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* _internal_mutable_fixed_function();
  public:
  void unsafe_arena_set_allocated_fixed_function(
      ::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function);
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* unsafe_arena_release_fixed_function();

  // optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::TSCH::Chart3DEnvironmentPackageArchive& environment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DEnvironmentPackageArchive* release_environment();
  ::TSCH::Chart3DEnvironmentPackageArchive* mutable_environment();
  void set_allocated_environment(::TSCH::Chart3DEnvironmentPackageArchive* environment);
  private:
  const ::TSCH::Chart3DEnvironmentPackageArchive& _internal_environment() const;
  ::TSCH::Chart3DEnvironmentPackageArchive* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::TSCH::Chart3DEnvironmentPackageArchive* environment);
  ::TSCH::Chart3DEnvironmentPackageArchive* unsafe_arena_release_environment();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightingModelArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DPhongLightingModelArchive* phong_;
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function_;
  ::TSCH::Chart3DEnvironmentPackageArchive* environment_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DLightingPackageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DLightingPackageArchive) */ {
 public:
  inline Chart3DLightingPackageArchive() : Chart3DLightingPackageArchive(nullptr) {}
  ~Chart3DLightingPackageArchive() override;
  explicit constexpr Chart3DLightingPackageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DLightingPackageArchive(const Chart3DLightingPackageArchive& from);
  Chart3DLightingPackageArchive(Chart3DLightingPackageArchive&& from) noexcept
    : Chart3DLightingPackageArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DLightingPackageArchive& operator=(const Chart3DLightingPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DLightingPackageArchive& operator=(Chart3DLightingPackageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DLightingPackageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DLightingPackageArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DLightingPackageArchive*>(
               &_Chart3DLightingPackageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Chart3DLightingPackageArchive& a, Chart3DLightingPackageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DLightingPackageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DLightingPackageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DLightingPackageArchive* New() const final {
    return CreateMaybeMessage<Chart3DLightingPackageArchive>(nullptr);
  }

  Chart3DLightingPackageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DLightingPackageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DLightingPackageArchive& from);
  void MergeFrom(const Chart3DLightingPackageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DLightingPackageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DLightingPackageArchive";
  }
  protected:
  explicit Chart3DLightingPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLightsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DLightArchive lights = 2;
  int lights_size() const;
  private:
  int _internal_lights_size() const;
  public:
  void clear_lights();
  ::TSCH::Chart3DLightArchive* mutable_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DLightArchive >*
      mutable_lights();
  private:
  const ::TSCH::Chart3DLightArchive& _internal_lights(int index) const;
  ::TSCH::Chart3DLightArchive* _internal_add_lights();
  public:
  const ::TSCH::Chart3DLightArchive& lights(int index) const;
  ::TSCH::Chart3DLightArchive* add_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DLightArchive >&
      lights() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DLightingPackageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DLightArchive > lights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DTexturesMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DTexturesMaterialArchive) */ {
 public:
  inline Chart3DTexturesMaterialArchive() : Chart3DTexturesMaterialArchive(nullptr) {}
  ~Chart3DTexturesMaterialArchive() override;
  explicit constexpr Chart3DTexturesMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DTexturesMaterialArchive(const Chart3DTexturesMaterialArchive& from);
  Chart3DTexturesMaterialArchive(Chart3DTexturesMaterialArchive&& from) noexcept
    : Chart3DTexturesMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DTexturesMaterialArchive& operator=(const Chart3DTexturesMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DTexturesMaterialArchive& operator=(Chart3DTexturesMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DTexturesMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DTexturesMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DTexturesMaterialArchive*>(
               &_Chart3DTexturesMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Chart3DTexturesMaterialArchive& a, Chart3DTexturesMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DTexturesMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DTexturesMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DTexturesMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DTexturesMaterialArchive>(nullptr);
  }

  Chart3DTexturesMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DTexturesMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DTexturesMaterialArchive& from);
  void MergeFrom(const Chart3DTexturesMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DTexturesMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DTexturesMaterialArchive";
  }
  protected:
  explicit Chart3DTexturesMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTexturesFieldNumber = 2,
    kColorFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  ::TSCH::Chart3DTSPImageDataTextureArchive* mutable_textures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >*
      mutable_textures();
  private:
  const ::TSCH::Chart3DTSPImageDataTextureArchive& _internal_textures(int index) const;
  ::TSCH::Chart3DTSPImageDataTextureArchive* _internal_add_textures();
  public:
  const ::TSCH::Chart3DTSPImageDataTextureArchive& textures(int index) const;
  ::TSCH::Chart3DTSPImageDataTextureArchive* add_textures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >&
      textures() const;

  // required .TSCH.Chart3DVectorArchive color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSCH::Chart3DVectorArchive& color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_color();
  ::TSCH::Chart3DVectorArchive* mutable_color();
  void set_allocated_color(::TSCH::Chart3DVectorArchive* color);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_color() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSCH::Chart3DVectorArchive* color);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DTexturesMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive > textures_;
  ::TSCH::Chart3DVectorArchive* color_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DEmissiveMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DEmissiveMaterialArchive) */ {
 public:
  inline Chart3DEmissiveMaterialArchive() : Chart3DEmissiveMaterialArchive(nullptr) {}
  ~Chart3DEmissiveMaterialArchive() override;
  explicit constexpr Chart3DEmissiveMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DEmissiveMaterialArchive(const Chart3DEmissiveMaterialArchive& from);
  Chart3DEmissiveMaterialArchive(Chart3DEmissiveMaterialArchive&& from) noexcept
    : Chart3DEmissiveMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DEmissiveMaterialArchive& operator=(const Chart3DEmissiveMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DEmissiveMaterialArchive& operator=(Chart3DEmissiveMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DEmissiveMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DEmissiveMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DEmissiveMaterialArchive*>(
               &_Chart3DEmissiveMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Chart3DEmissiveMaterialArchive& a, Chart3DEmissiveMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DEmissiveMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DEmissiveMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DEmissiveMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DEmissiveMaterialArchive>(nullptr);
  }

  Chart3DEmissiveMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DEmissiveMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DEmissiveMaterialArchive& from);
  void MergeFrom(const Chart3DEmissiveMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DEmissiveMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DEmissiveMaterialArchive";
  }
  protected:
  explicit Chart3DEmissiveMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilingsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEmissiveMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DDiffuseMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DDiffuseMaterialArchive) */ {
 public:
  inline Chart3DDiffuseMaterialArchive() : Chart3DDiffuseMaterialArchive(nullptr) {}
  ~Chart3DDiffuseMaterialArchive() override;
  explicit constexpr Chart3DDiffuseMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DDiffuseMaterialArchive(const Chart3DDiffuseMaterialArchive& from);
  Chart3DDiffuseMaterialArchive(Chart3DDiffuseMaterialArchive&& from) noexcept
    : Chart3DDiffuseMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DDiffuseMaterialArchive& operator=(const Chart3DDiffuseMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DDiffuseMaterialArchive& operator=(Chart3DDiffuseMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DDiffuseMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DDiffuseMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DDiffuseMaterialArchive*>(
               &_Chart3DDiffuseMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Chart3DDiffuseMaterialArchive& a, Chart3DDiffuseMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DDiffuseMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DDiffuseMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DDiffuseMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DDiffuseMaterialArchive>(nullptr);
  }

  Chart3DDiffuseMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DDiffuseMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DDiffuseMaterialArchive& from);
  void MergeFrom(const Chart3DDiffuseMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DDiffuseMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DDiffuseMaterialArchive";
  }
  protected:
  explicit Chart3DDiffuseMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilingsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DDiffuseMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DModulateMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DModulateMaterialArchive) */ {
 public:
  inline Chart3DModulateMaterialArchive() : Chart3DModulateMaterialArchive(nullptr) {}
  ~Chart3DModulateMaterialArchive() override;
  explicit constexpr Chart3DModulateMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DModulateMaterialArchive(const Chart3DModulateMaterialArchive& from);
  Chart3DModulateMaterialArchive(Chart3DModulateMaterialArchive&& from) noexcept
    : Chart3DModulateMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DModulateMaterialArchive& operator=(const Chart3DModulateMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DModulateMaterialArchive& operator=(Chart3DModulateMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DModulateMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DModulateMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DModulateMaterialArchive*>(
               &_Chart3DModulateMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Chart3DModulateMaterialArchive& a, Chart3DModulateMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DModulateMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DModulateMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DModulateMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DModulateMaterialArchive>(nullptr);
  }

  Chart3DModulateMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DModulateMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DModulateMaterialArchive& from);
  void MergeFrom(const Chart3DModulateMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DModulateMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DModulateMaterialArchive";
  }
  protected:
  explicit Chart3DModulateMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilingsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DModulateMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DSpecularMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DSpecularMaterialArchive) */ {
 public:
  inline Chart3DSpecularMaterialArchive() : Chart3DSpecularMaterialArchive(nullptr) {}
  ~Chart3DSpecularMaterialArchive() override;
  explicit constexpr Chart3DSpecularMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DSpecularMaterialArchive(const Chart3DSpecularMaterialArchive& from);
  Chart3DSpecularMaterialArchive(Chart3DSpecularMaterialArchive&& from) noexcept
    : Chart3DSpecularMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DSpecularMaterialArchive& operator=(const Chart3DSpecularMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DSpecularMaterialArchive& operator=(Chart3DSpecularMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DSpecularMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DSpecularMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DSpecularMaterialArchive*>(
               &_Chart3DSpecularMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Chart3DSpecularMaterialArchive& a, Chart3DSpecularMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DSpecularMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DSpecularMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DSpecularMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DSpecularMaterialArchive>(nullptr);
  }

  Chart3DSpecularMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DSpecularMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DSpecularMaterialArchive& from);
  void MergeFrom(const Chart3DSpecularMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DSpecularMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DSpecularMaterialArchive";
  }
  protected:
  explicit Chart3DSpecularMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilingsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DSpecularMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DShininessMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DShininessMaterialArchive) */ {
 public:
  inline Chart3DShininessMaterialArchive() : Chart3DShininessMaterialArchive(nullptr) {}
  ~Chart3DShininessMaterialArchive() override;
  explicit constexpr Chart3DShininessMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DShininessMaterialArchive(const Chart3DShininessMaterialArchive& from);
  Chart3DShininessMaterialArchive(Chart3DShininessMaterialArchive&& from) noexcept
    : Chart3DShininessMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DShininessMaterialArchive& operator=(const Chart3DShininessMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DShininessMaterialArchive& operator=(Chart3DShininessMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DShininessMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DShininessMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DShininessMaterialArchive*>(
               &_Chart3DShininessMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Chart3DShininessMaterialArchive& a, Chart3DShininessMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DShininessMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DShininessMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DShininessMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DShininessMaterialArchive>(nullptr);
  }

  Chart3DShininessMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DShininessMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DShininessMaterialArchive& from);
  void MergeFrom(const Chart3DShininessMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DShininessMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DShininessMaterialArchive";
  }
  protected:
  explicit Chart3DShininessMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilingsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DShininessMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DEnvironmentMaterialArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DEnvironmentMaterialArchive) */ {
 public:
  inline Chart3DEnvironmentMaterialArchive() : Chart3DEnvironmentMaterialArchive(nullptr) {}
  ~Chart3DEnvironmentMaterialArchive() override;
  explicit constexpr Chart3DEnvironmentMaterialArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DEnvironmentMaterialArchive(const Chart3DEnvironmentMaterialArchive& from);
  Chart3DEnvironmentMaterialArchive(Chart3DEnvironmentMaterialArchive&& from) noexcept
    : Chart3DEnvironmentMaterialArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DEnvironmentMaterialArchive& operator=(const Chart3DEnvironmentMaterialArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DEnvironmentMaterialArchive& operator=(Chart3DEnvironmentMaterialArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DEnvironmentMaterialArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DEnvironmentMaterialArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DEnvironmentMaterialArchive*>(
               &_Chart3DEnvironmentMaterialArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Chart3DEnvironmentMaterialArchive& a, Chart3DEnvironmentMaterialArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DEnvironmentMaterialArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DEnvironmentMaterialArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DEnvironmentMaterialArchive* New() const final {
    return CreateMaybeMessage<Chart3DEnvironmentMaterialArchive>(nullptr);
  }

  Chart3DEnvironmentMaterialArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DEnvironmentMaterialArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DEnvironmentMaterialArchive& from);
  void MergeFrom(const Chart3DEnvironmentMaterialArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DEnvironmentMaterialArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DEnvironmentMaterialArchive";
  }
  protected:
  explicit Chart3DEnvironmentMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETETilingsFieldNumber = 2,
    kTilingsFieldNumber = 4,
    kSuperFieldNumber = 1,
    kDecalModeFieldNumber = 3,
  };
  // repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
  int obsolete_tilings_size() const;
  private:
  int _internal_obsolete_tilings_size() const;
  public:
  void clear_obsolete_tilings();
  ::TSCH::Chart3DBaseImageTextureTilingArchive* mutable_obsolete_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >*
      mutable_obsolete_tilings();
  private:
  const ::TSCH::Chart3DBaseImageTextureTilingArchive& _internal_obsolete_tilings(int index) const;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* _internal_add_obsolete_tilings();
  public:
  const ::TSCH::Chart3DBaseImageTextureTilingArchive& obsolete_tilings(int index) const;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* add_obsolete_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >&
      obsolete_tilings() const;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
  int tilings_size() const;
  private:
  int _internal_tilings_size() const;
  public:
  void clear_tilings();
  ::TSCH::Chart3DImageTextureTilingArchive* mutable_tilings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
      mutable_tilings();
  private:
  const ::TSCH::Chart3DImageTextureTilingArchive& _internal_tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* _internal_add_tilings();
  public:
  const ::TSCH::Chart3DImageTextureTilingArchive& tilings(int index) const;
  ::TSCH::Chart3DImageTextureTilingArchive* add_tilings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
      tilings() const;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DTexturesMaterialArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DTexturesMaterialArchive* release_super();
  ::TSCH::Chart3DTexturesMaterialArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super);
  private:
  const ::TSCH::Chart3DTexturesMaterialArchive& _internal_super() const;
  ::TSCH::Chart3DTexturesMaterialArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DTexturesMaterialArchive* super);
  ::TSCH::Chart3DTexturesMaterialArchive* unsafe_arena_release_super();

  // optional bool decalMode = 3;
  bool has_decalmode() const;
  private:
  bool _internal_has_decalmode() const;
  public:
  void clear_decalmode();
  bool decalmode() const;
  void set_decalmode(bool value);
  private:
  bool _internal_decalmode() const;
  void _internal_set_decalmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DEnvironmentMaterialArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive > obsolete_tilings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive > tilings_;
  ::TSCH::Chart3DTexturesMaterialArchive* super_;
  bool decalmode_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DFixedFunctionLightingModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DFixedFunctionLightingModelArchive) */ {
 public:
  inline Chart3DFixedFunctionLightingModelArchive() : Chart3DFixedFunctionLightingModelArchive(nullptr) {}
  ~Chart3DFixedFunctionLightingModelArchive() override;
  explicit constexpr Chart3DFixedFunctionLightingModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DFixedFunctionLightingModelArchive(const Chart3DFixedFunctionLightingModelArchive& from);
  Chart3DFixedFunctionLightingModelArchive(Chart3DFixedFunctionLightingModelArchive&& from) noexcept
    : Chart3DFixedFunctionLightingModelArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DFixedFunctionLightingModelArchive& operator=(const Chart3DFixedFunctionLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DFixedFunctionLightingModelArchive& operator=(Chart3DFixedFunctionLightingModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DFixedFunctionLightingModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DFixedFunctionLightingModelArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DFixedFunctionLightingModelArchive*>(
               &_Chart3DFixedFunctionLightingModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Chart3DFixedFunctionLightingModelArchive& a, Chart3DFixedFunctionLightingModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DFixedFunctionLightingModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DFixedFunctionLightingModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DFixedFunctionLightingModelArchive* New() const final {
    return CreateMaybeMessage<Chart3DFixedFunctionLightingModelArchive>(nullptr);
  }

  Chart3DFixedFunctionLightingModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DFixedFunctionLightingModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DFixedFunctionLightingModelArchive& from);
  void MergeFrom(const Chart3DFixedFunctionLightingModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DFixedFunctionLightingModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DFixedFunctionLightingModelArchive";
  }
  protected:
  explicit Chart3DFixedFunctionLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 1,
  };
  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  bool has_materials() const;
  private:
  bool _internal_has_materials() const;
  public:
  void clear_materials();
  const ::TSCH::Chart3DPhongMaterialPackageArchive& materials() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DPhongMaterialPackageArchive* release_materials();
  ::TSCH::Chart3DPhongMaterialPackageArchive* mutable_materials();
  void set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials);
  private:
  const ::TSCH::Chart3DPhongMaterialPackageArchive& _internal_materials() const;
  ::TSCH::Chart3DPhongMaterialPackageArchive* _internal_mutable_materials();
  public:
  void unsafe_arena_set_allocated_materials(
      ::TSCH::Chart3DPhongMaterialPackageArchive* materials);
  ::TSCH::Chart3DPhongMaterialPackageArchive* unsafe_arena_release_materials();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DFixedFunctionLightingModelArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DPhongMaterialPackageArchive* materials_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DPhongLightingModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DPhongLightingModelArchive) */ {
 public:
  inline Chart3DPhongLightingModelArchive() : Chart3DPhongLightingModelArchive(nullptr) {}
  ~Chart3DPhongLightingModelArchive() override;
  explicit constexpr Chart3DPhongLightingModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DPhongLightingModelArchive(const Chart3DPhongLightingModelArchive& from);
  Chart3DPhongLightingModelArchive(Chart3DPhongLightingModelArchive&& from) noexcept
    : Chart3DPhongLightingModelArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DPhongLightingModelArchive& operator=(const Chart3DPhongLightingModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DPhongLightingModelArchive& operator=(Chart3DPhongLightingModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DPhongLightingModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DPhongLightingModelArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DPhongLightingModelArchive*>(
               &_Chart3DPhongLightingModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Chart3DPhongLightingModelArchive& a, Chart3DPhongLightingModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DPhongLightingModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DPhongLightingModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DPhongLightingModelArchive* New() const final {
    return CreateMaybeMessage<Chart3DPhongLightingModelArchive>(nullptr);
  }

  Chart3DPhongLightingModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DPhongLightingModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DPhongLightingModelArchive& from);
  void MergeFrom(const Chart3DPhongLightingModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DPhongLightingModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DPhongLightingModelArchive";
  }
  protected:
  explicit Chart3DPhongLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 1,
  };
  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  bool has_materials() const;
  private:
  bool _internal_has_materials() const;
  public:
  void clear_materials();
  const ::TSCH::Chart3DPhongMaterialPackageArchive& materials() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DPhongMaterialPackageArchive* release_materials();
  ::TSCH::Chart3DPhongMaterialPackageArchive* mutable_materials();
  void set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials);
  private:
  const ::TSCH::Chart3DPhongMaterialPackageArchive& _internal_materials() const;
  ::TSCH::Chart3DPhongMaterialPackageArchive* _internal_mutable_materials();
  public:
  void unsafe_arena_set_allocated_materials(
      ::TSCH::Chart3DPhongMaterialPackageArchive* materials);
  ::TSCH::Chart3DPhongMaterialPackageArchive* unsafe_arena_release_materials();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPhongLightingModelArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DPhongMaterialPackageArchive* materials_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DPhongMaterialPackageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DPhongMaterialPackageArchive) */ {
 public:
  inline Chart3DPhongMaterialPackageArchive() : Chart3DPhongMaterialPackageArchive(nullptr) {}
  ~Chart3DPhongMaterialPackageArchive() override;
  explicit constexpr Chart3DPhongMaterialPackageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DPhongMaterialPackageArchive(const Chart3DPhongMaterialPackageArchive& from);
  Chart3DPhongMaterialPackageArchive(Chart3DPhongMaterialPackageArchive&& from) noexcept
    : Chart3DPhongMaterialPackageArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DPhongMaterialPackageArchive& operator=(const Chart3DPhongMaterialPackageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DPhongMaterialPackageArchive& operator=(Chart3DPhongMaterialPackageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DPhongMaterialPackageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DPhongMaterialPackageArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DPhongMaterialPackageArchive*>(
               &_Chart3DPhongMaterialPackageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Chart3DPhongMaterialPackageArchive& a, Chart3DPhongMaterialPackageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DPhongMaterialPackageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DPhongMaterialPackageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DPhongMaterialPackageArchive* New() const final {
    return CreateMaybeMessage<Chart3DPhongMaterialPackageArchive>(nullptr);
  }

  Chart3DPhongMaterialPackageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DPhongMaterialPackageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DPhongMaterialPackageArchive& from);
  void MergeFrom(const Chart3DPhongMaterialPackageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DPhongMaterialPackageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DPhongMaterialPackageArchive";
  }
  protected:
  explicit Chart3DPhongMaterialPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmissiveFieldNumber = 1,
    kDiffuseFieldNumber = 2,
    kModulateFieldNumber = 3,
    kSpecularFieldNumber = 4,
    kShininessFieldNumber = 5,
  };
  // optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
  bool has_emissive() const;
  private:
  bool _internal_has_emissive() const;
  public:
  void clear_emissive();
  const ::TSCH::Chart3DEmissiveMaterialArchive& emissive() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DEmissiveMaterialArchive* release_emissive();
  ::TSCH::Chart3DEmissiveMaterialArchive* mutable_emissive();
  void set_allocated_emissive(::TSCH::Chart3DEmissiveMaterialArchive* emissive);
  private:
  const ::TSCH::Chart3DEmissiveMaterialArchive& _internal_emissive() const;
  ::TSCH::Chart3DEmissiveMaterialArchive* _internal_mutable_emissive();
  public:
  void unsafe_arena_set_allocated_emissive(
      ::TSCH::Chart3DEmissiveMaterialArchive* emissive);
  ::TSCH::Chart3DEmissiveMaterialArchive* unsafe_arena_release_emissive();

  // optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
  bool has_diffuse() const;
  private:
  bool _internal_has_diffuse() const;
  public:
  void clear_diffuse();
  const ::TSCH::Chart3DDiffuseMaterialArchive& diffuse() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DDiffuseMaterialArchive* release_diffuse();
  ::TSCH::Chart3DDiffuseMaterialArchive* mutable_diffuse();
  void set_allocated_diffuse(::TSCH::Chart3DDiffuseMaterialArchive* diffuse);
  private:
  const ::TSCH::Chart3DDiffuseMaterialArchive& _internal_diffuse() const;
  ::TSCH::Chart3DDiffuseMaterialArchive* _internal_mutable_diffuse();
  public:
  void unsafe_arena_set_allocated_diffuse(
      ::TSCH::Chart3DDiffuseMaterialArchive* diffuse);
  ::TSCH::Chart3DDiffuseMaterialArchive* unsafe_arena_release_diffuse();

  // optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
  bool has_modulate() const;
  private:
  bool _internal_has_modulate() const;
  public:
  void clear_modulate();
  const ::TSCH::Chart3DModulateMaterialArchive& modulate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DModulateMaterialArchive* release_modulate();
  ::TSCH::Chart3DModulateMaterialArchive* mutable_modulate();
  void set_allocated_modulate(::TSCH::Chart3DModulateMaterialArchive* modulate);
  private:
  const ::TSCH::Chart3DModulateMaterialArchive& _internal_modulate() const;
  ::TSCH::Chart3DModulateMaterialArchive* _internal_mutable_modulate();
  public:
  void unsafe_arena_set_allocated_modulate(
      ::TSCH::Chart3DModulateMaterialArchive* modulate);
  ::TSCH::Chart3DModulateMaterialArchive* unsafe_arena_release_modulate();

  // optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
  bool has_specular() const;
  private:
  bool _internal_has_specular() const;
  public:
  void clear_specular();
  const ::TSCH::Chart3DSpecularMaterialArchive& specular() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DSpecularMaterialArchive* release_specular();
  ::TSCH::Chart3DSpecularMaterialArchive* mutable_specular();
  void set_allocated_specular(::TSCH::Chart3DSpecularMaterialArchive* specular);
  private:
  const ::TSCH::Chart3DSpecularMaterialArchive& _internal_specular() const;
  ::TSCH::Chart3DSpecularMaterialArchive* _internal_mutable_specular();
  public:
  void unsafe_arena_set_allocated_specular(
      ::TSCH::Chart3DSpecularMaterialArchive* specular);
  ::TSCH::Chart3DSpecularMaterialArchive* unsafe_arena_release_specular();

  // optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
  bool has_shininess() const;
  private:
  bool _internal_has_shininess() const;
  public:
  void clear_shininess();
  const ::TSCH::Chart3DShininessMaterialArchive& shininess() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DShininessMaterialArchive* release_shininess();
  ::TSCH::Chart3DShininessMaterialArchive* mutable_shininess();
  void set_allocated_shininess(::TSCH::Chart3DShininessMaterialArchive* shininess);
  private:
  const ::TSCH::Chart3DShininessMaterialArchive& _internal_shininess() const;
  ::TSCH::Chart3DShininessMaterialArchive* _internal_mutable_shininess();
  public:
  void unsafe_arena_set_allocated_shininess(
      ::TSCH::Chart3DShininessMaterialArchive* shininess);
  ::TSCH::Chart3DShininessMaterialArchive* unsafe_arena_release_shininess();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DPhongMaterialPackageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DEmissiveMaterialArchive* emissive_;
  ::TSCH::Chart3DDiffuseMaterialArchive* diffuse_;
  ::TSCH::Chart3DModulateMaterialArchive* modulate_;
  ::TSCH::Chart3DSpecularMaterialArchive* specular_;
  ::TSCH::Chart3DShininessMaterialArchive* shininess_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DTSPImageDataTextureArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DTSPImageDataTextureArchive) */ {
 public:
  inline Chart3DTSPImageDataTextureArchive() : Chart3DTSPImageDataTextureArchive(nullptr) {}
  ~Chart3DTSPImageDataTextureArchive() override;
  explicit constexpr Chart3DTSPImageDataTextureArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DTSPImageDataTextureArchive(const Chart3DTSPImageDataTextureArchive& from);
  Chart3DTSPImageDataTextureArchive(Chart3DTSPImageDataTextureArchive&& from) noexcept
    : Chart3DTSPImageDataTextureArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DTSPImageDataTextureArchive& operator=(const Chart3DTSPImageDataTextureArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DTSPImageDataTextureArchive& operator=(Chart3DTSPImageDataTextureArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DTSPImageDataTextureArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DTSPImageDataTextureArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DTSPImageDataTextureArchive*>(
               &_Chart3DTSPImageDataTextureArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Chart3DTSPImageDataTextureArchive& a, Chart3DTSPImageDataTextureArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DTSPImageDataTextureArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DTSPImageDataTextureArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DTSPImageDataTextureArchive* New() const final {
    return CreateMaybeMessage<Chart3DTSPImageDataTextureArchive>(nullptr);
  }

  Chart3DTSPImageDataTextureArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DTSPImageDataTextureArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DTSPImageDataTextureArchive& from);
  void MergeFrom(const Chart3DTSPImageDataTextureArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DTSPImageDataTextureArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DTSPImageDataTextureArchive";
  }
  protected:
  explicit Chart3DTSPImageDataTextureArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseDataFieldNumber = 1,
    kDatabaseMipmapdataFieldNumber = 2,
    kDataFieldNumber = 3,
    kMipmapdataFieldNumber = 4,
  };
  // optional .TSP.Reference database_data = 1;
  bool has_database_data() const;
  private:
  bool _internal_has_database_data() const;
  public:
  void clear_database_data();
  const ::TSP::Reference& database_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_data();
  ::TSP::Reference* mutable_database_data();
  void set_allocated_database_data(::TSP::Reference* database_data);
  private:
  const ::TSP::Reference& _internal_database_data() const;
  ::TSP::Reference* _internal_mutable_database_data();
  public:
  void unsafe_arena_set_allocated_database_data(
      ::TSP::Reference* database_data);
  ::TSP::Reference* unsafe_arena_release_database_data();

  // optional .TSP.Reference database_mipmapdata = 2;
  bool has_database_mipmapdata() const;
  private:
  bool _internal_has_database_mipmapdata() const;
  public:
  void clear_database_mipmapdata();
  const ::TSP::Reference& database_mipmapdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_mipmapdata();
  ::TSP::Reference* mutable_database_mipmapdata();
  void set_allocated_database_mipmapdata(::TSP::Reference* database_mipmapdata);
  private:
  const ::TSP::Reference& _internal_database_mipmapdata() const;
  ::TSP::Reference* _internal_mutable_database_mipmapdata();
  public:
  void unsafe_arena_set_allocated_database_mipmapdata(
      ::TSP::Reference* database_mipmapdata);
  ::TSP::Reference* unsafe_arena_release_database_mipmapdata();

  // optional .TSP.DataReference data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TSP::DataReference& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_data();
  ::TSP::DataReference* mutable_data();
  void set_allocated_data(::TSP::DataReference* data);
  private:
  const ::TSP::DataReference& _internal_data() const;
  ::TSP::DataReference* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TSP::DataReference* data);
  ::TSP::DataReference* unsafe_arena_release_data();

  // optional .TSP.DataReference mipmapdata = 4;
  bool has_mipmapdata() const;
  private:
  bool _internal_has_mipmapdata() const;
  public:
  void clear_mipmapdata();
  const ::TSP::DataReference& mipmapdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_mipmapdata();
  ::TSP::DataReference* mutable_mipmapdata();
  void set_allocated_mipmapdata(::TSP::DataReference* mipmapdata);
  private:
  const ::TSP::DataReference& _internal_mipmapdata() const;
  ::TSP::DataReference* _internal_mutable_mipmapdata();
  public:
  void unsafe_arena_set_allocated_mipmapdata(
      ::TSP::DataReference* mipmapdata);
  ::TSP::DataReference* unsafe_arena_release_mipmapdata();

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DTSPImageDataTextureArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* database_data_;
  ::TSP::Reference* database_mipmapdata_;
  ::TSP::DataReference* data_;
  ::TSP::DataReference* mipmapdata_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DBaseImageTextureTilingArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DBaseImageTextureTilingArchive) */ {
 public:
  inline Chart3DBaseImageTextureTilingArchive() : Chart3DBaseImageTextureTilingArchive(nullptr) {}
  ~Chart3DBaseImageTextureTilingArchive() override;
  explicit constexpr Chart3DBaseImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DBaseImageTextureTilingArchive(const Chart3DBaseImageTextureTilingArchive& from);
  Chart3DBaseImageTextureTilingArchive(Chart3DBaseImageTextureTilingArchive&& from) noexcept
    : Chart3DBaseImageTextureTilingArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DBaseImageTextureTilingArchive& operator=(const Chart3DBaseImageTextureTilingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DBaseImageTextureTilingArchive& operator=(Chart3DBaseImageTextureTilingArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DBaseImageTextureTilingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DBaseImageTextureTilingArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DBaseImageTextureTilingArchive*>(
               &_Chart3DBaseImageTextureTilingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Chart3DBaseImageTextureTilingArchive& a, Chart3DBaseImageTextureTilingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DBaseImageTextureTilingArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DBaseImageTextureTilingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DBaseImageTextureTilingArchive* New() const final {
    return CreateMaybeMessage<Chart3DBaseImageTextureTilingArchive>(nullptr);
  }

  Chart3DBaseImageTextureTilingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DBaseImageTextureTilingArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DBaseImageTextureTilingArchive& from);
  void MergeFrom(const Chart3DBaseImageTextureTilingArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DBaseImageTextureTilingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DBaseImageTextureTilingArchive";
  }
  protected:
  explicit Chart3DBaseImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // optional .TSCH.Chart3DVectorArchive scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::TSCH::Chart3DVectorArchive& scale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_scale();
  ::TSCH::Chart3DVectorArchive* mutable_scale();
  void set_allocated_scale(::TSCH::Chart3DVectorArchive* scale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_scale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::TSCH::Chart3DVectorArchive* scale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_scale();

  // optional float rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DBaseImageTextureTilingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DVectorArchive* scale_;
  float rotation_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DImageTextureTilingArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DImageTextureTilingArchive) */ {
 public:
  inline Chart3DImageTextureTilingArchive() : Chart3DImageTextureTilingArchive(nullptr) {}
  ~Chart3DImageTextureTilingArchive() override;
  explicit constexpr Chart3DImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DImageTextureTilingArchive(const Chart3DImageTextureTilingArchive& from);
  Chart3DImageTextureTilingArchive(Chart3DImageTextureTilingArchive&& from) noexcept
    : Chart3DImageTextureTilingArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DImageTextureTilingArchive& operator=(const Chart3DImageTextureTilingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DImageTextureTilingArchive& operator=(Chart3DImageTextureTilingArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DImageTextureTilingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DImageTextureTilingArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DImageTextureTilingArchive*>(
               &_Chart3DImageTextureTilingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Chart3DImageTextureTilingArchive& a, Chart3DImageTextureTilingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DImageTextureTilingArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DImageTextureTilingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DImageTextureTilingArchive* New() const final {
    return CreateMaybeMessage<Chart3DImageTextureTilingArchive>(nullptr);
  }

  Chart3DImageTextureTilingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DImageTextureTilingArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DImageTextureTilingArchive& from);
  void MergeFrom(const Chart3DImageTextureTilingArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DImageTextureTilingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DImageTextureTilingArchive";
  }
  protected:
  explicit Chart3DImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kModeFieldNumber = 2,
    kWrapFieldNumber = 3,
    kFaceFieldNumber = 4,
    kXpositionFieldNumber = 5,
    kYpositionFieldNumber = 6,
    kScontinuityFieldNumber = 7,
    kTcontinuityFieldNumber = 8,
    kRevealFieldNumber = 9,
  };
  // required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::Chart3DBaseImageTextureTilingArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DBaseImageTextureTilingArchive* release_super();
  ::TSCH::Chart3DBaseImageTextureTilingArchive* mutable_super();
  void set_allocated_super(::TSCH::Chart3DBaseImageTextureTilingArchive* super);
  private:
  const ::TSCH::Chart3DBaseImageTextureTilingArchive& _internal_super() const;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::Chart3DBaseImageTextureTilingArchive* super);
  ::TSCH::Chart3DBaseImageTextureTilingArchive* unsafe_arena_release_super();

  // optional .TSCH.TextureTilingMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::TSCH::TextureTilingMode mode() const;
  void set_mode(::TSCH::TextureTilingMode value);
  private:
  ::TSCH::TextureTilingMode _internal_mode() const;
  void _internal_set_mode(::TSCH::TextureTilingMode value);
  public:

  // optional .TSCH.TextureTilingWrap wrap = 3;
  bool has_wrap() const;
  private:
  bool _internal_has_wrap() const;
  public:
  void clear_wrap();
  ::TSCH::TextureTilingWrap wrap() const;
  void set_wrap(::TSCH::TextureTilingWrap value);
  private:
  ::TSCH::TextureTilingWrap _internal_wrap() const;
  void _internal_set_wrap(::TSCH::TextureTilingWrap value);
  public:

  // optional .TSCH.TextureTilingFace face = 4;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  ::TSCH::TextureTilingFace face() const;
  void set_face(::TSCH::TextureTilingFace value);
  private:
  ::TSCH::TextureTilingFace _internal_face() const;
  void _internal_set_face(::TSCH::TextureTilingFace value);
  public:

  // optional .TSCH.TextureTilingXPosition xposition = 5;
  bool has_xposition() const;
  private:
  bool _internal_has_xposition() const;
  public:
  void clear_xposition();
  ::TSCH::TextureTilingXPosition xposition() const;
  void set_xposition(::TSCH::TextureTilingXPosition value);
  private:
  ::TSCH::TextureTilingXPosition _internal_xposition() const;
  void _internal_set_xposition(::TSCH::TextureTilingXPosition value);
  public:

  // optional .TSCH.TextureTilingYPosition yposition = 6;
  bool has_yposition() const;
  private:
  bool _internal_has_yposition() const;
  public:
  void clear_yposition();
  ::TSCH::TextureTilingYPosition yposition() const;
  void set_yposition(::TSCH::TextureTilingYPosition value);
  private:
  ::TSCH::TextureTilingYPosition _internal_yposition() const;
  void _internal_set_yposition(::TSCH::TextureTilingYPosition value);
  public:

  // optional .TSCH.TextureTilingContinuity scontinuity = 7;
  bool has_scontinuity() const;
  private:
  bool _internal_has_scontinuity() const;
  public:
  void clear_scontinuity();
  ::TSCH::TextureTilingContinuity scontinuity() const;
  void set_scontinuity(::TSCH::TextureTilingContinuity value);
  private:
  ::TSCH::TextureTilingContinuity _internal_scontinuity() const;
  void _internal_set_scontinuity(::TSCH::TextureTilingContinuity value);
  public:

  // optional .TSCH.TextureTilingContinuity tcontinuity = 8;
  bool has_tcontinuity() const;
  private:
  bool _internal_has_tcontinuity() const;
  public:
  void clear_tcontinuity();
  ::TSCH::TextureTilingContinuity tcontinuity() const;
  void set_tcontinuity(::TSCH::TextureTilingContinuity value);
  private:
  ::TSCH::TextureTilingContinuity _internal_tcontinuity() const;
  void _internal_set_tcontinuity(::TSCH::TextureTilingContinuity value);
  public:

  // optional bool reveal = 9;
  bool has_reveal() const;
  private:
  bool _internal_has_reveal() const;
  public:
  void clear_reveal();
  bool reveal() const;
  void set_reveal(bool value);
  private:
  bool _internal_reveal() const;
  void _internal_set_reveal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DImageTextureTilingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* super_;
  int mode_;
  int wrap_;
  int face_;
  int xposition_;
  int yposition_;
  int scontinuity_;
  int tcontinuity_;
  bool reveal_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// -------------------------------------------------------------------

class Chart3DVectorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Chart3DVectorArchive) */ {
 public:
  inline Chart3DVectorArchive() : Chart3DVectorArchive(nullptr) {}
  ~Chart3DVectorArchive() override;
  explicit constexpr Chart3DVectorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chart3DVectorArchive(const Chart3DVectorArchive& from);
  Chart3DVectorArchive(Chart3DVectorArchive&& from) noexcept
    : Chart3DVectorArchive() {
    *this = ::std::move(from);
  }

  inline Chart3DVectorArchive& operator=(const Chart3DVectorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart3DVectorArchive& operator=(Chart3DVectorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart3DVectorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chart3DVectorArchive* internal_default_instance() {
    return reinterpret_cast<const Chart3DVectorArchive*>(
               &_Chart3DVectorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Chart3DVectorArchive& a, Chart3DVectorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Chart3DVectorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart3DVectorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chart3DVectorArchive* New() const final {
    return CreateMaybeMessage<Chart3DVectorArchive>(nullptr);
  }

  Chart3DVectorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chart3DVectorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chart3DVectorArchive& from);
  void MergeFrom(const Chart3DVectorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart3DVectorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Chart3DVectorArchive";
  }
  protected:
  explicit Chart3DVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // required float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Chart3DVectorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct ::TableStruct_TSCH3DArchives_2eproto;
};
// ===================================================================

static const int kFill3DFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::FillArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Chart3DFillArchive >, 11, false >
  fill3d;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chart3DEnvironmentPackageArchive

// repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
inline int Chart3DEnvironmentPackageArchive::_internal_materials_size() const {
  return materials_.size();
}
inline int Chart3DEnvironmentPackageArchive::materials_size() const {
  return _internal_materials_size();
}
inline void Chart3DEnvironmentPackageArchive::clear_materials() {
  materials_.Clear();
}
inline ::TSCH::Chart3DEnvironmentMaterialArchive* Chart3DEnvironmentPackageArchive::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEnvironmentPackageArchive.materials)
  return materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >*
Chart3DEnvironmentPackageArchive::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DEnvironmentPackageArchive.materials)
  return &materials_;
}
inline const ::TSCH::Chart3DEnvironmentMaterialArchive& Chart3DEnvironmentPackageArchive::_internal_materials(int index) const {
  return materials_.Get(index);
}
inline const ::TSCH::Chart3DEnvironmentMaterialArchive& Chart3DEnvironmentPackageArchive::materials(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEnvironmentPackageArchive.materials)
  return _internal_materials(index);
}
inline ::TSCH::Chart3DEnvironmentMaterialArchive* Chart3DEnvironmentPackageArchive::_internal_add_materials() {
  return materials_.Add();
}
inline ::TSCH::Chart3DEnvironmentMaterialArchive* Chart3DEnvironmentPackageArchive::add_materials() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DEnvironmentPackageArchive.materials)
  return _internal_add_materials();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DEnvironmentMaterialArchive >&
Chart3DEnvironmentPackageArchive::materials() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DEnvironmentPackageArchive.materials)
  return materials_;
}

// -------------------------------------------------------------------

// Chart3DFillArchive

// optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
inline bool Chart3DFillArchive::_internal_has_lightingmodel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lightingmodel_ != nullptr);
  return value;
}
inline bool Chart3DFillArchive::has_lightingmodel() const {
  return _internal_has_lightingmodel();
}
inline void Chart3DFillArchive::clear_lightingmodel() {
  if (lightingmodel_ != nullptr) lightingmodel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::Chart3DLightingModelArchive& Chart3DFillArchive::_internal_lightingmodel() const {
  const ::TSCH::Chart3DLightingModelArchive* p = lightingmodel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingModelArchive&>(
      ::TSCH::_Chart3DLightingModelArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingModelArchive& Chart3DFillArchive::lightingmodel() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DFillArchive.lightingmodel)
  return _internal_lightingmodel();
}
inline void Chart3DFillArchive::unsafe_arena_set_allocated_lightingmodel(
    ::TSCH::Chart3DLightingModelArchive* lightingmodel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lightingmodel_);
  }
  lightingmodel_ = lightingmodel;
  if (lightingmodel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DFillArchive.lightingmodel)
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::release_lightingmodel() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingModelArchive* temp = lightingmodel_;
  lightingmodel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::unsafe_arena_release_lightingmodel() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DFillArchive.lightingmodel)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingModelArchive* temp = lightingmodel_;
  lightingmodel_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::_internal_mutable_lightingmodel() {
  _has_bits_[0] |= 0x00000002u;
  if (lightingmodel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingModelArchive>(GetArena());
    lightingmodel_ = p;
  }
  return lightingmodel_;
}
inline ::TSCH::Chart3DLightingModelArchive* Chart3DFillArchive::mutable_lightingmodel() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DFillArchive.lightingmodel)
  return _internal_mutable_lightingmodel();
}
inline void Chart3DFillArchive::set_allocated_lightingmodel(::TSCH::Chart3DLightingModelArchive* lightingmodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lightingmodel_;
  }
  if (lightingmodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lightingmodel);
    if (message_arena != submessage_arena) {
      lightingmodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightingmodel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lightingmodel_ = lightingmodel;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DFillArchive.lightingmodel)
}

// optional string textureset_id = 2;
inline bool Chart3DFillArchive::_internal_has_textureset_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chart3DFillArchive::has_textureset_id() const {
  return _internal_has_textureset_id();
}
inline void Chart3DFillArchive::clear_textureset_id() {
  textureset_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chart3DFillArchive::textureset_id() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DFillArchive.textureset_id)
  return _internal_textureset_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Chart3DFillArchive::set_textureset_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 textureset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.Chart3DFillArchive.textureset_id)
}
inline std::string* Chart3DFillArchive::mutable_textureset_id() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DFillArchive.textureset_id)
  return _internal_mutable_textureset_id();
}
inline const std::string& Chart3DFillArchive::_internal_textureset_id() const {
  return textureset_id_.Get();
}
inline void Chart3DFillArchive::_internal_set_textureset_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  textureset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Chart3DFillArchive::_internal_mutable_textureset_id() {
  _has_bits_[0] |= 0x00000001u;
  return textureset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chart3DFillArchive::release_textureset_id() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DFillArchive.textureset_id)
  if (!_internal_has_textureset_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return textureset_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chart3DFillArchive::set_allocated_textureset_id(std::string* textureset_id) {
  if (textureset_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  textureset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textureset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DFillArchive.textureset_id)
}

// optional .TSCH.FillPropertyType fill_type = 3;
inline bool Chart3DFillArchive::_internal_has_fill_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chart3DFillArchive::has_fill_type() const {
  return _internal_has_fill_type();
}
inline void Chart3DFillArchive::clear_fill_type() {
  fill_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSCH::FillPropertyType Chart3DFillArchive::_internal_fill_type() const {
  return static_cast< ::TSCH::FillPropertyType >(fill_type_);
}
inline ::TSCH::FillPropertyType Chart3DFillArchive::fill_type() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DFillArchive.fill_type)
  return _internal_fill_type();
}
inline void Chart3DFillArchive::_internal_set_fill_type(::TSCH::FillPropertyType value) {
  assert(::TSCH::FillPropertyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  fill_type_ = value;
}
inline void Chart3DFillArchive::set_fill_type(::TSCH::FillPropertyType value) {
  _internal_set_fill_type(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DFillArchive.fill_type)
}

// optional uint32 series_index = 4;
inline bool Chart3DFillArchive::_internal_has_series_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chart3DFillArchive::has_series_index() const {
  return _internal_has_series_index();
}
inline void Chart3DFillArchive::clear_series_index() {
  series_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chart3DFillArchive::_internal_series_index() const {
  return series_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chart3DFillArchive::series_index() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DFillArchive.series_index)
  return _internal_series_index();
}
inline void Chart3DFillArchive::_internal_set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  series_index_ = value;
}
inline void Chart3DFillArchive::set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_index(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DFillArchive.series_index)
}

// -------------------------------------------------------------------

// Chart3DPointLightArchive

// required .TSCH.Chart3DVectorArchive position = 1;
inline bool Chart3DPointLightArchive::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Chart3DPointLightArchive::has_position() const {
  return _internal_has_position();
}
inline void Chart3DPointLightArchive::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DPointLightArchive::_internal_position() const {
  const ::TSCH::Chart3DVectorArchive* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DPointLightArchive::position() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPointLightArchive.position)
  return _internal_position();
}
inline void Chart3DPointLightArchive::unsafe_arena_set_allocated_position(
    ::TSCH::Chart3DVectorArchive* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPointLightArchive.position)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPointLightArchive.position)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DPointLightArchive::mutable_position() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPointLightArchive.position)
  return _internal_mutable_position();
}
inline void Chart3DPointLightArchive::set_allocated_position(::TSCH::Chart3DVectorArchive* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPointLightArchive.position)
}

// -------------------------------------------------------------------

// Chart3DDirectionalLightArchive

// required .TSCH.Chart3DVectorArchive direction = 1;
inline bool Chart3DDirectionalLightArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || direction_ != nullptr);
  return value;
}
inline bool Chart3DDirectionalLightArchive::has_direction() const {
  return _internal_has_direction();
}
inline void Chart3DDirectionalLightArchive::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DDirectionalLightArchive::_internal_direction() const {
  const ::TSCH::Chart3DVectorArchive* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DDirectionalLightArchive::direction() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DDirectionalLightArchive.direction)
  return _internal_direction();
}
inline void Chart3DDirectionalLightArchive::unsafe_arena_set_allocated_direction(
    ::TSCH::Chart3DVectorArchive* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DDirectionalLightArchive.direction)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::release_direction() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DDirectionalLightArchive.direction)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::_internal_mutable_direction() {
  _has_bits_[0] |= 0x00000001u;
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DDirectionalLightArchive::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DDirectionalLightArchive.direction)
  return _internal_mutable_direction();
}
inline void Chart3DDirectionalLightArchive::set_allocated_direction(::TSCH::Chart3DVectorArchive* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DDirectionalLightArchive.direction)
}

// -------------------------------------------------------------------

// Chart3DSpotLightArchive

// required .TSCH.Chart3DVectorArchive position = 1;
inline bool Chart3DSpotLightArchive::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Chart3DSpotLightArchive::has_position() const {
  return _internal_has_position();
}
inline void Chart3DSpotLightArchive::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::_internal_position() const {
  const ::TSCH::Chart3DVectorArchive* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::position() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpotLightArchive.position)
  return _internal_position();
}
inline void Chart3DSpotLightArchive::unsafe_arena_set_allocated_position(
    ::TSCH::Chart3DVectorArchive* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DSpotLightArchive.position)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DSpotLightArchive.position)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::mutable_position() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DSpotLightArchive.position)
  return _internal_mutable_position();
}
inline void Chart3DSpotLightArchive::set_allocated_position(::TSCH::Chart3DVectorArchive* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DSpotLightArchive.position)
}

// required .TSCH.Chart3DVectorArchive direction = 2;
inline bool Chart3DSpotLightArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || direction_ != nullptr);
  return value;
}
inline bool Chart3DSpotLightArchive::has_direction() const {
  return _internal_has_direction();
}
inline void Chart3DSpotLightArchive::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::_internal_direction() const {
  const ::TSCH::Chart3DVectorArchive* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DSpotLightArchive::direction() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpotLightArchive.direction)
  return _internal_direction();
}
inline void Chart3DSpotLightArchive::unsafe_arena_set_allocated_direction(
    ::TSCH::Chart3DVectorArchive* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DSpotLightArchive.direction)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::release_direction() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DSpotLightArchive.direction)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::_internal_mutable_direction() {
  _has_bits_[0] |= 0x00000002u;
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DSpotLightArchive::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DSpotLightArchive.direction)
  return _internal_mutable_direction();
}
inline void Chart3DSpotLightArchive::set_allocated_direction(::TSCH::Chart3DVectorArchive* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DSpotLightArchive.direction)
}

// required float cutoff = 3;
inline bool Chart3DSpotLightArchive::_internal_has_cutoff() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chart3DSpotLightArchive::has_cutoff() const {
  return _internal_has_cutoff();
}
inline void Chart3DSpotLightArchive::clear_cutoff() {
  cutoff_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Chart3DSpotLightArchive::_internal_cutoff() const {
  return cutoff_;
}
inline float Chart3DSpotLightArchive::cutoff() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpotLightArchive.cutoff)
  return _internal_cutoff();
}
inline void Chart3DSpotLightArchive::_internal_set_cutoff(float value) {
  _has_bits_[0] |= 0x00000004u;
  cutoff_ = value;
}
inline void Chart3DSpotLightArchive::set_cutoff(float value) {
  _internal_set_cutoff(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DSpotLightArchive.cutoff)
}

// required float dropoff = 4;
inline bool Chart3DSpotLightArchive::_internal_has_dropoff() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chart3DSpotLightArchive::has_dropoff() const {
  return _internal_has_dropoff();
}
inline void Chart3DSpotLightArchive::clear_dropoff() {
  dropoff_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Chart3DSpotLightArchive::_internal_dropoff() const {
  return dropoff_;
}
inline float Chart3DSpotLightArchive::dropoff() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpotLightArchive.dropoff)
  return _internal_dropoff();
}
inline void Chart3DSpotLightArchive::_internal_set_dropoff(float value) {
  _has_bits_[0] |= 0x00000008u;
  dropoff_ = value;
}
inline void Chart3DSpotLightArchive::set_dropoff(float value) {
  _internal_set_dropoff(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DSpotLightArchive.dropoff)
}

// -------------------------------------------------------------------

// Chart3DLightArchive

// required string name = 1;
inline bool Chart3DLightArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chart3DLightArchive::has_name() const {
  return _internal_has_name();
}
inline void Chart3DLightArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chart3DLightArchive::name() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Chart3DLightArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.Chart3DLightArchive.name)
}
inline std::string* Chart3DLightArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.name)
  return _internal_mutable_name();
}
inline const std::string& Chart3DLightArchive::_internal_name() const {
  return name_.Get();
}
inline void Chart3DLightArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Chart3DLightArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chart3DLightArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chart3DLightArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.name)
}

// required .TSCH.Chart3DVectorArchive ambient_color = 2;
inline bool Chart3DLightArchive::_internal_has_ambient_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ambient_color_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_ambient_color() const {
  return _internal_has_ambient_color();
}
inline void Chart3DLightArchive::clear_ambient_color() {
  if (ambient_color_ != nullptr) ambient_color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::_internal_ambient_color() const {
  const ::TSCH::Chart3DVectorArchive* p = ambient_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::ambient_color() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.ambient_color)
  return _internal_ambient_color();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_ambient_color(
    ::TSCH::Chart3DVectorArchive* ambient_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambient_color_);
  }
  ambient_color_ = ambient_color;
  if (ambient_color) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.ambient_color)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_ambient_color() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = ambient_color_;
  ambient_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::unsafe_arena_release_ambient_color() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.ambient_color)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = ambient_color_;
  ambient_color_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::_internal_mutable_ambient_color() {
  _has_bits_[0] |= 0x00000002u;
  if (ambient_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    ambient_color_ = p;
  }
  return ambient_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_ambient_color() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.ambient_color)
  return _internal_mutable_ambient_color();
}
inline void Chart3DLightArchive::set_allocated_ambient_color(::TSCH::Chart3DVectorArchive* ambient_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ambient_color_;
  }
  if (ambient_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ambient_color);
    if (message_arena != submessage_arena) {
      ambient_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambient_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ambient_color_ = ambient_color;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.ambient_color)
}

// required .TSCH.Chart3DVectorArchive diffuse_color = 3;
inline bool Chart3DLightArchive::_internal_has_diffuse_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || diffuse_color_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_diffuse_color() const {
  return _internal_has_diffuse_color();
}
inline void Chart3DLightArchive::clear_diffuse_color() {
  if (diffuse_color_ != nullptr) diffuse_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::_internal_diffuse_color() const {
  const ::TSCH::Chart3DVectorArchive* p = diffuse_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::diffuse_color() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.diffuse_color)
  return _internal_diffuse_color();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_diffuse_color(
    ::TSCH::Chart3DVectorArchive* diffuse_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffuse_color_);
  }
  diffuse_color_ = diffuse_color;
  if (diffuse_color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.diffuse_color)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_diffuse_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = diffuse_color_;
  diffuse_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::unsafe_arena_release_diffuse_color() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.diffuse_color)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = diffuse_color_;
  diffuse_color_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::_internal_mutable_diffuse_color() {
  _has_bits_[0] |= 0x00000004u;
  if (diffuse_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    diffuse_color_ = p;
  }
  return diffuse_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_diffuse_color() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.diffuse_color)
  return _internal_mutable_diffuse_color();
}
inline void Chart3DLightArchive::set_allocated_diffuse_color(::TSCH::Chart3DVectorArchive* diffuse_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete diffuse_color_;
  }
  if (diffuse_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diffuse_color);
    if (message_arena != submessage_arena) {
      diffuse_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffuse_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  diffuse_color_ = diffuse_color;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.diffuse_color)
}

// required .TSCH.Chart3DVectorArchive specular_color = 4;
inline bool Chart3DLightArchive::_internal_has_specular_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || specular_color_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_specular_color() const {
  return _internal_has_specular_color();
}
inline void Chart3DLightArchive::clear_specular_color() {
  if (specular_color_ != nullptr) specular_color_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::_internal_specular_color() const {
  const ::TSCH::Chart3DVectorArchive* p = specular_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::specular_color() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.specular_color)
  return _internal_specular_color();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_specular_color(
    ::TSCH::Chart3DVectorArchive* specular_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specular_color_);
  }
  specular_color_ = specular_color;
  if (specular_color) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.specular_color)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_specular_color() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = specular_color_;
  specular_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::unsafe_arena_release_specular_color() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.specular_color)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = specular_color_;
  specular_color_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::_internal_mutable_specular_color() {
  _has_bits_[0] |= 0x00000008u;
  if (specular_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    specular_color_ = p;
  }
  return specular_color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_specular_color() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.specular_color)
  return _internal_mutable_specular_color();
}
inline void Chart3DLightArchive::set_allocated_specular_color(::TSCH::Chart3DVectorArchive* specular_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete specular_color_;
  }
  if (specular_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specular_color);
    if (message_arena != submessage_arena) {
      specular_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specular_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  specular_color_ = specular_color;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.specular_color)
}

// required float intensity = 5;
inline bool Chart3DLightArchive::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Chart3DLightArchive::has_intensity() const {
  return _internal_has_intensity();
}
inline void Chart3DLightArchive::clear_intensity() {
  intensity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Chart3DLightArchive::_internal_intensity() const {
  return intensity_;
}
inline float Chart3DLightArchive::intensity() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.intensity)
  return _internal_intensity();
}
inline void Chart3DLightArchive::_internal_set_intensity(float value) {
  _has_bits_[0] |= 0x00000100u;
  intensity_ = value;
}
inline void Chart3DLightArchive::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DLightArchive.intensity)
}

// required .TSCH.Chart3DVectorArchive attenuation = 6;
inline bool Chart3DLightArchive::_internal_has_attenuation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || attenuation_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_attenuation() const {
  return _internal_has_attenuation();
}
inline void Chart3DLightArchive::clear_attenuation() {
  if (attenuation_ != nullptr) attenuation_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::_internal_attenuation() const {
  const ::TSCH::Chart3DVectorArchive* p = attenuation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DLightArchive::attenuation() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.attenuation)
  return _internal_attenuation();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_attenuation(
    ::TSCH::Chart3DVectorArchive* attenuation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attenuation_);
  }
  attenuation_ = attenuation;
  if (attenuation) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.attenuation)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::release_attenuation() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = attenuation_;
  attenuation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::unsafe_arena_release_attenuation() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.attenuation)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = attenuation_;
  attenuation_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::_internal_mutable_attenuation() {
  _has_bits_[0] |= 0x00000010u;
  if (attenuation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    attenuation_ = p;
  }
  return attenuation_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DLightArchive::mutable_attenuation() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.attenuation)
  return _internal_mutable_attenuation();
}
inline void Chart3DLightArchive::set_allocated_attenuation(::TSCH::Chart3DVectorArchive* attenuation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attenuation_;
  }
  if (attenuation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attenuation);
    if (message_arena != submessage_arena) {
      attenuation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attenuation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  attenuation_ = attenuation;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.attenuation)
}

// required uint32 coordinate_space = 7;
inline bool Chart3DLightArchive::_internal_has_coordinate_space() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Chart3DLightArchive::has_coordinate_space() const {
  return _internal_has_coordinate_space();
}
inline void Chart3DLightArchive::clear_coordinate_space() {
  coordinate_space_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chart3DLightArchive::_internal_coordinate_space() const {
  return coordinate_space_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chart3DLightArchive::coordinate_space() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.coordinate_space)
  return _internal_coordinate_space();
}
inline void Chart3DLightArchive::_internal_set_coordinate_space(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  coordinate_space_ = value;
}
inline void Chart3DLightArchive::set_coordinate_space(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coordinate_space(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DLightArchive.coordinate_space)
}

// required bool enabled = 8;
inline bool Chart3DLightArchive::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Chart3DLightArchive::has_enabled() const {
  return _internal_has_enabled();
}
inline void Chart3DLightArchive::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Chart3DLightArchive::_internal_enabled() const {
  return enabled_;
}
inline bool Chart3DLightArchive::enabled() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.enabled)
  return _internal_enabled();
}
inline void Chart3DLightArchive::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enabled_ = value;
}
inline void Chart3DLightArchive::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DLightArchive.enabled)
}

// optional .TSCH.Chart3DPointLightArchive point_light = 9;
inline bool Chart3DLightArchive::_internal_has_point_light() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || point_light_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_point_light() const {
  return _internal_has_point_light();
}
inline void Chart3DLightArchive::clear_point_light() {
  if (point_light_ != nullptr) point_light_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCH::Chart3DPointLightArchive& Chart3DLightArchive::_internal_point_light() const {
  const ::TSCH::Chart3DPointLightArchive* p = point_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DPointLightArchive&>(
      ::TSCH::_Chart3DPointLightArchive_default_instance_);
}
inline const ::TSCH::Chart3DPointLightArchive& Chart3DLightArchive::point_light() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.point_light)
  return _internal_point_light();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_point_light(
    ::TSCH::Chart3DPointLightArchive* point_light) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_light_);
  }
  point_light_ = point_light;
  if (point_light) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.point_light)
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::release_point_light() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DPointLightArchive* temp = point_light_;
  point_light_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::unsafe_arena_release_point_light() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.point_light)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DPointLightArchive* temp = point_light_;
  point_light_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::_internal_mutable_point_light() {
  _has_bits_[0] |= 0x00000020u;
  if (point_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DPointLightArchive>(GetArena());
    point_light_ = p;
  }
  return point_light_;
}
inline ::TSCH::Chart3DPointLightArchive* Chart3DLightArchive::mutable_point_light() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.point_light)
  return _internal_mutable_point_light();
}
inline void Chart3DLightArchive::set_allocated_point_light(::TSCH::Chart3DPointLightArchive* point_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_light_;
  }
  if (point_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_light);
    if (message_arena != submessage_arena) {
      point_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_light, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  point_light_ = point_light;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.point_light)
}

// optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
inline bool Chart3DLightArchive::_internal_has_directional_light() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || directional_light_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_directional_light() const {
  return _internal_has_directional_light();
}
inline void Chart3DLightArchive::clear_directional_light() {
  if (directional_light_ != nullptr) directional_light_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCH::Chart3DDirectionalLightArchive& Chart3DLightArchive::_internal_directional_light() const {
  const ::TSCH::Chart3DDirectionalLightArchive* p = directional_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DDirectionalLightArchive&>(
      ::TSCH::_Chart3DDirectionalLightArchive_default_instance_);
}
inline const ::TSCH::Chart3DDirectionalLightArchive& Chart3DLightArchive::directional_light() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.directional_light)
  return _internal_directional_light();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_directional_light(
    ::TSCH::Chart3DDirectionalLightArchive* directional_light) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(directional_light_);
  }
  directional_light_ = directional_light;
  if (directional_light) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.directional_light)
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::release_directional_light() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DDirectionalLightArchive* temp = directional_light_;
  directional_light_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::unsafe_arena_release_directional_light() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.directional_light)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DDirectionalLightArchive* temp = directional_light_;
  directional_light_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::_internal_mutable_directional_light() {
  _has_bits_[0] |= 0x00000040u;
  if (directional_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DDirectionalLightArchive>(GetArena());
    directional_light_ = p;
  }
  return directional_light_;
}
inline ::TSCH::Chart3DDirectionalLightArchive* Chart3DLightArchive::mutable_directional_light() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.directional_light)
  return _internal_mutable_directional_light();
}
inline void Chart3DLightArchive::set_allocated_directional_light(::TSCH::Chart3DDirectionalLightArchive* directional_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete directional_light_;
  }
  if (directional_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(directional_light);
    if (message_arena != submessage_arena) {
      directional_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directional_light, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  directional_light_ = directional_light;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.directional_light)
}

// optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
inline bool Chart3DLightArchive::_internal_has_spot_light() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || spot_light_ != nullptr);
  return value;
}
inline bool Chart3DLightArchive::has_spot_light() const {
  return _internal_has_spot_light();
}
inline void Chart3DLightArchive::clear_spot_light() {
  if (spot_light_ != nullptr) spot_light_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCH::Chart3DSpotLightArchive& Chart3DLightArchive::_internal_spot_light() const {
  const ::TSCH::Chart3DSpotLightArchive* p = spot_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DSpotLightArchive&>(
      ::TSCH::_Chart3DSpotLightArchive_default_instance_);
}
inline const ::TSCH::Chart3DSpotLightArchive& Chart3DLightArchive::spot_light() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightArchive.spot_light)
  return _internal_spot_light();
}
inline void Chart3DLightArchive::unsafe_arena_set_allocated_spot_light(
    ::TSCH::Chart3DSpotLightArchive* spot_light) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spot_light_);
  }
  spot_light_ = spot_light;
  if (spot_light) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightArchive.spot_light)
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::release_spot_light() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DSpotLightArchive* temp = spot_light_;
  spot_light_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::unsafe_arena_release_spot_light() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightArchive.spot_light)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DSpotLightArchive* temp = spot_light_;
  spot_light_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::_internal_mutable_spot_light() {
  _has_bits_[0] |= 0x00000080u;
  if (spot_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DSpotLightArchive>(GetArena());
    spot_light_ = p;
  }
  return spot_light_;
}
inline ::TSCH::Chart3DSpotLightArchive* Chart3DLightArchive::mutable_spot_light() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightArchive.spot_light)
  return _internal_mutable_spot_light();
}
inline void Chart3DLightArchive::set_allocated_spot_light(::TSCH::Chart3DSpotLightArchive* spot_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spot_light_;
  }
  if (spot_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spot_light);
    if (message_arena != submessage_arena) {
      spot_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot_light, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  spot_light_ = spot_light;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightArchive.spot_light)
}

// -------------------------------------------------------------------

// Chart3DLightingModelArchive

// optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
inline bool Chart3DLightingModelArchive::_internal_has_phong() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || phong_ != nullptr);
  return value;
}
inline bool Chart3DLightingModelArchive::has_phong() const {
  return _internal_has_phong();
}
inline void Chart3DLightingModelArchive::clear_phong() {
  if (phong_ != nullptr) phong_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DPhongLightingModelArchive& Chart3DLightingModelArchive::_internal_phong() const {
  const ::TSCH::Chart3DPhongLightingModelArchive* p = phong_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DPhongLightingModelArchive&>(
      ::TSCH::_Chart3DPhongLightingModelArchive_default_instance_);
}
inline const ::TSCH::Chart3DPhongLightingModelArchive& Chart3DLightingModelArchive::phong() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightingModelArchive.phong)
  return _internal_phong();
}
inline void Chart3DLightingModelArchive::unsafe_arena_set_allocated_phong(
    ::TSCH::Chart3DPhongLightingModelArchive* phong) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phong_);
  }
  phong_ = phong;
  if (phong) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightingModelArchive.phong)
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::release_phong() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongLightingModelArchive* temp = phong_;
  phong_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::unsafe_arena_release_phong() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightingModelArchive.phong)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongLightingModelArchive* temp = phong_;
  phong_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::_internal_mutable_phong() {
  _has_bits_[0] |= 0x00000001u;
  if (phong_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DPhongLightingModelArchive>(GetArena());
    phong_ = p;
  }
  return phong_;
}
inline ::TSCH::Chart3DPhongLightingModelArchive* Chart3DLightingModelArchive::mutable_phong() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightingModelArchive.phong)
  return _internal_mutable_phong();
}
inline void Chart3DLightingModelArchive::set_allocated_phong(::TSCH::Chart3DPhongLightingModelArchive* phong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phong_;
  }
  if (phong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phong);
    if (message_arena != submessage_arena) {
      phong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phong, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phong_ = phong;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightingModelArchive.phong)
}

// optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
inline bool Chart3DLightingModelArchive::_internal_has_fixed_function() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fixed_function_ != nullptr);
  return value;
}
inline bool Chart3DLightingModelArchive::has_fixed_function() const {
  return _internal_has_fixed_function();
}
inline void Chart3DLightingModelArchive::clear_fixed_function() {
  if (fixed_function_ != nullptr) fixed_function_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::Chart3DFixedFunctionLightingModelArchive& Chart3DLightingModelArchive::_internal_fixed_function() const {
  const ::TSCH::Chart3DFixedFunctionLightingModelArchive* p = fixed_function_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DFixedFunctionLightingModelArchive&>(
      ::TSCH::_Chart3DFixedFunctionLightingModelArchive_default_instance_);
}
inline const ::TSCH::Chart3DFixedFunctionLightingModelArchive& Chart3DLightingModelArchive::fixed_function() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightingModelArchive.fixed_function)
  return _internal_fixed_function();
}
inline void Chart3DLightingModelArchive::unsafe_arena_set_allocated_fixed_function(
    ::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_function_);
  }
  fixed_function_ = fixed_function;
  if (fixed_function) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightingModelArchive.fixed_function)
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::release_fixed_function() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* temp = fixed_function_;
  fixed_function_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::unsafe_arena_release_fixed_function() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightingModelArchive.fixed_function)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DFixedFunctionLightingModelArchive* temp = fixed_function_;
  fixed_function_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::_internal_mutable_fixed_function() {
  _has_bits_[0] |= 0x00000002u;
  if (fixed_function_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DFixedFunctionLightingModelArchive>(GetArena());
    fixed_function_ = p;
  }
  return fixed_function_;
}
inline ::TSCH::Chart3DFixedFunctionLightingModelArchive* Chart3DLightingModelArchive::mutable_fixed_function() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightingModelArchive.fixed_function)
  return _internal_mutable_fixed_function();
}
inline void Chart3DLightingModelArchive::set_allocated_fixed_function(::TSCH::Chart3DFixedFunctionLightingModelArchive* fixed_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fixed_function_;
  }
  if (fixed_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_function);
    if (message_arena != submessage_arena) {
      fixed_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_function, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fixed_function_ = fixed_function;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightingModelArchive.fixed_function)
}

// optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
inline bool Chart3DLightingModelArchive::_internal_has_environment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || environment_ != nullptr);
  return value;
}
inline bool Chart3DLightingModelArchive::has_environment() const {
  return _internal_has_environment();
}
inline void Chart3DLightingModelArchive::clear_environment() {
  if (environment_ != nullptr) environment_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::Chart3DEnvironmentPackageArchive& Chart3DLightingModelArchive::_internal_environment() const {
  const ::TSCH::Chart3DEnvironmentPackageArchive* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DEnvironmentPackageArchive&>(
      ::TSCH::_Chart3DEnvironmentPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DEnvironmentPackageArchive& Chart3DLightingModelArchive::environment() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightingModelArchive.environment)
  return _internal_environment();
}
inline void Chart3DLightingModelArchive::unsafe_arena_set_allocated_environment(
    ::TSCH::Chart3DEnvironmentPackageArchive* environment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DLightingModelArchive.environment)
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::release_environment() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DEnvironmentPackageArchive* temp = environment_;
  environment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightingModelArchive.environment)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DEnvironmentPackageArchive* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::_internal_mutable_environment() {
  _has_bits_[0] |= 0x00000004u;
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DEnvironmentPackageArchive>(GetArena());
    environment_ = p;
  }
  return environment_;
}
inline ::TSCH::Chart3DEnvironmentPackageArchive* Chart3DLightingModelArchive::mutable_environment() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightingModelArchive.environment)
  return _internal_mutable_environment();
}
inline void Chart3DLightingModelArchive::set_allocated_environment(::TSCH::Chart3DEnvironmentPackageArchive* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environment_;
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environment);
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightingModelArchive.environment)
}

// -------------------------------------------------------------------

// Chart3DLightingPackageArchive

// required string name = 1;
inline bool Chart3DLightingPackageArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chart3DLightingPackageArchive::has_name() const {
  return _internal_has_name();
}
inline void Chart3DLightingPackageArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chart3DLightingPackageArchive::name() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightingPackageArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Chart3DLightingPackageArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.Chart3DLightingPackageArchive.name)
}
inline std::string* Chart3DLightingPackageArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightingPackageArchive.name)
  return _internal_mutable_name();
}
inline const std::string& Chart3DLightingPackageArchive::_internal_name() const {
  return name_.Get();
}
inline void Chart3DLightingPackageArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Chart3DLightingPackageArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Chart3DLightingPackageArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DLightingPackageArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chart3DLightingPackageArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DLightingPackageArchive.name)
}

// repeated .TSCH.Chart3DLightArchive lights = 2;
inline int Chart3DLightingPackageArchive::_internal_lights_size() const {
  return lights_.size();
}
inline int Chart3DLightingPackageArchive::lights_size() const {
  return _internal_lights_size();
}
inline void Chart3DLightingPackageArchive::clear_lights() {
  lights_.Clear();
}
inline ::TSCH::Chart3DLightArchive* Chart3DLightingPackageArchive::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DLightingPackageArchive.lights)
  return lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DLightArchive >*
Chart3DLightingPackageArchive::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DLightingPackageArchive.lights)
  return &lights_;
}
inline const ::TSCH::Chart3DLightArchive& Chart3DLightingPackageArchive::_internal_lights(int index) const {
  return lights_.Get(index);
}
inline const ::TSCH::Chart3DLightArchive& Chart3DLightingPackageArchive::lights(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DLightingPackageArchive.lights)
  return _internal_lights(index);
}
inline ::TSCH::Chart3DLightArchive* Chart3DLightingPackageArchive::_internal_add_lights() {
  return lights_.Add();
}
inline ::TSCH::Chart3DLightArchive* Chart3DLightingPackageArchive::add_lights() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DLightingPackageArchive.lights)
  return _internal_add_lights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DLightArchive >&
Chart3DLightingPackageArchive::lights() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DLightingPackageArchive.lights)
  return lights_;
}

// -------------------------------------------------------------------

// Chart3DTexturesMaterialArchive

// required .TSCH.Chart3DVectorArchive color = 1;
inline bool Chart3DTexturesMaterialArchive::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool Chart3DTexturesMaterialArchive::has_color() const {
  return _internal_has_color();
}
inline void Chart3DTexturesMaterialArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DTexturesMaterialArchive::_internal_color() const {
  const ::TSCH::Chart3DVectorArchive* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DTexturesMaterialArchive::color() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTexturesMaterialArchive.color)
  return _internal_color();
}
inline void Chart3DTexturesMaterialArchive::unsafe_arena_set_allocated_color(
    ::TSCH::Chart3DVectorArchive* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DTexturesMaterialArchive.color)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::release_color() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DTexturesMaterialArchive.color)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DTexturesMaterialArchive::mutable_color() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTexturesMaterialArchive.color)
  return _internal_mutable_color();
}
inline void Chart3DTexturesMaterialArchive::set_allocated_color(::TSCH::Chart3DVectorArchive* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DTexturesMaterialArchive.color)
}

// repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
inline int Chart3DTexturesMaterialArchive::_internal_textures_size() const {
  return textures_.size();
}
inline int Chart3DTexturesMaterialArchive::textures_size() const {
  return _internal_textures_size();
}
inline void Chart3DTexturesMaterialArchive::clear_textures() {
  textures_.Clear();
}
inline ::TSCH::Chart3DTSPImageDataTextureArchive* Chart3DTexturesMaterialArchive::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTexturesMaterialArchive.textures)
  return textures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >*
Chart3DTexturesMaterialArchive::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DTexturesMaterialArchive.textures)
  return &textures_;
}
inline const ::TSCH::Chart3DTSPImageDataTextureArchive& Chart3DTexturesMaterialArchive::_internal_textures(int index) const {
  return textures_.Get(index);
}
inline const ::TSCH::Chart3DTSPImageDataTextureArchive& Chart3DTexturesMaterialArchive::textures(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTexturesMaterialArchive.textures)
  return _internal_textures(index);
}
inline ::TSCH::Chart3DTSPImageDataTextureArchive* Chart3DTexturesMaterialArchive::_internal_add_textures() {
  return textures_.Add();
}
inline ::TSCH::Chart3DTSPImageDataTextureArchive* Chart3DTexturesMaterialArchive::add_textures() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DTexturesMaterialArchive.textures)
  return _internal_add_textures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DTSPImageDataTextureArchive >&
Chart3DTexturesMaterialArchive::textures() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DTexturesMaterialArchive.textures)
  return textures_;
}

// -------------------------------------------------------------------

// Chart3DEmissiveMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DEmissiveMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DEmissiveMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DEmissiveMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEmissiveMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEmissiveMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEmissiveMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DEmissiveMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DEmissiveMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DEmissiveMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEmissiveMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEmissiveMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DEmissiveMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DEmissiveMaterialArchive.super)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DEmissiveMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DEmissiveMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DEmissiveMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEmissiveMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEmissiveMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DEmissiveMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DEmissiveMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEmissiveMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEmissiveMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEmissiveMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEmissiveMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEmissiveMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DEmissiveMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DEmissiveMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DEmissiveMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DDiffuseMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DDiffuseMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DDiffuseMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DDiffuseMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DDiffuseMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DDiffuseMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DDiffuseMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DDiffuseMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DDiffuseMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DDiffuseMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DDiffuseMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DDiffuseMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DDiffuseMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DDiffuseMaterialArchive.super)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DDiffuseMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DDiffuseMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DDiffuseMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DDiffuseMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DDiffuseMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DDiffuseMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DDiffuseMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DDiffuseMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DDiffuseMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DDiffuseMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DDiffuseMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DDiffuseMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DDiffuseMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DDiffuseMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DDiffuseMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DModulateMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DModulateMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DModulateMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DModulateMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DModulateMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DModulateMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DModulateMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DModulateMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DModulateMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DModulateMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DModulateMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DModulateMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DModulateMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DModulateMaterialArchive.super)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DModulateMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DModulateMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DModulateMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DModulateMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DModulateMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DModulateMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DModulateMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DModulateMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DModulateMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DModulateMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DModulateMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DModulateMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DModulateMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DModulateMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DModulateMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DSpecularMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DSpecularMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DSpecularMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DSpecularMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DSpecularMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DSpecularMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpecularMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DSpecularMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DSpecularMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DSpecularMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DSpecularMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DSpecularMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DSpecularMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DSpecularMaterialArchive.super)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DSpecularMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DSpecularMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DSpecularMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DSpecularMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DSpecularMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DSpecularMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DSpecularMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DSpecularMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DSpecularMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DSpecularMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DSpecularMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DSpecularMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DSpecularMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DSpecularMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DSpecularMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DShininessMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DShininessMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DShininessMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DShininessMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DShininessMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DShininessMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DShininessMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DShininessMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DShininessMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DShininessMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DShininessMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DShininessMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DShininessMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DShininessMaterialArchive.super)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
inline int Chart3DShininessMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DShininessMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DShininessMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DShininessMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DShininessMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DShininessMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DShininessMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DShininessMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DShininessMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DShininessMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DShininessMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DShininessMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DShininessMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DShininessMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DShininessMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DEnvironmentMaterialArchive

// required .TSCH.Chart3DTexturesMaterialArchive super = 1;
inline bool Chart3DEnvironmentMaterialArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DEnvironmentMaterialArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DEnvironmentMaterialArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEnvironmentMaterialArchive::_internal_super() const {
  const ::TSCH::Chart3DTexturesMaterialArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DTexturesMaterialArchive&>(
      ::TSCH::_Chart3DTexturesMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DTexturesMaterialArchive& Chart3DEnvironmentMaterialArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEnvironmentMaterialArchive.super)
  return _internal_super();
}
inline void Chart3DEnvironmentMaterialArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DTexturesMaterialArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DEnvironmentMaterialArchive.super)
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DEnvironmentMaterialArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DTexturesMaterialArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DTexturesMaterialArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DTexturesMaterialArchive* Chart3DEnvironmentMaterialArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEnvironmentMaterialArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DEnvironmentMaterialArchive::set_allocated_super(::TSCH::Chart3DTexturesMaterialArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DEnvironmentMaterialArchive.super)
}

// repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
inline int Chart3DEnvironmentMaterialArchive::_internal_obsolete_tilings_size() const {
  return obsolete_tilings_.size();
}
inline int Chart3DEnvironmentMaterialArchive::obsolete_tilings_size() const {
  return _internal_obsolete_tilings_size();
}
inline void Chart3DEnvironmentMaterialArchive::clear_obsolete_tilings() {
  obsolete_tilings_.Clear();
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::mutable_obsolete_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings)
  return obsolete_tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >*
Chart3DEnvironmentMaterialArchive::mutable_obsolete_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings)
  return &obsolete_tilings_;
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::_internal_obsolete_tilings(int index) const {
  return obsolete_tilings_.Get(index);
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::obsolete_tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings)
  return _internal_obsolete_tilings(index);
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::_internal_add_obsolete_tilings() {
  return obsolete_tilings_.Add();
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::add_obsolete_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings)
  return _internal_add_obsolete_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DBaseImageTextureTilingArchive >&
Chart3DEnvironmentMaterialArchive::obsolete_tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings)
  return obsolete_tilings_;
}

// optional bool decalMode = 3;
inline bool Chart3DEnvironmentMaterialArchive::_internal_has_decalmode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chart3DEnvironmentMaterialArchive::has_decalmode() const {
  return _internal_has_decalmode();
}
inline void Chart3DEnvironmentMaterialArchive::clear_decalmode() {
  decalmode_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Chart3DEnvironmentMaterialArchive::_internal_decalmode() const {
  return decalmode_;
}
inline bool Chart3DEnvironmentMaterialArchive::decalmode() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEnvironmentMaterialArchive.decalMode)
  return _internal_decalmode();
}
inline void Chart3DEnvironmentMaterialArchive::_internal_set_decalmode(bool value) {
  _has_bits_[0] |= 0x00000002u;
  decalmode_ = value;
}
inline void Chart3DEnvironmentMaterialArchive::set_decalmode(bool value) {
  _internal_set_decalmode(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DEnvironmentMaterialArchive.decalMode)
}

// repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
inline int Chart3DEnvironmentMaterialArchive::_internal_tilings_size() const {
  return tilings_.size();
}
inline int Chart3DEnvironmentMaterialArchive::tilings_size() const {
  return _internal_tilings_size();
}
inline void Chart3DEnvironmentMaterialArchive::clear_tilings() {
  tilings_.Clear();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::mutable_tilings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DEnvironmentMaterialArchive.tilings)
  return tilings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >*
Chart3DEnvironmentMaterialArchive::mutable_tilings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.Chart3DEnvironmentMaterialArchive.tilings)
  return &tilings_;
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::_internal_tilings(int index) const {
  return tilings_.Get(index);
}
inline const ::TSCH::Chart3DImageTextureTilingArchive& Chart3DEnvironmentMaterialArchive::tilings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DEnvironmentMaterialArchive.tilings)
  return _internal_tilings(index);
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::_internal_add_tilings() {
  return tilings_.Add();
}
inline ::TSCH::Chart3DImageTextureTilingArchive* Chart3DEnvironmentMaterialArchive::add_tilings() {
  // @@protoc_insertion_point(field_add:TSCH.Chart3DEnvironmentMaterialArchive.tilings)
  return _internal_add_tilings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::Chart3DImageTextureTilingArchive >&
Chart3DEnvironmentMaterialArchive::tilings() const {
  // @@protoc_insertion_point(field_list:TSCH.Chart3DEnvironmentMaterialArchive.tilings)
  return tilings_;
}

// -------------------------------------------------------------------

// Chart3DFixedFunctionLightingModelArchive

// required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
inline bool Chart3DFixedFunctionLightingModelArchive::_internal_has_materials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || materials_ != nullptr);
  return value;
}
inline bool Chart3DFixedFunctionLightingModelArchive::has_materials() const {
  return _internal_has_materials();
}
inline void Chart3DFixedFunctionLightingModelArchive::clear_materials() {
  if (materials_ != nullptr) materials_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DFixedFunctionLightingModelArchive::_internal_materials() const {
  const ::TSCH::Chart3DPhongMaterialPackageArchive* p = materials_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DPhongMaterialPackageArchive&>(
      ::TSCH::_Chart3DPhongMaterialPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DFixedFunctionLightingModelArchive::materials() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DFixedFunctionLightingModelArchive.materials)
  return _internal_materials();
}
inline void Chart3DFixedFunctionLightingModelArchive::unsafe_arena_set_allocated_materials(
    ::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(materials_);
  }
  materials_ = materials;
  if (materials) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DFixedFunctionLightingModelArchive.materials)
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::release_materials() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::unsafe_arena_release_materials() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DFixedFunctionLightingModelArchive.materials)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::_internal_mutable_materials() {
  _has_bits_[0] |= 0x00000001u;
  if (materials_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DPhongMaterialPackageArchive>(GetArena());
    materials_ = p;
  }
  return materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DFixedFunctionLightingModelArchive::mutable_materials() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DFixedFunctionLightingModelArchive.materials)
  return _internal_mutable_materials();
}
inline void Chart3DFixedFunctionLightingModelArchive::set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete materials_;
  }
  if (materials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(materials);
    if (message_arena != submessage_arena) {
      materials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, materials, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  materials_ = materials;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DFixedFunctionLightingModelArchive.materials)
}

// -------------------------------------------------------------------

// Chart3DPhongLightingModelArchive

// required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
inline bool Chart3DPhongLightingModelArchive::_internal_has_materials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || materials_ != nullptr);
  return value;
}
inline bool Chart3DPhongLightingModelArchive::has_materials() const {
  return _internal_has_materials();
}
inline void Chart3DPhongLightingModelArchive::clear_materials() {
  if (materials_ != nullptr) materials_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DPhongLightingModelArchive::_internal_materials() const {
  const ::TSCH::Chart3DPhongMaterialPackageArchive* p = materials_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DPhongMaterialPackageArchive&>(
      ::TSCH::_Chart3DPhongMaterialPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DPhongMaterialPackageArchive& Chart3DPhongLightingModelArchive::materials() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongLightingModelArchive.materials)
  return _internal_materials();
}
inline void Chart3DPhongLightingModelArchive::unsafe_arena_set_allocated_materials(
    ::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(materials_);
  }
  materials_ = materials;
  if (materials) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongLightingModelArchive.materials)
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::release_materials() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::unsafe_arena_release_materials() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongLightingModelArchive.materials)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DPhongMaterialPackageArchive* temp = materials_;
  materials_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::_internal_mutable_materials() {
  _has_bits_[0] |= 0x00000001u;
  if (materials_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DPhongMaterialPackageArchive>(GetArena());
    materials_ = p;
  }
  return materials_;
}
inline ::TSCH::Chart3DPhongMaterialPackageArchive* Chart3DPhongLightingModelArchive::mutable_materials() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongLightingModelArchive.materials)
  return _internal_mutable_materials();
}
inline void Chart3DPhongLightingModelArchive::set_allocated_materials(::TSCH::Chart3DPhongMaterialPackageArchive* materials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete materials_;
  }
  if (materials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(materials);
    if (message_arena != submessage_arena) {
      materials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, materials, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  materials_ = materials;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongLightingModelArchive.materials)
}

// -------------------------------------------------------------------

// Chart3DPhongMaterialPackageArchive

// optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
inline bool Chart3DPhongMaterialPackageArchive::_internal_has_emissive() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || emissive_ != nullptr);
  return value;
}
inline bool Chart3DPhongMaterialPackageArchive::has_emissive() const {
  return _internal_has_emissive();
}
inline void Chart3DPhongMaterialPackageArchive::clear_emissive() {
  if (emissive_ != nullptr) emissive_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DEmissiveMaterialArchive& Chart3DPhongMaterialPackageArchive::_internal_emissive() const {
  const ::TSCH::Chart3DEmissiveMaterialArchive* p = emissive_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DEmissiveMaterialArchive&>(
      ::TSCH::_Chart3DEmissiveMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DEmissiveMaterialArchive& Chart3DPhongMaterialPackageArchive::emissive() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongMaterialPackageArchive.emissive)
  return _internal_emissive();
}
inline void Chart3DPhongMaterialPackageArchive::unsafe_arena_set_allocated_emissive(
    ::TSCH::Chart3DEmissiveMaterialArchive* emissive) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emissive_);
  }
  emissive_ = emissive;
  if (emissive) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.emissive)
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::release_emissive() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DEmissiveMaterialArchive* temp = emissive_;
  emissive_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::unsafe_arena_release_emissive() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongMaterialPackageArchive.emissive)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DEmissiveMaterialArchive* temp = emissive_;
  emissive_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::_internal_mutable_emissive() {
  _has_bits_[0] |= 0x00000001u;
  if (emissive_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DEmissiveMaterialArchive>(GetArena());
    emissive_ = p;
  }
  return emissive_;
}
inline ::TSCH::Chart3DEmissiveMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_emissive() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongMaterialPackageArchive.emissive)
  return _internal_mutable_emissive();
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_emissive(::TSCH::Chart3DEmissiveMaterialArchive* emissive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete emissive_;
  }
  if (emissive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emissive);
    if (message_arena != submessage_arena) {
      emissive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emissive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  emissive_ = emissive;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.emissive)
}

// optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
inline bool Chart3DPhongMaterialPackageArchive::_internal_has_diffuse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || diffuse_ != nullptr);
  return value;
}
inline bool Chart3DPhongMaterialPackageArchive::has_diffuse() const {
  return _internal_has_diffuse();
}
inline void Chart3DPhongMaterialPackageArchive::clear_diffuse() {
  if (diffuse_ != nullptr) diffuse_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::Chart3DDiffuseMaterialArchive& Chart3DPhongMaterialPackageArchive::_internal_diffuse() const {
  const ::TSCH::Chart3DDiffuseMaterialArchive* p = diffuse_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DDiffuseMaterialArchive&>(
      ::TSCH::_Chart3DDiffuseMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DDiffuseMaterialArchive& Chart3DPhongMaterialPackageArchive::diffuse() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongMaterialPackageArchive.diffuse)
  return _internal_diffuse();
}
inline void Chart3DPhongMaterialPackageArchive::unsafe_arena_set_allocated_diffuse(
    ::TSCH::Chart3DDiffuseMaterialArchive* diffuse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffuse_);
  }
  diffuse_ = diffuse;
  if (diffuse) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.diffuse)
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::release_diffuse() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DDiffuseMaterialArchive* temp = diffuse_;
  diffuse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::unsafe_arena_release_diffuse() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongMaterialPackageArchive.diffuse)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DDiffuseMaterialArchive* temp = diffuse_;
  diffuse_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::_internal_mutable_diffuse() {
  _has_bits_[0] |= 0x00000002u;
  if (diffuse_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DDiffuseMaterialArchive>(GetArena());
    diffuse_ = p;
  }
  return diffuse_;
}
inline ::TSCH::Chart3DDiffuseMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongMaterialPackageArchive.diffuse)
  return _internal_mutable_diffuse();
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_diffuse(::TSCH::Chart3DDiffuseMaterialArchive* diffuse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete diffuse_;
  }
  if (diffuse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diffuse);
    if (message_arena != submessage_arena) {
      diffuse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffuse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  diffuse_ = diffuse;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.diffuse)
}

// optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
inline bool Chart3DPhongMaterialPackageArchive::_internal_has_modulate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || modulate_ != nullptr);
  return value;
}
inline bool Chart3DPhongMaterialPackageArchive::has_modulate() const {
  return _internal_has_modulate();
}
inline void Chart3DPhongMaterialPackageArchive::clear_modulate() {
  if (modulate_ != nullptr) modulate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::Chart3DModulateMaterialArchive& Chart3DPhongMaterialPackageArchive::_internal_modulate() const {
  const ::TSCH::Chart3DModulateMaterialArchive* p = modulate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DModulateMaterialArchive&>(
      ::TSCH::_Chart3DModulateMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DModulateMaterialArchive& Chart3DPhongMaterialPackageArchive::modulate() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongMaterialPackageArchive.modulate)
  return _internal_modulate();
}
inline void Chart3DPhongMaterialPackageArchive::unsafe_arena_set_allocated_modulate(
    ::TSCH::Chart3DModulateMaterialArchive* modulate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modulate_);
  }
  modulate_ = modulate;
  if (modulate) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.modulate)
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::release_modulate() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DModulateMaterialArchive* temp = modulate_;
  modulate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::unsafe_arena_release_modulate() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongMaterialPackageArchive.modulate)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DModulateMaterialArchive* temp = modulate_;
  modulate_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::_internal_mutable_modulate() {
  _has_bits_[0] |= 0x00000004u;
  if (modulate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DModulateMaterialArchive>(GetArena());
    modulate_ = p;
  }
  return modulate_;
}
inline ::TSCH::Chart3DModulateMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_modulate() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongMaterialPackageArchive.modulate)
  return _internal_mutable_modulate();
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_modulate(::TSCH::Chart3DModulateMaterialArchive* modulate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete modulate_;
  }
  if (modulate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modulate);
    if (message_arena != submessage_arena) {
      modulate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modulate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  modulate_ = modulate;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.modulate)
}

// optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
inline bool Chart3DPhongMaterialPackageArchive::_internal_has_specular() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || specular_ != nullptr);
  return value;
}
inline bool Chart3DPhongMaterialPackageArchive::has_specular() const {
  return _internal_has_specular();
}
inline void Chart3DPhongMaterialPackageArchive::clear_specular() {
  if (specular_ != nullptr) specular_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCH::Chart3DSpecularMaterialArchive& Chart3DPhongMaterialPackageArchive::_internal_specular() const {
  const ::TSCH::Chart3DSpecularMaterialArchive* p = specular_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DSpecularMaterialArchive&>(
      ::TSCH::_Chart3DSpecularMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DSpecularMaterialArchive& Chart3DPhongMaterialPackageArchive::specular() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongMaterialPackageArchive.specular)
  return _internal_specular();
}
inline void Chart3DPhongMaterialPackageArchive::unsafe_arena_set_allocated_specular(
    ::TSCH::Chart3DSpecularMaterialArchive* specular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specular_);
  }
  specular_ = specular;
  if (specular) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.specular)
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::release_specular() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DSpecularMaterialArchive* temp = specular_;
  specular_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::unsafe_arena_release_specular() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongMaterialPackageArchive.specular)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DSpecularMaterialArchive* temp = specular_;
  specular_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::_internal_mutable_specular() {
  _has_bits_[0] |= 0x00000008u;
  if (specular_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DSpecularMaterialArchive>(GetArena());
    specular_ = p;
  }
  return specular_;
}
inline ::TSCH::Chart3DSpecularMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_specular() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongMaterialPackageArchive.specular)
  return _internal_mutable_specular();
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_specular(::TSCH::Chart3DSpecularMaterialArchive* specular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete specular_;
  }
  if (specular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specular);
    if (message_arena != submessage_arena) {
      specular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specular, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  specular_ = specular;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.specular)
}

// optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
inline bool Chart3DPhongMaterialPackageArchive::_internal_has_shininess() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || shininess_ != nullptr);
  return value;
}
inline bool Chart3DPhongMaterialPackageArchive::has_shininess() const {
  return _internal_has_shininess();
}
inline void Chart3DPhongMaterialPackageArchive::clear_shininess() {
  if (shininess_ != nullptr) shininess_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCH::Chart3DShininessMaterialArchive& Chart3DPhongMaterialPackageArchive::_internal_shininess() const {
  const ::TSCH::Chart3DShininessMaterialArchive* p = shininess_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DShininessMaterialArchive&>(
      ::TSCH::_Chart3DShininessMaterialArchive_default_instance_);
}
inline const ::TSCH::Chart3DShininessMaterialArchive& Chart3DPhongMaterialPackageArchive::shininess() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DPhongMaterialPackageArchive.shininess)
  return _internal_shininess();
}
inline void Chart3DPhongMaterialPackageArchive::unsafe_arena_set_allocated_shininess(
    ::TSCH::Chart3DShininessMaterialArchive* shininess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shininess_);
  }
  shininess_ = shininess;
  if (shininess) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.shininess)
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::release_shininess() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DShininessMaterialArchive* temp = shininess_;
  shininess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::unsafe_arena_release_shininess() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DPhongMaterialPackageArchive.shininess)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DShininessMaterialArchive* temp = shininess_;
  shininess_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::_internal_mutable_shininess() {
  _has_bits_[0] |= 0x00000010u;
  if (shininess_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DShininessMaterialArchive>(GetArena());
    shininess_ = p;
  }
  return shininess_;
}
inline ::TSCH::Chart3DShininessMaterialArchive* Chart3DPhongMaterialPackageArchive::mutable_shininess() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DPhongMaterialPackageArchive.shininess)
  return _internal_mutable_shininess();
}
inline void Chart3DPhongMaterialPackageArchive::set_allocated_shininess(::TSCH::Chart3DShininessMaterialArchive* shininess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shininess_;
  }
  if (shininess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shininess);
    if (message_arena != submessage_arena) {
      shininess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shininess, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  shininess_ = shininess;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DPhongMaterialPackageArchive.shininess)
}

// -------------------------------------------------------------------

// Chart3DTSPImageDataTextureArchive

// optional .TSP.DataReference data = 3;
inline bool Chart3DTSPImageDataTextureArchive::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool Chart3DTSPImageDataTextureArchive::has_data() const {
  return _internal_has_data();
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::_internal_data() const {
  const ::TSP::DataReference* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::data() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTSPImageDataTextureArchive.data)
  return _internal_data();
}
inline void Chart3DTSPImageDataTextureArchive::unsafe_arena_set_allocated_data(
    ::TSP::DataReference* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.data)
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DTSPImageDataTextureArchive.data)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTSPImageDataTextureArchive.data)
  return _internal_mutable_data();
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_data(::TSP::DataReference* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.data)
}

// optional .TSP.DataReference mipmapdata = 4;
inline bool Chart3DTSPImageDataTextureArchive::_internal_has_mipmapdata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || mipmapdata_ != nullptr);
  return value;
}
inline bool Chart3DTSPImageDataTextureArchive::has_mipmapdata() const {
  return _internal_has_mipmapdata();
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::_internal_mipmapdata() const {
  const ::TSP::DataReference* p = mipmapdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& Chart3DTSPImageDataTextureArchive::mipmapdata() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata)
  return _internal_mipmapdata();
}
inline void Chart3DTSPImageDataTextureArchive::unsafe_arena_set_allocated_mipmapdata(
    ::TSP::DataReference* mipmapdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mipmapdata_);
  }
  mipmapdata_ = mipmapdata;
  if (mipmapdata) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata)
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::release_mipmapdata() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = mipmapdata_;
  mipmapdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::unsafe_arena_release_mipmapdata() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = mipmapdata_;
  mipmapdata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::_internal_mutable_mipmapdata() {
  _has_bits_[0] |= 0x00000008u;
  if (mipmapdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    mipmapdata_ = p;
  }
  return mipmapdata_;
}
inline ::TSP::DataReference* Chart3DTSPImageDataTextureArchive::mutable_mipmapdata() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata)
  return _internal_mutable_mipmapdata();
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_mipmapdata(::TSP::DataReference* mipmapdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mipmapdata_);
  }
  if (mipmapdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mipmapdata)->GetArena();
    if (message_arena != submessage_arena) {
      mipmapdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mipmapdata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mipmapdata_ = mipmapdata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata)
}

// optional .TSP.Reference database_data = 1;
inline bool Chart3DTSPImageDataTextureArchive::_internal_has_database_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || database_data_ != nullptr);
  return value;
}
inline bool Chart3DTSPImageDataTextureArchive::has_database_data() const {
  return _internal_has_database_data();
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::_internal_database_data() const {
  const ::TSP::Reference* p = database_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::database_data() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTSPImageDataTextureArchive.database_data)
  return _internal_database_data();
}
inline void Chart3DTSPImageDataTextureArchive::unsafe_arena_set_allocated_database_data(
    ::TSP::Reference* database_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_data_);
  }
  database_data_ = database_data;
  if (database_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.database_data)
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::release_database_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_data_;
  database_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::unsafe_arena_release_database_data() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DTSPImageDataTextureArchive.database_data)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = database_data_;
  database_data_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::_internal_mutable_database_data() {
  _has_bits_[0] |= 0x00000001u;
  if (database_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_data_ = p;
  }
  return database_data_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::mutable_database_data() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTSPImageDataTextureArchive.database_data)
  return _internal_mutable_database_data();
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_database_data(::TSP::Reference* database_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_data_);
  }
  if (database_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_data)->GetArena();
    if (message_arena != submessage_arena) {
      database_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  database_data_ = database_data;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.database_data)
}

// optional .TSP.Reference database_mipmapdata = 2;
inline bool Chart3DTSPImageDataTextureArchive::_internal_has_database_mipmapdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || database_mipmapdata_ != nullptr);
  return value;
}
inline bool Chart3DTSPImageDataTextureArchive::has_database_mipmapdata() const {
  return _internal_has_database_mipmapdata();
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::_internal_database_mipmapdata() const {
  const ::TSP::Reference* p = database_mipmapdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Chart3DTSPImageDataTextureArchive::database_mipmapdata() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata)
  return _internal_database_mipmapdata();
}
inline void Chart3DTSPImageDataTextureArchive::unsafe_arena_set_allocated_database_mipmapdata(
    ::TSP::Reference* database_mipmapdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_mipmapdata_);
  }
  database_mipmapdata_ = database_mipmapdata;
  if (database_mipmapdata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata)
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::release_database_mipmapdata() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = database_mipmapdata_;
  database_mipmapdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::unsafe_arena_release_database_mipmapdata() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = database_mipmapdata_;
  database_mipmapdata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::_internal_mutable_database_mipmapdata() {
  _has_bits_[0] |= 0x00000002u;
  if (database_mipmapdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_mipmapdata_ = p;
  }
  return database_mipmapdata_;
}
inline ::TSP::Reference* Chart3DTSPImageDataTextureArchive::mutable_database_mipmapdata() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata)
  return _internal_mutable_database_mipmapdata();
}
inline void Chart3DTSPImageDataTextureArchive::set_allocated_database_mipmapdata(::TSP::Reference* database_mipmapdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_mipmapdata_);
  }
  if (database_mipmapdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_mipmapdata)->GetArena();
    if (message_arena != submessage_arena) {
      database_mipmapdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_mipmapdata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_mipmapdata_ = database_mipmapdata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata)
}

// -------------------------------------------------------------------

// Chart3DBaseImageTextureTilingArchive

// optional .TSCH.Chart3DVectorArchive scale = 1;
inline bool Chart3DBaseImageTextureTilingArchive::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scale_ != nullptr);
  return value;
}
inline bool Chart3DBaseImageTextureTilingArchive::has_scale() const {
  return _internal_has_scale();
}
inline void Chart3DBaseImageTextureTilingArchive::clear_scale() {
  if (scale_ != nullptr) scale_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DBaseImageTextureTilingArchive::_internal_scale() const {
  const ::TSCH::Chart3DVectorArchive* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& Chart3DBaseImageTextureTilingArchive::scale() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DBaseImageTextureTilingArchive.scale)
  return _internal_scale();
}
inline void Chart3DBaseImageTextureTilingArchive::unsafe_arena_set_allocated_scale(
    ::TSCH::Chart3DVectorArchive* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DBaseImageTextureTilingArchive.scale)
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::release_scale() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DBaseImageTextureTilingArchive.scale)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DVectorArchive* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::_internal_mutable_scale() {
  _has_bits_[0] |= 0x00000001u;
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::TSCH::Chart3DVectorArchive* Chart3DBaseImageTextureTilingArchive::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DBaseImageTextureTilingArchive.scale)
  return _internal_mutable_scale();
}
inline void Chart3DBaseImageTextureTilingArchive::set_allocated_scale(::TSCH::Chart3DVectorArchive* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DBaseImageTextureTilingArchive.scale)
}

// optional float rotation = 2;
inline bool Chart3DBaseImageTextureTilingArchive::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chart3DBaseImageTextureTilingArchive::has_rotation() const {
  return _internal_has_rotation();
}
inline void Chart3DBaseImageTextureTilingArchive::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Chart3DBaseImageTextureTilingArchive::_internal_rotation() const {
  return rotation_;
}
inline float Chart3DBaseImageTextureTilingArchive::rotation() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DBaseImageTextureTilingArchive.rotation)
  return _internal_rotation();
}
inline void Chart3DBaseImageTextureTilingArchive::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000002u;
  rotation_ = value;
}
inline void Chart3DBaseImageTextureTilingArchive::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DBaseImageTextureTilingArchive.rotation)
}

// -------------------------------------------------------------------

// Chart3DImageTextureTilingArchive

// required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
inline bool Chart3DImageTextureTilingArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_super() const {
  return _internal_has_super();
}
inline void Chart3DImageTextureTilingArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DImageTextureTilingArchive::_internal_super() const {
  const ::TSCH::Chart3DBaseImageTextureTilingArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DBaseImageTextureTilingArchive&>(
      ::TSCH::_Chart3DBaseImageTextureTilingArchive_default_instance_);
}
inline const ::TSCH::Chart3DBaseImageTextureTilingArchive& Chart3DImageTextureTilingArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.super)
  return _internal_super();
}
inline void Chart3DImageTextureTilingArchive::unsafe_arena_set_allocated_super(
    ::TSCH::Chart3DBaseImageTextureTilingArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Chart3DImageTextureTilingArchive.super)
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.Chart3DImageTextureTilingArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DBaseImageTextureTilingArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DBaseImageTextureTilingArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::Chart3DBaseImageTextureTilingArchive* Chart3DImageTextureTilingArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.Chart3DImageTextureTilingArchive.super)
  return _internal_mutable_super();
}
inline void Chart3DImageTextureTilingArchive::set_allocated_super(::TSCH::Chart3DBaseImageTextureTilingArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Chart3DImageTextureTilingArchive.super)
}

// optional .TSCH.TextureTilingMode mode = 2;
inline bool Chart3DImageTextureTilingArchive::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_mode() const {
  return _internal_has_mode();
}
inline void Chart3DImageTextureTilingArchive::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCH::TextureTilingMode Chart3DImageTextureTilingArchive::_internal_mode() const {
  return static_cast< ::TSCH::TextureTilingMode >(mode_);
}
inline ::TSCH::TextureTilingMode Chart3DImageTextureTilingArchive::mode() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.mode)
  return _internal_mode();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_mode(::TSCH::TextureTilingMode value) {
  assert(::TSCH::TextureTilingMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_mode(::TSCH::TextureTilingMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.mode)
}

// optional .TSCH.TextureTilingWrap wrap = 3;
inline bool Chart3DImageTextureTilingArchive::_internal_has_wrap() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_wrap() const {
  return _internal_has_wrap();
}
inline void Chart3DImageTextureTilingArchive::clear_wrap() {
  wrap_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSCH::TextureTilingWrap Chart3DImageTextureTilingArchive::_internal_wrap() const {
  return static_cast< ::TSCH::TextureTilingWrap >(wrap_);
}
inline ::TSCH::TextureTilingWrap Chart3DImageTextureTilingArchive::wrap() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.wrap)
  return _internal_wrap();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_wrap(::TSCH::TextureTilingWrap value) {
  assert(::TSCH::TextureTilingWrap_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  wrap_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_wrap(::TSCH::TextureTilingWrap value) {
  _internal_set_wrap(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.wrap)
}

// optional .TSCH.TextureTilingFace face = 4;
inline bool Chart3DImageTextureTilingArchive::_internal_has_face() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_face() const {
  return _internal_has_face();
}
inline void Chart3DImageTextureTilingArchive::clear_face() {
  face_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCH::TextureTilingFace Chart3DImageTextureTilingArchive::_internal_face() const {
  return static_cast< ::TSCH::TextureTilingFace >(face_);
}
inline ::TSCH::TextureTilingFace Chart3DImageTextureTilingArchive::face() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.face)
  return _internal_face();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_face(::TSCH::TextureTilingFace value) {
  assert(::TSCH::TextureTilingFace_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  face_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_face(::TSCH::TextureTilingFace value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.face)
}

// optional .TSCH.TextureTilingXPosition xposition = 5;
inline bool Chart3DImageTextureTilingArchive::_internal_has_xposition() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_xposition() const {
  return _internal_has_xposition();
}
inline void Chart3DImageTextureTilingArchive::clear_xposition() {
  xposition_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSCH::TextureTilingXPosition Chart3DImageTextureTilingArchive::_internal_xposition() const {
  return static_cast< ::TSCH::TextureTilingXPosition >(xposition_);
}
inline ::TSCH::TextureTilingXPosition Chart3DImageTextureTilingArchive::xposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.xposition)
  return _internal_xposition();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_xposition(::TSCH::TextureTilingXPosition value) {
  assert(::TSCH::TextureTilingXPosition_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  xposition_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_xposition(::TSCH::TextureTilingXPosition value) {
  _internal_set_xposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.xposition)
}

// optional .TSCH.TextureTilingYPosition yposition = 6;
inline bool Chart3DImageTextureTilingArchive::_internal_has_yposition() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_yposition() const {
  return _internal_has_yposition();
}
inline void Chart3DImageTextureTilingArchive::clear_yposition() {
  yposition_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSCH::TextureTilingYPosition Chart3DImageTextureTilingArchive::_internal_yposition() const {
  return static_cast< ::TSCH::TextureTilingYPosition >(yposition_);
}
inline ::TSCH::TextureTilingYPosition Chart3DImageTextureTilingArchive::yposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.yposition)
  return _internal_yposition();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_yposition(::TSCH::TextureTilingYPosition value) {
  assert(::TSCH::TextureTilingYPosition_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  yposition_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_yposition(::TSCH::TextureTilingYPosition value) {
  _internal_set_yposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.yposition)
}

// optional .TSCH.TextureTilingContinuity scontinuity = 7;
inline bool Chart3DImageTextureTilingArchive::_internal_has_scontinuity() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_scontinuity() const {
  return _internal_has_scontinuity();
}
inline void Chart3DImageTextureTilingArchive::clear_scontinuity() {
  scontinuity_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::_internal_scontinuity() const {
  return static_cast< ::TSCH::TextureTilingContinuity >(scontinuity_);
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::scontinuity() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.scontinuity)
  return _internal_scontinuity();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_scontinuity(::TSCH::TextureTilingContinuity value) {
  assert(::TSCH::TextureTilingContinuity_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  scontinuity_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_scontinuity(::TSCH::TextureTilingContinuity value) {
  _internal_set_scontinuity(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.scontinuity)
}

// optional .TSCH.TextureTilingContinuity tcontinuity = 8;
inline bool Chart3DImageTextureTilingArchive::_internal_has_tcontinuity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_tcontinuity() const {
  return _internal_has_tcontinuity();
}
inline void Chart3DImageTextureTilingArchive::clear_tcontinuity() {
  tcontinuity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::_internal_tcontinuity() const {
  return static_cast< ::TSCH::TextureTilingContinuity >(tcontinuity_);
}
inline ::TSCH::TextureTilingContinuity Chart3DImageTextureTilingArchive::tcontinuity() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.tcontinuity)
  return _internal_tcontinuity();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_tcontinuity(::TSCH::TextureTilingContinuity value) {
  assert(::TSCH::TextureTilingContinuity_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  tcontinuity_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_tcontinuity(::TSCH::TextureTilingContinuity value) {
  _internal_set_tcontinuity(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.tcontinuity)
}

// optional bool reveal = 9;
inline bool Chart3DImageTextureTilingArchive::_internal_has_reveal() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Chart3DImageTextureTilingArchive::has_reveal() const {
  return _internal_has_reveal();
}
inline void Chart3DImageTextureTilingArchive::clear_reveal() {
  reveal_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Chart3DImageTextureTilingArchive::_internal_reveal() const {
  return reveal_;
}
inline bool Chart3DImageTextureTilingArchive::reveal() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DImageTextureTilingArchive.reveal)
  return _internal_reveal();
}
inline void Chart3DImageTextureTilingArchive::_internal_set_reveal(bool value) {
  _has_bits_[0] |= 0x00000100u;
  reveal_ = value;
}
inline void Chart3DImageTextureTilingArchive::set_reveal(bool value) {
  _internal_set_reveal(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DImageTextureTilingArchive.reveal)
}

// -------------------------------------------------------------------

// Chart3DVectorArchive

// required float x = 1;
inline bool Chart3DVectorArchive::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chart3DVectorArchive::has_x() const {
  return _internal_has_x();
}
inline void Chart3DVectorArchive::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Chart3DVectorArchive::_internal_x() const {
  return x_;
}
inline float Chart3DVectorArchive::x() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DVectorArchive.x)
  return _internal_x();
}
inline void Chart3DVectorArchive::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Chart3DVectorArchive::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DVectorArchive.x)
}

// required float y = 2;
inline bool Chart3DVectorArchive::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chart3DVectorArchive::has_y() const {
  return _internal_has_y();
}
inline void Chart3DVectorArchive::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Chart3DVectorArchive::_internal_y() const {
  return y_;
}
inline float Chart3DVectorArchive::y() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DVectorArchive.y)
  return _internal_y();
}
inline void Chart3DVectorArchive::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Chart3DVectorArchive::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DVectorArchive.y)
}

// required float z = 3;
inline bool Chart3DVectorArchive::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chart3DVectorArchive::has_z() const {
  return _internal_has_z();
}
inline void Chart3DVectorArchive::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Chart3DVectorArchive::_internal_z() const {
  return z_;
}
inline float Chart3DVectorArchive::z() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DVectorArchive.z)
  return _internal_z();
}
inline void Chart3DVectorArchive::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Chart3DVectorArchive::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DVectorArchive.z)
}

// required float w = 4;
inline bool Chart3DVectorArchive::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chart3DVectorArchive::has_w() const {
  return _internal_has_w();
}
inline void Chart3DVectorArchive::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Chart3DVectorArchive::_internal_w() const {
  return w_;
}
inline float Chart3DVectorArchive::w() const {
  // @@protoc_insertion_point(field_get:TSCH.Chart3DVectorArchive.w)
  return _internal_w();
}
inline void Chart3DVectorArchive::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void Chart3DVectorArchive::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:TSCH.Chart3DVectorArchive.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSCH::TextureTilingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingMode>() {
  return ::TSCH::TextureTilingMode_descriptor();
}
template <> struct is_proto_enum< ::TSCH::TextureTilingFace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingFace>() {
  return ::TSCH::TextureTilingFace_descriptor();
}
template <> struct is_proto_enum< ::TSCH::TextureTilingWrap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingWrap>() {
  return ::TSCH::TextureTilingWrap_descriptor();
}
template <> struct is_proto_enum< ::TSCH::TextureTilingXPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingXPosition>() {
  return ::TSCH::TextureTilingXPosition_descriptor();
}
template <> struct is_proto_enum< ::TSCH::TextureTilingYPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingYPosition>() {
  return ::TSCH::TextureTilingYPosition_descriptor();
}
template <> struct is_proto_enum< ::TSCH::TextureTilingContinuity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::TextureTilingContinuity>() {
  return ::TSCH::TextureTilingContinuity_descriptor();
}
template <> struct is_proto_enum< ::TSCH::FillPropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::FillPropertyType>() {
  return ::TSCH::FillPropertyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCH3DArchives_2eproto
