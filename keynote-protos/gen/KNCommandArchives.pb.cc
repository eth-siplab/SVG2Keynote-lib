// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#include "KNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KN {
constexpr UIStateCommandGroupArchive::UIStateCommandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slidenodestoedit_()
  , template_slide_nodes_to_apply_()
  , thumbnailsizes_()
  , selectedslidenodes_()
  , restoreselectedslidenodes_()
  , property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , uistate_(nullptr){}
struct UIStateCommandGroupArchiveDefaultTypeInternal {
  constexpr UIStateCommandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIStateCommandGroupArchiveDefaultTypeInternal() {}
  union {
    UIStateCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIStateCommandGroupArchiveDefaultTypeInternal _UIStateCommandGroupArchive_default_instance_;
constexpr CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , ids_of_drawables_using_object_placeholder_geometry_()
  , sage_placeholder_tags_list_()
  , insert_build_descriptions_()
  , remove_build_descriptions_()
  , custom_format_keys_()
  , working_drawables_()
  , working_insert_build_descriptions_()
  , instructional_text_list_()
  , super_(nullptr)
  , slide_id_(nullptr)
  , args_list_(nullptr)
  , undo_archive_(nullptr)
  , geometry_of_object_placeholder_for_comparison_to_restore_link_(nullptr)
  , update_geometry_to_match_object_placeholder_(false)
  , is_pasting_(false)
  , remove_slide_specific_hyperlinks_(false)
  , saved_next_untitled_resolver_index_(0u){}
struct CommandSlideInsertDrawablesArchiveDefaultTypeInternal {
  constexpr CommandSlideInsertDrawablesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideInsertDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideInsertDrawablesArchiveDefaultTypeInternal _CommandSlideInsertDrawablesArchive_default_instance_;
constexpr CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , tags_()
  , old_tags_()
  , old_infos_()
  , super_(nullptr)
  , slide_id_(nullptr){}
struct CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal {
  constexpr CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetPlaceholdersForTagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal _CommandSlideSetPlaceholdersForTagsArchive_default_instance_;
constexpr CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , placeholder_id_(nullptr){}
struct CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal {
  constexpr CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSlideSetPlaceholderForTagArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal _CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_;
constexpr CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , placeholder_id_(nullptr)
  , original_id_(nullptr){}
struct CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal {
  constexpr CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePropagateSetPlaceholderForTagArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal _CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_;
constexpr CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorteddrawables_()
  , placeholdertags_()
  , insert_build_descriptions_()
  , remove_build_descriptions_()
  , drawables_using_object_placeholder_geometry_()
  , inverse_insert_hyperlink_commands_()
  , drawable_indexes_for_undo_()
  , instructional_text_list_()
  , super_(nullptr)
  , slide_id_(nullptr)
  , args_list_(nullptr){}
struct CommandSlideRemoveDrawableArchiveDefaultTypeInternal {
  constexpr CommandSlideRemoveDrawableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideRemoveDrawableArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideRemoveDrawableArchiveDefaultTypeInternal _CommandSlideRemoveDrawableArchive_default_instance_;
constexpr CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_ordered_infos_()
  , args_list_()
  , old_ordered_infos_on_slide_for_undo_()
  , super_(nullptr)
  , slide_id_(nullptr){}
struct CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal {
  constexpr CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveDrawableZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSlideMoveDrawableZOrderArchive_default_instance_;
constexpr CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , slide_node_id_path_(nullptr)
  , old_value_(false)
  , value_(false){}
struct CommandSlideNodeSetPropertyArchiveDefaultTypeInternal {
  constexpr CommandSlideNodeSetPropertyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideNodeSetPropertyArchiveDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetPropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideNodeSetPropertyArchiveDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_default_instance_;
constexpr CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , slide_node_id_path_(nullptr)
  , old_value_(false)
  , value_(false){}
struct CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal {
  constexpr CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal() {}
  union {
    CommandSlideNodeSetViewStatePropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal _CommandSlideNodeSetViewStatePropertyArchive_default_instance_;
constexpr CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_id_path_(nullptr)
  , old_fill_(nullptr)
  , new_fill_(nullptr){}
struct CommandSlideSetBackgroundFillArchiveDefaultTypeInternal {
  constexpr CommandSlideSetBackgroundFillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideSetBackgroundFillArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetBackgroundFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideSetBackgroundFillArchiveDefaultTypeInternal _CommandSlideSetBackgroundFillArchive_default_instance_;
constexpr CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_id_path_(nullptr)
  , slide_style_(nullptr)
  , old_slide_style_(nullptr){}
struct CommandSlideSetStyleArchiveDefaultTypeInternal {
  constexpr CommandSlideSetStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideSetStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSlideSetStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideSetStyleArchiveDefaultTypeInternal _CommandSlideSetStyleArchive_default_instance_;
constexpr CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , show_(nullptr)
  , old_recording_(nullptr)
  , old_modification_date_(nullptr)
  , new_modification_date_(nullptr)
  , old_is_recording_out_of_sync_(false)
  , new_is_recording_out_of_sync_(false){}
struct CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal {
  constexpr CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowMarkOutOfSyncRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingArchive_default_instance_;
constexpr CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , out_of_sync_token_(nullptr){}
struct CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal {
  constexpr CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal() {}
  union {
    CommandShowMarkOutOfSyncRecordingIfNeededArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_;
constexpr CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , show_(nullptr)
  , old_recording_(nullptr){}
struct CommandShowRemoveRecordingArchiveDefaultTypeInternal {
  constexpr CommandShowRemoveRecordingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowRemoveRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowRemoveRecordingArchiveDefaultTypeInternal _CommandShowRemoveRecordingArchive_default_instance_;
constexpr CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , show_(nullptr)
  , replacement_recording_(nullptr)
  , old_recording_(nullptr){}
struct CommandShowReplaceRecordingArchiveDefaultTypeInternal {
  constexpr CommandShowReplaceRecordingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowReplaceRecordingArchiveDefaultTypeInternal() {}
  union {
    CommandShowReplaceRecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowReplaceRecordingArchiveDefaultTypeInternal _CommandShowReplaceRecordingArchive_default_instance_;
constexpr CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_value_(nullptr)
  , double_value_(0)
  , bool_value_(false)
  , show_mode_value_(0)
{}
struct CommandShowSetValueArchive_PropertyValueDefaultTypeInternal {
  constexpr CommandShowSetValueArchive_PropertyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowSetValueArchive_PropertyValueDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowSetValueArchive_PropertyValueDefaultTypeInternal _CommandShowSetValueArchive_PropertyValue_default_instance_;
constexpr CommandShowSetValueArchive::CommandShowSetValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , show_(nullptr)
  , old_value_(nullptr)
  , new_value_(nullptr){}
struct CommandShowSetValueArchiveDefaultTypeInternal {
  constexpr CommandShowSetValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowSetValueArchiveDefaultTypeInternal _CommandShowSetValueArchive_default_instance_;
constexpr CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_nodes_being_inserted_()
  , inserted_args_list_()
  , ids_of_slide_nodes_with_depth_changes_()
  , depths_of_slide_nodes_with_depth_changes_()
  , old_depths_of_slide_nodes_with_depth_changes_()
  , slide_nodes_for_depth_fix_up_()
  , depths_of_slide_nodes_for_depth_fix_up_()
  , old_depths_of_slide_nodes_for_depth_fix_up_()
  , template_slide_nodes_being_inserted_()
  , custom_format_keys_()
  , collapsed_state_of_slide_nodes_being_inserted_()
  , working_slide_nodes_being_inserted_()
  , super_(nullptr)
  , undo_archive_(nullptr)
  , kind_(0)
{}
struct CommandShowInsertSlideArchiveDefaultTypeInternal {
  constexpr CommandShowInsertSlideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowInsertSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowInsertSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowInsertSlideArchiveDefaultTypeInternal _CommandShowInsertSlideArchive_default_instance_;
constexpr CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_nodes_being_moved_linearly_()
  , rearranged_args_list_()
  , ids_of_slide_nodes_with_depth_changes_()
  , depths_of_slide_nodes_with_depth_changes_()
  , old_depths_of_slide_nodes_with_depth_changes_()
  , slide_nodes_for_depth_fix_up_()
  , depths_of_slide_nodes_for_depth_fix_up_()
  , old_depths_of_slide_nodes_for_depth_fix_up_()
  , super_(nullptr){}
struct CommandShowMoveSlideArchiveDefaultTypeInternal {
  constexpr CommandShowMoveSlideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowMoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowMoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowMoveSlideArchiveDefaultTypeInternal _CommandShowMoveSlideArchive_default_instance_;
constexpr CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_nodes_being_removed_()
  , removed_args_list_()
  , ids_of_slide_nodes_with_depth_changes_()
  , depths_of_slide_nodes_with_depth_changes_()
  , old_depths_of_slide_nodes_with_depth_changes_()
  , slide_nodes_for_depth_fix_up_()
  , depths_of_slide_nodes_for_depth_fix_up_()
  , old_depths_of_slide_nodes_for_depth_fix_up_()
  , collapsed_state_of_slide_nodes_being_removed_()
  , super_(nullptr){}
struct CommandShowRemoveSlideArchiveDefaultTypeInternal {
  constexpr CommandShowRemoveSlideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowRemoveSlideArchiveDefaultTypeInternal() {}
  union {
    CommandShowRemoveSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowRemoveSlideArchiveDefaultTypeInternal _CommandShowRemoveSlideArchive_default_instance_;
constexpr CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : styles_(){}
struct CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal {
  constexpr CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal() {}
  union {
    CommandShowChangeThemeArchive_IdentifierToStyleMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal _CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_;
constexpr CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : template_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_template_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , show_(nullptr)
  , theme_(nullptr)
  , old_theme_(nullptr)
  , identifier_to_style_map_(nullptr)
  , old_identifier_to_style_map_(nullptr){}
struct CommandShowChangeThemeArchiveDefaultTypeInternal {
  constexpr CommandShowChangeThemeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowChangeThemeArchiveDefaultTypeInternal() {}
  union {
    CommandShowChangeThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowChangeThemeArchiveDefaultTypeInternal _CommandShowChangeThemeArchive_default_instance_;
constexpr CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , size_(nullptr){}
struct CommandShowChangeSlideSizeArchiveDefaultTypeInternal {
  constexpr CommandShowChangeSlideSizeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowChangeSlideSizeArchiveDefaultTypeInternal() {}
  union {
    CommandShowChangeSlideSizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowChangeSlideSizeArchiveDefaultTypeInternal _CommandShowChangeSlideSizeArchive_default_instance_;
constexpr CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , path_source_(nullptr)
  , old_path_source_(nullptr){}
struct CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal {
  constexpr CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal() {}
  union {
    CommandSetThemeCustomEffectTimingCurveArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal _CommandSetThemeCustomEffectTimingCurveArchive_default_instance_;
constexpr CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : template_slides_()
  , previous_indexes_keys_()
  , previous_indexes_values_()
  , final_template_arrangement_()
  , super_(nullptr){}
struct CommandMoveTemplatesArchiveDefaultTypeInternal {
  constexpr CommandMoveTemplatesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveTemplatesArchiveDefaultTypeInternal() {}
  union {
    CommandMoveTemplatesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveTemplatesArchiveDefaultTypeInternal _CommandMoveTemplatesArchive_default_instance_;
constexpr CommandInsertTemplateArchive::CommandInsertTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_template_change_commands_()
  , super_(nullptr)
  , undo_replacement_template_slide_node_(nullptr)
  , set_inserted_slide_as_default_template_slide_(false){}
struct CommandInsertTemplateArchiveDefaultTypeInternal {
  constexpr CommandInsertTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInsertTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandInsertTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInsertTemplateArchiveDefaultTypeInternal _CommandInsertTemplateArchive_default_instance_;
constexpr CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , previous_classic_theme_records_()
  , super_(nullptr)
  , was_inserted_with_drop_(false){}
struct CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal {
  constexpr CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandPrimitiveInsertTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal _CommandPrimitiveInsertTemplateArchive_default_instance_;
constexpr CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : template_change_commands_()
  , super_(nullptr)
  , replacement_template_slide_node_(nullptr)
  , default_template_slide_node_was_replaced_(false){}
struct CommandRemoveTemplateArchiveDefaultTypeInternal {
  constexpr CommandRemoveTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRemoveTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRemoveTemplateArchiveDefaultTypeInternal _CommandRemoveTemplateArchive_default_instance_;
constexpr CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previous_classic_theme_records_()
  , super_(nullptr){}
struct CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal {
  constexpr CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandPrimitiveRemoveTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal _CommandPrimitiveRemoveTemplateArchive_default_instance_;
constexpr CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_tuples_to_update_()
  , super_(nullptr)
  , insert_build_description_(nullptr)
  , identifier_for_chunk_to_insert_after_(nullptr)
  , should_create_chunks_(false)
  , was_initialized_over_the_wire_(false)
  , has_been_committed_(false){}
struct CommandSlideInsertBuildArchiveDefaultTypeInternal {
  constexpr CommandSlideInsertBuildArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideInsertBuildArchiveDefaultTypeInternal _CommandSlideInsertBuildArchive_default_instance_;
constexpr InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_to_insert_()
  , identifers_for_chunks_to_insert_after_()
  , tuples_to_update_()
  , fallback_chunk_identifiers_()
  , slide_id_(nullptr)
  , build_to_insert_(nullptr)
  , should_assign_chunk_identifiers_(false)
  , is_for_paste_(false){}
struct InsertBuildDescriptionArchiveDefaultTypeInternal {
  constexpr InsertBuildDescriptionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertBuildDescriptionArchiveDefaultTypeInternal() {}
  union {
    InsertBuildDescriptionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertBuildDescriptionArchiveDefaultTypeInternal _InsertBuildDescriptionArchive_default_instance_;
constexpr UndoObjectArchive::UndoObjectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct UndoObjectArchiveDefaultTypeInternal {
  constexpr UndoObjectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoObjectArchiveDefaultTypeInternal() {}
  union {
    UndoObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
constexpr CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_to_insert_()
  , identifiers_for_chunks_to_insert_after_()
  , old_tuples_to_update_()
  , fallback_chunk_identifiers_()
  , super_(nullptr)
  , remove_build_description_(nullptr)
  , build_(nullptr){}
struct CommandSlideRemoveBuildArchiveDefaultTypeInternal {
  constexpr CommandSlideRemoveBuildArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideRemoveBuildArchiveDefaultTypeInternal _CommandSlideRemoveBuildArchive_default_instance_;
constexpr RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_to_update_()
  , slide_id_(nullptr)
  , build_id_(nullptr)
  , should_remove_chunks_(false)
  , should_remove_chunk_identifiers_(false){}
struct RemoveBuildDescriptionArchiveDefaultTypeInternal {
  constexpr RemoveBuildDescriptionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveBuildDescriptionArchiveDefaultTypeInternal() {}
  union {
    RemoveBuildDescriptionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveBuildDescriptionArchiveDefaultTypeInternal _RemoveBuildDescriptionArchive_default_instance_;
constexpr CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_to_update_()
  , old_tuples_to_update_()
  , super_(nullptr)
  , slide_id_(nullptr)
  , chunk_to_insert_(nullptr)
  , identifier_for_chunk_to_insert_after_(nullptr)
  , needs_selection_update_(false)
  , should_assign_chunk_identifier_(false){}
struct CommandSlideInsertBuildChunkArchiveDefaultTypeInternal {
  constexpr CommandSlideInsertBuildChunkArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideInsertBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideInsertBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideInsertBuildChunkArchiveDefaultTypeInternal _CommandSlideInsertBuildChunkArchive_default_instance_;
constexpr CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_to_update_()
  , old_tuples_to_update_()
  , super_(nullptr)
  , slide_id_(nullptr)
  , removed_chunk_(nullptr)
  , identifier_for_chunk_to_remove_(nullptr)
  , identifier_for_chunk_to_insert_after_(nullptr)
  , needs_selection_update_(false){}
struct CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal {
  constexpr CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal() {}
  union {
    CommandSlideRemoveBuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal _CommandSlideRemoveBuildChunkArchive_default_instance_;
constexpr CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifiers_for_chunks_to_move_()
  , identifiers_for_chunks_to_move_after_()
  , identifiers_for_chunks_to_move_after_for_undo_()
  , tuples_to_update_()
  , old_tuples_to_update_()
  , identifiers_for_chunks_to_move_including_clustered_inactive_chunks_()
  , super_(nullptr){}
struct CommandSlideMoveBuildChunksArchiveDefaultTypeInternal {
  constexpr CommandSlideMoveBuildChunksArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideMoveBuildChunksArchiveDefaultTypeInternal() {}
  union {
    CommandSlideMoveBuildChunksArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideMoveBuildChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildChunksArchive_default_instance_;
constexpr CommandBuildSetValueArchive::CommandBuildSetValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_to_add_()
  , identifiers_for_chunks_to_insert_after_()
  , identifiers_for_chunks_to_remove_()
  , tuples_to_update_()
  , old_tuples_to_update_for_sub_commands_()
  , identifiers_for_added_chunks_()
  , generated_identifiers_()
  , removed_chunks_()
  , identifiers_for_chunks_prior_to_removed_chunks_()
  , old_chunk_identifiers_()
  , chunks_removed_during_undo_()
  , super_(nullptr)
  , tuple_(nullptr)
  , old_tuple_for_main_property_(nullptr)
  , old_chunk_id_seed_(0u){}
struct CommandBuildSetValueArchiveDefaultTypeInternal {
  constexpr CommandBuildSetValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandBuildSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandBuildSetValueArchiveDefaultTypeInternal _CommandBuildSetValueArchive_default_instance_;
constexpr CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_to_update_()
  , old_tuples_to_update_()
  , super_(nullptr)
  , build_id_(nullptr){}
struct CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal {
  constexpr CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal() {}
  union {
    CommandBuildUpdateChunkReferentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal _CommandBuildUpdateChunkReferentsArchive_default_instance_;
constexpr CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_ids_()
  , expected_delivery_style_tuples_()
  , chunks_to_add_()
  , identifiers_for_chunks_to_insert_after_()
  , identifiers_for_chunks_to_remove_()
  , tuples_to_update_()
  , old_tuples_to_update_()
  , identifiers_for_added_chunks_()
  , generated_identifiers_()
  , removed_chunks_()
  , identifiers_for_chunks_prior_to_removed_chunks_()
  , old_delivery_style_tuples_()
  , old_chunk_id_seeds_()
  , old_chunk_identifiers_()
  , working_builds_()
  , chunks_removed_during_undo_()
  , chunks_added_during_undo_()
  , super_(nullptr)
  , slide_id_(nullptr)
  , needs_async_process_changes_selection_update_(false){}
struct CommandBuildUpdateChunkCountArchiveDefaultTypeInternal {
  constexpr CommandBuildUpdateChunkCountArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandBuildUpdateChunkCountArchiveDefaultTypeInternal() {}
  union {
    CommandBuildUpdateChunkCountArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandBuildUpdateChunkCountArchiveDefaultTypeInternal _CommandBuildUpdateChunkCountArchive_default_instance_;
constexpr CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuples_to_update_()
  , old_tuples_to_update_()
  , super_(nullptr){}
struct CommandBuildChunkSetValueArchiveDefaultTypeInternal {
  constexpr CommandBuildChunkSetValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandBuildChunkSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandBuildChunkSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandBuildChunkSetValueArchiveDefaultTypeInternal _CommandBuildChunkSetValueArchive_default_instance_;
constexpr CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , slide_node_id_path_(nullptr)
  , old_attributes_(nullptr)
  , attributes_(nullptr){}
struct CommandTransitionSetValueArchiveDefaultTypeInternal {
  constexpr CommandTransitionSetValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTransitionSetValueArchiveDefaultTypeInternal() {}
  union {
    CommandTransitionSetValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTransitionSetValueArchiveDefaultTypeInternal _CommandTransitionSetValueArchive_default_instance_;
constexpr CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_of_slide_nodes_to_skip_()
  , ids_of_slide_nodes_already_correct_()
  , super_(nullptr)
  , slide_numbers_visible_(false)
  , is_undo_(false){}
struct CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal {
  constexpr CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal() {}
  union {
    CommandShowSetSlideNumberVisibilityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal _CommandShowSetSlideNumberVisibilityArchive_default_instance_;
constexpr CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , template_id_(nullptr)
  , is_body_(false){}
struct CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal {
  constexpr CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSetThumbnailTextArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal _CommandTemplateSetThumbnailTextArchive_default_instance_;
constexpr CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_paragraph_styles_()
  , new_list_styles_()
  , old_paragraph_styles_()
  , old_list_styles_()
  , super_(nullptr)
  , template_id_(nullptr){}
struct CommandTemplateSetBodyStylesArchiveDefaultTypeInternal {
  constexpr CommandTemplateSetBodyStylesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTemplateSetBodyStylesArchiveDefaultTypeInternal() {}
  union {
    CommandTemplateSetBodyStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTemplateSetBodyStylesArchiveDefaultTypeInternal _CommandTemplateSetBodyStylesArchive_default_instance_;
constexpr CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_id_path_(nullptr)
  , template_slide_node_(nullptr)
  , old_template_slide_node_(nullptr)
  , target_prototype_(nullptr)
  , is_undo_redo_(false){}
struct CommandChangeTemplateSlideArchiveDefaultTypeInternal {
  constexpr CommandChangeTemplateSlideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChangeTemplateSlideArchiveDefaultTypeInternal() {}
  union {
    CommandChangeTemplateSlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChangeTemplateSlideArchiveDefaultTypeInternal _CommandChangeTemplateSlideArchive_default_instance_;
constexpr CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_id_path_(nullptr)
  , template_id_(nullptr)
  , old_template_slide_node_(nullptr){}
struct CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal {
  constexpr CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal() {}
  union {
    CommandSlidePrimitiveSetTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal _CommandSlidePrimitiveSetTemplateArchive_default_instance_;
constexpr CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , slide_id_path_(nullptr){}
struct CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal {
  constexpr CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal() {}
  union {
    CommandSlideResetTemplateBackgroundObjectsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal _CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_;
constexpr CommandShowSetSoundtrack::CommandShowSetSoundtrack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , show_(nullptr)
  , soundtrack_(nullptr)
  , old_soundtrack_(nullptr){}
struct CommandShowSetSoundtrackDefaultTypeInternal {
  constexpr CommandShowSetSoundtrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandShowSetSoundtrackDefaultTypeInternal() {}
  union {
    CommandShowSetSoundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandShowSetSoundtrackDefaultTypeInternal _CommandShowSetSoundtrack_default_instance_;
constexpr CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : media_reference_values_()
  , double_value_(0)
  , mode_value_(0)
{}
struct CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal {
  constexpr CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal _CommandSoundtrackSetValue_PropertyValue_default_instance_;
constexpr CommandSoundtrackSetValue::CommandSoundtrackSetValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , soundtrack_id_(nullptr)
  , old_value_(nullptr)
  , new_value_(nullptr){}
struct CommandSoundtrackSetValueDefaultTypeInternal {
  constexpr CommandSoundtrackSetValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSoundtrackSetValueDefaultTypeInternal() {}
  union {
    CommandSoundtrackSetValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSoundtrackSetValueDefaultTypeInternal _CommandSoundtrackSetValue_default_instance_;
constexpr CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_placement_operation_args_()
  , old_child_infos_for_undo_()
  , super_(nullptr)
  , slide_id_(nullptr){}
struct CommandSlideUpdateTemplateDrawablesDefaultTypeInternal {
  constexpr CommandSlideUpdateTemplateDrawablesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSlideUpdateTemplateDrawablesDefaultTypeInternal() {}
  union {
    CommandSlideUpdateTemplateDrawables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSlideUpdateTemplateDrawablesDefaultTypeInternal _CommandSlideUpdateTemplateDrawables_default_instance_;
constexpr ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , previous_legend_offset_(nullptr)
  , previous_legend_size_(nullptr)
  , adjusted_legend_offset_(nullptr)
  , adjusted_legend_size_(nullptr){}
struct ChartInfoGeometryCommandArchiveDefaultTypeInternal {
  constexpr ChartInfoGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ChartInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartInfoGeometryCommandArchiveDefaultTypeInternal _ChartInfoGeometryCommandArchive_default_instance_;
constexpr CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_chunk_ids_()
  , action_build_ids_()
  , originally_selected_drawable_uuids_()
  , transformer_helper_(nullptr){}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr CanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
constexpr ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActionGhostSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ActionGhostSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionGhostSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ActionGhostSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionGhostSelectionTransformerArchiveDefaultTypeInternal _ActionGhostSelectionTransformerArchive_default_instance_;
constexpr DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_selection_(nullptr){}
struct DocumentSelectionTransformerArchiveDefaultTypeInternal {
  constexpr DocumentSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
constexpr NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_helper_(nullptr){}
struct NoteCanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr NoteCanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoteCanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    NoteCanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoteCanvasSelectionTransformerArchiveDefaultTypeInternal _NoteCanvasSelectionTransformerArchive_default_instance_;
constexpr OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : canvas_selection_transformer_(nullptr)
  , storage_uuid_path_(nullptr){}
struct OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    OutlineCanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal _OutlineCanvasSelectionTransformerArchive_default_instance_;
constexpr SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slide_nodes_()
  , slide_node_to_edit_(nullptr)
  , slide_collection_is_theme_(false)
  , previous_primary_selected_index_(0u){}
struct SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal {
  constexpr SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerHelperArchive_default_instance_;
constexpr SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_helper_(nullptr){}
struct SlideCollectionSelectionTransformerArchiveDefaultTypeInternal {
  constexpr SlideCollectionSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlideCollectionSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlideCollectionSelectionTransformerArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerArchive_default_instance_;
constexpr OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_range_addresses_()
  , transformer_helper_(nullptr)
  , can_have_range_in_selected_paragraph_(false){}
struct OutlineSelectionTransformerArchiveDefaultTypeInternal {
  constexpr OutlineSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutlineSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    OutlineSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutlineSelectionTransformerArchiveDefaultTypeInternal _OutlineSelectionTransformerArchive_default_instance_;
}  // namespace KN
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KNCommandArchives_2eproto[61];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_KNCommandArchives_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KNCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KNCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, property_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, slidenodestoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, template_slide_nodes_to_apply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateCommandGroupArchive, restoreselectedslidenodes_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, working_drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, update_geometry_to_match_object_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, ids_of_drawables_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, sage_placeholder_tags_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, instructional_text_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, undo_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, is_pasting_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, working_insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, remove_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, remove_slide_specific_hyperlinks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, saved_next_untitled_resolver_index_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertDrawablesArchive, geometry_of_object_placeholder_for_comparison_to_restore_link_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  5,
  ~0u,
  ~0u,
  ~0u,
  3,
  6,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, tags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, old_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetPlaceholdersForTagsArchive, old_tags_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, placeholder_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSlideSetPlaceholderForTagArchive, tag_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, placeholder_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePropagateSetPlaceholderForTagArchive, original_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, sorteddrawables_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, drawable_indexes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, placeholdertags_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, instructional_text_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, insert_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, remove_build_descriptions_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, drawables_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveDrawableArchive, inverse_insert_hyperlink_commands_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, old_ordered_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveDrawableZOrderArchive, old_ordered_infos_on_slide_for_undo_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetPropertyArchive, value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideNodeSetViewStatePropertyArchive, value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, old_fill_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetBackgroundFillArchive, new_fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideSetStyleArchive, old_slide_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, old_recording_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, old_is_recording_out_of_sync_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, new_is_recording_out_of_sync_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, old_modification_date_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingArchive, new_modification_date_),
  0,
  1,
  2,
  5,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive, out_of_sync_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveRecordingArchive, old_recording_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, replacement_recording_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowReplaceRecordingArchive, old_recording_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, bool_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, show_mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive_PropertyValue, size_value_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetValueArchive, new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, working_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, inserted_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, old_depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, kind_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, template_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, collapsed_state_of_slide_nodes_being_inserted_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowInsertSlideArchive, undo_archive_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, slide_nodes_being_moved_linearly_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, rearranged_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowMoveSlideArchive, old_depths_of_slide_nodes_for_depth_fix_up_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, slide_nodes_being_removed_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, removed_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, ids_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, old_depths_of_slide_nodes_with_depth_changes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, old_depths_of_slide_nodes_for_depth_fix_up_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowRemoveSlideArchive, collapsed_state_of_slide_nodes_being_removed_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap, styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, old_theme_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, template_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, old_template_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeThemeArchive, old_identifier_to_style_map_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowChangeSlideSizeArchive, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, name_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, path_source_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSetThemeCustomEffectTimingCurveArchive, old_path_source_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, template_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, previous_indexes_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, previous_indexes_values_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandMoveTemplatesArchive, final_template_arrangement_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, undo_template_change_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, set_inserted_slide_as_default_template_slide_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandInsertTemplateArchive, undo_replacement_template_slide_node_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, was_inserted_with_drop_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveInsertTemplateArchive, previous_classic_theme_records_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, replacement_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, template_change_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandRemoveTemplateArchive, default_template_slide_node_was_replaced_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandPrimitiveRemoveTemplateArchive, previous_classic_theme_records_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, insert_build_description_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, should_create_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, was_initialized_over_the_wire_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildArchive, has_been_committed_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, build_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, chunks_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, should_assign_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, identifers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, fallback_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::InsertBuildDescriptionArchive, is_for_paste_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::UndoObjectArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, remove_build_description_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, build_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, chunks_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildArchive, fallback_chunk_identifiers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, should_remove_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, should_remove_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::RemoveBuildDescriptionArchive, tuples_to_update_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, chunk_to_insert_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, needs_selection_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideInsertBuildChunkArchive, should_assign_chunk_identifier_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, removed_chunk_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, identifier_for_chunk_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, identifier_for_chunk_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideRemoveBuildChunkArchive, needs_selection_update_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, identifiers_for_chunks_to_move_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, identifiers_for_chunks_to_move_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, identifiers_for_chunks_to_move_after_for_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideMoveBuildChunksArchive, identifiers_for_chunks_to_move_including_clustered_inactive_chunks_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, tuple_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, chunks_to_add_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, identifiers_for_chunks_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, old_tuple_for_main_property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, old_tuples_to_update_for_sub_commands_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, identifiers_for_added_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, generated_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, identifiers_for_chunks_prior_to_removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, old_chunk_id_seed_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, old_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildSetValueArchive, chunks_removed_during_undo_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkReferentsArchive, old_tuples_to_update_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, drawable_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, expected_delivery_style_tuples_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, chunks_to_add_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, identifiers_for_chunks_to_insert_after_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, identifiers_for_chunks_to_remove_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, needs_async_process_changes_selection_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, old_tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, identifiers_for_added_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, generated_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, identifiers_for_chunks_prior_to_removed_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, old_delivery_style_tuples_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, old_chunk_id_seeds_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, old_chunk_identifiers_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, working_builds_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, chunks_removed_during_undo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildUpdateChunkCountArchive, chunks_added_during_undo_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, tuples_to_update_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandBuildChunkSetValueArchive, old_tuples_to_update_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, slide_node_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, old_attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTransitionSetValueArchive, property_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, slide_numbers_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, ids_of_slide_nodes_to_skip_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, ids_of_slide_nodes_already_correct_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSlideNumberVisibilityArchive, is_undo_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, is_body_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, new_text_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetThumbnailTextArchive, old_text_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, new_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, new_list_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, old_paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandTemplateSetBodyStylesArchive, old_list_styles_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, old_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, is_undo_redo_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandChangeTemplateSlideArchive, target_prototype_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, slide_id_path_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, template_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlidePrimitiveSetTemplateArchive, old_template_slide_node_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideResetTemplateBackgroundObjectsArchive, slide_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, show_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandShowSetSoundtrack, old_soundtrack_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, mode_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue_PropertyValue, media_reference_values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, soundtrack_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, property_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, old_value_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSoundtrackSetValue, new_value_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, super_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, id_placement_operation_args_),
  PROTOBUF_FIELD_OFFSET(::KN::CommandSlideUpdateTemplateDrawables, old_child_infos_for_undo_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, previous_legend_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, previous_legend_size_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, adjusted_legend_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::ChartInfoGeometryCommandArchive, adjusted_legend_size_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, build_chunk_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, action_build_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionTransformerArchive, originally_selected_drawable_uuids_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::ActionGhostSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentSelectionTransformerArchive, document_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::NoteCanvasSelectionTransformerArchive, transformer_helper_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, canvas_selection_transformer_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineCanvasSelectionTransformerArchive, storage_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, slide_node_to_edit_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, slide_collection_is_theme_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerHelperArchive, previous_primary_selected_index_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionTransformerArchive, transformer_helper_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, can_have_range_in_selected_paragraph_),
  PROTOBUF_FIELD_OFFSET(::KN::OutlineSelectionTransformerArchive, selection_range_addresses_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::KN::UIStateCommandGroupArchive)},
  { 21, 44, sizeof(::KN::CommandSlideInsertDrawablesArchive)},
  { 62, 73, sizeof(::KN::CommandSlideSetPlaceholdersForTagsArchive)},
  { 79, 87, sizeof(::KN::CommandTemplateSlideSetPlaceholderForTagArchive)},
  { 90, 98, sizeof(::KN::CommandSlidePropagateSetPlaceholderForTagArchive)},
  { 101, 117, sizeof(::KN::CommandSlideRemoveDrawableArchive)},
  { 128, 138, sizeof(::KN::CommandSlideMoveDrawableZOrderArchive)},
  { 143, 153, sizeof(::KN::CommandSlideNodeSetPropertyArchive)},
  { 158, 168, sizeof(::KN::CommandSlideNodeSetViewStatePropertyArchive)},
  { 173, 182, sizeof(::KN::CommandSlideSetBackgroundFillArchive)},
  { 186, 195, sizeof(::KN::CommandSlideSetStyleArchive)},
  { 199, 211, sizeof(::KN::CommandShowMarkOutOfSyncRecordingArchive)},
  { 218, 225, sizeof(::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive)},
  { 227, 235, sizeof(::KN::CommandShowRemoveRecordingArchive)},
  { 238, 247, sizeof(::KN::CommandShowReplaceRecordingArchive)},
  { 251, 260, sizeof(::KN::CommandShowSetValueArchive_PropertyValue)},
  { 264, 274, sizeof(::KN::CommandShowSetValueArchive)},
  { 279, 299, sizeof(::KN::CommandShowInsertSlideArchive)},
  { 314, 328, sizeof(::KN::CommandShowMoveSlideArchive)},
  { 337, 352, sizeof(::KN::CommandShowRemoveSlideArchive)},
  { 362, -1, sizeof(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap)},
  { 368, 381, sizeof(::KN::CommandShowChangeThemeArchive)},
  { 389, 396, sizeof(::KN::CommandShowChangeSlideSizeArchive)},
  { 398, 407, sizeof(::KN::CommandSetThemeCustomEffectTimingCurveArchive)},
  { 411, 421, sizeof(::KN::CommandMoveTemplatesArchive)},
  { 426, 435, sizeof(::KN::CommandInsertTemplateArchive)},
  { 439, 448, sizeof(::KN::CommandPrimitiveInsertTemplateArchive)},
  { 452, 461, sizeof(::KN::CommandRemoveTemplateArchive)},
  { 465, 472, sizeof(::KN::CommandPrimitiveRemoveTemplateArchive)},
  { 474, 486, sizeof(::KN::CommandSlideInsertBuildArchive)},
  { 493, 506, sizeof(::KN::InsertBuildDescriptionArchive)},
  { 514, 520, sizeof(::KN::UndoObjectArchive)},
  { 521, 533, sizeof(::KN::CommandSlideRemoveBuildArchive)},
  { 540, 550, sizeof(::KN::RemoveBuildDescriptionArchive)},
  { 555, 568, sizeof(::KN::CommandSlideInsertBuildChunkArchive)},
  { 576, 589, sizeof(::KN::CommandSlideRemoveBuildChunkArchive)},
  { 597, 609, sizeof(::KN::CommandSlideMoveBuildChunksArchive)},
  { 616, 636, sizeof(::KN::CommandBuildSetValueArchive)},
  { 651, 660, sizeof(::KN::CommandBuildUpdateChunkReferentsArchive)},
  { 664, 689, sizeof(::KN::CommandBuildUpdateChunkCountArchive)},
  { 709, 717, sizeof(::KN::CommandBuildChunkSetValueArchive)},
  { 720, 730, sizeof(::KN::CommandTransitionSetValueArchive)},
  { 735, 745, sizeof(::KN::CommandShowSetSlideNumberVisibilityArchive)},
  { 750, 760, sizeof(::KN::CommandTemplateSetThumbnailTextArchive)},
  { 765, 776, sizeof(::KN::CommandTemplateSetBodyStylesArchive)},
  { 782, 793, sizeof(::KN::CommandChangeTemplateSlideArchive)},
  { 799, 808, sizeof(::KN::CommandSlidePrimitiveSetTemplateArchive)},
  { 812, 819, sizeof(::KN::CommandSlideResetTemplateBackgroundObjectsArchive)},
  { 821, 830, sizeof(::KN::CommandShowSetSoundtrack)},
  { 834, 842, sizeof(::KN::CommandSoundtrackSetValue_PropertyValue)},
  { 845, 855, sizeof(::KN::CommandSoundtrackSetValue)},
  { 860, 869, sizeof(::KN::CommandSlideUpdateTemplateDrawables)},
  { 873, 883, sizeof(::KN::ChartInfoGeometryCommandArchive)},
  { 888, 897, sizeof(::KN::CanvasSelectionTransformerArchive)},
  { 901, -1, sizeof(::KN::ActionGhostSelectionTransformerArchive)},
  { 906, 912, sizeof(::KN::DocumentSelectionTransformerArchive)},
  { 913, 919, sizeof(::KN::NoteCanvasSelectionTransformerArchive)},
  { 920, 927, sizeof(::KN::OutlineCanvasSelectionTransformerArchive)},
  { 929, 938, sizeof(::KN::SlideCollectionSelectionTransformerHelperArchive)},
  { 942, 948, sizeof(::KN::SlideCollectionSelectionTransformerArchive)},
  { 949, 957, sizeof(::KN::OutlineSelectionTransformerArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_UIStateCommandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideInsertDrawablesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideSetPlaceholdersForTagsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideRemoveDrawableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideMoveDrawableZOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideNodeSetPropertyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideNodeSetViewStatePropertyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideSetBackgroundFillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideSetStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowMarkOutOfSyncRecordingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowRemoveRecordingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowReplaceRecordingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowSetValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowInsertSlideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowMoveSlideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowRemoveSlideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowChangeThemeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowChangeSlideSizeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSetThemeCustomEffectTimingCurveArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandMoveTemplatesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandInsertTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandPrimitiveInsertTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandRemoveTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandPrimitiveRemoveTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideInsertBuildArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_InsertBuildDescriptionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_UndoObjectArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideRemoveBuildArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_RemoveBuildDescriptionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideInsertBuildChunkArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideRemoveBuildChunkArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideMoveBuildChunksArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandBuildSetValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandBuildUpdateChunkReferentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandBuildUpdateChunkCountArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandBuildChunkSetValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandTransitionSetValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowSetSlideNumberVisibilityArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandTemplateSetThumbnailTextArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandTemplateSetBodyStylesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandChangeTemplateSlideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlidePrimitiveSetTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandShowSetSoundtrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSoundtrackSetValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CommandSlideUpdateTemplateDrawables_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ChartInfoGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_CanvasSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_ActionGhostSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_DocumentSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_NoteCanvasSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_OutlineCanvasSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideCollectionSelectionTransformerHelperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_SlideCollectionSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KN::_OutlineSelectionTransformerArchive_default_instance_),
};

const char descriptor_table_protodef_KNCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027KNCommandArchives.proto\022\002KN\032\021TSPMessag"
  "es.proto\032\021TSKArchives.proto\032\021TSSArchives"
  ".proto\032\021TSDArchives.proto\032\030TSDCommandArc"
  "hives.proto\032\022TSWPArchives.proto\032\021TSAArch"
  "ives.proto\032\021TSTArchives.proto\032\020KNArchive"
  "s.proto\"\333\002\n\032UIStateCommandGroupArchive\022\'"
  "\n\005super\030\001 \002(\0132\030.TSK.CommandGroupArchive\022"
  "\037\n\007uiState\030\002 \002(\0132\016.TSP.Reference\022\020\n\010prop"
  "erty\030\003 \002(\t\022(\n\020slideNodesToEdit\030\004 \003(\0132\016.T"
  "SP.Reference\0225\n\035template_slide_nodes_to_"
  "apply\030\005 \003(\0132\016.TSP.Reference\022!\n\016thumbnail"
  "Sizes\030\006 \003(\0132\t.TSP.Size\022*\n\022selectedSlideN"
  "odes\030\007 \003(\0132\016.TSP.Reference\0221\n\031restoreSel"
  "ectedSlideNodes\030\010 \003(\0132\016.TSP.Reference\"\326\006"
  "\n\"CommandSlideInsertDrawablesArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010slid"
  "e_id\030\002 \002(\0132\t.TSP.UUID\022!\n\tdrawables\030\003 \003(\013"
  "2\016.TSP.Reference\022)\n\021working_drawables\030\022 "
  "\003(\0132\016.TSP.Reference\022+\n\targs_list\030\004 \001(\0132\030"
  ".KN.MixedIdOperationArgs\0223\n+update_geome"
  "try_to_match_object_placeholder\030\005 \002(\010\022E\n"
  "2ids_of_drawables_using_object_placehold"
  "er_geometry\030\006 \003(\0132\t.TSP.UUID\022\"\n\032sage_pla"
  "ceholder_tags_list\030\007 \003(\t\022\037\n\027instructiona"
  "l_text_list\030\024 \003(\t\022$\n\014undo_archive\030\010 \001(\0132"
  "\016.TSP.Reference\022\022\n\nis_pasting\030\t \001(\010\0221\n\031i"
  "nsert_build_descriptions\030\n \003(\0132\016.TSP.Ref"
  "erence\0229\n!working_insert_build_descripti"
  "ons\030\023 \003(\0132\016.TSP.Reference\0221\n\031remove_buil"
  "d_descriptions\030\013 \003(\0132\016.TSP.Reference\022(\n "
  "remove_slide_specific_hyperlinks\030\014 \001(\010\022%"
  "\n\022custom_format_keys\030\r \003(\0132\t.TSP.UUID\022*\n"
  "\"saved_next_untitled_resolver_index\030\020 \001("
  "\r\022[\n=geometry_of_object_placeholder_for_"
  "comparison_to_restore_link\030\021 \001(\0132\024.TSD.G"
  "eometryArchive\"\316\001\n)CommandSlideSetPlaceh"
  "oldersForTagsArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022\033\n\010slide_id\030\002 \002(\0132\t.TSP"
  ".UUID\022\035\n\005infos\030\003 \003(\0132\016.TSP.Reference\022\014\n\004"
  "tags\030\004 \003(\t\022!\n\told_infos\030\006 \003(\0132\016.TSP.Refe"
  "rence\022\020\n\010old_tags\030\005 \003(\t\"\237\001\n/CommandTempl"
  "ateSlideSetPlaceholderForTagArchive\022<\n\005s"
  "uper\030\001 \002(\0132-.KN.CommandSlideSetPlacehold"
  "ersForTagsArchive\022!\n\016placeholder_id\030\002 \002("
  "\0132\t.TSP.UUID\022\013\n\003tag\030\003 \001(\t\"\263\001\n0CommandSli"
  "dePropagateSetPlaceholderForTagArchive\022<"
  "\n\005super\030\001 \002(\0132-.KN.CommandSlideSetPlaceh"
  "oldersForTagsArchive\022!\n\016placeholder_id\030\002"
  " \002(\0132\t.TSP.UUID\022\036\n\013original_id\030\003 \002(\0132\t.T"
  "SP.UUID\"\375\003\n!CommandSlideRemoveDrawableAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022\033\n\010slide_id\030\002 \002(\0132\t.TSP.UUID\022\'\n\017sorted"
  "Drawables\030\003 \003(\0132\016.TSP.Reference\022+\n\targs_"
  "list\030\004 \002(\0132\030.KN.MixedIdOperationArgs\022!\n\031"
  "drawable_indexes_for_undo\030\n \003(\r\022\027\n\017place"
  "holderTags\030\005 \003(\t\022\037\n\027instructional_text_l"
  "ist\030\013 \003(\t\0221\n\031insert_build_descriptions\030\006"
  " \003(\0132\016.TSP.Reference\0221\n\031remove_build_des"
  "criptions\030\007 \003(\0132\016.TSP.Reference\022C\n+drawa"
  "bles_using_object_placeholder_geometry\030\010"
  " \003(\0132\016.TSP.Reference\0229\n!inverse_insert_h"
  "yperlink_commands\030\t \003(\0132\016.TSP.Reference\""
  "\202\002\n%CommandSlideMoveDrawableZOrderArchiv"
  "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022)\n"
  "\021old_ordered_infos\030\004 \003(\0132\016.TSP.Reference"
  "\0220\n\targs_list\030\006 \003(\0132\035.TSK.RearrangeIdOpe"
  "rationArgs\022\033\n\010slide_id\030\007 \002(\0132\t.TSP.UUID\022"
  ";\n#old_ordered_infos_on_slide_for_undo\030\010"
  " \003(\0132\016.TSP.Reference\"\247\001\n\"CommandSlideNod"
  "eSetPropertyArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
  ".CommandArchive\022)\n\022slide_node_id_path\030\002 "
  "\002(\0132\r.TSP.UUIDPath\022\020\n\010property\030\003 \002(\t\022\021\n\t"
  "old_value\030\004 \002(\010\022\r\n\005value\030\005 \002(\010\"\260\001\n+Comma"
  "ndSlideNodeSetViewStatePropertyArchive\022\""
  "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022)\n\022sl"
  "ide_node_id_path\030\002 \002(\0132\r.TSP.UUIDPath\022\020\n"
  "\010property\030\003 \002(\t\022\021\n\told_value\030\004 \002(\010\022\r\n\005va"
  "lue\030\005 \002(\010\"\270\001\n$CommandSlideSetBackgroundF"
  "illArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
  "rchive\022$\n\rslide_id_path\030\002 \002(\0132\r.TSP.UUID"
  "Path\022\"\n\010old_fill\030\003 \001(\0132\020.TSD.FillArchive"
  "\022\"\n\010new_fill\030\004 \002(\0132\020.TSD.FillArchive\"\265\001\n"
  "\033CommandSlideSetStyleArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022$\n\rslide_id_pat"
  "h\030\002 \002(\0132\r.TSP.UUIDPath\022#\n\013slide_style\030\003 "
  "\002(\0132\016.TSP.Reference\022\'\n\017old_slide_style\030\004"
  " \001(\0132\016.TSP.Reference\"\301\002\n(CommandShowMark"
  "OutOfSyncRecordingArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.TS"
  "P.Reference\022%\n\rold_recording\030\003 \001(\0132\016.TSP"
  ".Reference\022+\n\034old_is_recording_out_of_sy"
  "nc\030\004 \001(\010:\005false\022+\n\034new_is_recording_out_"
  "of_sync\030\005 \001(\010:\005false\022(\n\025old_modification"
  "_date\030\006 \001(\0132\t.TSP.Date\022(\n\025new_modificati"
  "on_date\030\007 \001(\0132\t.TSP.Date\"|\n0CommandShowM"
  "arkOutOfSyncRecordingIfNeededArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022$\n\021out_"
  "of_sync_token\030\002 \001(\0132\t.TSP.UUID\"\214\001\n!Comma"
  "ndShowRemoveRecordingArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016"
  ".TSP.Reference\022%\n\rold_recording\030\003 \001(\0132\016."
  "TSP.Reference\"\274\001\n\"CommandShowReplaceReco"
  "rdingArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022-"
  "\n\025replacement_recording\030\003 \002(\0132\016.TSP.Refe"
  "rence\022%\n\rold_recording\030\005 \001(\0132\016.TSP.Refer"
  "ence\"\202\003\n\032CommandShowSetValueArchive\022\"\n\005s"
  "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004show\030"
  "\002 \002(\0132\016.TSP.Reference\022\020\n\010property\030\003 \002(\t\022"
  "\?\n\told_value\030\004 \002(\0132,.KN.CommandShowSetVa"
  "lueArchive.PropertyValue\022\?\n\tnew_value\030\005 "
  "\002(\0132,.KN.CommandShowSetValueArchive.Prop"
  "ertyValue\032\215\001\n\rPropertyValue\022\022\n\nbool_valu"
  "e\030\001 \001(\010\022\024\n\014double_value\030\002 \001(\001\0223\n\017show_mo"
  "de_value\030\003 \001(\0162\032.KN.ShowArchive.KNShowMo"
  "de\022\035\n\nsize_value\030\004 \001(\0132\t.TSP.Size\"\213\007\n\035Co"
  "mmandShowInsertSlideArchive\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\0222\n\032slide_nodes_b"
  "eing_inserted\030\002 \003(\0132\016.TSP.Reference\022:\n\"w"
  "orking_slide_nodes_being_inserted\030\016 \003(\0132"
  "\016.TSP.Reference\0223\n\022inserted_args_list\030\003 "
  "\003(\0132\027.TSK.AddIdOperationArgs\0228\n%ids_of_s"
  "lide_nodes_with_depth_changes\030\004 \003(\0132\t.TS"
  "P.UUID\0220\n(depths_of_slide_nodes_with_dep"
  "th_changes\030\005 \003(\r\0224\n,old_depths_of_slide_"
  "nodes_with_depth_changes\030\006 \003(\r\0224\n\034slide_"
  "nodes_for_depth_fix_up\030\007 \003(\0132\016.TSP.Refer"
  "ence\022.\n&depths_of_slide_nodes_for_depth_"
  "fix_up\030\010 \003(\r\0222\n*old_depths_of_slide_node"
  "s_for_depth_fix_up\030\t \003(\r\022F\n\004kind\030\n \001(\0162&"
  ".KN.CommandShowInsertSlideArchive.Kind:\020"
  "kKindInsertSlide\022;\n#template_slide_nodes"
  "_being_inserted\030\013 \003(\0132\016.TSP.Reference\022%\n"
  "\022custom_format_keys\030\014 \003(\0132\t.TSP.UUID\0225\n-"
  "collapsed_state_of_slide_nodes_being_ins"
  "erted\030\r \003(\010\022$\n\014undo_archive\030\017 \001(\0132\016.TSP."
  "Reference\"\\\n\004Kind\022\024\n\020kKindInsertSlide\020\000\022"
  "\034\n\030kKindInsertSlideForPaste\020\001\022 \n\034kKindIn"
  "sertSlideForDuplicate\020\002\"\364\003\n\033CommandShowM"
  "oveSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\0228\n slide_nodes_being_moved_l"
  "inearly\030\002 \003(\0132\016.TSP.Reference\022;\n\024rearran"
  "ged_args_list\030\003 \003(\0132\035.TSK.RearrangeIdOpe"
  "rationArgs\0228\n%ids_of_slide_nodes_with_de"
  "pth_changes\030\004 \003(\0132\t.TSP.UUID\0220\n(depths_o"
  "f_slide_nodes_with_depth_changes\030\005 \003(\r\0224"
  "\n,old_depths_of_slide_nodes_with_depth_c"
  "hanges\030\006 \003(\r\0224\n\034slide_nodes_for_depth_fi"
  "x_up\030\007 \003(\0132\016.TSP.Reference\022.\n&depths_of_"
  "slide_nodes_for_depth_fix_up\030\010 \003(\r\0222\n*ol"
  "d_depths_of_slide_nodes_for_depth_fix_up"
  "\030\t \003(\r\"\237\004\n\035CommandShowRemoveSlideArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\0221\n\031"
  "slide_nodes_being_removed\030\002 \003(\0132\016.TSP.Re"
  "ference\0225\n\021removed_args_list\030\003 \003(\0132\032.TSK"
  ".RemoveIdOperationArgs\0228\n%ids_of_slide_n"
  "odes_with_depth_changes\030\004 \003(\0132\t.TSP.UUID"
  "\0220\n(depths_of_slide_nodes_with_depth_cha"
  "nges\030\005 \003(\r\0224\n,old_depths_of_slide_nodes_"
  "with_depth_changes\030\006 \003(\r\0224\n\034slide_nodes_"
  "for_depth_fix_up\030\007 \003(\0132\016.TSP.Reference\022."
  "\n&depths_of_slide_nodes_for_depth_fix_up"
  "\030\010 \003(\r\0222\n*old_depths_of_slide_nodes_for_"
  "depth_fix_up\030\t \003(\r\0224\n,collapsed_state_of"
  "_slide_nodes_being_removed\030\013 \003(\010\"\354\003\n\035Com"
  "mandShowChangeThemeArchive\022\"\n\005super\030\001 \002("
  "\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.T"
  "SP.Reference\022\035\n\005theme\030\003 \002(\0132\016.TSP.Refere"
  "nce\022!\n\told_theme\030\004 \001(\0132\016.TSP.Reference\022\033"
  "\n\023template_identifier\030\005 \001(\t\022\037\n\027old_templ"
  "ate_identifier\030\006 \001(\t\022W\n\027identifier_to_st"
  "yle_map\030\007 \001(\01326.KN.CommandShowChangeThem"
  "eArchive.IdentifierToStyleMap\022[\n\033old_ide"
  "ntifier_to_style_map\030\010 \001(\01326.KN.CommandS"
  "howChangeThemeArchive.IdentifierToStyleM"
  "ap\032S\n\024IdentifierToStyleMap\022;\n\006styles\030\001 \003"
  "(\0132+.TSS.StylesheetArchive.IdentifiedSty"
  "leEntry\"`\n!CommandShowChangeSlideSizeArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022\027\n\004size\030\002 \002(\0132\t.TSP.Size\"\277\001\n-CommandSet"
  "ThemeCustomEffectTimingCurveArchive\022\"\n\005s"
  "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\014\n\004name\030"
  "\002 \001(\t\022+\n\013path_source\030\003 \001(\0132\026.TSD.PathSou"
  "rceArchive\022/\n\017old_path_source\030\004 \001(\0132\026.TS"
  "D.PathSourceArchive\"\206\002\n\033CommandMoveTempl"
  "atesArchive\022:\n\005super\030\001 \002(\0132+.TSD.Contain"
  "erReorderChildrenCommandArchive\022\'\n\017templ"
  "ate_slides\030\003 \003(\0132\016.TSP.Reference\022-\n\025prev"
  "ious_indexes_keys\030\004 \003(\0132\016.TSP.Reference\022"
  "\037\n\027previous_indexes_values\030\005 \003(\r\0222\n\032fina"
  "l_template_arrangement\030\006 \003(\0132\016.TSP.Refer"
  "ence\"\355\001\n\034CommandInsertTemplateArchive\022\"\n"
  "\005super\030\001 \002(\0132\023.TSK.CommandArchive\0225\n\035und"
  "o_template_change_commands\030\007 \003(\0132\016.TSP.R"
  "eference\0224\n,set_inserted_slide_as_defaul"
  "t_template_slide\030\010 \002(\010\022<\n$undo_replaceme"
  "nt_template_slide_node\030\t \001(\0132\016.TSP.Refer"
  "ence\"\341\001\n%CommandPrimitiveInsertTemplateA"
  "rchive\0229\n\005super\030\001 \002(\0132*.TSD.ContainerIns"
  "ertChildrenCommandArchive\022\036\n\026was_inserte"
  "d_with_drop\030\002 \002(\010\022%\n\022custom_format_keys\030"
  "\003 \003(\0132\t.TSP.UUID\0226\n\036previous_classic_the"
  "me_records\030\004 \003(\0132\016.TSP.Reference\"\337\001\n\034Com"
  "mandRemoveTemplateArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\0227\n\037replacement_tem"
  "plate_slide_node\030\005 \001(\0132\016.TSP.Reference\0220"
  "\n\030template_change_commands\030\006 \003(\0132\016.TSP.R"
  "eference\0220\n(default_template_slide_node_"
  "was_replaced\030\007 \001(\010\"\232\001\n%CommandPrimitiveR"
  "emoveTemplateArchive\0229\n\005super\030\001 \002(\0132*.TS"
  "D.ContainerRemoveChildrenCommandArchive\022"
  "6\n\036previous_classic_theme_records\030\003 \003(\0132"
  "\016.TSP.Reference\"\324\002\n\036CommandSlideInsertBu"
  "ildArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
  "rchive\0220\n\030insert_build_description\030\002 \002(\013"
  "2\016.TSP.Reference\022M\n$identifier_for_chunk"
  "_to_insert_after\030\003 \001(\0132\037.KN.BuildChunkId"
  "entifierArchive\022\034\n\024should_create_chunks\030"
  "\004 \001(\010\022,\n\024old_tuples_to_update\030\005 \003(\0132\016.TS"
  "P.Reference\022%\n\035was_initialized_over_the_"
  "wire\030\006 \001(\010\022\032\n\022has_been_committed\030\007 \001(\010\"\215"
  "\003\n\035InsertBuildDescriptionArchive\022\033\n\010slid"
  "e_id\030\001 \002(\0132\t.TSP.UUID\022\'\n\017build_to_insert"
  "\030\002 \002(\0132\016.TSP.Reference\022(\n\020chunks_to_inse"
  "rt\030\003 \003(\0132\016.TSP.Reference\022\'\n\037should_assig"
  "n_chunk_identifiers\030\004 \002(\010\022N\n%identifers_"
  "for_chunks_to_insert_after\030\005 \003(\0132\037.KN.Bu"
  "ildChunkIdentifierArchive\022(\n\020tuples_to_u"
  "pdate\030\006 \003(\0132\016.TSP.Reference\022C\n\032fallback_"
  "chunk_identifiers\030\007 \003(\0132\037.KN.BuildChunkI"
  "dentifierArchive\022\024\n\014is_for_paste\030\010 \002(\010\":"
  "\n\021UndoObjectArchive\022%\n\005super\030\001 \002(\0132\026.TSD"
  ".UndoObjectArchive\"\203\003\n\036CommandSlideRemov"
  "eBuildArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\0220\n\030remove_build_description\030\002 "
  "\002(\0132\016.TSP.Reference\022\035\n\005build\030\003 \001(\0132\016.TSP"
  ".Reference\022(\n\020chunks_to_insert\030\004 \003(\0132\016.T"
  "SP.Reference\022O\n&identifiers_for_chunks_t"
  "o_insert_after\030\005 \003(\0132\037.KN.BuildChunkIden"
  "tifierArchive\022,\n\024old_tuples_to_update\030\006 "
  "\003(\0132\016.TSP.Reference\022C\n\032fallback_chunk_id"
  "entifiers\030\007 \003(\0132\037.KN.BuildChunkIdentifie"
  "rArchive\"\312\001\n\035RemoveBuildDescriptionArchi"
  "ve\022\033\n\010slide_id\030\001 \001(\0132\t.TSP.UUID\022\033\n\010build"
  "_id\030\002 \001(\0132\t.TSP.UUID\022\034\n\024should_remove_ch"
  "unks\030\003 \001(\010\022\'\n\037should_remove_chunk_identi"
  "fiers\030\004 \001(\010\022(\n\020tuples_to_update\030\005 \003(\0132\016."
  "TSP.Reference\"\376\002\n#CommandSlideInsertBuil"
  "dChunkArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022\033\n\010slide_id\030\002 \002(\0132\t.TSP.UUID\022\'"
  "\n\017chunk_to_insert\030\003 \002(\0132\016.TSP.Reference\022"
  "M\n$identifier_for_chunk_to_insert_after\030"
  "\004 \001(\0132\037.KN.BuildChunkIdentifierArchive\022("
  "\n\020tuples_to_update\030\005 \003(\0132\016.TSP.Reference"
  "\022,\n\024old_tuples_to_update\030\006 \003(\0132\016.TSP.Ref"
  "erence\022\036\n\026needs_selection_update\030\007 \001(\010\022&"
  "\n\036should_assign_chunk_identifier\030\010 \001(\010\"\235"
  "\003\n#CommandSlideRemoveBuildChunkArchive\022\""
  "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010sl"
  "ide_id\030\002 \002(\0132\t.TSP.UUID\022%\n\rremoved_chunk"
  "\030\003 \001(\0132\016.TSP.Reference\022G\n\036identifier_for"
  "_chunk_to_remove\030\004 \001(\0132\037.KN.BuildChunkId"
  "entifierArchive\022M\n$identifier_for_chunk_"
  "to_insert_after\030\005 \001(\0132\037.KN.BuildChunkIde"
  "ntifierArchive\022(\n\020tuples_to_update\030\006 \003(\013"
  "2\016.TSP.Reference\022,\n\024old_tuples_to_update"
  "\030\007 \003(\0132\016.TSP.Reference\022\036\n\026needs_selectio"
  "n_update\030\010 \001(\010\"\375\003\n\"CommandSlideMoveBuild"
  "ChunksArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022G\n\036identifiers_for_chunks_to_m"
  "ove\030\002 \003(\0132\037.KN.BuildChunkIdentifierArchi"
  "ve\022M\n$identifiers_for_chunks_to_move_aft"
  "er\030\003 \003(\0132\037.KN.BuildChunkIdentifierArchiv"
  "e\022V\n-identifiers_for_chunks_to_move_afte"
  "r_for_undo\030\004 \003(\0132\037.KN.BuildChunkIdentifi"
  "erArchive\022(\n\020tuples_to_update\030\005 \003(\0132\016.TS"
  "P.Reference\022,\n\024old_tuples_to_update\030\006 \003("
  "\0132\016.TSP.Reference\022k\nBidentifiers_for_chu"
  "nks_to_move_including_clustered_inactive"
  "_chunks\030\007 \003(\0132\037.KN.BuildChunkIdentifierA"
  "rchive\"\330\006\n\033CommandBuildSetValueArchive\022\""
  "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005tu"
  "ple\030\002 \001(\0132\016.TSP.Reference\022%\n\rchunks_to_a"
  "dd\030\003 \003(\0132\016.TSP.Reference\022O\n&identifiers_"
  "for_chunks_to_insert_after\030\004 \003(\0132\037.KN.Bu"
  "ildChunkIdentifierArchive\022I\n identifiers"
  "_for_chunks_to_remove\030\005 \003(\0132\037.KN.BuildCh"
  "unkIdentifierArchive\022(\n\020tuples_to_update"
  "\030\006 \003(\0132\016.TSP.Reference\0223\n\033old_tuple_for_"
  "main_property\030\007 \001(\0132\016.TSP.Reference\022=\n%o"
  "ld_tuples_to_update_for_sub_commands\030\010 \003"
  "(\0132\016.TSP.Reference\022E\n\034identifiers_for_ad"
  "ded_chunks\030\t \003(\0132\037.KN.BuildChunkIdentifi"
  "erArchive\022>\n\025generated_identifiers\030\n \003(\013"
  "2\037.KN.BuildChunkIdentifierArchive\022&\n\016rem"
  "oved_chunks\030\013 \003(\0132\016.TSP.Reference\022W\n.ide"
  "ntifiers_for_chunks_prior_to_removed_chu"
  "nks\030\014 \003(\0132\037.KN.BuildChunkIdentifierArchi"
  "ve\022\031\n\021old_chunk_ID_seed\030\r \001(\r\022>\n\025old_chu"
  "nk_identifiers\030\016 \003(\0132\037.KN.BuildChunkIden"
  "tifierArchive\0222\n\032chunks_removed_during_u"
  "ndo\030\017 \003(\0132\016.TSP.Reference\"\302\001\n\'CommandBui"
  "ldUpdateChunkReferentsArchive\022\"\n\005super\030\001"
  " \002(\0132\023.TSK.CommandArchive\022\033\n\010build_id\030\002 "
  "\002(\0132\t.TSP.UUID\022(\n\020tuples_to_update\030\003 \003(\013"
  "2\016.TSP.Reference\022,\n\024old_tuples_to_update"
  "\030\004 \003(\0132\016.TSP.Reference\"\265\010\n#CommandBuildU"
  "pdateChunkCountArchive\022\"\n\005super\030\001 \002(\0132\023."
  "TSK.CommandArchive\022\033\n\010slide_id\030\002 \002(\0132\t.T"
  "SP.UUID\022\037\n\014drawable_ids\030\003 \003(\0132\t.TSP.UUID"
  "\0226\n\036expected_delivery_style_tuples\030\004 \003(\013"
  "2\016.TSP.Reference\022%\n\rchunks_to_add\030\005 \003(\0132"
  "\016.TSP.Reference\022O\n&identifiers_for_chunk"
  "s_to_insert_after\030\006 \003(\0132\037.KN.BuildChunkI"
  "dentifierArchive\022I\n identifiers_for_chun"
  "ks_to_remove\030\007 \003(\0132\037.KN.BuildChunkIdenti"
  "fierArchive\022(\n\020tuples_to_update\030\010 \003(\0132\016."
  "TSP.Reference\0224\n,needs_async_process_cha"
  "nges_selection_update\030\t \001(\010\022,\n\024old_tuple"
  "s_to_update\030\n \003(\0132\016.TSP.Reference\022E\n\034ide"
  "ntifiers_for_added_chunks\030\013 \003(\0132\037.KN.Bui"
  "ldChunkIdentifierArchive\022>\n\025generated_id"
  "entifiers\030\014 \003(\0132\037.KN.BuildChunkIdentifie"
  "rArchive\022&\n\016removed_chunks\030\r \003(\0132\016.TSP.R"
  "eference\022W\n.identifiers_for_chunks_prior"
  "_to_removed_chunks\030\016 \003(\0132\037.KN.BuildChunk"
  "IdentifierArchive\0221\n\031old_delivery_style_"
  "tuples\030\017 \003(\0132\016.TSP.Reference\022\032\n\022old_chun"
  "k_ID_seeds\030\020 \003(\r\022>\n\025old_chunk_identifier"
  "s\030\021 \003(\0132\037.KN.BuildChunkIdentifierArchive"
  "\022&\n\016working_builds\030\022 \003(\0132\016.TSP.Reference"
  "\0222\n\032chunks_removed_during_undo\030\023 \003(\0132\016.T"
  "SP.Reference\0220\n\030chunks_added_during_undo"
  "\030\024 \003(\0132\016.TSP.Reference\"\236\001\n CommandBuildC"
  "hunkSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
  ".CommandArchive\022(\n\020tuples_to_update\030\002 \003("
  "\0132\016.TSP.Reference\022,\n\024old_tuples_to_updat"
  "e\030\003 \003(\0132\016.TSP.Reference\"\361\001\n CommandTrans"
  "itionSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022)\n\022slide_node_id_path\030\002"
  " \002(\0132\r.TSP.UUIDPath\0227\n\016old_attributes\030\003 "
  "\001(\0132\037.KN.TransitionAttributesArchive\0223\n\n"
  "attributes\030\004 \001(\0132\037.KN.TransitionAttribut"
  "esArchive\022\020\n\010property\030\005 \001(\t\"\346\001\n*CommandS"
  "howSetSlideNumberVisibilityArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\025slide_"
  "numbers_visible\030\003 \002(\010\022-\n\032ids_of_slide_no"
  "des_to_skip\030\004 \003(\0132\t.TSP.UUID\0225\n\"ids_of_s"
  "lide_nodes_already_correct\030\005 \003(\0132\t.TSP.U"
  "UID\022\017\n\007is_undo\030\006 \002(\010\"\241\001\n&CommandTemplate"
  "SetThumbnailTextArchive\022\"\n\005super\030\001 \002(\0132\023"
  ".TSK.CommandArchive\022\036\n\013template_id\030\002 \002(\013"
  "2\t.TSP.UUID\022\017\n\007is_body\030\003 \002(\010\022\020\n\010new_text"
  "\030\004 \001(\t\022\020\n\010old_text\030\005 \001(\t\"\227\002\n#CommandTemp"
  "lateSetBodyStylesArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022\036\n\013template_id\030\002 \002("
  "\0132\t.TSP.UUID\022,\n\024new_paragraph_styles\030\003 \003"
  "(\0132\016.TSP.Reference\022\'\n\017new_list_styles\030\004 "
  "\003(\0132\016.TSP.Reference\022,\n\024old_paragraph_sty"
  "les\030\005 \003(\0132\016.TSP.Reference\022\'\n\017old_list_st"
  "yles\030\006 \003(\0132\016.TSP.Reference\"\213\002\n!CommandCh"
  "angeTemplateSlideArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022$\n\rslide_id_path\030\002 "
  "\002(\0132\r.TSP.UUIDPath\022+\n\023template_slide_nod"
  "e\030\003 \002(\0132\016.TSP.Reference\022/\n\027old_template_"
  "slide_node\030\004 \001(\0132\016.TSP.Reference\022\024\n\014is_u"
  "ndo_redo\030\005 \002(\010\022(\n\020target_prototype\030\006 \001(\013"
  "2\016.TSP.Reference\"\304\001\n\'CommandSlidePrimiti"
  "veSetTemplateArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022$\n\rslide_id_path\030\002 \002(\0132"
  "\r.TSP.UUIDPath\022\036\n\013template_id\030\003 \002(\0132\t.TS"
  "P.UUID\022/\n\027old_template_slide_node\030\004 \001(\0132"
  "\016.TSP.Reference\"}\n1CommandSlideResetTemp"
  "lateBackgroundObjectsArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022$\n\rslide_id_pat"
  "h\030\002 \001(\0132\r.TSP.UUIDPath\"\250\001\n\030CommandShowSe"
  "tSoundtrack\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022\034\n\004show\030\002 \001(\0132\016.TSP.Reference\022\"\n"
  "\nsoundtrack\030\003 \001(\0132\016.TSP.Reference\022&\n\016old"
  "_soundtrack\030\004 \001(\0132\016.TSP.Reference\"\202\003\n\031Co"
  "mmandSoundtrackSetValue\022\"\n\005super\030\001 \002(\0132\023"
  ".TSK.CommandArchive\022 \n\rsoundtrack_id\030\002 \001"
  "(\0132\t.TSP.UUID\022\020\n\010property\030\003 \001(\t\022>\n\told_v"
  "alue\030\004 \001(\0132+.KN.CommandSoundtrackSetValu"
  "e.PropertyValue\022>\n\tnew_value\030\005 \001(\0132+.KN."
  "CommandSoundtrackSetValue.PropertyValue\032"
  "\214\001\n\rPropertyValue\022\024\n\014double_value\030\001 \001(\001\022"
  "1\n\nmode_value\030\002 \001(\0162\035.KN.Soundtrack.Soun"
  "dtrackMode\0222\n\026media_reference_values\030\003 \003"
  "(\0132\022.TSP.DataReference\"\334\001\n#CommandSlideU"
  "pdateTemplateDrawables\022\"\n\005super\030\001 \002(\0132\023."
  "TSK.CommandArchive\022\033\n\010slide_id\030\002 \002(\0132\t.T"
  "SP.UUID\022B\n\033id_placement_operation_args\030\003"
  " \003(\0132\035.TSK.IdPlacementOperationArgs\0220\n\030o"
  "ld_child_infos_for_undo\030\004 \003(\0132\016.TSP.Refe"
  "rence\"\373\001\n\037ChartInfoGeometryCommandArchiv"
  "e\022.\n\005super\030\001 \002(\0132\037.TSD.InfoGeometryComma"
  "ndArchive\022*\n\026previous_legend_offset\030\002 \002("
  "\0132\n.TSP.Point\022\'\n\024previous_legend_size\030\003 "
  "\002(\0132\t.TSP.Size\022*\n\026adjusted_legend_offset"
  "\030\004 \002(\0132\n.TSP.Point\022\'\n\024adjusted_legend_si"
  "ze\030\005 \002(\0132\t.TSP.Size\"\213\002\n!CanvasSelectionT"
  "ransformerArchive\022P\n\022transformer_helper\030"
  "\001 \002(\01324.TSD.InfoCollectionSelectionTrans"
  "formerHelperArchive\0228\n\017build_chunk_ids\030\002"
  " \003(\0132\037.KN.BuildChunkIdentifierArchive\022#\n"
  "\020action_build_ids\030\003 \003(\0132\t.TSP.UUID\0225\n\"or"
  "iginally_selected_drawable_uuids\030\004 \003(\0132\t"
  ".TSP.UUID\"(\n&ActionGhostSelectionTransfo"
  "rmerArchive\"Q\n#DocumentSelectionTransfor"
  "merArchive\022*\n\022document_selection\030\001 \002(\0132\016"
  ".TSP.Reference\"y\n%NoteCanvasSelectionTra"
  "nsformerArchive\022P\n\022transformer_helper\030\001 "
  "\002(\01324.TSD.InfoCollectionSelectionTransfo"
  "rmerHelperArchive\"\212\001\n(OutlineCanvasSelec"
  "tionTransformerArchive\0224\n\034canvas_selecti"
  "on_transformer\030\001 \002(\0132\016.TSP.Reference\022(\n\021"
  "storage_uuid_path\030\002 \001(\0132\r.TSP.UUIDPath\"\324"
  "\001\n0SlideCollectionSelectionTransformerHe"
  "lperArchive\022\"\n\013slide_nodes\030\001 \003(\0132\r.TSP.U"
  "UIDPath\022)\n\022slide_node_to_edit\030\002 \001(\0132\r.TS"
  "P.UUIDPath\022(\n\031slide_collection_is_theme\030"
  "\003 \001(\010:\005false\022\'\n\037previous_primary_selecte"
  "d_index\030\004 \001(\r\"~\n*SlideCollectionSelectio"
  "nTransformerArchive\022P\n\022transformer_helpe"
  "r\030\001 \002(\01324.KN.SlideCollectionSelectionTra"
  "nsformerHelperArchive\"\341\001\n\"OutlineSelecti"
  "onTransformerArchive\022P\n\022transformer_help"
  "er\030\001 \002(\01324.KN.SlideCollectionSelectionTr"
  "ansformerHelperArchive\0223\n$can_have_range"
  "_in_selected_paragraph\030\002 \001(\010:\005false\0224\n\031s"
  "election_range_addresses\030\003 \003(\0132\021.TSK.Ran"
  "geAddress*=\n\021AnimationReferent\022\024\n\020kRelat"
  "iveToStart\020\001\022\022\n\016kRelativeToEnd\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KNCommandArchives_2eproto_deps[9] = {
  &::descriptor_table_KNArchives_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KNCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNCommandArchives_2eproto = {
  false, false, 17352, descriptor_table_protodef_KNCommandArchives_2eproto, "KNCommandArchives.proto", 
  &descriptor_table_KNCommandArchives_2eproto_once, descriptor_table_KNCommandArchives_2eproto_deps, 9, 61,
  schemas, file_default_instances, TableStruct_KNCommandArchives_2eproto::offsets,
  file_level_metadata_KNCommandArchives_2eproto, file_level_enum_descriptors_KNCommandArchives_2eproto, file_level_service_descriptors_KNCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_KNCommandArchives_2eproto_getter() {
  return &descriptor_table_KNCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_KNCommandArchives_2eproto(&descriptor_table_KNCommandArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[0];
}
bool CommandShowInsertSlideArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlide;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForPaste;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForDuplicate;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MIN;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MAX;
constexpr int CommandShowInsertSlideArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationReferent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNCommandArchives_2eproto);
  return file_level_enum_descriptors_KNCommandArchives_2eproto[1];
}
bool AnimationReferent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UIStateCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateCommandGroupArchive>()._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const UIStateCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& uistate(const UIStateCommandGroupArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandGroupArchive&
UIStateCommandGroupArchive::_Internal::super(const UIStateCommandGroupArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
UIStateCommandGroupArchive::_Internal::uistate(const UIStateCommandGroupArchive* msg) {
  return *msg->uistate_;
}
void UIStateCommandGroupArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UIStateCommandGroupArchive::clear_uistate() {
  if (uistate_ != nullptr) uistate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UIStateCommandGroupArchive::clear_slidenodestoedit() {
  slidenodestoedit_.Clear();
}
void UIStateCommandGroupArchive::clear_template_slide_nodes_to_apply() {
  template_slide_nodes_to_apply_.Clear();
}
void UIStateCommandGroupArchive::clear_thumbnailsizes() {
  thumbnailsizes_.Clear();
}
void UIStateCommandGroupArchive::clear_selectedslidenodes() {
  selectedslidenodes_.Clear();
}
void UIStateCommandGroupArchive::clear_restoreselectedslidenodes() {
  restoreselectedslidenodes_.Clear();
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slidenodestoedit_(arena),
  template_slide_nodes_to_apply_(arena),
  thumbnailsizes_(arena),
  selectedslidenodes_(arena),
  restoreselectedslidenodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.UIStateCommandGroupArchive)
}
UIStateCommandGroupArchive::UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slidenodestoedit_(from.slidenodestoedit_),
      template_slide_nodes_to_apply_(from.template_slide_nodes_to_apply_),
      thumbnailsizes_(from.thumbnailsizes_),
      selectedslidenodes_(from.selectedslidenodes_),
      restoreselectedslidenodes_(from.restoreselectedslidenodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandGroupArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_uistate()) {
    uistate_ = new ::TSP::Reference(*from.uistate_);
  } else {
    uistate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.UIStateCommandGroupArchive)
}

inline void UIStateCommandGroupArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uistate_) -
    reinterpret_cast<char*>(&super_)) + sizeof(uistate_));
}

UIStateCommandGroupArchive::~UIStateCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateCommandGroupArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIStateCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete uistate_;
}

void UIStateCommandGroupArchive::ArenaDtor(void* object) {
  UIStateCommandGroupArchive* _this = reinterpret_cast< UIStateCommandGroupArchive* >(object);
  (void)_this;
}
void UIStateCommandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIStateCommandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIStateCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slidenodestoedit_.Clear();
  template_slide_nodes_to_apply_.Clear();
  thumbnailsizes_.Clear();
  selectedslidenodes_.Clear();
  restoreselectedslidenodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uistate_ != nullptr);
      uistate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateCommandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference uiState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.UIStateCommandGroupArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodesToEdit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodestoedit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes_to_apply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restoreselectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIStateCommandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference uiState = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uistate(this), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.UIStateCommandGroupArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // repeated .TSP.Reference slideNodesToEdit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slidenodestoedit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_slidenodestoedit(i), target, stream);
  }

  // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_template_slide_nodes_to_apply_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_template_slide_nodes_to_apply(i), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_thumbnailsizes(i), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_selectedslidenodes(i), target, stream);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restoreselectedslidenodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_restoreselectedslidenodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateCommandGroupArchive)
  return target;
}

size_t UIStateCommandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_uistate()) {
    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uistate_);
  }

  return total_size;
}
size_t UIStateCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateCommandGroupArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference uiState = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slideNodesToEdit = 4;
  total_size += 1UL * this->_internal_slidenodestoedit_size();
  for (const auto& msg : this->slidenodestoedit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  total_size += 1UL * this->_internal_template_slide_nodes_to_apply_size();
  for (const auto& msg : this->template_slide_nodes_to_apply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  total_size += 1UL * this->_internal_restoreselectedslidenodes_size();
  for (const auto& msg : this->restoreselectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIStateCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateCommandGroupArchive::GetClassData() const { return &_class_data_; }

void UIStateCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UIStateCommandGroupArchive *>(to)->MergeFrom(
      static_cast<const UIStateCommandGroupArchive &>(from));
}


void UIStateCommandGroupArchive::MergeFrom(const UIStateCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slidenodestoedit_.MergeFrom(from.slidenodestoedit_);
  template_slide_nodes_to_apply_.MergeFrom(from.template_slide_nodes_to_apply_);
  thumbnailsizes_.MergeFrom(from.thumbnailsizes_);
  selectedslidenodes_.MergeFrom(from.selectedslidenodes_);
  restoreselectedslidenodes_.MergeFrom(from.restoreselectedslidenodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uistate()->::TSP::Reference::MergeFrom(from._internal_uistate());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateCommandGroupArchive::CopyFrom(const UIStateCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slidenodestoedit_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(template_slide_nodes_to_apply_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(thumbnailsizes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selectedslidenodes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(restoreselectedslidenodes_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_uistate()) {
    if (!uistate_->IsInitialized()) return false;
  }
  return true;
}

void UIStateCommandGroupArchive::InternalSwap(UIStateCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slidenodestoedit_.InternalSwap(&other->slidenodestoedit_);
  template_slide_nodes_to_apply_.InternalSwap(&other->template_slide_nodes_to_apply_);
  thumbnailsizes_.InternalSwap(&other->thumbnailsizes_);
  selectedslidenodes_.InternalSwap(&other->selectedslidenodes_);
  restoreselectedslidenodes_.InternalSwap(&other->restoreselectedslidenodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, uistate_)
      + sizeof(UIStateCommandGroupArchive::uistate_)
      - PROTOBUF_FIELD_OFFSET(UIStateCommandGroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateCommandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandSlideInsertDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertDrawablesArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::MixedIdOperationArgs& args_list(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_args_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_geometry_to_match_object_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_archive(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_undo_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_pasting(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remove_slide_specific_hyperlinks(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saved_next_untitled_resolver_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::GeometryArchive& geometry_of_object_placeholder_for_comparison_to_restore_link(const CommandSlideInsertDrawablesArchive* msg);
  static void set_has_geometry_of_object_placeholder_for_comparison_to_restore_link(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertDrawablesArchive::_Internal::super(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideInsertDrawablesArchive::_Internal::slide_id(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->slide_id_;
}
const ::KN::MixedIdOperationArgs&
CommandSlideInsertDrawablesArchive::_Internal::args_list(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->args_list_;
}
const ::TSP::Reference&
CommandSlideInsertDrawablesArchive::_Internal::undo_archive(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->undo_archive_;
}
const ::TSD::GeometryArchive&
CommandSlideInsertDrawablesArchive::_Internal::geometry_of_object_placeholder_for_comparison_to_restore_link(const CommandSlideInsertDrawablesArchive* msg) {
  return *msg->geometry_of_object_placeholder_for_comparison_to_restore_link_;
}
void CommandSlideInsertDrawablesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertDrawablesArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertDrawablesArchive::clear_drawables() {
  drawables_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_working_drawables() {
  working_drawables_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_args_list() {
  if (args_list_ != nullptr) args_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertDrawablesArchive::clear_ids_of_drawables_using_object_placeholder_geometry() {
  ids_of_drawables_using_object_placeholder_geometry_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_undo_archive() {
  if (undo_archive_ != nullptr) undo_archive_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSlideInsertDrawablesArchive::clear_insert_build_descriptions() {
  insert_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_working_insert_build_descriptions() {
  working_insert_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_remove_build_descriptions() {
  remove_build_descriptions_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandSlideInsertDrawablesArchive::clear_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  if (geometry_of_object_placeholder_for_comparison_to_restore_link_ != nullptr) geometry_of_object_placeholder_for_comparison_to_restore_link_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drawables_(arena),
  ids_of_drawables_using_object_placeholder_geometry_(arena),
  sage_placeholder_tags_list_(arena),
  insert_build_descriptions_(arena),
  remove_build_descriptions_(arena),
  custom_format_keys_(arena),
  working_drawables_(arena),
  working_insert_build_descriptions_(arena),
  instructional_text_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertDrawablesArchive)
}
CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_),
      ids_of_drawables_using_object_placeholder_geometry_(from.ids_of_drawables_using_object_placeholder_geometry_),
      sage_placeholder_tags_list_(from.sage_placeholder_tags_list_),
      insert_build_descriptions_(from.insert_build_descriptions_),
      remove_build_descriptions_(from.remove_build_descriptions_),
      custom_format_keys_(from.custom_format_keys_),
      working_drawables_(from.working_drawables_),
      working_insert_build_descriptions_(from.working_insert_build_descriptions_),
      instructional_text_list_(from.instructional_text_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_args_list()) {
    args_list_ = new ::KN::MixedIdOperationArgs(*from.args_list_);
  } else {
    args_list_ = nullptr;
  }
  if (from._internal_has_undo_archive()) {
    undo_archive_ = new ::TSP::Reference(*from.undo_archive_);
  } else {
    undo_archive_ = nullptr;
  }
  if (from._internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link()) {
    geometry_of_object_placeholder_for_comparison_to_restore_link_ = new ::TSD::GeometryArchive(*from.geometry_of_object_placeholder_for_comparison_to_restore_link_);
  } else {
    geometry_of_object_placeholder_for_comparison_to_restore_link_ = nullptr;
  }
  ::memcpy(&update_geometry_to_match_object_placeholder_, &from.update_geometry_to_match_object_placeholder_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&update_geometry_to_match_object_placeholder_)) + sizeof(saved_next_untitled_resolver_index_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertDrawablesArchive)
}

inline void CommandSlideInsertDrawablesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(saved_next_untitled_resolver_index_));
}

CommandSlideInsertDrawablesArchive::~CommandSlideInsertDrawablesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertDrawablesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideInsertDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete args_list_;
  if (this != internal_default_instance()) delete undo_archive_;
  if (this != internal_default_instance()) delete geometry_of_object_placeholder_for_comparison_to_restore_link_;
}

void CommandSlideInsertDrawablesArchive::ArenaDtor(void* object) {
  CommandSlideInsertDrawablesArchive* _this = reinterpret_cast< CommandSlideInsertDrawablesArchive* >(object);
  (void)_this;
}
void CommandSlideInsertDrawablesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideInsertDrawablesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideInsertDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  ids_of_drawables_using_object_placeholder_geometry_.Clear();
  sage_placeholder_tags_list_.Clear();
  insert_build_descriptions_.Clear();
  remove_build_descriptions_.Clear();
  custom_format_keys_.Clear();
  working_drawables_.Clear();
  working_insert_build_descriptions_.Clear();
  instructional_text_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(args_list_ != nullptr);
      args_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_archive_ != nullptr);
      undo_archive_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(geometry_of_object_placeholder_for_comparison_to_restore_link_ != nullptr);
      geometry_of_object_placeholder_for_comparison_to_restore_link_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&update_geometry_to_match_object_placeholder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remove_slide_specific_hyperlinks_) -
        reinterpret_cast<char*>(&update_geometry_to_match_object_placeholder_)) + sizeof(remove_slide_specific_hyperlinks_));
  }
  saved_next_untitled_resolver_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertDrawablesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .KN.MixedIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_args_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool update_geometry_to_match_object_placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_update_geometry_to_match_object_placeholder(&has_bits);
          update_geometry_to_match_object_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_drawables_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string sage_placeholder_tags_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sage_placeholder_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_archive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pasting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_pasting(&has_bits);
          is_pasting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference insert_build_descriptions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference remove_build_descriptions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool remove_slide_specific_hyperlinks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_remove_slide_specific_hyperlinks(&has_bits);
          remove_slide_specific_hyperlinks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 saved_next_untitled_resolver_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_saved_next_untitled_resolver_index(&has_bits);
          saved_next_untitled_resolver_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_drawables = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_insert_build_descriptions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string instructional_text_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_instructional_text_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideInsertDrawablesArchive.instructional_text_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideInsertDrawablesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawables(i), target, stream);
  }

  // optional .KN.MixedIdOperationArgs args_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::args_list(this), target, stream);
  }

  // required bool update_geometry_to_match_object_placeholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_update_geometry_to_match_object_placeholder(), target);
  }

  // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_drawables_using_object_placeholder_geometry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ids_of_drawables_using_object_placeholder_geometry(i), target, stream);
  }

  // repeated string sage_placeholder_tags_list = 7;
  for (int i = 0, n = this->_internal_sage_placeholder_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_sage_placeholder_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list");
    target = stream->WriteString(7, s, target);
  }

  // optional .TSP.Reference undo_archive = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::undo_archive(this), target, stream);
  }

  // optional bool is_pasting = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_pasting(), target);
  }

  // repeated .TSP.Reference insert_build_descriptions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insert_build_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_insert_build_descriptions(i), target, stream);
  }

  // repeated .TSP.Reference remove_build_descriptions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remove_build_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_remove_build_descriptions(i), target, stream);
  }

  // optional bool remove_slide_specific_hyperlinks = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_remove_slide_specific_hyperlinks(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional uint32 saved_next_untitled_resolver_index = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_saved_next_untitled_resolver_index(), target);
  }

  // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::geometry_of_object_placeholder_for_comparison_to_restore_link(this), target, stream);
  }

  // repeated .TSP.Reference working_drawables = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_working_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_working_drawables(i), target, stream);
  }

  // repeated .TSP.Reference working_insert_build_descriptions = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_working_insert_build_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_working_insert_build_descriptions(i), target, stream);
  }

  // repeated string instructional_text_list = 20;
  for (int i = 0, n = this->_internal_instructional_text_list_size(); i < n; i++) {
    const auto& s = this->_internal_instructional_text_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideInsertDrawablesArchive.instructional_text_list");
    target = stream->WriteString(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertDrawablesArchive)
  return target;
}

size_t CommandSlideInsertDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  if (_internal_has_update_geometry_to_match_object_placeholder()) {
    // required bool update_geometry_to_match_object_placeholder = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideInsertDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertDrawablesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

    // required bool update_geometry_to_match_object_placeholder = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 3;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  total_size += 1UL * this->_internal_ids_of_drawables_using_object_placeholder_geometry_size();
  for (const auto& msg : this->ids_of_drawables_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string sage_placeholder_tags_list = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sage_placeholder_tags_list_.size());
  for (int i = 0, n = sage_placeholder_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sage_placeholder_tags_list_.Get(i));
  }

  // repeated .TSP.Reference insert_build_descriptions = 10;
  total_size += 1UL * this->_internal_insert_build_descriptions_size();
  for (const auto& msg : this->insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference remove_build_descriptions = 11;
  total_size += 1UL * this->_internal_remove_build_descriptions_size();
  for (const auto& msg : this->remove_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 13;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_drawables = 18;
  total_size += 2UL * this->_internal_working_drawables_size();
  for (const auto& msg : this->working_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_insert_build_descriptions = 19;
  total_size += 2UL * this->_internal_working_insert_build_descriptions_size();
  for (const auto& msg : this->working_insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string instructional_text_list = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(instructional_text_list_.size());
  for (int i = 0, n = instructional_text_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      instructional_text_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .KN.MixedIdOperationArgs args_list = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_list_);
    }

    // optional .TSP.Reference undo_archive = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_archive_);
    }

    // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_of_object_placeholder_for_comparison_to_restore_link_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool is_pasting = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool remove_slide_specific_hyperlinks = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 saved_next_untitled_resolver_index = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_saved_next_untitled_resolver_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertDrawablesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideInsertDrawablesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertDrawablesArchive::GetClassData() const { return &_class_data_; }

void CommandSlideInsertDrawablesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideInsertDrawablesArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideInsertDrawablesArchive &>(from));
}


void CommandSlideInsertDrawablesArchive::MergeFrom(const CommandSlideInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  ids_of_drawables_using_object_placeholder_geometry_.MergeFrom(from.ids_of_drawables_using_object_placeholder_geometry_);
  sage_placeholder_tags_list_.MergeFrom(from.sage_placeholder_tags_list_);
  insert_build_descriptions_.MergeFrom(from.insert_build_descriptions_);
  remove_build_descriptions_.MergeFrom(from.remove_build_descriptions_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  working_drawables_.MergeFrom(from.working_drawables_);
  working_insert_build_descriptions_.MergeFrom(from.working_insert_build_descriptions_);
  instructional_text_list_.MergeFrom(from.instructional_text_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_args_list()->::KN::MixedIdOperationArgs::MergeFrom(from._internal_args_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_archive()->::TSP::Reference::MergeFrom(from._internal_undo_archive());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link()->::TSD::GeometryArchive::MergeFrom(from._internal_geometry_of_object_placeholder_for_comparison_to_restore_link());
    }
    if (cached_has_bits & 0x00000020u) {
      update_geometry_to_match_object_placeholder_ = from.update_geometry_to_match_object_placeholder_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_pasting_ = from.is_pasting_;
    }
    if (cached_has_bits & 0x00000080u) {
      remove_slide_specific_hyperlinks_ = from.remove_slide_specific_hyperlinks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_saved_next_untitled_resolver_index(from._internal_saved_next_untitled_resolver_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertDrawablesArchive::CopyFrom(const CommandSlideInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_drawables_using_object_placeholder_geometry_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(insert_build_descriptions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(remove_build_descriptions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(working_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(working_insert_build_descriptions_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_args_list()) {
    if (!args_list_->IsInitialized()) return false;
  }
  if (_internal_has_undo_archive()) {
    if (!undo_archive_->IsInitialized()) return false;
  }
  if (_internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link()) {
    if (!geometry_of_object_placeholder_for_comparison_to_restore_link_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertDrawablesArchive::InternalSwap(CommandSlideInsertDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  ids_of_drawables_using_object_placeholder_geometry_.InternalSwap(&other->ids_of_drawables_using_object_placeholder_geometry_);
  sage_placeholder_tags_list_.InternalSwap(&other->sage_placeholder_tags_list_);
  insert_build_descriptions_.InternalSwap(&other->insert_build_descriptions_);
  remove_build_descriptions_.InternalSwap(&other->remove_build_descriptions_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  working_drawables_.InternalSwap(&other->working_drawables_);
  working_insert_build_descriptions_.InternalSwap(&other->working_insert_build_descriptions_);
  instructional_text_list_.InternalSwap(&other->instructional_text_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, saved_next_untitled_resolver_index_)
      + sizeof(CommandSlideInsertDrawablesArchive::saved_next_untitled_resolver_index_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertDrawablesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandSlideSetPlaceholdersForTagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetPlaceholdersForTagsArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideSetPlaceholdersForTagsArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::super(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideSetPlaceholdersForTagsArchive::_Internal::slide_id(const CommandSlideSetPlaceholdersForTagsArchive* msg) {
  return *msg->slide_id_;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_infos() {
  infos_.Clear();
}
void CommandSlideSetPlaceholdersForTagsArchive::clear_old_infos() {
  old_infos_.Clear();
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena),
  tags_(arena),
  old_tags_(arena),
  old_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}
CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_),
      tags_(from.tags_),
      old_tags_(from.old_tags_),
      old_infos_(from.old_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(slide_id_));
}

CommandSlideSetPlaceholdersForTagsArchive::~CommandSlideSetPlaceholdersForTagsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideSetPlaceholdersForTagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
}

void CommandSlideSetPlaceholdersForTagsArchive::ArenaDtor(void* object) {
  CommandSlideSetPlaceholdersForTagsArchive* _this = reinterpret_cast< CommandSlideSetPlaceholdersForTagsArchive* >(object);
  (void)_this;
}
void CommandSlideSetPlaceholdersForTagsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideSetPlaceholdersForTagsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideSetPlaceholdersForTagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  tags_.Clear();
  old_tags_.Clear();
  old_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetPlaceholdersForTagsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string old_tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideSetPlaceholdersForTagsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSP.Reference infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_infos(i), target, stream);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.tags");
    target = stream->WriteString(4, s, target);
  }

  // repeated string old_tags = 5;
  for (int i = 0, n = this->_internal_old_tags_size(); i < n; i++) {
    const auto& s = this->_internal_old_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags");
    target = stream->WriteString(5, s, target);
  }

  // repeated .TSP.Reference old_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetPlaceholdersForTagsArchive)
  return target;
}

size_t CommandSlideSetPlaceholdersForTagsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  return total_size;
}
size_t CommandSlideSetPlaceholdersForTagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 3;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string old_tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(old_tags_.size());
  for (int i = 0, n = old_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      old_tags_.Get(i));
  }

  // repeated .TSP.Reference old_infos = 6;
  total_size += 1UL * this->_internal_old_infos_size();
  for (const auto& msg : this->old_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetPlaceholdersForTagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideSetPlaceholdersForTagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetPlaceholdersForTagsArchive::GetClassData() const { return &_class_data_; }

void CommandSlideSetPlaceholdersForTagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideSetPlaceholdersForTagsArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideSetPlaceholdersForTagsArchive &>(from));
}


void CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  tags_.MergeFrom(from.tags_);
  old_tags_.MergeFrom(from.old_tags_);
  old_infos_.MergeFrom(from.old_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetPlaceholdersForTagsArchive::CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetPlaceholdersForTagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetPlaceholdersForTagsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_infos_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetPlaceholdersForTagsArchive::InternalSwap(CommandSlideSetPlaceholdersForTagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  tags_.InternalSwap(&other->tags_);
  old_tags_.InternalSwap(&other->old_tags_);
  old_infos_.InternalSwap(&other->old_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, slide_id_)
      + sizeof(CommandSlideSetPlaceholdersForTagsArchive::slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetPlaceholdersForTagsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandTemplateSlideSetPlaceholderForTagArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSlideSetPlaceholderForTagArchive>()._has_bits_);
  static const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super(const CommandTemplateSlideSetPlaceholderForTagArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& placeholder_id(const CommandTemplateSlideSetPlaceholderForTagArchive* msg);
  static void set_has_placeholder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::KN::CommandSlideSetPlaceholdersForTagsArchive&
CommandTemplateSlideSetPlaceholderForTagArchive::_Internal::super(const CommandTemplateSlideSetPlaceholderForTagArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandTemplateSlideSetPlaceholderForTagArchive::_Internal::placeholder_id(const CommandTemplateSlideSetPlaceholderForTagArchive* msg) {
  return *msg->placeholder_id_;
}
void CommandTemplateSlideSetPlaceholderForTagArchive::clear_placeholder_id() {
  if (placeholder_id_ != nullptr) placeholder_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
}
CommandTemplateSlideSetPlaceholderForTagArchive::CommandTemplateSlideSetPlaceholderForTagArchive(const CommandTemplateSlideSetPlaceholderForTagArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::KN::CommandSlideSetPlaceholdersForTagsArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_placeholder_id()) {
    placeholder_id_ = new ::TSP::UUID(*from.placeholder_id_);
  } else {
    placeholder_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
}

inline void CommandTemplateSlideSetPlaceholderForTagArchive::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placeholder_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(placeholder_id_));
}

CommandTemplateSlideSetPlaceholderForTagArchive::~CommandTemplateSlideSetPlaceholderForTagArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTemplateSlideSetPlaceholderForTagArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete placeholder_id_;
}

void CommandTemplateSlideSetPlaceholderForTagArchive::ArenaDtor(void* object) {
  CommandTemplateSlideSetPlaceholderForTagArchive* _this = reinterpret_cast< CommandTemplateSlideSetPlaceholderForTagArchive* >(object);
  (void)_this;
}
void CommandTemplateSlideSetPlaceholderForTagArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTemplateSlideSetPlaceholderForTagArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTemplateSlideSetPlaceholderForTagArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(placeholder_id_ != nullptr);
      placeholder_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSlideSetPlaceholderForTagArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID placeholder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTemplateSlideSetPlaceholderForTagArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID placeholder_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::placeholder_id(this), target, stream);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  return target;
}

size_t CommandTemplateSlideSetPlaceholderForTagArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_placeholder_id()) {
    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placeholder_id_);
  }

  return total_size;
}
size_t CommandTemplateSlideSetPlaceholderForTagArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placeholder_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSlideSetPlaceholderForTagArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTemplateSlideSetPlaceholderForTagArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSlideSetPlaceholderForTagArchive::GetClassData() const { return &_class_data_; }

void CommandTemplateSlideSetPlaceholderForTagArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTemplateSlideSetPlaceholderForTagArchive *>(to)->MergeFrom(
      static_cast<const CommandTemplateSlideSetPlaceholderForTagArchive &>(from));
}


void CommandTemplateSlideSetPlaceholderForTagArchive::MergeFrom(const CommandTemplateSlideSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::KN::CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_placeholder_id()->::TSP::UUID::MergeFrom(from._internal_placeholder_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSlideSetPlaceholderForTagArchive::CopyFrom(const CommandTemplateSlideSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSlideSetPlaceholderForTagArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_placeholder_id()) {
    if (!placeholder_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSlideSetPlaceholderForTagArchive::InternalSwap(CommandTemplateSlideSetPlaceholderForTagArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, GetArenaForAllocation(),
      &other->tag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSlideSetPlaceholderForTagArchive, placeholder_id_)
      + sizeof(CommandTemplateSlideSetPlaceholderForTagArchive::placeholder_id_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSlideSetPlaceholderForTagArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSlideSetPlaceholderForTagArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandSlidePropagateSetPlaceholderForTagArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePropagateSetPlaceholderForTagArchive>()._has_bits_);
  static const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& placeholder_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_placeholder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& original_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg);
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::KN::CommandSlideSetPlaceholdersForTagsArchive&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::super(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::placeholder_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->placeholder_id_;
}
const ::TSP::UUID&
CommandSlidePropagateSetPlaceholderForTagArchive::_Internal::original_id(const CommandSlidePropagateSetPlaceholderForTagArchive* msg) {
  return *msg->original_id_;
}
void CommandSlidePropagateSetPlaceholderForTagArchive::clear_placeholder_id() {
  if (placeholder_id_ != nullptr) placeholder_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePropagateSetPlaceholderForTagArchive::clear_original_id() {
  if (original_id_ != nullptr) original_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
}
CommandSlidePropagateSetPlaceholderForTagArchive::CommandSlidePropagateSetPlaceholderForTagArchive(const CommandSlidePropagateSetPlaceholderForTagArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::KN::CommandSlideSetPlaceholdersForTagsArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_placeholder_id()) {
    placeholder_id_ = new ::TSP::UUID(*from.placeholder_id_);
  } else {
    placeholder_id_ = nullptr;
  }
  if (from._internal_has_original_id()) {
    original_id_ = new ::TSP::UUID(*from.original_id_);
  } else {
    original_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
}

inline void CommandSlidePropagateSetPlaceholderForTagArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(original_id_));
}

CommandSlidePropagateSetPlaceholderForTagArchive::~CommandSlidePropagateSetPlaceholderForTagArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlidePropagateSetPlaceholderForTagArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete placeholder_id_;
  if (this != internal_default_instance()) delete original_id_;
}

void CommandSlidePropagateSetPlaceholderForTagArchive::ArenaDtor(void* object) {
  CommandSlidePropagateSetPlaceholderForTagArchive* _this = reinterpret_cast< CommandSlidePropagateSetPlaceholderForTagArchive* >(object);
  (void)_this;
}
void CommandSlidePropagateSetPlaceholderForTagArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlidePropagateSetPlaceholderForTagArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlidePropagateSetPlaceholderForTagArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(placeholder_id_ != nullptr);
      placeholder_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(original_id_ != nullptr);
      original_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePropagateSetPlaceholderForTagArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID placeholder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID original_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlidePropagateSetPlaceholderForTagArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID placeholder_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::placeholder_id(this), target, stream);
  }

  // required .TSP.UUID original_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::original_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  return target;
}

size_t CommandSlidePropagateSetPlaceholderForTagArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_placeholder_id()) {
    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placeholder_id_);
  }

  if (_internal_has_original_id()) {
    // required .TSP.UUID original_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_id_);
  }

  return total_size;
}
size_t CommandSlidePropagateSetPlaceholderForTagArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID placeholder_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placeholder_id_);

    // required .TSP.UUID original_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePropagateSetPlaceholderForTagArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlidePropagateSetPlaceholderForTagArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePropagateSetPlaceholderForTagArchive::GetClassData() const { return &_class_data_; }

void CommandSlidePropagateSetPlaceholderForTagArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlidePropagateSetPlaceholderForTagArchive *>(to)->MergeFrom(
      static_cast<const CommandSlidePropagateSetPlaceholderForTagArchive &>(from));
}


void CommandSlidePropagateSetPlaceholderForTagArchive::MergeFrom(const CommandSlidePropagateSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::KN::CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_placeholder_id()->::TSP::UUID::MergeFrom(from._internal_placeholder_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_original_id()->::TSP::UUID::MergeFrom(from._internal_original_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePropagateSetPlaceholderForTagArchive::CopyFrom(const CommandSlidePropagateSetPlaceholderForTagArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePropagateSetPlaceholderForTagArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_placeholder_id()) {
    if (!placeholder_id_->IsInitialized()) return false;
  }
  if (_internal_has_original_id()) {
    if (!original_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePropagateSetPlaceholderForTagArchive::InternalSwap(CommandSlidePropagateSetPlaceholderForTagArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePropagateSetPlaceholderForTagArchive, original_id_)
      + sizeof(CommandSlidePropagateSetPlaceholderForTagArchive::original_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePropagateSetPlaceholderForTagArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePropagateSetPlaceholderForTagArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandSlideRemoveDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveDrawableArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::MixedIdOperationArgs& args_list(const CommandSlideRemoveDrawableArchive* msg);
  static void set_has_args_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveDrawableArchive::_Internal::super(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideRemoveDrawableArchive::_Internal::slide_id(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->slide_id_;
}
const ::KN::MixedIdOperationArgs&
CommandSlideRemoveDrawableArchive::_Internal::args_list(const CommandSlideRemoveDrawableArchive* msg) {
  return *msg->args_list_;
}
void CommandSlideRemoveDrawableArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveDrawableArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveDrawableArchive::clear_sorteddrawables() {
  sorteddrawables_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_args_list() {
  if (args_list_ != nullptr) args_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveDrawableArchive::clear_insert_build_descriptions() {
  insert_build_descriptions_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_remove_build_descriptions() {
  remove_build_descriptions_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_drawables_using_object_placeholder_geometry() {
  drawables_using_object_placeholder_geometry_.Clear();
}
void CommandSlideRemoveDrawableArchive::clear_inverse_insert_hyperlink_commands() {
  inverse_insert_hyperlink_commands_.Clear();
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sorteddrawables_(arena),
  placeholdertags_(arena),
  insert_build_descriptions_(arena),
  remove_build_descriptions_(arena),
  drawables_using_object_placeholder_geometry_(arena),
  inverse_insert_hyperlink_commands_(arena),
  drawable_indexes_for_undo_(arena),
  instructional_text_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveDrawableArchive)
}
CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sorteddrawables_(from.sorteddrawables_),
      placeholdertags_(from.placeholdertags_),
      insert_build_descriptions_(from.insert_build_descriptions_),
      remove_build_descriptions_(from.remove_build_descriptions_),
      drawables_using_object_placeholder_geometry_(from.drawables_using_object_placeholder_geometry_),
      inverse_insert_hyperlink_commands_(from.inverse_insert_hyperlink_commands_),
      drawable_indexes_for_undo_(from.drawable_indexes_for_undo_),
      instructional_text_list_(from.instructional_text_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_args_list()) {
    args_list_ = new ::KN::MixedIdOperationArgs(*from.args_list_);
  } else {
    args_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveDrawableArchive)
}

inline void CommandSlideRemoveDrawableArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&args_list_) -
    reinterpret_cast<char*>(&super_)) + sizeof(args_list_));
}

CommandSlideRemoveDrawableArchive::~CommandSlideRemoveDrawableArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveDrawableArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideRemoveDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete args_list_;
}

void CommandSlideRemoveDrawableArchive::ArenaDtor(void* object) {
  CommandSlideRemoveDrawableArchive* _this = reinterpret_cast< CommandSlideRemoveDrawableArchive* >(object);
  (void)_this;
}
void CommandSlideRemoveDrawableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideRemoveDrawableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideRemoveDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveDrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorteddrawables_.Clear();
  placeholdertags_.Clear();
  insert_build_descriptions_.Clear();
  remove_build_descriptions_.Clear();
  drawables_using_object_placeholder_geometry_.Clear();
  inverse_insert_hyperlink_commands_.Clear();
  drawable_indexes_for_undo_.Clear();
  instructional_text_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(args_list_ != nullptr);
      args_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveDrawableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference sortedDrawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorteddrawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .KN.MixedIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_args_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string placeholderTags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholdertags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference insert_build_descriptions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference remove_build_descriptions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_build_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_insert_hyperlink_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 drawable_indexes_for_undo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_drawable_indexes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string instructional_text_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instructional_text_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideRemoveDrawableArchive.instructional_text_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideRemoveDrawableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveDrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorteddrawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorteddrawables(i), target, stream);
  }

  // required .KN.MixedIdOperationArgs args_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::args_list(this), target, stream);
  }

  // repeated string placeholderTags = 5;
  for (int i = 0, n = this->_internal_placeholdertags_size(); i < n; i++) {
    const auto& s = this->_internal_placeholdertags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideRemoveDrawableArchive.placeholderTags");
    target = stream->WriteString(5, s, target);
  }

  // repeated .TSP.Reference insert_build_descriptions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insert_build_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_insert_build_descriptions(i), target, stream);
  }

  // repeated .TSP.Reference remove_build_descriptions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remove_build_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_remove_build_descriptions(i), target, stream);
  }

  // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_using_object_placeholder_geometry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_drawables_using_object_placeholder_geometry(i), target, stream);
  }

  // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverse_insert_hyperlink_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_inverse_insert_hyperlink_commands(i), target, stream);
  }

  // repeated uint32 drawable_indexes_for_undo = 10;
  for (int i = 0, n = this->_internal_drawable_indexes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_drawable_indexes_for_undo(i), target);
  }

  // repeated string instructional_text_list = 11;
  for (int i = 0, n = this->_internal_instructional_text_list_size(); i < n; i++) {
    const auto& s = this->_internal_instructional_text_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideRemoveDrawableArchive.instructional_text_list");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveDrawableArchive)
  return target;
}

size_t CommandSlideRemoveDrawableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  if (_internal_has_args_list()) {
    // required .KN.MixedIdOperationArgs args_list = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_list_);
  }

  return total_size;
}
size_t CommandSlideRemoveDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveDrawableArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

    // required .KN.MixedIdOperationArgs args_list = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1UL * this->_internal_sorteddrawables_size();
  for (const auto& msg : this->sorteddrawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholderTags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(placeholdertags_.size());
  for (int i = 0, n = placeholdertags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      placeholdertags_.Get(i));
  }

  // repeated .TSP.Reference insert_build_descriptions = 6;
  total_size += 1UL * this->_internal_insert_build_descriptions_size();
  for (const auto& msg : this->insert_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference remove_build_descriptions = 7;
  total_size += 1UL * this->_internal_remove_build_descriptions_size();
  for (const auto& msg : this->remove_build_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  total_size += 1UL * this->_internal_drawables_using_object_placeholder_geometry_size();
  for (const auto& msg : this->drawables_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
  total_size += 1UL * this->_internal_inverse_insert_hyperlink_commands_size();
  for (const auto& msg : this->inverse_insert_hyperlink_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 drawable_indexes_for_undo = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->drawable_indexes_for_undo_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_drawable_indexes_for_undo_size());
    total_size += data_size;
  }

  // repeated string instructional_text_list = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(instructional_text_list_.size());
  for (int i = 0, n = instructional_text_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      instructional_text_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveDrawableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideRemoveDrawableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveDrawableArchive::GetClassData() const { return &_class_data_; }

void CommandSlideRemoveDrawableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideRemoveDrawableArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideRemoveDrawableArchive &>(from));
}


void CommandSlideRemoveDrawableArchive::MergeFrom(const CommandSlideRemoveDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveDrawableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorteddrawables_.MergeFrom(from.sorteddrawables_);
  placeholdertags_.MergeFrom(from.placeholdertags_);
  insert_build_descriptions_.MergeFrom(from.insert_build_descriptions_);
  remove_build_descriptions_.MergeFrom(from.remove_build_descriptions_);
  drawables_using_object_placeholder_geometry_.MergeFrom(from.drawables_using_object_placeholder_geometry_);
  inverse_insert_hyperlink_commands_.MergeFrom(from.inverse_insert_hyperlink_commands_);
  drawable_indexes_for_undo_.MergeFrom(from.drawable_indexes_for_undo_);
  instructional_text_list_.MergeFrom(from.instructional_text_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_args_list()->::KN::MixedIdOperationArgs::MergeFrom(from._internal_args_list());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveDrawableArchive::CopyFrom(const CommandSlideRemoveDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveDrawableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sorteddrawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(insert_build_descriptions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(remove_build_descriptions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_using_object_placeholder_geometry_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inverse_insert_hyperlink_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_args_list()) {
    if (!args_list_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveDrawableArchive::InternalSwap(CommandSlideRemoveDrawableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sorteddrawables_.InternalSwap(&other->sorteddrawables_);
  placeholdertags_.InternalSwap(&other->placeholdertags_);
  insert_build_descriptions_.InternalSwap(&other->insert_build_descriptions_);
  remove_build_descriptions_.InternalSwap(&other->remove_build_descriptions_);
  drawables_using_object_placeholder_geometry_.InternalSwap(&other->drawables_using_object_placeholder_geometry_);
  inverse_insert_hyperlink_commands_.InternalSwap(&other->inverse_insert_hyperlink_commands_);
  drawable_indexes_for_undo_.InternalSwap(&other->drawable_indexes_for_undo_);
  instructional_text_list_.InternalSwap(&other->instructional_text_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, args_list_)
      + sizeof(CommandSlideRemoveDrawableArchive::args_list_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveDrawableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandSlideMoveDrawableZOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveDrawableZOrderArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideMoveDrawableZOrderArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveDrawableZOrderArchive::_Internal::super(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideMoveDrawableZOrderArchive::_Internal::slide_id(const CommandSlideMoveDrawableZOrderArchive* msg) {
  return *msg->slide_id_;
}
void CommandSlideMoveDrawableZOrderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_old_ordered_infos() {
  old_ordered_infos_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_args_list() {
  args_list_.Clear();
}
void CommandSlideMoveDrawableZOrderArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideMoveDrawableZOrderArchive::clear_old_ordered_infos_on_slide_for_undo() {
  old_ordered_infos_on_slide_for_undo_.Clear();
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  old_ordered_infos_(arena),
  args_list_(arena),
  old_ordered_infos_on_slide_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}
CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_ordered_infos_(from.old_ordered_infos_),
      args_list_(from.args_list_),
      old_ordered_infos_on_slide_for_undo_(from.old_ordered_infos_on_slide_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveDrawableZOrderArchive)
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(slide_id_));
}

CommandSlideMoveDrawableZOrderArchive::~CommandSlideMoveDrawableZOrderArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveDrawableZOrderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideMoveDrawableZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
}

void CommandSlideMoveDrawableZOrderArchive::ArenaDtor(void* object) {
  CommandSlideMoveDrawableZOrderArchive* _this = reinterpret_cast< CommandSlideMoveDrawableZOrderArchive* >(object);
  (void)_this;
}
void CommandSlideMoveDrawableZOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideMoveDrawableZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveDrawableZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_ordered_infos_.Clear();
  args_list_.Clear();
  old_ordered_infos_on_slide_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveDrawableZOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_ordered_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_ordered_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_ordered_infos_on_slide_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideMoveDrawableZOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveDrawableZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_ordered_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_old_ordered_infos(i), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_args_list(i), target, stream);
  }

  // required .TSP.UUID slide_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_ordered_infos_on_slide_for_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_old_ordered_infos_on_slide_for_undo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveDrawableZOrderArchive)
  return target;
}

size_t CommandSlideMoveDrawableZOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  return total_size;
}
size_t CommandSlideMoveDrawableZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_ordered_infos = 4;
  total_size += 1UL * this->_internal_old_ordered_infos_size();
  for (const auto& msg : this->old_ordered_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
  total_size += 1UL * this->_internal_old_ordered_infos_on_slide_for_undo_size();
  for (const auto& msg : this->old_ordered_infos_on_slide_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveDrawableZOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideMoveDrawableZOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveDrawableZOrderArchive::GetClassData() const { return &_class_data_; }

void CommandSlideMoveDrawableZOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideMoveDrawableZOrderArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideMoveDrawableZOrderArchive &>(from));
}


void CommandSlideMoveDrawableZOrderArchive::MergeFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_ordered_infos_.MergeFrom(from.old_ordered_infos_);
  args_list_.MergeFrom(from.args_list_);
  old_ordered_infos_on_slide_for_undo_.MergeFrom(from.old_ordered_infos_on_slide_for_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveDrawableZOrderArchive::CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveDrawableZOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_ordered_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_ordered_infos_on_slide_for_undo_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveDrawableZOrderArchive::InternalSwap(CommandSlideMoveDrawableZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_ordered_infos_.InternalSwap(&other->old_ordered_infos_);
  args_list_.InternalSwap(&other->args_list_);
  old_ordered_infos_on_slide_for_undo_.InternalSwap(&other->old_ordered_infos_on_slide_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, slide_id_)
      + sizeof(CommandSlideMoveDrawableZOrderArchive::slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveDrawableZOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandSlideNodeSetPropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetPropertyArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandSlideNodeSetPropertyArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideNodeSetPropertyArchive::_Internal::super(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlideNodeSetPropertyArchive::_Internal::slide_node_id_path(const CommandSlideNodeSetPropertyArchive* msg) {
  return *msg->slide_node_id_path_;
}
void CommandSlideNodeSetPropertyArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetPropertyArchive::clear_slide_node_id_path() {
  if (slide_node_id_path_ != nullptr) slide_node_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetPropertyArchive)
}
CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_node_id_path()) {
    slide_node_id_path_ = new ::TSP::UUIDPath(*from.slide_node_id_path_);
  } else {
    slide_node_id_path_ = nullptr;
  }
  ::memcpy(&old_value_, &from.old_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&old_value_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetPropertyArchive)
}

inline void CommandSlideNodeSetPropertyArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(value_));
}

CommandSlideNodeSetPropertyArchive::~CommandSlideNodeSetPropertyArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetPropertyArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideNodeSetPropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_node_id_path_;
}

void CommandSlideNodeSetPropertyArchive::ArenaDtor(void* object) {
  CommandSlideNodeSetPropertyArchive* _this = reinterpret_cast< CommandSlideNodeSetPropertyArchive* >(object);
  (void)_this;
}
void CommandSlideNodeSetPropertyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideNodeSetPropertyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideNodeSetPropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetPropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slide_node_id_path_ != nullptr);
      slide_node_id_path_->Clear();
    }
  }
  ::memset(&old_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&old_value_)) + sizeof(value_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetPropertyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideNodeSetPropertyArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_old_value(&has_bits);
          old_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideNodeSetPropertyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetPropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_node_id_path(this), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideNodeSetPropertyArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required bool old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_old_value(), target);
  }

  // required bool value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetPropertyArchive)
  return target;
}

size_t CommandSlideNodeSetPropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);
  }

  if (_internal_has_old_value()) {
    // required bool old_value = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_value()) {
    // required bool value = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideNodeSetPropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetPropertyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);

    // required bool old_value = 4;
    total_size += 1 + 1;

    // required bool value = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetPropertyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideNodeSetPropertyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetPropertyArchive::GetClassData() const { return &_class_data_; }

void CommandSlideNodeSetPropertyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideNodeSetPropertyArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideNodeSetPropertyArchive &>(from));
}


void CommandSlideNodeSetPropertyArchive::MergeFrom(const CommandSlideNodeSetPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetPropertyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      old_value_ = from.old_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetPropertyArchive::CopyFrom(const CommandSlideNodeSetPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetPropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!slide_node_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive::InternalSwap(CommandSlideNodeSetPropertyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, value_)
      + sizeof(CommandSlideNodeSetPropertyArchive::value_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetPropertyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandSlideNodeSetViewStatePropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideNodeSetViewStatePropertyArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideNodeSetViewStatePropertyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandSlideNodeSetViewStatePropertyArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideNodeSetViewStatePropertyArchive::_Internal::super(const CommandSlideNodeSetViewStatePropertyArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlideNodeSetViewStatePropertyArchive::_Internal::slide_node_id_path(const CommandSlideNodeSetViewStatePropertyArchive* msg) {
  return *msg->slide_node_id_path_;
}
void CommandSlideNodeSetViewStatePropertyArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideNodeSetViewStatePropertyArchive::clear_slide_node_id_path() {
  if (slide_node_id_path_ != nullptr) slide_node_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
}
CommandSlideNodeSetViewStatePropertyArchive::CommandSlideNodeSetViewStatePropertyArchive(const CommandSlideNodeSetViewStatePropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_node_id_path()) {
    slide_node_id_path_ = new ::TSP::UUIDPath(*from.slide_node_id_path_);
  } else {
    slide_node_id_path_ = nullptr;
  }
  ::memcpy(&old_value_, &from.old_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&old_value_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
}

inline void CommandSlideNodeSetViewStatePropertyArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(value_));
}

CommandSlideNodeSetViewStatePropertyArchive::~CommandSlideNodeSetViewStatePropertyArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideNodeSetViewStatePropertyArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideNodeSetViewStatePropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_node_id_path_;
}

void CommandSlideNodeSetViewStatePropertyArchive::ArenaDtor(void* object) {
  CommandSlideNodeSetViewStatePropertyArchive* _this = reinterpret_cast< CommandSlideNodeSetViewStatePropertyArchive* >(object);
  (void)_this;
}
void CommandSlideNodeSetViewStatePropertyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideNodeSetViewStatePropertyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideNodeSetViewStatePropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slide_node_id_path_ != nullptr);
      slide_node_id_path_->Clear();
    }
  }
  ::memset(&old_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&old_value_)) + sizeof(value_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideNodeSetViewStatePropertyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSlideNodeSetViewStatePropertyArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_old_value(&has_bits);
          old_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideNodeSetViewStatePropertyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_node_id_path(this), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSlideNodeSetViewStatePropertyArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required bool old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_old_value(), target);
  }

  // required bool value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideNodeSetViewStatePropertyArchive)
  return target;
}

size_t CommandSlideNodeSetViewStatePropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);
  }

  if (_internal_has_old_value()) {
    // required bool old_value = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_value()) {
    // required bool value = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSlideNodeSetViewStatePropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);

    // required bool old_value = 4;
    total_size += 1 + 1;

    // required bool value = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideNodeSetViewStatePropertyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideNodeSetViewStatePropertyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideNodeSetViewStatePropertyArchive::GetClassData() const { return &_class_data_; }

void CommandSlideNodeSetViewStatePropertyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideNodeSetViewStatePropertyArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideNodeSetViewStatePropertyArchive &>(from));
}


void CommandSlideNodeSetViewStatePropertyArchive::MergeFrom(const CommandSlideNodeSetViewStatePropertyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      old_value_ = from.old_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideNodeSetViewStatePropertyArchive::CopyFrom(const CommandSlideNodeSetViewStatePropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideNodeSetViewStatePropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetViewStatePropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!slide_node_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetViewStatePropertyArchive::InternalSwap(CommandSlideNodeSetViewStatePropertyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetViewStatePropertyArchive, value_)
      + sizeof(CommandSlideNodeSetViewStatePropertyArchive::value_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideNodeSetViewStatePropertyArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideNodeSetViewStatePropertyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSlideSetBackgroundFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetBackgroundFillArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& old_fill(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_old_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FillArchive& new_fill(const CommandSlideSetBackgroundFillArchive* msg);
  static void set_has_new_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetBackgroundFillArchive::_Internal::super(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlideSetBackgroundFillArchive::_Internal::slide_id_path(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->slide_id_path_;
}
const ::TSD::FillArchive&
CommandSlideSetBackgroundFillArchive::_Internal::old_fill(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->old_fill_;
}
const ::TSD::FillArchive&
CommandSlideSetBackgroundFillArchive::_Internal::new_fill(const CommandSlideSetBackgroundFillArchive* msg) {
  return *msg->new_fill_;
}
void CommandSlideSetBackgroundFillArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetBackgroundFillArchive::clear_slide_id_path() {
  if (slide_id_path_ != nullptr) slide_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetBackgroundFillArchive::clear_old_fill() {
  if (old_fill_ != nullptr) old_fill_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetBackgroundFillArchive::clear_new_fill() {
  if (new_fill_ != nullptr) new_fill_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetBackgroundFillArchive)
}
CommandSlideSetBackgroundFillArchive::CommandSlideSetBackgroundFillArchive(const CommandSlideSetBackgroundFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id_path()) {
    slide_id_path_ = new ::TSP::UUIDPath(*from.slide_id_path_);
  } else {
    slide_id_path_ = nullptr;
  }
  if (from._internal_has_old_fill()) {
    old_fill_ = new ::TSD::FillArchive(*from.old_fill_);
  } else {
    old_fill_ = nullptr;
  }
  if (from._internal_has_new_fill()) {
    new_fill_ = new ::TSD::FillArchive(*from.new_fill_);
  } else {
    new_fill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetBackgroundFillArchive)
}

inline void CommandSlideSetBackgroundFillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_fill_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_fill_));
}

CommandSlideSetBackgroundFillArchive::~CommandSlideSetBackgroundFillArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetBackgroundFillArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideSetBackgroundFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_path_;
  if (this != internal_default_instance()) delete old_fill_;
  if (this != internal_default_instance()) delete new_fill_;
}

void CommandSlideSetBackgroundFillArchive::ArenaDtor(void* object) {
  CommandSlideSetBackgroundFillArchive* _this = reinterpret_cast< CommandSlideSetBackgroundFillArchive* >(object);
  (void)_this;
}
void CommandSlideSetBackgroundFillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideSetBackgroundFillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideSetBackgroundFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetBackgroundFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_path_ != nullptr);
      slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_fill_ != nullptr);
      old_fill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_fill_ != nullptr);
      new_fill_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetBackgroundFillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive old_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.FillArchive new_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideSetBackgroundFillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetBackgroundFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id_path(this), target, stream);
  }

  // optional .TSD.FillArchive old_fill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_fill(this), target, stream);
  }

  // required .TSD.FillArchive new_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetBackgroundFillArchive)
  return target;
}

size_t CommandSlideSetBackgroundFillArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetBackgroundFillArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);
  }

  if (_internal_has_new_fill()) {
    // required .TSD.FillArchive new_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_fill_);
  }

  return total_size;
}
size_t CommandSlideSetBackgroundFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetBackgroundFillArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);

    // required .TSD.FillArchive new_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_fill_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.FillArchive old_fill = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_fill_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetBackgroundFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideSetBackgroundFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetBackgroundFillArchive::GetClassData() const { return &_class_data_; }

void CommandSlideSetBackgroundFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideSetBackgroundFillArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideSetBackgroundFillArchive &>(from));
}


void CommandSlideSetBackgroundFillArchive::MergeFrom(const CommandSlideSetBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetBackgroundFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_fill()->::TSD::FillArchive::MergeFrom(from._internal_old_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_fill()->::TSD::FillArchive::MergeFrom(from._internal_new_fill());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetBackgroundFillArchive::CopyFrom(const CommandSlideSetBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetBackgroundFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetBackgroundFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_fill()) {
    if (!old_fill_->IsInitialized()) return false;
  }
  if (_internal_has_new_fill()) {
    if (!new_fill_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetBackgroundFillArchive::InternalSwap(CommandSlideSetBackgroundFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetBackgroundFillArchive, new_fill_)
      + sizeof(CommandSlideSetBackgroundFillArchive::new_fill_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetBackgroundFillArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetBackgroundFillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSlideSetStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideSetStyleArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideSetStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_slide_style(const CommandSlideSetStyleArchive* msg);
  static void set_has_old_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideSetStyleArchive::_Internal::super(const CommandSlideSetStyleArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlideSetStyleArchive::_Internal::slide_id_path(const CommandSlideSetStyleArchive* msg) {
  return *msg->slide_id_path_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->slide_style_;
}
const ::TSP::Reference&
CommandSlideSetStyleArchive::_Internal::old_slide_style(const CommandSlideSetStyleArchive* msg) {
  return *msg->old_slide_style_;
}
void CommandSlideSetStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideSetStyleArchive::clear_slide_id_path() {
  if (slide_id_path_ != nullptr) slide_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideSetStyleArchive::clear_slide_style() {
  if (slide_style_ != nullptr) slide_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideSetStyleArchive::clear_old_slide_style() {
  if (old_slide_style_ != nullptr) old_slide_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideSetStyleArchive)
}
CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id_path()) {
    slide_id_path_ = new ::TSP::UUIDPath(*from.slide_id_path_);
  } else {
    slide_id_path_ = nullptr;
  }
  if (from._internal_has_slide_style()) {
    slide_style_ = new ::TSP::Reference(*from.slide_style_);
  } else {
    slide_style_ = nullptr;
  }
  if (from._internal_has_old_slide_style()) {
    old_slide_style_ = new ::TSP::Reference(*from.old_slide_style_);
  } else {
    old_slide_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideSetStyleArchive)
}

inline void CommandSlideSetStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_slide_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_slide_style_));
}

CommandSlideSetStyleArchive::~CommandSlideSetStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideSetStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideSetStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_path_;
  if (this != internal_default_instance()) delete slide_style_;
  if (this != internal_default_instance()) delete old_slide_style_;
}

void CommandSlideSetStyleArchive::ArenaDtor(void* object) {
  CommandSlideSetStyleArchive* _this = reinterpret_cast< CommandSlideSetStyleArchive* >(object);
  (void)_this;
}
void CommandSlideSetStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideSetStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideSetStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideSetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_path_ != nullptr);
      slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slide_style_ != nullptr);
      slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_slide_style_ != nullptr);
      old_slide_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideSetStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference slide_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_slide_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_slide_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideSetStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideSetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id_path(this), target, stream);
  }

  // required .TSP.Reference slide_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::slide_style(this), target, stream);
  }

  // optional .TSP.Reference old_slide_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_slide_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideSetStyleArchive)
  return target;
}

size_t CommandSlideSetStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);
  }

  if (_internal_has_slide_style()) {
    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_style_);
  }

  return total_size;
}
size_t CommandSlideSetStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideSetStyleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);

    // required .TSP.Reference slide_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_slide_style = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_slide_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideSetStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideSetStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideSetStyleArchive::GetClassData() const { return &_class_data_; }

void CommandSlideSetStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideSetStyleArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideSetStyleArchive &>(from));
}


void CommandSlideSetStyleArchive::MergeFrom(const CommandSlideSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideSetStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slide_style()->::TSP::Reference::MergeFrom(from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_slide_style()->::TSP::Reference::MergeFrom(from._internal_old_slide_style());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideSetStyleArchive::CopyFrom(const CommandSlideSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideSetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_slide_style()) {
    if (!slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_old_slide_style()) {
    if (!old_slide_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetStyleArchive::InternalSwap(CommandSlideSetStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, old_slide_style_)
      + sizeof(CommandSlideSetStyleArchive::old_slide_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideSetStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideSetStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandShowMarkOutOfSyncRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMarkOutOfSyncRecordingArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_is_recording_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_is_recording_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Date& old_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_old_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Date& new_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg);
  static void set_has_new_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::super(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::show(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::old_recording(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->old_recording_;
}
const ::TSP::Date&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::old_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->old_modification_date_;
}
const ::TSP::Date&
CommandShowMarkOutOfSyncRecordingArchive::_Internal::new_modification_date(const CommandShowMarkOutOfSyncRecordingArchive* msg) {
  return *msg->new_modification_date_;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_old_recording() {
  if (old_recording_ != nullptr) old_recording_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_old_modification_date() {
  if (old_modification_date_ != nullptr) old_modification_date_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandShowMarkOutOfSyncRecordingArchive::clear_new_modification_date() {
  if (new_modification_date_ != nullptr) new_modification_date_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}
CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_old_recording()) {
    old_recording_ = new ::TSP::Reference(*from.old_recording_);
  } else {
    old_recording_ = nullptr;
  }
  if (from._internal_has_old_modification_date()) {
    old_modification_date_ = new ::TSP::Date(*from.old_modification_date_);
  } else {
    old_modification_date_ = nullptr;
  }
  if (from._internal_has_new_modification_date()) {
    new_modification_date_ = new ::TSP::Date(*from.new_modification_date_);
  } else {
    new_modification_date_ = nullptr;
  }
  ::memcpy(&old_is_recording_out_of_sync_, &from.old_is_recording_out_of_sync_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_is_recording_out_of_sync_) -
    reinterpret_cast<char*>(&old_is_recording_out_of_sync_)) + sizeof(new_is_recording_out_of_sync_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_is_recording_out_of_sync_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_is_recording_out_of_sync_));
}

CommandShowMarkOutOfSyncRecordingArchive::~CommandShowMarkOutOfSyncRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowMarkOutOfSyncRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete old_recording_;
  if (this != internal_default_instance()) delete old_modification_date_;
  if (this != internal_default_instance()) delete new_modification_date_;
}

void CommandShowMarkOutOfSyncRecordingArchive::ArenaDtor(void* object) {
  CommandShowMarkOutOfSyncRecordingArchive* _this = reinterpret_cast< CommandShowMarkOutOfSyncRecordingArchive* >(object);
  (void)_this;
}
void CommandShowMarkOutOfSyncRecordingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowMarkOutOfSyncRecordingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowMarkOutOfSyncRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_recording_ != nullptr);
      old_recording_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_modification_date_ != nullptr);
      old_modification_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(new_modification_date_ != nullptr);
      new_modification_date_->Clear();
    }
  }
  ::memset(&old_is_recording_out_of_sync_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_is_recording_out_of_sync_) -
      reinterpret_cast<char*>(&old_is_recording_out_of_sync_)) + sizeof(new_is_recording_out_of_sync_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMarkOutOfSyncRecordingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_is_recording_out_of_sync = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_old_is_recording_out_of_sync(&has_bits);
          old_is_recording_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool new_is_recording_out_of_sync = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_new_is_recording_out_of_sync(&has_bits);
          new_is_recording_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date old_modification_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_modification_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date new_modification_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_modification_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowMarkOutOfSyncRecordingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_recording(this), target, stream);
  }

  // optional bool old_is_recording_out_of_sync = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_old_is_recording_out_of_sync(), target);
  }

  // optional bool new_is_recording_out_of_sync = 5 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_new_is_recording_out_of_sync(), target);
  }

  // optional .TSP.Date old_modification_date = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::old_modification_date(this), target, stream);
  }

  // optional .TSP.Date new_modification_date = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::new_modification_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMarkOutOfSyncRecordingArchive)
  return target;
}

size_t CommandShowMarkOutOfSyncRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  return total_size;
}
size_t CommandShowMarkOutOfSyncRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional .TSP.Reference old_recording = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_recording_);
    }

    // optional .TSP.Date old_modification_date = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_modification_date_);
    }

    // optional .TSP.Date new_modification_date = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_modification_date_);
    }

    // optional bool old_is_recording_out_of_sync = 4 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool new_is_recording_out_of_sync = 5 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMarkOutOfSyncRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowMarkOutOfSyncRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMarkOutOfSyncRecordingArchive::GetClassData() const { return &_class_data_; }

void CommandShowMarkOutOfSyncRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowMarkOutOfSyncRecordingArchive *>(to)->MergeFrom(
      static_cast<const CommandShowMarkOutOfSyncRecordingArchive &>(from));
}


void CommandShowMarkOutOfSyncRecordingArchive::MergeFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_recording()->::TSP::Reference::MergeFrom(from._internal_old_recording());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_modification_date()->::TSP::Date::MergeFrom(from._internal_old_modification_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_new_modification_date()->::TSP::Date::MergeFrom(from._internal_new_modification_date());
    }
    if (cached_has_bits & 0x00000020u) {
      old_is_recording_out_of_sync_ = from.old_is_recording_out_of_sync_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_is_recording_out_of_sync_ = from.new_is_recording_out_of_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMarkOutOfSyncRecordingArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMarkOutOfSyncRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!old_recording_->IsInitialized()) return false;
  }
  if (_internal_has_old_modification_date()) {
    if (!old_modification_date_->IsInitialized()) return false;
  }
  if (_internal_has_new_modification_date()) {
    if (!new_modification_date_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingArchive::InternalSwap(CommandShowMarkOutOfSyncRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, new_is_recording_out_of_sync_)
      + sizeof(CommandShowMarkOutOfSyncRecordingArchive::new_is_recording_out_of_sync_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMarkOutOfSyncRecordingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMarkOutOfSyncRecordingIfNeededArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& out_of_sync_token(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg);
  static void set_has_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal::super(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandShowMarkOutOfSyncRecordingIfNeededArchive::_Internal::out_of_sync_token(const CommandShowMarkOutOfSyncRecordingIfNeededArchive* msg) {
  return *msg->out_of_sync_token_;
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::clear_out_of_sync_token() {
  if (out_of_sync_token_ != nullptr) out_of_sync_token_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
}
CommandShowMarkOutOfSyncRecordingIfNeededArchive::CommandShowMarkOutOfSyncRecordingIfNeededArchive(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_out_of_sync_token()) {
    out_of_sync_token_ = new ::TSP::UUID(*from.out_of_sync_token_);
  } else {
    out_of_sync_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
}

inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&out_of_sync_token_) -
    reinterpret_cast<char*>(&super_)) + sizeof(out_of_sync_token_));
}

CommandShowMarkOutOfSyncRecordingIfNeededArchive::~CommandShowMarkOutOfSyncRecordingIfNeededArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete out_of_sync_token_;
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::ArenaDtor(void* object) {
  CommandShowMarkOutOfSyncRecordingIfNeededArchive* _this = reinterpret_cast< CommandShowMarkOutOfSyncRecordingIfNeededArchive* >(object);
  (void)_this;
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowMarkOutOfSyncRecordingIfNeededArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(out_of_sync_token_ != nullptr);
      out_of_sync_token_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID out_of_sync_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_of_sync_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID out_of_sync_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::out_of_sync_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  return target;
}

size_t CommandShowMarkOutOfSyncRecordingIfNeededArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUID out_of_sync_token = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_of_sync_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMarkOutOfSyncRecordingIfNeededArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowMarkOutOfSyncRecordingIfNeededArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMarkOutOfSyncRecordingIfNeededArchive::GetClassData() const { return &_class_data_; }

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowMarkOutOfSyncRecordingIfNeededArchive *>(to)->MergeFrom(
      static_cast<const CommandShowMarkOutOfSyncRecordingIfNeededArchive &>(from));
}


void CommandShowMarkOutOfSyncRecordingIfNeededArchive::MergeFrom(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_out_of_sync_token()->::TSP::UUID::MergeFrom(from._internal_out_of_sync_token());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_out_of_sync_token()) {
    if (!out_of_sync_token_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingIfNeededArchive::InternalSwap(CommandShowMarkOutOfSyncRecordingIfNeededArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingIfNeededArchive, out_of_sync_token_)
      + sizeof(CommandShowMarkOutOfSyncRecordingIfNeededArchive::out_of_sync_token_)
      - PROTOBUF_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingIfNeededArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMarkOutOfSyncRecordingIfNeededArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandShowRemoveRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveRecordingArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowRemoveRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveRecordingArchive::_Internal::super(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::show(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
CommandShowRemoveRecordingArchive::_Internal::old_recording(const CommandShowRemoveRecordingArchive* msg) {
  return *msg->old_recording_;
}
void CommandShowRemoveRecordingArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveRecordingArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandShowRemoveRecordingArchive::clear_old_recording() {
  if (old_recording_ != nullptr) old_recording_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveRecordingArchive)
}
CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_old_recording()) {
    old_recording_ = new ::TSP::Reference(*from.old_recording_);
  } else {
    old_recording_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveRecordingArchive)
}

inline void CommandShowRemoveRecordingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_recording_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_recording_));
}

CommandShowRemoveRecordingArchive::~CommandShowRemoveRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveRecordingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowRemoveRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete old_recording_;
}

void CommandShowRemoveRecordingArchive::ArenaDtor(void* object) {
  CommandShowRemoveRecordingArchive* _this = reinterpret_cast< CommandShowRemoveRecordingArchive* >(object);
  (void)_this;
}
void CommandShowRemoveRecordingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowRemoveRecordingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowRemoveRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_recording_ != nullptr);
      old_recording_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveRecordingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowRemoveRecordingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // optional .TSP.Reference old_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_recording(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveRecordingArchive)
  return target;
}

size_t CommandShowRemoveRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  return total_size;
}
size_t CommandShowRemoveRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveRecordingArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_recording_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowRemoveRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveRecordingArchive::GetClassData() const { return &_class_data_; }

void CommandShowRemoveRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowRemoveRecordingArchive *>(to)->MergeFrom(
      static_cast<const CommandShowRemoveRecordingArchive &>(from));
}


void CommandShowRemoveRecordingArchive::MergeFrom(const CommandShowRemoveRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveRecordingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_recording()->::TSP::Reference::MergeFrom(from._internal_old_recording());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveRecordingArchive::CopyFrom(const CommandShowRemoveRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveRecordingArchive::InternalSwap(CommandShowRemoveRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, old_recording_)
      + sizeof(CommandShowRemoveRecordingArchive::old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowRemoveRecordingArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveRecordingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandShowReplaceRecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowReplaceRecordingArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_replacement_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_recording(const CommandShowReplaceRecordingArchive* msg);
  static void set_has_old_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowReplaceRecordingArchive::_Internal::super(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::show(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::replacement_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->replacement_recording_;
}
const ::TSP::Reference&
CommandShowReplaceRecordingArchive::_Internal::old_recording(const CommandShowReplaceRecordingArchive* msg) {
  return *msg->old_recording_;
}
void CommandShowReplaceRecordingArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowReplaceRecordingArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandShowReplaceRecordingArchive::clear_replacement_recording() {
  if (replacement_recording_ != nullptr) replacement_recording_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandShowReplaceRecordingArchive::clear_old_recording() {
  if (old_recording_ != nullptr) old_recording_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowReplaceRecordingArchive)
}
CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_replacement_recording()) {
    replacement_recording_ = new ::TSP::Reference(*from.replacement_recording_);
  } else {
    replacement_recording_ = nullptr;
  }
  if (from._internal_has_old_recording()) {
    old_recording_ = new ::TSP::Reference(*from.old_recording_);
  } else {
    old_recording_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowReplaceRecordingArchive)
}

inline void CommandShowReplaceRecordingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_recording_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_recording_));
}

CommandShowReplaceRecordingArchive::~CommandShowReplaceRecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowReplaceRecordingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowReplaceRecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete replacement_recording_;
  if (this != internal_default_instance()) delete old_recording_;
}

void CommandShowReplaceRecordingArchive::ArenaDtor(void* object) {
  CommandShowReplaceRecordingArchive* _this = reinterpret_cast< CommandShowReplaceRecordingArchive* >(object);
  (void)_this;
}
void CommandShowReplaceRecordingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowReplaceRecordingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowReplaceRecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowReplaceRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(replacement_recording_ != nullptr);
      replacement_recording_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_recording_ != nullptr);
      old_recording_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowReplaceRecordingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference replacement_recording = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_recording = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_recording(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowReplaceRecordingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowReplaceRecordingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // required .TSP.Reference replacement_recording = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replacement_recording(this), target, stream);
  }

  // optional .TSP.Reference old_recording = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::old_recording(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowReplaceRecordingArchive)
  return target;
}

size_t CommandShowReplaceRecordingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  if (_internal_has_replacement_recording()) {
    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replacement_recording_);
  }

  return total_size;
}
size_t CommandShowReplaceRecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowReplaceRecordingArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

    // required .TSP.Reference replacement_recording = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replacement_recording_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_recording = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_recording_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowReplaceRecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowReplaceRecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowReplaceRecordingArchive::GetClassData() const { return &_class_data_; }

void CommandShowReplaceRecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowReplaceRecordingArchive *>(to)->MergeFrom(
      static_cast<const CommandShowReplaceRecordingArchive &>(from));
}


void CommandShowReplaceRecordingArchive::MergeFrom(const CommandShowReplaceRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowReplaceRecordingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_replacement_recording()->::TSP::Reference::MergeFrom(from._internal_replacement_recording());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_recording()->::TSP::Reference::MergeFrom(from._internal_old_recording());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowReplaceRecordingArchive::CopyFrom(const CommandShowReplaceRecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowReplaceRecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowReplaceRecordingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_recording()) {
    if (!replacement_recording_->IsInitialized()) return false;
  }
  if (_internal_has_old_recording()) {
    if (!old_recording_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowReplaceRecordingArchive::InternalSwap(CommandShowReplaceRecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, old_recording_)
      + sizeof(CommandShowReplaceRecordingArchive::old_recording_)
      - PROTOBUF_FIELD_OFFSET(CommandShowReplaceRecordingArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowReplaceRecordingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandShowSetValueArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive_PropertyValue>()._has_bits_);
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& size_value(const CommandShowSetValueArchive_PropertyValue* msg);
  static void set_has_size_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Size&
CommandShowSetValueArchive_PropertyValue::_Internal::size_value(const CommandShowSetValueArchive_PropertyValue* msg) {
  return *msg->size_value_;
}
void CommandShowSetValueArchive_PropertyValue::clear_size_value() {
  if (size_value_ != nullptr) size_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}
CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size_value()) {
    size_value_ = new ::TSP::Size(*from.size_value_);
  } else {
    size_value_ = nullptr;
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_mode_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(show_mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive.PropertyValue)
}

inline void CommandShowSetValueArchive_PropertyValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_mode_value_) -
    reinterpret_cast<char*>(&size_value_)) + sizeof(show_mode_value_));
}

CommandShowSetValueArchive_PropertyValue::~CommandShowSetValueArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive.PropertyValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowSetValueArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete size_value_;
}

void CommandShowSetValueArchive_PropertyValue::ArenaDtor(void* object) {
  CommandShowSetValueArchive_PropertyValue* _this = reinterpret_cast< CommandShowSetValueArchive_PropertyValue* >(object);
  (void)_this;
}
void CommandShowSetValueArchive_PropertyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowSetValueArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(size_value_ != nullptr);
    size_value_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_mode_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(show_mode_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive_PropertyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_show_mode_value(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size size_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowSetValueArchive_PropertyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_show_mode_value(), target);
  }

  // optional .TSP.Size size_value = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::size_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive.PropertyValue)
  return target;
}

size_t CommandShowSetValueArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive.PropertyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Size size_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool bool_value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_show_mode_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowSetValueArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive_PropertyValue::GetClassData() const { return &_class_data_; }

void CommandShowSetValueArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowSetValueArchive_PropertyValue *>(to)->MergeFrom(
      static_cast<const CommandShowSetValueArchive_PropertyValue &>(from));
}


void CommandShowSetValueArchive_PropertyValue::MergeFrom(const CommandShowSetValueArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_size_value()->::TSP::Size::MergeFrom(from._internal_size_value());
    }
    if (cached_has_bits & 0x00000002u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_mode_value_ = from.show_mode_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive_PropertyValue::CopyFrom(const CommandShowSetValueArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_size_value()) {
    if (!size_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive_PropertyValue::InternalSwap(CommandShowSetValueArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, show_mode_value_)
      + sizeof(CommandShowSetValueArchive_PropertyValue::show_mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, size_value_)>(
          reinterpret_cast<char*>(&size_value_),
          reinterpret_cast<char*>(&other->size_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive_PropertyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandShowSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetValueArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const CommandShowSetValueArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& old_value(const CommandShowSetValueArchive* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandShowSetValueArchive_PropertyValue& new_value(const CommandShowSetValueArchive* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetValueArchive::_Internal::super(const CommandShowSetValueArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowSetValueArchive::_Internal::show(const CommandShowSetValueArchive* msg) {
  return *msg->show_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::old_value(const CommandShowSetValueArchive* msg) {
  return *msg->old_value_;
}
const ::KN::CommandShowSetValueArchive_PropertyValue&
CommandShowSetValueArchive::_Internal::new_value(const CommandShowSetValueArchive* msg) {
  return *msg->new_value_;
}
void CommandShowSetValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetValueArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandShowSetValueArchive::CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetValueArchive)
}
CommandShowSetValueArchive::CommandShowSetValueArchive(const CommandShowSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_old_value()) {
    old_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from.old_value_);
  } else {
    old_value_ = nullptr;
  }
  if (from._internal_has_new_value()) {
    new_value_ = new ::KN::CommandShowSetValueArchive_PropertyValue(*from.new_value_);
  } else {
    new_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetValueArchive)
}

inline void CommandShowSetValueArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_value_));
}

CommandShowSetValueArchive::~CommandShowSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete old_value_;
  if (this != internal_default_instance()) delete new_value_;
}

void CommandShowSetValueArchive::ArenaDtor(void* object) {
  CommandShowSetValueArchive* _this = reinterpret_cast< CommandShowSetValueArchive* >(object);
  (void)_this;
}
void CommandShowSetValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowSetValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_value_ != nullptr);
      old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(new_value_ != nullptr);
      new_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandShowSetValueArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowSetValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // required string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_value(this), target, stream);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetValueArchive)
  return target;
}

size_t CommandShowSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  if (_internal_has_old_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_value_);
  }

  if (_internal_has_new_value()) {
    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_value_);
  }

  return total_size;
}
size_t CommandShowSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string property = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_value_);

    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetValueArchive::GetClassData() const { return &_class_data_; }

void CommandShowSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowSetValueArchive *>(to)->MergeFrom(
      static_cast<const CommandShowSetValueArchive &>(from));
}


void CommandShowSetValueArchive::MergeFrom(const CommandShowSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_new_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(from._internal_new_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetValueArchive::CopyFrom(const CommandShowSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive::InternalSwap(CommandShowSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, new_value_)
      + sizeof(CommandShowSetValueArchive::new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetValueArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandShowInsertSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowInsertSlideArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowInsertSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_archive(const CommandShowInsertSlideArchive* msg);
  static void set_has_undo_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowInsertSlideArchive::_Internal::super(const CommandShowInsertSlideArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowInsertSlideArchive::_Internal::undo_archive(const CommandShowInsertSlideArchive* msg) {
  return *msg->undo_archive_;
}
void CommandShowInsertSlideArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowInsertSlideArchive::clear_slide_nodes_being_inserted() {
  slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_working_slide_nodes_being_inserted() {
  working_slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_inserted_args_list() {
  inserted_args_list_.Clear();
}
void CommandShowInsertSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowInsertSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  slide_nodes_for_depth_fix_up_.Clear();
}
void CommandShowInsertSlideArchive::clear_template_slide_nodes_being_inserted() {
  template_slide_nodes_being_inserted_.Clear();
}
void CommandShowInsertSlideArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandShowInsertSlideArchive::clear_undo_archive() {
  if (undo_archive_ != nullptr) undo_archive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slide_nodes_being_inserted_(arena),
  inserted_args_list_(arena),
  ids_of_slide_nodes_with_depth_changes_(arena),
  depths_of_slide_nodes_with_depth_changes_(arena),
  old_depths_of_slide_nodes_with_depth_changes_(arena),
  slide_nodes_for_depth_fix_up_(arena),
  depths_of_slide_nodes_for_depth_fix_up_(arena),
  old_depths_of_slide_nodes_for_depth_fix_up_(arena),
  template_slide_nodes_being_inserted_(arena),
  custom_format_keys_(arena),
  collapsed_state_of_slide_nodes_being_inserted_(arena),
  working_slide_nodes_being_inserted_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowInsertSlideArchive)
}
CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slide_nodes_being_inserted_(from.slide_nodes_being_inserted_),
      inserted_args_list_(from.inserted_args_list_),
      ids_of_slide_nodes_with_depth_changes_(from.ids_of_slide_nodes_with_depth_changes_),
      depths_of_slide_nodes_with_depth_changes_(from.depths_of_slide_nodes_with_depth_changes_),
      old_depths_of_slide_nodes_with_depth_changes_(from.old_depths_of_slide_nodes_with_depth_changes_),
      slide_nodes_for_depth_fix_up_(from.slide_nodes_for_depth_fix_up_),
      depths_of_slide_nodes_for_depth_fix_up_(from.depths_of_slide_nodes_for_depth_fix_up_),
      old_depths_of_slide_nodes_for_depth_fix_up_(from.old_depths_of_slide_nodes_for_depth_fix_up_),
      template_slide_nodes_being_inserted_(from.template_slide_nodes_being_inserted_),
      custom_format_keys_(from.custom_format_keys_),
      collapsed_state_of_slide_nodes_being_inserted_(from.collapsed_state_of_slide_nodes_being_inserted_),
      working_slide_nodes_being_inserted_(from.working_slide_nodes_being_inserted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_undo_archive()) {
    undo_archive_ = new ::TSP::Reference(*from.undo_archive_);
  } else {
    undo_archive_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowInsertSlideArchive)
}

inline void CommandShowInsertSlideArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&super_)) + sizeof(kind_));
}

CommandShowInsertSlideArchive::~CommandShowInsertSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowInsertSlideArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowInsertSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete undo_archive_;
}

void CommandShowInsertSlideArchive::ArenaDtor(void* object) {
  CommandShowInsertSlideArchive* _this = reinterpret_cast< CommandShowInsertSlideArchive* >(object);
  (void)_this;
}
void CommandShowInsertSlideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowInsertSlideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowInsertSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowInsertSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slide_nodes_being_inserted_.Clear();
  inserted_args_list_.Clear();
  ids_of_slide_nodes_with_depth_changes_.Clear();
  depths_of_slide_nodes_with_depth_changes_.Clear();
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
  slide_nodes_for_depth_fix_up_.Clear();
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  template_slide_nodes_being_inserted_.Clear();
  custom_format_keys_.Clear();
  collapsed_state_of_slide_nodes_being_inserted_.Clear();
  working_slide_nodes_being_inserted_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_archive_ != nullptr);
      undo_archive_->Clear();
    }
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowInsertSlideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_inserted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inserted_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::CommandShowInsertSlideArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::CommandShowInsertSlideArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_collapsed_state_of_slide_nodes_being_inserted(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_collapsed_state_of_slide_nodes_being_inserted(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_working_slide_nodes_being_inserted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_archive = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowInsertSlideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowInsertSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_inserted = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_being_inserted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slide_nodes_being_inserted(i), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inserted_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inserted_args_list(i), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ids_of_slide_nodes_with_depth_changes(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_slide_nodes_for_depth_fix_up(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_kind(), target);
  }

  // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_template_slide_nodes_being_inserted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_template_slide_nodes_being_inserted(i), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_custom_format_keys(i), target, stream);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  for (int i = 0, n = this->_internal_collapsed_state_of_slide_nodes_being_inserted_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_collapsed_state_of_slide_nodes_being_inserted(i), target);
  }

  // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_working_slide_nodes_being_inserted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_working_slide_nodes_being_inserted(i), target, stream);
  }

  // optional .TSP.Reference undo_archive = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::undo_archive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowInsertSlideArchive)
  return target;
}

size_t CommandShowInsertSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowInsertSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_inserted = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_inserted_size();
  for (const auto& msg : this->slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
  total_size += 1UL * this->_internal_inserted_args_list_size();
  for (const auto& msg : this->inserted_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  total_size += 1UL * this->_internal_template_slide_nodes_being_inserted_size();
  for (const auto& msg : this->template_slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 12;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_collapsed_state_of_slide_nodes_being_inserted_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_collapsed_state_of_slide_nodes_being_inserted_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  total_size += 1UL * this->_internal_working_slide_nodes_being_inserted_size();
  for (const auto& msg : this->working_slide_nodes_being_inserted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference undo_archive = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_archive_);
    }

    // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowInsertSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowInsertSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowInsertSlideArchive::GetClassData() const { return &_class_data_; }

void CommandShowInsertSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowInsertSlideArchive *>(to)->MergeFrom(
      static_cast<const CommandShowInsertSlideArchive &>(from));
}


void CommandShowInsertSlideArchive::MergeFrom(const CommandShowInsertSlideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowInsertSlideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slide_nodes_being_inserted_.MergeFrom(from.slide_nodes_being_inserted_);
  inserted_args_list_.MergeFrom(from.inserted_args_list_);
  ids_of_slide_nodes_with_depth_changes_.MergeFrom(from.ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.MergeFrom(from.slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.old_depths_of_slide_nodes_for_depth_fix_up_);
  template_slide_nodes_being_inserted_.MergeFrom(from.template_slide_nodes_being_inserted_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  collapsed_state_of_slide_nodes_being_inserted_.MergeFrom(from.collapsed_state_of_slide_nodes_being_inserted_);
  working_slide_nodes_being_inserted_.MergeFrom(from.working_slide_nodes_being_inserted_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_archive()->::TSP::Reference::MergeFrom(from._internal_undo_archive());
    }
    if (cached_has_bits & 0x00000004u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowInsertSlideArchive::CopyFrom(const CommandShowInsertSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowInsertSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowInsertSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_being_inserted_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inserted_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_slide_nodes_with_depth_changes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_for_depth_fix_up_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(template_slide_nodes_being_inserted_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(working_slide_nodes_being_inserted_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_archive()) {
    if (!undo_archive_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowInsertSlideArchive::InternalSwap(CommandShowInsertSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slide_nodes_being_inserted_.InternalSwap(&other->slide_nodes_being_inserted_);
  inserted_args_list_.InternalSwap(&other->inserted_args_list_);
  ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.InternalSwap(&other->slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->old_depths_of_slide_nodes_for_depth_fix_up_);
  template_slide_nodes_being_inserted_.InternalSwap(&other->template_slide_nodes_being_inserted_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  collapsed_state_of_slide_nodes_being_inserted_.InternalSwap(&other->collapsed_state_of_slide_nodes_being_inserted_);
  working_slide_nodes_being_inserted_.InternalSwap(&other->working_slide_nodes_being_inserted_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, kind_)
      + sizeof(CommandShowInsertSlideArchive::kind_)
      - PROTOBUF_FIELD_OFFSET(CommandShowInsertSlideArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowInsertSlideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandShowMoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowMoveSlideArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowMoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowMoveSlideArchive::_Internal::super(const CommandShowMoveSlideArchive* msg) {
  return *msg->super_;
}
void CommandShowMoveSlideArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowMoveSlideArchive::clear_slide_nodes_being_moved_linearly() {
  slide_nodes_being_moved_linearly_.Clear();
}
void CommandShowMoveSlideArchive::clear_rearranged_args_list() {
  rearranged_args_list_.Clear();
}
void CommandShowMoveSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowMoveSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  slide_nodes_for_depth_fix_up_.Clear();
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slide_nodes_being_moved_linearly_(arena),
  rearranged_args_list_(arena),
  ids_of_slide_nodes_with_depth_changes_(arena),
  depths_of_slide_nodes_with_depth_changes_(arena),
  old_depths_of_slide_nodes_with_depth_changes_(arena),
  slide_nodes_for_depth_fix_up_(arena),
  depths_of_slide_nodes_for_depth_fix_up_(arena),
  old_depths_of_slide_nodes_for_depth_fix_up_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowMoveSlideArchive)
}
CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slide_nodes_being_moved_linearly_(from.slide_nodes_being_moved_linearly_),
      rearranged_args_list_(from.rearranged_args_list_),
      ids_of_slide_nodes_with_depth_changes_(from.ids_of_slide_nodes_with_depth_changes_),
      depths_of_slide_nodes_with_depth_changes_(from.depths_of_slide_nodes_with_depth_changes_),
      old_depths_of_slide_nodes_with_depth_changes_(from.old_depths_of_slide_nodes_with_depth_changes_),
      slide_nodes_for_depth_fix_up_(from.slide_nodes_for_depth_fix_up_),
      depths_of_slide_nodes_for_depth_fix_up_(from.depths_of_slide_nodes_for_depth_fix_up_),
      old_depths_of_slide_nodes_for_depth_fix_up_(from.old_depths_of_slide_nodes_for_depth_fix_up_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowMoveSlideArchive)
}

inline void CommandShowMoveSlideArchive::SharedCtor() {
super_ = nullptr;
}

CommandShowMoveSlideArchive::~CommandShowMoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowMoveSlideArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowMoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandShowMoveSlideArchive::ArenaDtor(void* object) {
  CommandShowMoveSlideArchive* _this = reinterpret_cast< CommandShowMoveSlideArchive* >(object);
  (void)_this;
}
void CommandShowMoveSlideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowMoveSlideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowMoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowMoveSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slide_nodes_being_moved_linearly_.Clear();
  rearranged_args_list_.Clear();
  ids_of_slide_nodes_with_depth_changes_.Clear();
  depths_of_slide_nodes_with_depth_changes_.Clear();
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
  slide_nodes_for_depth_fix_up_.Clear();
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowMoveSlideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_moved_linearly(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rearranged_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowMoveSlideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowMoveSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_being_moved_linearly_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slide_nodes_being_moved_linearly(i), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rearranged_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rearranged_args_list(i), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ids_of_slide_nodes_with_depth_changes(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_slide_nodes_for_depth_fix_up(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowMoveSlideArchive)
  return target;
}

size_t CommandShowMoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowMoveSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_moved_linearly_size();
  for (const auto& msg : this->slide_nodes_being_moved_linearly_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
  total_size += 1UL * this->_internal_rearranged_args_list_size();
  for (const auto& msg : this->rearranged_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowMoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowMoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowMoveSlideArchive::GetClassData() const { return &_class_data_; }

void CommandShowMoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowMoveSlideArchive *>(to)->MergeFrom(
      static_cast<const CommandShowMoveSlideArchive &>(from));
}


void CommandShowMoveSlideArchive::MergeFrom(const CommandShowMoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowMoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slide_nodes_being_moved_linearly_.MergeFrom(from.slide_nodes_being_moved_linearly_);
  rearranged_args_list_.MergeFrom(from.rearranged_args_list_);
  ids_of_slide_nodes_with_depth_changes_.MergeFrom(from.ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.MergeFrom(from.slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.old_depths_of_slide_nodes_for_depth_fix_up_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowMoveSlideArchive::CopyFrom(const CommandShowMoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowMoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_being_moved_linearly_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rearranged_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_slide_nodes_with_depth_changes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_for_depth_fix_up_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowMoveSlideArchive::InternalSwap(CommandShowMoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slide_nodes_being_moved_linearly_.InternalSwap(&other->slide_nodes_being_moved_linearly_);
  rearranged_args_list_.InternalSwap(&other->rearranged_args_list_);
  ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.InternalSwap(&other->slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->old_depths_of_slide_nodes_for_depth_fix_up_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowMoveSlideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandShowRemoveSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowRemoveSlideArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowRemoveSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowRemoveSlideArchive::_Internal::super(const CommandShowRemoveSlideArchive* msg) {
  return *msg->super_;
}
void CommandShowRemoveSlideArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowRemoveSlideArchive::clear_slide_nodes_being_removed() {
  slide_nodes_being_removed_.Clear();
}
void CommandShowRemoveSlideArchive::clear_removed_args_list() {
  removed_args_list_.Clear();
}
void CommandShowRemoveSlideArchive::clear_ids_of_slide_nodes_with_depth_changes() {
  ids_of_slide_nodes_with_depth_changes_.Clear();
}
void CommandShowRemoveSlideArchive::clear_slide_nodes_for_depth_fix_up() {
  slide_nodes_for_depth_fix_up_.Clear();
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slide_nodes_being_removed_(arena),
  removed_args_list_(arena),
  ids_of_slide_nodes_with_depth_changes_(arena),
  depths_of_slide_nodes_with_depth_changes_(arena),
  old_depths_of_slide_nodes_with_depth_changes_(arena),
  slide_nodes_for_depth_fix_up_(arena),
  depths_of_slide_nodes_for_depth_fix_up_(arena),
  old_depths_of_slide_nodes_for_depth_fix_up_(arena),
  collapsed_state_of_slide_nodes_being_removed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowRemoveSlideArchive)
}
CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slide_nodes_being_removed_(from.slide_nodes_being_removed_),
      removed_args_list_(from.removed_args_list_),
      ids_of_slide_nodes_with_depth_changes_(from.ids_of_slide_nodes_with_depth_changes_),
      depths_of_slide_nodes_with_depth_changes_(from.depths_of_slide_nodes_with_depth_changes_),
      old_depths_of_slide_nodes_with_depth_changes_(from.old_depths_of_slide_nodes_with_depth_changes_),
      slide_nodes_for_depth_fix_up_(from.slide_nodes_for_depth_fix_up_),
      depths_of_slide_nodes_for_depth_fix_up_(from.depths_of_slide_nodes_for_depth_fix_up_),
      old_depths_of_slide_nodes_for_depth_fix_up_(from.old_depths_of_slide_nodes_for_depth_fix_up_),
      collapsed_state_of_slide_nodes_being_removed_(from.collapsed_state_of_slide_nodes_being_removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowRemoveSlideArchive)
}

inline void CommandShowRemoveSlideArchive::SharedCtor() {
super_ = nullptr;
}

CommandShowRemoveSlideArchive::~CommandShowRemoveSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowRemoveSlideArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowRemoveSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandShowRemoveSlideArchive::ArenaDtor(void* object) {
  CommandShowRemoveSlideArchive* _this = reinterpret_cast< CommandShowRemoveSlideArchive* >(object);
  (void)_this;
}
void CommandShowRemoveSlideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowRemoveSlideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowRemoveSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowRemoveSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slide_nodes_being_removed_.Clear();
  removed_args_list_.Clear();
  ids_of_slide_nodes_with_depth_changes_.Clear();
  depths_of_slide_nodes_with_depth_changes_.Clear();
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
  slide_nodes_for_depth_fix_up_.Clear();
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
  collapsed_state_of_slide_nodes_being_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowRemoveSlideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_being_removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_being_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_with_depth_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_with_depth_changes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes_for_depth_fix_up(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_collapsed_state_of_slide_nodes_being_removed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_collapsed_state_of_slide_nodes_being_removed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowRemoveSlideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowRemoveSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference slide_nodes_being_removed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_being_removed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slide_nodes_being_removed(i), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_removed_args_list(i), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_slide_nodes_with_depth_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ids_of_slide_nodes_with_depth_changes(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_with_depth_changes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_old_depths_of_slide_nodes_with_depth_changes(i), target);
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_for_depth_fix_up_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_slide_nodes_for_depth_fix_up(i), target, stream);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  for (int i = 0, n = this->_internal_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  for (int i = 0, n = this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_old_depths_of_slide_nodes_for_depth_fix_up(i), target);
  }

  // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
  for (int i = 0, n = this->_internal_collapsed_state_of_slide_nodes_being_removed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_collapsed_state_of_slide_nodes_being_removed(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowRemoveSlideArchive)
  return target;
}

size_t CommandShowRemoveSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowRemoveSlideArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes_being_removed = 2;
  total_size += 1UL * this->_internal_slide_nodes_being_removed_size();
  for (const auto& msg : this->slide_nodes_being_removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
  total_size += 1UL * this->_internal_removed_args_list_size();
  for (const auto& msg : this->removed_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_with_depth_changes_size();
  for (const auto& msg : this->ids_of_slide_nodes_with_depth_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_with_depth_changes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_with_depth_changes_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  total_size += 1UL * this->_internal_slide_nodes_for_depth_fix_up_size();
  for (const auto& msg : this->slide_nodes_for_depth_fix_up_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_depths_of_slide_nodes_for_depth_fix_up_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_depths_of_slide_nodes_for_depth_fix_up_size());
    total_size += data_size;
  }

  // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_collapsed_state_of_slide_nodes_being_removed_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_collapsed_state_of_slide_nodes_being_removed_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowRemoveSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowRemoveSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowRemoveSlideArchive::GetClassData() const { return &_class_data_; }

void CommandShowRemoveSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowRemoveSlideArchive *>(to)->MergeFrom(
      static_cast<const CommandShowRemoveSlideArchive &>(from));
}


void CommandShowRemoveSlideArchive::MergeFrom(const CommandShowRemoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowRemoveSlideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slide_nodes_being_removed_.MergeFrom(from.slide_nodes_being_removed_);
  removed_args_list_.MergeFrom(from.removed_args_list_);
  ids_of_slide_nodes_with_depth_changes_.MergeFrom(from.ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.MergeFrom(from.old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.MergeFrom(from.slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.MergeFrom(from.old_depths_of_slide_nodes_for_depth_fix_up_);
  collapsed_state_of_slide_nodes_being_removed_.MergeFrom(from.collapsed_state_of_slide_nodes_being_removed_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowRemoveSlideArchive::CopyFrom(const CommandShowRemoveSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowRemoveSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_being_removed_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_slide_nodes_with_depth_changes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_for_depth_fix_up_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveSlideArchive::InternalSwap(CommandShowRemoveSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slide_nodes_being_removed_.InternalSwap(&other->slide_nodes_being_removed_);
  removed_args_list_.InternalSwap(&other->removed_args_list_);
  ids_of_slide_nodes_with_depth_changes_.InternalSwap(&other->ids_of_slide_nodes_with_depth_changes_);
  depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->depths_of_slide_nodes_with_depth_changes_);
  old_depths_of_slide_nodes_with_depth_changes_.InternalSwap(&other->old_depths_of_slide_nodes_with_depth_changes_);
  slide_nodes_for_depth_fix_up_.InternalSwap(&other->slide_nodes_for_depth_fix_up_);
  depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->depths_of_slide_nodes_for_depth_fix_up_);
  old_depths_of_slide_nodes_for_depth_fix_up_.InternalSwap(&other->old_depths_of_slide_nodes_for_depth_fix_up_);
  collapsed_state_of_slide_nodes_being_removed_.InternalSwap(&other->collapsed_state_of_slide_nodes_being_removed_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowRemoveSlideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandShowChangeThemeArchive_IdentifierToStyleMap::_Internal {
 public:
};

void CommandShowChangeThemeArchive_IdentifierToStyleMap::clear_styles() {
  styles_.Clear();
}
CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
}
CommandShowChangeThemeArchive_IdentifierToStyleMap::CommandShowChangeThemeArchive_IdentifierToStyleMap(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      styles_(from.styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
}

inline void CommandShowChangeThemeArchive_IdentifierToStyleMap::SharedCtor() {
}

CommandShowChangeThemeArchive_IdentifierToStyleMap::~CommandShowChangeThemeArchive_IdentifierToStyleMap() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowChangeThemeArchive_IdentifierToStyleMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::ArenaDtor(void* object) {
  CommandShowChangeThemeArchive_IdentifierToStyleMap* _this = reinterpret_cast< CommandShowChangeThemeArchive_IdentifierToStyleMap* >(object);
  (void)_this;
}
void CommandShowChangeThemeArchive_IdentifierToStyleMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowChangeThemeArchive_IdentifierToStyleMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  styles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeThemeArchive_IdentifierToStyleMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowChangeThemeArchive_IdentifierToStyleMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  return target;
}

size_t CommandShowChangeThemeArchive_IdentifierToStyleMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  total_size += 1UL * this->_internal_styles_size();
  for (const auto& msg : this->styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeThemeArchive_IdentifierToStyleMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeThemeArchive_IdentifierToStyleMap::GetClassData() const { return &_class_data_; }

void CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowChangeThemeArchive_IdentifierToStyleMap *>(to)->MergeFrom(
      static_cast<const CommandShowChangeThemeArchive_IdentifierToStyleMap &>(from));
}


void CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeFrom(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  styles_.MergeFrom(from.styles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::CopyFrom(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive_IdentifierToStyleMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(styles_)) return false;
  return true;
}

void CommandShowChangeThemeArchive_IdentifierToStyleMap::InternalSwap(CommandShowChangeThemeArchive_IdentifierToStyleMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  styles_.InternalSwap(&other->styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeThemeArchive_IdentifierToStyleMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandShowChangeThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowChangeThemeArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowChangeThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& show(const CommandShowChangeThemeArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_theme(const CommandShowChangeThemeArchive* msg);
  static void set_has_old_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_template_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& identifier_to_style_map(const CommandShowChangeThemeArchive* msg);
  static void set_has_identifier_to_style_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& old_identifier_to_style_map(const CommandShowChangeThemeArchive* msg);
  static void set_has_old_identifier_to_style_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowChangeThemeArchive::_Internal::super(const CommandShowChangeThemeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::show(const CommandShowChangeThemeArchive* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
CommandShowChangeThemeArchive::_Internal::old_theme(const CommandShowChangeThemeArchive* msg) {
  return *msg->old_theme_;
}
const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&
CommandShowChangeThemeArchive::_Internal::identifier_to_style_map(const CommandShowChangeThemeArchive* msg) {
  return *msg->identifier_to_style_map_;
}
const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&
CommandShowChangeThemeArchive::_Internal::old_identifier_to_style_map(const CommandShowChangeThemeArchive* msg) {
  return *msg->old_identifier_to_style_map_;
}
void CommandShowChangeThemeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandShowChangeThemeArchive::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandShowChangeThemeArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandShowChangeThemeArchive::clear_old_theme() {
  if (old_theme_ != nullptr) old_theme_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeThemeArchive)
}
CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  template_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_template_identifier()) {
    template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_identifier(), 
      GetArenaForAllocation());
  }
  old_template_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_template_identifier()) {
    old_template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_template_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_old_theme()) {
    old_theme_ = new ::TSP::Reference(*from.old_theme_);
  } else {
    old_theme_ = nullptr;
  }
  if (from._internal_has_identifier_to_style_map()) {
    identifier_to_style_map_ = new ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap(*from.identifier_to_style_map_);
  } else {
    identifier_to_style_map_ = nullptr;
  }
  if (from._internal_has_old_identifier_to_style_map()) {
    old_identifier_to_style_map_ = new ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap(*from.old_identifier_to_style_map_);
  } else {
    old_identifier_to_style_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeThemeArchive)
}

inline void CommandShowChangeThemeArchive::SharedCtor() {
template_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_template_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_identifier_to_style_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_identifier_to_style_map_));
}

CommandShowChangeThemeArchive::~CommandShowChangeThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeThemeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowChangeThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  template_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_template_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete old_theme_;
  if (this != internal_default_instance()) delete identifier_to_style_map_;
  if (this != internal_default_instance()) delete old_identifier_to_style_map_;
}

void CommandShowChangeThemeArchive::ArenaDtor(void* object) {
  CommandShowChangeThemeArchive* _this = reinterpret_cast< CommandShowChangeThemeArchive* >(object);
  (void)_this;
}
void CommandShowChangeThemeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowChangeThemeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowChangeThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_template_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(old_theme_ != nullptr);
      old_theme_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(identifier_to_style_map_ != nullptr);
      identifier_to_style_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(old_identifier_to_style_map_ != nullptr);
      old_identifier_to_style_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeThemeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_theme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string template_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_template_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.template_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_template_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_old_template_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandShowChangeThemeArchive.old_template_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_to_style_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_identifier_to_style_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowChangeThemeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // required .TSP.Reference theme = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::theme(this), target, stream);
  }

  // optional .TSP.Reference old_theme = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_theme(this), target, stream);
  }

  // optional string template_identifier = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_identifier().data(), static_cast<int>(this->_internal_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.template_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_template_identifier(), target);
  }

  // optional string old_template_identifier = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_template_identifier().data(), static_cast<int>(this->_internal_old_template_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandShowChangeThemeArchive.old_template_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_old_template_identifier(), target);
  }

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::identifier_to_style_map(this), target, stream);
  }

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::old_identifier_to_style_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeThemeArchive)
  return target;
}

size_t CommandShowChangeThemeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  return total_size;
}
size_t CommandShowChangeThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeThemeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);

    // required .TSP.Reference theme = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string template_identifier = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_identifier());
    }

    // optional string old_template_identifier = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_template_identifier());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference old_theme = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_theme_);
    }

    // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_to_style_map_);
    }

    // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_identifier_to_style_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowChangeThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeThemeArchive::GetClassData() const { return &_class_data_; }

void CommandShowChangeThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowChangeThemeArchive *>(to)->MergeFrom(
      static_cast<const CommandShowChangeThemeArchive &>(from));
}


void CommandShowChangeThemeArchive::MergeFrom(const CommandShowChangeThemeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_template_identifier(from._internal_template_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_template_identifier(from._internal_old_template_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_old_theme()->::TSP::Reference::MergeFrom(from._internal_old_theme());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_identifier_to_style_map()->::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeFrom(from._internal_identifier_to_style_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_old_identifier_to_style_map()->::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap::MergeFrom(from._internal_old_identifier_to_style_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeThemeArchive::CopyFrom(const CommandShowChangeThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_theme()) {
    if (!old_theme_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_to_style_map()) {
    if (!identifier_to_style_map_->IsInitialized()) return false;
  }
  if (_internal_has_old_identifier_to_style_map()) {
    if (!old_identifier_to_style_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeThemeArchive::InternalSwap(CommandShowChangeThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_identifier_, GetArenaForAllocation(),
      &other->template_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_template_identifier_, GetArenaForAllocation(),
      &other->old_template_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, old_identifier_to_style_map_)
      + sizeof(CommandShowChangeThemeArchive::old_identifier_to_style_map_)
      - PROTOBUF_FIELD_OFFSET(CommandShowChangeThemeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeThemeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandShowChangeSlideSizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowChangeSlideSizeArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowChangeSlideSizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& size(const CommandShowChangeSlideSizeArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowChangeSlideSizeArchive::_Internal::super(const CommandShowChangeSlideSizeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Size&
CommandShowChangeSlideSizeArchive::_Internal::size(const CommandShowChangeSlideSizeArchive* msg) {
  return *msg->size_;
}
void CommandShowChangeSlideSizeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowChangeSlideSizeArchive::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowChangeSlideSizeArchive)
}
CommandShowChangeSlideSizeArchive::CommandShowChangeSlideSizeArchive(const CommandShowChangeSlideSizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TSP::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowChangeSlideSizeArchive)
}

inline void CommandShowChangeSlideSizeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&super_)) + sizeof(size_));
}

CommandShowChangeSlideSizeArchive::~CommandShowChangeSlideSizeArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowChangeSlideSizeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowChangeSlideSizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete size_;
}

void CommandShowChangeSlideSizeArchive::ArenaDtor(void* object) {
  CommandShowChangeSlideSizeArchive* _this = reinterpret_cast< CommandShowChangeSlideSizeArchive* >(object);
  (void)_this;
}
void CommandShowChangeSlideSizeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowChangeSlideSizeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowChangeSlideSizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowChangeSlideSizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowChangeSlideSizeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowChangeSlideSizeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowChangeSlideSizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowChangeSlideSizeArchive)
  return target;
}

size_t CommandShowChangeSlideSizeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowChangeSlideSizeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return total_size;
}
size_t CommandShowChangeSlideSizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowChangeSlideSizeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowChangeSlideSizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowChangeSlideSizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowChangeSlideSizeArchive::GetClassData() const { return &_class_data_; }

void CommandShowChangeSlideSizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowChangeSlideSizeArchive *>(to)->MergeFrom(
      static_cast<const CommandShowChangeSlideSizeArchive &>(from));
}


void CommandShowChangeSlideSizeArchive::MergeFrom(const CommandShowChangeSlideSizeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowChangeSlideSizeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TSP::Size::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowChangeSlideSizeArchive::CopyFrom(const CommandShowChangeSlideSizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowChangeSlideSizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeSlideSizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeSlideSizeArchive::InternalSwap(CommandShowChangeSlideSizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowChangeSlideSizeArchive, size_)
      + sizeof(CommandShowChangeSlideSizeArchive::size_)
      - PROTOBUF_FIELD_OFFSET(CommandShowChangeSlideSizeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowChangeSlideSizeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandSetThemeCustomEffectTimingCurveArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetThemeCustomEffectTimingCurveArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::PathSourceArchive& old_path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg);
  static void set_has_old_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::super(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->super_;
}
const ::TSD::PathSourceArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->path_source_;
}
const ::TSD::PathSourceArchive&
CommandSetThemeCustomEffectTimingCurveArchive::_Internal::old_path_source(const CommandSetThemeCustomEffectTimingCurveArchive* msg) {
  return *msg->old_path_source_;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_path_source() {
  if (path_source_ != nullptr) path_source_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetThemeCustomEffectTimingCurveArchive::clear_old_path_source() {
  if (old_path_source_ != nullptr) old_path_source_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
}
CommandSetThemeCustomEffectTimingCurveArchive::CommandSetThemeCustomEffectTimingCurveArchive(const CommandSetThemeCustomEffectTimingCurveArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_path_source()) {
    path_source_ = new ::TSD::PathSourceArchive(*from.path_source_);
  } else {
    path_source_ = nullptr;
  }
  if (from._internal_has_old_path_source()) {
    old_path_source_ = new ::TSD::PathSourceArchive(*from.old_path_source_);
  } else {
    old_path_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
}

inline void CommandSetThemeCustomEffectTimingCurveArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_path_source_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_path_source_));
}

CommandSetThemeCustomEffectTimingCurveArchive::~CommandSetThemeCustomEffectTimingCurveArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetThemeCustomEffectTimingCurveArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete path_source_;
  if (this != internal_default_instance()) delete old_path_source_;
}

void CommandSetThemeCustomEffectTimingCurveArchive::ArenaDtor(void* object) {
  CommandSetThemeCustomEffectTimingCurveArchive* _this = reinterpret_cast< CommandSetThemeCustomEffectTimingCurveArchive* >(object);
  (void)_this;
}
void CommandSetThemeCustomEffectTimingCurveArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetThemeCustomEffectTimingCurveArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetThemeCustomEffectTimingCurveArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(path_source_ != nullptr);
      path_source_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_path_source_ != nullptr);
      old_path_source_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetThemeCustomEffectTimingCurveArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSetThemeCustomEffectTimingCurveArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive path_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_path_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetThemeCustomEffectTimingCurveArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSetThemeCustomEffectTimingCurveArchive.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .TSD.PathSourceArchive path_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::path_source(this), target, stream);
  }

  // optional .TSD.PathSourceArchive old_path_source = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_path_source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  return target;
}

size_t CommandSetThemeCustomEffectTimingCurveArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional .TSD.PathSourceArchive path_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_source_);
    }

    // optional .TSD.PathSourceArchive old_path_source = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_path_source_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetThemeCustomEffectTimingCurveArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetThemeCustomEffectTimingCurveArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetThemeCustomEffectTimingCurveArchive::GetClassData() const { return &_class_data_; }

void CommandSetThemeCustomEffectTimingCurveArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetThemeCustomEffectTimingCurveArchive *>(to)->MergeFrom(
      static_cast<const CommandSetThemeCustomEffectTimingCurveArchive &>(from));
}


void CommandSetThemeCustomEffectTimingCurveArchive::MergeFrom(const CommandSetThemeCustomEffectTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_path_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_path_source()->::TSD::PathSourceArchive::MergeFrom(from._internal_old_path_source());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetThemeCustomEffectTimingCurveArchive::CopyFrom(const CommandSetThemeCustomEffectTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSetThemeCustomEffectTimingCurveArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetThemeCustomEffectTimingCurveArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_path_source()) {
    if (!path_source_->IsInitialized()) return false;
  }
  if (_internal_has_old_path_source()) {
    if (!old_path_source_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetThemeCustomEffectTimingCurveArchive::InternalSwap(CommandSetThemeCustomEffectTimingCurveArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetThemeCustomEffectTimingCurveArchive, old_path_source_)
      + sizeof(CommandSetThemeCustomEffectTimingCurveArchive::old_path_source_)
      - PROTOBUF_FIELD_OFFSET(CommandSetThemeCustomEffectTimingCurveArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetThemeCustomEffectTimingCurveArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandMoveTemplatesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveTemplatesArchive>()._has_bits_);
  static const ::TSD::ContainerReorderChildrenCommandArchive& super(const CommandMoveTemplatesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerReorderChildrenCommandArchive&
CommandMoveTemplatesArchive::_Internal::super(const CommandMoveTemplatesArchive* msg) {
  return *msg->super_;
}
void CommandMoveTemplatesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandMoveTemplatesArchive::clear_template_slides() {
  template_slides_.Clear();
}
void CommandMoveTemplatesArchive::clear_previous_indexes_keys() {
  previous_indexes_keys_.Clear();
}
void CommandMoveTemplatesArchive::clear_final_template_arrangement() {
  final_template_arrangement_.Clear();
}
CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  template_slides_(arena),
  previous_indexes_keys_(arena),
  previous_indexes_values_(arena),
  final_template_arrangement_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandMoveTemplatesArchive)
}
CommandMoveTemplatesArchive::CommandMoveTemplatesArchive(const CommandMoveTemplatesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      template_slides_(from.template_slides_),
      previous_indexes_keys_(from.previous_indexes_keys_),
      previous_indexes_values_(from.previous_indexes_values_),
      final_template_arrangement_(from.final_template_arrangement_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ContainerReorderChildrenCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandMoveTemplatesArchive)
}

inline void CommandMoveTemplatesArchive::SharedCtor() {
super_ = nullptr;
}

CommandMoveTemplatesArchive::~CommandMoveTemplatesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandMoveTemplatesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandMoveTemplatesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandMoveTemplatesArchive::ArenaDtor(void* object) {
  CommandMoveTemplatesArchive* _this = reinterpret_cast< CommandMoveTemplatesArchive* >(object);
  (void)_this;
}
void CommandMoveTemplatesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMoveTemplatesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMoveTemplatesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandMoveTemplatesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  template_slides_.Clear();
  previous_indexes_keys_.Clear();
  previous_indexes_values_.Clear();
  final_template_arrangement_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveTemplatesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_indexes_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_indexes_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 previous_indexes_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_previous_indexes_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference final_template_arrangement = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_final_template_arrangement(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMoveTemplatesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandMoveTemplatesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference template_slides = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_template_slides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_template_slides(i), target, stream);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previous_indexes_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_previous_indexes_keys(i), target, stream);
  }

  // repeated uint32 previous_indexes_values = 5;
  for (int i = 0, n = this->_internal_previous_indexes_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_previous_indexes_values(i), target);
  }

  // repeated .TSP.Reference final_template_arrangement = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_final_template_arrangement_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_final_template_arrangement(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandMoveTemplatesArchive)
  return target;
}

size_t CommandMoveTemplatesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandMoveTemplatesArchive)
  size_t total_size = 0;

  // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference template_slides = 3;
  total_size += 1UL * this->_internal_template_slides_size();
  for (const auto& msg : this->template_slides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  total_size += 1UL * this->_internal_previous_indexes_keys_size();
  for (const auto& msg : this->previous_indexes_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 previous_indexes_values = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->previous_indexes_values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_previous_indexes_values_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference final_template_arrangement = 6;
  total_size += 1UL * this->_internal_final_template_arrangement_size();
  for (const auto& msg : this->final_template_arrangement_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveTemplatesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandMoveTemplatesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveTemplatesArchive::GetClassData() const { return &_class_data_; }

void CommandMoveTemplatesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandMoveTemplatesArchive *>(to)->MergeFrom(
      static_cast<const CommandMoveTemplatesArchive &>(from));
}


void CommandMoveTemplatesArchive::MergeFrom(const CommandMoveTemplatesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandMoveTemplatesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  template_slides_.MergeFrom(from.template_slides_);
  previous_indexes_keys_.MergeFrom(from.previous_indexes_keys_);
  previous_indexes_values_.MergeFrom(from.previous_indexes_values_);
  final_template_arrangement_.MergeFrom(from.final_template_arrangement_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ContainerReorderChildrenCommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveTemplatesArchive::CopyFrom(const CommandMoveTemplatesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandMoveTemplatesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveTemplatesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(template_slides_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(previous_indexes_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(final_template_arrangement_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveTemplatesArchive::InternalSwap(CommandMoveTemplatesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  template_slides_.InternalSwap(&other->template_slides_);
  previous_indexes_keys_.InternalSwap(&other->previous_indexes_keys_);
  previous_indexes_values_.InternalSwap(&other->previous_indexes_values_);
  final_template_arrangement_.InternalSwap(&other->final_template_arrangement_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveTemplatesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandInsertTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInsertTemplateArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInsertTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_inserted_slide_as_default_template_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_replacement_template_slide_node(const CommandInsertTemplateArchive* msg);
  static void set_has_undo_replacement_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInsertTemplateArchive::_Internal::super(const CommandInsertTemplateArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandInsertTemplateArchive::_Internal::undo_replacement_template_slide_node(const CommandInsertTemplateArchive* msg) {
  return *msg->undo_replacement_template_slide_node_;
}
void CommandInsertTemplateArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandInsertTemplateArchive::clear_undo_template_change_commands() {
  undo_template_change_commands_.Clear();
}
void CommandInsertTemplateArchive::clear_undo_replacement_template_slide_node() {
  if (undo_replacement_template_slide_node_ != nullptr) undo_replacement_template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandInsertTemplateArchive::CommandInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  undo_template_change_commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandInsertTemplateArchive)
}
CommandInsertTemplateArchive::CommandInsertTemplateArchive(const CommandInsertTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      undo_template_change_commands_(from.undo_template_change_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_undo_replacement_template_slide_node()) {
    undo_replacement_template_slide_node_ = new ::TSP::Reference(*from.undo_replacement_template_slide_node_);
  } else {
    undo_replacement_template_slide_node_ = nullptr;
  }
  set_inserted_slide_as_default_template_slide_ = from.set_inserted_slide_as_default_template_slide_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandInsertTemplateArchive)
}

inline void CommandInsertTemplateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&set_inserted_slide_as_default_template_slide_) -
    reinterpret_cast<char*>(&super_)) + sizeof(set_inserted_slide_as_default_template_slide_));
}

CommandInsertTemplateArchive::~CommandInsertTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandInsertTemplateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandInsertTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete undo_replacement_template_slide_node_;
}

void CommandInsertTemplateArchive::ArenaDtor(void* object) {
  CommandInsertTemplateArchive* _this = reinterpret_cast< CommandInsertTemplateArchive* >(object);
  (void)_this;
}
void CommandInsertTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInsertTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInsertTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandInsertTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  undo_template_change_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_replacement_template_slide_node_ != nullptr);
      undo_replacement_template_slide_node_->Clear();
    }
  }
  set_inserted_slide_as_default_template_slide_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInsertTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference undo_template_change_commands = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_template_change_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool set_inserted_slide_as_default_template_slide = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_set_inserted_slide_as_default_template_slide(&has_bits);
          set_inserted_slide_as_default_template_slide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_replacement_template_slide_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_replacement_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInsertTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandInsertTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference undo_template_change_commands = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_template_change_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_undo_template_change_commands(i), target, stream);
  }

  // required bool set_inserted_slide_as_default_template_slide = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_set_inserted_slide_as_default_template_slide(), target);
  }

  // optional .TSP.Reference undo_replacement_template_slide_node = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::undo_replacement_template_slide_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandInsertTemplateArchive)
  return target;
}

size_t CommandInsertTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandInsertTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_set_inserted_slide_as_default_template_slide()) {
    // required bool set_inserted_slide_as_default_template_slide = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandInsertTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandInsertTemplateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool set_inserted_slide_as_default_template_slide = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference undo_template_change_commands = 7;
  total_size += 1UL * this->_internal_undo_template_change_commands_size();
  for (const auto& msg : this->undo_template_change_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference undo_replacement_template_slide_node = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_replacement_template_slide_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInsertTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandInsertTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInsertTemplateArchive::GetClassData() const { return &_class_data_; }

void CommandInsertTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandInsertTemplateArchive *>(to)->MergeFrom(
      static_cast<const CommandInsertTemplateArchive &>(from));
}


void CommandInsertTemplateArchive::MergeFrom(const CommandInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandInsertTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  undo_template_change_commands_.MergeFrom(from.undo_template_change_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_replacement_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_undo_replacement_template_slide_node());
    }
    if (cached_has_bits & 0x00000004u) {
      set_inserted_slide_as_default_template_slide_ = from.set_inserted_slide_as_default_template_slide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInsertTemplateArchive::CopyFrom(const CommandInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandInsertTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_template_change_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_replacement_template_slide_node()) {
    if (!undo_replacement_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandInsertTemplateArchive::InternalSwap(CommandInsertTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  undo_template_change_commands_.InternalSwap(&other->undo_template_change_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInsertTemplateArchive, set_inserted_slide_as_default_template_slide_)
      + sizeof(CommandInsertTemplateArchive::set_inserted_slide_as_default_template_slide_)
      - PROTOBUF_FIELD_OFFSET(CommandInsertTemplateArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInsertTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandPrimitiveInsertTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPrimitiveInsertTemplateArchive>()._has_bits_);
  static const ::TSD::ContainerInsertChildrenCommandArchive& super(const CommandPrimitiveInsertTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_was_inserted_with_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::ContainerInsertChildrenCommandArchive&
CommandPrimitiveInsertTemplateArchive::_Internal::super(const CommandPrimitiveInsertTemplateArchive* msg) {
  return *msg->super_;
}
void CommandPrimitiveInsertTemplateArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandPrimitiveInsertTemplateArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandPrimitiveInsertTemplateArchive::clear_previous_classic_theme_records() {
  previous_classic_theme_records_.Clear();
}
CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_format_keys_(arena),
  previous_classic_theme_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandPrimitiveInsertTemplateArchive)
}
CommandPrimitiveInsertTemplateArchive::CommandPrimitiveInsertTemplateArchive(const CommandPrimitiveInsertTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_),
      previous_classic_theme_records_(from.previous_classic_theme_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ContainerInsertChildrenCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  was_inserted_with_drop_ = from.was_inserted_with_drop_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandPrimitiveInsertTemplateArchive)
}

inline void CommandPrimitiveInsertTemplateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_inserted_with_drop_) -
    reinterpret_cast<char*>(&super_)) + sizeof(was_inserted_with_drop_));
}

CommandPrimitiveInsertTemplateArchive::~CommandPrimitiveInsertTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandPrimitiveInsertTemplateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandPrimitiveInsertTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandPrimitiveInsertTemplateArchive::ArenaDtor(void* object) {
  CommandPrimitiveInsertTemplateArchive* _this = reinterpret_cast< CommandPrimitiveInsertTemplateArchive* >(object);
  (void)_this;
}
void CommandPrimitiveInsertTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandPrimitiveInsertTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandPrimitiveInsertTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandPrimitiveInsertTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  previous_classic_theme_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  was_inserted_with_drop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPrimitiveInsertTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool was_inserted_with_drop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_was_inserted_with_drop(&has_bits);
          was_inserted_with_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_classic_theme_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_classic_theme_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPrimitiveInsertTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandPrimitiveInsertTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool was_inserted_with_drop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_was_inserted_with_drop(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_custom_format_keys(i), target, stream);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previous_classic_theme_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_previous_classic_theme_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandPrimitiveInsertTemplateArchive)
  return target;
}

size_t CommandPrimitiveInsertTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandPrimitiveInsertTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_was_inserted_with_drop()) {
    // required bool was_inserted_with_drop = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandPrimitiveInsertTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandPrimitiveInsertTemplateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool was_inserted_with_drop = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 3;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 4;
  total_size += 1UL * this->_internal_previous_classic_theme_records_size();
  for (const auto& msg : this->previous_classic_theme_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPrimitiveInsertTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandPrimitiveInsertTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPrimitiveInsertTemplateArchive::GetClassData() const { return &_class_data_; }

void CommandPrimitiveInsertTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandPrimitiveInsertTemplateArchive *>(to)->MergeFrom(
      static_cast<const CommandPrimitiveInsertTemplateArchive &>(from));
}


void CommandPrimitiveInsertTemplateArchive::MergeFrom(const CommandPrimitiveInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandPrimitiveInsertTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  previous_classic_theme_records_.MergeFrom(from.previous_classic_theme_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::ContainerInsertChildrenCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      was_inserted_with_drop_ = from.was_inserted_with_drop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPrimitiveInsertTemplateArchive::CopyFrom(const CommandPrimitiveInsertTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandPrimitiveInsertTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPrimitiveInsertTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(previous_classic_theme_records_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandPrimitiveInsertTemplateArchive::InternalSwap(CommandPrimitiveInsertTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  previous_classic_theme_records_.InternalSwap(&other->previous_classic_theme_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPrimitiveInsertTemplateArchive, was_inserted_with_drop_)
      + sizeof(CommandPrimitiveInsertTemplateArchive::was_inserted_with_drop_)
      - PROTOBUF_FIELD_OFFSET(CommandPrimitiveInsertTemplateArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPrimitiveInsertTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandRemoveTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveTemplateArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRemoveTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& replacement_template_slide_node(const CommandRemoveTemplateArchive* msg);
  static void set_has_replacement_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_template_slide_node_was_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRemoveTemplateArchive::_Internal::super(const CommandRemoveTemplateArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandRemoveTemplateArchive::_Internal::replacement_template_slide_node(const CommandRemoveTemplateArchive* msg) {
  return *msg->replacement_template_slide_node_;
}
void CommandRemoveTemplateArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandRemoveTemplateArchive::clear_replacement_template_slide_node() {
  if (replacement_template_slide_node_ != nullptr) replacement_template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRemoveTemplateArchive::clear_template_change_commands() {
  template_change_commands_.Clear();
}
CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  template_change_commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandRemoveTemplateArchive)
}
CommandRemoveTemplateArchive::CommandRemoveTemplateArchive(const CommandRemoveTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      template_change_commands_(from.template_change_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_replacement_template_slide_node()) {
    replacement_template_slide_node_ = new ::TSP::Reference(*from.replacement_template_slide_node_);
  } else {
    replacement_template_slide_node_ = nullptr;
  }
  default_template_slide_node_was_replaced_ = from.default_template_slide_node_was_replaced_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandRemoveTemplateArchive)
}

inline void CommandRemoveTemplateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_template_slide_node_was_replaced_) -
    reinterpret_cast<char*>(&super_)) + sizeof(default_template_slide_node_was_replaced_));
}

CommandRemoveTemplateArchive::~CommandRemoveTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandRemoveTemplateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRemoveTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete replacement_template_slide_node_;
}

void CommandRemoveTemplateArchive::ArenaDtor(void* object) {
  CommandRemoveTemplateArchive* _this = reinterpret_cast< CommandRemoveTemplateArchive* >(object);
  (void)_this;
}
void CommandRemoveTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRemoveTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRemoveTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandRemoveTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  template_change_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(replacement_template_slide_node_ != nullptr);
      replacement_template_slide_node_->Clear();
    }
  }
  default_template_slide_node_was_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference replacement_template_slide_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_change_commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_change_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool default_template_slide_node_was_replaced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_default_template_slide_node_was_replaced(&has_bits);
          default_template_slide_node_was_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRemoveTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandRemoveTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference replacement_template_slide_node = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::replacement_template_slide_node(this), target, stream);
  }

  // repeated .TSP.Reference template_change_commands = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_template_change_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_template_change_commands(i), target, stream);
  }

  // optional bool default_template_slide_node_was_replaced = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_default_template_slide_node_was_replaced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandRemoveTemplateArchive)
  return target;
}

size_t CommandRemoveTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandRemoveTemplateArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference template_change_commands = 6;
  total_size += 1UL * this->_internal_template_change_commands_size();
  for (const auto& msg : this->template_change_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference replacement_template_slide_node = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacement_template_slide_node_);
    }

    // optional bool default_template_slide_node_was_replaced = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRemoveTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveTemplateArchive::GetClassData() const { return &_class_data_; }

void CommandRemoveTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRemoveTemplateArchive *>(to)->MergeFrom(
      static_cast<const CommandRemoveTemplateArchive &>(from));
}


void CommandRemoveTemplateArchive::MergeFrom(const CommandRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandRemoveTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  template_change_commands_.MergeFrom(from.template_change_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_replacement_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_replacement_template_slide_node());
    }
    if (cached_has_bits & 0x00000004u) {
      default_template_slide_node_was_replaced_ = from.default_template_slide_node_was_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveTemplateArchive::CopyFrom(const CommandRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandRemoveTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(template_change_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_template_slide_node()) {
    if (!replacement_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveTemplateArchive::InternalSwap(CommandRemoveTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  template_change_commands_.InternalSwap(&other->template_change_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveTemplateArchive, default_template_slide_node_was_replaced_)
      + sizeof(CommandRemoveTemplateArchive::default_template_slide_node_was_replaced_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveTemplateArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandPrimitiveRemoveTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPrimitiveRemoveTemplateArchive>()._has_bits_);
  static const ::TSD::ContainerRemoveChildrenCommandArchive& super(const CommandPrimitiveRemoveTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerRemoveChildrenCommandArchive&
CommandPrimitiveRemoveTemplateArchive::_Internal::super(const CommandPrimitiveRemoveTemplateArchive* msg) {
  return *msg->super_;
}
void CommandPrimitiveRemoveTemplateArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandPrimitiveRemoveTemplateArchive::clear_previous_classic_theme_records() {
  previous_classic_theme_records_.Clear();
}
CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  previous_classic_theme_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandPrimitiveRemoveTemplateArchive)
}
CommandPrimitiveRemoveTemplateArchive::CommandPrimitiveRemoveTemplateArchive(const CommandPrimitiveRemoveTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      previous_classic_theme_records_(from.previous_classic_theme_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ContainerRemoveChildrenCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandPrimitiveRemoveTemplateArchive)
}

inline void CommandPrimitiveRemoveTemplateArchive::SharedCtor() {
super_ = nullptr;
}

CommandPrimitiveRemoveTemplateArchive::~CommandPrimitiveRemoveTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandPrimitiveRemoveTemplateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandPrimitiveRemoveTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandPrimitiveRemoveTemplateArchive::ArenaDtor(void* object) {
  CommandPrimitiveRemoveTemplateArchive* _this = reinterpret_cast< CommandPrimitiveRemoveTemplateArchive* >(object);
  (void)_this;
}
void CommandPrimitiveRemoveTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandPrimitiveRemoveTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandPrimitiveRemoveTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandPrimitiveRemoveTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_classic_theme_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPrimitiveRemoveTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_classic_theme_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_classic_theme_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPrimitiveRemoveTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandPrimitiveRemoveTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference previous_classic_theme_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previous_classic_theme_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_previous_classic_theme_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandPrimitiveRemoveTemplateArchive)
  return target;
}

size_t CommandPrimitiveRemoveTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandPrimitiveRemoveTemplateArchive)
  size_t total_size = 0;

  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference previous_classic_theme_records = 3;
  total_size += 1UL * this->_internal_previous_classic_theme_records_size();
  for (const auto& msg : this->previous_classic_theme_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPrimitiveRemoveTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandPrimitiveRemoveTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPrimitiveRemoveTemplateArchive::GetClassData() const { return &_class_data_; }

void CommandPrimitiveRemoveTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandPrimitiveRemoveTemplateArchive *>(to)->MergeFrom(
      static_cast<const CommandPrimitiveRemoveTemplateArchive &>(from));
}


void CommandPrimitiveRemoveTemplateArchive::MergeFrom(const CommandPrimitiveRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandPrimitiveRemoveTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previous_classic_theme_records_.MergeFrom(from.previous_classic_theme_records_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::ContainerRemoveChildrenCommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPrimitiveRemoveTemplateArchive::CopyFrom(const CommandPrimitiveRemoveTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandPrimitiveRemoveTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPrimitiveRemoveTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(previous_classic_theme_records_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandPrimitiveRemoveTemplateArchive::InternalSwap(CommandPrimitiveRemoveTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  previous_classic_theme_records_.InternalSwap(&other->previous_classic_theme_records_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPrimitiveRemoveTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSlideInsertBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& insert_build_description(const CommandSlideInsertBuildArchive* msg);
  static void set_has_insert_build_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_create_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_was_initialized_over_the_wire(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_been_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildArchive::_Internal::super(const CommandSlideInsertBuildArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSlideInsertBuildArchive::_Internal::insert_build_description(const CommandSlideInsertBuildArchive* msg) {
  return *msg->insert_build_description_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideInsertBuildArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildArchive* msg) {
  return *msg->identifier_for_chunk_to_insert_after_;
}
void CommandSlideInsertBuildArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildArchive::clear_insert_build_description() {
  if (insert_build_description_ != nullptr) insert_build_description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildArchive::clear_identifier_for_chunk_to_insert_after() {
  if (identifier_for_chunk_to_insert_after_ != nullptr) identifier_for_chunk_to_insert_after_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertBuildArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  old_tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildArchive)
}
CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_tuples_to_update_(from.old_tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_insert_build_description()) {
    insert_build_description_ = new ::TSP::Reference(*from.insert_build_description_);
  } else {
    insert_build_description_ = nullptr;
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from.identifier_for_chunk_to_insert_after_);
  } else {
    identifier_for_chunk_to_insert_after_ = nullptr;
  }
  ::memcpy(&should_create_chunks_, &from.should_create_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_been_committed_) -
    reinterpret_cast<char*>(&should_create_chunks_)) + sizeof(has_been_committed_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildArchive)
}

inline void CommandSlideInsertBuildArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_been_committed_) -
    reinterpret_cast<char*>(&super_)) + sizeof(has_been_committed_));
}

CommandSlideInsertBuildArchive::~CommandSlideInsertBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideInsertBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete insert_build_description_;
  if (this != internal_default_instance()) delete identifier_for_chunk_to_insert_after_;
}

void CommandSlideInsertBuildArchive::ArenaDtor(void* object) {
  CommandSlideInsertBuildArchive* _this = reinterpret_cast< CommandSlideInsertBuildArchive* >(object);
  (void)_this;
}
void CommandSlideInsertBuildArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideInsertBuildArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideInsertBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(insert_build_description_ != nullptr);
      insert_build_description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(identifier_for_chunk_to_insert_after_ != nullptr);
      identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  ::memset(&should_create_chunks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_been_committed_) -
      reinterpret_cast<char*>(&should_create_chunks_)) + sizeof(has_been_committed_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference insert_build_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_build_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_create_chunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_should_create_chunks(&has_bits);
          should_create_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool was_initialized_over_the_wire = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_was_initialized_over_the_wire(&has_bits);
          was_initialized_over_the_wire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_been_committed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_has_been_committed(&has_bits);
          has_been_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideInsertBuildArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference insert_build_description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::insert_build_description(this), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::identifier_for_chunk_to_insert_after(this), target, stream);
  }

  // optional bool should_create_chunks = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_should_create_chunks(), target);
  }

  // repeated .TSP.Reference old_tuples_to_update = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // optional bool was_initialized_over_the_wire = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_was_initialized_over_the_wire(), target);
  }

  // optional bool has_been_committed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_been_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildArchive)
  return target;
}

size_t CommandSlideInsertBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_insert_build_description()) {
    // required .TSP.Reference insert_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insert_build_description_);
  }

  return total_size;
}
size_t CommandSlideInsertBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference insert_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insert_build_description_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_tuples_to_update = 5;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_for_chunk_to_insert_after_);
    }

    // optional bool should_create_chunks = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool was_initialized_over_the_wire = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_been_committed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideInsertBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildArchive::GetClassData() const { return &_class_data_; }

void CommandSlideInsertBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideInsertBuildArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideInsertBuildArchive &>(from));
}


void CommandSlideInsertBuildArchive::MergeFrom(const CommandSlideInsertBuildArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_insert_build_description()->::TSP::Reference::MergeFrom(from._internal_insert_build_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000008u) {
      should_create_chunks_ = from.should_create_chunks_;
    }
    if (cached_has_bits & 0x00000010u) {
      was_initialized_over_the_wire_ = from.was_initialized_over_the_wire_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_been_committed_ = from.has_been_committed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildArchive::CopyFrom(const CommandSlideInsertBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_insert_build_description()) {
    if (!insert_build_description_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildArchive::InternalSwap(CommandSlideInsertBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, has_been_committed_)
      + sizeof(CommandSlideInsertBuildArchive::has_been_committed_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[29]);
}

// ===================================================================

class InsertBuildDescriptionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertBuildDescriptionArchive>()._has_bits_);
  static const ::TSP::UUID& slide_id(const InsertBuildDescriptionArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& build_to_insert(const InsertBuildDescriptionArchive* msg);
  static void set_has_build_to_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_assign_chunk_identifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_for_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
InsertBuildDescriptionArchive::_Internal::slide_id(const InsertBuildDescriptionArchive* msg) {
  return *msg->slide_id_;
}
const ::TSP::Reference&
InsertBuildDescriptionArchive::_Internal::build_to_insert(const InsertBuildDescriptionArchive* msg) {
  return *msg->build_to_insert_;
}
void InsertBuildDescriptionArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertBuildDescriptionArchive::clear_build_to_insert() {
  if (build_to_insert_ != nullptr) build_to_insert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InsertBuildDescriptionArchive::clear_chunks_to_insert() {
  chunks_to_insert_.Clear();
}
void InsertBuildDescriptionArchive::clear_identifers_for_chunks_to_insert_after() {
  identifers_for_chunks_to_insert_after_.Clear();
}
void InsertBuildDescriptionArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void InsertBuildDescriptionArchive::clear_fallback_chunk_identifiers() {
  fallback_chunk_identifiers_.Clear();
}
InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_to_insert_(arena),
  identifers_for_chunks_to_insert_after_(arena),
  tuples_to_update_(arena),
  fallback_chunk_identifiers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.InsertBuildDescriptionArchive)
}
InsertBuildDescriptionArchive::InsertBuildDescriptionArchive(const InsertBuildDescriptionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chunks_to_insert_(from.chunks_to_insert_),
      identifers_for_chunks_to_insert_after_(from.identifers_for_chunks_to_insert_after_),
      tuples_to_update_(from.tuples_to_update_),
      fallback_chunk_identifiers_(from.fallback_chunk_identifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_build_to_insert()) {
    build_to_insert_ = new ::TSP::Reference(*from.build_to_insert_);
  } else {
    build_to_insert_ = nullptr;
  }
  ::memcpy(&should_assign_chunk_identifiers_, &from.should_assign_chunk_identifiers_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_for_paste_) -
    reinterpret_cast<char*>(&should_assign_chunk_identifiers_)) + sizeof(is_for_paste_));
  // @@protoc_insertion_point(copy_constructor:KN.InsertBuildDescriptionArchive)
}

inline void InsertBuildDescriptionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_for_paste_) -
    reinterpret_cast<char*>(&slide_id_)) + sizeof(is_for_paste_));
}

InsertBuildDescriptionArchive::~InsertBuildDescriptionArchive() {
  // @@protoc_insertion_point(destructor:KN.InsertBuildDescriptionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertBuildDescriptionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete build_to_insert_;
}

void InsertBuildDescriptionArchive::ArenaDtor(void* object) {
  InsertBuildDescriptionArchive* _this = reinterpret_cast< InsertBuildDescriptionArchive* >(object);
  (void)_this;
}
void InsertBuildDescriptionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertBuildDescriptionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertBuildDescriptionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.InsertBuildDescriptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_to_insert_.Clear();
  identifers_for_chunks_to_insert_after_.Clear();
  tuples_to_update_.Clear();
  fallback_chunk_identifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(build_to_insert_ != nullptr);
      build_to_insert_->Clear();
    }
  }
  ::memset(&should_assign_chunk_identifiers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_for_paste_) -
      reinterpret_cast<char*>(&should_assign_chunk_identifiers_)) + sizeof(is_for_paste_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBuildDescriptionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID slide_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference build_to_insert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_to_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_insert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool should_assign_chunk_identifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_should_assign_chunk_identifiers(&has_bits);
          should_assign_chunk_identifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool is_for_paste = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_for_paste(&has_bits);
          is_for_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertBuildDescriptionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.InsertBuildDescriptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID slide_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slide_id(this), target, stream);
  }

  // required .TSP.Reference build_to_insert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::build_to_insert(this), target, stream);
  }

  // repeated .TSP.Reference chunks_to_insert = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_insert_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunks_to_insert(i), target, stream);
  }

  // required bool should_assign_chunk_identifiers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_should_assign_chunk_identifiers(), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifers_for_chunks_to_insert_after_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_identifers_for_chunks_to_insert_after(i), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fallback_chunk_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fallback_chunk_identifiers(i), target, stream);
  }

  // required bool is_for_paste = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_for_paste(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.InsertBuildDescriptionArchive)
  return target;
}

size_t InsertBuildDescriptionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.InsertBuildDescriptionArchive)
  size_t total_size = 0;

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  if (_internal_has_build_to_insert()) {
    // required .TSP.Reference build_to_insert = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_to_insert_);
  }

  if (_internal_has_should_assign_chunk_identifiers()) {
    // required bool should_assign_chunk_identifiers = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_is_for_paste()) {
    // required bool is_for_paste = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InsertBuildDescriptionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.InsertBuildDescriptionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID slide_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

    // required .TSP.Reference build_to_insert = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_to_insert_);

    // required bool should_assign_chunk_identifiers = 4;
    total_size += 1 + 1;

    // required bool is_for_paste = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_insert = 3;
  total_size += 1UL * this->_internal_chunks_to_insert_size();
  for (const auto& msg : this->chunks_to_insert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  total_size += 1UL * this->_internal_identifers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->identifers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  total_size += 1UL * this->_internal_fallback_chunk_identifiers_size();
  for (const auto& msg : this->fallback_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBuildDescriptionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertBuildDescriptionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBuildDescriptionArchive::GetClassData() const { return &_class_data_; }

void InsertBuildDescriptionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InsertBuildDescriptionArchive *>(to)->MergeFrom(
      static_cast<const InsertBuildDescriptionArchive &>(from));
}


void InsertBuildDescriptionArchive::MergeFrom(const InsertBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.InsertBuildDescriptionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_to_insert_.MergeFrom(from.chunks_to_insert_);
  identifers_for_chunks_to_insert_after_.MergeFrom(from.identifers_for_chunks_to_insert_after_);
  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  fallback_chunk_identifiers_.MergeFrom(from.fallback_chunk_identifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_build_to_insert()->::TSP::Reference::MergeFrom(from._internal_build_to_insert());
    }
    if (cached_has_bits & 0x00000004u) {
      should_assign_chunk_identifiers_ = from.should_assign_chunk_identifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_for_paste_ = from.is_for_paste_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBuildDescriptionArchive::CopyFrom(const InsertBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.InsertBuildDescriptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBuildDescriptionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_to_insert_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifers_for_chunks_to_insert_after_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fallback_chunk_identifiers_)) return false;
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_to_insert()) {
    if (!build_to_insert_->IsInitialized()) return false;
  }
  return true;
}

void InsertBuildDescriptionArchive::InternalSwap(InsertBuildDescriptionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_to_insert_.InternalSwap(&other->chunks_to_insert_);
  identifers_for_chunks_to_insert_after_.InternalSwap(&other->identifers_for_chunks_to_insert_after_);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  fallback_chunk_identifiers_.InternalSwap(&other->fallback_chunk_identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertBuildDescriptionArchive, is_for_paste_)
      + sizeof(InsertBuildDescriptionArchive::is_for_paste_)
      - PROTOBUF_FIELD_OFFSET(InsertBuildDescriptionArchive, slide_id_)>(
          reinterpret_cast<char*>(&slide_id_),
          reinterpret_cast<char*>(&other->slide_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBuildDescriptionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[30]);
}

// ===================================================================

class UndoObjectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoObjectArchive>()._has_bits_);
  static const ::TSD::UndoObjectArchive& super(const UndoObjectArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::UndoObjectArchive&
UndoObjectArchive::_Internal::super(const UndoObjectArchive* msg) {
  return *msg->super_;
}
void UndoObjectArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UndoObjectArchive::UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.UndoObjectArchive)
}
UndoObjectArchive::UndoObjectArchive(const UndoObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::UndoObjectArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.UndoObjectArchive)
}

inline void UndoObjectArchive::SharedCtor() {
super_ = nullptr;
}

UndoObjectArchive::~UndoObjectArchive() {
  // @@protoc_insertion_point(destructor:KN.UndoObjectArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void UndoObjectArchive::ArenaDtor(void* object) {
  UndoObjectArchive* _this = reinterpret_cast< UndoObjectArchive* >(object);
  (void)_this;
}
void UndoObjectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoObjectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UndoObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoObjectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.UndoObjectArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoObjectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UndoObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.UndoObjectArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UndoObjectArchive)
  return target;
}

size_t UndoObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UndoObjectArchive)
  size_t total_size = 0;

  // required .TSD.UndoObjectArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoObjectArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoObjectArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoObjectArchive::GetClassData() const { return &_class_data_; }

void UndoObjectArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoObjectArchive *>(to)->MergeFrom(
      static_cast<const UndoObjectArchive &>(from));
}


void UndoObjectArchive::MergeFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.UndoObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::UndoObjectArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoObjectArchive::CopyFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UndoObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoObjectArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void UndoObjectArchive::InternalSwap(UndoObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoObjectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandSlideRemoveBuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& remove_build_description(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_remove_build_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& build(const CommandSlideRemoveBuildArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildArchive::_Internal::super(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::remove_build_description(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->remove_build_description_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildArchive::_Internal::build(const CommandSlideRemoveBuildArchive* msg) {
  return *msg->build_;
}
void CommandSlideRemoveBuildArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildArchive::clear_remove_build_description() {
  if (remove_build_description_ != nullptr) remove_build_description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildArchive::clear_build() {
  if (build_ != nullptr) build_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveBuildArchive::clear_chunks_to_insert() {
  chunks_to_insert_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_identifiers_for_chunks_to_insert_after() {
  identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
void CommandSlideRemoveBuildArchive::clear_fallback_chunk_identifiers() {
  fallback_chunk_identifiers_.Clear();
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_to_insert_(arena),
  identifiers_for_chunks_to_insert_after_(arena),
  old_tuples_to_update_(arena),
  fallback_chunk_identifiers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildArchive)
}
CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chunks_to_insert_(from.chunks_to_insert_),
      identifiers_for_chunks_to_insert_after_(from.identifiers_for_chunks_to_insert_after_),
      old_tuples_to_update_(from.old_tuples_to_update_),
      fallback_chunk_identifiers_(from.fallback_chunk_identifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_remove_build_description()) {
    remove_build_description_ = new ::TSP::Reference(*from.remove_build_description_);
  } else {
    remove_build_description_ = nullptr;
  }
  if (from._internal_has_build()) {
    build_ = new ::TSP::Reference(*from.build_);
  } else {
    build_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildArchive)
}

inline void CommandSlideRemoveBuildArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_) -
    reinterpret_cast<char*>(&super_)) + sizeof(build_));
}

CommandSlideRemoveBuildArchive::~CommandSlideRemoveBuildArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideRemoveBuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete remove_build_description_;
  if (this != internal_default_instance()) delete build_;
}

void CommandSlideRemoveBuildArchive::ArenaDtor(void* object) {
  CommandSlideRemoveBuildArchive* _this = reinterpret_cast< CommandSlideRemoveBuildArchive* >(object);
  (void)_this;
}
void CommandSlideRemoveBuildArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideRemoveBuildArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideRemoveBuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_to_insert_.Clear();
  identifiers_for_chunks_to_insert_after_.Clear();
  old_tuples_to_update_.Clear();
  fallback_chunk_identifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(remove_build_description_ != nullptr);
      remove_build_description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(build_ != nullptr);
      build_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference remove_build_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_build_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_insert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_insert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fallback_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideRemoveBuildArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference remove_build_description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remove_build_description(this), target, stream);
  }

  // optional .TSP.Reference build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::build(this), target, stream);
  }

  // repeated .TSP.Reference chunks_to_insert = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_insert_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_chunks_to_insert(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_identifiers_for_chunks_to_insert_after(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fallback_chunk_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fallback_chunk_identifiers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildArchive)
  return target;
}

size_t CommandSlideRemoveBuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_remove_build_description()) {
    // required .TSP.Reference remove_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remove_build_description_);
  }

  return total_size;
}
size_t CommandSlideRemoveBuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference remove_build_description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remove_build_description_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_insert = 4;
  total_size += 1UL * this->_internal_chunks_to_insert_size();
  for (const auto& msg : this->chunks_to_insert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  total_size += 1UL * this->_internal_fallback_chunk_identifiers_size();
  for (const auto& msg : this->fallback_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference build = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideRemoveBuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildArchive::GetClassData() const { return &_class_data_; }

void CommandSlideRemoveBuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideRemoveBuildArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideRemoveBuildArchive &>(from));
}


void CommandSlideRemoveBuildArchive::MergeFrom(const CommandSlideRemoveBuildArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_to_insert_.MergeFrom(from.chunks_to_insert_);
  identifiers_for_chunks_to_insert_after_.MergeFrom(from.identifiers_for_chunks_to_insert_after_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  fallback_chunk_identifiers_.MergeFrom(from.fallback_chunk_identifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_remove_build_description()->::TSP::Reference::MergeFrom(from._internal_remove_build_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_build()->::TSP::Reference::MergeFrom(from._internal_build());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildArchive::CopyFrom(const CommandSlideRemoveBuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_to_insert_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_insert_after_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fallback_chunk_identifiers_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_remove_build_description()) {
    if (!remove_build_description_->IsInitialized()) return false;
  }
  if (_internal_has_build()) {
    if (!build_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildArchive::InternalSwap(CommandSlideRemoveBuildArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_to_insert_.InternalSwap(&other->chunks_to_insert_);
  identifiers_for_chunks_to_insert_after_.InternalSwap(&other->identifiers_for_chunks_to_insert_after_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  fallback_chunk_identifiers_.InternalSwap(&other->fallback_chunk_identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, build_)
      + sizeof(CommandSlideRemoveBuildArchive::build_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[32]);
}

// ===================================================================

class RemoveBuildDescriptionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveBuildDescriptionArchive>()._has_bits_);
  static const ::TSP::UUID& slide_id(const RemoveBuildDescriptionArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& build_id(const RemoveBuildDescriptionArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_remove_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_remove_chunk_identifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::UUID&
RemoveBuildDescriptionArchive::_Internal::slide_id(const RemoveBuildDescriptionArchive* msg) {
  return *msg->slide_id_;
}
const ::TSP::UUID&
RemoveBuildDescriptionArchive::_Internal::build_id(const RemoveBuildDescriptionArchive* msg) {
  return *msg->build_id_;
}
void RemoveBuildDescriptionArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveBuildDescriptionArchive::clear_build_id() {
  if (build_id_ != nullptr) build_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveBuildDescriptionArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.RemoveBuildDescriptionArchive)
}
RemoveBuildDescriptionArchive::RemoveBuildDescriptionArchive(const RemoveBuildDescriptionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuples_to_update_(from.tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_build_id()) {
    build_id_ = new ::TSP::UUID(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  ::memcpy(&should_remove_chunks_, &from.should_remove_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_remove_chunk_identifiers_) -
    reinterpret_cast<char*>(&should_remove_chunks_)) + sizeof(should_remove_chunk_identifiers_));
  // @@protoc_insertion_point(copy_constructor:KN.RemoveBuildDescriptionArchive)
}

inline void RemoveBuildDescriptionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_remove_chunk_identifiers_) -
    reinterpret_cast<char*>(&slide_id_)) + sizeof(should_remove_chunk_identifiers_));
}

RemoveBuildDescriptionArchive::~RemoveBuildDescriptionArchive() {
  // @@protoc_insertion_point(destructor:KN.RemoveBuildDescriptionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveBuildDescriptionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete build_id_;
}

void RemoveBuildDescriptionArchive::ArenaDtor(void* object) {
  RemoveBuildDescriptionArchive* _this = reinterpret_cast< RemoveBuildDescriptionArchive* >(object);
  (void)_this;
}
void RemoveBuildDescriptionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveBuildDescriptionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveBuildDescriptionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RemoveBuildDescriptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(build_id_ != nullptr);
      build_id_->Clear();
    }
  }
  ::memset(&should_remove_chunks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_remove_chunk_identifiers_) -
      reinterpret_cast<char*>(&should_remove_chunks_)) + sizeof(should_remove_chunk_identifiers_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveBuildDescriptionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID slide_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_remove_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_should_remove_chunks(&has_bits);
          should_remove_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_remove_chunk_identifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_should_remove_chunk_identifiers(&has_bits);
          should_remove_chunk_identifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveBuildDescriptionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RemoveBuildDescriptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID slide_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slide_id(this), target, stream);
  }

  // optional .TSP.UUID build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::build_id(this), target, stream);
  }

  // optional bool should_remove_chunks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_should_remove_chunks(), target);
  }

  // optional bool should_remove_chunk_identifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_should_remove_chunk_identifiers(), target);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tuples_to_update(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RemoveBuildDescriptionArchive)
  return target;
}

size_t RemoveBuildDescriptionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RemoveBuildDescriptionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.UUID slide_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_id_);
    }

    // optional .TSP.UUID build_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *build_id_);
    }

    // optional bool should_remove_chunks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool should_remove_chunk_identifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveBuildDescriptionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveBuildDescriptionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveBuildDescriptionArchive::GetClassData() const { return &_class_data_; }

void RemoveBuildDescriptionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RemoveBuildDescriptionArchive *>(to)->MergeFrom(
      static_cast<const RemoveBuildDescriptionArchive &>(from));
}


void RemoveBuildDescriptionArchive::MergeFrom(const RemoveBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.RemoveBuildDescriptionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_build_id()->::TSP::UUID::MergeFrom(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000004u) {
      should_remove_chunks_ = from.should_remove_chunks_;
    }
    if (cached_has_bits & 0x00000008u) {
      should_remove_chunk_identifiers_ = from.should_remove_chunk_identifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveBuildDescriptionArchive::CopyFrom(const RemoveBuildDescriptionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RemoveBuildDescriptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBuildDescriptionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!build_id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveBuildDescriptionArchive::InternalSwap(RemoveBuildDescriptionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveBuildDescriptionArchive, should_remove_chunk_identifiers_)
      + sizeof(RemoveBuildDescriptionArchive::should_remove_chunk_identifiers_)
      - PROTOBUF_FIELD_OFFSET(RemoveBuildDescriptionArchive, slide_id_)>(
          reinterpret_cast<char*>(&slide_id_),
          reinterpret_cast<char*>(&other->slide_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveBuildDescriptionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[33]);
}

// ===================================================================

class CommandSlideInsertBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideInsertBuildChunkArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& chunk_to_insert(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_chunk_to_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_needs_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_assign_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideInsertBuildChunkArchive::_Internal::super(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideInsertBuildChunkArchive::_Internal::slide_id(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->slide_id_;
}
const ::TSP::Reference&
CommandSlideInsertBuildChunkArchive::_Internal::chunk_to_insert(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->chunk_to_insert_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideInsertBuildChunkArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideInsertBuildChunkArchive* msg) {
  return *msg->identifier_for_chunk_to_insert_after_;
}
void CommandSlideInsertBuildChunkArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideInsertBuildChunkArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideInsertBuildChunkArchive::clear_chunk_to_insert() {
  if (chunk_to_insert_ != nullptr) chunk_to_insert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideInsertBuildChunkArchive::clear_identifier_for_chunk_to_insert_after() {
  if (identifier_for_chunk_to_insert_after_ != nullptr) identifier_for_chunk_to_insert_after_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSlideInsertBuildChunkArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandSlideInsertBuildChunkArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideInsertBuildChunkArchive)
}
CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_chunk_to_insert()) {
    chunk_to_insert_ = new ::TSP::Reference(*from.chunk_to_insert_);
  } else {
    chunk_to_insert_ = nullptr;
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from.identifier_for_chunk_to_insert_after_);
  } else {
    identifier_for_chunk_to_insert_after_ = nullptr;
  }
  ::memcpy(&needs_selection_update_, &from.needs_selection_update_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_assign_chunk_identifier_) -
    reinterpret_cast<char*>(&needs_selection_update_)) + sizeof(should_assign_chunk_identifier_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideInsertBuildChunkArchive)
}

inline void CommandSlideInsertBuildChunkArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_assign_chunk_identifier_) -
    reinterpret_cast<char*>(&super_)) + sizeof(should_assign_chunk_identifier_));
}

CommandSlideInsertBuildChunkArchive::~CommandSlideInsertBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideInsertBuildChunkArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideInsertBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete chunk_to_insert_;
  if (this != internal_default_instance()) delete identifier_for_chunk_to_insert_after_;
}

void CommandSlideInsertBuildChunkArchive::ArenaDtor(void* object) {
  CommandSlideInsertBuildChunkArchive* _this = reinterpret_cast< CommandSlideInsertBuildChunkArchive* >(object);
  (void)_this;
}
void CommandSlideInsertBuildChunkArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideInsertBuildChunkArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideInsertBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideInsertBuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chunk_to_insert_ != nullptr);
      chunk_to_insert_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(identifier_for_chunk_to_insert_after_ != nullptr);
      identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  ::memset(&needs_selection_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_assign_chunk_identifier_) -
      reinterpret_cast<char*>(&needs_selection_update_)) + sizeof(should_assign_chunk_identifier_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideInsertBuildChunkArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference chunk_to_insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_to_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_selection_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_needs_selection_update(&has_bits);
          needs_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_assign_chunk_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_should_assign_chunk_identifier(&has_bits);
          should_assign_chunk_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideInsertBuildChunkArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideInsertBuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // required .TSP.Reference chunk_to_insert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chunk_to_insert(this), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::identifier_for_chunk_to_insert_after(this), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // optional bool needs_selection_update = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_needs_selection_update(), target);
  }

  // optional bool should_assign_chunk_identifier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_should_assign_chunk_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideInsertBuildChunkArchive)
  return target;
}

size_t CommandSlideInsertBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  if (_internal_has_chunk_to_insert()) {
    // required .TSP.Reference chunk_to_insert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_to_insert_);
  }

  return total_size;
}
size_t CommandSlideInsertBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideInsertBuildChunkArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

    // required .TSP.Reference chunk_to_insert = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_to_insert_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_for_chunk_to_insert_after_);
    }

    // optional bool needs_selection_update = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_assign_chunk_identifier = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideInsertBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideInsertBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideInsertBuildChunkArchive::GetClassData() const { return &_class_data_; }

void CommandSlideInsertBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideInsertBuildChunkArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideInsertBuildChunkArchive &>(from));
}


void CommandSlideInsertBuildChunkArchive::MergeFrom(const CommandSlideInsertBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideInsertBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chunk_to_insert()->::TSP::Reference::MergeFrom(from._internal_chunk_to_insert());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000010u) {
      needs_selection_update_ = from.needs_selection_update_;
    }
    if (cached_has_bits & 0x00000020u) {
      should_assign_chunk_identifier_ = from.should_assign_chunk_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideInsertBuildChunkArchive::CopyFrom(const CommandSlideInsertBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideInsertBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_chunk_to_insert()) {
    if (!chunk_to_insert_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildChunkArchive::InternalSwap(CommandSlideInsertBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, should_assign_chunk_identifier_)
      + sizeof(CommandSlideInsertBuildChunkArchive::should_assign_chunk_identifier_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideInsertBuildChunkArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandSlideRemoveBuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideRemoveBuildChunkArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_chunk(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_removed_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_remove(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after(const CommandSlideRemoveBuildChunkArchive* msg);
  static void set_has_identifier_for_chunk_to_insert_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_needs_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::super(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideRemoveBuildChunkArchive::_Internal::slide_id(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->slide_id_;
}
const ::TSP::Reference&
CommandSlideRemoveBuildChunkArchive::_Internal::removed_chunk(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->removed_chunk_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::identifier_for_chunk_to_remove(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->identifier_for_chunk_to_remove_;
}
const ::KN::BuildChunkIdentifierArchive&
CommandSlideRemoveBuildChunkArchive::_Internal::identifier_for_chunk_to_insert_after(const CommandSlideRemoveBuildChunkArchive* msg) {
  return *msg->identifier_for_chunk_to_insert_after_;
}
void CommandSlideRemoveBuildChunkArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideRemoveBuildChunkArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideRemoveBuildChunkArchive::clear_removed_chunk() {
  if (removed_chunk_ != nullptr) removed_chunk_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlideRemoveBuildChunkArchive::clear_identifier_for_chunk_to_remove() {
  if (identifier_for_chunk_to_remove_ != nullptr) identifier_for_chunk_to_remove_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSlideRemoveBuildChunkArchive::clear_identifier_for_chunk_to_insert_after() {
  if (identifier_for_chunk_to_insert_after_ != nullptr) identifier_for_chunk_to_insert_after_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandSlideRemoveBuildChunkArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandSlideRemoveBuildChunkArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}
CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  if (from._internal_has_removed_chunk()) {
    removed_chunk_ = new ::TSP::Reference(*from.removed_chunk_);
  } else {
    removed_chunk_ = nullptr;
  }
  if (from._internal_has_identifier_for_chunk_to_remove()) {
    identifier_for_chunk_to_remove_ = new ::KN::BuildChunkIdentifierArchive(*from.identifier_for_chunk_to_remove_);
  } else {
    identifier_for_chunk_to_remove_ = nullptr;
  }
  if (from._internal_has_identifier_for_chunk_to_insert_after()) {
    identifier_for_chunk_to_insert_after_ = new ::KN::BuildChunkIdentifierArchive(*from.identifier_for_chunk_to_insert_after_);
  } else {
    identifier_for_chunk_to_insert_after_ = nullptr;
  }
  needs_selection_update_ = from.needs_selection_update_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideRemoveBuildChunkArchive)
}

inline void CommandSlideRemoveBuildChunkArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_selection_update_) -
    reinterpret_cast<char*>(&super_)) + sizeof(needs_selection_update_));
}

CommandSlideRemoveBuildChunkArchive::~CommandSlideRemoveBuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideRemoveBuildChunkArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideRemoveBuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
  if (this != internal_default_instance()) delete removed_chunk_;
  if (this != internal_default_instance()) delete identifier_for_chunk_to_remove_;
  if (this != internal_default_instance()) delete identifier_for_chunk_to_insert_after_;
}

void CommandSlideRemoveBuildChunkArchive::ArenaDtor(void* object) {
  CommandSlideRemoveBuildChunkArchive* _this = reinterpret_cast< CommandSlideRemoveBuildChunkArchive* >(object);
  (void)_this;
}
void CommandSlideRemoveBuildChunkArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideRemoveBuildChunkArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideRemoveBuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideRemoveBuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(removed_chunk_ != nullptr);
      removed_chunk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(identifier_for_chunk_to_remove_ != nullptr);
      identifier_for_chunk_to_remove_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(identifier_for_chunk_to_insert_after_ != nullptr);
      identifier_for_chunk_to_insert_after_->Clear();
    }
  }
  needs_selection_update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideRemoveBuildChunkArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_for_chunk_to_insert_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_selection_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_needs_selection_update(&has_bits);
          needs_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideRemoveBuildChunkArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideRemoveBuildChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // optional .TSP.Reference removed_chunk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::removed_chunk(this), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::identifier_for_chunk_to_remove(this), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::identifier_for_chunk_to_insert_after(this), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // optional bool needs_selection_update = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_needs_selection_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideRemoveBuildChunkArchive)
  return target;
}

size_t CommandSlideRemoveBuildChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  return total_size;
}
size_t CommandSlideRemoveBuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideRemoveBuildChunkArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 7;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference removed_chunk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *removed_chunk_);
    }

    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_for_chunk_to_remove_);
    }

    // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_for_chunk_to_insert_after_);
    }

    // optional bool needs_selection_update = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideRemoveBuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideRemoveBuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideRemoveBuildChunkArchive::GetClassData() const { return &_class_data_; }

void CommandSlideRemoveBuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideRemoveBuildChunkArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideRemoveBuildChunkArchive &>(from));
}


void CommandSlideRemoveBuildChunkArchive::MergeFrom(const CommandSlideRemoveBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_removed_chunk()->::TSP::Reference::MergeFrom(from._internal_removed_chunk());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_identifier_for_chunk_to_remove()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_identifier_for_chunk_to_remove());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_identifier_for_chunk_to_insert_after()->::KN::BuildChunkIdentifierArchive::MergeFrom(from._internal_identifier_for_chunk_to_insert_after());
    }
    if (cached_has_bits & 0x00000020u) {
      needs_selection_update_ = from.needs_selection_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideRemoveBuildChunkArchive::CopyFrom(const CommandSlideRemoveBuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideRemoveBuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  if (_internal_has_removed_chunk()) {
    if (!removed_chunk_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_remove()) {
    if (!identifier_for_chunk_to_remove_->IsInitialized()) return false;
  }
  if (_internal_has_identifier_for_chunk_to_insert_after()) {
    if (!identifier_for_chunk_to_insert_after_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildChunkArchive::InternalSwap(CommandSlideRemoveBuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, needs_selection_update_)
      + sizeof(CommandSlideRemoveBuildChunkArchive::needs_selection_update_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideRemoveBuildChunkArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandSlideMoveBuildChunksArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideMoveBuildChunksArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideMoveBuildChunksArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideMoveBuildChunksArchive::_Internal::super(const CommandSlideMoveBuildChunksArchive* msg) {
  return *msg->super_;
}
void CommandSlideMoveBuildChunksArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move() {
  identifiers_for_chunks_to_move_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_after() {
  identifiers_for_chunks_to_move_after_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_after_for_undo() {
  identifiers_for_chunks_to_move_after_for_undo_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
void CommandSlideMoveBuildChunksArchive::clear_identifiers_for_chunks_to_move_including_clustered_inactive_chunks() {
  identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Clear();
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  identifiers_for_chunks_to_move_(arena),
  identifiers_for_chunks_to_move_after_(arena),
  identifiers_for_chunks_to_move_after_for_undo_(arena),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena),
  identifiers_for_chunks_to_move_including_clustered_inactive_chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideMoveBuildChunksArchive)
}
CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      identifiers_for_chunks_to_move_(from.identifiers_for_chunks_to_move_),
      identifiers_for_chunks_to_move_after_(from.identifiers_for_chunks_to_move_after_),
      identifiers_for_chunks_to_move_after_for_undo_(from.identifiers_for_chunks_to_move_after_for_undo_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_),
      identifiers_for_chunks_to_move_including_clustered_inactive_chunks_(from.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideMoveBuildChunksArchive)
}

inline void CommandSlideMoveBuildChunksArchive::SharedCtor() {
super_ = nullptr;
}

CommandSlideMoveBuildChunksArchive::~CommandSlideMoveBuildChunksArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideMoveBuildChunksArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideMoveBuildChunksArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSlideMoveBuildChunksArchive::ArenaDtor(void* object) {
  CommandSlideMoveBuildChunksArchive* _this = reinterpret_cast< CommandSlideMoveBuildChunksArchive* >(object);
  (void)_this;
}
void CommandSlideMoveBuildChunksArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideMoveBuildChunksArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideMoveBuildChunksArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideMoveBuildChunksArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifiers_for_chunks_to_move_.Clear();
  identifiers_for_chunks_to_move_after_.Clear();
  identifiers_for_chunks_to_move_after_for_undo_.Clear();
  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideMoveBuildChunksArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_after_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideMoveBuildChunksArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideMoveBuildChunksArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_move_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_identifiers_for_chunks_to_move(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_move_after_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_identifiers_for_chunks_to_move_after(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_move_after_for_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_identifiers_for_chunks_to_move_after_for_undo(i), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideMoveBuildChunksArchive)
  return target;
}

size_t CommandSlideMoveBuildChunksArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideMoveBuildChunksArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_size();
  for (const auto& msg : this->identifiers_for_chunks_to_move_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_after_size();
  for (const auto& msg : this->identifiers_for_chunks_to_move_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_after_for_undo_size();
  for (const auto& msg : this->identifiers_for_chunks_to_move_after_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 5;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 6;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size();
  for (const auto& msg : this->identifiers_for_chunks_to_move_including_clustered_inactive_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideMoveBuildChunksArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideMoveBuildChunksArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideMoveBuildChunksArchive::GetClassData() const { return &_class_data_; }

void CommandSlideMoveBuildChunksArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideMoveBuildChunksArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideMoveBuildChunksArchive &>(from));
}


void CommandSlideMoveBuildChunksArchive::MergeFrom(const CommandSlideMoveBuildChunksArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideMoveBuildChunksArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifiers_for_chunks_to_move_.MergeFrom(from.identifiers_for_chunks_to_move_);
  identifiers_for_chunks_to_move_after_.MergeFrom(from.identifiers_for_chunks_to_move_after_);
  identifiers_for_chunks_to_move_after_for_undo_.MergeFrom(from.identifiers_for_chunks_to_move_after_for_undo_);
  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.MergeFrom(from.identifiers_for_chunks_to_move_including_clustered_inactive_chunks_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideMoveBuildChunksArchive::CopyFrom(const CommandSlideMoveBuildChunksArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideMoveBuildChunksArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunksArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_move_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_move_after_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_move_after_for_undo_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_move_including_clustered_inactive_chunks_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunksArchive::InternalSwap(CommandSlideMoveBuildChunksArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifiers_for_chunks_to_move_.InternalSwap(&other->identifiers_for_chunks_to_move_);
  identifiers_for_chunks_to_move_after_.InternalSwap(&other->identifiers_for_chunks_to_move_after_);
  identifiers_for_chunks_to_move_after_for_undo_.InternalSwap(&other->identifiers_for_chunks_to_move_after_for_undo_);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.InternalSwap(&other->identifiers_for_chunks_to_move_including_clustered_inactive_chunks_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideMoveBuildChunksArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandBuildSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildSetValueArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tuple(const CommandBuildSetValueArchive* msg);
  static void set_has_tuple(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_tuple_for_main_property(const CommandBuildSetValueArchive* msg);
  static void set_has_old_tuple_for_main_property(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_chunk_id_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildSetValueArchive::_Internal::super(const CommandBuildSetValueArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandBuildSetValueArchive::_Internal::tuple(const CommandBuildSetValueArchive* msg) {
  return *msg->tuple_;
}
const ::TSP::Reference&
CommandBuildSetValueArchive::_Internal::old_tuple_for_main_property(const CommandBuildSetValueArchive* msg) {
  return *msg->old_tuple_for_main_property_;
}
void CommandBuildSetValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandBuildSetValueArchive::clear_tuple() {
  if (tuple_ != nullptr) tuple_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandBuildSetValueArchive::clear_chunks_to_add() {
  chunks_to_add_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_to_insert_after() {
  identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_to_remove() {
  identifiers_for_chunks_to_remove_.Clear();
}
void CommandBuildSetValueArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandBuildSetValueArchive::clear_old_tuple_for_main_property() {
  if (old_tuple_for_main_property_ != nullptr) old_tuple_for_main_property_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandBuildSetValueArchive::clear_old_tuples_to_update_for_sub_commands() {
  old_tuples_to_update_for_sub_commands_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_added_chunks() {
  identifiers_for_added_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_generated_identifiers() {
  generated_identifiers_.Clear();
}
void CommandBuildSetValueArchive::clear_removed_chunks() {
  removed_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_identifiers_for_chunks_prior_to_removed_chunks() {
  identifiers_for_chunks_prior_to_removed_chunks_.Clear();
}
void CommandBuildSetValueArchive::clear_old_chunk_identifiers() {
  old_chunk_identifiers_.Clear();
}
void CommandBuildSetValueArchive::clear_chunks_removed_during_undo() {
  chunks_removed_during_undo_.Clear();
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_to_add_(arena),
  identifiers_for_chunks_to_insert_after_(arena),
  identifiers_for_chunks_to_remove_(arena),
  tuples_to_update_(arena),
  old_tuples_to_update_for_sub_commands_(arena),
  identifiers_for_added_chunks_(arena),
  generated_identifiers_(arena),
  removed_chunks_(arena),
  identifiers_for_chunks_prior_to_removed_chunks_(arena),
  old_chunk_identifiers_(arena),
  chunks_removed_during_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildSetValueArchive)
}
CommandBuildSetValueArchive::CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chunks_to_add_(from.chunks_to_add_),
      identifiers_for_chunks_to_insert_after_(from.identifiers_for_chunks_to_insert_after_),
      identifiers_for_chunks_to_remove_(from.identifiers_for_chunks_to_remove_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_for_sub_commands_(from.old_tuples_to_update_for_sub_commands_),
      identifiers_for_added_chunks_(from.identifiers_for_added_chunks_),
      generated_identifiers_(from.generated_identifiers_),
      removed_chunks_(from.removed_chunks_),
      identifiers_for_chunks_prior_to_removed_chunks_(from.identifiers_for_chunks_prior_to_removed_chunks_),
      old_chunk_identifiers_(from.old_chunk_identifiers_),
      chunks_removed_during_undo_(from.chunks_removed_during_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tuple()) {
    tuple_ = new ::TSP::Reference(*from.tuple_);
  } else {
    tuple_ = nullptr;
  }
  if (from._internal_has_old_tuple_for_main_property()) {
    old_tuple_for_main_property_ = new ::TSP::Reference(*from.old_tuple_for_main_property_);
  } else {
    old_tuple_for_main_property_ = nullptr;
  }
  old_chunk_id_seed_ = from.old_chunk_id_seed_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildSetValueArchive)
}

inline void CommandBuildSetValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_chunk_id_seed_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_chunk_id_seed_));
}

CommandBuildSetValueArchive::~CommandBuildSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildSetValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandBuildSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tuple_;
  if (this != internal_default_instance()) delete old_tuple_for_main_property_;
}

void CommandBuildSetValueArchive::ArenaDtor(void* object) {
  CommandBuildSetValueArchive* _this = reinterpret_cast< CommandBuildSetValueArchive* >(object);
  (void)_this;
}
void CommandBuildSetValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandBuildSetValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandBuildSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_to_add_.Clear();
  identifiers_for_chunks_to_insert_after_.Clear();
  identifiers_for_chunks_to_remove_.Clear();
  tuples_to_update_.Clear();
  old_tuples_to_update_for_sub_commands_.Clear();
  identifiers_for_added_chunks_.Clear();
  generated_identifiers_.Clear();
  removed_chunks_.Clear();
  identifiers_for_chunks_prior_to_removed_chunks_.Clear();
  old_chunk_identifiers_.Clear();
  chunks_removed_during_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tuple_ != nullptr);
      tuple_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_tuple_for_main_property_ != nullptr);
      old_tuple_for_main_property_->Clear();
    }
  }
  old_chunk_id_seed_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildSetValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference tuple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_tuple_for_main_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_tuple_for_main_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update_for_sub_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_added_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generated_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_chunks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_prior_to_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 old_chunk_ID_seed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_old_chunk_id_seed(&has_bits);
          old_chunk_id_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_removed_during_undo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_removed_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandBuildSetValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference tuple = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tuple(this), target, stream);
  }

  // repeated .TSP.Reference chunks_to_add = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_add_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunks_to_add(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_identifiers_for_chunks_to_insert_after(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_remove_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_identifiers_for_chunks_to_remove(i), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tuples_to_update(i), target, stream);
  }

  // optional .TSP.Reference old_tuple_for_main_property = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::old_tuple_for_main_property(this), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_for_sub_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_old_tuples_to_update_for_sub_commands(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_added_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_identifiers_for_added_chunks(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generated_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_generated_identifiers(i), target, stream);
  }

  // repeated .TSP.Reference removed_chunks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_removed_chunks(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_identifiers_for_chunks_prior_to_removed_chunks(i), target, stream);
  }

  // optional uint32 old_chunk_ID_seed = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_old_chunk_id_seed(), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_chunk_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_old_chunk_identifiers(i), target, stream);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_removed_during_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_chunks_removed_during_undo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildSetValueArchive)
  return target;
}

size_t CommandBuildSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildSetValueArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chunks_to_add = 3;
  total_size += 1UL * this->_internal_chunks_to_add_size();
  for (const auto& msg : this->chunks_to_add_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_remove_size();
  for (const auto& msg : this->identifiers_for_chunks_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 6;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  total_size += 1UL * this->_internal_old_tuples_to_update_for_sub_commands_size();
  for (const auto& msg : this->old_tuples_to_update_for_sub_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  total_size += 1UL * this->_internal_identifiers_for_added_chunks_size();
  for (const auto& msg : this->identifiers_for_added_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  total_size += 1UL * this->_internal_generated_identifiers_size();
  for (const auto& msg : this->generated_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference removed_chunks = 11;
  total_size += 1UL * this->_internal_removed_chunks_size();
  for (const auto& msg : this->removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  total_size += 1UL * this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size();
  for (const auto& msg : this->identifiers_for_chunks_prior_to_removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  total_size += 1UL * this->_internal_old_chunk_identifiers_size();
  for (const auto& msg : this->old_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 15;
  total_size += 1UL * this->_internal_chunks_removed_during_undo_size();
  for (const auto& msg : this->chunks_removed_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference tuple = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuple_);
    }

    // optional .TSP.Reference old_tuple_for_main_property = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_tuple_for_main_property_);
    }

    // optional uint32 old_chunk_ID_seed = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old_chunk_id_seed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandBuildSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildSetValueArchive::GetClassData() const { return &_class_data_; }

void CommandBuildSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandBuildSetValueArchive *>(to)->MergeFrom(
      static_cast<const CommandBuildSetValueArchive &>(from));
}


void CommandBuildSetValueArchive::MergeFrom(const CommandBuildSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildSetValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_to_add_.MergeFrom(from.chunks_to_add_);
  identifiers_for_chunks_to_insert_after_.MergeFrom(from.identifiers_for_chunks_to_insert_after_);
  identifiers_for_chunks_to_remove_.MergeFrom(from.identifiers_for_chunks_to_remove_);
  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_for_sub_commands_.MergeFrom(from.old_tuples_to_update_for_sub_commands_);
  identifiers_for_added_chunks_.MergeFrom(from.identifiers_for_added_chunks_);
  generated_identifiers_.MergeFrom(from.generated_identifiers_);
  removed_chunks_.MergeFrom(from.removed_chunks_);
  identifiers_for_chunks_prior_to_removed_chunks_.MergeFrom(from.identifiers_for_chunks_prior_to_removed_chunks_);
  old_chunk_identifiers_.MergeFrom(from.old_chunk_identifiers_);
  chunks_removed_during_undo_.MergeFrom(from.chunks_removed_during_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tuple()->::TSP::Reference::MergeFrom(from._internal_tuple());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_tuple_for_main_property()->::TSP::Reference::MergeFrom(from._internal_old_tuple_for_main_property());
    }
    if (cached_has_bits & 0x00000008u) {
      old_chunk_id_seed_ = from.old_chunk_id_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildSetValueArchive::CopyFrom(const CommandBuildSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_to_add_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_insert_after_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_remove_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_for_sub_commands_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_added_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(generated_identifiers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_prior_to_removed_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_chunk_identifiers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_removed_during_undo_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tuple()) {
    if (!tuple_->IsInitialized()) return false;
  }
  if (_internal_has_old_tuple_for_main_property()) {
    if (!old_tuple_for_main_property_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildSetValueArchive::InternalSwap(CommandBuildSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_to_add_.InternalSwap(&other->chunks_to_add_);
  identifiers_for_chunks_to_insert_after_.InternalSwap(&other->identifiers_for_chunks_to_insert_after_);
  identifiers_for_chunks_to_remove_.InternalSwap(&other->identifiers_for_chunks_to_remove_);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_for_sub_commands_.InternalSwap(&other->old_tuples_to_update_for_sub_commands_);
  identifiers_for_added_chunks_.InternalSwap(&other->identifiers_for_added_chunks_);
  generated_identifiers_.InternalSwap(&other->generated_identifiers_);
  removed_chunks_.InternalSwap(&other->removed_chunks_);
  identifiers_for_chunks_prior_to_removed_chunks_.InternalSwap(&other->identifiers_for_chunks_prior_to_removed_chunks_);
  old_chunk_identifiers_.InternalSwap(&other->old_chunk_identifiers_);
  chunks_removed_during_undo_.InternalSwap(&other->chunks_removed_during_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, old_chunk_id_seed_)
      + sizeof(CommandBuildSetValueArchive::old_chunk_id_seed_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildSetValueArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildSetValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandBuildUpdateChunkReferentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildUpdateChunkReferentsArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildUpdateChunkReferentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& build_id(const CommandBuildUpdateChunkReferentsArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildUpdateChunkReferentsArchive::_Internal::super(const CommandBuildUpdateChunkReferentsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandBuildUpdateChunkReferentsArchive::_Internal::build_id(const CommandBuildUpdateChunkReferentsArchive* msg) {
  return *msg->build_id_;
}
void CommandBuildUpdateChunkReferentsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandBuildUpdateChunkReferentsArchive::clear_build_id() {
  if (build_id_ != nullptr) build_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandBuildUpdateChunkReferentsArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkReferentsArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildUpdateChunkReferentsArchive)
}
CommandBuildUpdateChunkReferentsArchive::CommandBuildUpdateChunkReferentsArchive(const CommandBuildUpdateChunkReferentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_build_id()) {
    build_id_ = new ::TSP::UUID(*from.build_id_);
  } else {
    build_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildUpdateChunkReferentsArchive)
}

inline void CommandBuildUpdateChunkReferentsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(build_id_));
}

CommandBuildUpdateChunkReferentsArchive::~CommandBuildUpdateChunkReferentsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildUpdateChunkReferentsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandBuildUpdateChunkReferentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete build_id_;
}

void CommandBuildUpdateChunkReferentsArchive::ArenaDtor(void* object) {
  CommandBuildUpdateChunkReferentsArchive* _this = reinterpret_cast< CommandBuildUpdateChunkReferentsArchive* >(object);
  (void)_this;
}
void CommandBuildUpdateChunkReferentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandBuildUpdateChunkReferentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandBuildUpdateChunkReferentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildUpdateChunkReferentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(build_id_ != nullptr);
      build_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildUpdateChunkReferentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandBuildUpdateChunkReferentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildUpdateChunkReferentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::build_id(this), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_old_tuples_to_update(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildUpdateChunkReferentsArchive)
  return target;
}

size_t CommandBuildUpdateChunkReferentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildUpdateChunkReferentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_build_id()) {
    // required .TSP.UUID build_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_id_);
  }

  return total_size;
}
size_t CommandBuildUpdateChunkReferentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildUpdateChunkReferentsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID build_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 3;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 4;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildUpdateChunkReferentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandBuildUpdateChunkReferentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildUpdateChunkReferentsArchive::GetClassData() const { return &_class_data_; }

void CommandBuildUpdateChunkReferentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandBuildUpdateChunkReferentsArchive *>(to)->MergeFrom(
      static_cast<const CommandBuildUpdateChunkReferentsArchive &>(from));
}


void CommandBuildUpdateChunkReferentsArchive::MergeFrom(const CommandBuildUpdateChunkReferentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildUpdateChunkReferentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_build_id()->::TSP::UUID::MergeFrom(from._internal_build_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildUpdateChunkReferentsArchive::CopyFrom(const CommandBuildUpdateChunkReferentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildUpdateChunkReferentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildUpdateChunkReferentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!build_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildUpdateChunkReferentsArchive::InternalSwap(CommandBuildUpdateChunkReferentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkReferentsArchive, build_id_)
      + sizeof(CommandBuildUpdateChunkReferentsArchive::build_id_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkReferentsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildUpdateChunkReferentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandBuildUpdateChunkCountArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildUpdateChunkCountArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildUpdateChunkCountArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandBuildUpdateChunkCountArchive* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needs_async_process_changes_selection_update(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildUpdateChunkCountArchive::_Internal::super(const CommandBuildUpdateChunkCountArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandBuildUpdateChunkCountArchive::_Internal::slide_id(const CommandBuildUpdateChunkCountArchive* msg) {
  return *msg->slide_id_;
}
void CommandBuildUpdateChunkCountArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandBuildUpdateChunkCountArchive::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandBuildUpdateChunkCountArchive::clear_drawable_ids() {
  drawable_ids_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_expected_delivery_style_tuples() {
  expected_delivery_style_tuples_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_to_add() {
  chunks_to_add_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_to_insert_after() {
  identifiers_for_chunks_to_insert_after_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_to_remove() {
  identifiers_for_chunks_to_remove_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_added_chunks() {
  identifiers_for_added_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_generated_identifiers() {
  generated_identifiers_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_removed_chunks() {
  removed_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_identifiers_for_chunks_prior_to_removed_chunks() {
  identifiers_for_chunks_prior_to_removed_chunks_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_delivery_style_tuples() {
  old_delivery_style_tuples_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_old_chunk_identifiers() {
  old_chunk_identifiers_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_working_builds() {
  working_builds_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_removed_during_undo() {
  chunks_removed_during_undo_.Clear();
}
void CommandBuildUpdateChunkCountArchive::clear_chunks_added_during_undo() {
  chunks_added_during_undo_.Clear();
}
CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drawable_ids_(arena),
  expected_delivery_style_tuples_(arena),
  chunks_to_add_(arena),
  identifiers_for_chunks_to_insert_after_(arena),
  identifiers_for_chunks_to_remove_(arena),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena),
  identifiers_for_added_chunks_(arena),
  generated_identifiers_(arena),
  removed_chunks_(arena),
  identifiers_for_chunks_prior_to_removed_chunks_(arena),
  old_delivery_style_tuples_(arena),
  old_chunk_id_seeds_(arena),
  old_chunk_identifiers_(arena),
  working_builds_(arena),
  chunks_removed_during_undo_(arena),
  chunks_added_during_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildUpdateChunkCountArchive)
}
CommandBuildUpdateChunkCountArchive::CommandBuildUpdateChunkCountArchive(const CommandBuildUpdateChunkCountArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawable_ids_(from.drawable_ids_),
      expected_delivery_style_tuples_(from.expected_delivery_style_tuples_),
      chunks_to_add_(from.chunks_to_add_),
      identifiers_for_chunks_to_insert_after_(from.identifiers_for_chunks_to_insert_after_),
      identifiers_for_chunks_to_remove_(from.identifiers_for_chunks_to_remove_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_),
      identifiers_for_added_chunks_(from.identifiers_for_added_chunks_),
      generated_identifiers_(from.generated_identifiers_),
      removed_chunks_(from.removed_chunks_),
      identifiers_for_chunks_prior_to_removed_chunks_(from.identifiers_for_chunks_prior_to_removed_chunks_),
      old_delivery_style_tuples_(from.old_delivery_style_tuples_),
      old_chunk_id_seeds_(from.old_chunk_id_seeds_),
      old_chunk_identifiers_(from.old_chunk_identifiers_),
      working_builds_(from.working_builds_),
      chunks_removed_during_undo_(from.chunks_removed_during_undo_),
      chunks_added_during_undo_(from.chunks_added_during_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  needs_async_process_changes_selection_update_ = from.needs_async_process_changes_selection_update_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildUpdateChunkCountArchive)
}

inline void CommandBuildUpdateChunkCountArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_async_process_changes_selection_update_) -
    reinterpret_cast<char*>(&super_)) + sizeof(needs_async_process_changes_selection_update_));
}

CommandBuildUpdateChunkCountArchive::~CommandBuildUpdateChunkCountArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildUpdateChunkCountArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandBuildUpdateChunkCountArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
}

void CommandBuildUpdateChunkCountArchive::ArenaDtor(void* object) {
  CommandBuildUpdateChunkCountArchive* _this = reinterpret_cast< CommandBuildUpdateChunkCountArchive* >(object);
  (void)_this;
}
void CommandBuildUpdateChunkCountArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandBuildUpdateChunkCountArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandBuildUpdateChunkCountArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildUpdateChunkCountArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_ids_.Clear();
  expected_delivery_style_tuples_.Clear();
  chunks_to_add_.Clear();
  identifiers_for_chunks_to_insert_after_.Clear();
  identifiers_for_chunks_to_remove_.Clear();
  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  identifiers_for_added_chunks_.Clear();
  generated_identifiers_.Clear();
  removed_chunks_.Clear();
  identifiers_for_chunks_prior_to_removed_chunks_.Clear();
  old_delivery_style_tuples_.Clear();
  old_chunk_id_seeds_.Clear();
  old_chunk_identifiers_.Clear();
  working_builds_.Clear();
  chunks_removed_during_undo_.Clear();
  chunks_added_during_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
  }
  needs_async_process_changes_selection_update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildUpdateChunkCountArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID drawable_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference expected_delivery_style_tuples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expected_delivery_style_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_add(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_insert_after(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_async_process_changes_selection_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_needs_async_process_changes_selection_update(&has_bits);
          needs_async_process_changes_selection_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_added_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generated_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_chunks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers_for_chunks_prior_to_removed_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_delivery_style_tuples = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_delivery_style_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 old_chunk_ID_seeds = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_old_chunk_id_seeds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_chunk_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference working_builds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_working_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_removed_during_undo = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chunks_removed_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference chunks_added_during_undo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chunks_added_during_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandBuildUpdateChunkCountArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildUpdateChunkCountArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSP.UUID drawable_ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawable_ids(i), target, stream);
  }

  // repeated .TSP.Reference expected_delivery_style_tuples = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expected_delivery_style_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_expected_delivery_style_tuples(i), target, stream);
  }

  // repeated .TSP.Reference chunks_to_add = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_add_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_chunks_to_add(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_insert_after_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_identifiers_for_chunks_to_insert_after(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_to_remove_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_identifiers_for_chunks_to_remove(i), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_tuples_to_update(i), target, stream);
  }

  // optional bool needs_async_process_changes_selection_update = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_needs_async_process_changes_selection_update(), target);
  }

  // repeated .TSP.Reference old_tuples_to_update = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_old_tuples_to_update(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_added_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_identifiers_for_added_chunks(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generated_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_generated_identifiers(i), target, stream);
  }

  // repeated .TSP.Reference removed_chunks = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_removed_chunks(i), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_identifiers_for_chunks_prior_to_removed_chunks(i), target, stream);
  }

  // repeated .TSP.Reference old_delivery_style_tuples = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_delivery_style_tuples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_old_delivery_style_tuples(i), target, stream);
  }

  // repeated uint32 old_chunk_ID_seeds = 16;
  for (int i = 0, n = this->_internal_old_chunk_id_seeds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_old_chunk_id_seeds(i), target);
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_chunk_identifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_old_chunk_identifiers(i), target, stream);
  }

  // repeated .TSP.Reference working_builds = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_working_builds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_working_builds(i), target, stream);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_removed_during_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_chunks_removed_during_undo(i), target, stream);
  }

  // repeated .TSP.Reference chunks_added_during_undo = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_added_during_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_chunks_added_during_undo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildUpdateChunkCountArchive)
  return target;
}

size_t CommandBuildUpdateChunkCountArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandBuildUpdateChunkCountArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  return total_size;
}
size_t CommandBuildUpdateChunkCountArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildUpdateChunkCountArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID drawable_ids = 3;
  total_size += 1UL * this->_internal_drawable_ids_size();
  for (const auto& msg : this->drawable_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference expected_delivery_style_tuples = 4;
  total_size += 1UL * this->_internal_expected_delivery_style_tuples_size();
  for (const auto& msg : this->expected_delivery_style_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_to_add = 5;
  total_size += 1UL * this->_internal_chunks_to_add_size();
  for (const auto& msg : this->chunks_to_add_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_insert_after_size();
  for (const auto& msg : this->identifiers_for_chunks_to_insert_after_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  total_size += 1UL * this->_internal_identifiers_for_chunks_to_remove_size();
  for (const auto& msg : this->identifiers_for_chunks_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference tuples_to_update = 8;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 10;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  total_size += 1UL * this->_internal_identifiers_for_added_chunks_size();
  for (const auto& msg : this->identifiers_for_added_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  total_size += 1UL * this->_internal_generated_identifiers_size();
  for (const auto& msg : this->generated_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference removed_chunks = 13;
  total_size += 1UL * this->_internal_removed_chunks_size();
  for (const auto& msg : this->removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  total_size += 1UL * this->_internal_identifiers_for_chunks_prior_to_removed_chunks_size();
  for (const auto& msg : this->identifiers_for_chunks_prior_to_removed_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_delivery_style_tuples = 15;
  total_size += 1UL * this->_internal_old_delivery_style_tuples_size();
  for (const auto& msg : this->old_delivery_style_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 old_chunk_ID_seeds = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->old_chunk_id_seeds_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_old_chunk_id_seeds_size());
    total_size += data_size;
  }

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  total_size += 2UL * this->_internal_old_chunk_identifiers_size();
  for (const auto& msg : this->old_chunk_identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference working_builds = 18;
  total_size += 2UL * this->_internal_working_builds_size();
  for (const auto& msg : this->working_builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_removed_during_undo = 19;
  total_size += 2UL * this->_internal_chunks_removed_during_undo_size();
  for (const auto& msg : this->chunks_removed_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference chunks_added_during_undo = 20;
  total_size += 2UL * this->_internal_chunks_added_during_undo_size();
  for (const auto& msg : this->chunks_added_during_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool needs_async_process_changes_selection_update = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildUpdateChunkCountArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandBuildUpdateChunkCountArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildUpdateChunkCountArchive::GetClassData() const { return &_class_data_; }

void CommandBuildUpdateChunkCountArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandBuildUpdateChunkCountArchive *>(to)->MergeFrom(
      static_cast<const CommandBuildUpdateChunkCountArchive &>(from));
}


void CommandBuildUpdateChunkCountArchive::MergeFrom(const CommandBuildUpdateChunkCountArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildUpdateChunkCountArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_ids_.MergeFrom(from.drawable_ids_);
  expected_delivery_style_tuples_.MergeFrom(from.expected_delivery_style_tuples_);
  chunks_to_add_.MergeFrom(from.chunks_to_add_);
  identifiers_for_chunks_to_insert_after_.MergeFrom(from.identifiers_for_chunks_to_insert_after_);
  identifiers_for_chunks_to_remove_.MergeFrom(from.identifiers_for_chunks_to_remove_);
  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  identifiers_for_added_chunks_.MergeFrom(from.identifiers_for_added_chunks_);
  generated_identifiers_.MergeFrom(from.generated_identifiers_);
  removed_chunks_.MergeFrom(from.removed_chunks_);
  identifiers_for_chunks_prior_to_removed_chunks_.MergeFrom(from.identifiers_for_chunks_prior_to_removed_chunks_);
  old_delivery_style_tuples_.MergeFrom(from.old_delivery_style_tuples_);
  old_chunk_id_seeds_.MergeFrom(from.old_chunk_id_seeds_);
  old_chunk_identifiers_.MergeFrom(from.old_chunk_identifiers_);
  working_builds_.MergeFrom(from.working_builds_);
  chunks_removed_during_undo_.MergeFrom(from.chunks_removed_during_undo_);
  chunks_added_during_undo_.MergeFrom(from.chunks_added_during_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
    if (cached_has_bits & 0x00000004u) {
      needs_async_process_changes_selection_update_ = from.needs_async_process_changes_selection_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildUpdateChunkCountArchive::CopyFrom(const CommandBuildUpdateChunkCountArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildUpdateChunkCountArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildUpdateChunkCountArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(expected_delivery_style_tuples_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_to_add_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_insert_after_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_to_remove_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_added_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(generated_identifiers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(identifiers_for_chunks_prior_to_removed_chunks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_delivery_style_tuples_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_chunk_identifiers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(working_builds_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_removed_during_undo_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chunks_added_during_undo_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildUpdateChunkCountArchive::InternalSwap(CommandBuildUpdateChunkCountArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawable_ids_.InternalSwap(&other->drawable_ids_);
  expected_delivery_style_tuples_.InternalSwap(&other->expected_delivery_style_tuples_);
  chunks_to_add_.InternalSwap(&other->chunks_to_add_);
  identifiers_for_chunks_to_insert_after_.InternalSwap(&other->identifiers_for_chunks_to_insert_after_);
  identifiers_for_chunks_to_remove_.InternalSwap(&other->identifiers_for_chunks_to_remove_);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  identifiers_for_added_chunks_.InternalSwap(&other->identifiers_for_added_chunks_);
  generated_identifiers_.InternalSwap(&other->generated_identifiers_);
  removed_chunks_.InternalSwap(&other->removed_chunks_);
  identifiers_for_chunks_prior_to_removed_chunks_.InternalSwap(&other->identifiers_for_chunks_prior_to_removed_chunks_);
  old_delivery_style_tuples_.InternalSwap(&other->old_delivery_style_tuples_);
  old_chunk_id_seeds_.InternalSwap(&other->old_chunk_id_seeds_);
  old_chunk_identifiers_.InternalSwap(&other->old_chunk_identifiers_);
  working_builds_.InternalSwap(&other->working_builds_);
  chunks_removed_during_undo_.InternalSwap(&other->chunks_removed_during_undo_);
  chunks_added_during_undo_.InternalSwap(&other->chunks_added_during_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkCountArchive, needs_async_process_changes_selection_update_)
      + sizeof(CommandBuildUpdateChunkCountArchive::needs_async_process_changes_selection_update_)
      - PROTOBUF_FIELD_OFFSET(CommandBuildUpdateChunkCountArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildUpdateChunkCountArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandBuildChunkSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandBuildChunkSetValueArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandBuildChunkSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandBuildChunkSetValueArchive::_Internal::super(const CommandBuildChunkSetValueArchive* msg) {
  return *msg->super_;
}
void CommandBuildChunkSetValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandBuildChunkSetValueArchive::clear_tuples_to_update() {
  tuples_to_update_.Clear();
}
void CommandBuildChunkSetValueArchive::clear_old_tuples_to_update() {
  old_tuples_to_update_.Clear();
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tuples_to_update_(arena),
  old_tuples_to_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandBuildChunkSetValueArchive)
}
CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tuples_to_update_(from.tuples_to_update_),
      old_tuples_to_update_(from.old_tuples_to_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandBuildChunkSetValueArchive)
}

inline void CommandBuildChunkSetValueArchive::SharedCtor() {
super_ = nullptr;
}

CommandBuildChunkSetValueArchive::~CommandBuildChunkSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandBuildChunkSetValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandBuildChunkSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandBuildChunkSetValueArchive::ArenaDtor(void* object) {
  CommandBuildChunkSetValueArchive* _this = reinterpret_cast< CommandBuildChunkSetValueArchive* >(object);
  (void)_this;
}
void CommandBuildChunkSetValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandBuildChunkSetValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandBuildChunkSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandBuildChunkSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuples_to_update_.Clear();
  old_tuples_to_update_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandBuildChunkSetValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tuples_to_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_tuples_to_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuples_to_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandBuildChunkSetValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandBuildChunkSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference tuples_to_update = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tuples_to_update(i), target, stream);
  }

  // repeated .TSP.Reference old_tuples_to_update = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuples_to_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_old_tuples_to_update(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandBuildChunkSetValueArchive)
  return target;
}

size_t CommandBuildChunkSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandBuildChunkSetValueArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tuples_to_update = 2;
  total_size += 1UL * this->_internal_tuples_to_update_size();
  for (const auto& msg : this->tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_tuples_to_update = 3;
  total_size += 1UL * this->_internal_old_tuples_to_update_size();
  for (const auto& msg : this->old_tuples_to_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandBuildChunkSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandBuildChunkSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandBuildChunkSetValueArchive::GetClassData() const { return &_class_data_; }

void CommandBuildChunkSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandBuildChunkSetValueArchive *>(to)->MergeFrom(
      static_cast<const CommandBuildChunkSetValueArchive &>(from));
}


void CommandBuildChunkSetValueArchive::MergeFrom(const CommandBuildChunkSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandBuildChunkSetValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuples_to_update_.MergeFrom(from.tuples_to_update_);
  old_tuples_to_update_.MergeFrom(from.old_tuples_to_update_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandBuildChunkSetValueArchive::CopyFrom(const CommandBuildChunkSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandBuildChunkSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildChunkSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tuples_to_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_tuples_to_update_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandBuildChunkSetValueArchive::InternalSwap(CommandBuildChunkSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tuples_to_update_.InternalSwap(&other->tuples_to_update_);
  old_tuples_to_update_.InternalSwap(&other->old_tuples_to_update_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandBuildChunkSetValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandTransitionSetValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransitionSetValueArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTransitionSetValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& slide_node_id_path(const CommandTransitionSetValueArchive* msg);
  static void set_has_slide_node_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::TransitionAttributesArchive& old_attributes(const CommandTransitionSetValueArchive* msg);
  static void set_has_old_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionAttributesArchive& attributes(const CommandTransitionSetValueArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTransitionSetValueArchive::_Internal::super(const CommandTransitionSetValueArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandTransitionSetValueArchive::_Internal::slide_node_id_path(const CommandTransitionSetValueArchive* msg) {
  return *msg->slide_node_id_path_;
}
const ::KN::TransitionAttributesArchive&
CommandTransitionSetValueArchive::_Internal::old_attributes(const CommandTransitionSetValueArchive* msg) {
  return *msg->old_attributes_;
}
const ::KN::TransitionAttributesArchive&
CommandTransitionSetValueArchive::_Internal::attributes(const CommandTransitionSetValueArchive* msg) {
  return *msg->attributes_;
}
void CommandTransitionSetValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandTransitionSetValueArchive::clear_slide_node_id_path() {
  if (slide_node_id_path_ != nullptr) slide_node_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTransitionSetValueArchive::clear_old_attributes() {
  if (old_attributes_ != nullptr) old_attributes_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandTransitionSetValueArchive::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandTransitionSetValueArchive)
}
CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_node_id_path()) {
    slide_node_id_path_ = new ::TSP::UUIDPath(*from.slide_node_id_path_);
  } else {
    slide_node_id_path_ = nullptr;
  }
  if (from._internal_has_old_attributes()) {
    old_attributes_ = new ::KN::TransitionAttributesArchive(*from.old_attributes_);
  } else {
    old_attributes_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::KN::TransitionAttributesArchive(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTransitionSetValueArchive)
}

inline void CommandTransitionSetValueArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&super_)) + sizeof(attributes_));
}

CommandTransitionSetValueArchive::~CommandTransitionSetValueArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTransitionSetValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTransitionSetValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_node_id_path_;
  if (this != internal_default_instance()) delete old_attributes_;
  if (this != internal_default_instance()) delete attributes_;
}

void CommandTransitionSetValueArchive::ArenaDtor(void* object) {
  CommandTransitionSetValueArchive* _this = reinterpret_cast< CommandTransitionSetValueArchive* >(object);
  (void)_this;
}
void CommandTransitionSetValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTransitionSetValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTransitionSetValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTransitionSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slide_node_id_path_ != nullptr);
      slide_node_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_attributes_ != nullptr);
      old_attributes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransitionSetValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_node_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive old_attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandTransitionSetValueArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTransitionSetValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTransitionSetValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_node_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_node_id_path(this), target, stream);
  }

  // optional .KN.TransitionAttributesArchive old_attributes = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_attributes(this), target, stream);
  }

  // optional .KN.TransitionAttributesArchive attributes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::attributes(this), target, stream);
  }

  // optional string property = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTransitionSetValueArchive.property");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTransitionSetValueArchive)
  return target;
}

size_t CommandTransitionSetValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_node_id_path()) {
    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);
  }

  return total_size;
}
size_t CommandTransitionSetValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTransitionSetValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_node_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_node_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string property = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional .KN.TransitionAttributesArchive old_attributes = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_attributes_);
    }

    // optional .KN.TransitionAttributesArchive attributes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTransitionSetValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTransitionSetValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTransitionSetValueArchive::GetClassData() const { return &_class_data_; }

void CommandTransitionSetValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTransitionSetValueArchive *>(to)->MergeFrom(
      static_cast<const CommandTransitionSetValueArchive &>(from));
}


void CommandTransitionSetValueArchive::MergeFrom(const CommandTransitionSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTransitionSetValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slide_node_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_node_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_attributes()->::KN::TransitionAttributesArchive::MergeFrom(from._internal_old_attributes());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(from._internal_attributes());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTransitionSetValueArchive::CopyFrom(const CommandTransitionSetValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTransitionSetValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransitionSetValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_node_id_path()) {
    if (!slide_node_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_attributes()) {
    if (!old_attributes_->IsInitialized()) return false;
  }
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransitionSetValueArchive::InternalSwap(CommandTransitionSetValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, attributes_)
      + sizeof(CommandTransitionSetValueArchive::attributes_)
      - PROTOBUF_FIELD_OFFSET(CommandTransitionSetValueArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransitionSetValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandShowSetSlideNumberVisibilityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSlideNumberVisibilityArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSlideNumberVisibilityArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_numbers_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSlideNumberVisibilityArchive::_Internal::super(const CommandShowSetSlideNumberVisibilityArchive* msg) {
  return *msg->super_;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSlideNumberVisibilityArchive::clear_ids_of_slide_nodes_to_skip() {
  ids_of_slide_nodes_to_skip_.Clear();
}
void CommandShowSetSlideNumberVisibilityArchive::clear_ids_of_slide_nodes_already_correct() {
  ids_of_slide_nodes_already_correct_.Clear();
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_of_slide_nodes_to_skip_(arena),
  ids_of_slide_nodes_already_correct_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}
CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ids_of_slide_nodes_to_skip_(from.ids_of_slide_nodes_to_skip_),
      ids_of_slide_nodes_already_correct_(from.ids_of_slide_nodes_already_correct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&slide_numbers_visible_, &from.slide_numbers_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_undo_) -
    reinterpret_cast<char*>(&slide_numbers_visible_)) + sizeof(is_undo_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSlideNumberVisibilityArchive)
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_undo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_undo_));
}

CommandShowSetSlideNumberVisibilityArchive::~CommandShowSetSlideNumberVisibilityArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowSetSlideNumberVisibilityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandShowSetSlideNumberVisibilityArchive::ArenaDtor(void* object) {
  CommandShowSetSlideNumberVisibilityArchive* _this = reinterpret_cast< CommandShowSetSlideNumberVisibilityArchive* >(object);
  (void)_this;
}
void CommandShowSetSlideNumberVisibilityArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowSetSlideNumberVisibilityArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowSetSlideNumberVisibilityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_of_slide_nodes_to_skip_.Clear();
  ids_of_slide_nodes_already_correct_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&slide_numbers_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_undo_) -
      reinterpret_cast<char*>(&slide_numbers_visible_)) + sizeof(is_undo_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSlideNumberVisibilityArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool slide_numbers_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slide_numbers_visible(&has_bits);
          slide_numbers_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_to_skip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids_of_slide_nodes_already_correct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool is_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_undo(&has_bits);
          is_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowSetSlideNumberVisibilityArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool slide_numbers_visible = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_slide_numbers_visible(), target);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_slide_nodes_to_skip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ids_of_slide_nodes_to_skip(i), target, stream);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_of_slide_nodes_already_correct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ids_of_slide_nodes_already_correct(i), target, stream);
  }

  // required bool is_undo = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSlideNumberVisibilityArchive)
  return target;
}

size_t CommandShowSetSlideNumberVisibilityArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_numbers_visible()) {
    // required bool slide_numbers_visible = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_is_undo()) {
    // required bool is_undo = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandShowSetSlideNumberVisibilityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool slide_numbers_visible = 3;
    total_size += 1 + 1;

    // required bool is_undo = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_to_skip_size();
  for (const auto& msg : this->ids_of_slide_nodes_to_skip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  total_size += 1UL * this->_internal_ids_of_slide_nodes_already_correct_size();
  for (const auto& msg : this->ids_of_slide_nodes_already_correct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSlideNumberVisibilityArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowSetSlideNumberVisibilityArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSlideNumberVisibilityArchive::GetClassData() const { return &_class_data_; }

void CommandShowSetSlideNumberVisibilityArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowSetSlideNumberVisibilityArchive *>(to)->MergeFrom(
      static_cast<const CommandShowSetSlideNumberVisibilityArchive &>(from));
}


void CommandShowSetSlideNumberVisibilityArchive::MergeFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_of_slide_nodes_to_skip_.MergeFrom(from.ids_of_slide_nodes_to_skip_);
  ids_of_slide_nodes_already_correct_.MergeFrom(from.ids_of_slide_nodes_already_correct_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      slide_numbers_visible_ = from.slide_numbers_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_undo_ = from.is_undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSlideNumberVisibilityArchive::CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSlideNumberVisibilityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSlideNumberVisibilityArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_slide_nodes_to_skip_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ids_of_slide_nodes_already_correct_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSlideNumberVisibilityArchive::InternalSwap(CommandShowSetSlideNumberVisibilityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_of_slide_nodes_to_skip_.InternalSwap(&other->ids_of_slide_nodes_to_skip_);
  ids_of_slide_nodes_already_correct_.InternalSwap(&other->ids_of_slide_nodes_already_correct_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, is_undo_)
      + sizeof(CommandShowSetSlideNumberVisibilityArchive::is_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSlideNumberVisibilityArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandTemplateSetThumbnailTextArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSetThumbnailTextArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTemplateSetThumbnailTextArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& template_id(const CommandTemplateSetThumbnailTextArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTemplateSetThumbnailTextArchive::_Internal::super(const CommandTemplateSetThumbnailTextArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandTemplateSetThumbnailTextArchive::_Internal::template_id(const CommandTemplateSetThumbnailTextArchive* msg) {
  return *msg->template_id_;
}
void CommandTemplateSetThumbnailTextArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTemplateSetThumbnailTextArchive::clear_template_id() {
  if (template_id_ != nullptr) template_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSetThumbnailTextArchive)
}
CommandTemplateSetThumbnailTextArchive::CommandTemplateSetThumbnailTextArchive(const CommandTemplateSetThumbnailTextArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_text()) {
    new_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_text(), 
      GetArenaForAllocation());
  }
  old_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_text()) {
    old_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_template_id()) {
    template_id_ = new ::TSP::UUID(*from.template_id_);
  } else {
    template_id_ = nullptr;
  }
  is_body_ = from.is_body_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSetThumbnailTextArchive)
}

inline void CommandTemplateSetThumbnailTextArchive::SharedCtor() {
new_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_body_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_body_));
}

CommandTemplateSetThumbnailTextArchive::~CommandTemplateSetThumbnailTextArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSetThumbnailTextArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTemplateSetThumbnailTextArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  new_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete template_id_;
}

void CommandTemplateSetThumbnailTextArchive::ArenaDtor(void* object) {
  CommandTemplateSetThumbnailTextArchive* _this = reinterpret_cast< CommandTemplateSetThumbnailTextArchive* >(object);
  (void)_this;
}
void CommandTemplateSetThumbnailTextArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTemplateSetThumbnailTextArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTemplateSetThumbnailTextArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSetThumbnailTextArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      new_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(template_id_ != nullptr);
      template_id_->Clear();
    }
  }
  is_body_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSetThumbnailTextArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_body(&has_bits);
          is_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandTemplateSetThumbnailTextArchive.new_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_old_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandTemplateSetThumbnailTextArchive.old_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTemplateSetThumbnailTextArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSetThumbnailTextArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID template_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::template_id(this), target, stream);
  }

  // required bool is_body = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_body(), target);
  }

  // optional string new_text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_text().data(), static_cast<int>(this->_internal_new_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSetThumbnailTextArchive.new_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_text(), target);
  }

  // optional string old_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_text().data(), static_cast<int>(this->_internal_old_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandTemplateSetThumbnailTextArchive.old_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_old_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSetThumbnailTextArchive)
  return target;
}

size_t CommandTemplateSetThumbnailTextArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSetThumbnailTextArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);
  }

  if (_internal_has_is_body()) {
    // required bool is_body = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandTemplateSetThumbnailTextArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSetThumbnailTextArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);

    // required bool is_body = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string new_text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_text());
    }

    // optional string old_text = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_text());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSetThumbnailTextArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTemplateSetThumbnailTextArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSetThumbnailTextArchive::GetClassData() const { return &_class_data_; }

void CommandTemplateSetThumbnailTextArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTemplateSetThumbnailTextArchive *>(to)->MergeFrom(
      static_cast<const CommandTemplateSetThumbnailTextArchive &>(from));
}


void CommandTemplateSetThumbnailTextArchive::MergeFrom(const CommandTemplateSetThumbnailTextArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSetThumbnailTextArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_new_text(from._internal_new_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_text(from._internal_old_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_template_id()->::TSP::UUID::MergeFrom(from._internal_template_id());
    }
    if (cached_has_bits & 0x00000010u) {
      is_body_ = from.is_body_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSetThumbnailTextArchive::CopyFrom(const CommandTemplateSetThumbnailTextArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSetThumbnailTextArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSetThumbnailTextArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!template_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSetThumbnailTextArchive::InternalSwap(CommandTemplateSetThumbnailTextArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_text_, GetArenaForAllocation(),
      &other->new_text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_text_, GetArenaForAllocation(),
      &other->old_text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSetThumbnailTextArchive, is_body_)
      + sizeof(CommandTemplateSetThumbnailTextArchive::is_body_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSetThumbnailTextArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSetThumbnailTextArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandTemplateSetBodyStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTemplateSetBodyStylesArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandTemplateSetBodyStylesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& template_id(const CommandTemplateSetBodyStylesArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandTemplateSetBodyStylesArchive::_Internal::super(const CommandTemplateSetBodyStylesArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandTemplateSetBodyStylesArchive::_Internal::template_id(const CommandTemplateSetBodyStylesArchive* msg) {
  return *msg->template_id_;
}
void CommandTemplateSetBodyStylesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandTemplateSetBodyStylesArchive::clear_template_id() {
  if (template_id_ != nullptr) template_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandTemplateSetBodyStylesArchive::clear_new_paragraph_styles() {
  new_paragraph_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_new_list_styles() {
  new_list_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_old_paragraph_styles() {
  old_paragraph_styles_.Clear();
}
void CommandTemplateSetBodyStylesArchive::clear_old_list_styles() {
  old_list_styles_.Clear();
}
CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  new_paragraph_styles_(arena),
  new_list_styles_(arena),
  old_paragraph_styles_(arena),
  old_list_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandTemplateSetBodyStylesArchive)
}
CommandTemplateSetBodyStylesArchive::CommandTemplateSetBodyStylesArchive(const CommandTemplateSetBodyStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      new_paragraph_styles_(from.new_paragraph_styles_),
      new_list_styles_(from.new_list_styles_),
      old_paragraph_styles_(from.old_paragraph_styles_),
      old_list_styles_(from.old_list_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_template_id()) {
    template_id_ = new ::TSP::UUID(*from.template_id_);
  } else {
    template_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandTemplateSetBodyStylesArchive)
}

inline void CommandTemplateSetBodyStylesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&template_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(template_id_));
}

CommandTemplateSetBodyStylesArchive::~CommandTemplateSetBodyStylesArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandTemplateSetBodyStylesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTemplateSetBodyStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete template_id_;
}

void CommandTemplateSetBodyStylesArchive::ArenaDtor(void* object) {
  CommandTemplateSetBodyStylesArchive* _this = reinterpret_cast< CommandTemplateSetBodyStylesArchive* >(object);
  (void)_this;
}
void CommandTemplateSetBodyStylesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTemplateSetBodyStylesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTemplateSetBodyStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandTemplateSetBodyStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_paragraph_styles_.Clear();
  new_list_styles_.Clear();
  old_paragraph_styles_.Clear();
  old_list_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(template_id_ != nullptr);
      template_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTemplateSetBodyStylesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_paragraph_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_list_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_paragraph_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_list_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_list_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTemplateSetBodyStylesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandTemplateSetBodyStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID template_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::template_id(this), target, stream);
  }

  // repeated .TSP.Reference new_paragraph_styles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_new_paragraph_styles(i), target, stream);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_list_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_new_list_styles(i), target, stream);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_old_paragraph_styles(i), target, stream);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_list_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_list_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandTemplateSetBodyStylesArchive)
  return target;
}

size_t CommandTemplateSetBodyStylesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandTemplateSetBodyStylesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);
  }

  return total_size;
}
size_t CommandTemplateSetBodyStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandTemplateSetBodyStylesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID template_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference new_paragraph_styles = 3;
  total_size += 1UL * this->_internal_new_paragraph_styles_size();
  for (const auto& msg : this->new_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  total_size += 1UL * this->_internal_new_list_styles_size();
  for (const auto& msg : this->new_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  total_size += 1UL * this->_internal_old_paragraph_styles_size();
  for (const auto& msg : this->old_paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  total_size += 1UL * this->_internal_old_list_styles_size();
  for (const auto& msg : this->old_list_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTemplateSetBodyStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTemplateSetBodyStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTemplateSetBodyStylesArchive::GetClassData() const { return &_class_data_; }

void CommandTemplateSetBodyStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTemplateSetBodyStylesArchive *>(to)->MergeFrom(
      static_cast<const CommandTemplateSetBodyStylesArchive &>(from));
}


void CommandTemplateSetBodyStylesArchive::MergeFrom(const CommandTemplateSetBodyStylesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandTemplateSetBodyStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_paragraph_styles_.MergeFrom(from.new_paragraph_styles_);
  new_list_styles_.MergeFrom(from.new_list_styles_);
  old_paragraph_styles_.MergeFrom(from.old_paragraph_styles_);
  old_list_styles_.MergeFrom(from.old_list_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_template_id()->::TSP::UUID::MergeFrom(from._internal_template_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTemplateSetBodyStylesArchive::CopyFrom(const CommandTemplateSetBodyStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandTemplateSetBodyStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTemplateSetBodyStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(new_paragraph_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(new_list_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_paragraph_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_list_styles_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!template_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandTemplateSetBodyStylesArchive::InternalSwap(CommandTemplateSetBodyStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  new_paragraph_styles_.InternalSwap(&other->new_paragraph_styles_);
  new_list_styles_.InternalSwap(&other->new_list_styles_);
  old_paragraph_styles_.InternalSwap(&other->old_paragraph_styles_);
  old_list_styles_.InternalSwap(&other->old_list_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTemplateSetBodyStylesArchive, template_id_)
      + sizeof(CommandTemplateSetBodyStylesArchive::template_id_)
      - PROTOBUF_FIELD_OFFSET(CommandTemplateSetBodyStylesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTemplateSetBodyStylesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandChangeTemplateSlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeTemplateSlideArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& template_slide_node(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_template_slide_node(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_old_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_undo_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& target_prototype(const CommandChangeTemplateSlideArchive* msg);
  static void set_has_target_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000027) ^ 0x00000027) != 0;
  }
};

const ::TSK::CommandArchive&
CommandChangeTemplateSlideArchive::_Internal::super(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandChangeTemplateSlideArchive::_Internal::slide_id_path(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->slide_id_path_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::template_slide_node(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->template_slide_node_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::old_template_slide_node(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->old_template_slide_node_;
}
const ::TSP::Reference&
CommandChangeTemplateSlideArchive::_Internal::target_prototype(const CommandChangeTemplateSlideArchive* msg) {
  return *msg->target_prototype_;
}
void CommandChangeTemplateSlideArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChangeTemplateSlideArchive::clear_slide_id_path() {
  if (slide_id_path_ != nullptr) slide_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChangeTemplateSlideArchive::clear_template_slide_node() {
  if (template_slide_node_ != nullptr) template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandChangeTemplateSlideArchive::clear_old_template_slide_node() {
  if (old_template_slide_node_ != nullptr) old_template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandChangeTemplateSlideArchive::clear_target_prototype() {
  if (target_prototype_ != nullptr) target_prototype_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandChangeTemplateSlideArchive)
}
CommandChangeTemplateSlideArchive::CommandChangeTemplateSlideArchive(const CommandChangeTemplateSlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id_path()) {
    slide_id_path_ = new ::TSP::UUIDPath(*from.slide_id_path_);
  } else {
    slide_id_path_ = nullptr;
  }
  if (from._internal_has_template_slide_node()) {
    template_slide_node_ = new ::TSP::Reference(*from.template_slide_node_);
  } else {
    template_slide_node_ = nullptr;
  }
  if (from._internal_has_old_template_slide_node()) {
    old_template_slide_node_ = new ::TSP::Reference(*from.old_template_slide_node_);
  } else {
    old_template_slide_node_ = nullptr;
  }
  if (from._internal_has_target_prototype()) {
    target_prototype_ = new ::TSP::Reference(*from.target_prototype_);
  } else {
    target_prototype_ = nullptr;
  }
  is_undo_redo_ = from.is_undo_redo_;
  // @@protoc_insertion_point(copy_constructor:KN.CommandChangeTemplateSlideArchive)
}

inline void CommandChangeTemplateSlideArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_undo_redo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_undo_redo_));
}

CommandChangeTemplateSlideArchive::~CommandChangeTemplateSlideArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandChangeTemplateSlideArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandChangeTemplateSlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_path_;
  if (this != internal_default_instance()) delete template_slide_node_;
  if (this != internal_default_instance()) delete old_template_slide_node_;
  if (this != internal_default_instance()) delete target_prototype_;
}

void CommandChangeTemplateSlideArchive::ArenaDtor(void* object) {
  CommandChangeTemplateSlideArchive* _this = reinterpret_cast< CommandChangeTemplateSlideArchive* >(object);
  (void)_this;
}
void CommandChangeTemplateSlideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChangeTemplateSlideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChangeTemplateSlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandChangeTemplateSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_path_ != nullptr);
      slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(template_slide_node_ != nullptr);
      template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_template_slide_node_ != nullptr);
      old_template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_prototype_ != nullptr);
      target_prototype_->Clear();
    }
  }
  is_undo_redo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeTemplateSlideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference template_slide_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_template_slide_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_undo_redo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_undo_redo(&has_bits);
          is_undo_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference target_prototype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_prototype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChangeTemplateSlideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandChangeTemplateSlideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id_path(this), target, stream);
  }

  // required .TSP.Reference template_slide_node = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::template_slide_node(this), target, stream);
  }

  // optional .TSP.Reference old_template_slide_node = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_template_slide_node(this), target, stream);
  }

  // required bool is_undo_redo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_undo_redo(), target);
  }

  // optional .TSP.Reference target_prototype = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::target_prototype(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandChangeTemplateSlideArchive)
  return target;
}

size_t CommandChangeTemplateSlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandChangeTemplateSlideArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);
  }

  if (_internal_has_template_slide_node()) {
    // required .TSP.Reference template_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_slide_node_);
  }

  if (_internal_has_is_undo_redo()) {
    // required bool is_undo_redo = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandChangeTemplateSlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandChangeTemplateSlideArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);

    // required .TSP.Reference template_slide_node = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_slide_node_);

    // required bool is_undo_redo = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.Reference old_template_slide_node = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_template_slide_node_);
    }

    // optional .TSP.Reference target_prototype = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_prototype_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeTemplateSlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandChangeTemplateSlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeTemplateSlideArchive::GetClassData() const { return &_class_data_; }

void CommandChangeTemplateSlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandChangeTemplateSlideArchive *>(to)->MergeFrom(
      static_cast<const CommandChangeTemplateSlideArchive &>(from));
}


void CommandChangeTemplateSlideArchive::MergeFrom(const CommandChangeTemplateSlideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandChangeTemplateSlideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_template_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_old_template_slide_node());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_target_prototype()->::TSP::Reference::MergeFrom(from._internal_target_prototype());
    }
    if (cached_has_bits & 0x00000020u) {
      is_undo_redo_ = from.is_undo_redo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeTemplateSlideArchive::CopyFrom(const CommandChangeTemplateSlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandChangeTemplateSlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeTemplateSlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide_node()) {
    if (!template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_old_template_slide_node()) {
    if (!old_template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_target_prototype()) {
    if (!target_prototype_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeTemplateSlideArchive::InternalSwap(CommandChangeTemplateSlideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeTemplateSlideArchive, is_undo_redo_)
      + sizeof(CommandChangeTemplateSlideArchive::is_undo_redo_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeTemplateSlideArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeTemplateSlideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[45]);
}

// ===================================================================

class CommandSlidePrimitiveSetTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlidePrimitiveSetTemplateArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& template_id(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_template_slide_node(const CommandSlidePrimitiveSetTemplateArchive* msg);
  static void set_has_old_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlidePrimitiveSetTemplateArchive::_Internal::super(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlidePrimitiveSetTemplateArchive::_Internal::slide_id_path(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->slide_id_path_;
}
const ::TSP::UUID&
CommandSlidePrimitiveSetTemplateArchive::_Internal::template_id(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->template_id_;
}
const ::TSP::Reference&
CommandSlidePrimitiveSetTemplateArchive::_Internal::old_template_slide_node(const CommandSlidePrimitiveSetTemplateArchive* msg) {
  return *msg->old_template_slide_node_;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_slide_id_path() {
  if (slide_id_path_ != nullptr) slide_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_template_id() {
  if (template_id_ != nullptr) template_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSlidePrimitiveSetTemplateArchive::clear_old_template_slide_node() {
  if (old_template_slide_node_ != nullptr) old_template_slide_node_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlidePrimitiveSetTemplateArchive)
}
CommandSlidePrimitiveSetTemplateArchive::CommandSlidePrimitiveSetTemplateArchive(const CommandSlidePrimitiveSetTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id_path()) {
    slide_id_path_ = new ::TSP::UUIDPath(*from.slide_id_path_);
  } else {
    slide_id_path_ = nullptr;
  }
  if (from._internal_has_template_id()) {
    template_id_ = new ::TSP::UUID(*from.template_id_);
  } else {
    template_id_ = nullptr;
  }
  if (from._internal_has_old_template_slide_node()) {
    old_template_slide_node_ = new ::TSP::Reference(*from.old_template_slide_node_);
  } else {
    old_template_slide_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlidePrimitiveSetTemplateArchive)
}

inline void CommandSlidePrimitiveSetTemplateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_template_slide_node_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_template_slide_node_));
}

CommandSlidePrimitiveSetTemplateArchive::~CommandSlidePrimitiveSetTemplateArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlidePrimitiveSetTemplateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlidePrimitiveSetTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_path_;
  if (this != internal_default_instance()) delete template_id_;
  if (this != internal_default_instance()) delete old_template_slide_node_;
}

void CommandSlidePrimitiveSetTemplateArchive::ArenaDtor(void* object) {
  CommandSlidePrimitiveSetTemplateArchive* _this = reinterpret_cast< CommandSlidePrimitiveSetTemplateArchive* >(object);
  (void)_this;
}
void CommandSlidePrimitiveSetTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlidePrimitiveSetTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlidePrimitiveSetTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_path_ != nullptr);
      slide_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(template_id_ != nullptr);
      template_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_template_slide_node_ != nullptr);
      old_template_slide_node_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlidePrimitiveSetTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID template_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_template_slide_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_template_slide_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlidePrimitiveSetTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id_path(this), target, stream);
  }

  // required .TSP.UUID template_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::template_id(this), target, stream);
  }

  // optional .TSP.Reference old_template_slide_node = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_template_slide_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlidePrimitiveSetTemplateArchive)
  return target;
}

size_t CommandSlidePrimitiveSetTemplateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id_path()) {
    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);
  }

  if (_internal_has_template_id()) {
    // required .TSP.UUID template_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);
  }

  return total_size;
}
size_t CommandSlidePrimitiveSetTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath slide_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);

    // required .TSP.UUID template_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *template_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_template_slide_node = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_template_slide_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlidePrimitiveSetTemplateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlidePrimitiveSetTemplateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlidePrimitiveSetTemplateArchive::GetClassData() const { return &_class_data_; }

void CommandSlidePrimitiveSetTemplateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlidePrimitiveSetTemplateArchive *>(to)->MergeFrom(
      static_cast<const CommandSlidePrimitiveSetTemplateArchive &>(from));
}


void CommandSlidePrimitiveSetTemplateArchive::MergeFrom(const CommandSlidePrimitiveSetTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_template_id()->::TSP::UUID::MergeFrom(from._internal_template_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_template_slide_node()->::TSP::Reference::MergeFrom(from._internal_old_template_slide_node());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlidePrimitiveSetTemplateArchive::CopyFrom(const CommandSlidePrimitiveSetTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlidePrimitiveSetTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePrimitiveSetTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!slide_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_template_id()) {
    if (!template_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_template_slide_node()) {
    if (!old_template_slide_node_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePrimitiveSetTemplateArchive::InternalSwap(CommandSlidePrimitiveSetTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetTemplateArchive, old_template_slide_node_)
      + sizeof(CommandSlidePrimitiveSetTemplateArchive::old_template_slide_node_)
      - PROTOBUF_FIELD_OFFSET(CommandSlidePrimitiveSetTemplateArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlidePrimitiveSetTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[46]);
}

// ===================================================================

class CommandSlideResetTemplateBackgroundObjectsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideResetTemplateBackgroundObjectsArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideResetTemplateBackgroundObjectsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& slide_id_path(const CommandSlideResetTemplateBackgroundObjectsArchive* msg);
  static void set_has_slide_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideResetTemplateBackgroundObjectsArchive::_Internal::super(const CommandSlideResetTemplateBackgroundObjectsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandSlideResetTemplateBackgroundObjectsArchive::_Internal::slide_id_path(const CommandSlideResetTemplateBackgroundObjectsArchive* msg) {
  return *msg->slide_id_path_;
}
void CommandSlideResetTemplateBackgroundObjectsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideResetTemplateBackgroundObjectsArchive::clear_slide_id_path() {
  if (slide_id_path_ != nullptr) slide_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
}
CommandSlideResetTemplateBackgroundObjectsArchive::CommandSlideResetTemplateBackgroundObjectsArchive(const CommandSlideResetTemplateBackgroundObjectsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id_path()) {
    slide_id_path_ = new ::TSP::UUIDPath(*from.slide_id_path_);
  } else {
    slide_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
}

inline void CommandSlideResetTemplateBackgroundObjectsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_id_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(slide_id_path_));
}

CommandSlideResetTemplateBackgroundObjectsArchive::~CommandSlideResetTemplateBackgroundObjectsArchive() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideResetTemplateBackgroundObjectsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_path_;
}

void CommandSlideResetTemplateBackgroundObjectsArchive::ArenaDtor(void* object) {
  CommandSlideResetTemplateBackgroundObjectsArchive* _this = reinterpret_cast< CommandSlideResetTemplateBackgroundObjectsArchive* >(object);
  (void)_this;
}
void CommandSlideResetTemplateBackgroundObjectsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideResetTemplateBackgroundObjectsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideResetTemplateBackgroundObjectsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_path_ != nullptr);
      slide_id_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideResetTemplateBackgroundObjectsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath slide_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideResetTemplateBackgroundObjectsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath slide_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  return target;
}

size_t CommandSlideResetTemplateBackgroundObjectsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath slide_id_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideResetTemplateBackgroundObjectsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideResetTemplateBackgroundObjectsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideResetTemplateBackgroundObjectsArchive::GetClassData() const { return &_class_data_; }

void CommandSlideResetTemplateBackgroundObjectsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideResetTemplateBackgroundObjectsArchive *>(to)->MergeFrom(
      static_cast<const CommandSlideResetTemplateBackgroundObjectsArchive &>(from));
}


void CommandSlideResetTemplateBackgroundObjectsArchive::MergeFrom(const CommandSlideResetTemplateBackgroundObjectsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_slide_id_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideResetTemplateBackgroundObjectsArchive::CopyFrom(const CommandSlideResetTemplateBackgroundObjectsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideResetTemplateBackgroundObjectsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id_path()) {
    if (!slide_id_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideResetTemplateBackgroundObjectsArchive::InternalSwap(CommandSlideResetTemplateBackgroundObjectsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideResetTemplateBackgroundObjectsArchive, slide_id_path_)
      + sizeof(CommandSlideResetTemplateBackgroundObjectsArchive::slide_id_path_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideResetTemplateBackgroundObjectsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideResetTemplateBackgroundObjectsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[47]);
}

// ===================================================================

class CommandShowSetSoundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandShowSetSoundtrack>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandShowSetSoundtrack* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& show(const CommandShowSetSoundtrack* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_soundtrack(const CommandShowSetSoundtrack* msg);
  static void set_has_old_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandShowSetSoundtrack::_Internal::super(const CommandShowSetSoundtrack* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::show(const CommandShowSetSoundtrack* msg) {
  return *msg->show_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->soundtrack_;
}
const ::TSP::Reference&
CommandShowSetSoundtrack::_Internal::old_soundtrack(const CommandShowSetSoundtrack* msg) {
  return *msg->old_soundtrack_;
}
void CommandShowSetSoundtrack::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandShowSetSoundtrack::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandShowSetSoundtrack::clear_soundtrack() {
  if (soundtrack_ != nullptr) soundtrack_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandShowSetSoundtrack::clear_old_soundtrack() {
  if (old_soundtrack_ != nullptr) old_soundtrack_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandShowSetSoundtrack)
}
CommandShowSetSoundtrack::CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::TSP::Reference(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_soundtrack()) {
    soundtrack_ = new ::TSP::Reference(*from.soundtrack_);
  } else {
    soundtrack_ = nullptr;
  }
  if (from._internal_has_old_soundtrack()) {
    old_soundtrack_ = new ::TSP::Reference(*from.old_soundtrack_);
  } else {
    old_soundtrack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandShowSetSoundtrack)
}

inline void CommandShowSetSoundtrack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_soundtrack_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_soundtrack_));
}

CommandShowSetSoundtrack::~CommandShowSetSoundtrack() {
  // @@protoc_insertion_point(destructor:KN.CommandShowSetSoundtrack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandShowSetSoundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete soundtrack_;
  if (this != internal_default_instance()) delete old_soundtrack_;
}

void CommandShowSetSoundtrack::ArenaDtor(void* object) {
  CommandShowSetSoundtrack* _this = reinterpret_cast< CommandShowSetSoundtrack* >(object);
  (void)_this;
}
void CommandShowSetSoundtrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandShowSetSoundtrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandShowSetSoundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandShowSetSoundtrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(soundtrack_ != nullptr);
      soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_soundtrack_ != nullptr);
      old_soundtrack_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandShowSetSoundtrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_soundtrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_soundtrack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandShowSetSoundtrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandShowSetSoundtrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show(this), target, stream);
  }

  // optional .TSP.Reference soundtrack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::soundtrack(this), target, stream);
  }

  // optional .TSP.Reference old_soundtrack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_soundtrack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandShowSetSoundtrack)
  return target;
}

size_t CommandShowSetSoundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandShowSetSoundtrack)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_);
    }

    // optional .TSP.Reference soundtrack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soundtrack_);
    }

    // optional .TSP.Reference old_soundtrack = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_soundtrack_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandShowSetSoundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandShowSetSoundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandShowSetSoundtrack::GetClassData() const { return &_class_data_; }

void CommandShowSetSoundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandShowSetSoundtrack *>(to)->MergeFrom(
      static_cast<const CommandShowSetSoundtrack &>(from));
}


void CommandShowSetSoundtrack::MergeFrom(const CommandShowSetSoundtrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandShowSetSoundtrack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_show()->::TSP::Reference::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_soundtrack()->::TSP::Reference::MergeFrom(from._internal_old_soundtrack());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandShowSetSoundtrack::CopyFrom(const CommandShowSetSoundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandShowSetSoundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSoundtrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_show()) {
    if (!show_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_old_soundtrack()) {
    if (!old_soundtrack_->IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSoundtrack::InternalSwap(CommandShowSetSoundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, old_soundtrack_)
      + sizeof(CommandShowSetSoundtrack::old_soundtrack_)
      - PROTOBUF_FIELD_OFFSET(CommandShowSetSoundtrack, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandShowSetSoundtrack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[48]);
}

// ===================================================================

class CommandSoundtrackSetValue_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue_PropertyValue>()._has_bits_);
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CommandSoundtrackSetValue_PropertyValue::clear_media_reference_values() {
  media_reference_values_.Clear();
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  media_reference_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}
CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      media_reference_values_(from.media_reference_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(mode_value_));
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue.PropertyValue)
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&double_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(mode_value_));
}

CommandSoundtrackSetValue_PropertyValue::~CommandSoundtrackSetValue_PropertyValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue.PropertyValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSoundtrackSetValue_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommandSoundtrackSetValue_PropertyValue::ArenaDtor(void* object) {
  CommandSoundtrackSetValue_PropertyValue* _this = reinterpret_cast< CommandSoundtrackSetValue_PropertyValue* >(object);
  (void)_this;
}
void CommandSoundtrackSetValue_PropertyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSoundtrackSetValue_PropertyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSoundtrackSetValue_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_reference_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(mode_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue_PropertyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode_value(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataReference media_reference_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_reference_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSoundtrackSetValue_PropertyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue.PropertyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double double_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode_value(), target);
  }

  // repeated .TSP.DataReference media_reference_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_media_reference_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_media_reference_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue.PropertyValue)
  return target;
}

size_t CommandSoundtrackSetValue_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue.PropertyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference media_reference_values = 3;
  total_size += 1UL * this->_internal_media_reference_values_size();
  for (const auto& msg : this->media_reference_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double double_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSoundtrackSetValue_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue_PropertyValue::GetClassData() const { return &_class_data_; }

void CommandSoundtrackSetValue_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSoundtrackSetValue_PropertyValue *>(to)->MergeFrom(
      static_cast<const CommandSoundtrackSetValue_PropertyValue &>(from));
}


void CommandSoundtrackSetValue_PropertyValue::MergeFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  media_reference_values_.MergeFrom(from.media_reference_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_value_ = from.mode_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue_PropertyValue::CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue_PropertyValue::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(media_reference_values_)) return false;
  return true;
}

void CommandSoundtrackSetValue_PropertyValue::InternalSwap(CommandSoundtrackSetValue_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  media_reference_values_.InternalSwap(&other->media_reference_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, mode_value_)
      + sizeof(CommandSoundtrackSetValue_PropertyValue::mode_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, double_value_)>(
          reinterpret_cast<char*>(&double_value_),
          reinterpret_cast<char*>(&other->double_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue_PropertyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[49]);
}

// ===================================================================

class CommandSoundtrackSetValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSoundtrackSetValue>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSoundtrackSetValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& soundtrack_id(const CommandSoundtrackSetValue* msg);
  static void set_has_soundtrack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& old_value(const CommandSoundtrackSetValue* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::CommandSoundtrackSetValue_PropertyValue& new_value(const CommandSoundtrackSetValue* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSoundtrackSetValue::_Internal::super(const CommandSoundtrackSetValue* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSoundtrackSetValue::_Internal::soundtrack_id(const CommandSoundtrackSetValue* msg) {
  return *msg->soundtrack_id_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::old_value(const CommandSoundtrackSetValue* msg) {
  return *msg->old_value_;
}
const ::KN::CommandSoundtrackSetValue_PropertyValue&
CommandSoundtrackSetValue::_Internal::new_value(const CommandSoundtrackSetValue* msg) {
  return *msg->new_value_;
}
void CommandSoundtrackSetValue::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSoundtrackSetValue::clear_soundtrack_id() {
  if (soundtrack_id_ != nullptr) soundtrack_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSoundtrackSetValue)
}
CommandSoundtrackSetValue::CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_soundtrack_id()) {
    soundtrack_id_ = new ::TSP::UUID(*from.soundtrack_id_);
  } else {
    soundtrack_id_ = nullptr;
  }
  if (from._internal_has_old_value()) {
    old_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from.old_value_);
  } else {
    old_value_ = nullptr;
  }
  if (from._internal_has_new_value()) {
    new_value_ = new ::KN::CommandSoundtrackSetValue_PropertyValue(*from.new_value_);
  } else {
    new_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSoundtrackSetValue)
}

inline void CommandSoundtrackSetValue::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_value_));
}

CommandSoundtrackSetValue::~CommandSoundtrackSetValue() {
  // @@protoc_insertion_point(destructor:KN.CommandSoundtrackSetValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSoundtrackSetValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete soundtrack_id_;
  if (this != internal_default_instance()) delete old_value_;
  if (this != internal_default_instance()) delete new_value_;
}

void CommandSoundtrackSetValue::ArenaDtor(void* object) {
  CommandSoundtrackSetValue* _this = reinterpret_cast< CommandSoundtrackSetValue* >(object);
  (void)_this;
}
void CommandSoundtrackSetValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSoundtrackSetValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSoundtrackSetValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSoundtrackSetValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(soundtrack_id_ != nullptr);
      soundtrack_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_value_ != nullptr);
      old_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(new_value_ != nullptr);
      new_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSoundtrackSetValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID soundtrack_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KN.CommandSoundtrackSetValue.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSoundtrackSetValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSoundtrackSetValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID soundtrack_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::soundtrack_id(this), target, stream);
  }

  // optional string property = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.CommandSoundtrackSetValue.property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property(), target);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_value(this), target, stream);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSoundtrackSetValue)
  return target;
}

size_t CommandSoundtrackSetValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSoundtrackSetValue)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string property = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.UUID soundtrack_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soundtrack_id_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_value_);
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSoundtrackSetValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSoundtrackSetValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSoundtrackSetValue::GetClassData() const { return &_class_data_; }

void CommandSoundtrackSetValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSoundtrackSetValue *>(to)->MergeFrom(
      static_cast<const CommandSoundtrackSetValue &>(from));
}


void CommandSoundtrackSetValue::MergeFrom(const CommandSoundtrackSetValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSoundtrackSetValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_soundtrack_id()->::TSP::UUID::MergeFrom(from._internal_soundtrack_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(from._internal_old_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_new_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(from._internal_new_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSoundtrackSetValue::CopyFrom(const CommandSoundtrackSetValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSoundtrackSetValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack_id()) {
    if (!soundtrack_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!new_value_->IsInitialized()) return false;
  }
  return true;
}

void CommandSoundtrackSetValue::InternalSwap(CommandSoundtrackSetValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, new_value_)
      + sizeof(CommandSoundtrackSetValue::new_value_)
      - PROTOBUF_FIELD_OFFSET(CommandSoundtrackSetValue, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSoundtrackSetValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[50]);
}

// ===================================================================

class CommandSlideUpdateTemplateDrawables::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSlideUpdateTemplateDrawables>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSlideUpdateTemplateDrawables* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& slide_id(const CommandSlideUpdateTemplateDrawables* msg);
  static void set_has_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSlideUpdateTemplateDrawables::_Internal::super(const CommandSlideUpdateTemplateDrawables* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSlideUpdateTemplateDrawables::_Internal::slide_id(const CommandSlideUpdateTemplateDrawables* msg) {
  return *msg->slide_id_;
}
void CommandSlideUpdateTemplateDrawables::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSlideUpdateTemplateDrawables::clear_slide_id() {
  if (slide_id_ != nullptr) slide_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSlideUpdateTemplateDrawables::clear_id_placement_operation_args() {
  id_placement_operation_args_.Clear();
}
void CommandSlideUpdateTemplateDrawables::clear_old_child_infos_for_undo() {
  old_child_infos_for_undo_.Clear();
}
CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_placement_operation_args_(arena),
  old_child_infos_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CommandSlideUpdateTemplateDrawables)
}
CommandSlideUpdateTemplateDrawables::CommandSlideUpdateTemplateDrawables(const CommandSlideUpdateTemplateDrawables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      id_placement_operation_args_(from.id_placement_operation_args_),
      old_child_infos_for_undo_(from.old_child_infos_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_slide_id()) {
    slide_id_ = new ::TSP::UUID(*from.slide_id_);
  } else {
    slide_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CommandSlideUpdateTemplateDrawables)
}

inline void CommandSlideUpdateTemplateDrawables::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(slide_id_));
}

CommandSlideUpdateTemplateDrawables::~CommandSlideUpdateTemplateDrawables() {
  // @@protoc_insertion_point(destructor:KN.CommandSlideUpdateTemplateDrawables)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSlideUpdateTemplateDrawables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete slide_id_;
}

void CommandSlideUpdateTemplateDrawables::ArenaDtor(void* object) {
  CommandSlideUpdateTemplateDrawables* _this = reinterpret_cast< CommandSlideUpdateTemplateDrawables* >(object);
  (void)_this;
}
void CommandSlideUpdateTemplateDrawables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSlideUpdateTemplateDrawables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSlideUpdateTemplateDrawables::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CommandSlideUpdateTemplateDrawables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_placement_operation_args_.Clear();
  old_child_infos_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slide_id_ != nullptr);
      slide_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSlideUpdateTemplateDrawables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_placement_operation_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_child_infos_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_child_infos_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSlideUpdateTemplateDrawables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CommandSlideUpdateTemplateDrawables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_id(this), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_placement_operation_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_id_placement_operation_args(i), target, stream);
  }

  // repeated .TSP.Reference old_child_infos_for_undo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_child_infos_for_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_old_child_infos_for_undo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CommandSlideUpdateTemplateDrawables)
  return target;
}

size_t CommandSlideUpdateTemplateDrawables::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.CommandSlideUpdateTemplateDrawables)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_slide_id()) {
    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);
  }

  return total_size;
}
size_t CommandSlideUpdateTemplateDrawables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CommandSlideUpdateTemplateDrawables)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID slide_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slide_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
  total_size += 1UL * this->_internal_id_placement_operation_args_size();
  for (const auto& msg : this->id_placement_operation_args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_child_infos_for_undo = 4;
  total_size += 1UL * this->_internal_old_child_infos_for_undo_size();
  for (const auto& msg : this->old_child_infos_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSlideUpdateTemplateDrawables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSlideUpdateTemplateDrawables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSlideUpdateTemplateDrawables::GetClassData() const { return &_class_data_; }

void CommandSlideUpdateTemplateDrawables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSlideUpdateTemplateDrawables *>(to)->MergeFrom(
      static_cast<const CommandSlideUpdateTemplateDrawables &>(from));
}


void CommandSlideUpdateTemplateDrawables::MergeFrom(const CommandSlideUpdateTemplateDrawables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CommandSlideUpdateTemplateDrawables)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_placement_operation_args_.MergeFrom(from.id_placement_operation_args_);
  old_child_infos_for_undo_.MergeFrom(from.old_child_infos_for_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slide_id()->::TSP::UUID::MergeFrom(from._internal_slide_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSlideUpdateTemplateDrawables::CopyFrom(const CommandSlideUpdateTemplateDrawables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CommandSlideUpdateTemplateDrawables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideUpdateTemplateDrawables::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(id_placement_operation_args_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_child_infos_for_undo_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_id()) {
    if (!slide_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSlideUpdateTemplateDrawables::InternalSwap(CommandSlideUpdateTemplateDrawables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_placement_operation_args_.InternalSwap(&other->id_placement_operation_args_);
  old_child_infos_for_undo_.InternalSwap(&other->old_child_infos_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSlideUpdateTemplateDrawables, slide_id_)
      + sizeof(CommandSlideUpdateTemplateDrawables::slide_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSlideUpdateTemplateDrawables, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSlideUpdateTemplateDrawables::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[51]);
}

// ===================================================================

class ChartInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartInfoGeometryCommandArchive>()._has_bits_);
  static const ::TSD::InfoGeometryCommandArchive& super(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& previous_legend_offset(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_previous_legend_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& previous_legend_size(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_previous_legend_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Point& adjusted_legend_offset(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_adjusted_legend_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& adjusted_legend_size(const ChartInfoGeometryCommandArchive* msg);
  static void set_has_adjusted_legend_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSD::InfoGeometryCommandArchive&
ChartInfoGeometryCommandArchive::_Internal::super(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Point&
ChartInfoGeometryCommandArchive::_Internal::previous_legend_offset(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->previous_legend_offset_;
}
const ::TSP::Size&
ChartInfoGeometryCommandArchive::_Internal::previous_legend_size(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->previous_legend_size_;
}
const ::TSP::Point&
ChartInfoGeometryCommandArchive::_Internal::adjusted_legend_offset(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->adjusted_legend_offset_;
}
const ::TSP::Size&
ChartInfoGeometryCommandArchive::_Internal::adjusted_legend_size(const ChartInfoGeometryCommandArchive* msg) {
  return *msg->adjusted_legend_size_;
}
void ChartInfoGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartInfoGeometryCommandArchive::clear_previous_legend_offset() {
  if (previous_legend_offset_ != nullptr) previous_legend_offset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartInfoGeometryCommandArchive::clear_previous_legend_size() {
  if (previous_legend_size_ != nullptr) previous_legend_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartInfoGeometryCommandArchive::clear_adjusted_legend_offset() {
  if (adjusted_legend_offset_ != nullptr) adjusted_legend_offset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartInfoGeometryCommandArchive::clear_adjusted_legend_size() {
  if (adjusted_legend_size_ != nullptr) adjusted_legend_size_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ChartInfoGeometryCommandArchive)
}
ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::InfoGeometryCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_previous_legend_offset()) {
    previous_legend_offset_ = new ::TSP::Point(*from.previous_legend_offset_);
  } else {
    previous_legend_offset_ = nullptr;
  }
  if (from._internal_has_previous_legend_size()) {
    previous_legend_size_ = new ::TSP::Size(*from.previous_legend_size_);
  } else {
    previous_legend_size_ = nullptr;
  }
  if (from._internal_has_adjusted_legend_offset()) {
    adjusted_legend_offset_ = new ::TSP::Point(*from.adjusted_legend_offset_);
  } else {
    adjusted_legend_offset_ = nullptr;
  }
  if (from._internal_has_adjusted_legend_size()) {
    adjusted_legend_size_ = new ::TSP::Size(*from.adjusted_legend_size_);
  } else {
    adjusted_legend_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.ChartInfoGeometryCommandArchive)
}

inline void ChartInfoGeometryCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adjusted_legend_size_) -
    reinterpret_cast<char*>(&super_)) + sizeof(adjusted_legend_size_));
}

ChartInfoGeometryCommandArchive::~ChartInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:KN.ChartInfoGeometryCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChartInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete previous_legend_offset_;
  if (this != internal_default_instance()) delete previous_legend_size_;
  if (this != internal_default_instance()) delete adjusted_legend_offset_;
  if (this != internal_default_instance()) delete adjusted_legend_size_;
}

void ChartInfoGeometryCommandArchive::ArenaDtor(void* object) {
  ChartInfoGeometryCommandArchive* _this = reinterpret_cast< ChartInfoGeometryCommandArchive* >(object);
  (void)_this;
}
void ChartInfoGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ChartInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(previous_legend_offset_ != nullptr);
      previous_legend_offset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(previous_legend_size_ != nullptr);
      previous_legend_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(adjusted_legend_offset_ != nullptr);
      adjusted_legend_offset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(adjusted_legend_size_ != nullptr);
      adjusted_legend_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Point previous_legend_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_legend_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size previous_legend_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_legend_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Point adjusted_legend_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_legend_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size adjusted_legend_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_legend_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartInfoGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ChartInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Point previous_legend_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::previous_legend_offset(this), target, stream);
  }

  // required .TSP.Size previous_legend_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previous_legend_size(this), target, stream);
  }

  // required .TSP.Point adjusted_legend_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::adjusted_legend_offset(this), target, stream);
  }

  // required .TSP.Size adjusted_legend_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::adjusted_legend_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ChartInfoGeometryCommandArchive)
  return target;
}

size_t ChartInfoGeometryCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ChartInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_previous_legend_offset()) {
    // required .TSP.Point previous_legend_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_legend_offset_);
  }

  if (_internal_has_previous_legend_size()) {
    // required .TSP.Size previous_legend_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_legend_size_);
  }

  if (_internal_has_adjusted_legend_offset()) {
    // required .TSP.Point adjusted_legend_offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjusted_legend_offset_);
  }

  if (_internal_has_adjusted_legend_size()) {
    // required .TSP.Size adjusted_legend_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjusted_legend_size_);
  }

  return total_size;
}
size_t ChartInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ChartInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Point previous_legend_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_legend_offset_);

    // required .TSP.Size previous_legend_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_legend_size_);

    // required .TSP.Point adjusted_legend_offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjusted_legend_offset_);

    // required .TSP.Size adjusted_legend_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjusted_legend_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartInfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChartInfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartInfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }

void ChartInfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChartInfoGeometryCommandArchive *>(to)->MergeFrom(
      static_cast<const ChartInfoGeometryCommandArchive &>(from));
}


void ChartInfoGeometryCommandArchive::MergeFrom(const ChartInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ChartInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::InfoGeometryCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_previous_legend_offset()->::TSP::Point::MergeFrom(from._internal_previous_legend_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_previous_legend_size()->::TSP::Size::MergeFrom(from._internal_previous_legend_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_adjusted_legend_offset()->::TSP::Point::MergeFrom(from._internal_adjusted_legend_offset());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_adjusted_legend_size()->::TSP::Size::MergeFrom(from._internal_adjusted_legend_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartInfoGeometryCommandArchive::CopyFrom(const ChartInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ChartInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_previous_legend_offset()) {
    if (!previous_legend_offset_->IsInitialized()) return false;
  }
  if (_internal_has_previous_legend_size()) {
    if (!previous_legend_size_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_legend_offset()) {
    if (!adjusted_legend_offset_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_legend_size()) {
    if (!adjusted_legend_size_->IsInitialized()) return false;
  }
  return true;
}

void ChartInfoGeometryCommandArchive::InternalSwap(ChartInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartInfoGeometryCommandArchive, adjusted_legend_size_)
      + sizeof(ChartInfoGeometryCommandArchive::adjusted_legend_size_)
      - PROTOBUF_FIELD_OFFSET(ChartInfoGeometryCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartInfoGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[52]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::transformer_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
void CanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionTransformerArchive::clear_build_chunk_ids() {
  build_chunk_ids_.Clear();
}
void CanvasSelectionTransformerArchive::clear_action_build_ids() {
  action_build_ids_.Clear();
}
void CanvasSelectionTransformerArchive::clear_originally_selected_drawable_uuids() {
  originally_selected_drawable_uuids_.Clear();
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  build_chunk_ids_(arena),
  action_build_ids_(arena),
  originally_selected_drawable_uuids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      build_chunk_ids_(from.build_chunk_ids_),
      action_build_ids_(from.action_build_ids_),
      originally_selected_drawable_uuids_(from.originally_selected_drawable_uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.CanvasSelectionTransformerArchive)
}

inline void CanvasSelectionTransformerArchive::SharedCtor() {
transformer_helper_ = nullptr;
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.CanvasSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
}

void CanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  CanvasSelectionTransformerArchive* _this = reinterpret_cast< CanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void CanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_chunk_ids_.Clear();
  action_build_ids_.Clear();
  originally_selected_drawable_uuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_helper_ != nullptr);
    transformer_helper_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_chunk_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID action_build_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_build_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_originally_selected_drawable_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_build_chunk_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_build_chunk_ids(i), target, stream);
  }

  // repeated .TSP.UUID action_build_ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_build_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_action_build_ids(i), target, stream);
  }

  // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_originally_selected_drawable_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_originally_selected_drawable_uuids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  total_size += 1UL * this->_internal_build_chunk_ids_size();
  for (const auto& msg : this->build_chunk_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID action_build_ids = 3;
  total_size += 1UL * this->_internal_action_build_ids_size();
  for (const auto& msg : this->action_build_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
  total_size += 1UL * this->_internal_originally_selected_drawable_uuids_size();
  for (const auto& msg : this->originally_selected_drawable_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void CanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CanvasSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const CanvasSelectionTransformerArchive &>(from));
}


void CanvasSelectionTransformerArchive::MergeFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  build_chunk_ids_.MergeFrom(from.build_chunk_ids_);
  action_build_ids_.MergeFrom(from.action_build_ids_);
  originally_selected_drawable_uuids_.MergeFrom(from.originally_selected_drawable_uuids_);
  if (from._internal_has_transformer_helper()) {
    _internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(build_chunk_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(action_build_ids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(originally_selected_drawable_uuids_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  build_chunk_ids_.InternalSwap(&other->build_chunk_ids_);
  action_build_ids_.InternalSwap(&other->action_build_ids_);
  originally_selected_drawable_uuids_.InternalSwap(&other->originally_selected_drawable_uuids_);
  swap(transformer_helper_, other->transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[53]);
}

// ===================================================================

class ActionGhostSelectionTransformerArchive::_Internal {
 public:
};

ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.ActionGhostSelectionTransformerArchive)
}
ActionGhostSelectionTransformerArchive::ActionGhostSelectionTransformerArchive(const ActionGhostSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.ActionGhostSelectionTransformerArchive)
}

inline void ActionGhostSelectionTransformerArchive::SharedCtor() {
}

ActionGhostSelectionTransformerArchive::~ActionGhostSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.ActionGhostSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionGhostSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionGhostSelectionTransformerArchive::ArenaDtor(void* object) {
  ActionGhostSelectionTransformerArchive* _this = reinterpret_cast< ActionGhostSelectionTransformerArchive* >(object);
  (void)_this;
}
void ActionGhostSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionGhostSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionGhostSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ActionGhostSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionGhostSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionGhostSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ActionGhostSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ActionGhostSelectionTransformerArchive)
  return target;
}

size_t ActionGhostSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ActionGhostSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionGhostSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionGhostSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionGhostSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void ActionGhostSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActionGhostSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const ActionGhostSelectionTransformerArchive &>(from));
}


void ActionGhostSelectionTransformerArchive::MergeFrom(const ActionGhostSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.ActionGhostSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionGhostSelectionTransformerArchive::CopyFrom(const ActionGhostSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ActionGhostSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionGhostSelectionTransformerArchive::IsInitialized() const {
  return true;
}

void ActionGhostSelectionTransformerArchive::InternalSwap(ActionGhostSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionGhostSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[54]);
}

// ===================================================================

class DocumentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& document_selection(const DocumentSelectionTransformerArchive* msg);
  static void set_has_document_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
DocumentSelectionTransformerArchive::_Internal::document_selection(const DocumentSelectionTransformerArchive* msg) {
  return *msg->document_selection_;
}
void DocumentSelectionTransformerArchive::clear_document_selection() {
  if (document_selection_ != nullptr) document_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.DocumentSelectionTransformerArchive)
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_selection()) {
    document_selection_ = new ::TSP::Reference(*from.document_selection_);
  } else {
    document_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.DocumentSelectionTransformerArchive)
}

inline void DocumentSelectionTransformerArchive::SharedCtor() {
document_selection_ = nullptr;
}

DocumentSelectionTransformerArchive::~DocumentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.DocumentSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_selection_;
}

void DocumentSelectionTransformerArchive::ArenaDtor(void* object) {
  DocumentSelectionTransformerArchive* _this = reinterpret_cast< DocumentSelectionTransformerArchive* >(object);
  (void)_this;
}
void DocumentSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(document_selection_ != nullptr);
    document_selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference document_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DocumentSelectionTransformerArchive)
  return target;
}

size_t DocumentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DocumentSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference document_selection = 1;
  if (_internal_has_document_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_selection_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void DocumentSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const DocumentSelectionTransformerArchive &>(from));
}


void DocumentSelectionTransformerArchive::MergeFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document_selection()) {
    _internal_mutable_document_selection()->::TSP::Reference::MergeFrom(from._internal_document_selection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSelectionTransformerArchive::CopyFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_document_selection()) {
    if (!document_selection_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionTransformerArchive::InternalSwap(DocumentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(document_selection_, other->document_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[55]);
}

// ===================================================================

class NoteCanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NoteCanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const NoteCanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
NoteCanvasSelectionTransformerArchive::_Internal::transformer_helper(const NoteCanvasSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
void NoteCanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.NoteCanvasSelectionTransformerArchive)
}
NoteCanvasSelectionTransformerArchive::NoteCanvasSelectionTransformerArchive(const NoteCanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.NoteCanvasSelectionTransformerArchive)
}

inline void NoteCanvasSelectionTransformerArchive::SharedCtor() {
transformer_helper_ = nullptr;
}

NoteCanvasSelectionTransformerArchive::~NoteCanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.NoteCanvasSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NoteCanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
}

void NoteCanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  NoteCanvasSelectionTransformerArchive* _this = reinterpret_cast< NoteCanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void NoteCanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoteCanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoteCanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.NoteCanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_helper_ != nullptr);
    transformer_helper_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteCanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoteCanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.NoteCanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.NoteCanvasSelectionTransformerArchive)
  return target;
}

size_t NoteCanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.NoteCanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteCanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NoteCanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteCanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void NoteCanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NoteCanvasSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const NoteCanvasSelectionTransformerArchive &>(from));
}


void NoteCanvasSelectionTransformerArchive::MergeFrom(const NoteCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.NoteCanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteCanvasSelectionTransformerArchive::CopyFrom(const NoteCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.NoteCanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteCanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void NoteCanvasSelectionTransformerArchive::InternalSwap(NoteCanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transformer_helper_, other->transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteCanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[56]);
}

// ===================================================================

class OutlineCanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OutlineCanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& canvas_selection_transformer(const OutlineCanvasSelectionTransformerArchive* msg);
  static void set_has_canvas_selection_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const OutlineCanvasSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
OutlineCanvasSelectionTransformerArchive::_Internal::canvas_selection_transformer(const OutlineCanvasSelectionTransformerArchive* msg) {
  return *msg->canvas_selection_transformer_;
}
const ::TSP::UUIDPath&
OutlineCanvasSelectionTransformerArchive::_Internal::storage_uuid_path(const OutlineCanvasSelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
void OutlineCanvasSelectionTransformerArchive::clear_canvas_selection_transformer() {
  if (canvas_selection_transformer_ != nullptr) canvas_selection_transformer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OutlineCanvasSelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.OutlineCanvasSelectionTransformerArchive)
}
OutlineCanvasSelectionTransformerArchive::OutlineCanvasSelectionTransformerArchive(const OutlineCanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_canvas_selection_transformer()) {
    canvas_selection_transformer_ = new ::TSP::Reference(*from.canvas_selection_transformer_);
  } else {
    canvas_selection_transformer_ = nullptr;
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.OutlineCanvasSelectionTransformerArchive)
}

inline void OutlineCanvasSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&canvas_selection_transformer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_uuid_path_) -
    reinterpret_cast<char*>(&canvas_selection_transformer_)) + sizeof(storage_uuid_path_));
}

OutlineCanvasSelectionTransformerArchive::~OutlineCanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.OutlineCanvasSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutlineCanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete canvas_selection_transformer_;
  if (this != internal_default_instance()) delete storage_uuid_path_;
}

void OutlineCanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  OutlineCanvasSelectionTransformerArchive* _this = reinterpret_cast< OutlineCanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void OutlineCanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutlineCanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutlineCanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.OutlineCanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(canvas_selection_transformer_ != nullptr);
      canvas_selection_transformer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutlineCanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference canvas_selection_transformer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvas_selection_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutlineCanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.OutlineCanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference canvas_selection_transformer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::canvas_selection_transformer(this), target, stream);
  }

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.OutlineCanvasSelectionTransformerArchive)
  return target;
}

size_t OutlineCanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.OutlineCanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference canvas_selection_transformer = 1;
  if (_internal_has_canvas_selection_transformer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *canvas_selection_transformer_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutlineCanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutlineCanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutlineCanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void OutlineCanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutlineCanvasSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const OutlineCanvasSelectionTransformerArchive &>(from));
}


void OutlineCanvasSelectionTransformerArchive::MergeFrom(const OutlineCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.OutlineCanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_canvas_selection_transformer()->::TSP::Reference::MergeFrom(from._internal_canvas_selection_transformer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutlineCanvasSelectionTransformerArchive::CopyFrom(const OutlineCanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.OutlineCanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlineCanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_canvas_selection_transformer()) {
    if (!canvas_selection_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void OutlineCanvasSelectionTransformerArchive::InternalSwap(OutlineCanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutlineCanvasSelectionTransformerArchive, storage_uuid_path_)
      + sizeof(OutlineCanvasSelectionTransformerArchive::storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(OutlineCanvasSelectionTransformerArchive, canvas_selection_transformer_)>(
          reinterpret_cast<char*>(&canvas_selection_transformer_),
          reinterpret_cast<char*>(&other->canvas_selection_transformer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutlineCanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[57]);
}

// ===================================================================

class SlideCollectionSelectionTransformerHelperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionTransformerHelperArchive>()._has_bits_);
  static const ::TSP::UUIDPath& slide_node_to_edit(const SlideCollectionSelectionTransformerHelperArchive* msg);
  static void set_has_slide_node_to_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_collection_is_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_previous_primary_selected_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUIDPath&
SlideCollectionSelectionTransformerHelperArchive::_Internal::slide_node_to_edit(const SlideCollectionSelectionTransformerHelperArchive* msg) {
  return *msg->slide_node_to_edit_;
}
void SlideCollectionSelectionTransformerHelperArchive::clear_slide_nodes() {
  slide_nodes_.Clear();
}
void SlideCollectionSelectionTransformerHelperArchive::clear_slide_node_to_edit() {
  if (slide_node_to_edit_ != nullptr) slide_node_to_edit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slide_nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionTransformerHelperArchive)
}
SlideCollectionSelectionTransformerHelperArchive::SlideCollectionSelectionTransformerHelperArchive(const SlideCollectionSelectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slide_nodes_(from.slide_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node_to_edit()) {
    slide_node_to_edit_ = new ::TSP::UUIDPath(*from.slide_node_to_edit_);
  } else {
    slide_node_to_edit_ = nullptr;
  }
  ::memcpy(&slide_collection_is_theme_, &from.slide_collection_is_theme_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_primary_selected_index_) -
    reinterpret_cast<char*>(&slide_collection_is_theme_)) + sizeof(previous_primary_selected_index_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionTransformerHelperArchive)
}

inline void SlideCollectionSelectionTransformerHelperArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_node_to_edit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&previous_primary_selected_index_) -
    reinterpret_cast<char*>(&slide_node_to_edit_)) + sizeof(previous_primary_selected_index_));
}

SlideCollectionSelectionTransformerHelperArchive::~SlideCollectionSelectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionTransformerHelperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideCollectionSelectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete slide_node_to_edit_;
}

void SlideCollectionSelectionTransformerHelperArchive::ArenaDtor(void* object) {
  SlideCollectionSelectionTransformerHelperArchive* _this = reinterpret_cast< SlideCollectionSelectionTransformerHelperArchive* >(object);
  (void)_this;
}
void SlideCollectionSelectionTransformerHelperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideCollectionSelectionTransformerHelperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideCollectionSelectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slide_nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(slide_node_to_edit_ != nullptr);
    slide_node_to_edit_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&slide_collection_is_theme_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_primary_selected_index_) -
        reinterpret_cast<char*>(&slide_collection_is_theme_)) + sizeof(previous_primary_selected_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionTransformerHelperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDPath slide_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath slide_node_to_edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_to_edit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool slide_collection_is_theme = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slide_collection_is_theme(&has_bits);
          slide_collection_is_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 previous_primary_selected_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_previous_primary_selected_index(&has_bits);
          previous_primary_selected_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideCollectionSelectionTransformerHelperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath slide_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slide_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_slide_nodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUIDPath slide_node_to_edit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slide_node_to_edit(this), target, stream);
  }

  // optional bool slide_collection_is_theme = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_slide_collection_is_theme(), target);
  }

  // optional uint32 previous_primary_selected_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_previous_primary_selected_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionTransformerHelperArchive)
  return target;
}

size_t SlideCollectionSelectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath slide_nodes = 1;
  total_size += 1UL * this->_internal_slide_nodes_size();
  for (const auto& msg : this->slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.UUIDPath slide_node_to_edit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slide_node_to_edit_);
    }

    // optional bool slide_collection_is_theme = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 previous_primary_selected_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_previous_primary_selected_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionTransformerHelperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideCollectionSelectionTransformerHelperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionTransformerHelperArchive::GetClassData() const { return &_class_data_; }

void SlideCollectionSelectionTransformerHelperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideCollectionSelectionTransformerHelperArchive *>(to)->MergeFrom(
      static_cast<const SlideCollectionSelectionTransformerHelperArchive &>(from));
}


void SlideCollectionSelectionTransformerHelperArchive::MergeFrom(const SlideCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slide_nodes_.MergeFrom(from.slide_nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slide_node_to_edit()->::TSP::UUIDPath::MergeFrom(from._internal_slide_node_to_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      slide_collection_is_theme_ = from.slide_collection_is_theme_;
    }
    if (cached_has_bits & 0x00000004u) {
      previous_primary_selected_index_ = from.previous_primary_selected_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionTransformerHelperArchive::CopyFrom(const SlideCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionTransformerHelperArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slide_nodes_)) return false;
  if (_internal_has_slide_node_to_edit()) {
    if (!slide_node_to_edit_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionTransformerHelperArchive::InternalSwap(SlideCollectionSelectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slide_nodes_.InternalSwap(&other->slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionTransformerHelperArchive, previous_primary_selected_index_)
      + sizeof(SlideCollectionSelectionTransformerHelperArchive::previous_primary_selected_index_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionTransformerHelperArchive, slide_node_to_edit_)>(
          reinterpret_cast<char*>(&slide_node_to_edit_),
          reinterpret_cast<char*>(&other->slide_node_to_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionTransformerHelperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[58]);
}

// ===================================================================

class SlideCollectionSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionTransformerArchive>()._has_bits_);
  static const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper(const SlideCollectionSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::SlideCollectionSelectionTransformerHelperArchive&
SlideCollectionSelectionTransformerArchive::_Internal::transformer_helper(const SlideCollectionSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionTransformerArchive)
}
SlideCollectionSelectionTransformerArchive::SlideCollectionSelectionTransformerArchive(const SlideCollectionSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::KN::SlideCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionTransformerArchive)
}

inline void SlideCollectionSelectionTransformerArchive::SharedCtor() {
transformer_helper_ = nullptr;
}

SlideCollectionSelectionTransformerArchive::~SlideCollectionSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlideCollectionSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
}

void SlideCollectionSelectionTransformerArchive::ArenaDtor(void* object) {
  SlideCollectionSelectionTransformerArchive* _this = reinterpret_cast< SlideCollectionSelectionTransformerArchive* >(object);
  (void)_this;
}
void SlideCollectionSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlideCollectionSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlideCollectionSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_helper_ != nullptr);
    transformer_helper_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlideCollectionSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionTransformerArchive)
  return target;
}

size_t SlideCollectionSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionTransformerArchive)
  size_t total_size = 0;

  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlideCollectionSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void SlideCollectionSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlideCollectionSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const SlideCollectionSelectionTransformerArchive &>(from));
}


void SlideCollectionSelectionTransformerArchive::MergeFrom(const SlideCollectionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _internal_mutable_transformer_helper()->::KN::SlideCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionTransformerArchive::CopyFrom(const SlideCollectionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionTransformerArchive::InternalSwap(SlideCollectionSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transformer_helper_, other->transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[59]);
}

// ===================================================================

class OutlineSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OutlineSelectionTransformerArchive>()._has_bits_);
  static const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper(const OutlineSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_have_range_in_selected_paragraph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::SlideCollectionSelectionTransformerHelperArchive&
OutlineSelectionTransformerArchive::_Internal::transformer_helper(const OutlineSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
void OutlineSelectionTransformerArchive::clear_selection_range_addresses() {
  selection_range_addresses_.Clear();
}
OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selection_range_addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KN.OutlineSelectionTransformerArchive)
}
OutlineSelectionTransformerArchive::OutlineSelectionTransformerArchive(const OutlineSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      selection_range_addresses_(from.selection_range_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::KN::SlideCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  can_have_range_in_selected_paragraph_ = from.can_have_range_in_selected_paragraph_;
  // @@protoc_insertion_point(copy_constructor:KN.OutlineSelectionTransformerArchive)
}

inline void OutlineSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transformer_helper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_have_range_in_selected_paragraph_) -
    reinterpret_cast<char*>(&transformer_helper_)) + sizeof(can_have_range_in_selected_paragraph_));
}

OutlineSelectionTransformerArchive::~OutlineSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:KN.OutlineSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutlineSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
}

void OutlineSelectionTransformerArchive::ArenaDtor(void* object) {
  OutlineSelectionTransformerArchive* _this = reinterpret_cast< OutlineSelectionTransformerArchive* >(object);
  (void)_this;
}
void OutlineSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutlineSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutlineSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.OutlineSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_range_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_helper_ != nullptr);
    transformer_helper_->Clear();
  }
  can_have_range_in_selected_paragraph_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutlineSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_have_range_in_selected_paragraph(&has_bits);
          can_have_range_in_selected_paragraph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RangeAddress selection_range_addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_range_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutlineSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.OutlineSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_have_range_in_selected_paragraph(), target);
  }

  // repeated .TSK.RangeAddress selection_range_addresses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selection_range_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_selection_range_addresses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.OutlineSelectionTransformerArchive)
  return target;
}

size_t OutlineSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.OutlineSelectionTransformerArchive)
  size_t total_size = 0;

  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RangeAddress selection_range_addresses = 3;
  total_size += 1UL * this->_internal_selection_range_addresses_size();
  for (const auto& msg : this->selection_range_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutlineSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutlineSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutlineSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void OutlineSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutlineSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const OutlineSelectionTransformerArchive &>(from));
}


void OutlineSelectionTransformerArchive::MergeFrom(const OutlineSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KN.OutlineSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_range_addresses_.MergeFrom(from.selection_range_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transformer_helper()->::KN::SlideCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
    }
    if (cached_has_bits & 0x00000002u) {
      can_have_range_in_selected_paragraph_ = from.can_have_range_in_selected_paragraph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutlineSelectionTransformerArchive::CopyFrom(const OutlineSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.OutlineSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlineSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void OutlineSelectionTransformerArchive::InternalSwap(OutlineSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selection_range_addresses_.InternalSwap(&other->selection_range_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutlineSelectionTransformerArchive, can_have_range_in_selected_paragraph_)
      + sizeof(OutlineSelectionTransformerArchive::can_have_range_in_selected_paragraph_)
      - PROTOBUF_FIELD_OFFSET(OutlineSelectionTransformerArchive, transformer_helper_)>(
          reinterpret_cast<char*>(&transformer_helper_),
          reinterpret_cast<char*>(&other->transformer_helper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutlineSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_KNCommandArchives_2eproto_getter, &descriptor_table_KNCommandArchives_2eproto_once,
      file_level_metadata_KNCommandArchives_2eproto[60]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::UIStateCommandGroupArchive* Arena::CreateMaybeMessage< ::KN::UIStateCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertDrawablesArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideInsertDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetPlaceholdersForTagsArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetPlaceholdersForTagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSlideSetPlaceholderForTagArchive* Arena::CreateMaybeMessage< ::KN::CommandTemplateSlideSetPlaceholderForTagArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSlideSetPlaceholderForTagArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePropagateSetPlaceholderForTagArchive* Arena::CreateMaybeMessage< ::KN::CommandSlidePropagateSetPlaceholderForTagArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePropagateSetPlaceholderForTagArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveDrawableArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveDrawableZOrderArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideMoveDrawableZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveDrawableZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetPropertyArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetPropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetPropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideNodeSetViewStatePropertyArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideNodeSetViewStatePropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideNodeSetViewStatePropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetBackgroundFillArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideSetBackgroundFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetBackgroundFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideSetStyleArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideSetStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideSetStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMarkOutOfSyncRecordingArchive* Arena::CreateMaybeMessage< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMarkOutOfSyncRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive* Arena::CreateMaybeMessage< ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveRecordingArchive* Arena::CreateMaybeMessage< ::KN::CommandShowRemoveRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowReplaceRecordingArchive* Arena::CreateMaybeMessage< ::KN::CommandShowReplaceRecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowReplaceRecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive_PropertyValue* Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetValueArchive* Arena::CreateMaybeMessage< ::KN::CommandShowSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowInsertSlideArchive* Arena::CreateMaybeMessage< ::KN::CommandShowInsertSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowInsertSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowMoveSlideArchive* Arena::CreateMaybeMessage< ::KN::CommandShowMoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowMoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowRemoveSlideArchive* Arena::CreateMaybeMessage< ::KN::CommandShowRemoveSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowRemoveSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* Arena::CreateMaybeMessage< ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeThemeArchive* Arena::CreateMaybeMessage< ::KN::CommandShowChangeThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowChangeSlideSizeArchive* Arena::CreateMaybeMessage< ::KN::CommandShowChangeSlideSizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowChangeSlideSizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSetThemeCustomEffectTimingCurveArchive* Arena::CreateMaybeMessage< ::KN::CommandSetThemeCustomEffectTimingCurveArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSetThemeCustomEffectTimingCurveArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandMoveTemplatesArchive* Arena::CreateMaybeMessage< ::KN::CommandMoveTemplatesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandMoveTemplatesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandInsertTemplateArchive* Arena::CreateMaybeMessage< ::KN::CommandInsertTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandInsertTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandPrimitiveInsertTemplateArchive* Arena::CreateMaybeMessage< ::KN::CommandPrimitiveInsertTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandPrimitiveInsertTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandRemoveTemplateArchive* Arena::CreateMaybeMessage< ::KN::CommandRemoveTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandRemoveTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandPrimitiveRemoveTemplateArchive* Arena::CreateMaybeMessage< ::KN::CommandPrimitiveRemoveTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandPrimitiveRemoveTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::InsertBuildDescriptionArchive* Arena::CreateMaybeMessage< ::KN::InsertBuildDescriptionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::InsertBuildDescriptionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::UndoObjectArchive* Arena::CreateMaybeMessage< ::KN::UndoObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UndoObjectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RemoveBuildDescriptionArchive* Arena::CreateMaybeMessage< ::KN::RemoveBuildDescriptionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RemoveBuildDescriptionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideInsertBuildChunkArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideInsertBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideInsertBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideRemoveBuildChunkArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideRemoveBuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideRemoveBuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideMoveBuildChunksArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideMoveBuildChunksArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideMoveBuildChunksArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildSetValueArchive* Arena::CreateMaybeMessage< ::KN::CommandBuildSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildUpdateChunkReferentsArchive* Arena::CreateMaybeMessage< ::KN::CommandBuildUpdateChunkReferentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildUpdateChunkReferentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildUpdateChunkCountArchive* Arena::CreateMaybeMessage< ::KN::CommandBuildUpdateChunkCountArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildUpdateChunkCountArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandBuildChunkSetValueArchive* Arena::CreateMaybeMessage< ::KN::CommandBuildChunkSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandBuildChunkSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTransitionSetValueArchive* Arena::CreateMaybeMessage< ::KN::CommandTransitionSetValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTransitionSetValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSlideNumberVisibilityArchive* Arena::CreateMaybeMessage< ::KN::CommandShowSetSlideNumberVisibilityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSlideNumberVisibilityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSetThumbnailTextArchive* Arena::CreateMaybeMessage< ::KN::CommandTemplateSetThumbnailTextArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSetThumbnailTextArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandTemplateSetBodyStylesArchive* Arena::CreateMaybeMessage< ::KN::CommandTemplateSetBodyStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandTemplateSetBodyStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandChangeTemplateSlideArchive* Arena::CreateMaybeMessage< ::KN::CommandChangeTemplateSlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandChangeTemplateSlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlidePrimitiveSetTemplateArchive* Arena::CreateMaybeMessage< ::KN::CommandSlidePrimitiveSetTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlidePrimitiveSetTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideResetTemplateBackgroundObjectsArchive* Arena::CreateMaybeMessage< ::KN::CommandSlideResetTemplateBackgroundObjectsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideResetTemplateBackgroundObjectsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandShowSetSoundtrack* Arena::CreateMaybeMessage< ::KN::CommandShowSetSoundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandShowSetSoundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue_PropertyValue* Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSoundtrackSetValue* Arena::CreateMaybeMessage< ::KN::CommandSoundtrackSetValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSoundtrackSetValue >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CommandSlideUpdateTemplateDrawables* Arena::CreateMaybeMessage< ::KN::CommandSlideUpdateTemplateDrawables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CommandSlideUpdateTemplateDrawables >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ChartInfoGeometryCommandArchive* Arena::CreateMaybeMessage< ::KN::ChartInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ChartInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ActionGhostSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::ActionGhostSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ActionGhostSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::DocumentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DocumentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::NoteCanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::NoteCanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::NoteCanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::OutlineCanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::OutlineCanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::OutlineCanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionTransformerHelperArchive* Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::OutlineSelectionTransformerArchive* Arena::CreateMaybeMessage< ::KN::OutlineSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::OutlineSelectionTransformerArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
