// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#include "TSCHArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSCH {
constexpr ChartDrawableArchive::ChartDrawableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ChartDrawableArchiveDefaultTypeInternal {
  constexpr ChartDrawableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartDrawableArchiveDefaultTypeInternal() {}
  union {
    ChartDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartDrawableArchiveDefaultTypeInternal _ChartDrawableArchive_default_instance_;
constexpr ChartArchive::ChartArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_axis_styles_()
  , value_axis_nonstyles_()
  , category_axis_styles_()
  , category_axis_nonstyles_()
  , series_theme_styles_()
  , paragraph_styles_()
  , legend_frame_(nullptr)
  , preset_(nullptr)
  , grid_(nullptr)
  , mediator_(nullptr)
  , chart_style_(nullptr)
  , chart_non_style_(nullptr)
  , legend_style_(nullptr)
  , legend_non_style_(nullptr)
  , series_private_styles_(nullptr)
  , series_non_styles_(nullptr)
  , owned_preset_(nullptr)
  , chart_type_(0)

  , scatter_format_(0)

  , series_direction_(0)

  , contains_default_data_(false)
  , needs_calc_engine_deferred_import_action_(false)
  , is_dirty_(false)
  , multidataset_index_(0u){}
struct ChartArchiveDefaultTypeInternal {
  constexpr ChartArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartArchiveDefaultTypeInternal() {}
  union {
    ChartArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartArchiveDefaultTypeInternal _ChartArchive_default_instance_;
constexpr ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartMultiDataIndexUpgradeDefaultTypeInternal {
  constexpr ChartMultiDataIndexUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartMultiDataIndexUpgradeDefaultTypeInternal() {}
  union {
    ChartMultiDataIndexUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartMultiDataIndexUpgradeDefaultTypeInternal _ChartMultiDataIndexUpgrade_default_instance_;
constexpr ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : horizontal_min_(0)
  , horizontal_max_(0)
  , value_min_(0)
  , value_max_(0){}
struct ChartGarlicMinMaxUpgradeDefaultTypeInternal {
  constexpr ChartGarlicMinMaxUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGarlicMinMaxUpgradeDefaultTypeInternal() {}
  union {
    ChartGarlicMinMaxUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGarlicMinMaxUpgradeDefaultTypeInternal _ChartGarlicMinMaxUpgrade_default_instance_;
constexpr ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , horizontal_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , horizontal_suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_use_separator_(false)
  , horizontal_use_separator_(false){}
struct ChartGarlicLabelFormatUpgradeDefaultTypeInternal {
  constexpr ChartGarlicLabelFormatUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGarlicLabelFormatUpgradeDefaultTypeInternal() {}
  union {
    ChartGarlicLabelFormatUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGarlicLabelFormatUpgradeDefaultTypeInternal _ChartGarlicLabelFormatUpgrade_default_instance_;
constexpr ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartPasteboardAdditionsArchiveDefaultTypeInternal {
  constexpr ChartPasteboardAdditionsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartPasteboardAdditionsArchiveDefaultTypeInternal() {}
  union {
    ChartPasteboardAdditionsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartPasteboardAdditionsArchiveDefaultTypeInternal _ChartPasteboardAdditionsArchive_default_instance_;
constexpr ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal {
  constexpr ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal() {}
  union {
    ChartPreserveAppearanceForPresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal _ChartPreserveAppearanceForPresetArchive_default_instance_;
constexpr ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal {
  constexpr ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsProportionalBendedCalloutLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal _ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_;
constexpr ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartSupportsRoundedCornersArchiveDefaultTypeInternal {
  constexpr ChartSupportsRoundedCornersArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSupportsRoundedCornersArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsRoundedCornersArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSupportsRoundedCornersArchiveDefaultTypeInternal _ChartSupportsRoundedCornersArchive_default_instance_;
constexpr ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal {
  constexpr ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsSeriesPropertySpacingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal _ChartSupportsSeriesPropertySpacingArchive_default_instance_;
constexpr ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uniqueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0u){}
struct ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal {
  constexpr ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal() {}
  union {
    ChartGridArchive_ChartGridRowColumnIdMap_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_;
constexpr ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_id_map_()
  , column_id_map_(){}
struct ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal {
  constexpr ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal() {}
  union {
    ChartGridArchive_ChartGridRowColumnIdMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_default_instance_;
constexpr ChartGridArchive::ChartGridArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_name_()
  , column_name_()
  , grid_row_()
  , idmap_(nullptr){}
struct ChartGridArchiveDefaultTypeInternal {
  constexpr ChartGridArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGridArchiveDefaultTypeInternal() {}
  union {
    ChartGridArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
constexpr ChartMediatorArchive::ChartMediatorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_series_indexes_()
  , remote_series_indexes_()
  , info_(nullptr){}
struct ChartMediatorArchiveDefaultTypeInternal {
  constexpr ChartMediatorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartMediatorArchiveDefaultTypeInternal() {}
  union {
    ChartMediatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
constexpr ChartFillSetArchive::ChartFillSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_styles_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lookup_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_of_theme_series_styles_(0u){}
struct ChartFillSetArchiveDefaultTypeInternal {
  constexpr ChartFillSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartFillSetArchiveDefaultTypeInternal() {}
  union {
    ChartFillSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartFillSetArchiveDefaultTypeInternal _ChartFillSetArchive_default_instance_;
constexpr ChartStylePreset::ChartStylePreset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_axis_styles_()
  , category_axis_styles_()
  , series_styles_()
  , paragraph_styles_()
  , uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chart_style_(nullptr)
  , legend_style_(nullptr){}
struct ChartStylePresetDefaultTypeInternal {
  constexpr ChartStylePresetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartStylePresetDefaultTypeInternal() {}
  union {
    ChartStylePreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartStylePresetDefaultTypeInternal _ChartStylePreset_default_instance_;
constexpr ChartPresetsArchive::ChartPresetsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_presets_(){}
struct ChartPresetsArchiveDefaultTypeInternal {
  constexpr ChartPresetsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartPresetsArchiveDefaultTypeInternal() {}
  union {
    ChartPresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartPresetsArchiveDefaultTypeInternal _ChartPresetsArchive_default_instance_;
constexpr PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_style_(nullptr)
  , chart_nonstyle_(nullptr)
  , legend_style_(nullptr)
  , legend_nonstyle_(nullptr)
  , value_axis_styles_(nullptr)
  , value_axis_nonstyles_(nullptr)
  , category_axis_styles_(nullptr)
  , category_axis_nonstyles_(nullptr)
  , series_theme_styles_(nullptr)
  , series_private_styles_(nullptr)
  , series_nonstyles_(nullptr)
  , paragraph_styles_(nullptr){}
struct PropertyValueStorageContainerArchiveDefaultTypeInternal {
  constexpr PropertyValueStorageContainerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyValueStorageContainerArchiveDefaultTypeInternal() {}
  union {
    PropertyValueStorageContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyValueStorageContainerArchiveDefaultTypeInternal _PropertyValueStorageContainerArchive_default_instance_;
constexpr StylePasteboardDataArchive::StylePasteboardDataArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , style_network_(nullptr)
  , copied_from_entire_chart_(false){}
struct StylePasteboardDataArchiveDefaultTypeInternal {
  constexpr StylePasteboardDataArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StylePasteboardDataArchiveDefaultTypeInternal() {}
  union {
    StylePasteboardDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StylePasteboardDataArchiveDefaultTypeInternal _StylePasteboardDataArchive_default_instance_;
constexpr ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChartSelectionPathTypeArchiveDefaultTypeInternal {
  constexpr ChartSelectionPathTypeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSelectionPathTypeArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSelectionPathTypeArchiveDefaultTypeInternal _ChartSelectionPathTypeArchive_default_instance_;
constexpr ChartAxisIDArchive::ChartAxisIDArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_type_(0)

  , ordinal_(0u){}
struct ChartAxisIDArchiveDefaultTypeInternal {
  constexpr ChartAxisIDArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisIDArchiveDefaultTypeInternal() {}
  union {
    ChartAxisIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisIDArchiveDefaultTypeInternal _ChartAxisIDArchive_default_instance_;
constexpr ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_id_(nullptr)
  , number_(0u){}
struct ChartSelectionPathArgumentArchiveDefaultTypeInternal {
  constexpr ChartSelectionPathArgumentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSelectionPathArgumentArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArgumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSelectionPathArgumentArchiveDefaultTypeInternal _ChartSelectionPathArgumentArchive_default_instance_;
constexpr ChartSelectionPathArchive::ChartSelectionPathArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , path_type_(nullptr)
  , sub_selection_(nullptr){}
struct ChartSelectionPathArchiveDefaultTypeInternal {
  constexpr ChartSelectionPathArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSelectionPathArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSelectionPathArchiveDefaultTypeInternal _ChartSelectionPathArchive_default_instance_;
constexpr ChartSelectionArchive::ChartSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_()
  , chart_(nullptr)
  , super_(nullptr){}
struct ChartSelectionArchiveDefaultTypeInternal {
  constexpr ChartSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSelectionArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
constexpr ChartCDESelectionArchive::ChartCDESelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_(nullptr)
  , selection_type_(0)
  , row_location_(0u)
  , row_length_(0u)
  , column_location_(0u)
  , column_length_(0u){}
struct ChartCDESelectionArchiveDefaultTypeInternal {
  constexpr ChartCDESelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartCDESelectionArchiveDefaultTypeInternal() {}
  union {
    ChartCDESelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartCDESelectionArchiveDefaultTypeInternal _ChartCDESelectionArchive_default_instance_;
constexpr ChartUIState::ChartUIState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_(nullptr)
  , cde_last_row_selected_(0)
  , cde_last_col_selected_(0)
  , cde_last_row_count_(0)
  , cde_last_col_count_(0)
  , multi_data_set_index_(0)
  , cde_use_full_keyboard_(false)
  , is_valid_multi_data_set_index_(false){}
struct ChartUIStateDefaultTypeInternal {
  constexpr ChartUIStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartUIStateDefaultTypeInternal() {}
  union {
    ChartUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartUIStateDefaultTypeInternal _ChartUIState_default_instance_;
constexpr ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal {
  constexpr ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal() {}
  union {
    ChartUIStateMultiDataIndexUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal _ChartUIStateMultiDataIndexUpgrade_default_instance_;
constexpr ChartFormatStructExtensions::ChartFormatStructExtensions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChartFormatStructExtensionsDefaultTypeInternal {
  constexpr ChartFormatStructExtensionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartFormatStructExtensionsDefaultTypeInternal() {}
  union {
    ChartFormatStructExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartFormatStructExtensionsDefaultTypeInternal _ChartFormatStructExtensions_default_instance_;
constexpr ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : non_style_(nullptr)
  , uuid_(nullptr){}
struct ChartReferenceLineNonStyleItemDefaultTypeInternal {
  constexpr ChartReferenceLineNonStyleItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartReferenceLineNonStyleItemDefaultTypeInternal() {}
  union {
    ChartReferenceLineNonStyleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartReferenceLineNonStyleItemDefaultTypeInternal _ChartReferenceLineNonStyleItem_default_instance_;
constexpr ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_line_non_style_items_()
  , axis_id_(nullptr){}
struct ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal {
  constexpr ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineNonStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineNonStylesArchive_default_instance_;
constexpr ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_id_(nullptr)
  , reference_line_styles_(nullptr){}
struct ChartAxisReferenceLineStylesArchiveDefaultTypeInternal {
  constexpr ChartAxisReferenceLineStylesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisReferenceLineStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineStylesArchive_default_instance_;
constexpr ChartReferenceLinesArchive::ChartReferenceLinesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_line_non_styles_map_()
  , reference_line_styles_map_()
  , theme_preset_reference_line_style_(nullptr){}
struct ChartReferenceLinesArchiveDefaultTypeInternal {
  constexpr ChartReferenceLinesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartReferenceLinesArchiveDefaultTypeInternal() {}
  union {
    ChartReferenceLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartReferenceLinesArchiveDefaultTypeInternal _ChartReferenceLinesArchive_default_instance_;
constexpr ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_line_styles_(){}
struct ChartPresetReferenceLineStylesArchiveDefaultTypeInternal {
  constexpr ChartPresetReferenceLineStylesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartPresetReferenceLineStylesArchiveDefaultTypeInternal() {}
  union {
    ChartPresetReferenceLineStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartPresetReferenceLineStylesArchiveDefaultTypeInternal _ChartPresetReferenceLineStylesArchive_default_instance_;
constexpr ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_line_non_style_items_()
  , axis_id_(nullptr){}
struct ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal {
  constexpr ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineSparseNonStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineSparseNonStylesArchive_default_instance_;
constexpr PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_line_non_styles_map_()
  , reference_line_styles_map_()
  , theme_preset_reference_line_style_(nullptr){}
struct PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal {
  constexpr PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal() {}
  union {
    PropertyValueStorageContainerReferenceLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal _PropertyValueStorageContainerReferenceLinesArchive_default_instance_;
}  // namespace TSCH
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSCHArchives_2eproto[35];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSCHArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, legend_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, series_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, contains_default_data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, mediator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, chart_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, legend_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, series_non_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, multidataset_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, needs_calc_engine_deferred_import_action_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, owned_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, is_dirty_),
  11,
  12,
  0,
  1,
  13,
  14,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  17,
  15,
  10,
  16,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMultiDataIndexUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, horizontal_min_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, horizontal_max_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, value_min_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, value_max_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, value_prefix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, value_suffix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, value_use_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, horizontal_prefix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, horizontal_suffix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, horizontal_use_separator_),
  0,
  1,
  4,
  2,
  3,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPasteboardAdditionsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPreserveAppearanceForPresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsRoundedCornersArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsSeriesPropertySpacingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, index_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, row_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, column_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, row_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, column_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, grid_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, idmap_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, local_series_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, remote_series_indexes_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, lookup_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, number_of_theme_series_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, series_styles_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, series_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, uuid_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, chart_presets_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, chart_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, legend_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, series_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, paragraph_styles_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, style_network_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, copied_from_entire_chart_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, path_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, axis_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, ordinal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, number_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, axis_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, sub_selection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, arguments_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, paths_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, selection_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, row_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, row_length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, column_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, column_length_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, cde_last_row_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, cde_last_col_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, cde_last_row_count_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, cde_last_col_count_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, cde_use_full_keyboard_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, multi_data_set_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, is_valid_multi_data_set_index_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIStateMultiDataIndexUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFormatStructExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, uuid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, reference_line_non_style_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, reference_line_styles_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, reference_line_non_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, reference_line_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, theme_preset_reference_line_style_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetReferenceLineStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetReferenceLineStylesArchive, reference_line_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, reference_line_non_style_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, reference_line_non_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, reference_line_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, theme_preset_reference_line_style_),
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::TSCH::ChartDrawableArchive)},
  { 7, 36, sizeof(::TSCH::ChartArchive)},
  { 60, -1, sizeof(::TSCH::ChartMultiDataIndexUpgrade)},
  { 65, 74, sizeof(::TSCH::ChartGarlicMinMaxUpgrade)},
  { 78, 89, sizeof(::TSCH::ChartGarlicLabelFormatUpgrade)},
  { 95, -1, sizeof(::TSCH::ChartPasteboardAdditionsArchive)},
  { 100, -1, sizeof(::TSCH::ChartPreserveAppearanceForPresetArchive)},
  { 105, -1, sizeof(::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive)},
  { 110, -1, sizeof(::TSCH::ChartSupportsRoundedCornersArchive)},
  { 115, -1, sizeof(::TSCH::ChartSupportsSeriesPropertySpacingArchive)},
  { 120, 127, sizeof(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry)},
  { 129, -1, sizeof(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap)},
  { 136, 145, sizeof(::TSCH::ChartGridArchive)},
  { 149, 157, sizeof(::TSCH::ChartMediatorArchive)},
  { 160, 169, sizeof(::TSCH::ChartFillSetArchive)},
  { 173, 185, sizeof(::TSCH::ChartStylePreset)},
  { 192, -1, sizeof(::TSCH::ChartPresetsArchive)},
  { 198, 215, sizeof(::TSCH::PropertyValueStorageContainerArchive)},
  { 227, 235, sizeof(::TSCH::StylePasteboardDataArchive)},
  { 238, 245, sizeof(::TSCH::ChartSelectionPathTypeArchive)},
  { 247, 254, sizeof(::TSCH::ChartAxisIDArchive)},
  { 256, 263, sizeof(::TSCH::ChartSelectionPathArgumentArchive)},
  { 265, 273, sizeof(::TSCH::ChartSelectionPathArchive)},
  { 276, 284, sizeof(::TSCH::ChartSelectionArchive)},
  { 287, 298, sizeof(::TSCH::ChartCDESelectionArchive)},
  { 304, 317, sizeof(::TSCH::ChartUIState)},
  { 325, -1, sizeof(::TSCH::ChartUIStateMultiDataIndexUpgrade)},
  { 330, -1, sizeof(::TSCH::ChartFormatStructExtensions)},
  { 335, 342, sizeof(::TSCH::ChartReferenceLineNonStyleItem)},
  { 344, 351, sizeof(::TSCH::ChartAxisReferenceLineNonStylesArchive)},
  { 353, 360, sizeof(::TSCH::ChartAxisReferenceLineStylesArchive)},
  { 362, 370, sizeof(::TSCH::ChartReferenceLinesArchive)},
  { 373, -1, sizeof(::TSCH::ChartPresetReferenceLineStylesArchive)},
  { 379, 386, sizeof(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive)},
  { 388, 396, sizeof(::TSCH::PropertyValueStorageContainerReferenceLinesArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartDrawableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartMultiDataIndexUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartGarlicMinMaxUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartGarlicLabelFormatUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartPasteboardAdditionsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartPreserveAppearanceForPresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSupportsRoundedCornersArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSupportsSeriesPropertySpacingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartGridArchive_ChartGridRowColumnIdMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartGridArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartMediatorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartFillSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartStylePreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartPresetsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_PropertyValueStorageContainerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_StylePasteboardDataArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSelectionPathTypeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartAxisIDArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSelectionPathArgumentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSelectionPathArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartCDESelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartUIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartUIStateMultiDataIndexUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartFormatStructExtensions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartReferenceLineNonStyleItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartAxisReferenceLineNonStylesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartAxisReferenceLineStylesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartReferenceLinesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartPresetReferenceLineStylesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_ChartAxisReferenceLineSparseNonStylesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::_PropertyValueStorageContainerReferenceLinesArchive_default_instance_),
};

const char descriptor_table_protodef_TSCHArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCHArchives.proto\022\004TSCH\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\032\021TSDArchives.pr"
  "oto\032\021TSSArchives.proto\032\031TSCHArchives.Com"
  "mon.proto\032\026TSCHArchives.GEN.proto\032\024TSCH3"
  "DArchives.proto\032\030TSCHPreUFFArchives.prot"
  "o\"F\n\024ChartDrawableArchive\022#\n\005super\030\001 \001(\013"
  "2\024.TSD.DrawableArchive*\t\010\220N\020\200\200\200\200\002\"\257\010\n\014Ch"
  "artArchive\022#\n\nchart_type\030\001 \001(\0162\017.TSCH.Ch"
  "artType\022+\n\016scatter_format\030\002 \001(\0162\023.TSCH.S"
  "catterFormat\022\'\n\014legend_frame\030\003 \001(\0132\021.TSC"
  "H.RectArchive\022\036\n\006preset\030\004 \001(\0132\016.TSP.Refe"
  "rence\022/\n\020series_direction\030\005 \001(\0162\025.TSCH.S"
  "eriesDirection\022\035\n\025contains_default_data\030"
  "\006 \001(\010\022$\n\004grid\030\007 \001(\0132\026.TSCH.ChartGridArch"
  "ive\022 \n\010mediator\030\010 \001(\0132\016.TSP.Reference\022#\n"
  "\013chart_style\030\t \001(\0132\016.TSP.Reference\022\'\n\017ch"
  "art_non_style\030\n \001(\0132\016.TSP.Reference\022$\n\014l"
  "egend_style\030\013 \001(\0132\016.TSP.Reference\022(\n\020leg"
  "end_non_style\030\014 \001(\0132\016.TSP.Reference\022)\n\021v"
  "alue_axis_styles\030\r \003(\0132\016.TSP.Reference\022,"
  "\n\024value_axis_nonstyles\030\016 \003(\0132\016.TSP.Refer"
  "ence\022,\n\024category_axis_styles\030\017 \003(\0132\016.TSP"
  ".Reference\022/\n\027category_axis_nonstyles\030\020 "
  "\003(\0132\016.TSP.Reference\022+\n\023series_theme_styl"
  "es\030\021 \003(\0132\016.TSP.Reference\0228\n\025series_priva"
  "te_styles\030\022 \001(\0132\031.TSP.SparseReferenceArr"
  "ay\0224\n\021series_non_styles\030\023 \001(\0132\031.TSP.Spar"
  "seReferenceArray\022(\n\020paragraph_styles\030\024 \003"
  "(\0132\016.TSP.Reference\022\032\n\022multidataset_index"
  "\030\025 \001(\r\0220\n(needs_calc_engine_deferred_imp"
  "ort_action\030\026 \001(\010\022$\n\014owned_preset\030\027 \001(\0132\016"
  ".TSP.Reference\022\020\n\010is_dirty\030\030 \001(\010*\t\010\220N\020\200\200"
  "\200\200\0022>\n\005unity\022\032.TSCH.ChartDrawableArchive"
  "\030\220N \001(\0132\022.TSCH.ChartArchive\"O\n\032ChartMult"
  "iDataIndexUpgrade21\n\024upgraded_to_ui_stat"
  "e\022\022.TSCH.ChartArchive\030\245N \001(\010\"\305\001\n\030ChartGa"
  "rlicMinMaxUpgrade\022\026\n\016horizontal_min\030\001 \001("
  "\001\022\026\n\016horizontal_max\030\002 \001(\001\022\021\n\tvalue_min\030\003"
  " \001(\001\022\021\n\tvalue_max\030\004 \001(\0012S\n\026garlic_min_ma"
  "x_upgrade\022\022.TSCH.ChartArchive\030\232N \001(\0132\036.T"
  "SCH.ChartGarlicMinMaxUpgrade\"\237\002\n\035ChartGa"
  "rlicLabelFormatUpgrade\022\024\n\014value_prefix\030\001"
  " \001(\t\022\024\n\014value_suffix\030\002 \001(\t\022\033\n\023value_use_"
  "separator\030\003 \001(\010\022\031\n\021horizontal_prefix\030\004 \001"
  "(\t\022\031\n\021horizontal_suffix\030\005 \001(\t\022 \n\030horizon"
  "tal_use_separator\030\006 \001(\0102]\n\033garlic_label_"
  "format_upgrade\022\022.TSCH.ChartArchive\030\233N \001("
  "\0132#.TSCH.ChartGarlicLabelFormatUpgrade\"\344"
  "\001\n\037ChartPasteboardAdditionsArchive28\n\033pr"
  "eset_index_for_pasteboard\022\022.TSCH.ChartAr"
  "chive\030\220N \001(\r27\n\032preset_uuid_for_pasteboa"
  "rd\022\022.TSCH.ChartArchive\030\221N \001(\0142N\n!custom_"
  "format_list_for_pasteboard\022\022.TSCH.ChartA"
  "rchive\030\223N \001(\0132\016.TSP.Reference\"g\n\'ChartPr"
  "eserveAppearanceForPresetArchive2<\n\037appe"
  "arance_preserved_for_preset\022\022.TSCH.Chart"
  "Archive\030\247N \001(\010\"}\n2ChartSupportsProportio"
  "nalBendedCalloutLinesArchive2G\n*supports"
  "_proportional_bended_callout_lines\022\022.TSC"
  "H.ChartArchive\030\250N \001(\010\"\235\001\n\"ChartSupportsR"
  "oundedCornersArchive2@\n#deprecated_suppo"
  "rts_rounded_corners\022\022.TSCH.ChartArchive\030"
  "\251N \001(\01025\n\030supports_rounded_corners\022\022.TSC"
  "H.ChartArchive\030\252N \001(\010\"\255\001\n)ChartSupportsS"
  "eriesPropertySpacingArchive2@\n#supports_"
  "series_value_label_spacing\022\022.TSCH.ChartA"
  "rchive\030\253N \001(\0102>\n!supports_series_error_b"
  "ar_spacing\022\022.TSCH.ChartArchive\030\254N \001(\010\"\366\002"
  "\n\020ChartGridArchive\022\020\n\010row_name\030\001 \003(\t\022\023\n\013"
  "column_name\030\002 \003(\t\022\037\n\010grid_row\030\003 \003(\0132\r.TS"
  "CH.GridRow\022=\n\005idMap\030\004 \001(\0132..TSCH.ChartGr"
  "idArchive.ChartGridRowColumnIdMap\032\332\001\n\027Ch"
  "artGridRowColumnIdMap\022H\n\nrow_id_map\030\001 \003("
  "\01324.TSCH.ChartGridArchive.ChartGridRowCo"
  "lumnIdMap.Entry\022K\n\rcolumn_id_map\030\002 \003(\01324"
  ".TSCH.ChartGridArchive.ChartGridRowColum"
  "nIdMap.Entry\032(\n\005Entry\022\020\n\010uniqueId\030\001 \002(\t\022"
  "\r\n\005index\030\002 \002(\r\"q\n\024ChartMediatorArchive\022\034"
  "\n\004info\030\001 \001(\0132\016.TSP.Reference\022\034\n\024local_se"
  "ries_indexes\030\002 \003(\r\022\035\n\025remote_series_inde"
  "xes\030\003 \003(\r\"\216\001\n\023ChartFillSetArchive\022\022\n\nide"
  "ntifier\030\001 \002(\t\022\025\n\rlookup_string\030\002 \002(\t\022%\n\035"
  "number_of_theme_series_styles\030\003 \001(\r\022%\n\rs"
  "eries_styles\030\004 \003(\0132\016.TSP.Reference\"\240\002\n\020C"
  "hartStylePreset\022#\n\013chart_style\030\001 \001(\0132\016.T"
  "SP.Reference\022$\n\014legend_style\030\002 \001(\0132\016.TSP"
  ".Reference\022)\n\021value_axis_styles\030\003 \003(\0132\016."
  "TSP.Reference\022,\n\024category_axis_styles\030\004 "
  "\003(\0132\016.TSP.Reference\022%\n\rseries_styles\030\005 \003"
  "(\0132\016.TSP.Reference\022(\n\020paragraph_styles\030\006"
  " \003(\0132\016.TSP.Reference\022\014\n\004uuid\030\007 \001(\014*\t\010\220N\020"
  "\200\200\200\200\002\"}\n\023ChartPresetsArchive\022%\n\rchart_pr"
  "esets\030\001 \003(\0132\016.TSP.Reference2\?\n\textension"
  "\022\021.TSS.ThemeArchive\030x \001(\0132\031.TSCH.ChartPr"
  "esetsArchive\"\215\005\n$PropertyValueStorageCon"
  "tainerArchive\022#\n\013chart_style\030\001 \001(\0132\016.TSP"
  ".Reference\022&\n\016chart_nonstyle\030\002 \001(\0132\016.TSP"
  ".Reference\022$\n\014legend_style\030\003 \001(\0132\016.TSP.R"
  "eference\022\'\n\017legend_nonstyle\030\004 \001(\0132\016.TSP."
  "Reference\0224\n\021value_axis_styles\030\005 \001(\0132\031.T"
  "SP.SparseReferenceArray\0227\n\024value_axis_no"
  "nstyles\030\006 \001(\0132\031.TSP.SparseReferenceArray"
  "\0227\n\024category_axis_styles\030\007 \001(\0132\031.TSP.Spa"
  "rseReferenceArray\022:\n\027category_axis_nonst"
  "yles\030\010 \001(\0132\031.TSP.SparseReferenceArray\0226\n"
  "\023series_theme_styles\030\t \001(\0132\031.TSP.SparseR"
  "eferenceArray\0228\n\025series_private_styles\030\n"
  " \001(\0132\031.TSP.SparseReferenceArray\0223\n\020serie"
  "s_nonstyles\030\013 \001(\0132\031.TSP.SparseReferenceA"
  "rray\0223\n\020paragraph_styles\030\014 \001(\0132\031.TSP.Spa"
  "rseReferenceArray*\t\010\220N\020\200\200\200\200\002\"\243\001\n\032StylePa"
  "steboardDataArchive\022 \n\005super\030\001 \001(\0132\021.TSS"
  ".StyleArchive\022A\n\rstyle_network\030\002 \001(\0132*.T"
  "SCH.PropertyValueStorageContainerArchive"
  "\022 \n\030copied_from_entire_chart\030\003 \001(\010\"E\n\035Ch"
  "artSelectionPathTypeArchive\022\021\n\tpath_type"
  "\030\001 \001(\t\022\021\n\tpath_name\030\002 \001(\t\"H\n\022ChartAxisID"
  "Archive\022!\n\taxis_type\030\001 \001(\0162\016.TSCH.AxisTy"
  "pe\022\017\n\007ordinal\030\002 \001(\r\"^\n!ChartSelectionPat"
  "hArgumentArchive\022\016\n\006number\030\001 \001(\r\022)\n\007axis"
  "_id\030\002 \001(\0132\030.TSCH.ChartAxisIDArchive\"\307\001\n\031"
  "ChartSelectionPathArchive\0226\n\tpath_type\030\001"
  " \001(\0132#.TSCH.ChartSelectionPathTypeArchiv"
  "e\0226\n\rsub_selection\030\002 \001(\0132\037.TSCH.ChartSel"
  "ectionPathArchive\022:\n\targuments\030\003 \003(\0132\'.T"
  "SCH.ChartSelectionPathArgumentArchive\"\224\001"
  "\n\025ChartSelectionArchive\022,\n\005super\030\003 \001(\0132\035"
  ".TSD.DrawableSelectionArchive\022\035\n\005chart\030\001"
  " \001(\0132\016.TSP.Reference\022.\n\005paths\030\002 \003(\0132\037.TS"
  "CH.ChartSelectionPathArchive\"\253\001\n\030ChartCD"
  "ESelectionArchive\022\035\n\005chart\030\001 \001(\0132\016.TSP.R"
  "eference\022\026\n\016selection_type\030\002 \001(\005\022\024\n\014row_"
  "location\030\003 \001(\r\022\022\n\nrow_length\030\004 \001(\r\022\027\n\017co"
  "lumn_location\030\005 \001(\r\022\025\n\rcolumn_length\030\006 \001"
  "(\r\"\222\002\n\014ChartUIState\022\035\n\005chart\030\001 \001(\0132\016.TSP"
  ".Reference\022\035\n\025cde_last_row_selected\030\002 \001("
  "\005\022\035\n\025cde_last_col_selected\030\003 \001(\005\022\032\n\022cde_"
  "last_row_count\030\004 \001(\005\022\032\n\022cde_last_col_cou"
  "nt\030\005 \001(\005\022\035\n\025cde_use_full_keyboard\030\006 \001(\010\022"
  "\034\n\024multi_data_set_index\030\007 \001(\005\022%\n\035is_vali"
  "d_multi_data_set_index\030\010 \001(\010*\t\010\220N\020\200\200\200\200\002\""
  "U\n!ChartUIStateMultiDataIndexUpgrade20\n\023"
  "upgraded_from_model\022\022.TSCH.ChartUIState\030"
  "\246N \001(\010\"s\n\033ChartFormatStructExtensions2)\n"
  "\006prefix\022\030.TSK.FormatStructArchive\030\220N \001(\t"
  "2)\n\006suffix\022\030.TSK.FormatStructArchive\030\221N "
  "\001(\t\"\\\n\036ChartReferenceLineNonStyleItem\022!\n"
  "\tnon_style\030\001 \002(\0132\016.TSP.Reference\022\027\n\004uuid"
  "\030\002 \002(\0132\t.TSP.UUID\"\241\001\n&ChartAxisReference"
  "LineNonStylesArchive\022)\n\007axis_id\030\001 \002(\0132\030."
  "TSCH.ChartAxisIDArchive\022L\n\036reference_lin"
  "e_non_style_items\030\002 \003(\0132$.TSCH.ChartRefe"
  "renceLineNonStyleItem\"\212\001\n#ChartAxisRefer"
  "enceLineStylesArchive\022)\n\007axis_id\030\001 \002(\0132\030"
  ".TSCH.ChartAxisIDArchive\0228\n\025reference_li"
  "ne_styles\030\002 \001(\0132\031.TSP.SparseReferenceArr"
  "ay\"\372\001\n\032ChartReferenceLinesArchive\022S\n\035ref"
  "erence_line_non_styles_map\030\001 \003(\0132,.TSCH."
  "ChartAxisReferenceLineNonStylesArchive\022L"
  "\n\031reference_line_styles_map\030\002 \003(\0132).TSCH"
  ".ChartAxisReferenceLineStylesArchive\0229\n!"
  "theme_preset_reference_line_style\030\003 \001(\0132"
  "\016.TSP.Reference\"V\n%ChartPresetReferenceL"
  "ineStylesArchive\022-\n\025reference_line_style"
  "s\030\001 \003(\0132\016.TSP.Reference\"\247\001\n,ChartAxisRef"
  "erenceLineSparseNonStylesArchive\022)\n\007axis"
  "_id\030\001 \002(\0132\030.TSCH.ChartAxisIDArchive\022L\n\036r"
  "eference_line_non_style_items\030\002 \003(\0132$.TS"
  "CH.ChartReferenceLineNonStyleItem\"\230\002\n2Pr"
  "opertyValueStorageContainerReferenceLine"
  "sArchive\022Y\n\035reference_line_non_styles_ma"
  "p\030\001 \003(\01322.TSCH.ChartAxisReferenceLineSpa"
  "rseNonStylesArchive\022L\n\031reference_line_st"
  "yles_map\030\002 \003(\0132).TSCH.ChartAxisReference"
  "LineStylesArchive\0229\n!theme_preset_refere"
  "nce_line_style\030\003 \001(\0132\016.TSP.Reference:<\n\037"
  "scene3d_settings_constant_depth\022\022.TSCH.C"
  "hartArchive\030\222N \001(\010:@\n#last_applied_fill_"
  "set_lookup_string\022\022.TSCH.ChartArchive\030\224N"
  " \001(\t:=\n\025series_supports_donut\022\035.TSCH.Cha"
  "rtSeriesStyleArchive\030\221N \001(\010:O\n$series_su"
  "pports_custom_number_format\022 .TSCH.Chart"
  "SeriesNonStyleArchive\030\221N \001(\010:M\n\"series_s"
  "upports_custom_date_format\022 .TSCH.ChartS"
  "eriesNonStyleArchive\030\222N \001(\010:H\n\035series_su"
  "pports_callout_lines\022 .TSCH.ChartSeriesN"
  "onStyleArchive\030\223N \001(\010:K\n\"axis_supports_c"
  "ustom_number_format\022\036.TSCH.ChartAxisNonS"
  "tyleArchive\030\221N \001(\010:I\n axis_supports_cust"
  "om_date_format\022\036.TSCH.ChartAxisNonStyleA"
  "rchive\030\222N \001(\010:N\n\017reference_lines\022\022.TSCH."
  "ChartArchive\030\225N \001(\0132 .TSCH.ChartReferenc"
  "eLinesArchive:j\n\034preset_reference_line_s"
  "tyles\022\026.TSCH.ChartStylePreset\030\220N \001(\0132+.T"
  "SCH.ChartPresetReferenceLineStylesArchiv"
  "e:\237\001\n0property_value_storage_container_r"
  "eference_lines\022*.TSCH.PropertyValueStora"
  "geContainerArchive\030\220N \001(\01328.TSCH.Propert"
  "yValueStorageContainerReferenceLinesArch"
  "ive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSCHArchives_2eproto_deps[8] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSCHArchives_2eGEN_2eproto,
  &::descriptor_table_TSCHPreUFFArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSCHArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eproto = {
  false, false, 7963, descriptor_table_protodef_TSCHArchives_2eproto, "TSCHArchives.proto", 
  &descriptor_table_TSCHArchives_2eproto_once, descriptor_table_TSCHArchives_2eproto_deps, 8, 35,
  schemas, file_default_instances, TableStruct_TSCHArchives_2eproto::offsets,
  file_level_metadata_TSCHArchives_2eproto, file_level_enum_descriptors_TSCHArchives_2eproto, file_level_service_descriptors_TSCHArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSCHArchives_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eproto(&descriptor_table_TSCHArchives_2eproto);
namespace TSCH {

// ===================================================================

class ChartDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartDrawableArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const ChartDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::DrawableArchive&
ChartDrawableArchive::_Internal::super(const ChartDrawableArchive* msg) {
  return *msg->super_;
}
void ChartDrawableArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartDrawableArchive::ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartDrawableArchive)
}
ChartDrawableArchive::ChartDrawableArchive(const ChartDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartDrawableArchive)
}

void ChartDrawableArchive::SharedCtor() {
super_ = nullptr;
}

ChartDrawableArchive::~ChartDrawableArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartDrawableArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChartDrawableArchive::ArenaDtor(void* object) {
  ChartDrawableArchive* _this = reinterpret_cast< ChartDrawableArchive* >(object);
  (void)_this;
}
void ChartDrawableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartDrawableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartDrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartDrawableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartDrawableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartDrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // Extension range [10000, 536870912)
  target = _extensions_._InternalSerialize(
      10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartDrawableArchive)
  return target;
}

size_t ChartDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartDrawableArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.DrawableArchive super = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartDrawableArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartDrawableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartDrawableArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartDrawableArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartDrawableArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartDrawableArchive)
    MergeFrom(*source);
  }
}

void ChartDrawableArchive::MergeFrom(const ChartDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartDrawableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
  }
}

void ChartDrawableArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartDrawableArchive::CopyFrom(const ChartDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartDrawableArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartDrawableArchive::InternalSwap(ChartDrawableArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartDrawableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[0]);
}

// ===================================================================

class ChartArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartArchive>()._has_bits_);
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::RectArchive& legend_frame(const ChartArchive* msg);
  static void set_has_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const ChartArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_contains_default_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::ChartGridArchive& grid(const ChartArchive* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& mediator(const ChartArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& chart_style(const ChartArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& chart_non_style(const ChartArchive* msg);
  static void set_has_chart_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& legend_style(const ChartArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& legend_non_style(const ChartArchive* msg);
  static void set_has_legend_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const ChartArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::SparseReferenceArray& series_non_styles(const ChartArchive* msg);
  static void set_has_series_non_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_multidataset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_needs_calc_engine_deferred_import_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& owned_preset(const ChartArchive* msg);
  static void set_has_owned_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::TSCH::RectArchive&
ChartArchive::_Internal::legend_frame(const ChartArchive* msg) {
  return *msg->legend_frame_;
}
const ::TSP::Reference&
ChartArchive::_Internal::preset(const ChartArchive* msg) {
  return *msg->preset_;
}
const ::TSCH::ChartGridArchive&
ChartArchive::_Internal::grid(const ChartArchive* msg) {
  return *msg->grid_;
}
const ::TSP::Reference&
ChartArchive::_Internal::mediator(const ChartArchive* msg) {
  return *msg->mediator_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_style(const ChartArchive* msg) {
  return *msg->chart_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_non_style(const ChartArchive* msg) {
  return *msg->chart_non_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_style(const ChartArchive* msg) {
  return *msg->legend_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_non_style(const ChartArchive* msg) {
  return *msg->legend_non_style_;
}
const ::TSP::SparseReferenceArray&
ChartArchive::_Internal::series_private_styles(const ChartArchive* msg) {
  return *msg->series_private_styles_;
}
const ::TSP::SparseReferenceArray&
ChartArchive::_Internal::series_non_styles(const ChartArchive* msg) {
  return *msg->series_non_styles_;
}
const ::TSP::Reference&
ChartArchive::_Internal::owned_preset(const ChartArchive* msg) {
  return *msg->owned_preset_;
}
void ChartArchive::clear_legend_frame() {
  if (legend_frame_ != nullptr) legend_frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartArchive::clear_preset() {
  if (preset_ != nullptr) preset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartArchive::clear_mediator() {
  if (mediator_ != nullptr) mediator_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartArchive::clear_chart_style() {
  if (chart_style_ != nullptr) chart_style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartArchive::clear_chart_non_style() {
  if (chart_non_style_ != nullptr) chart_non_style_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartArchive::clear_legend_style() {
  if (legend_style_ != nullptr) legend_style_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartArchive::clear_legend_non_style() {
  if (legend_non_style_ != nullptr) legend_non_style_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartArchive::clear_value_axis_styles() {
  value_axis_styles_.Clear();
}
void ChartArchive::clear_value_axis_nonstyles() {
  value_axis_nonstyles_.Clear();
}
void ChartArchive::clear_category_axis_styles() {
  category_axis_styles_.Clear();
}
void ChartArchive::clear_category_axis_nonstyles() {
  category_axis_nonstyles_.Clear();
}
void ChartArchive::clear_series_theme_styles() {
  series_theme_styles_.Clear();
}
void ChartArchive::clear_series_private_styles() {
  if (series_private_styles_ != nullptr) series_private_styles_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartArchive::clear_series_non_styles() {
  if (series_non_styles_ != nullptr) series_non_styles_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartArchive::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
void ChartArchive::clear_owned_preset() {
  if (owned_preset_ != nullptr) owned_preset_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
ChartArchive::ChartArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  value_axis_styles_(arena),
  value_axis_nonstyles_(arena),
  category_axis_styles_(arena),
  category_axis_nonstyles_(arena),
  series_theme_styles_(arena),
  paragraph_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartArchive)
}
ChartArchive::ChartArchive(const ChartArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_axis_styles_(from.value_axis_styles_),
      value_axis_nonstyles_(from.value_axis_nonstyles_),
      category_axis_styles_(from.category_axis_styles_),
      category_axis_nonstyles_(from.category_axis_nonstyles_),
      series_theme_styles_(from.series_theme_styles_),
      paragraph_styles_(from.paragraph_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_legend_frame()) {
    legend_frame_ = new ::TSCH::RectArchive(*from.legend_frame_);
  } else {
    legend_frame_ = nullptr;
  }
  if (from._internal_has_preset()) {
    preset_ = new ::TSP::Reference(*from.preset_);
  } else {
    preset_ = nullptr;
  }
  if (from._internal_has_grid()) {
    grid_ = new ::TSCH::ChartGridArchive(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  if (from._internal_has_mediator()) {
    mediator_ = new ::TSP::Reference(*from.mediator_);
  } else {
    mediator_ = nullptr;
  }
  if (from._internal_has_chart_style()) {
    chart_style_ = new ::TSP::Reference(*from.chart_style_);
  } else {
    chart_style_ = nullptr;
  }
  if (from._internal_has_chart_non_style()) {
    chart_non_style_ = new ::TSP::Reference(*from.chart_non_style_);
  } else {
    chart_non_style_ = nullptr;
  }
  if (from._internal_has_legend_style()) {
    legend_style_ = new ::TSP::Reference(*from.legend_style_);
  } else {
    legend_style_ = nullptr;
  }
  if (from._internal_has_legend_non_style()) {
    legend_non_style_ = new ::TSP::Reference(*from.legend_non_style_);
  } else {
    legend_non_style_ = nullptr;
  }
  if (from._internal_has_series_private_styles()) {
    series_private_styles_ = new ::TSP::SparseReferenceArray(*from.series_private_styles_);
  } else {
    series_private_styles_ = nullptr;
  }
  if (from._internal_has_series_non_styles()) {
    series_non_styles_ = new ::TSP::SparseReferenceArray(*from.series_non_styles_);
  } else {
    series_non_styles_ = nullptr;
  }
  if (from._internal_has_owned_preset()) {
    owned_preset_ = new ::TSP::Reference(*from.owned_preset_);
  } else {
    owned_preset_ = nullptr;
  }
  ::memcpy(&chart_type_, &from.chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&multidataset_index_) -
    reinterpret_cast<char*>(&chart_type_)) + sizeof(multidataset_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartArchive)
}

void ChartArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legend_frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multidataset_index_) -
    reinterpret_cast<char*>(&legend_frame_)) + sizeof(multidataset_index_));
}

ChartArchive::~ChartArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete legend_frame_;
  if (this != internal_default_instance()) delete preset_;
  if (this != internal_default_instance()) delete grid_;
  if (this != internal_default_instance()) delete mediator_;
  if (this != internal_default_instance()) delete chart_style_;
  if (this != internal_default_instance()) delete chart_non_style_;
  if (this != internal_default_instance()) delete legend_style_;
  if (this != internal_default_instance()) delete legend_non_style_;
  if (this != internal_default_instance()) delete series_private_styles_;
  if (this != internal_default_instance()) delete series_non_styles_;
  if (this != internal_default_instance()) delete owned_preset_;
}

void ChartArchive::ArenaDtor(void* object) {
  ChartArchive* _this = reinterpret_cast< ChartArchive* >(object);
  (void)_this;
}
void ChartArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  value_axis_styles_.Clear();
  value_axis_nonstyles_.Clear();
  category_axis_styles_.Clear();
  category_axis_nonstyles_.Clear();
  series_theme_styles_.Clear();
  paragraph_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(legend_frame_ != nullptr);
      legend_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preset_ != nullptr);
      preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(grid_ != nullptr);
      grid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mediator_ != nullptr);
      mediator_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(chart_style_ != nullptr);
      chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(chart_non_style_ != nullptr);
      chart_non_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(legend_style_ != nullptr);
      legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(legend_non_style_ != nullptr);
      legend_non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(series_private_styles_ != nullptr);
      series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(series_non_styles_ != nullptr);
      series_non_styles_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(owned_preset_ != nullptr);
      owned_preset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_calc_engine_deferred_import_action_) -
        reinterpret_cast<char*>(&chart_type_)) + sizeof(needs_calc_engine_deferred_import_action_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&is_dirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multidataset_index_) -
        reinterpret_cast<char*>(&is_dirty_)) + sizeof(multidataset_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartType chart_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ScatterFormat scatter_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ScatterFormat_IsValid(val))) {
            _internal_set_scatter_format(static_cast<::TSCH::ScatterFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive legend_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.SeriesDirection series_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::SeriesDirection_IsValid(val))) {
            _internal_set_series_direction(static_cast<::TSCH::SeriesDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool contains_default_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contains_default_data(&has_bits);
          contains_default_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartGridArchive grid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference mediator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_non_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_non_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_nonstyles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_nonstyles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_category_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_theme_styles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_series_theme_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_non_styles = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_non_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 multidataset_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_multidataset_index(&has_bits);
          multidataset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_needs_calc_engine_deferred_import_action(&has_bits);
          needs_calc_engine_deferred_import_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference owned_preset = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_owned_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dirty = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_dirty(&has_bits);
          is_dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartType chart_type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chart_type(), target);
  }

  // optional .TSCH.ScatterFormat scatter_format = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scatter_format(), target);
  }

  // optional .TSCH.RectArchive legend_frame = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::legend_frame(this), target, stream);
  }

  // optional .TSP.Reference preset = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::preset(this), target, stream);
  }

  // optional .TSCH.SeriesDirection series_direction = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_series_direction(), target);
  }

  // optional bool contains_default_data = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_default_data(), target);
  }

  // optional .TSCH.ChartGridArchive grid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::grid(this), target, stream);
  }

  // optional .TSP.Reference mediator = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mediator(this), target, stream);
  }

  // optional .TSP.Reference chart_style = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::chart_style(this), target, stream);
  }

  // optional .TSP.Reference chart_non_style = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::chart_non_style(this), target, stream);
  }

  // optional .TSP.Reference legend_style = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::legend_style(this), target, stream);
  }

  // optional .TSP.Reference legend_non_style = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::legend_non_style(this), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_value_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_axis_nonstyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_value_axis_nonstyles(i), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_category_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_axis_nonstyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_category_axis_nonstyles(i), target, stream);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_theme_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_series_theme_styles(i), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::series_private_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_non_styles = 19;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::series_non_styles(this), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_paragraph_styles(i), target, stream);
  }

  // optional uint32 multidataset_index = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_multidataset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_needs_calc_engine_deferred_import_action(), target);
  }

  // optional .TSP.Reference owned_preset = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::owned_preset(this), target, stream);
  }

  // optional bool is_dirty = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_dirty(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_._InternalSerialize(
      10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartArchive)
  return target;
}

size_t ChartArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 13;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  total_size += 1UL * this->_internal_value_axis_nonstyles_size();
  for (const auto& msg : this->value_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  total_size += 2UL * this->_internal_category_axis_nonstyles_size();
  for (const auto& msg : this->category_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  total_size += 2UL * this->_internal_series_theme_styles_size();
  for (const auto& msg : this->series_theme_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  total_size += 2UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.RectArchive legend_frame = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_frame_);
    }

    // optional .TSP.Reference preset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preset_);
    }

    // optional .TSCH.ChartGridArchive grid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grid_);
    }

    // optional .TSP.Reference mediator = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mediator_);
    }

    // optional .TSP.Reference chart_style = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_);
    }

    // optional .TSP.Reference chart_non_style = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_non_style_);
    }

    // optional .TSP.Reference legend_style = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_style_);
    }

    // optional .TSP.Reference legend_non_style = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_non_style_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.SparseReferenceArray series_private_styles = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_non_styles = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_non_styles_);
    }

    // optional .TSP.Reference owned_preset = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owned_preset_);
    }

    // optional .TSCH.ChartType chart_type = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());
    }

    // optional .TSCH.ScatterFormat scatter_format = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scatter_format());
    }

    // optional .TSCH.SeriesDirection series_direction = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_series_direction());
    }

    // optional bool contains_default_data = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool is_dirty = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 multidataset_index = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multidataset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartArchive)
    MergeFrom(*source);
  }
}

void ChartArchive::MergeFrom(const ChartArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  value_axis_nonstyles_.MergeFrom(from.value_axis_nonstyles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  category_axis_nonstyles_.MergeFrom(from.category_axis_nonstyles_);
  series_theme_styles_.MergeFrom(from.series_theme_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_legend_frame()->::TSCH::RectArchive::MergeFrom(from._internal_legend_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_preset()->::TSP::Reference::MergeFrom(from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_grid()->::TSCH::ChartGridArchive::MergeFrom(from._internal_grid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mediator()->::TSP::Reference::MergeFrom(from._internal_mediator());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_chart_style()->::TSP::Reference::MergeFrom(from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_chart_non_style()->::TSP::Reference::MergeFrom(from._internal_chart_non_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_legend_style()->::TSP::Reference::MergeFrom(from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_legend_non_style()->::TSP::Reference::MergeFrom(from._internal_legend_non_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_series_non_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_non_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_owned_preset()->::TSP::Reference::MergeFrom(from._internal_owned_preset());
    }
    if (cached_has_bits & 0x00000800u) {
      chart_type_ = from.chart_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      scatter_format_ = from.scatter_format_;
    }
    if (cached_has_bits & 0x00002000u) {
      series_direction_ = from.series_direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      contains_default_data_ = from.contains_default_data_;
    }
    if (cached_has_bits & 0x00008000u) {
      needs_calc_engine_deferred_import_action_ = from.needs_calc_engine_deferred_import_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      is_dirty_ = from.is_dirty_;
    }
    if (cached_has_bits & 0x00020000u) {
      multidataset_index_ = from.multidataset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartArchive::CopyFrom(const ChartArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_axis_nonstyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_axis_nonstyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(series_theme_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_styles_)) return false;
  if (_internal_has_legend_frame()) {
    if (!legend_frame_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!preset_->IsInitialized()) return false;
  }
  if (_internal_has_grid()) {
    if (!grid_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!mediator_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style()) {
    if (!chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_non_style()) {
    if (!chart_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_non_style()) {
    if (!legend_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_non_styles()) {
    if (!series_non_styles_->IsInitialized()) return false;
  }
  if (_internal_has_owned_preset()) {
    if (!owned_preset_->IsInitialized()) return false;
  }
  return true;
}

void ChartArchive::InternalSwap(ChartArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_axis_styles_.InternalSwap(&other->value_axis_styles_);
  value_axis_nonstyles_.InternalSwap(&other->value_axis_nonstyles_);
  category_axis_styles_.InternalSwap(&other->category_axis_styles_);
  category_axis_nonstyles_.InternalSwap(&other->category_axis_nonstyles_);
  series_theme_styles_.InternalSwap(&other->series_theme_styles_);
  paragraph_styles_.InternalSwap(&other->paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartArchive, multidataset_index_)
      + sizeof(ChartArchive::multidataset_index_)
      - PROTOBUF_FIELD_OFFSET(ChartArchive, legend_frame_)>(
          reinterpret_cast<char*>(&legend_frame_),
          reinterpret_cast<char*>(&other->legend_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[1]);
}

// ===================================================================

class ChartMultiDataIndexUpgrade::_Internal {
 public:
};

ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartMultiDataIndexUpgrade)
}
ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(const ChartMultiDataIndexUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartMultiDataIndexUpgrade)
}

void ChartMultiDataIndexUpgrade::SharedCtor() {
}

ChartMultiDataIndexUpgrade::~ChartMultiDataIndexUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartMultiDataIndexUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartMultiDataIndexUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartMultiDataIndexUpgrade::ArenaDtor(void* object) {
  ChartMultiDataIndexUpgrade* _this = reinterpret_cast< ChartMultiDataIndexUpgrade* >(object);
  (void)_this;
}
void ChartMultiDataIndexUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartMultiDataIndexUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartMultiDataIndexUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartMultiDataIndexUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMultiDataIndexUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartMultiDataIndexUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartMultiDataIndexUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartMultiDataIndexUpgrade)
  return target;
}

size_t ChartMultiDataIndexUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartMultiDataIndexUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartMultiDataIndexUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartMultiDataIndexUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartMultiDataIndexUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartMultiDataIndexUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartMultiDataIndexUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartMultiDataIndexUpgrade)
    MergeFrom(*source);
  }
}

void ChartMultiDataIndexUpgrade::MergeFrom(const ChartMultiDataIndexUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartMultiDataIndexUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartMultiDataIndexUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartMultiDataIndexUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMultiDataIndexUpgrade::CopyFrom(const ChartMultiDataIndexUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartMultiDataIndexUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMultiDataIndexUpgrade::IsInitialized() const {
  return true;
}

void ChartMultiDataIndexUpgrade::InternalSwap(ChartMultiDataIndexUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMultiDataIndexUpgrade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[2]);
}

// ===================================================================

class ChartGarlicMinMaxUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGarlicMinMaxUpgrade>()._has_bits_);
  static void set_has_horizontal_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horizontal_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGarlicMinMaxUpgrade)
}
ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(const ChartGarlicMinMaxUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizontal_min_, &from.horizontal_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_max_) -
    reinterpret_cast<char*>(&horizontal_min_)) + sizeof(value_max_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGarlicMinMaxUpgrade)
}

void ChartGarlicMinMaxUpgrade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_max_) -
    reinterpret_cast<char*>(&horizontal_min_)) + sizeof(value_max_));
}

ChartGarlicMinMaxUpgrade::~ChartGarlicMinMaxUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGarlicMinMaxUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGarlicMinMaxUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartGarlicMinMaxUpgrade::ArenaDtor(void* object) {
  ChartGarlicMinMaxUpgrade* _this = reinterpret_cast< ChartGarlicMinMaxUpgrade* >(object);
  (void)_this;
}
void ChartGarlicMinMaxUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGarlicMinMaxUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGarlicMinMaxUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGarlicMinMaxUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&horizontal_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_max_) -
        reinterpret_cast<char*>(&horizontal_min_)) + sizeof(value_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGarlicMinMaxUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double horizontal_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_horizontal_min(&has_bits);
          horizontal_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double horizontal_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_horizontal_max(&has_bits);
          horizontal_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value_min(&has_bits);
          value_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_value_max(&has_bits);
          value_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGarlicMinMaxUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGarlicMinMaxUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double horizontal_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal_min(), target);
  }

  // optional double horizontal_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_horizontal_max(), target);
  }

  // optional double value_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value_min(), target);
  }

  // optional double value_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_value_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGarlicMinMaxUpgrade)
  return target;
}

size_t ChartGarlicMinMaxUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGarlicMinMaxUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double horizontal_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double horizontal_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double value_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double value_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGarlicMinMaxUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGarlicMinMaxUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGarlicMinMaxUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartGarlicMinMaxUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartGarlicMinMaxUpgrade)
    MergeFrom(*source);
  }
}

void ChartGarlicMinMaxUpgrade::MergeFrom(const ChartGarlicMinMaxUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      horizontal_min_ = from.horizontal_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      horizontal_max_ = from.horizontal_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_min_ = from.value_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_max_ = from.value_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartGarlicMinMaxUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGarlicMinMaxUpgrade::CopyFrom(const ChartGarlicMinMaxUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGarlicMinMaxUpgrade::IsInitialized() const {
  return true;
}

void ChartGarlicMinMaxUpgrade::InternalSwap(ChartGarlicMinMaxUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGarlicMinMaxUpgrade, value_max_)
      + sizeof(ChartGarlicMinMaxUpgrade::value_max_)
      - PROTOBUF_FIELD_OFFSET(ChartGarlicMinMaxUpgrade, horizontal_min_)>(
          reinterpret_cast<char*>(&horizontal_min_),
          reinterpret_cast<char*>(&other->horizontal_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGarlicMinMaxUpgrade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[3]);
}

// ===================================================================

class ChartGarlicLabelFormatUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGarlicLabelFormatUpgrade>()._has_bits_);
  static void set_has_value_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_use_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_horizontal_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_horizontal_use_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGarlicLabelFormatUpgrade)
}
ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(const ChartGarlicLabelFormatUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_prefix()) {
    value_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_prefix(), 
      GetArena());
  }
  value_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_suffix()) {
    value_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_suffix(), 
      GetArena());
  }
  horizontal_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_horizontal_prefix()) {
    horizontal_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_horizontal_prefix(), 
      GetArena());
  }
  horizontal_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_horizontal_suffix()) {
    horizontal_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_horizontal_suffix(), 
      GetArena());
  }
  ::memcpy(&value_use_separator_, &from.value_use_separator_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_use_separator_) -
    reinterpret_cast<char*>(&value_use_separator_)) + sizeof(horizontal_use_separator_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGarlicLabelFormatUpgrade)
}

void ChartGarlicLabelFormatUpgrade::SharedCtor() {
value_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
horizontal_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
horizontal_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_use_separator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&horizontal_use_separator_) -
    reinterpret_cast<char*>(&value_use_separator_)) + sizeof(horizontal_use_separator_));
}

ChartGarlicLabelFormatUpgrade::~ChartGarlicLabelFormatUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGarlicLabelFormatUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGarlicLabelFormatUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  horizontal_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  horizontal_suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChartGarlicLabelFormatUpgrade::ArenaDtor(void* object) {
  ChartGarlicLabelFormatUpgrade* _this = reinterpret_cast< ChartGarlicLabelFormatUpgrade* >(object);
  (void)_this;
}
void ChartGarlicLabelFormatUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGarlicLabelFormatUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGarlicLabelFormatUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGarlicLabelFormatUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      value_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      horizontal_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_suffix_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&value_use_separator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_use_separator_) -
      reinterpret_cast<char*>(&value_use_separator_)) + sizeof(horizontal_use_separator_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGarlicLabelFormatUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.value_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value_suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.value_suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool value_use_separator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value_use_separator(&has_bits);
          value_use_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string horizontal_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_horizontal_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string horizontal_suffix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_horizontal_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool horizontal_use_separator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_horizontal_use_separator(&has_bits);
          horizontal_use_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGarlicLabelFormatUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGarlicLabelFormatUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_prefix().data(), static_cast<int>(this->_internal_value_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.value_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value_prefix(), target);
  }

  // optional string value_suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_suffix().data(), static_cast<int>(this->_internal_value_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.value_suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_suffix(), target);
  }

  // optional bool value_use_separator = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_value_use_separator(), target);
  }

  // optional string horizontal_prefix = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_horizontal_prefix().data(), static_cast<int>(this->_internal_horizontal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_horizontal_prefix(), target);
  }

  // optional string horizontal_suffix = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_horizontal_suffix().data(), static_cast<int>(this->_internal_horizontal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_horizontal_suffix(), target);
  }

  // optional bool horizontal_use_separator = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal_use_separator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGarlicLabelFormatUpgrade)
  return target;
}

size_t ChartGarlicLabelFormatUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGarlicLabelFormatUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string value_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_prefix());
    }

    // optional string value_suffix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_suffix());
    }

    // optional string horizontal_prefix = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_horizontal_prefix());
    }

    // optional string horizontal_suffix = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_horizontal_suffix());
    }

    // optional bool value_use_separator = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool horizontal_use_separator = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGarlicLabelFormatUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGarlicLabelFormatUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGarlicLabelFormatUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartGarlicLabelFormatUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartGarlicLabelFormatUpgrade)
    MergeFrom(*source);
  }
}

void ChartGarlicLabelFormatUpgrade::MergeFrom(const ChartGarlicLabelFormatUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_prefix(from._internal_value_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value_suffix(from._internal_value_suffix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_horizontal_prefix(from._internal_horizontal_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_horizontal_suffix(from._internal_horizontal_suffix());
    }
    if (cached_has_bits & 0x00000010u) {
      value_use_separator_ = from.value_use_separator_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_use_separator_ = from.horizontal_use_separator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartGarlicLabelFormatUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGarlicLabelFormatUpgrade::CopyFrom(const ChartGarlicLabelFormatUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGarlicLabelFormatUpgrade::IsInitialized() const {
  return true;
}

void ChartGarlicLabelFormatUpgrade::InternalSwap(ChartGarlicLabelFormatUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_prefix_.Swap(&other->value_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_suffix_.Swap(&other->value_suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  horizontal_prefix_.Swap(&other->horizontal_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  horizontal_suffix_.Swap(&other->horizontal_suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGarlicLabelFormatUpgrade, horizontal_use_separator_)
      + sizeof(ChartGarlicLabelFormatUpgrade::horizontal_use_separator_)
      - PROTOBUF_FIELD_OFFSET(ChartGarlicLabelFormatUpgrade, value_use_separator_)>(
          reinterpret_cast<char*>(&value_use_separator_),
          reinterpret_cast<char*>(&other->value_use_separator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGarlicLabelFormatUpgrade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[4]);
}

// ===================================================================

class ChartPasteboardAdditionsArchive::_Internal {
 public:
};

ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPasteboardAdditionsArchive)
}
ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPasteboardAdditionsArchive)
}

void ChartPasteboardAdditionsArchive::SharedCtor() {
}

ChartPasteboardAdditionsArchive::~ChartPasteboardAdditionsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPasteboardAdditionsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartPasteboardAdditionsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartPasteboardAdditionsArchive::ArenaDtor(void* object) {
  ChartPasteboardAdditionsArchive* _this = reinterpret_cast< ChartPasteboardAdditionsArchive* >(object);
  (void)_this;
}
void ChartPasteboardAdditionsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartPasteboardAdditionsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartPasteboardAdditionsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPasteboardAdditionsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPasteboardAdditionsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartPasteboardAdditionsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPasteboardAdditionsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPasteboardAdditionsArchive)
  return target;
}

size_t ChartPasteboardAdditionsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPasteboardAdditionsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartPasteboardAdditionsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartPasteboardAdditionsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartPasteboardAdditionsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartPasteboardAdditionsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartPasteboardAdditionsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartPasteboardAdditionsArchive)
    MergeFrom(*source);
  }
}

void ChartPasteboardAdditionsArchive::MergeFrom(const ChartPasteboardAdditionsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPasteboardAdditionsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartPasteboardAdditionsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartPasteboardAdditionsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPasteboardAdditionsArchive::CopyFrom(const ChartPasteboardAdditionsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPasteboardAdditionsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPasteboardAdditionsArchive::IsInitialized() const {
  return true;
}

void ChartPasteboardAdditionsArchive::InternalSwap(ChartPasteboardAdditionsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPasteboardAdditionsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[5]);
}

// ===================================================================

class ChartPreserveAppearanceForPresetArchive::_Internal {
 public:
};

ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPreserveAppearanceForPresetArchive)
}
ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(const ChartPreserveAppearanceForPresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPreserveAppearanceForPresetArchive)
}

void ChartPreserveAppearanceForPresetArchive::SharedCtor() {
}

ChartPreserveAppearanceForPresetArchive::~ChartPreserveAppearanceForPresetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPreserveAppearanceForPresetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartPreserveAppearanceForPresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartPreserveAppearanceForPresetArchive::ArenaDtor(void* object) {
  ChartPreserveAppearanceForPresetArchive* _this = reinterpret_cast< ChartPreserveAppearanceForPresetArchive* >(object);
  (void)_this;
}
void ChartPreserveAppearanceForPresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartPreserveAppearanceForPresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartPreserveAppearanceForPresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPreserveAppearanceForPresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartPreserveAppearanceForPresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPreserveAppearanceForPresetArchive)
  return target;
}

size_t ChartPreserveAppearanceForPresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartPreserveAppearanceForPresetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartPreserveAppearanceForPresetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartPreserveAppearanceForPresetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartPreserveAppearanceForPresetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartPreserveAppearanceForPresetArchive)
    MergeFrom(*source);
  }
}

void ChartPreserveAppearanceForPresetArchive::MergeFrom(const ChartPreserveAppearanceForPresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartPreserveAppearanceForPresetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPreserveAppearanceForPresetArchive::CopyFrom(const ChartPreserveAppearanceForPresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPreserveAppearanceForPresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPreserveAppearanceForPresetArchive::IsInitialized() const {
  return true;
}

void ChartPreserveAppearanceForPresetArchive::InternalSwap(ChartPreserveAppearanceForPresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPreserveAppearanceForPresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[6]);
}

// ===================================================================

class ChartSupportsProportionalBendedCalloutLinesArchive::_Internal {
 public:
};

ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
}
ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(const ChartSupportsProportionalBendedCalloutLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
}

void ChartSupportsProportionalBendedCalloutLinesArchive::SharedCtor() {
}

ChartSupportsProportionalBendedCalloutLinesArchive::~ChartSupportsProportionalBendedCalloutLinesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSupportsProportionalBendedCalloutLinesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartSupportsProportionalBendedCalloutLinesArchive::ArenaDtor(void* object) {
  ChartSupportsProportionalBendedCalloutLinesArchive* _this = reinterpret_cast< ChartSupportsProportionalBendedCalloutLinesArchive* >(object);
  (void)_this;
}
void ChartSupportsProportionalBendedCalloutLinesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSupportsProportionalBendedCalloutLinesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSupportsProportionalBendedCalloutLinesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSupportsProportionalBendedCalloutLinesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSupportsProportionalBendedCalloutLinesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  return target;
}

size_t ChartSupportsProportionalBendedCalloutLinesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSupportsProportionalBendedCalloutLinesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSupportsProportionalBendedCalloutLinesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSupportsProportionalBendedCalloutLinesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
    MergeFrom(*source);
  }
}

void ChartSupportsProportionalBendedCalloutLinesArchive::MergeFrom(const ChartSupportsProportionalBendedCalloutLinesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartSupportsProportionalBendedCalloutLinesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSupportsProportionalBendedCalloutLinesArchive::CopyFrom(const ChartSupportsProportionalBendedCalloutLinesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSupportsProportionalBendedCalloutLinesArchive::IsInitialized() const {
  return true;
}

void ChartSupportsProportionalBendedCalloutLinesArchive::InternalSwap(ChartSupportsProportionalBendedCalloutLinesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsProportionalBendedCalloutLinesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[7]);
}

// ===================================================================

class ChartSupportsRoundedCornersArchive::_Internal {
 public:
};

ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsRoundedCornersArchive)
}
ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(const ChartSupportsRoundedCornersArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsRoundedCornersArchive)
}

void ChartSupportsRoundedCornersArchive::SharedCtor() {
}

ChartSupportsRoundedCornersArchive::~ChartSupportsRoundedCornersArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSupportsRoundedCornersArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSupportsRoundedCornersArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartSupportsRoundedCornersArchive::ArenaDtor(void* object) {
  ChartSupportsRoundedCornersArchive* _this = reinterpret_cast< ChartSupportsRoundedCornersArchive* >(object);
  (void)_this;
}
void ChartSupportsRoundedCornersArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSupportsRoundedCornersArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSupportsRoundedCornersArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSupportsRoundedCornersArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSupportsRoundedCornersArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSupportsRoundedCornersArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSupportsRoundedCornersArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSupportsRoundedCornersArchive)
  return target;
}

size_t ChartSupportsRoundedCornersArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSupportsRoundedCornersArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSupportsRoundedCornersArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSupportsRoundedCornersArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSupportsRoundedCornersArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSupportsRoundedCornersArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSupportsRoundedCornersArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSupportsRoundedCornersArchive)
    MergeFrom(*source);
  }
}

void ChartSupportsRoundedCornersArchive::MergeFrom(const ChartSupportsRoundedCornersArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSupportsRoundedCornersArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartSupportsRoundedCornersArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSupportsRoundedCornersArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSupportsRoundedCornersArchive::CopyFrom(const ChartSupportsRoundedCornersArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSupportsRoundedCornersArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSupportsRoundedCornersArchive::IsInitialized() const {
  return true;
}

void ChartSupportsRoundedCornersArchive::InternalSwap(ChartSupportsRoundedCornersArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsRoundedCornersArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[8]);
}

// ===================================================================

class ChartSupportsSeriesPropertySpacingArchive::_Internal {
 public:
};

ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsSeriesPropertySpacingArchive)
}
ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(const ChartSupportsSeriesPropertySpacingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsSeriesPropertySpacingArchive)
}

void ChartSupportsSeriesPropertySpacingArchive::SharedCtor() {
}

ChartSupportsSeriesPropertySpacingArchive::~ChartSupportsSeriesPropertySpacingArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSupportsSeriesPropertySpacingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartSupportsSeriesPropertySpacingArchive::ArenaDtor(void* object) {
  ChartSupportsSeriesPropertySpacingArchive* _this = reinterpret_cast< ChartSupportsSeriesPropertySpacingArchive* >(object);
  (void)_this;
}
void ChartSupportsSeriesPropertySpacingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSupportsSeriesPropertySpacingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSupportsSeriesPropertySpacingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSupportsSeriesPropertySpacingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSupportsSeriesPropertySpacingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  return target;
}

size_t ChartSupportsSeriesPropertySpacingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSupportsSeriesPropertySpacingArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSupportsSeriesPropertySpacingArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSupportsSeriesPropertySpacingArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSupportsSeriesPropertySpacingArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSupportsSeriesPropertySpacingArchive)
    MergeFrom(*source);
  }
}

void ChartSupportsSeriesPropertySpacingArchive::MergeFrom(const ChartSupportsSeriesPropertySpacingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartSupportsSeriesPropertySpacingArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSupportsSeriesPropertySpacingArchive::CopyFrom(const ChartSupportsSeriesPropertySpacingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSupportsSeriesPropertySpacingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSupportsSeriesPropertySpacingArchive::IsInitialized() const {
  return true;
}

void ChartSupportsSeriesPropertySpacingArchive::InternalSwap(ChartSupportsSeriesPropertySpacingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsSeriesPropertySpacingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[9]);
}

// ===================================================================

class ChartGridArchive_ChartGridRowColumnIdMap_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive_ChartGridRowColumnIdMap_Entry>()._has_bits_);
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
}
ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uniqueid()) {
    uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uniqueid(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedCtor() {
uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0u;
}

ChartGridArchive_ChartGridRowColumnIdMap_Entry::~ChartGridArchive_ChartGridRowColumnIdMap_Entry() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uniqueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::ArenaDtor(void* object) {
  ChartGridArchive_ChartGridRowColumnIdMap_Entry* _this = reinterpret_cast< ChartGridArchive_ChartGridRowColumnIdMap_Entry* >(object);
  (void)_this;
}
void ChartGridArchive_ChartGridRowColumnIdMap_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uniqueid_.ClearNonDefaultToEmpty();
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ChartGridRowColumnIdMap_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string uniqueId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGridArchive_ChartGridRowColumnIdMap_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uniqueId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uniqueid(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  return target;
}

size_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  size_t total_size = 0;

  if (_internal_has_uniqueid()) {
    // required string uniqueId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uniqueId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());

    // required uint32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGridArchive_ChartGridRowColumnIdMap_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGridArchive_ChartGridRowColumnIdMap_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
    MergeFrom(*source);
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uniqueid(from._internal_uniqueid());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uniqueid_.Swap(&other->uniqueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ChartGridRowColumnIdMap_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[10]);
}

// ===================================================================

class ChartGridArchive_ChartGridRowColumnIdMap::_Internal {
 public:
};

ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_id_map_(arena),
  column_id_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
}
ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(const ChartGridArchive_ChartGridRowColumnIdMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_id_map_(from.row_id_map_),
      column_id_map_(from.column_id_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
}

void ChartGridArchive_ChartGridRowColumnIdMap::SharedCtor() {
}

ChartGridArchive_ChartGridRowColumnIdMap::~ChartGridArchive_ChartGridRowColumnIdMap() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGridArchive_ChartGridRowColumnIdMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartGridArchive_ChartGridRowColumnIdMap::ArenaDtor(void* object) {
  ChartGridArchive_ChartGridRowColumnIdMap* _this = reinterpret_cast< ChartGridArchive_ChartGridRowColumnIdMap* >(object);
  (void)_this;
}
void ChartGridArchive_ChartGridRowColumnIdMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGridArchive_ChartGridRowColumnIdMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGridArchive_ChartGridRowColumnIdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_id_map_.Clear();
  column_id_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ChartGridRowColumnIdMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_id_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_id_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGridArchive_ChartGridRowColumnIdMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_id_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_row_id_map(i), target, stream);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_id_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_column_id_map(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  return target;
}

size_t ChartGridArchive_ChartGridRowColumnIdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  total_size += 1UL * this->_internal_row_id_map_size();
  for (const auto& msg : this->row_id_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  total_size += 1UL * this->_internal_column_id_map_size();
  for (const auto& msg : this->column_id_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGridArchive_ChartGridRowColumnIdMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGridArchive_ChartGridRowColumnIdMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
    MergeFrom(*source);
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_id_map_.MergeFrom(from.row_id_map_);
  column_id_map_.MergeFrom(from.column_id_map_);
}

void ChartGridArchive_ChartGridRowColumnIdMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_id_map_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_id_map_)) return false;
  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap::InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_id_map_.InternalSwap(&other->row_id_map_);
  column_id_map_.InternalSwap(&other->column_id_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ChartGridRowColumnIdMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[11]);
}

// ===================================================================

class ChartGridArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive>()._has_bits_);
  static const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& idmap(const ChartGridArchive* msg);
  static void set_has_idmap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap&
ChartGridArchive::_Internal::idmap(const ChartGridArchive* msg) {
  return *msg->idmap_;
}
void ChartGridArchive::clear_grid_row() {
  grid_row_.Clear();
}
ChartGridArchive::ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_name_(arena),
  column_name_(arena),
  grid_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive)
}
ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_name_(from.row_name_),
      column_name_(from.column_name_),
      grid_row_(from.grid_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_idmap()) {
    idmap_ = new ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap(*from.idmap_);
  } else {
    idmap_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive)
}

void ChartGridArchive::SharedCtor() {
idmap_ = nullptr;
}

ChartGridArchive::~ChartGridArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGridArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete idmap_;
}

void ChartGridArchive::ArenaDtor(void* object) {
  ChartGridArchive* _this = reinterpret_cast< ChartGridArchive* >(object);
  (void)_this;
}
void ChartGridArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGridArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGridArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_name_.Clear();
  column_name_.Clear();
  grid_row_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(idmap_ != nullptr);
    idmap_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string row_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGridArchive.row_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartGridArchive.column_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow grid_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grid_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_idmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGridArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string row_name = 1;
  for (int i = 0, n = this->_internal_row_name_size(); i < n; i++) {
    const auto& s = this->_internal_row_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.row_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.column_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated .TSCH.GridRow grid_row = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grid_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_grid_row(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::idmap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive)
  return target;
}

size_t ChartGridArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string row_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(row_name_.size());
  for (int i = 0, n = row_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      row_name_.Get(i));
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  // repeated .TSCH.GridRow grid_row = 3;
  total_size += 1UL * this->_internal_grid_row_size();
  for (const auto& msg : this->grid_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *idmap_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGridArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGridArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGridArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartGridArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartGridArchive)
    MergeFrom(*source);
  }
}

void ChartGridArchive::MergeFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_name_.MergeFrom(from.row_name_);
  column_name_.MergeFrom(from.column_name_);
  grid_row_.MergeFrom(from.grid_row_);
  if (from._internal_has_idmap()) {
    _internal_mutable_idmap()->::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(from._internal_idmap());
  }
}

void ChartGridArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  if (_internal_has_idmap()) {
    if (!idmap_->IsInitialized()) return false;
  }
  return true;
}

void ChartGridArchive::InternalSwap(ChartGridArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_name_.InternalSwap(&other->row_name_);
  column_name_.InternalSwap(&other->column_name_);
  grid_row_.InternalSwap(&other->grid_row_);
  swap(idmap_, other->idmap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[12]);
}

// ===================================================================

class ChartMediatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorArchive>()._has_bits_);
  static const ::TSP::Reference& info(const ChartMediatorArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartMediatorArchive::_Internal::info(const ChartMediatorArchive* msg) {
  return *msg->info_;
}
void ChartMediatorArchive::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartMediatorArchive::ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  local_series_indexes_(arena),
  remote_series_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartMediatorArchive)
}
ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      local_series_indexes_(from.local_series_indexes_),
      remote_series_indexes_(from.remote_series_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartMediatorArchive)
}

void ChartMediatorArchive::SharedCtor() {
info_ = nullptr;
}

ChartMediatorArchive::~ChartMediatorArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartMediatorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartMediatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void ChartMediatorArchive::ArenaDtor(void* object) {
  ChartMediatorArchive* _this = reinterpret_cast< ChartMediatorArchive* >(object);
  (void)_this;
}
void ChartMediatorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartMediatorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartMediatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartMediatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_series_indexes_.Clear();
  remote_series_indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 local_series_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_local_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_local_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 remote_series_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remote_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_remote_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartMediatorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartMediatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // repeated uint32 local_series_indexes = 2;
  for (int i = 0, n = this->_internal_local_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_series_indexes(i), target);
  }

  // repeated uint32 remote_series_indexes = 3;
  for (int i = 0, n = this->_internal_remote_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remote_series_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartMediatorArchive)
  return target;
}

size_t ChartMediatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartMediatorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 local_series_indexes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->local_series_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_local_series_indexes_size());
    total_size += data_size;
  }

  // repeated uint32 remote_series_indexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->remote_series_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remote_series_indexes_size());
    total_size += data_size;
  }

  // optional .TSP.Reference info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartMediatorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartMediatorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartMediatorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartMediatorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartMediatorArchive)
    MergeFrom(*source);
  }
}

void ChartMediatorArchive::MergeFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  local_series_indexes_.MergeFrom(from.local_series_indexes_);
  remote_series_indexes_.MergeFrom(from.remote_series_indexes_);
  if (from._internal_has_info()) {
    _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
  }
}

void ChartMediatorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::InternalSwap(ChartMediatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  local_series_indexes_.InternalSwap(&other->local_series_indexes_);
  remote_series_indexes_.InternalSwap(&other->remote_series_indexes_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[13]);
}

// ===================================================================

class ChartFillSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartFillSetArchive>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lookup_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_theme_series_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void ChartFillSetArchive::clear_series_styles() {
  series_styles_.Clear();
}
ChartFillSetArchive::ChartFillSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartFillSetArchive)
}
ChartFillSetArchive::ChartFillSetArchive(const ChartFillSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      series_styles_(from.series_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  lookup_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lookup_string()) {
    lookup_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lookup_string(), 
      GetArena());
  }
  number_of_theme_series_styles_ = from.number_of_theme_series_styles_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartFillSetArchive)
}

void ChartFillSetArchive::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lookup_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_of_theme_series_styles_ = 0u;
}

ChartFillSetArchive::~ChartFillSetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartFillSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartFillSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lookup_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChartFillSetArchive::ArenaDtor(void* object) {
  ChartFillSetArchive* _this = reinterpret_cast< ChartFillSetArchive* >(object);
  (void)_this;
}
void ChartFillSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartFillSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartFillSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartFillSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lookup_string_.ClearNonDefaultToEmpty();
    }
  }
  number_of_theme_series_styles_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartFillSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartFillSetArchive.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string lookup_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lookup_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartFillSetArchive.lookup_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_theme_series_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_theme_series_styles(&has_bits);
          number_of_theme_series_styles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartFillSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartFillSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartFillSetArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required string lookup_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lookup_string().data(), static_cast<int>(this->_internal_lookup_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartFillSetArchive.lookup_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lookup_string(), target);
  }

  // optional uint32 number_of_theme_series_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_theme_series_styles(), target);
  }

  // repeated .TSP.Reference series_styles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_series_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartFillSetArchive)
  return target;
}

size_t ChartFillSetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartFillSetArchive)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_lookup_string()) {
    // required string lookup_string = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lookup_string());
  }

  return total_size;
}
size_t ChartFillSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartFillSetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required string lookup_string = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lookup_string());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference series_styles = 4;
  total_size += 1UL * this->_internal_series_styles_size();
  for (const auto& msg : this->series_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 number_of_theme_series_styles = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_theme_series_styles());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartFillSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartFillSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartFillSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartFillSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartFillSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartFillSetArchive)
    MergeFrom(*source);
  }
}

void ChartFillSetArchive::MergeFrom(const ChartFillSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartFillSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_styles_.MergeFrom(from.series_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lookup_string(from._internal_lookup_string());
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_theme_series_styles_ = from.number_of_theme_series_styles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartFillSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartFillSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartFillSetArchive::CopyFrom(const ChartFillSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartFillSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartFillSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(series_styles_)) return false;
  return true;
}

void ChartFillSetArchive::InternalSwap(ChartFillSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  series_styles_.InternalSwap(&other->series_styles_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lookup_string_.Swap(&other->lookup_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(number_of_theme_series_styles_, other->number_of_theme_series_styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartFillSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[14]);
}

// ===================================================================

class ChartStylePreset::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStylePreset>()._has_bits_);
  static const ::TSP::Reference& chart_style(const ChartStylePreset* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const ChartStylePreset* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartStylePreset::_Internal::chart_style(const ChartStylePreset* msg) {
  return *msg->chart_style_;
}
const ::TSP::Reference&
ChartStylePreset::_Internal::legend_style(const ChartStylePreset* msg) {
  return *msg->legend_style_;
}
void ChartStylePreset::clear_chart_style() {
  if (chart_style_ != nullptr) chart_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartStylePreset::clear_legend_style() {
  if (legend_style_ != nullptr) legend_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartStylePreset::clear_value_axis_styles() {
  value_axis_styles_.Clear();
}
void ChartStylePreset::clear_category_axis_styles() {
  category_axis_styles_.Clear();
}
void ChartStylePreset::clear_series_styles() {
  series_styles_.Clear();
}
void ChartStylePreset::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
ChartStylePreset::ChartStylePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  value_axis_styles_(arena),
  category_axis_styles_(arena),
  series_styles_(arena),
  paragraph_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartStylePreset)
}
ChartStylePreset::ChartStylePreset(const ChartStylePreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_axis_styles_(from.value_axis_styles_),
      category_axis_styles_(from.category_axis_styles_),
      series_styles_(from.series_styles_),
      paragraph_styles_(from.paragraph_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  if (from._internal_has_chart_style()) {
    chart_style_ = new ::TSP::Reference(*from.chart_style_);
  } else {
    chart_style_ = nullptr;
  }
  if (from._internal_has_legend_style()) {
    legend_style_ = new ::TSP::Reference(*from.legend_style_);
  } else {
    legend_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartStylePreset)
}

void ChartStylePreset::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&legend_style_) -
    reinterpret_cast<char*>(&chart_style_)) + sizeof(legend_style_));
}

ChartStylePreset::~ChartStylePreset() {
  // @@protoc_insertion_point(destructor:TSCH.ChartStylePreset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartStylePreset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chart_style_;
  if (this != internal_default_instance()) delete legend_style_;
}

void ChartStylePreset::ArenaDtor(void* object) {
  ChartStylePreset* _this = reinterpret_cast< ChartStylePreset* >(object);
  (void)_this;
}
void ChartStylePreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartStylePreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartStylePreset::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartStylePreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  value_axis_styles_.Clear();
  category_axis_styles_.Clear();
  series_styles_.Clear();
  paragraph_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chart_style_ != nullptr);
      chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(legend_style_ != nullptr);
      legend_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStylePreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartStylePreset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartStylePreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart_style(this), target, stream);
  }

  // optional .TSP.Reference legend_style = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::legend_style(this), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_value_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_category_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference series_styles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_series_styles(i), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_paragraph_styles(i), target, stream);
  }

  // optional bytes uuid = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_uuid(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_._InternalSerialize(
      10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartStylePreset)
  return target;
}

size_t ChartStylePreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartStylePreset)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 3;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_styles = 5;
  total_size += 1UL * this->_internal_series_styles_size();
  for (const auto& msg : this->series_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes uuid = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_);
    }

    // optional .TSP.Reference legend_style = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartStylePreset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartStylePreset)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartStylePreset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartStylePreset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartStylePreset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartStylePreset)
    MergeFrom(*source);
  }
}

void ChartStylePreset::MergeFrom(const ChartStylePreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartStylePreset)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  series_styles_.MergeFrom(from.series_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chart_style()->::TSP::Reference::MergeFrom(from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_legend_style()->::TSP::Reference::MergeFrom(from._internal_legend_style());
    }
  }
}

void ChartStylePreset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartStylePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStylePreset::CopyFrom(const ChartStylePreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartStylePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStylePreset::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(series_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_styles_)) return false;
  if (_internal_has_chart_style()) {
    if (!chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!legend_style_->IsInitialized()) return false;
  }
  return true;
}

void ChartStylePreset::InternalSwap(ChartStylePreset* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_axis_styles_.InternalSwap(&other->value_axis_styles_);
  category_axis_styles_.InternalSwap(&other->category_axis_styles_);
  series_styles_.InternalSwap(&other->series_styles_);
  paragraph_styles_.InternalSwap(&other->paragraph_styles_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStylePreset, legend_style_)
      + sizeof(ChartStylePreset::legend_style_)
      - PROTOBUF_FIELD_OFFSET(ChartStylePreset, chart_style_)>(
          reinterpret_cast<char*>(&chart_style_),
          reinterpret_cast<char*>(&other->chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStylePreset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[15]);
}

// ===================================================================

class ChartPresetsArchive::_Internal {
 public:
};

void ChartPresetsArchive::clear_chart_presets() {
  chart_presets_.Clear();
}
ChartPresetsArchive::ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chart_presets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPresetsArchive)
}
ChartPresetsArchive::ChartPresetsArchive(const ChartPresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chart_presets_(from.chart_presets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPresetsArchive)
}

void ChartPresetsArchive::SharedCtor() {
}

ChartPresetsArchive::~ChartPresetsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPresetsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartPresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartPresetsArchive::ArenaDtor(void* object) {
  ChartPresetsArchive* _this = reinterpret_cast< ChartPresetsArchive* >(object);
  (void)_this;
}
void ChartPresetsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartPresetsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartPresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chart_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPresetsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference chart_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartPresetsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chart_presets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPresetsArchive)
  return target;
}

size_t ChartPresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPresetsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  total_size += 1UL * this->_internal_chart_presets_size();
  for (const auto& msg : this->chart_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartPresetsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartPresetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartPresetsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartPresetsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartPresetsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartPresetsArchive)
    MergeFrom(*source);
  }
}

void ChartPresetsArchive::MergeFrom(const ChartPresetsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPresetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chart_presets_.MergeFrom(from.chart_presets_);
}

void ChartPresetsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartPresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPresetsArchive::CopyFrom(const ChartPresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_presets_)) return false;
  return true;
}

void ChartPresetsArchive::InternalSwap(ChartPresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chart_presets_.InternalSwap(&other->chart_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPresetsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[16]);
}

// ===================================================================

class PropertyValueStorageContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyValueStorageContainerArchive>()._has_bits_);
  static const ::TSP::Reference& chart_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& chart_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& legend_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::SparseReferenceArray& value_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::SparseReferenceArray& value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::SparseReferenceArray& category_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::SparseReferenceArray& category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::SparseReferenceArray& series_theme_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_theme_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::SparseReferenceArray& series_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::SparseReferenceArray& paragraph_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_paragraph_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->chart_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->chart_nonstyle_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->legend_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->legend_nonstyle_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::value_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->value_axis_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->value_axis_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::category_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->category_axis_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->category_axis_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_theme_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->series_theme_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_private_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->series_private_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->series_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::paragraph_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->paragraph_styles_;
}
void PropertyValueStorageContainerArchive::clear_chart_style() {
  if (chart_style_ != nullptr) chart_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyValueStorageContainerArchive::clear_chart_nonstyle() {
  if (chart_nonstyle_ != nullptr) chart_nonstyle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyValueStorageContainerArchive::clear_legend_style() {
  if (legend_style_ != nullptr) legend_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyValueStorageContainerArchive::clear_legend_nonstyle() {
  if (legend_nonstyle_ != nullptr) legend_nonstyle_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_styles() {
  if (value_axis_styles_ != nullptr) value_axis_styles_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_nonstyles() {
  if (value_axis_nonstyles_ != nullptr) value_axis_nonstyles_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_styles() {
  if (category_axis_styles_ != nullptr) category_axis_styles_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_nonstyles() {
  if (category_axis_nonstyles_ != nullptr) category_axis_nonstyles_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void PropertyValueStorageContainerArchive::clear_series_theme_styles() {
  if (series_theme_styles_ != nullptr) series_theme_styles_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void PropertyValueStorageContainerArchive::clear_series_private_styles() {
  if (series_private_styles_ != nullptr) series_private_styles_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void PropertyValueStorageContainerArchive::clear_series_nonstyles() {
  if (series_nonstyles_ != nullptr) series_nonstyles_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void PropertyValueStorageContainerArchive::clear_paragraph_styles() {
  if (paragraph_styles_ != nullptr) paragraph_styles_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyValueStorageContainerArchive)
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_chart_style()) {
    chart_style_ = new ::TSP::Reference(*from.chart_style_);
  } else {
    chart_style_ = nullptr;
  }
  if (from._internal_has_chart_nonstyle()) {
    chart_nonstyle_ = new ::TSP::Reference(*from.chart_nonstyle_);
  } else {
    chart_nonstyle_ = nullptr;
  }
  if (from._internal_has_legend_style()) {
    legend_style_ = new ::TSP::Reference(*from.legend_style_);
  } else {
    legend_style_ = nullptr;
  }
  if (from._internal_has_legend_nonstyle()) {
    legend_nonstyle_ = new ::TSP::Reference(*from.legend_nonstyle_);
  } else {
    legend_nonstyle_ = nullptr;
  }
  if (from._internal_has_value_axis_styles()) {
    value_axis_styles_ = new ::TSP::SparseReferenceArray(*from.value_axis_styles_);
  } else {
    value_axis_styles_ = nullptr;
  }
  if (from._internal_has_value_axis_nonstyles()) {
    value_axis_nonstyles_ = new ::TSP::SparseReferenceArray(*from.value_axis_nonstyles_);
  } else {
    value_axis_nonstyles_ = nullptr;
  }
  if (from._internal_has_category_axis_styles()) {
    category_axis_styles_ = new ::TSP::SparseReferenceArray(*from.category_axis_styles_);
  } else {
    category_axis_styles_ = nullptr;
  }
  if (from._internal_has_category_axis_nonstyles()) {
    category_axis_nonstyles_ = new ::TSP::SparseReferenceArray(*from.category_axis_nonstyles_);
  } else {
    category_axis_nonstyles_ = nullptr;
  }
  if (from._internal_has_series_theme_styles()) {
    series_theme_styles_ = new ::TSP::SparseReferenceArray(*from.series_theme_styles_);
  } else {
    series_theme_styles_ = nullptr;
  }
  if (from._internal_has_series_private_styles()) {
    series_private_styles_ = new ::TSP::SparseReferenceArray(*from.series_private_styles_);
  } else {
    series_private_styles_ = nullptr;
  }
  if (from._internal_has_series_nonstyles()) {
    series_nonstyles_ = new ::TSP::SparseReferenceArray(*from.series_nonstyles_);
  } else {
    series_nonstyles_ = nullptr;
  }
  if (from._internal_has_paragraph_styles()) {
    paragraph_styles_ = new ::TSP::SparseReferenceArray(*from.paragraph_styles_);
  } else {
    paragraph_styles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyValueStorageContainerArchive)
}

void PropertyValueStorageContainerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paragraph_styles_) -
    reinterpret_cast<char*>(&chart_style_)) + sizeof(paragraph_styles_));
}

PropertyValueStorageContainerArchive::~PropertyValueStorageContainerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyValueStorageContainerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyValueStorageContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_style_;
  if (this != internal_default_instance()) delete chart_nonstyle_;
  if (this != internal_default_instance()) delete legend_style_;
  if (this != internal_default_instance()) delete legend_nonstyle_;
  if (this != internal_default_instance()) delete value_axis_styles_;
  if (this != internal_default_instance()) delete value_axis_nonstyles_;
  if (this != internal_default_instance()) delete category_axis_styles_;
  if (this != internal_default_instance()) delete category_axis_nonstyles_;
  if (this != internal_default_instance()) delete series_theme_styles_;
  if (this != internal_default_instance()) delete series_private_styles_;
  if (this != internal_default_instance()) delete series_nonstyles_;
  if (this != internal_default_instance()) delete paragraph_styles_;
}

void PropertyValueStorageContainerArchive::ArenaDtor(void* object) {
  PropertyValueStorageContainerArchive* _this = reinterpret_cast< PropertyValueStorageContainerArchive* >(object);
  (void)_this;
}
void PropertyValueStorageContainerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyValueStorageContainerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyValueStorageContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyValueStorageContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chart_style_ != nullptr);
      chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chart_nonstyle_ != nullptr);
      chart_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(legend_style_ != nullptr);
      legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(legend_nonstyle_ != nullptr);
      legend_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(value_axis_styles_ != nullptr);
      value_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(value_axis_nonstyles_ != nullptr);
      value_axis_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(category_axis_styles_ != nullptr);
      category_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(category_axis_nonstyles_ != nullptr);
      category_axis_nonstyles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(series_theme_styles_ != nullptr);
      series_theme_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(series_private_styles_ != nullptr);
      series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(series_nonstyles_ != nullptr);
      series_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(paragraph_styles_ != nullptr);
      paragraph_styles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyValueStorageContainerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_nonstyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_nonstyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_nonstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_nonstyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray value_axis_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray category_axis_styles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_theme_styles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_theme_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_nonstyles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_nonstyles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray paragraph_styles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyValueStorageContainerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyValueStorageContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart_style(this), target, stream);
  }

  // optional .TSP.Reference chart_nonstyle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chart_nonstyle(this), target, stream);
  }

  // optional .TSP.Reference legend_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::legend_style(this), target, stream);
  }

  // optional .TSP.Reference legend_nonstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::legend_nonstyle(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray value_axis_styles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::value_axis_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value_axis_nonstyles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray category_axis_styles = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::category_axis_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::category_axis_nonstyles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_theme_styles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::series_theme_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::series_private_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_nonstyles = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::series_nonstyles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray paragraph_styles = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::paragraph_styles(this), target, stream);
  }

  // Extension range [10000, 536870912)
  target = _extensions_._InternalSerialize(
      10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyValueStorageContainerArchive)
  return target;
}

size_t PropertyValueStorageContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyValueStorageContainerArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_);
    }

    // optional .TSP.Reference chart_nonstyle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_nonstyle_);
    }

    // optional .TSP.Reference legend_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_style_);
    }

    // optional .TSP.Reference legend_nonstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_nonstyle_);
    }

    // optional .TSP.SparseReferenceArray value_axis_styles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_axis_styles_);
    }

    // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_axis_nonstyles_);
    }

    // optional .TSP.SparseReferenceArray category_axis_styles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_axis_styles_);
    }

    // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_axis_nonstyles_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSP.SparseReferenceArray series_theme_styles = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_theme_styles_);
    }

    // optional .TSP.SparseReferenceArray series_private_styles = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_nonstyles = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_nonstyles_);
    }

    // optional .TSP.SparseReferenceArray paragraph_styles = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paragraph_styles_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyValueStorageContainerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PropertyValueStorageContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyValueStorageContainerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyValueStorageContainerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PropertyValueStorageContainerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PropertyValueStorageContainerArchive)
    MergeFrom(*source);
  }
}

void PropertyValueStorageContainerArchive::MergeFrom(const PropertyValueStorageContainerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyValueStorageContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart_style()->::TSP::Reference::MergeFrom(from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chart_nonstyle()->::TSP::Reference::MergeFrom(from._internal_chart_nonstyle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_legend_style()->::TSP::Reference::MergeFrom(from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_legend_nonstyle()->::TSP::Reference::MergeFrom(from._internal_legend_nonstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_value_axis_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_value_axis_styles());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_value_axis_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_value_axis_nonstyles());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_category_axis_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_category_axis_styles());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_category_axis_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_category_axis_nonstyles());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_series_theme_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_theme_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_series_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_nonstyles());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_paragraph_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_paragraph_styles());
    }
  }
}

void PropertyValueStorageContainerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PropertyValueStorageContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValueStorageContainerArchive::CopyFrom(const PropertyValueStorageContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyValueStorageContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_chart_style()) {
    if (!chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_nonstyle()) {
    if (!chart_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_nonstyle()) {
    if (!legend_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_styles()) {
    if (!value_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_nonstyles()) {
    if (!value_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_styles()) {
    if (!category_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_nonstyles()) {
    if (!category_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_series_theme_styles()) {
    if (!series_theme_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_nonstyles()) {
    if (!series_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_styles()) {
    if (!paragraph_styles_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerArchive::InternalSwap(PropertyValueStorageContainerArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, paragraph_styles_)
      + sizeof(PropertyValueStorageContainerArchive::paragraph_styles_)
      - PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, chart_style_)>(
          reinterpret_cast<char*>(&chart_style_),
          reinterpret_cast<char*>(&other->chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValueStorageContainerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[17]);
}

// ===================================================================

class StylePasteboardDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StylePasteboardDataArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const StylePasteboardDataArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& style_network(const StylePasteboardDataArchive* msg);
  static void set_has_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_copied_from_entire_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSS::StyleArchive&
StylePasteboardDataArchive::_Internal::super(const StylePasteboardDataArchive* msg) {
  return *msg->super_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
StylePasteboardDataArchive::_Internal::style_network(const StylePasteboardDataArchive* msg) {
  return *msg->style_network_;
}
void StylePasteboardDataArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StylePasteboardDataArchive::StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.StylePasteboardDataArchive)
}
StylePasteboardDataArchive::StylePasteboardDataArchive(const StylePasteboardDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_style_network()) {
    style_network_ = new ::TSCH::PropertyValueStorageContainerArchive(*from.style_network_);
  } else {
    style_network_ = nullptr;
  }
  copied_from_entire_chart_ = from.copied_from_entire_chart_;
  // @@protoc_insertion_point(copy_constructor:TSCH.StylePasteboardDataArchive)
}

void StylePasteboardDataArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&copied_from_entire_chart_) -
    reinterpret_cast<char*>(&super_)) + sizeof(copied_from_entire_chart_));
}

StylePasteboardDataArchive::~StylePasteboardDataArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StylePasteboardDataArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StylePasteboardDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete style_network_;
}

void StylePasteboardDataArchive::ArenaDtor(void* object) {
  StylePasteboardDataArchive* _this = reinterpret_cast< StylePasteboardDataArchive* >(object);
  (void)_this;
}
void StylePasteboardDataArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StylePasteboardDataArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StylePasteboardDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StylePasteboardDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(style_network_ != nullptr);
      style_network_->Clear();
    }
  }
  copied_from_entire_chart_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylePasteboardDataArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool copied_from_entire_chart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_copied_from_entire_chart(&has_bits);
          copied_from_entire_chart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StylePasteboardDataArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StylePasteboardDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style_network(this), target, stream);
  }

  // optional bool copied_from_entire_chart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_copied_from_entire_chart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StylePasteboardDataArchive)
  return target;
}

size_t StylePasteboardDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StylePasteboardDataArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSS.StyleArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_network_);
    }

    // optional bool copied_from_entire_chart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StylePasteboardDataArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.StylePasteboardDataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StylePasteboardDataArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StylePasteboardDataArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.StylePasteboardDataArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.StylePasteboardDataArchive)
    MergeFrom(*source);
  }
}

void StylePasteboardDataArchive::MergeFrom(const StylePasteboardDataArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StylePasteboardDataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_style_network()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from._internal_style_network());
    }
    if (cached_has_bits & 0x00000004u) {
      copied_from_entire_chart_ = from.copied_from_entire_chart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StylePasteboardDataArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.StylePasteboardDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StylePasteboardDataArchive::CopyFrom(const StylePasteboardDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StylePasteboardDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylePasteboardDataArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_style_network()) {
    if (!style_network_->IsInitialized()) return false;
  }
  return true;
}

void StylePasteboardDataArchive::InternalSwap(StylePasteboardDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, copied_from_entire_chart_)
      + sizeof(StylePasteboardDataArchive::copied_from_entire_chart_)
      - PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StylePasteboardDataArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[18]);
}

// ===================================================================

class ChartSelectionPathTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathTypeArchive>()._has_bits_);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathTypeArchive)
}
ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_type()) {
    path_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_type(), 
      GetArena());
  }
  path_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_name()) {
    path_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathTypeArchive)
}

void ChartSelectionPathTypeArchive::SharedCtor() {
path_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChartSelectionPathTypeArchive::~ChartSelectionPathTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathTypeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSelectionPathTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChartSelectionPathTypeArchive::ArenaDtor(void* object) {
  ChartSelectionPathTypeArchive* _this = reinterpret_cast< ChartSelectionPathTypeArchive* >(object);
  (void)_this;
}
void ChartSelectionPathTypeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSelectionPathTypeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSelectionPathTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      path_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathTypeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSelectionPathTypeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_type().data(), static_cast<int>(this->_internal_path_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_type(), target);
  }

  // optional string path_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_name().data(), static_cast<int>(this->_internal_path_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathTypeArchive)
  return target;
}

size_t ChartSelectionPathTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathTypeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_type());
    }

    // optional string path_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSelectionPathTypeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSelectionPathTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSelectionPathTypeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSelectionPathTypeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSelectionPathTypeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSelectionPathTypeArchive)
    MergeFrom(*source);
  }
}

void ChartSelectionPathTypeArchive::MergeFrom(const ChartSelectionPathTypeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path_type(from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path_name(from._internal_path_name());
    }
  }
}

void ChartSelectionPathTypeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSelectionPathTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathTypeArchive::CopyFrom(const ChartSelectionPathTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathTypeArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathTypeArchive::InternalSwap(ChartSelectionPathTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_type_.Swap(&other->path_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_name_.Swap(&other->path_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathTypeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[19]);
}

// ===================================================================

class ChartAxisIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisIDArchive>()._has_bits_);
  static void set_has_axis_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartAxisIDArchive::ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisIDArchive)
}
ChartAxisIDArchive::ChartAxisIDArchive(const ChartAxisIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axis_type_, &from.axis_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&axis_type_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisIDArchive)
}

void ChartAxisIDArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&axis_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&axis_type_)) + sizeof(ordinal_));
}

ChartAxisIDArchive::~ChartAxisIDArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisIDArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartAxisIDArchive::ArenaDtor(void* object) {
  ChartAxisIDArchive* _this = reinterpret_cast< ChartAxisIDArchive* >(object);
  (void)_this;
}
void ChartAxisIDArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisIDArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&axis_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&axis_type_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisIDArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.AxisType axis_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::AxisType_IsValid(val))) {
            _internal_set_axis_type(static_cast<::TSCH::AxisType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisIDArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.AxisType axis_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_axis_type(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisIDArchive)
  return target;
}

size_t ChartAxisIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisIDArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.AxisType axis_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_axis_type());
    }

    // optional uint32 ordinal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ordinal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisIDArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartAxisIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisIDArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisIDArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartAxisIDArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartAxisIDArchive)
    MergeFrom(*source);
  }
}

void ChartAxisIDArchive::MergeFrom(const ChartAxisIDArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      axis_type_ = from.axis_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartAxisIDArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartAxisIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisIDArchive::CopyFrom(const ChartAxisIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisIDArchive::IsInitialized() const {
  return true;
}

void ChartAxisIDArchive::InternalSwap(ChartAxisIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, ordinal_)
      + sizeof(ChartAxisIDArchive::ordinal_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, axis_type_)>(
          reinterpret_cast<char*>(&axis_type_),
          reinterpret_cast<char*>(&other->axis_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisIDArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[20]);
}

// ===================================================================

class ChartSelectionPathArgumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArgumentArchive>()._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartSelectionPathArgumentArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartSelectionPathArgumentArchive::_Internal::axis_id(const ChartSelectionPathArgumentArchive* msg) {
  return *msg->axis_id_;
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArgumentArchive)
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArgumentArchive)
}

void ChartSelectionPathArgumentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&axis_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&axis_id_)) + sizeof(number_));
}

ChartSelectionPathArgumentArchive::~ChartSelectionPathArgumentArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArgumentArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSelectionPathArgumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete axis_id_;
}

void ChartSelectionPathArgumentArchive::ArenaDtor(void* object) {
  ChartSelectionPathArgumentArchive* _this = reinterpret_cast< ChartSelectionPathArgumentArchive* >(object);
  (void)_this;
}
void ChartSelectionPathArgumentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSelectionPathArgumentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSelectionPathArgumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArgumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(axis_id_ != nullptr);
    axis_id_->Clear();
  }
  number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArgumentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSelectionPathArgumentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArgumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::axis_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArgumentArchive)
  return target;
}

size_t ChartSelectionPathArgumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArgumentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartAxisIDArchive axis_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *axis_id_);
    }

    // optional uint32 number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSelectionPathArgumentArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSelectionPathArgumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSelectionPathArgumentArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSelectionPathArgumentArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSelectionPathArgumentArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSelectionPathArgumentArchive)
    MergeFrom(*source);
  }
}

void ChartSelectionPathArgumentArchive::MergeFrom(const ChartSelectionPathArgumentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArgumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSelectionPathArgumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ChartSelectionPathArgumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArgumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArgumentArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArgumentArchive::InternalSwap(ChartSelectionPathArgumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, number_)
      + sizeof(ChartSelectionPathArgumentArchive::number_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, axis_id_)>(
          reinterpret_cast<char*>(&axis_id_),
          reinterpret_cast<char*>(&other->axis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArgumentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[21]);
}

// ===================================================================

class ChartSelectionPathArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArchive>()._has_bits_);
  static const ::TSCH::ChartSelectionPathTypeArchive& path_type(const ChartSelectionPathArchive* msg);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartSelectionPathArchive& sub_selection(const ChartSelectionPathArchive* msg);
  static void set_has_sub_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCH::ChartSelectionPathTypeArchive&
ChartSelectionPathArchive::_Internal::path_type(const ChartSelectionPathArchive* msg) {
  return *msg->path_type_;
}
const ::TSCH::ChartSelectionPathArchive&
ChartSelectionPathArchive::_Internal::sub_selection(const ChartSelectionPathArchive* msg) {
  return *msg->sub_selection_;
}
ChartSelectionPathArchive::ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArchive)
}
ChartSelectionPathArchive::ChartSelectionPathArchive(const ChartSelectionPathArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_type()) {
    path_type_ = new ::TSCH::ChartSelectionPathTypeArchive(*from.path_type_);
  } else {
    path_type_ = nullptr;
  }
  if (from._internal_has_sub_selection()) {
    sub_selection_ = new ::TSCH::ChartSelectionPathArchive(*from.sub_selection_);
  } else {
    sub_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArchive)
}

void ChartSelectionPathArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sub_selection_) -
    reinterpret_cast<char*>(&path_type_)) + sizeof(sub_selection_));
}

ChartSelectionPathArchive::~ChartSelectionPathArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSelectionPathArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_type_;
  if (this != internal_default_instance()) delete sub_selection_;
}

void ChartSelectionPathArchive::ArenaDtor(void* object) {
  ChartSelectionPathArchive* _this = reinterpret_cast< ChartSelectionPathArchive* >(object);
  (void)_this;
}
void ChartSelectionPathArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSelectionPathArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSelectionPathArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_type_ != nullptr);
      path_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sub_selection_ != nullptr);
      sub_selection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSelectionPathArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_type(this), target, stream);
  }

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sub_selection(this), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_arguments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArchive)
  return target;
}

size_t ChartSelectionPathArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_type_);
    }

    // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_selection_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSelectionPathArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSelectionPathArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSelectionPathArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSelectionPathArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSelectionPathArchive)
    MergeFrom(*source);
  }
}

void ChartSelectionPathArchive::MergeFrom(const ChartSelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_type()->::TSCH::ChartSelectionPathTypeArchive::MergeFrom(from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sub_selection()->::TSCH::ChartSelectionPathArchive::MergeFrom(from._internal_sub_selection());
    }
  }
}

void ChartSelectionPathArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathArchive::CopyFrom(const ChartSelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArchive::InternalSwap(ChartSelectionPathArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, sub_selection_)
      + sizeof(ChartSelectionPathArchive::sub_selection_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, path_type_)>(
          reinterpret_cast<char*>(&path_type_),
          reinterpret_cast<char*>(&other->path_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[22]);
}

// ===================================================================

class ChartSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionArchive>()._has_bits_);
  static const ::TSD::DrawableSelectionArchive& super(const ChartSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& chart(const ChartSelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::DrawableSelectionArchive&
ChartSelectionArchive::_Internal::super(const ChartSelectionArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ChartSelectionArchive::_Internal::chart(const ChartSelectionArchive* msg) {
  return *msg->chart_;
}
void ChartSelectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSelectionArchive::clear_chart() {
  if (chart_ != nullptr) chart_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartSelectionArchive::ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionArchive)
}
ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    chart_ = new ::TSP::Reference(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionArchive)
}

void ChartSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&chart_)) + sizeof(super_));
}

ChartSelectionArchive::~ChartSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_;
  if (this != internal_default_instance()) delete super_;
}

void ChartSelectionArchive::ArenaDtor(void* object) {
  ChartSelectionArchive* _this = reinterpret_cast< ChartSelectionArchive* >(object);
  (void)_this;
}
void ChartSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chart_ != nullptr);
      chart_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArchive paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSD.DrawableSelectionArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart(this), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  // optional .TSD.DrawableSelectionArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionArchive)
  return target;
}

size_t ChartSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_);
    }

    // optional .TSD.DrawableSelectionArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartSelectionArchive)
    MergeFrom(*source);
  }
}

void ChartSelectionArchive::MergeFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart()->::TSP::Reference::MergeFrom(from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSD::DrawableSelectionArchive::MergeFrom(from._internal_super());
    }
  }
}

void ChartSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!chart_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::InternalSwap(ChartSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paths_.InternalSwap(&other->paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, super_)
      + sizeof(ChartSelectionArchive::super_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, chart_)>(
          reinterpret_cast<char*>(&chart_),
          reinterpret_cast<char*>(&other->chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[23]);
}

// ===================================================================

class ChartCDESelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCDESelectionArchive>()._has_bits_);
  static const ::TSP::Reference& chart(const ChartCDESelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_row_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_column_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Reference&
ChartCDESelectionArchive::_Internal::chart(const ChartCDESelectionArchive* msg) {
  return *msg->chart_;
}
void ChartCDESelectionArchive::clear_chart() {
  if (chart_ != nullptr) chart_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartCDESelectionArchive::ChartCDESelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartCDESelectionArchive)
}
ChartCDESelectionArchive::ChartCDESelectionArchive(const ChartCDESelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    chart_ = new ::TSP::Reference(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  ::memcpy(&selection_type_, &from.selection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_length_) -
    reinterpret_cast<char*>(&selection_type_)) + sizeof(column_length_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartCDESelectionArchive)
}

void ChartCDESelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_length_) -
    reinterpret_cast<char*>(&chart_)) + sizeof(column_length_));
}

ChartCDESelectionArchive::~ChartCDESelectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartCDESelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartCDESelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_;
}

void ChartCDESelectionArchive::ArenaDtor(void* object) {
  ChartCDESelectionArchive* _this = reinterpret_cast< ChartCDESelectionArchive* >(object);
  (void)_this;
}
void ChartCDESelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartCDESelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartCDESelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartCDESelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chart_ != nullptr);
    chart_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&selection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_length_) -
        reinterpret_cast<char*>(&selection_type_)) + sizeof(column_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCDESelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_selection_type(&has_bits);
          selection_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_location(&has_bits);
          row_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_row_length(&has_bits);
          row_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_column_location(&has_bits);
          column_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_column_length(&has_bits);
          column_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartCDESelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartCDESelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart(this), target, stream);
  }

  // optional int32 selection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_selection_type(), target);
  }

  // optional uint32 row_location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_location(), target);
  }

  // optional uint32 row_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_length(), target);
  }

  // optional uint32 column_location = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_column_location(), target);
  }

  // optional uint32 column_length = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_column_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartCDESelectionArchive)
  return target;
}

size_t ChartCDESelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartCDESelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_);
    }

    // optional int32 selection_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_selection_type());
    }

    // optional uint32 row_location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_location());
    }

    // optional uint32 row_length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_length());
    }

    // optional uint32 column_location = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_location());
    }

    // optional uint32 column_length = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartCDESelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartCDESelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartCDESelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartCDESelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartCDESelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartCDESelectionArchive)
    MergeFrom(*source);
  }
}

void ChartCDESelectionArchive::MergeFrom(const ChartCDESelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartCDESelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart()->::TSP::Reference::MergeFrom(from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      selection_type_ = from.selection_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_location_ = from.row_location_;
    }
    if (cached_has_bits & 0x00000008u) {
      row_length_ = from.row_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      column_location_ = from.column_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      column_length_ = from.column_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartCDESelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartCDESelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCDESelectionArchive::CopyFrom(const ChartCDESelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartCDESelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCDESelectionArchive::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartCDESelectionArchive::InternalSwap(ChartCDESelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCDESelectionArchive, column_length_)
      + sizeof(ChartCDESelectionArchive::column_length_)
      - PROTOBUF_FIELD_OFFSET(ChartCDESelectionArchive, chart_)>(
          reinterpret_cast<char*>(&chart_),
          reinterpret_cast<char*>(&other->chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCDESelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[24]);
}

// ===================================================================

class ChartUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartUIState>()._has_bits_);
  static const ::TSP::Reference& chart(const ChartUIState* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cde_last_row_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cde_last_col_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cde_last_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cde_last_col_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cde_use_full_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_multi_data_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_valid_multi_data_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSP::Reference&
ChartUIState::_Internal::chart(const ChartUIState* msg) {
  return *msg->chart_;
}
void ChartUIState::clear_chart() {
  if (chart_ != nullptr) chart_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartUIState::ChartUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartUIState)
}
ChartUIState::ChartUIState(const ChartUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_chart()) {
    chart_ = new ::TSP::Reference(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  ::memcpy(&cde_last_row_selected_, &from.cde_last_row_selected_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_multi_data_set_index_) -
    reinterpret_cast<char*>(&cde_last_row_selected_)) + sizeof(is_valid_multi_data_set_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartUIState)
}

void ChartUIState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chart_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_valid_multi_data_set_index_) -
    reinterpret_cast<char*>(&chart_)) + sizeof(is_valid_multi_data_set_index_));
}

ChartUIState::~ChartUIState() {
  // @@protoc_insertion_point(destructor:TSCH.ChartUIState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chart_;
}

void ChartUIState::ArenaDtor(void* object) {
  ChartUIState* _this = reinterpret_cast< ChartUIState* >(object);
  (void)_this;
}
void ChartUIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartUIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chart_ != nullptr);
    chart_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&cde_last_row_selected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_multi_data_set_index_) -
        reinterpret_cast<char*>(&cde_last_row_selected_)) + sizeof(is_valid_multi_data_set_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartUIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cde_last_row_selected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cde_last_row_selected(&has_bits);
          cde_last_row_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cde_last_col_selected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cde_last_col_selected(&has_bits);
          cde_last_col_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cde_last_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cde_last_row_count(&has_bits);
          cde_last_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cde_last_col_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cde_last_col_count(&has_bits);
          cde_last_col_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cde_use_full_keyboard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cde_use_full_keyboard(&has_bits);
          cde_use_full_keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 multi_data_set_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_multi_data_set_index(&has_bits);
          multi_data_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_valid_multi_data_set_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_valid_multi_data_set_index(&has_bits);
          is_valid_multi_data_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartUIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chart(this), target, stream);
  }

  // optional int32 cde_last_row_selected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cde_last_row_selected(), target);
  }

  // optional int32 cde_last_col_selected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cde_last_col_selected(), target);
  }

  // optional int32 cde_last_row_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cde_last_row_count(), target);
  }

  // optional int32 cde_last_col_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cde_last_col_count(), target);
  }

  // optional bool cde_use_full_keyboard = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cde_use_full_keyboard(), target);
  }

  // optional int32 multi_data_set_index = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_multi_data_set_index(), target);
  }

  // optional bool is_valid_multi_data_set_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_valid_multi_data_set_index(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_._InternalSerialize(
      10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartUIState)
  return target;
}

size_t ChartUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartUIState)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_);
    }

    // optional int32 cde_last_row_selected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cde_last_row_selected());
    }

    // optional int32 cde_last_col_selected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cde_last_col_selected());
    }

    // optional int32 cde_last_row_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cde_last_row_count());
    }

    // optional int32 cde_last_col_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cde_last_col_count());
    }

    // optional int32 multi_data_set_index = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_multi_data_set_index());
    }

    // optional bool cde_use_full_keyboard = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_valid_multi_data_set_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartUIState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartUIState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartUIState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartUIState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartUIState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartUIState)
    MergeFrom(*source);
  }
}

void ChartUIState::MergeFrom(const ChartUIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartUIState)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chart()->::TSP::Reference::MergeFrom(from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      cde_last_row_selected_ = from.cde_last_row_selected_;
    }
    if (cached_has_bits & 0x00000004u) {
      cde_last_col_selected_ = from.cde_last_col_selected_;
    }
    if (cached_has_bits & 0x00000008u) {
      cde_last_row_count_ = from.cde_last_row_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      cde_last_col_count_ = from.cde_last_col_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      multi_data_set_index_ = from.multi_data_set_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      cde_use_full_keyboard_ = from.cde_use_full_keyboard_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_valid_multi_data_set_index_ = from.is_valid_multi_data_set_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartUIState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartUIState::CopyFrom(const ChartUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartUIState::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_chart()) {
    if (!chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartUIState::InternalSwap(ChartUIState* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartUIState, is_valid_multi_data_set_index_)
      + sizeof(ChartUIState::is_valid_multi_data_set_index_)
      - PROTOBUF_FIELD_OFFSET(ChartUIState, chart_)>(
          reinterpret_cast<char*>(&chart_),
          reinterpret_cast<char*>(&other->chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartUIState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[25]);
}

// ===================================================================

class ChartUIStateMultiDataIndexUpgrade::_Internal {
 public:
};

ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartUIStateMultiDataIndexUpgrade)
}
ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(const ChartUIStateMultiDataIndexUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartUIStateMultiDataIndexUpgrade)
}

void ChartUIStateMultiDataIndexUpgrade::SharedCtor() {
}

ChartUIStateMultiDataIndexUpgrade::~ChartUIStateMultiDataIndexUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartUIStateMultiDataIndexUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartUIStateMultiDataIndexUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartUIStateMultiDataIndexUpgrade::ArenaDtor(void* object) {
  ChartUIStateMultiDataIndexUpgrade* _this = reinterpret_cast< ChartUIStateMultiDataIndexUpgrade* >(object);
  (void)_this;
}
void ChartUIStateMultiDataIndexUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartUIStateMultiDataIndexUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartUIStateMultiDataIndexUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartUIStateMultiDataIndexUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartUIStateMultiDataIndexUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartUIStateMultiDataIndexUpgrade)
  return target;
}

size_t ChartUIStateMultiDataIndexUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartUIStateMultiDataIndexUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartUIStateMultiDataIndexUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartUIStateMultiDataIndexUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartUIStateMultiDataIndexUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartUIStateMultiDataIndexUpgrade)
    MergeFrom(*source);
  }
}

void ChartUIStateMultiDataIndexUpgrade::MergeFrom(const ChartUIStateMultiDataIndexUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartUIStateMultiDataIndexUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartUIStateMultiDataIndexUpgrade::CopyFrom(const ChartUIStateMultiDataIndexUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartUIStateMultiDataIndexUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartUIStateMultiDataIndexUpgrade::IsInitialized() const {
  return true;
}

void ChartUIStateMultiDataIndexUpgrade::InternalSwap(ChartUIStateMultiDataIndexUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartUIStateMultiDataIndexUpgrade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[26]);
}

// ===================================================================

class ChartFormatStructExtensions::_Internal {
 public:
};

ChartFormatStructExtensions::ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartFormatStructExtensions)
}
ChartFormatStructExtensions::ChartFormatStructExtensions(const ChartFormatStructExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartFormatStructExtensions)
}

void ChartFormatStructExtensions::SharedCtor() {
}

ChartFormatStructExtensions::~ChartFormatStructExtensions() {
  // @@protoc_insertion_point(destructor:TSCH.ChartFormatStructExtensions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartFormatStructExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartFormatStructExtensions::ArenaDtor(void* object) {
  ChartFormatStructExtensions* _this = reinterpret_cast< ChartFormatStructExtensions* >(object);
  (void)_this;
}
void ChartFormatStructExtensions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartFormatStructExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartFormatStructExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartFormatStructExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartFormatStructExtensions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartFormatStructExtensions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartFormatStructExtensions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartFormatStructExtensions)
  return target;
}

size_t ChartFormatStructExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartFormatStructExtensions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartFormatStructExtensions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartFormatStructExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartFormatStructExtensions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartFormatStructExtensions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartFormatStructExtensions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartFormatStructExtensions)
    MergeFrom(*source);
  }
}

void ChartFormatStructExtensions::MergeFrom(const ChartFormatStructExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartFormatStructExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChartFormatStructExtensions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartFormatStructExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartFormatStructExtensions::CopyFrom(const ChartFormatStructExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartFormatStructExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartFormatStructExtensions::IsInitialized() const {
  return true;
}

void ChartFormatStructExtensions::InternalSwap(ChartFormatStructExtensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartFormatStructExtensions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[27]);
}

// ===================================================================

class ChartReferenceLineNonStyleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartReferenceLineNonStyleItem>()._has_bits_);
  static const ::TSP::Reference& non_style(const ChartReferenceLineNonStyleItem* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& uuid(const ChartReferenceLineNonStyleItem* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
ChartReferenceLineNonStyleItem::_Internal::non_style(const ChartReferenceLineNonStyleItem* msg) {
  return *msg->non_style_;
}
const ::TSP::UUID&
ChartReferenceLineNonStyleItem::_Internal::uuid(const ChartReferenceLineNonStyleItem* msg) {
  return *msg->uuid_;
}
void ChartReferenceLineNonStyleItem::clear_non_style() {
  if (non_style_ != nullptr) non_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartReferenceLineNonStyleItem::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartReferenceLineNonStyleItem)
}
ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(const ChartReferenceLineNonStyleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_non_style()) {
    non_style_ = new ::TSP::Reference(*from.non_style_);
  } else {
    non_style_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartReferenceLineNonStyleItem)
}

void ChartReferenceLineNonStyleItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&non_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&non_style_)) + sizeof(uuid_));
}

ChartReferenceLineNonStyleItem::~ChartReferenceLineNonStyleItem() {
  // @@protoc_insertion_point(destructor:TSCH.ChartReferenceLineNonStyleItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartReferenceLineNonStyleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete non_style_;
  if (this != internal_default_instance()) delete uuid_;
}

void ChartReferenceLineNonStyleItem::ArenaDtor(void* object) {
  ChartReferenceLineNonStyleItem* _this = reinterpret_cast< ChartReferenceLineNonStyleItem* >(object);
  (void)_this;
}
void ChartReferenceLineNonStyleItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartReferenceLineNonStyleItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartReferenceLineNonStyleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartReferenceLineNonStyleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(non_style_ != nullptr);
      non_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartReferenceLineNonStyleItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference non_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartReferenceLineNonStyleItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartReferenceLineNonStyleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference non_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::non_style(this), target, stream);
  }

  // required .TSP.UUID uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartReferenceLineNonStyleItem)
  return target;
}

size_t ChartReferenceLineNonStyleItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartReferenceLineNonStyleItem)
  size_t total_size = 0;

  if (_internal_has_non_style()) {
    // required .TSP.Reference non_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);
  }

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  return total_size;
}
size_t ChartReferenceLineNonStyleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartReferenceLineNonStyleItem)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference non_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);

    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartReferenceLineNonStyleItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartReferenceLineNonStyleItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartReferenceLineNonStyleItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartReferenceLineNonStyleItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartReferenceLineNonStyleItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartReferenceLineNonStyleItem)
    MergeFrom(*source);
  }
}

void ChartReferenceLineNonStyleItem::MergeFrom(const ChartReferenceLineNonStyleItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartReferenceLineNonStyleItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_non_style()->::TSP::Reference::MergeFrom(from._internal_non_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
  }
}

void ChartReferenceLineNonStyleItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartReferenceLineNonStyleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartReferenceLineNonStyleItem::CopyFrom(const ChartReferenceLineNonStyleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartReferenceLineNonStyleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartReferenceLineNonStyleItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_non_style()) {
    if (!non_style_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void ChartReferenceLineNonStyleItem::InternalSwap(ChartReferenceLineNonStyleItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartReferenceLineNonStyleItem, uuid_)
      + sizeof(ChartReferenceLineNonStyleItem::uuid_)
      - PROTOBUF_FIELD_OFFSET(ChartReferenceLineNonStyleItem, non_style_)>(
          reinterpret_cast<char*>(&non_style_),
          reinterpret_cast<char*>(&other->non_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartReferenceLineNonStyleItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[28]);
}

// ===================================================================

class ChartAxisReferenceLineNonStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineNonStylesArchive>()._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineNonStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineNonStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineNonStylesArchive* msg) {
  return *msg->axis_id_;
}
ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reference_line_non_style_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
}
ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(const ChartAxisReferenceLineNonStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reference_line_non_style_items_(from.reference_line_non_style_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
}

void ChartAxisReferenceLineNonStylesArchive::SharedCtor() {
axis_id_ = nullptr;
}

ChartAxisReferenceLineNonStylesArchive::~ChartAxisReferenceLineNonStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisReferenceLineNonStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete axis_id_;
}

void ChartAxisReferenceLineNonStylesArchive::ArenaDtor(void* object) {
  ChartAxisReferenceLineNonStylesArchive* _this = reinterpret_cast< ChartAxisReferenceLineNonStylesArchive* >(object);
  (void)_this;
}
void ChartAxisReferenceLineNonStylesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisReferenceLineNonStylesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisReferenceLineNonStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_line_non_style_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(axis_id_ != nullptr);
    axis_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineNonStylesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_style_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisReferenceLineNonStylesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::axis_id(this), target, stream);
  }

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_non_style_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reference_line_non_style_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineNonStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineNonStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  total_size += 1UL * this->_internal_reference_line_non_style_items_size();
  for (const auto& msg : this->reference_line_non_style_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisReferenceLineNonStylesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisReferenceLineNonStylesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisReferenceLineNonStylesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartAxisReferenceLineNonStylesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartAxisReferenceLineNonStylesArchive)
    MergeFrom(*source);
  }
}

void ChartAxisReferenceLineNonStylesArchive::MergeFrom(const ChartAxisReferenceLineNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_line_non_style_items_.MergeFrom(from.reference_line_non_style_items_);
  if (from._internal_has_axis_id()) {
    _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
  }
}

void ChartAxisReferenceLineNonStylesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisReferenceLineNonStylesArchive::CopyFrom(const ChartAxisReferenceLineNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineNonStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_non_style_items_)) return false;
  return true;
}

void ChartAxisReferenceLineNonStylesArchive::InternalSwap(ChartAxisReferenceLineNonStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_line_non_style_items_.InternalSwap(&other->reference_line_non_style_items_);
  swap(axis_id_, other->axis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineNonStylesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[29]);
}

// ===================================================================

class ChartAxisReferenceLineStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineStylesArchive>()._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::SparseReferenceArray& reference_line_styles(const ChartAxisReferenceLineStylesArchive* msg);
  static void set_has_reference_line_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineStylesArchive* msg) {
  return *msg->axis_id_;
}
const ::TSP::SparseReferenceArray&
ChartAxisReferenceLineStylesArchive::_Internal::reference_line_styles(const ChartAxisReferenceLineStylesArchive* msg) {
  return *msg->reference_line_styles_;
}
void ChartAxisReferenceLineStylesArchive::clear_reference_line_styles() {
  if (reference_line_styles_ != nullptr) reference_line_styles_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineStylesArchive)
}
ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(const ChartAxisReferenceLineStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  if (from._internal_has_reference_line_styles()) {
    reference_line_styles_ = new ::TSP::SparseReferenceArray(*from.reference_line_styles_);
  } else {
    reference_line_styles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineStylesArchive)
}

void ChartAxisReferenceLineStylesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&axis_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_line_styles_) -
    reinterpret_cast<char*>(&axis_id_)) + sizeof(reference_line_styles_));
}

ChartAxisReferenceLineStylesArchive::~ChartAxisReferenceLineStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineStylesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisReferenceLineStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete axis_id_;
  if (this != internal_default_instance()) delete reference_line_styles_;
}

void ChartAxisReferenceLineStylesArchive::ArenaDtor(void* object) {
  ChartAxisReferenceLineStylesArchive* _this = reinterpret_cast< ChartAxisReferenceLineStylesArchive* >(object);
  (void)_this;
}
void ChartAxisReferenceLineStylesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisReferenceLineStylesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisReferenceLineStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(axis_id_ != nullptr);
      axis_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reference_line_styles_ != nullptr);
      reference_line_styles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineStylesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray reference_line_styles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisReferenceLineStylesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::axis_id(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray reference_line_styles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference_line_styles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.SparseReferenceArray reference_line_styles = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_line_styles_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisReferenceLineStylesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisReferenceLineStylesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisReferenceLineStylesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartAxisReferenceLineStylesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartAxisReferenceLineStylesArchive)
    MergeFrom(*source);
  }
}

void ChartAxisReferenceLineStylesArchive::MergeFrom(const ChartAxisReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reference_line_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_reference_line_styles());
    }
  }
}

void ChartAxisReferenceLineStylesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisReferenceLineStylesArchive::CopyFrom(const ChartAxisReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_reference_line_styles()) {
    if (!reference_line_styles_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisReferenceLineStylesArchive::InternalSwap(ChartAxisReferenceLineStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisReferenceLineStylesArchive, reference_line_styles_)
      + sizeof(ChartAxisReferenceLineStylesArchive::reference_line_styles_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisReferenceLineStylesArchive, axis_id_)>(
          reinterpret_cast<char*>(&axis_id_),
          reinterpret_cast<char*>(&other->axis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineStylesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[30]);
}

// ===================================================================

class ChartReferenceLinesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartReferenceLinesArchive>()._has_bits_);
  static const ::TSP::Reference& theme_preset_reference_line_style(const ChartReferenceLinesArchive* msg);
  static void set_has_theme_preset_reference_line_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartReferenceLinesArchive::_Internal::theme_preset_reference_line_style(const ChartReferenceLinesArchive* msg) {
  return *msg->theme_preset_reference_line_style_;
}
void ChartReferenceLinesArchive::clear_theme_preset_reference_line_style() {
  if (theme_preset_reference_line_style_ != nullptr) theme_preset_reference_line_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChartReferenceLinesArchive::ChartReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reference_line_non_styles_map_(arena),
  reference_line_styles_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartReferenceLinesArchive)
}
ChartReferenceLinesArchive::ChartReferenceLinesArchive(const ChartReferenceLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reference_line_non_styles_map_(from.reference_line_non_styles_map_),
      reference_line_styles_map_(from.reference_line_styles_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    theme_preset_reference_line_style_ = new ::TSP::Reference(*from.theme_preset_reference_line_style_);
  } else {
    theme_preset_reference_line_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartReferenceLinesArchive)
}

void ChartReferenceLinesArchive::SharedCtor() {
theme_preset_reference_line_style_ = nullptr;
}

ChartReferenceLinesArchive::~ChartReferenceLinesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartReferenceLinesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartReferenceLinesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete theme_preset_reference_line_style_;
}

void ChartReferenceLinesArchive::ArenaDtor(void* object) {
  ChartReferenceLinesArchive* _this = reinterpret_cast< ChartReferenceLinesArchive* >(object);
  (void)_this;
}
void ChartReferenceLinesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartReferenceLinesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartReferenceLinesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartReferenceLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_line_non_styles_map_.Clear();
  reference_line_styles_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(theme_preset_reference_line_style_ != nullptr);
    theme_preset_reference_line_style_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartReferenceLinesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference theme_preset_reference_line_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme_preset_reference_line_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartReferenceLinesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartReferenceLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_non_styles_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reference_line_non_styles_map(i), target, stream);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_styles_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reference_line_styles_map(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::theme_preset_reference_line_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartReferenceLinesArchive)
  return target;
}

size_t ChartReferenceLinesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartReferenceLinesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
  total_size += 1UL * this->_internal_reference_line_non_styles_map_size();
  for (const auto& msg : this->reference_line_non_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  total_size += 1UL * this->_internal_reference_line_styles_map_size();
  for (const auto& msg : this->reference_line_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_preset_reference_line_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartReferenceLinesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartReferenceLinesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartReferenceLinesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartReferenceLinesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartReferenceLinesArchive)
    MergeFrom(*source);
  }
}

void ChartReferenceLinesArchive::MergeFrom(const ChartReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_line_non_styles_map_.MergeFrom(from.reference_line_non_styles_map_);
  reference_line_styles_map_.MergeFrom(from.reference_line_styles_map_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _internal_mutable_theme_preset_reference_line_style()->::TSP::Reference::MergeFrom(from._internal_theme_preset_reference_line_style());
  }
}

void ChartReferenceLinesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartReferenceLinesArchive::CopyFrom(const ChartReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartReferenceLinesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_non_styles_map_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_styles_map_)) return false;
  if (_internal_has_theme_preset_reference_line_style()) {
    if (!theme_preset_reference_line_style_->IsInitialized()) return false;
  }
  return true;
}

void ChartReferenceLinesArchive::InternalSwap(ChartReferenceLinesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_line_non_styles_map_.InternalSwap(&other->reference_line_non_styles_map_);
  reference_line_styles_map_.InternalSwap(&other->reference_line_styles_map_);
  swap(theme_preset_reference_line_style_, other->theme_preset_reference_line_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartReferenceLinesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[31]);
}

// ===================================================================

class ChartPresetReferenceLineStylesArchive::_Internal {
 public:
};

void ChartPresetReferenceLineStylesArchive::clear_reference_line_styles() {
  reference_line_styles_.Clear();
}
ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reference_line_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPresetReferenceLineStylesArchive)
}
ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(const ChartPresetReferenceLineStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reference_line_styles_(from.reference_line_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPresetReferenceLineStylesArchive)
}

void ChartPresetReferenceLineStylesArchive::SharedCtor() {
}

ChartPresetReferenceLineStylesArchive::~ChartPresetReferenceLineStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPresetReferenceLineStylesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartPresetReferenceLineStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartPresetReferenceLineStylesArchive::ArenaDtor(void* object) {
  ChartPresetReferenceLineStylesArchive* _this = reinterpret_cast< ChartPresetReferenceLineStylesArchive* >(object);
  (void)_this;
}
void ChartPresetReferenceLineStylesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartPresetReferenceLineStylesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartPresetReferenceLineStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPresetReferenceLineStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_line_styles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPresetReferenceLineStylesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference reference_line_styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartPresetReferenceLineStylesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPresetReferenceLineStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference reference_line_styles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reference_line_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPresetReferenceLineStylesArchive)
  return target;
}

size_t ChartPresetReferenceLineStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPresetReferenceLineStylesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference reference_line_styles = 1;
  total_size += 1UL * this->_internal_reference_line_styles_size();
  for (const auto& msg : this->reference_line_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartPresetReferenceLineStylesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartPresetReferenceLineStylesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartPresetReferenceLineStylesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartPresetReferenceLineStylesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartPresetReferenceLineStylesArchive)
    MergeFrom(*source);
  }
}

void ChartPresetReferenceLineStylesArchive::MergeFrom(const ChartPresetReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_line_styles_.MergeFrom(from.reference_line_styles_);
}

void ChartPresetReferenceLineStylesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPresetReferenceLineStylesArchive::CopyFrom(const ChartPresetReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetReferenceLineStylesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_styles_)) return false;
  return true;
}

void ChartPresetReferenceLineStylesArchive::InternalSwap(ChartPresetReferenceLineStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reference_line_styles_.InternalSwap(&other->reference_line_styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPresetReferenceLineStylesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[32]);
}

// ===================================================================

class ChartAxisReferenceLineSparseNonStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineSparseNonStylesArchive>()._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineSparseNonStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineSparseNonStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineSparseNonStylesArchive* msg) {
  return *msg->axis_id_;
}
ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reference_line_non_style_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
}
ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(const ChartAxisReferenceLineSparseNonStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reference_line_non_style_items_(from.reference_line_non_style_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    axis_id_ = new ::TSCH::ChartAxisIDArchive(*from.axis_id_);
  } else {
    axis_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
}

void ChartAxisReferenceLineSparseNonStylesArchive::SharedCtor() {
axis_id_ = nullptr;
}

ChartAxisReferenceLineSparseNonStylesArchive::~ChartAxisReferenceLineSparseNonStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisReferenceLineSparseNonStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete axis_id_;
}

void ChartAxisReferenceLineSparseNonStylesArchive::ArenaDtor(void* object) {
  ChartAxisReferenceLineSparseNonStylesArchive* _this = reinterpret_cast< ChartAxisReferenceLineSparseNonStylesArchive* >(object);
  (void)_this;
}
void ChartAxisReferenceLineSparseNonStylesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisReferenceLineSparseNonStylesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisReferenceLineSparseNonStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_line_non_style_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(axis_id_ != nullptr);
    axis_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineSparseNonStylesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_style_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisReferenceLineSparseNonStylesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::axis_id(this), target, stream);
  }

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_non_style_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reference_line_non_style_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineSparseNonStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *axis_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  total_size += 1UL * this->_internal_reference_line_non_style_items_size();
  for (const auto& msg : this->reference_line_non_style_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisReferenceLineSparseNonStylesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisReferenceLineSparseNonStylesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisReferenceLineSparseNonStylesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
    MergeFrom(*source);
  }
}

void ChartAxisReferenceLineSparseNonStylesArchive::MergeFrom(const ChartAxisReferenceLineSparseNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_line_non_style_items_.MergeFrom(from.reference_line_non_style_items_);
  if (from._internal_has_axis_id()) {
    _internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from._internal_axis_id());
  }
}

void ChartAxisReferenceLineSparseNonStylesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisReferenceLineSparseNonStylesArchive::CopyFrom(const ChartAxisReferenceLineSparseNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineSparseNonStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_non_style_items_)) return false;
  return true;
}

void ChartAxisReferenceLineSparseNonStylesArchive::InternalSwap(ChartAxisReferenceLineSparseNonStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_line_non_style_items_.InternalSwap(&other->reference_line_non_style_items_);
  swap(axis_id_, other->axis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineSparseNonStylesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[33]);
}

// ===================================================================

class PropertyValueStorageContainerReferenceLinesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyValueStorageContainerReferenceLinesArchive>()._has_bits_);
  static const ::TSP::Reference& theme_preset_reference_line_style(const PropertyValueStorageContainerReferenceLinesArchive* msg);
  static void set_has_theme_preset_reference_line_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PropertyValueStorageContainerReferenceLinesArchive::_Internal::theme_preset_reference_line_style(const PropertyValueStorageContainerReferenceLinesArchive* msg) {
  return *msg->theme_preset_reference_line_style_;
}
void PropertyValueStorageContainerReferenceLinesArchive::clear_theme_preset_reference_line_style() {
  if (theme_preset_reference_line_style_ != nullptr) theme_preset_reference_line_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reference_line_non_styles_map_(arena),
  reference_line_styles_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
}
PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(const PropertyValueStorageContainerReferenceLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reference_line_non_styles_map_(from.reference_line_non_styles_map_),
      reference_line_styles_map_(from.reference_line_styles_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    theme_preset_reference_line_style_ = new ::TSP::Reference(*from.theme_preset_reference_line_style_);
  } else {
    theme_preset_reference_line_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
}

void PropertyValueStorageContainerReferenceLinesArchive::SharedCtor() {
theme_preset_reference_line_style_ = nullptr;
}

PropertyValueStorageContainerReferenceLinesArchive::~PropertyValueStorageContainerReferenceLinesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyValueStorageContainerReferenceLinesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete theme_preset_reference_line_style_;
}

void PropertyValueStorageContainerReferenceLinesArchive::ArenaDtor(void* object) {
  PropertyValueStorageContainerReferenceLinesArchive* _this = reinterpret_cast< PropertyValueStorageContainerReferenceLinesArchive* >(object);
  (void)_this;
}
void PropertyValueStorageContainerReferenceLinesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyValueStorageContainerReferenceLinesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyValueStorageContainerReferenceLinesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_line_non_styles_map_.Clear();
  reference_line_styles_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(theme_preset_reference_line_style_ != nullptr);
    theme_preset_reference_line_style_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyValueStorageContainerReferenceLinesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference theme_preset_reference_line_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme_preset_reference_line_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyValueStorageContainerReferenceLinesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_non_styles_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reference_line_non_styles_map(i), target, stream);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_styles_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reference_line_styles_map(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::theme_preset_reference_line_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  return target;
}

size_t PropertyValueStorageContainerReferenceLinesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
  total_size += 1UL * this->_internal_reference_line_non_styles_map_size();
  for (const auto& msg : this->reference_line_non_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  total_size += 1UL * this->_internal_reference_line_styles_map_size();
  for (const auto& msg : this->reference_line_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_preset_reference_line_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyValueStorageContainerReferenceLinesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyValueStorageContainerReferenceLinesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyValueStorageContainerReferenceLinesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
    MergeFrom(*source);
  }
}

void PropertyValueStorageContainerReferenceLinesArchive::MergeFrom(const PropertyValueStorageContainerReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_line_non_styles_map_.MergeFrom(from.reference_line_non_styles_map_);
  reference_line_styles_map_.MergeFrom(from.reference_line_styles_map_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _internal_mutable_theme_preset_reference_line_style()->::TSP::Reference::MergeFrom(from._internal_theme_preset_reference_line_style());
  }
}

void PropertyValueStorageContainerReferenceLinesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValueStorageContainerReferenceLinesArchive::CopyFrom(const PropertyValueStorageContainerReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerReferenceLinesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_non_styles_map_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(reference_line_styles_map_)) return false;
  if (_internal_has_theme_preset_reference_line_style()) {
    if (!theme_preset_reference_line_style_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerReferenceLinesArchive::InternalSwap(PropertyValueStorageContainerReferenceLinesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reference_line_non_styles_map_.InternalSwap(&other->reference_line_non_styles_map_);
  reference_line_styles_map_.InternalSwap(&other->reference_line_styles_map_);
  swap(theme_preset_reference_line_style_, other->theme_preset_reference_line_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValueStorageContainerReferenceLinesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[34]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartArchive::kUnityFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false >
  ChartArchive::unity(kUnityFieldNumber, ::TSCH::ChartArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartMultiDataIndexUpgrade::kUpgradedToUiStateFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartMultiDataIndexUpgrade::upgraded_to_ui_state(kUpgradedToUiStateFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartGarlicMinMaxUpgrade::kGarlicMinMaxUpgradeFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicMinMaxUpgrade >, 11, false >
  ChartGarlicMinMaxUpgrade::garlic_min_max_upgrade(kGarlicMinMaxUpgradeFieldNumber, ::TSCH::ChartGarlicMinMaxUpgrade::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartGarlicLabelFormatUpgrade::kGarlicLabelFormatUpgradeFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicLabelFormatUpgrade >, 11, false >
  ChartGarlicLabelFormatUpgrade::garlic_label_format_upgrade(kGarlicLabelFormatUpgradeFieldNumber, ::TSCH::ChartGarlicLabelFormatUpgrade::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartPasteboardAdditionsArchive::kPresetIndexForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  ChartPasteboardAdditionsArchive::preset_index_for_pasteboard(kPresetIndexForPasteboardFieldNumber, 0u);
const std::string ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartPasteboardAdditionsArchive::kPresetUuidForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  ChartPasteboardAdditionsArchive::preset_uuid_for_pasteboard(kPresetUuidForPasteboardFieldNumber, ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartPasteboardAdditionsArchive::kCustomFormatListForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSP::Reference >, 11, false >
  ChartPasteboardAdditionsArchive::custom_format_list_for_pasteboard(kCustomFormatListForPasteboardFieldNumber, ::TSP::Reference::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartPreserveAppearanceForPresetArchive::kAppearancePreservedForPresetFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartPreserveAppearanceForPresetArchive::appearance_preserved_for_preset(kAppearancePreservedForPresetFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSupportsProportionalBendedCalloutLinesArchive::kSupportsProportionalBendedCalloutLinesFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartSupportsProportionalBendedCalloutLinesArchive::supports_proportional_bended_callout_lines(kSupportsProportionalBendedCalloutLinesFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSupportsRoundedCornersArchive::kDeprecatedSupportsRoundedCornersFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartSupportsRoundedCornersArchive::deprecated_supports_rounded_corners(kDeprecatedSupportsRoundedCornersFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSupportsRoundedCornersArchive::kSupportsRoundedCornersFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartSupportsRoundedCornersArchive::supports_rounded_corners(kSupportsRoundedCornersFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSupportsSeriesPropertySpacingArchive::kSupportsSeriesValueLabelSpacingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartSupportsSeriesPropertySpacingArchive::supports_series_value_label_spacing(kSupportsSeriesValueLabelSpacingFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartSupportsSeriesPropertySpacingArchive::kSupportsSeriesErrorBarSpacingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartSupportsSeriesPropertySpacingArchive::supports_series_error_bar_spacing(kSupportsSeriesErrorBarSpacingFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartPresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false >
  ChartPresetsArchive::extension(kExtensionFieldNumber, ::TSCH::ChartPresetsArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartUIStateMultiDataIndexUpgrade::kUpgradedFromModelFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartUIState,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  ChartUIStateMultiDataIndexUpgrade::upgraded_from_model(kUpgradedFromModelFieldNumber, false);
const std::string ChartFormatStructExtensions_prefix_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartFormatStructExtensions::kPrefixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  ChartFormatStructExtensions::prefix(kPrefixFieldNumber, ChartFormatStructExtensions_prefix_default);
const std::string ChartFormatStructExtensions_suffix_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartFormatStructExtensions::kSuffixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  ChartFormatStructExtensions::suffix(kSuffixFieldNumber, ChartFormatStructExtensions_suffix_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  scene3d_settings_constant_depth(kScene3DSettingsConstantDepthFieldNumber, false);
const std::string last_applied_fill_set_lookup_string_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  last_applied_fill_set_lookup_string(kLastAppliedFillSetLookupStringFieldNumber, last_applied_fill_set_lookup_string_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_donut(kSeriesSupportsDonutFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_number_format(kSeriesSupportsCustomNumberFormatFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_date_format(kSeriesSupportsCustomDateFormatFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_callout_lines(kSeriesSupportsCalloutLinesFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_number_format(kAxisSupportsCustomNumberFormatFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_date_format(kAxisSupportsCustomDateFormatFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartReferenceLinesArchive >, 11, false >
  reference_lines(kReferenceLinesFieldNumber, ::TSCH::ChartReferenceLinesArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStylePreset,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetReferenceLineStylesArchive >, 11, false >
  preset_reference_line_styles(kPresetReferenceLineStylesFieldNumber, ::TSCH::ChartPresetReferenceLineStylesArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::PropertyValueStorageContainerArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >, 11, false >
  property_value_storage_container_reference_lines(kPropertyValueStorageContainerReferenceLinesFieldNumber, ::TSCH::PropertyValueStorageContainerReferenceLinesArchive::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::ChartDrawableArchive* Arena::CreateMaybeMessage< ::TSCH::ChartDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartArchive* Arena::CreateMaybeMessage< ::TSCH::ChartArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartMultiDataIndexUpgrade* Arena::CreateMaybeMessage< ::TSCH::ChartMultiDataIndexUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartMultiDataIndexUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGarlicMinMaxUpgrade* Arena::CreateMaybeMessage< ::TSCH::ChartGarlicMinMaxUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGarlicMinMaxUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGarlicLabelFormatUpgrade* Arena::CreateMaybeMessage< ::TSCH::ChartGarlicLabelFormatUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGarlicLabelFormatUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPasteboardAdditionsArchive* Arena::CreateMaybeMessage< ::TSCH::ChartPasteboardAdditionsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPasteboardAdditionsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPreserveAppearanceForPresetArchive* Arena::CreateMaybeMessage< ::TSCH::ChartPreserveAppearanceForPresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPreserveAppearanceForPresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsRoundedCornersArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSupportsRoundedCornersArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsRoundedCornersArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsSeriesPropertySpacingArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSupportsSeriesPropertySpacingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsSeriesPropertySpacingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive* Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartMediatorArchive* Arena::CreateMaybeMessage< ::TSCH::ChartMediatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartMediatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartFillSetArchive* Arena::CreateMaybeMessage< ::TSCH::ChartFillSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartFillSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartStylePreset* Arena::CreateMaybeMessage< ::TSCH::ChartStylePreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartStylePreset >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPresetsArchive* Arena::CreateMaybeMessage< ::TSCH::ChartPresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyValueStorageContainerArchive* Arena::CreateMaybeMessage< ::TSCH::PropertyValueStorageContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyValueStorageContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StylePasteboardDataArchive* Arena::CreateMaybeMessage< ::TSCH::StylePasteboardDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StylePasteboardDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathTypeArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisIDArchive* Arena::CreateMaybeMessage< ::TSCH::ChartAxisIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArgumentArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArgumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArgumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionArchive* Arena::CreateMaybeMessage< ::TSCH::ChartSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartCDESelectionArchive* Arena::CreateMaybeMessage< ::TSCH::ChartCDESelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartCDESelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartUIState* Arena::CreateMaybeMessage< ::TSCH::ChartUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartUIStateMultiDataIndexUpgrade* Arena::CreateMaybeMessage< ::TSCH::ChartUIStateMultiDataIndexUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartUIStateMultiDataIndexUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartFormatStructExtensions* Arena::CreateMaybeMessage< ::TSCH::ChartFormatStructExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartFormatStructExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartReferenceLineNonStyleItem* Arena::CreateMaybeMessage< ::TSCH::ChartReferenceLineNonStyleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartReferenceLineNonStyleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineNonStylesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineNonStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineNonStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineStylesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartReferenceLinesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartReferenceLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartReferenceLinesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPresetReferenceLineStylesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartPresetReferenceLineStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPresetReferenceLineStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyValueStorageContainerReferenceLinesArchive* Arena::CreateMaybeMessage< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
