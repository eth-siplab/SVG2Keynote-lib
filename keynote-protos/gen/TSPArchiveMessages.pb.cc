// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPArchiveMessages.proto

#include "TSPArchiveMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSP {
constexpr ArchiveInfo::ArchiveInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_infos_()
  , identifier_(PROTOBUF_ULONGLONG(0))
  , should_merge_(false){}
struct ArchiveInfoDefaultTypeInternal {
  constexpr ArchiveInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArchiveInfoDefaultTypeInternal() {}
  union {
    ArchiveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArchiveInfoDefaultTypeInternal _ArchiveInfo_default_instance_;
constexpr MessageInfo::MessageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_()
  , _version_cached_byte_size_()
  , field_infos_()
  , object_references_()
  , _object_references_cached_byte_size_()
  , data_references_()
  , _data_references_cached_byte_size_()
  , diff_merge_version_()
  , _diff_merge_version_cached_byte_size_()
  , fields_to_remove_()
  , diff_read_version_()
  , _diff_read_version_cached_byte_size_()
  , diff_field_path_(nullptr)
  , type_(0u)
  , length_(0u)
  , base_message_index_(0u){}
struct MessageInfoDefaultTypeInternal {
  constexpr MessageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageInfoDefaultTypeInternal() {}
  union {
    MessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
constexpr FieldInfo::FieldInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_references_()
  , _object_references_cached_byte_size_()
  , data_references_()
  , _data_references_cached_byte_size_()
  , known_field_version_()
  , _known_field_version_cached_byte_size_()
  , known_field_feature_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(nullptr)
  , type_(0)

  , unknown_field_rule_(0)

  , known_field_rule_(0)
{}
struct FieldInfoDefaultTypeInternal {
  constexpr FieldInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldInfoDefaultTypeInternal() {}
  union {
    FieldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
constexpr FieldPath::FieldPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , _path_cached_byte_size_(){}
struct FieldPathDefaultTypeInternal {
  constexpr FieldPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldPathDefaultTypeInternal() {}
  union {
    FieldPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldPathDefaultTypeInternal _FieldPath_default_instance_;
constexpr ComponentInfo::ComponentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_read_version_()
  , _document_read_version_cached_byte_size_()
  , document_write_version_()
  , _document_write_version_cached_byte_size_()
  , external_references_()
  , data_references_()
  , object_uuid_map_entries_()
  , feature_infos_()
  , component_read_version_()
  , _component_read_version_cached_byte_size_()
  , component_required_version_()
  , _component_required_version_cached_byte_size_()
  , versioned_external_references_()
  , ambiguous_object_identifiers_()
  , _ambiguous_object_identifiers_cached_byte_size_()
  , preferred_locator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(PROTOBUF_ULONGLONG(0))
  , save_token_(PROTOBUF_ULONGLONG(0))
  , is_stored_outside_object_archive_(false)
  , can_be_dropped_(false)
  , is_wasteful_(false)
  , compression_algorithm_(0u)
  , required_package_identifier_(0u){}
struct ComponentInfoDefaultTypeInternal {
  constexpr ComponentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentInfoDefaultTypeInternal() {}
  union {
    ComponentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
constexpr ComponentExternalReference::ComponentExternalReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_identifier_(PROTOBUF_ULONGLONG(0))
  , object_identifier_(PROTOBUF_ULONGLONG(0))
  , is_weak_(false){}
struct ComponentExternalReferenceDefaultTypeInternal {
  constexpr ComponentExternalReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentExternalReferenceDefaultTypeInternal() {}
  union {
    ComponentExternalReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentExternalReferenceDefaultTypeInternal _ComponentExternalReference_default_instance_;
constexpr ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_identifier_(PROTOBUF_ULONGLONG(0))
  , count_(0u){}
struct ComponentDataReference_ObjectReferenceDefaultTypeInternal {
  constexpr ComponentDataReference_ObjectReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentDataReference_ObjectReferenceDefaultTypeInternal() {}
  union {
    ComponentDataReference_ObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentDataReference_ObjectReferenceDefaultTypeInternal _ComponentDataReference_ObjectReference_default_instance_;
constexpr ComponentDataReference::ComponentDataReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_reference_list_()
  , data_identifier_(PROTOBUF_ULONGLONG(0)){}
struct ComponentDataReferenceDefaultTypeInternal {
  constexpr ComponentDataReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentDataReferenceDefaultTypeInternal() {}
  union {
    ComponentDataReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentDataReferenceDefaultTypeInternal _ComponentDataReference_default_instance_;
constexpr ObjectUUIDMapEntry::ObjectUUIDMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(nullptr)
  , identifier_(PROTOBUF_ULONGLONG(0)){}
struct ObjectUUIDMapEntryDefaultTypeInternal {
  constexpr ObjectUUIDMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectUUIDMapEntryDefaultTypeInternal() {}
  union {
    ObjectUUIDMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectUUIDMapEntryDefaultTypeInternal _ObjectUUIDMapEntry_default_instance_;
constexpr FeatureInfo::FeatureInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_version_()
  , _read_version_cached_byte_size_()
  , write_version_()
  , _write_version_cached_byte_size_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FeatureInfoDefaultTypeInternal {
  constexpr FeatureInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureInfoDefaultTypeInternal() {}
  union {
    FeatureInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureInfoDefaultTypeInternal _FeatureInfo_default_instance_;
constexpr PackageMetadata::PackageMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : components_()
  , datas_()
  , read_version_()
  , _read_version_cached_byte_size_()
  , write_version_()
  , _write_version_cached_byte_size_()
  , file_format_version_()
  , _file_format_version_cached_byte_size_()
  , versioned_components_()
  , revision_(nullptr)
  , data_metadata_map_(nullptr)
  , last_object_identifier_(PROTOBUF_ULONGLONG(0))
  , save_token_(PROTOBUF_ULONGLONG(0))
  , preferred_package_type_(0)
{}
struct PackageMetadataDefaultTypeInternal {
  constexpr PackageMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackageMetadataDefaultTypeInternal() {}
  union {
    PackageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackageMetadataDefaultTypeInternal _PackageMetadata_default_instance_;
constexpr DocumentRevision::DocumentRevision(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_64_(PROTOBUF_ULONGLONG(0))
  , sequence_32_(0){}
struct DocumentRevisionDefaultTypeInternal {
  constexpr DocumentRevisionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentRevisionDefaultTypeInternal() {}
  union {
    DocumentRevision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentRevisionDefaultTypeInternal _DocumentRevision_default_instance_;
constexpr PasteboardMetadata::PasteboardMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_()
  , _version_cached_byte_size_()
  , datas_()
  , read_version_()
  , _read_version_cached_byte_size_()
  , app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_document_uuid_(nullptr)
  , data_metadata_map_(nullptr){}
struct PasteboardMetadataDefaultTypeInternal {
  constexpr PasteboardMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteboardMetadataDefaultTypeInternal() {}
  union {
    PasteboardMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteboardMetadataDefaultTypeInternal _PasteboardMetadata_default_instance_;
constexpr DataInfo::DataInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preferred_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_resource_locator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_bookmark_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_mismatched_digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pasteboard_external_file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attributes_(nullptr)
  , encryption_info_(nullptr)
  , unmaterialized_ranges_(nullptr)
  , identifier_(PROTOBUF_ULONGLONG(0))
  , can_download_(false)
  , remote_data_has_package_storage_(false)
  , upload_status_(0)

  , remote_data_length_(PROTOBUF_ULONGLONG(0))
  , remote_data_mtime_(0)
  , download_priority_(1)
{}
struct DataInfoDefaultTypeInternal {
  constexpr DataInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataInfoDefaultTypeInternal() {}
  union {
    DataInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataInfoDefaultTypeInternal _DataInfo_default_instance_;
constexpr DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_metadata_(nullptr)
  , data_identifier_(PROTOBUF_ULONGLONG(0)){}
struct DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal {
  constexpr DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal() {}
  union {
    DataMetadataMap_DataMetadataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMetadataMap_DataMetadataMapEntryDefaultTypeInternal _DataMetadataMap_DataMetadataMapEntry_default_instance_;
constexpr DataMetadataMap::DataMetadataMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_metadata_entries_(){}
struct DataMetadataMapDefaultTypeInternal {
  constexpr DataMetadataMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMetadataMapDefaultTypeInternal() {}
  union {
    DataMetadataMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMetadataMapDefaultTypeInternal _DataMetadataMap_default_instance_;
constexpr DataMetadata::DataMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fallback_color_(nullptr){}
struct DataMetadataDefaultTypeInternal {
  constexpr DataMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMetadataDefaultTypeInternal() {}
  union {
    DataMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMetadataDefaultTypeInternal _DataMetadata_default_instance_;
constexpr EncryptionInfo::EncryptionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_infos_()
  , decoded_length_(PROTOBUF_ULONGLONG(0))
  , preferred_block_size_(PROTOBUF_ULONGLONG(0)){}
struct EncryptionInfoDefaultTypeInternal {
  constexpr EncryptionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptionInfoDefaultTypeInternal() {}
  union {
    EncryptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
constexpr EncryptionBlockInfo::EncryptionBlockInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_length_(PROTOBUF_ULONGLONG(0))
  , decoded_length_(PROTOBUF_ULONGLONG(0)){}
struct EncryptionBlockInfoDefaultTypeInternal {
  constexpr EncryptionBlockInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptionBlockInfoDefaultTypeInternal() {}
  union {
    EncryptionBlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptionBlockInfoDefaultTypeInternal _EncryptionBlockInfo_default_instance_;
constexpr ViewStateMetadata::ViewStateMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_()
  , _version_cached_byte_size_()
  , external_object_uuid_map_entries_()
  , read_version_()
  , _read_version_cached_byte_size_()
  , component_(nullptr)
  , version_uuid_(nullptr){}
struct ViewStateMetadataDefaultTypeInternal {
  constexpr ViewStateMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewStateMetadataDefaultTypeInternal() {}
  union {
    ViewStateMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewStateMetadataDefaultTypeInternal _ViewStateMetadata_default_instance_;
constexpr ObjectSerializationMetadata::ObjectSerializationMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_()
  , _version_cached_byte_size_()
  , datas_()
  , external_object_uuid_map_entries_()
  , read_version_()
  , _read_version_cached_byte_size_()
  , source_document_uuid_(nullptr)
  , version_uuid_(nullptr)
  , component_(nullptr)
  , data_metadata_map_(nullptr){}
struct ObjectSerializationMetadataDefaultTypeInternal {
  constexpr ObjectSerializationMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectSerializationMetadataDefaultTypeInternal() {}
  union {
    ObjectSerializationMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectSerializationMetadataDefaultTypeInternal _ObjectSerializationMetadata_default_instance_;
constexpr ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(PROTOBUF_ULONGLONG(0))
  , size_(PROTOBUF_ULONGLONG(0)){}
struct ObjectSerializationDirectory_EntryDefaultTypeInternal {
  constexpr ObjectSerializationDirectory_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectSerializationDirectory_EntryDefaultTypeInternal() {}
  union {
    ObjectSerializationDirectory_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectSerializationDirectory_EntryDefaultTypeInternal _ObjectSerializationDirectory_Entry_default_instance_;
constexpr ObjectSerializationDirectory::ObjectSerializationDirectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct ObjectSerializationDirectoryDefaultTypeInternal {
  constexpr ObjectSerializationDirectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectSerializationDirectoryDefaultTypeInternal() {}
  union {
    ObjectSerializationDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectSerializationDirectoryDefaultTypeInternal _ObjectSerializationDirectory_default_instance_;
constexpr DataPropertiesEntryV1::DataPropertiesEntryV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creation_version_()
  , _creation_version_cached_byte_size_()
  , digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_mismatched_digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_time_interval_since_1970_(0)
  , expects_matched_digest_(false){}
struct DataPropertiesEntryV1DefaultTypeInternal {
  constexpr DataPropertiesEntryV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataPropertiesEntryV1DefaultTypeInternal() {}
  union {
    DataPropertiesEntryV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataPropertiesEntryV1DefaultTypeInternal _DataPropertiesEntryV1_default_instance_;
constexpr DataPropertiesV1::DataPropertiesV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(){}
struct DataPropertiesV1DefaultTypeInternal {
  constexpr DataPropertiesV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataPropertiesV1DefaultTypeInternal() {}
  union {
    DataPropertiesV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataPropertiesV1DefaultTypeInternal _DataPropertiesV1_default_instance_;
constexpr DocumentMetadata::DocumentMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_properties_v1_(nullptr)
  , is_in_collaboration_mode_(false){}
struct DocumentMetadataDefaultTypeInternal {
  constexpr DocumentMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentMetadataDefaultTypeInternal() {}
  union {
    DocumentMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentMetadataDefaultTypeInternal _DocumentMetadata_default_instance_;
constexpr SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acknowledged_by_server_(false)
  , materialized_on_server_(false)
  , is_remote_data_ever_(false)
  , upload_status_(0)

  , revision_sequence_for_materialized_on_server_(0){}
struct SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal {
  constexpr SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal() {}
  union {
    SupportMetadata_DataCollaborationProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SupportMetadata_DataCollaborationPropertiesDefaultTypeInternal _SupportMetadata_DataCollaborationProperties_default_instance_;
constexpr SupportMetadata::SupportMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_collaboration_properties_()
  , is_in_collaboration_mode_(false){}
struct SupportMetadataDefaultTypeInternal {
  constexpr SupportMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SupportMetadataDefaultTypeInternal() {}
  union {
    SupportMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SupportMetadataDefaultTypeInternal _SupportMetadata_default_instance_;
}  // namespace TSP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSPArchiveMessages_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSPArchiveMessages_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSPArchiveMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSPArchiveMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, message_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, should_merge_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, type_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, version_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, length_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, field_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, base_message_index_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, diff_merge_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, diff_field_path_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, fields_to_remove_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, diff_read_version_),
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, path_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, type_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, unknown_field_rule_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, known_field_rule_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, known_field_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, known_field_feature_identifier_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, path_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, preferred_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, document_read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, document_write_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, external_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, is_stored_outside_object_archive_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, save_token_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, feature_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, component_read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, component_required_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, compression_algorithm_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, can_be_dropped_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, versioned_external_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, is_wasteful_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, ambiguous_object_identifiers_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, required_package_identifier_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  7,
  5,
  ~0u,
  6,
  ~0u,
  8,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, component_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, is_weak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference_ObjectReference, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, data_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, object_reference_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectUUIDMapEntry, uuid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::FeatureInfo, write_version_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, last_object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, revision_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, components_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, write_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, file_format_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, save_token_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, preferred_package_type_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, versioned_components_),
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, sequence_32_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentRevision, sequence_64_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, app_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, source_document_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, read_version_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, preferred_file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, document_resource_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, source_bookmark_data_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, remote_url_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, can_download_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, download_priority_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, attributes_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, encryption_info_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, last_mismatched_digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, unmaterialized_ranges_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, remote_data_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, remote_data_has_package_storage_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, upload_status_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, remote_data_mtime_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, pasteboard_external_file_path_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  12,
  17,
  8,
  9,
  6,
  10,
  15,
  13,
  14,
  16,
  7,
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, data_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap_DataMetadataMapEntry, data_metadata_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadataMap, data_metadata_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataMetadata, fallback_color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, decoded_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, preferred_block_size_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionInfo, block_infos_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, encoded_length_),
  PROTOBUF_FIELD_OFFSET(::TSP::EncryptionBlockInfo, decoded_length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, version_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, component_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, external_object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, read_version_),
  ~0u,
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, source_document_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, version_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, component_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, external_object_uuid_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, data_metadata_map_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationMetadata, read_version_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, offset_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory_Entry, size_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectSerializationDirectory, entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, expects_matched_digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, creation_time_interval_since_1970_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, creation_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesEntryV1, last_mismatched_digest_),
  0,
  3,
  2,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataPropertiesV1, properties_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSP::DocumentMetadata, data_properties_v1_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, acknowledged_by_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, materialized_on_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, revision_sequence_for_materialized_on_server_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, upload_status_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata_DataCollaborationProperties, is_remote_data_ever_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSP::SupportMetadata, data_collaboration_properties_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TSP::ArchiveInfo)},
  { 11, 27, sizeof(::TSP::MessageInfo)},
  { 38, 51, sizeof(::TSP::FieldInfo)},
  { 59, -1, sizeof(::TSP::FieldPath)},
  { 65, 89, sizeof(::TSP::ComponentInfo)},
  { 108, 116, sizeof(::TSP::ComponentExternalReference)},
  { 119, 126, sizeof(::TSP::ComponentDataReference_ObjectReference)},
  { 128, 135, sizeof(::TSP::ComponentDataReference)},
  { 137, 144, sizeof(::TSP::ObjectUUIDMapEntry)},
  { 146, 154, sizeof(::TSP::FeatureInfo)},
  { 157, 173, sizeof(::TSP::PackageMetadata)},
  { 184, 192, sizeof(::TSP::DocumentRevision)},
  { 195, 206, sizeof(::TSP::PasteboardMetadata)},
  { 212, 235, sizeof(::TSP::DataInfo)},
  { 253, 260, sizeof(::TSP::DataMetadataMap_DataMetadataMapEntry)},
  { 262, -1, sizeof(::TSP::DataMetadataMap)},
  { 268, 274, sizeof(::TSP::DataMetadata)},
  { 275, 283, sizeof(::TSP::EncryptionInfo)},
  { 286, 293, sizeof(::TSP::EncryptionBlockInfo)},
  { 295, 305, sizeof(::TSP::ViewStateMetadata)},
  { 310, 323, sizeof(::TSP::ObjectSerializationMetadata)},
  { 331, 339, sizeof(::TSP::ObjectSerializationDirectory_Entry)},
  { 342, -1, sizeof(::TSP::ObjectSerializationDirectory)},
  { 348, 358, sizeof(::TSP::DataPropertiesEntryV1)},
  { 363, -1, sizeof(::TSP::DataPropertiesV1)},
  { 369, 376, sizeof(::TSP::DocumentMetadata)},
  { 378, 389, sizeof(::TSP::SupportMetadata_DataCollaborationProperties)},
  { 395, 402, sizeof(::TSP::SupportMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ArchiveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_MessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_FieldInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_FieldPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ComponentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ComponentExternalReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ComponentDataReference_ObjectReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ComponentDataReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectUUIDMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_FeatureInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_PackageMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DocumentRevision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_PasteboardMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataMetadataMap_DataMetadataMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataMetadataMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_EncryptionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_EncryptionBlockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ViewStateMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectSerializationMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectSerializationDirectory_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectSerializationDirectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataPropertiesEntryV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataPropertiesV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DocumentMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SupportMetadata_DataCollaborationProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SupportMetadata_default_instance_),
};

const char descriptor_table_protodef_TSPArchiveMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSPArchiveMessages.proto\022\003TSP\032\021TSPMess"
  "ages.proto\"`\n\013ArchiveInfo\022\022\n\nidentifier\030"
  "\001 \001(\004\022\'\n\rmessage_infos\030\002 \003(\0132\020.TSP.Messa"
  "geInfo\022\024\n\014should_merge\030\003 \001(\010\"\317\002\n\013Message"
  "Info\022\014\n\004type\030\001 \002(\r\022\023\n\007version\030\002 \003(\rB\002\020\001\022"
  "\016\n\006length\030\003 \002(\r\022#\n\013field_infos\030\004 \003(\0132\016.T"
  "SP.FieldInfo\022\035\n\021object_references\030\005 \003(\004B"
  "\002\020\001\022\033\n\017data_references\030\006 \003(\004B\002\020\001\022\032\n\022base"
  "_message_index\030\007 \001(\r\022\036\n\022diff_merge_versi"
  "on\030\010 \003(\rB\002\020\001\022\'\n\017diff_field_path\030\t \001(\0132\016."
  "TSP.FieldPath\022(\n\020fields_to_remove\030\n \003(\0132"
  "\016.TSP.FieldPath\022\035\n\021diff_read_version\030\013 \003"
  "(\rB\002\020\001\"\223\005\n\tFieldInfo\022\034\n\004path\030\001 \002(\0132\016.TSP"
  ".FieldPath\022(\n\004type\030\002 \001(\0162\023.TSP.FieldInfo"
  ".Type:\005Value\022[\n\022unknown_field_rule\030\003 \001(\016"
  "2\037.TSP.FieldInfo.UnknownFieldRule:\036Ignor"
  "eAndPreserveUntilModified\022\035\n\021object_refe"
  "rences\030\004 \003(\004B\002\020\001\022\033\n\017data_references\030\005 \003("
  "\004B\002\020\001\022=\n\020known_field_rule\030\006 \001(\0162\035.TSP.Fi"
  "eldInfo.KnownFieldRule:\004None\022\037\n\023known_fi"
  "eld_version\030\007 \003(\rB\002\020\001\022&\n\036known_field_fea"
  "ture_identifier\030\010 \001(\t\"F\n\004Type\022\t\n\005Value\020\000"
  "\022\023\n\017ObjectReference\020\001\022\021\n\rDataReference\020\002"
  "\022\013\n\007Message\020\003\"|\n\020UnknownFieldRule\022\"\n\036Ign"
  "oreAndPreserveUntilModified\020\000\022\025\n\021IgnoreA"
  "ndPreserve\020\001\022\022\n\016MustUnderstand\020\002\022\031\n\014NotS"
  "upported\020\377\377\377\377\377\377\377\377\377\001\"W\n\016KnownFieldRule\022\010\n"
  "\004None\020\000\022#\n\037PreserveNewerValueUntilModifi"
  "ed\020\001\022\026\n\022PreserveNewerValue\020\002\"\035\n\tFieldPat"
  "h\022\020\n\004path\030\001 \003(\rB\002\020\001\"\344\005\n\rComponentInfo\022\022\n"
  "\nidentifier\030\001 \002(\004\022\031\n\021preferred_locator\030\002"
  " \002(\t\022\017\n\007locator\030\003 \001(\t\022!\n\025document_read_v"
  "ersion\030\004 \003(\rB\002\020\001\022\"\n\026document_write_versi"
  "on\030\005 \003(\rB\002\020\001\022<\n\023external_references\030\006 \003("
  "\0132\037.TSP.ComponentExternalReference\0224\n\017da"
  "ta_references\030\007 \003(\0132\033.TSP.ComponentDataR"
  "eference\022/\n is_stored_outside_object_arc"
  "hive\030\n \001(\010:\005false\0228\n\027object_uuid_map_ent"
  "ries\030\013 \003(\0132\027.TSP.ObjectUUIDMapEntry\022\025\n\ns"
  "ave_token\030\014 \001(\004:\0010\022\'\n\rfeature_infos\030\r \003("
  "\0132\020.TSP.FeatureInfo\022\"\n\026component_read_ve"
  "rsion\030\016 \003(\rB\002\020\001\022&\n\032component_required_ve"
  "rsion\030\017 \003(\rB\002\020\001\022\035\n\025compression_algorithm"
  "\030\020 \001(\r\022\026\n\016can_be_dropped\030\021 \001(\010\022F\n\035versio"
  "ned_external_references\030\022 \003(\0132\037.TSP.Comp"
  "onentExternalReference\022\023\n\013is_wasteful\030\023 "
  "\001(\010\022(\n\034ambiguous_object_identifiers\030\024 \003("
  "\004B\002\020\001\022#\n\033required_package_identifier\030\025 \001"
  "(\r\"f\n\032ComponentExternalReference\022\034\n\024comp"
  "onent_identifier\030\001 \002(\004\022\031\n\021object_identif"
  "ier\030\002 \001(\004\022\017\n\007is_weak\030\003 \001(\010\"\272\001\n\026Component"
  "DataReference\022\027\n\017data_identifier\030\001 \002(\004\022J"
  "\n\025object_reference_list\030\002 \003(\0132+.TSP.Comp"
  "onentDataReference.ObjectReference\032;\n\017Ob"
  "jectReference\022\031\n\021object_identifier\030\001 \002(\004"
  "\022\r\n\005count\030\002 \002(\r\"A\n\022ObjectUUIDMapEntry\022\022\n"
  "\nidentifier\030\001 \002(\004\022\027\n\004uuid\030\002 \002(\0132\t.TSP.UU"
  "ID\"V\n\013FeatureInfo\022\022\n\nidentifier\030\001 \002(\t\022\030\n"
  "\014read_version\030\002 \003(\rB\002\020\001\022\031\n\rwrite_version"
  "\030\003 \003(\rB\002\020\001\"\360\003\n\017PackageMetadata\022\036\n\026last_o"
  "bject_identifier\030\001 \002(\004\022\'\n\010revision\030\002 \001(\013"
  "2\025.TSP.DocumentRevision\022&\n\ncomponents\030\003 "
  "\003(\0132\022.TSP.ComponentInfo\022\034\n\005datas\030\004 \003(\0132\r"
  ".TSP.DataInfo\022\030\n\014read_version\030\005 \003(\rB\002\020\001\022"
  "\031\n\rwrite_version\030\006 \003(\rB\002\020\001\022\037\n\023file_forma"
  "t_version\030\007 \003(\rB\002\020\001\022\025\n\nsave_token\030\010 \001(\004:"
  "\0010\022I\n\026preferred_package_type\030\t \001(\0162 .TSP"
  ".PackageMetadata.PackageType:\007Default\022)\n"
  "\021data_metadata_map\030\n \001(\0132\016.TSP.Reference"
  "\0220\n\024versioned_components\030\013 \003(\0132\022.TSP.Com"
  "ponentInfo\"9\n\013PackageType\022\013\n\007Default\020\000\022\r"
  "\n\tDirectory\020\001\022\016\n\nSingleFile\020\002\"V\n\020Documen"
  "tRevision\022\026\n\013sequence_32\030\003 \001(\005:\0010\022\022\n\nide"
  "ntifier\030\002 \001(\t\022\026\n\013sequence_64\030\001 \001(\004:\0010\"\307\001"
  "\n\022PasteboardMetadata\022\023\n\007version\030\001 \003(\rB\002\020"
  "\001\022\020\n\010app_name\030\002 \002(\t\022\034\n\005datas\030\003 \003(\0132\r.TSP"
  ".DataInfo\022\'\n\024source_document_uuid\030\005 \001(\0132"
  "\t.TSP.UUID\022)\n\021data_metadata_map\030\006 \001(\0132\016."
  "TSP.Reference\022\030\n\014read_version\030\007 \003(\rB\002\020\001\""
  "\272\005\n\010DataInfo\022\022\n\nidentifier\030\001 \002(\004\022\016\n\006dige"
  "st\030\002 \002(\014\022\033\n\023preferred_file_name\030\003 \002(\t\022\021\n"
  "\tfile_name\030\004 \001(\t\022!\n\031document_resource_lo"
  "cator\030\005 \001(\t\022\034\n\024source_bookmark_data\030\006 \001("
  "\014\022\022\n\nremote_url\030\007 \001(\t\022\033\n\014can_download\030\010 "
  "\001(\010:\005false\022B\n\021download_priority\030\t \001(\0162\036."
  "TSP.DataInfo.DownloadPriority:\007Default\022\'"
  "\n\nattributes\030\n \001(\0132\023.TSP.DataAttributes\022"
  ",\n\017encryption_info\030\013 \001(\0132\023.TSP.Encryptio"
  "nInfo\022\036\n\026last_mismatched_digest\030\014 \001(\014\022,\n"
  "\025unmaterialized_ranges\030\r \001(\0132\r.TSP.Index"
  "Set\022\032\n\022remote_data_length\030\016 \001(\004\022.\n\037remot"
  "e_data_has_package_storage\030\017 \001(\010:\005false\022"
  "F\n\rupload_status\030\020 \001(\0162\025.TSP.DataUploadS"
  "tatus:\030DataUploadStatus_Pending\022\031\n\021remot"
  "e_data_mtime\030\021 \001(\001\022%\n\035pasteboard_externa"
  "l_file_path\030c \001(\t\")\n\020DownloadPriority\022\010\n"
  "\004High\020\000\022\013\n\007Default\020\001\"\263\001\n\017DataMetadataMap"
  "\022H\n\025data_metadata_entries\030\001 \003(\0132).TSP.Da"
  "taMetadataMap.DataMetadataMapEntry\032V\n\024Da"
  "taMetadataMapEntry\022\027\n\017data_identifier\030\001 "
  "\002(\004\022%\n\rdata_metadata\030\002 \002(\0132\016.TSP.Referen"
  "ce\"2\n\014DataMetadata\022\"\n\016fallback_color\030\001 \001"
  "(\0132\n.TSP.Color\"u\n\016EncryptionInfo\022\026\n\016deco"
  "ded_length\030\001 \001(\004\022\034\n\024preferred_block_size"
  "\030\002 \001(\004\022-\n\013block_infos\030\003 \003(\0132\030.TSP.Encryp"
  "tionBlockInfo\"E\n\023EncryptionBlockInfo\022\026\n\016"
  "encoded_length\030\001 \002(\004\022\026\n\016decoded_length\030\002"
  " \001(\004\"\315\001\n\021ViewStateMetadata\022\023\n\007version\030\001 "
  "\003(\rB\002\020\001\022\037\n\014version_uuid\030\004 \001(\0132\t.TSP.UUID"
  "\022%\n\tcomponent\030\003 \002(\0132\022.TSP.ComponentInfo\022"
  "A\n external_object_uuid_map_entries\030\005 \003("
  "\0132\027.TSP.ObjectUUIDMapEntry\022\030\n\014read_versi"
  "on\030\006 \003(\rB\002\020\001\"\311\002\n\033ObjectSerializationMeta"
  "data\022\023\n\007version\030\001 \003(\rB\002\020\001\022\'\n\024source_docu"
  "ment_uuid\030\002 \001(\0132\t.TSP.UUID\022\037\n\014version_uu"
  "id\030\003 \001(\0132\t.TSP.UUID\022%\n\tcomponent\030\004 \002(\0132\022"
  ".TSP.ComponentInfo\022\034\n\005datas\030\005 \003(\0132\r.TSP."
  "DataInfo\022A\n external_object_uuid_map_ent"
  "ries\030\006 \003(\0132\027.TSP.ObjectUUIDMapEntry\022)\n\021d"
  "ata_metadata_map\030\007 \001(\0132\016.TSP.Reference\022\030"
  "\n\014read_version\030\010 \003(\rB\002\020\001\"\220\001\n\034ObjectSeria"
  "lizationDirectory\0228\n\007entries\030\001 \003(\0132\'.TSP"
  ".ObjectSerializationDirectory.Entry\0326\n\005E"
  "ntry\022\017\n\007locator\030\001 \002(\t\022\016\n\006offset\030\002 \002(\004\022\014\n"
  "\004size\030\003 \002(\004\"\260\001\n\025DataPropertiesEntryV1\022\016\n"
  "\006digest\030\001 \002(\014\022\036\n\026expects_matched_digest\030"
  "\002 \001(\010\022)\n!creation_time_interval_since_19"
  "70\030\003 \001(\001\022\034\n\020creation_version\030\004 \003(\rB\002\020\001\022\036"
  "\n\026last_mismatched_digest\030\005 \001(\014\"B\n\020DataPr"
  "opertiesV1\022.\n\nproperties\030\001 \003(\0132\032.TSP.Dat"
  "aPropertiesEntryV1\"g\n\020DocumentMetadata\022 "
  "\n\030is_in_collaboration_mode\030\001 \001(\010\0221\n\022data"
  "_properties_v1\030\003 \001(\0132\025.TSP.DataPropertie"
  "sV1\"\257\003\n\017SupportMetadata\022 \n\030is_in_collabo"
  "ration_mode\030\001 \001(\010\022W\n\035data_collaboration_"
  "properties\030\002 \003(\01320.TSP.SupportMetadata.D"
  "ataCollaborationProperties\032\240\002\n\033DataColla"
  "borationProperties\022\016\n\006digest\030\001 \002(\014\022%\n\026ac"
  "knowledged_by_server\030\002 \001(\010:\005false\022%\n\026mat"
  "erialized_on_server\030\003 \001(\010:\005false\0227\n,revi"
  "sion_sequence_for_materialized_on_server"
  "\030\005 \001(\005:\0010\022F\n\rupload_status\030\004 \001(\0162\025.TSP.D"
  "ataUploadStatus:\030DataUploadStatus_Pendin"
  "g\022\"\n\023is_remote_data_ever\030\006 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSPArchiveMessages_2eproto_deps[1] = {
  &::descriptor_table_TSPMessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSPArchiveMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSPArchiveMessages_2eproto = {
  false, false, 5757, descriptor_table_protodef_TSPArchiveMessages_2eproto, "TSPArchiveMessages.proto", 
  &descriptor_table_TSPArchiveMessages_2eproto_once, descriptor_table_TSPArchiveMessages_2eproto_deps, 1, 28,
  schemas, file_default_instances, TableStruct_TSPArchiveMessages_2eproto::offsets,
  file_level_metadata_TSPArchiveMessages_2eproto, file_level_enum_descriptors_TSPArchiveMessages_2eproto, file_level_service_descriptors_TSPArchiveMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSPArchiveMessages_2eproto_getter() {
  return &descriptor_table_TSPArchiveMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSPArchiveMessages_2eproto(&descriptor_table_TSPArchiveMessages_2eproto);
namespace TSP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[0];
}
bool FieldInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FieldInfo_Type FieldInfo::Value;
constexpr FieldInfo_Type FieldInfo::ObjectReference;
constexpr FieldInfo_Type FieldInfo::DataReference;
constexpr FieldInfo_Type FieldInfo::Message;
constexpr FieldInfo_Type FieldInfo::Type_MIN;
constexpr FieldInfo_Type FieldInfo::Type_MAX;
constexpr int FieldInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_UnknownFieldRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[1];
}
bool FieldInfo_UnknownFieldRule_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FieldInfo_UnknownFieldRule FieldInfo::IgnoreAndPreserveUntilModified;
constexpr FieldInfo_UnknownFieldRule FieldInfo::IgnoreAndPreserve;
constexpr FieldInfo_UnknownFieldRule FieldInfo::MustUnderstand;
constexpr FieldInfo_UnknownFieldRule FieldInfo::NotSupported;
constexpr FieldInfo_UnknownFieldRule FieldInfo::UnknownFieldRule_MIN;
constexpr FieldInfo_UnknownFieldRule FieldInfo::UnknownFieldRule_MAX;
constexpr int FieldInfo::UnknownFieldRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_KnownFieldRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[2];
}
bool FieldInfo_KnownFieldRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FieldInfo_KnownFieldRule FieldInfo::None;
constexpr FieldInfo_KnownFieldRule FieldInfo::PreserveNewerValueUntilModified;
constexpr FieldInfo_KnownFieldRule FieldInfo::PreserveNewerValue;
constexpr FieldInfo_KnownFieldRule FieldInfo::KnownFieldRule_MIN;
constexpr FieldInfo_KnownFieldRule FieldInfo::KnownFieldRule_MAX;
constexpr int FieldInfo::KnownFieldRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackageMetadata_PackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[3];
}
bool PackageMetadata_PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PackageMetadata_PackageType PackageMetadata::Default;
constexpr PackageMetadata_PackageType PackageMetadata::Directory;
constexpr PackageMetadata_PackageType PackageMetadata::SingleFile;
constexpr PackageMetadata_PackageType PackageMetadata::PackageType_MIN;
constexpr PackageMetadata_PackageType PackageMetadata::PackageType_MAX;
constexpr int PackageMetadata::PackageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataInfo_DownloadPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[4];
}
bool DataInfo_DownloadPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataInfo_DownloadPriority DataInfo::High;
constexpr DataInfo_DownloadPriority DataInfo::Default;
constexpr DataInfo_DownloadPriority DataInfo::DownloadPriority_MIN;
constexpr DataInfo_DownloadPriority DataInfo::DownloadPriority_MAX;
constexpr int DataInfo::DownloadPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ArchiveInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArchiveInfo>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArchiveInfo::ArchiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ArchiveInfo)
}
ArchiveInfo::ArchiveInfo(const ArchiveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      message_infos_(from.message_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_merge_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(should_merge_));
  // @@protoc_insertion_point(copy_constructor:TSP.ArchiveInfo)
}

void ArchiveInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_merge_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(should_merge_));
}

ArchiveInfo::~ArchiveInfo() {
  // @@protoc_insertion_point(destructor:TSP.ArchiveInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArchiveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArchiveInfo::ArenaDtor(void* object) {
  ArchiveInfo* _this = reinterpret_cast< ArchiveInfo* >(object);
  (void)_this;
}
void ArchiveInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArchiveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArchiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ArchiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_merge_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(should_merge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchiveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.MessageInfo message_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool should_merge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_should_merge(&has_bits);
          should_merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchiveInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ArchiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // repeated .TSP.MessageInfo message_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_message_infos(i), target, stream);
  }

  // optional bool should_merge = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_should_merge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ArchiveInfo)
  return target;
}

size_t ArchiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ArchiveInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.MessageInfo message_infos = 2;
  total_size += 1UL * this->_internal_message_infos_size();
  for (const auto& msg : this->message_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_identifier());
    }

    // optional bool should_merge = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchiveInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ArchiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchiveInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchiveInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ArchiveInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ArchiveInfo)
    MergeFrom(*source);
  }
}

void ArchiveInfo::MergeFrom(const ArchiveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ArchiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_infos_.MergeFrom(from.message_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      should_merge_ = from.should_merge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArchiveInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ArchiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveInfo::CopyFrom(const ArchiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ArchiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(message_infos_)) return false;
  return true;
}

void ArchiveInfo::InternalSwap(ArchiveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_infos_.InternalSwap(&other->message_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArchiveInfo, should_merge_)
      + sizeof(ArchiveInfo::should_merge_)
      - PROTOBUF_FIELD_OFFSET(ArchiveInfo, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[0]);
}

// ===================================================================

class MessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_message_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::FieldPath& diff_field_path(const MessageInfo* msg);
  static void set_has_diff_field_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::FieldPath&
MessageInfo::_Internal::diff_field_path(const MessageInfo* msg) {
  return *msg->diff_field_path_;
}
MessageInfo::MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_(arena),
  field_infos_(arena),
  object_references_(arena),
  data_references_(arena),
  diff_merge_version_(arena),
  fields_to_remove_(arena),
  diff_read_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      version_(from.version_),
      field_infos_(from.field_infos_),
      object_references_(from.object_references_),
      data_references_(from.data_references_),
      diff_merge_version_(from.diff_merge_version_),
      fields_to_remove_(from.fields_to_remove_),
      diff_read_version_(from.diff_read_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_diff_field_path()) {
    diff_field_path_ = new ::TSP::FieldPath(*from.diff_field_path_);
  } else {
    diff_field_path_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_message_index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(base_message_index_));
  // @@protoc_insertion_point(copy_constructor:TSP.MessageInfo)
}

void MessageInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&diff_field_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_message_index_) -
    reinterpret_cast<char*>(&diff_field_path_)) + sizeof(base_message_index_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:TSP.MessageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete diff_field_path_;
}

void MessageInfo::ArenaDtor(void* object) {
  MessageInfo* _this = reinterpret_cast< MessageInfo* >(object);
  (void)_this;
}
void MessageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.Clear();
  field_infos_.Clear();
  object_references_.Clear();
  data_references_.Clear();
  diff_merge_version_.Clear();
  fields_to_remove_.Clear();
  diff_read_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(diff_field_path_ != nullptr);
    diff_field_path_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_message_index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(base_message_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.FieldInfo field_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 object_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 data_references = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_message_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_base_message_index(&has_bits);
          base_message_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 diff_merge_version = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_diff_merge_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_diff_merge_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.FieldPath diff_field_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_field_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.FieldPath fields_to_remove = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields_to_remove(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 diff_read_version = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_diff_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_diff_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 version = 2 [packed = true];
  {
    int byte_size = _version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_version(), byte_size, target);
    }
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_field_infos(i), target, stream);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    int byte_size = _object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    int byte_size = _data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_data_references(), byte_size, target);
    }
  }

  // optional uint32 base_message_index = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_base_message_index(), target);
  }

  // repeated uint32 diff_merge_version = 8 [packed = true];
  {
    int byte_size = _diff_merge_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_diff_merge_version(), byte_size, target);
    }
  }

  // optional .TSP.FieldPath diff_field_path = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::diff_field_path(this), target, stream);
  }

  // repeated .TSP.FieldPath fields_to_remove = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_to_remove_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_fields_to_remove(i), target, stream);
  }

  // repeated uint32 diff_read_version = 11 [packed = true];
  {
    int byte_size = _diff_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_diff_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.MessageInfo)
  return target;
}

size_t MessageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  return total_size;
}
size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 length = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  total_size += 1UL * this->_internal_field_infos_size();
  for (const auto& msg : this->field_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 diff_merge_version = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->diff_merge_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _diff_merge_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.FieldPath fields_to_remove = 10;
  total_size += 1UL * this->_internal_fields_to_remove_size();
  for (const auto& msg : this->fields_to_remove_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 diff_read_version = 11 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->diff_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _diff_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .TSP.FieldPath diff_field_path = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diff_field_path_);
  }

  // optional uint32 base_message_index = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_message_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.MessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_.MergeFrom(from.version_);
  field_infos_.MergeFrom(from.field_infos_);
  object_references_.MergeFrom(from.object_references_);
  data_references_.MergeFrom(from.data_references_);
  diff_merge_version_.MergeFrom(from.diff_merge_version_);
  fields_to_remove_.MergeFrom(from.fields_to_remove_);
  diff_read_version_.MergeFrom(from.diff_read_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_diff_field_path()->::TSP::FieldPath::MergeFrom(from._internal_diff_field_path());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      base_message_index_ = from.base_message_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_infos_)) return false;
  return true;
}

void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.InternalSwap(&other->version_);
  field_infos_.InternalSwap(&other->field_infos_);
  object_references_.InternalSwap(&other->object_references_);
  data_references_.InternalSwap(&other->data_references_);
  diff_merge_version_.InternalSwap(&other->diff_merge_version_);
  fields_to_remove_.InternalSwap(&other->fields_to_remove_);
  diff_read_version_.InternalSwap(&other->diff_read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageInfo, base_message_index_)
      + sizeof(MessageInfo::base_message_index_)
      - PROTOBUF_FIELD_OFFSET(MessageInfo, diff_field_path_)>(
          reinterpret_cast<char*>(&diff_field_path_),
          reinterpret_cast<char*>(&other->diff_field_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[1]);
}

// ===================================================================

class FieldInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldInfo>()._has_bits_);
  static const ::TSP::FieldPath& path(const FieldInfo* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown_field_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_known_field_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_known_field_feature_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::FieldPath&
FieldInfo::_Internal::path(const FieldInfo* msg) {
  return *msg->path_;
}
FieldInfo::FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_references_(arena),
  data_references_(arena),
  known_field_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_references_(from.object_references_),
      data_references_(from.data_references_),
      known_field_version_(from.known_field_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  known_field_feature_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_known_field_feature_identifier()) {
    known_field_feature_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_known_field_feature_identifier(), 
      GetArena());
  }
  if (from._internal_has_path()) {
    path_ = new ::TSP::FieldPath(*from.path_);
  } else {
    path_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&known_field_rule_) -
    reinterpret_cast<char*>(&type_)) + sizeof(known_field_rule_));
  // @@protoc_insertion_point(copy_constructor:TSP.FieldInfo)
}

void FieldInfo::SharedCtor() {
known_field_feature_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&known_field_rule_) -
    reinterpret_cast<char*>(&path_)) + sizeof(known_field_rule_));
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:TSP.FieldInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  known_field_feature_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void FieldInfo::ArenaDtor(void* object) {
  FieldInfo* _this = reinterpret_cast< FieldInfo* >(object);
  (void)_this;
}
void FieldInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_references_.Clear();
  data_references_.Clear();
  known_field_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      known_field_feature_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(path_ != nullptr);
      path_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&known_field_rule_) -
        reinterpret_cast<char*>(&type_)) + sizeof(known_field_rule_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.FieldPath path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.Type type = 2 [default = Value];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::TSP::FieldInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_UnknownFieldRule_IsValid(val))) {
            _internal_set_unknown_field_rule(static_cast<::TSP::FieldInfo_UnknownFieldRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint64 object_references = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 data_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_KnownFieldRule_IsValid(val))) {
            _internal_set_known_field_rule(static_cast<::TSP::FieldInfo_KnownFieldRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 known_field_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_known_field_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_known_field_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string known_field_feature_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_known_field_feature_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.FieldInfo.known_field_feature_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.FieldPath path = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // optional .TSP.FieldInfo.Type type = 2 [default = Value];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_unknown_field_rule(), target);
  }

  // repeated uint64 object_references = 4 [packed = true];
  {
    int byte_size = _object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    int byte_size = _data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_data_references(), byte_size, target);
    }
  }

  // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_known_field_rule(), target);
  }

  // repeated uint32 known_field_version = 7 [packed = true];
  {
    int byte_size = _known_field_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_known_field_version(), byte_size, target);
    }
  }

  // optional string known_field_feature_identifier = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_known_field_feature_identifier().data(), static_cast<int>(this->_internal_known_field_feature_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.FieldInfo.known_field_feature_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_known_field_feature_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldInfo)
  size_t total_size = 0;

  // required .TSP.FieldPath path = 1;
  if (_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_references = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 known_field_version = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->known_field_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _known_field_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string known_field_feature_identifier = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_known_field_feature_identifier());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.FieldInfo.Type type = 2 [default = Value];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .TSP.FieldInfo.UnknownFieldRule unknown_field_rule = 3 [default = IgnoreAndPreserveUntilModified];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unknown_field_rule());
    }

    // optional .TSP.FieldInfo.KnownFieldRule known_field_rule = 6 [default = None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_known_field_rule());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.FieldInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.FieldInfo)
    MergeFrom(*source);
  }
}

void FieldInfo::MergeFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_references_.MergeFrom(from.object_references_);
  data_references_.MergeFrom(from.data_references_);
  known_field_version_.MergeFrom(from.known_field_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_known_field_feature_identifier(from._internal_known_field_feature_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_path()->::TSP::FieldPath::MergeFrom(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      unknown_field_rule_ = from.unknown_field_rule_;
    }
    if (cached_has_bits & 0x00000010u) {
      known_field_rule_ = from.known_field_rule_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_references_.InternalSwap(&other->object_references_);
  data_references_.InternalSwap(&other->data_references_);
  known_field_version_.InternalSwap(&other->known_field_version_);
  known_field_feature_identifier_.Swap(&other->known_field_feature_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldInfo, known_field_rule_)
      + sizeof(FieldInfo::known_field_rule_)
      - PROTOBUF_FIELD_OFFSET(FieldInfo, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[2]);
}

// ===================================================================

class FieldPath::_Internal {
 public:
};

FieldPath::FieldPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldPath)
}
FieldPath::FieldPath(const FieldPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.FieldPath)
}

void FieldPath::SharedCtor() {
}

FieldPath::~FieldPath() {
  // @@protoc_insertion_point(destructor:TSP.FieldPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FieldPath::ArenaDtor(void* object) {
  FieldPath* _this = reinterpret_cast< FieldPath* >(object);
  (void)_this;
}
void FieldPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldPath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 path = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    int byte_size = _path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldPath)
  return target;
}

size_t FieldPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->path_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.FieldPath)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.FieldPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.FieldPath)
    MergeFrom(*source);
  }
}

void FieldPath::MergeFrom(const FieldPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
}

void FieldPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.FieldPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldPath::CopyFrom(const FieldPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldPath::IsInitialized() const {
  return true;
}

void FieldPath::InternalSwap(FieldPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[3]);
}

// ===================================================================

class ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentInfo>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_stored_outside_object_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_save_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compression_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_be_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_wasteful(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_package_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ComponentInfo::ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  document_read_version_(arena),
  document_write_version_(arena),
  external_references_(arena),
  data_references_(arena),
  object_uuid_map_entries_(arena),
  feature_infos_(arena),
  component_read_version_(arena),
  component_required_version_(arena),
  versioned_external_references_(arena),
  ambiguous_object_identifiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentInfo)
}
ComponentInfo::ComponentInfo(const ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      document_read_version_(from.document_read_version_),
      document_write_version_(from.document_write_version_),
      external_references_(from.external_references_),
      data_references_(from.data_references_),
      object_uuid_map_entries_(from.object_uuid_map_entries_),
      feature_infos_(from.feature_infos_),
      component_read_version_(from.component_read_version_),
      component_required_version_(from.component_required_version_),
      versioned_external_references_(from.versioned_external_references_),
      ambiguous_object_identifiers_(from.ambiguous_object_identifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preferred_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_locator()) {
    preferred_locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_locator(), 
      GetArena());
  }
  locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locator()) {
    locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locator(), 
      GetArena());
  }
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_package_identifier_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(required_package_identifier_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentInfo)
}

void ComponentInfo::SharedCtor() {
preferred_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_package_identifier_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(required_package_identifier_));
}

ComponentInfo::~ComponentInfo() {
  // @@protoc_insertion_point(destructor:TSP.ComponentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preferred_locator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentInfo::ArenaDtor(void* object) {
  ComponentInfo* _this = reinterpret_cast< ComponentInfo* >(object);
  (void)_this;
}
void ComponentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_read_version_.Clear();
  document_write_version_.Clear();
  external_references_.Clear();
  data_references_.Clear();
  object_uuid_map_entries_.Clear();
  feature_infos_.Clear();
  component_read_version_.Clear();
  component_required_version_.Clear();
  versioned_external_references_.Clear();
  ambiguous_object_identifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      preferred_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      locator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compression_algorithm_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(compression_algorithm_));
  }
  required_package_identifier_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string preferred_locator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_preferred_locator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.ComponentInfo.preferred_locator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_locator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.ComponentInfo.locator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 document_read_version = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_document_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_document_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 document_write_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_document_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_document_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentExternalReference external_references = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentDataReference data_references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_stored_outside_object_archive = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_stored_outside_object_archive(&has_bits);
          is_stored_outside_object_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 save_token = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_save_token(&has_bits);
          save_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.FeatureInfo feature_infos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 component_read_version = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_component_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_component_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 component_required_version = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_component_required_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_component_required_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 compression_algorithm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_compression_algorithm(&has_bits);
          compression_algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_be_dropped = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_can_be_dropped(&has_bits);
          can_be_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_versioned_external_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_wasteful = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_wasteful(&has_bits);
          is_wasteful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ambiguous_object_identifiers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_ambiguous_object_identifiers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_package_identifier = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_required_package_identifier(&has_bits);
          required_package_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required string preferred_locator = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_locator().data(), static_cast<int>(this->_internal_preferred_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.preferred_locator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preferred_locator(), target);
  }

  // optional string locator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locator().data(), static_cast<int>(this->_internal_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.locator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locator(), target);
  }

  // repeated uint32 document_read_version = 4 [packed = true];
  {
    int byte_size = _document_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_document_read_version(), byte_size, target);
    }
  }

  // repeated uint32 document_write_version = 5 [packed = true];
  {
    int byte_size = _document_write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_document_write_version(), byte_size, target);
    }
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_external_references(i), target, stream);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_data_references(i), target, stream);
  }

  // optional bool is_stored_outside_object_archive = 10 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_stored_outside_object_archive(), target);
  }

  // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_uuid_map_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_object_uuid_map_entries(i), target, stream);
  }

  // optional uint64 save_token = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_save_token(), target);
  }

  // repeated .TSP.FeatureInfo feature_infos = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_feature_infos(i), target, stream);
  }

  // repeated uint32 component_read_version = 14 [packed = true];
  {
    int byte_size = _component_read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_component_read_version(), byte_size, target);
    }
  }

  // repeated uint32 component_required_version = 15 [packed = true];
  {
    int byte_size = _component_required_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_component_required_version(), byte_size, target);
    }
  }

  // optional uint32 compression_algorithm = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_compression_algorithm(), target);
  }

  // optional bool can_be_dropped = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_can_be_dropped(), target);
  }

  // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versioned_external_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_versioned_external_references(i), target, stream);
  }

  // optional bool is_wasteful = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_wasteful(), target);
  }

  // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
  {
    int byte_size = _ambiguous_object_identifiers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          20, _internal_ambiguous_object_identifiers(), byte_size, target);
    }
  }

  // optional uint32 required_package_identifier = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_required_package_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentInfo)
  return target;
}

size_t ComponentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (_internal_has_preferred_locator()) {
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }

  return total_size;
}
size_t ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());

    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 document_read_version = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->document_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _document_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 document_write_version = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->document_write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _document_write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  total_size += 1UL * this->_internal_external_references_size();
  for (const auto& msg : this->external_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  total_size += 1UL * this->_internal_data_references_size();
  for (const auto& msg : this->data_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ObjectUUIDMapEntry object_uuid_map_entries = 11;
  total_size += 1UL * this->_internal_object_uuid_map_entries_size();
  for (const auto& msg : this->object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.FeatureInfo feature_infos = 13;
  total_size += 1UL * this->_internal_feature_infos_size();
  for (const auto& msg : this->feature_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 component_read_version = 14 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->component_read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _component_read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 component_required_version = 15 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->component_required_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _component_required_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentExternalReference versioned_external_references = 18;
  total_size += 2UL * this->_internal_versioned_external_references_size();
  for (const auto& msg : this->versioned_external_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 ambiguous_object_identifiers = 20 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->ambiguous_object_identifiers_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ambiguous_object_identifiers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string locator = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 save_token = 12 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_save_token());
    }

    // optional bool is_stored_outside_object_archive = 10 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_be_dropped = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_wasteful = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 compression_algorithm = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_compression_algorithm());
    }

  }
  // optional uint32 required_package_identifier = 21;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_required_package_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ComponentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ComponentInfo)
    MergeFrom(*source);
  }
}

void ComponentInfo::MergeFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  document_read_version_.MergeFrom(from.document_read_version_);
  document_write_version_.MergeFrom(from.document_write_version_);
  external_references_.MergeFrom(from.external_references_);
  data_references_.MergeFrom(from.data_references_);
  object_uuid_map_entries_.MergeFrom(from.object_uuid_map_entries_);
  feature_infos_.MergeFrom(from.feature_infos_);
  component_read_version_.MergeFrom(from.component_read_version_);
  component_required_version_.MergeFrom(from.component_required_version_);
  versioned_external_references_.MergeFrom(from.versioned_external_references_);
  ambiguous_object_identifiers_.MergeFrom(from.ambiguous_object_identifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preferred_locator(from._internal_preferred_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_locator(from._internal_locator());
    }
    if (cached_has_bits & 0x00000004u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      save_token_ = from.save_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_stored_outside_object_archive_ = from.is_stored_outside_object_archive_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_be_dropped_ = from.can_be_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wasteful_ = from.is_wasteful_;
    }
    if (cached_has_bits & 0x00000080u) {
      compression_algorithm_ = from.compression_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_required_package_identifier(from._internal_required_package_identifier());
  }
}

void ComponentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInfo::CopyFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(external_references_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_references_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(object_uuid_map_entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(versioned_external_references_)) return false;
  return true;
}

void ComponentInfo::InternalSwap(ComponentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  document_read_version_.InternalSwap(&other->document_read_version_);
  document_write_version_.InternalSwap(&other->document_write_version_);
  external_references_.InternalSwap(&other->external_references_);
  data_references_.InternalSwap(&other->data_references_);
  object_uuid_map_entries_.InternalSwap(&other->object_uuid_map_entries_);
  feature_infos_.InternalSwap(&other->feature_infos_);
  component_read_version_.InternalSwap(&other->component_read_version_);
  component_required_version_.InternalSwap(&other->component_required_version_);
  versioned_external_references_.InternalSwap(&other->versioned_external_references_);
  ambiguous_object_identifiers_.InternalSwap(&other->ambiguous_object_identifiers_);
  preferred_locator_.Swap(&other->preferred_locator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locator_.Swap(&other->locator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentInfo, required_package_identifier_)
      + sizeof(ComponentInfo::required_package_identifier_)
      - PROTOBUF_FIELD_OFFSET(ComponentInfo, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[4]);
}

// ===================================================================

class ComponentExternalReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentExternalReference>()._has_bits_);
  static void set_has_component_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_weak(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentExternalReference::ComponentExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentExternalReference)
}
ComponentExternalReference::ComponentExternalReference(const ComponentExternalReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_identifier_, &from.component_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_weak_) -
    reinterpret_cast<char*>(&component_identifier_)) + sizeof(is_weak_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentExternalReference)
}

void ComponentExternalReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_weak_) -
    reinterpret_cast<char*>(&component_identifier_)) + sizeof(is_weak_));
}

ComponentExternalReference::~ComponentExternalReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentExternalReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentExternalReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentExternalReference::ArenaDtor(void* object) {
  ComponentExternalReference* _this = reinterpret_cast< ComponentExternalReference* >(object);
  (void)_this;
}
void ComponentExternalReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentExternalReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentExternalReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentExternalReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&component_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_weak_) -
        reinterpret_cast<char*>(&component_identifier_)) + sizeof(is_weak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentExternalReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 component_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_component_identifier(&has_bits);
          component_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_identifier(&has_bits);
          object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_weak(&has_bits);
          is_weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentExternalReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentExternalReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 component_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_component_identifier(), target);
  }

  // optional uint64 object_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_identifier(), target);
  }

  // optional bool is_weak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_weak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentExternalReference)
  return target;
}

size_t ComponentExternalReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentExternalReference)
  size_t total_size = 0;

  // required uint64 component_identifier = 1;
  if (_internal_has_component_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_component_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 object_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_identifier());
    }

    // optional bool is_weak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentExternalReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ComponentExternalReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentExternalReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentExternalReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ComponentExternalReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ComponentExternalReference)
    MergeFrom(*source);
  }
}

void ComponentExternalReference::MergeFrom(const ComponentExternalReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentExternalReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      component_identifier_ = from.component_identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      object_identifier_ = from.object_identifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_weak_ = from.is_weak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComponentExternalReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ComponentExternalReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentExternalReference::CopyFrom(const ComponentExternalReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentExternalReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentExternalReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ComponentExternalReference::InternalSwap(ComponentExternalReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentExternalReference, is_weak_)
      + sizeof(ComponentExternalReference::is_weak_)
      - PROTOBUF_FIELD_OFFSET(ComponentExternalReference, component_identifier_)>(
          reinterpret_cast<char*>(&component_identifier_),
          reinterpret_cast<char*>(&other->component_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentExternalReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[5]);
}

// ===================================================================

class ComponentDataReference_ObjectReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataReference_ObjectReference>()._has_bits_);
  static void set_has_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentDataReference.ObjectReference)
}
ComponentDataReference_ObjectReference::ComponentDataReference_ObjectReference(const ComponentDataReference_ObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_identifier_, &from.object_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&object_identifier_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentDataReference.ObjectReference)
}

void ComponentDataReference_ObjectReference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&object_identifier_)) + sizeof(count_));
}

ComponentDataReference_ObjectReference::~ComponentDataReference_ObjectReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentDataReference.ObjectReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentDataReference_ObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentDataReference_ObjectReference::ArenaDtor(void* object) {
  ComponentDataReference_ObjectReference* _this = reinterpret_cast< ComponentDataReference_ObjectReference* >(object);
  (void)_this;
}
void ComponentDataReference_ObjectReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentDataReference_ObjectReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentDataReference_ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentDataReference.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&object_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&object_identifier_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataReference_ObjectReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 object_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_object_identifier(&has_bits);
          object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentDataReference_ObjectReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentDataReference.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 object_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_identifier(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentDataReference.ObjectReference)
  return target;
}

size_t ComponentDataReference_ObjectReference::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ComponentDataReference.ObjectReference)
  size_t total_size = 0;

  if (_internal_has_object_identifier()) {
    // required uint64 object_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_identifier());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t ComponentDataReference_ObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentDataReference.ObjectReference)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 object_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_identifier());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentDataReference_ObjectReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ComponentDataReference.ObjectReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentDataReference_ObjectReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentDataReference_ObjectReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ComponentDataReference.ObjectReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ComponentDataReference.ObjectReference)
    MergeFrom(*source);
  }
}

void ComponentDataReference_ObjectReference::MergeFrom(const ComponentDataReference_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentDataReference.ObjectReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      object_identifier_ = from.object_identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComponentDataReference_ObjectReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ComponentDataReference.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentDataReference_ObjectReference::CopyFrom(const ComponentDataReference_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentDataReference.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataReference_ObjectReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ComponentDataReference_ObjectReference::InternalSwap(ComponentDataReference_ObjectReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentDataReference_ObjectReference, count_)
      + sizeof(ComponentDataReference_ObjectReference::count_)
      - PROTOBUF_FIELD_OFFSET(ComponentDataReference_ObjectReference, object_identifier_)>(
          reinterpret_cast<char*>(&object_identifier_),
          reinterpret_cast<char*>(&other->object_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataReference_ObjectReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[6]);
}

// ===================================================================

class ComponentDataReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataReference>()._has_bits_);
  static void set_has_data_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentDataReference::ComponentDataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_reference_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentDataReference)
}
ComponentDataReference::ComponentDataReference(const ComponentDataReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_reference_list_(from.object_reference_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_identifier_ = from.data_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentDataReference)
}

void ComponentDataReference::SharedCtor() {
data_identifier_ = PROTOBUF_ULONGLONG(0);
}

ComponentDataReference::~ComponentDataReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentDataReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentDataReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentDataReference::ArenaDtor(void* object) {
  ComponentDataReference* _this = reinterpret_cast< ComponentDataReference* >(object);
  (void)_this;
}
void ComponentDataReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentDataReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentDataReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentDataReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_reference_list_.Clear();
  data_identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_identifier(&has_bits);
          data_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_reference_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentDataReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentDataReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 data_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_identifier(), target);
  }

  // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_reference_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_object_reference_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentDataReference)
  return target;
}

size_t ComponentDataReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentDataReference)
  size_t total_size = 0;

  // required uint64 data_identifier = 1;
  if (_internal_has_data_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ComponentDataReference.ObjectReference object_reference_list = 2;
  total_size += 1UL * this->_internal_object_reference_list_size();
  for (const auto& msg : this->object_reference_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentDataReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ComponentDataReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentDataReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentDataReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ComponentDataReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ComponentDataReference)
    MergeFrom(*source);
  }
}

void ComponentDataReference::MergeFrom(const ComponentDataReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentDataReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_reference_list_.MergeFrom(from.object_reference_list_);
  if (from._internal_has_data_identifier()) {
    _internal_set_data_identifier(from._internal_data_identifier());
  }
}

void ComponentDataReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ComponentDataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentDataReference::CopyFrom(const ComponentDataReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentDataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(object_reference_list_)) return false;
  return true;
}

void ComponentDataReference::InternalSwap(ComponentDataReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_reference_list_.InternalSwap(&other->object_reference_list_);
  swap(data_identifier_, other->data_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[7]);
}

// ===================================================================

class ObjectUUIDMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectUUIDMapEntry>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const ObjectUUIDMapEntry* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
ObjectUUIDMapEntry::_Internal::uuid(const ObjectUUIDMapEntry* msg) {
  return *msg->uuid_;
}
void ObjectUUIDMapEntry::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectUUIDMapEntry::ObjectUUIDMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectUUIDMapEntry)
}
ObjectUUIDMapEntry::ObjectUUIDMapEntry(const ObjectUUIDMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectUUIDMapEntry)
}

void ObjectUUIDMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&identifier_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(identifier_));
}

ObjectUUIDMapEntry::~ObjectUUIDMapEntry() {
  // @@protoc_insertion_point(destructor:TSP.ObjectUUIDMapEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectUUIDMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
}

void ObjectUUIDMapEntry::ArenaDtor(void* object) {
  ObjectUUIDMapEntry* _this = reinterpret_cast< ObjectUUIDMapEntry* >(object);
  (void)_this;
}
void ObjectUUIDMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectUUIDMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectUUIDMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectUUIDMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uuid_ != nullptr);
    uuid_->Clear();
  }
  identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectUUIDMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectUUIDMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectUUIDMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required .TSP.UUID uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectUUIDMapEntry)
  return target;
}

size_t ObjectUUIDMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ObjectUUIDMapEntry)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }

  return total_size;
}
size_t ObjectUUIDMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectUUIDMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectUUIDMapEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectUUIDMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectUUIDMapEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectUUIDMapEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectUUIDMapEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectUUIDMapEntry)
    MergeFrom(*source);
  }
}

void ObjectUUIDMapEntry::MergeFrom(const ObjectUUIDMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectUUIDMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      identifier_ = from.identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectUUIDMapEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectUUIDMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectUUIDMapEntry::CopyFrom(const ObjectUUIDMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectUUIDMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectUUIDMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void ObjectUUIDMapEntry::InternalSwap(ObjectUUIDMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectUUIDMapEntry, identifier_)
      + sizeof(ObjectUUIDMapEntry::identifier_)
      - PROTOBUF_FIELD_OFFSET(ObjectUUIDMapEntry, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectUUIDMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[8]);
}

// ===================================================================

class FeatureInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureInfo>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FeatureInfo::FeatureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  read_version_(arena),
  write_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.FeatureInfo)
}
FeatureInfo::FeatureInfo(const FeatureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      read_version_(from.read_version_),
      write_version_(from.write_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSP.FeatureInfo)
}

void FeatureInfo::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FeatureInfo::~FeatureInfo() {
  // @@protoc_insertion_point(destructor:TSP.FeatureInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeatureInfo::ArenaDtor(void* object) {
  FeatureInfo* _this = reinterpret_cast< FeatureInfo* >(object);
  (void)_this;
}
void FeatureInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FeatureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_version_.Clear();
  write_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.FeatureInfo.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 read_version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 write_version = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FeatureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.FeatureInfo.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // repeated uint32 read_version = 2 [packed = true];
  {
    int byte_size = _read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 3 [packed = true];
  {
    int byte_size = _write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_write_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FeatureInfo)
  return target;
}

size_t FeatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FeatureInfo)
  size_t total_size = 0;

  // required string identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 read_version = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.FeatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.FeatureInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.FeatureInfo)
    MergeFrom(*source);
  }
}

void FeatureInfo::MergeFrom(const FeatureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.FeatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_version_.MergeFrom(from.read_version_);
  write_version_.MergeFrom(from.write_version_);
  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void FeatureInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.FeatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureInfo::CopyFrom(const FeatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FeatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FeatureInfo::InternalSwap(FeatureInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  read_version_.InternalSwap(&other->read_version_);
  write_version_.InternalSwap(&other->write_version_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[9]);
}

// ===================================================================

class PackageMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PackageMetadata>()._has_bits_);
  static void set_has_last_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DocumentRevision& revision(const PackageMetadata* msg);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_save_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferred_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& data_metadata_map(const PackageMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::DocumentRevision&
PackageMetadata::_Internal::revision(const PackageMetadata* msg) {
  return *msg->revision_;
}
const ::TSP::Reference&
PackageMetadata::_Internal::data_metadata_map(const PackageMetadata* msg) {
  return *msg->data_metadata_map_;
}
void PackageMetadata::clear_data_metadata_map() {
  if (data_metadata_map_ != nullptr) data_metadata_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PackageMetadata::PackageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  components_(arena),
  datas_(arena),
  read_version_(arena),
  write_version_(arena),
  file_format_version_(arena),
  versioned_components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.PackageMetadata)
}
PackageMetadata::PackageMetadata(const PackageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      components_(from.components_),
      datas_(from.datas_),
      read_version_(from.read_version_),
      write_version_(from.write_version_),
      file_format_version_(from.file_format_version_),
      versioned_components_(from.versioned_components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_revision()) {
    revision_ = new ::TSP::DocumentRevision(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  if (from._internal_has_data_metadata_map()) {
    data_metadata_map_ = new ::TSP::Reference(*from.data_metadata_map_);
  } else {
    data_metadata_map_ = nullptr;
  }
  ::memcpy(&last_object_identifier_, &from.last_object_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&preferred_package_type_) -
    reinterpret_cast<char*>(&last_object_identifier_)) + sizeof(preferred_package_type_));
  // @@protoc_insertion_point(copy_constructor:TSP.PackageMetadata)
}

void PackageMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&revision_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preferred_package_type_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(preferred_package_type_));
}

PackageMetadata::~PackageMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PackageMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PackageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete revision_;
  if (this != internal_default_instance()) delete data_metadata_map_;
}

void PackageMetadata::ArenaDtor(void* object) {
  PackageMetadata* _this = reinterpret_cast< PackageMetadata* >(object);
  (void)_this;
}
void PackageMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PackageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  datas_.Clear();
  read_version_.Clear();
  write_version_.Clear();
  file_format_version_.Clear();
  versioned_components_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(revision_ != nullptr);
      revision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_metadata_map_ != nullptr);
      data_metadata_map_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&last_object_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preferred_package_type_) -
        reinterpret_cast<char*>(&last_object_identifier_)) + sizeof(preferred_package_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 last_object_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_object_identifier(&has_bits);
          last_object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DocumentRevision revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentInfo components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 read_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 write_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 file_format_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_file_format_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_file_format_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 save_token = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_save_token(&has_bits);
          save_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::PackageMetadata_PackageType_IsValid(val))) {
            _internal_set_preferred_package_type(static_cast<::TSP::PackageMetadata_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ComponentInfo versioned_components = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versioned_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackageMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PackageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 last_object_identifier = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_object_identifier(), target);
  }

  // optional .TSP.DocumentRevision revision = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::revision(this), target, stream);
  }

  // repeated .TSP.ComponentInfo components = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_components(i), target, stream);
  }

  // repeated .TSP.DataInfo datas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_datas(i), target, stream);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    int byte_size = _read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    int byte_size = _write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_write_version(), byte_size, target);
    }
  }

  // repeated uint32 file_format_version = 7 [packed = true];
  {
    int byte_size = _file_format_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_file_format_version(), byte_size, target);
    }
  }

  // optional uint64 save_token = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_save_token(), target);
  }

  // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_preferred_package_type(), target);
  }

  // optional .TSP.Reference data_metadata_map = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::data_metadata_map(this), target, stream);
  }

  // repeated .TSP.ComponentInfo versioned_components = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versioned_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_versioned_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PackageMetadata)
  return target;
}

size_t PackageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PackageMetadata)
  size_t total_size = 0;

  // required uint64 last_object_identifier = 1;
  if (_internal_has_last_object_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_object_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ComponentInfo components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataInfo datas = 4;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 file_format_version = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->file_format_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _file_format_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentInfo versioned_components = 11;
  total_size += 1UL * this->_internal_versioned_components_size();
  for (const auto& msg : this->versioned_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.DocumentRevision revision = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_);
    }

    // optional .TSP.Reference data_metadata_map = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_metadata_map_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint64 save_token = 8 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_save_token());
    }

    // optional .TSP.PackageMetadata.PackageType preferred_package_type = 9 [default = Default];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preferred_package_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackageMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.PackageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackageMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.PackageMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.PackageMetadata)
    MergeFrom(*source);
  }
}

void PackageMetadata::MergeFrom(const PackageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.PackageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  datas_.MergeFrom(from.datas_);
  read_version_.MergeFrom(from.read_version_);
  write_version_.MergeFrom(from.write_version_);
  file_format_version_.MergeFrom(from.file_format_version_);
  versioned_components_.MergeFrom(from.versioned_components_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_revision()->::TSP::DocumentRevision::MergeFrom(from._internal_revision());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(from._internal_data_metadata_map());
    }
    if (cached_has_bits & 0x00000004u) {
      last_object_identifier_ = from.last_object_identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      save_token_ = from.save_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      preferred_package_type_ = from.preferred_package_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackageMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.PackageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageMetadata::CopyFrom(const PackageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PackageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(components_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(versioned_components_)) return false;
  if (_internal_has_data_metadata_map()) {
    if (!data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void PackageMetadata::InternalSwap(PackageMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  components_.InternalSwap(&other->components_);
  datas_.InternalSwap(&other->datas_);
  read_version_.InternalSwap(&other->read_version_);
  write_version_.InternalSwap(&other->write_version_);
  file_format_version_.InternalSwap(&other->file_format_version_);
  versioned_components_.InternalSwap(&other->versioned_components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PackageMetadata, preferred_package_type_)
      + sizeof(PackageMetadata::preferred_package_type_)
      - PROTOBUF_FIELD_OFFSET(PackageMetadata, revision_)>(
          reinterpret_cast<char*>(&revision_),
          reinterpret_cast<char*>(&other->revision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[10]);
}

// ===================================================================

class DocumentRevision::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentRevision>()._has_bits_);
  static void set_has_sequence_32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_64(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DocumentRevision::DocumentRevision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DocumentRevision)
}
DocumentRevision::DocumentRevision(const DocumentRevision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  ::memcpy(&sequence_64_, &from.sequence_64_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_32_) -
    reinterpret_cast<char*>(&sequence_64_)) + sizeof(sequence_32_));
  // @@protoc_insertion_point(copy_constructor:TSP.DocumentRevision)
}

void DocumentRevision::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_64_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_32_) -
    reinterpret_cast<char*>(&sequence_64_)) + sizeof(sequence_32_));
}

DocumentRevision::~DocumentRevision() {
  // @@protoc_insertion_point(destructor:TSP.DocumentRevision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentRevision::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DocumentRevision::ArenaDtor(void* object) {
  DocumentRevision* _this = reinterpret_cast< DocumentRevision* >(object);
  (void)_this;
}
void DocumentRevision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentRevision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentRevision::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DocumentRevision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sequence_64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_32_) -
        reinterpret_cast<char*>(&sequence_64_)) + sizeof(sequence_32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentRevision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sequence_64 = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sequence_64(&has_bits);
          sequence_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DocumentRevision.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_32 = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_32(&has_bits);
          sequence_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentRevision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DocumentRevision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sequence_64 = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequence_64(), target);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DocumentRevision.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional int32 sequence_32 = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DocumentRevision)
  return target;
}

size_t DocumentRevision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DocumentRevision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional uint64 sequence_64 = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sequence_64());
    }

    // optional int32 sequence_32 = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_32());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentRevision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DocumentRevision)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentRevision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentRevision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DocumentRevision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DocumentRevision)
    MergeFrom(*source);
  }
}

void DocumentRevision::MergeFrom(const DocumentRevision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DocumentRevision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_64_ = from.sequence_64_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_32_ = from.sequence_32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentRevision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DocumentRevision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentRevision::CopyFrom(const DocumentRevision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DocumentRevision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentRevision::IsInitialized() const {
  return true;
}

void DocumentRevision::InternalSwap(DocumentRevision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRevision, sequence_32_)
      + sizeof(DocumentRevision::sequence_32_)
      - PROTOBUF_FIELD_OFFSET(DocumentRevision, sequence_64_)>(
          reinterpret_cast<char*>(&sequence_64_),
          reinterpret_cast<char*>(&other->sequence_64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentRevision::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[11]);
}

// ===================================================================

class PasteboardMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardMetadata>()._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& source_document_uuid(const PasteboardMetadata* msg);
  static void set_has_source_document_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& data_metadata_map(const PasteboardMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
PasteboardMetadata::_Internal::source_document_uuid(const PasteboardMetadata* msg) {
  return *msg->source_document_uuid_;
}
const ::TSP::Reference&
PasteboardMetadata::_Internal::data_metadata_map(const PasteboardMetadata* msg) {
  return *msg->data_metadata_map_;
}
void PasteboardMetadata::clear_source_document_uuid() {
  if (source_document_uuid_ != nullptr) source_document_uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PasteboardMetadata::clear_data_metadata_map() {
  if (data_metadata_map_ != nullptr) data_metadata_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PasteboardMetadata::PasteboardMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_(arena),
  datas_(arena),
  read_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.PasteboardMetadata)
}
PasteboardMetadata::PasteboardMetadata(const PasteboardMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      version_(from.version_),
      datas_(from.datas_),
      read_version_(from.read_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArena());
  }
  if (from._internal_has_source_document_uuid()) {
    source_document_uuid_ = new ::TSP::UUID(*from.source_document_uuid_);
  } else {
    source_document_uuid_ = nullptr;
  }
  if (from._internal_has_data_metadata_map()) {
    data_metadata_map_ = new ::TSP::Reference(*from.data_metadata_map_);
  } else {
    data_metadata_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.PasteboardMetadata)
}

void PasteboardMetadata::SharedCtor() {
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_document_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_metadata_map_) -
    reinterpret_cast<char*>(&source_document_uuid_)) + sizeof(data_metadata_map_));
}

PasteboardMetadata::~PasteboardMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PasteboardMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PasteboardMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_document_uuid_;
  if (this != internal_default_instance()) delete data_metadata_map_;
}

void PasteboardMetadata::ArenaDtor(void* object) {
  PasteboardMetadata* _this = reinterpret_cast< PasteboardMetadata* >(object);
  (void)_this;
}
void PasteboardMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteboardMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteboardMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PasteboardMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.Clear();
  datas_.Clear();
  read_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_document_uuid_ != nullptr);
      source_document_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_metadata_map_ != nullptr);
      data_metadata_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.PasteboardMetadata.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID source_document_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_document_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 read_version = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteboardMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PasteboardMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // required string app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.PasteboardMetadata.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // repeated .TSP.DataInfo datas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_datas(i), target, stream);
  }

  // optional .TSP.UUID source_document_uuid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::source_document_uuid(this), target, stream);
  }

  // optional .TSP.Reference data_metadata_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data_metadata_map(this), target, stream);
  }

  // repeated uint32 read_version = 7 [packed = true];
  {
    int byte_size = _read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PasteboardMetadata)
  return target;
}

size_t PasteboardMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PasteboardMetadata)
  size_t total_size = 0;

  // required string app_name = 2;
  if (_internal_has_app_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.DataInfo datas = 3;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUID source_document_uuid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_document_uuid_);
    }

    // optional .TSP.Reference data_metadata_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_metadata_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasteboardMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.PasteboardMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const PasteboardMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasteboardMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.PasteboardMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.PasteboardMetadata)
    MergeFrom(*source);
  }
}

void PasteboardMetadata::MergeFrom(const PasteboardMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.PasteboardMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_.MergeFrom(from.version_);
  datas_.MergeFrom(from.datas_);
  read_version_.MergeFrom(from.read_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source_document_uuid()->::TSP::UUID::MergeFrom(from._internal_source_document_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(from._internal_data_metadata_map());
    }
  }
}

void PasteboardMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.PasteboardMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteboardMetadata::CopyFrom(const PasteboardMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PasteboardMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  if (_internal_has_source_document_uuid()) {
    if (!source_document_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_data_metadata_map()) {
    if (!data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardMetadata::InternalSwap(PasteboardMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.InternalSwap(&other->version_);
  datas_.InternalSwap(&other->datas_);
  read_version_.InternalSwap(&other->read_version_);
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardMetadata, data_metadata_map_)
      + sizeof(PasteboardMetadata::data_metadata_map_)
      - PROTOBUF_FIELD_OFFSET(PasteboardMetadata, source_document_uuid_)>(
          reinterpret_cast<char*>(&source_document_uuid_),
          reinterpret_cast<char*>(&other->source_document_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[12]);
}

// ===================================================================

class DataInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DataInfo>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_document_resource_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_bookmark_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remote_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_download(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_download_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::DataAttributes& attributes(const DataInfo* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::EncryptionInfo& encryption_info(const DataInfo* msg);
  static void set_has_encryption_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_mismatched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::IndexSet& unmaterialized_ranges(const DataInfo* msg);
  static void set_has_unmaterialized_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remote_data_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_remote_data_has_package_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_remote_data_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pasteboard_external_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000803) ^ 0x00000803) != 0;
  }
};

const ::TSP::DataAttributes&
DataInfo::_Internal::attributes(const DataInfo* msg) {
  return *msg->attributes_;
}
const ::TSP::EncryptionInfo&
DataInfo::_Internal::encryption_info(const DataInfo* msg) {
  return *msg->encryption_info_;
}
const ::TSP::IndexSet&
DataInfo::_Internal::unmaterialized_ranges(const DataInfo* msg) {
  return *msg->unmaterialized_ranges_;
}
void DataInfo::clear_attributes() {
  if (attributes_ != nullptr) attributes_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void DataInfo::clear_unmaterialized_ranges() {
  if (unmaterialized_ranges_ != nullptr) unmaterialized_ranges_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
DataInfo::DataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataInfo)
}
DataInfo::DataInfo(const DataInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  preferred_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preferred_file_name()) {
    preferred_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_file_name(), 
      GetArena());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  document_resource_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_document_resource_locator()) {
    document_resource_locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_resource_locator(), 
      GetArena());
  }
  source_bookmark_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_bookmark_data()) {
    source_bookmark_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_bookmark_data(), 
      GetArena());
  }
  remote_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_remote_url()) {
    remote_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_url(), 
      GetArena());
  }
  last_mismatched_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_mismatched_digest()) {
    last_mismatched_digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_mismatched_digest(), 
      GetArena());
  }
  pasteboard_external_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pasteboard_external_file_path()) {
    pasteboard_external_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pasteboard_external_file_path(), 
      GetArena());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::TSP::DataAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  if (from._internal_has_encryption_info()) {
    encryption_info_ = new ::TSP::EncryptionInfo(*from.encryption_info_);
  } else {
    encryption_info_ = nullptr;
  }
  if (from._internal_has_unmaterialized_ranges()) {
    unmaterialized_ranges_ = new ::TSP::IndexSet(*from.unmaterialized_ranges_);
  } else {
    unmaterialized_ranges_ = nullptr;
  }
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_priority_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(download_priority_));
  // @@protoc_insertion_point(copy_constructor:TSP.DataInfo)
}

void DataInfo::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preferred_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_resource_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_bookmark_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remote_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_mismatched_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pasteboard_external_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attributes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_data_mtime_) -
    reinterpret_cast<char*>(&attributes_)) + sizeof(remote_data_mtime_));
download_priority_ = 1;
}

DataInfo::~DataInfo() {
  // @@protoc_insertion_point(destructor:TSP.DataInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_resource_locator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_bookmark_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_mismatched_digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pasteboard_external_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete encryption_info_;
  if (this != internal_default_instance()) delete unmaterialized_ranges_;
}

void DataInfo::ArenaDtor(void* object) {
  DataInfo* _this = reinterpret_cast< DataInfo* >(object);
  (void)_this;
}
void DataInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      document_resource_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      source_bookmark_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      remote_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      last_mismatched_digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      pasteboard_external_file_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(encryption_info_ != nullptr);
      encryption_info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(unmaterialized_ranges_ != nullptr);
      unmaterialized_ranges_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_data_length_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(remote_data_length_));
  }
  if (cached_has_bits & 0x00030000u) {
    remote_data_mtime_ = 0;
    download_priority_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string preferred_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_preferred_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DataInfo.preferred_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DataInfo.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string document_resource_locator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_document_resource_locator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DataInfo.document_resource_locator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes source_bookmark_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_source_bookmark_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string remote_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_remote_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DataInfo.remote_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_download = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_download(&has_bits);
          can_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataInfo_DownloadPriority_IsValid(val))) {
            _internal_set_download_priority(static_cast<::TSP::DataInfo_DownloadPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataAttributes attributes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.EncryptionInfo encryption_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes last_mismatched_digest = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_last_mismatched_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet unmaterialized_ranges = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_unmaterialized_ranges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 remote_data_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_remote_data_length(&has_bits);
          remote_data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remote_data_has_package_storage = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_remote_data_has_package_storage(&has_bits);
          remote_data_has_package_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double remote_data_mtime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_remote_data_mtime(&has_bits);
          remote_data_mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string pasteboard_external_file_path = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pasteboard_external_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.DataInfo.pasteboard_external_file_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required bytes digest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // required string preferred_file_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_file_name().data(), static_cast<int>(this->_internal_preferred_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.preferred_file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_file_name(), target);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // optional string document_resource_locator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_resource_locator().data(), static_cast<int>(this->_internal_document_resource_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.document_resource_locator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_document_resource_locator(), target);
  }

  // optional bytes source_bookmark_data = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_source_bookmark_data(), target);
  }

  // optional string remote_url = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_url().data(), static_cast<int>(this->_internal_remote_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.remote_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_remote_url(), target);
  }

  // optional bool can_download = 8 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_can_download(), target);
  }

  // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_download_priority(), target);
  }

  // optional .TSP.DataAttributes attributes = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::attributes(this), target, stream);
  }

  // optional .TSP.EncryptionInfo encryption_info = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::encryption_info(this), target, stream);
  }

  // optional bytes last_mismatched_digest = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_last_mismatched_digest(), target);
  }

  // optional .TSP.IndexSet unmaterialized_ranges = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::unmaterialized_ranges(this), target, stream);
  }

  // optional uint64 remote_data_length = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_remote_data_length(), target);
  }

  // optional bool remote_data_has_package_storage = 15 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_remote_data_has_package_storage(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_upload_status(), target);
  }

  // optional double remote_data_mtime = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_remote_data_mtime(), target);
  }

  // optional string pasteboard_external_file_path = 99;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pasteboard_external_file_path().data(), static_cast<int>(this->_internal_pasteboard_external_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.pasteboard_external_file_path");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_pasteboard_external_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataInfo)
  return target;
}

size_t DataInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.DataInfo)
  size_t total_size = 0;

  if (_internal_has_digest()) {
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (_internal_has_preferred_file_name()) {
    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }

  return total_size;
}
size_t DataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000803) ^ 0x00000803) == 0) {  // All required fields are present.
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());

    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());

    // required uint64 identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional string file_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string document_resource_locator = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_resource_locator());
    }

    // optional bytes source_bookmark_data = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_bookmark_data());
    }

    // optional string remote_url = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_url());
    }

    // optional bytes last_mismatched_digest = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_mismatched_digest());
    }

    // optional string pasteboard_external_file_path = 99;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pasteboard_external_file_path());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.DataAttributes attributes = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

    // optional .TSP.EncryptionInfo encryption_info = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_info_);
    }

    // optional .TSP.IndexSet unmaterialized_ranges = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unmaterialized_ranges_);
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional bool can_download = 8 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool remote_data_has_package_storage = 15 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .TSP.DataUploadStatus upload_status = 16 [default = DataUploadStatus_Pending];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

    // optional uint64 remote_data_length = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_remote_data_length());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double remote_data_mtime = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional .TSP.DataInfo.DownloadPriority download_priority = 9 [default = Default];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_download_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DataInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataInfo)
    MergeFrom(*source);
  }
}

void DataInfo::MergeFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_preferred_file_name(from._internal_preferred_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_document_resource_locator(from._internal_document_resource_locator());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_source_bookmark_data(from._internal_source_bookmark_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_remote_url(from._internal_remote_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_last_mismatched_digest(from._internal_last_mismatched_digest());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_pasteboard_external_file_path(from._internal_pasteboard_external_file_path());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_attributes()->::TSP::DataAttributes::MergeFrom(from._internal_attributes());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_encryption_info()->::TSP::EncryptionInfo::MergeFrom(from._internal_encryption_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_unmaterialized_ranges()->::TSP::IndexSet::MergeFrom(from._internal_unmaterialized_ranges());
    }
    if (cached_has_bits & 0x00000800u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_download_ = from.can_download_;
    }
    if (cached_has_bits & 0x00002000u) {
      remote_data_has_package_storage_ = from.remote_data_has_package_storage_;
    }
    if (cached_has_bits & 0x00004000u) {
      upload_status_ = from.upload_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      remote_data_length_ = from.remote_data_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      remote_data_mtime_ = from.remote_data_mtime_;
    }
    if (cached_has_bits & 0x00020000u) {
      download_priority_ = from.download_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataInfo::CopyFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!attributes_->IsInitialized()) return false;
  }
  if (_internal_has_encryption_info()) {
    if (!encryption_info_->IsInitialized()) return false;
  }
  if (_internal_has_unmaterialized_ranges()) {
    if (!unmaterialized_ranges_->IsInitialized()) return false;
  }
  return true;
}

void DataInfo::InternalSwap(DataInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_file_name_.Swap(&other->preferred_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  document_resource_locator_.Swap(&other->document_resource_locator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_bookmark_data_.Swap(&other->source_bookmark_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remote_url_.Swap(&other->remote_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_mismatched_digest_.Swap(&other->last_mismatched_digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pasteboard_external_file_path_.Swap(&other->pasteboard_external_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataInfo, remote_data_mtime_)
      + sizeof(DataInfo::remote_data_mtime_)
      - PROTOBUF_FIELD_OFFSET(DataInfo, attributes_)>(
          reinterpret_cast<char*>(&attributes_),
          reinterpret_cast<char*>(&other->attributes_));
  swap(download_priority_, other->download_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[13]);
}

// ===================================================================

class DataMetadataMap_DataMetadataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<DataMetadataMap_DataMetadataMapEntry>()._has_bits_);
  static void set_has_data_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& data_metadata(const DataMetadataMap_DataMetadataMapEntry* msg);
  static void set_has_data_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
DataMetadataMap_DataMetadataMapEntry::_Internal::data_metadata(const DataMetadataMap_DataMetadataMapEntry* msg) {
  return *msg->data_metadata_;
}
void DataMetadataMap_DataMetadataMapEntry::clear_data_metadata() {
  if (data_metadata_ != nullptr) data_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadataMap.DataMetadataMapEntry)
}
DataMetadataMap_DataMetadataMapEntry::DataMetadataMap_DataMetadataMapEntry(const DataMetadataMap_DataMetadataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_metadata()) {
    data_metadata_ = new ::TSP::Reference(*from.data_metadata_);
  } else {
    data_metadata_ = nullptr;
  }
  data_identifier_ = from.data_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadataMap.DataMetadataMapEntry)
}

void DataMetadataMap_DataMetadataMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_identifier_) -
    reinterpret_cast<char*>(&data_metadata_)) + sizeof(data_identifier_));
}

DataMetadataMap_DataMetadataMapEntry::~DataMetadataMap_DataMetadataMapEntry() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadataMap.DataMetadataMapEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataMetadataMap_DataMetadataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_metadata_;
}

void DataMetadataMap_DataMetadataMapEntry::ArenaDtor(void* object) {
  DataMetadataMap_DataMetadataMapEntry* _this = reinterpret_cast< DataMetadataMap_DataMetadataMapEntry* >(object);
  (void)_this;
}
void DataMetadataMap_DataMetadataMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMetadataMap_DataMetadataMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMetadataMap_DataMetadataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_metadata_ != nullptr);
    data_metadata_->Clear();
  }
  data_identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadataMap_DataMetadataMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_identifier(&has_bits);
          data_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference data_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMetadataMap_DataMetadataMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 data_identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_identifier(), target);
  }

  // required .TSP.Reference data_metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadataMap.DataMetadataMapEntry)
  return target;
}

size_t DataMetadataMap_DataMetadataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  size_t total_size = 0;

  if (_internal_has_data_metadata()) {
    // required .TSP.Reference data_metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_metadata_);
  }

  if (_internal_has_data_identifier()) {
    // required uint64 data_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_identifier());
  }

  return total_size;
}
size_t DataMetadataMap_DataMetadataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference data_metadata = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_metadata_);

    // required uint64 data_identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMetadataMap_DataMetadataMapEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMetadataMap_DataMetadataMapEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataMetadataMap_DataMetadataMapEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataMetadataMap.DataMetadataMapEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataMetadataMap.DataMetadataMapEntry)
    MergeFrom(*source);
  }
}

void DataMetadataMap_DataMetadataMapEntry::MergeFrom(const DataMetadataMap_DataMetadataMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data_metadata()->::TSP::Reference::MergeFrom(from._internal_data_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      data_identifier_ = from.data_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataMetadataMap_DataMetadataMapEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMetadataMap_DataMetadataMapEntry::CopyFrom(const DataMetadataMap_DataMetadataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadataMap.DataMetadataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadataMap_DataMetadataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data_metadata()) {
    if (!data_metadata_->IsInitialized()) return false;
  }
  return true;
}

void DataMetadataMap_DataMetadataMapEntry::InternalSwap(DataMetadataMap_DataMetadataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataMetadataMap_DataMetadataMapEntry, data_identifier_)
      + sizeof(DataMetadataMap_DataMetadataMapEntry::data_identifier_)
      - PROTOBUF_FIELD_OFFSET(DataMetadataMap_DataMetadataMapEntry, data_metadata_)>(
          reinterpret_cast<char*>(&data_metadata_),
          reinterpret_cast<char*>(&other->data_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadataMap_DataMetadataMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[14]);
}

// ===================================================================

class DataMetadataMap::_Internal {
 public:
};

DataMetadataMap::DataMetadataMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_metadata_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadataMap)
}
DataMetadataMap::DataMetadataMap(const DataMetadataMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_metadata_entries_(from.data_metadata_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadataMap)
}

void DataMetadataMap::SharedCtor() {
}

DataMetadataMap::~DataMetadataMap() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadataMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataMetadataMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataMetadataMap::ArenaDtor(void* object) {
  DataMetadataMap* _this = reinterpret_cast< DataMetadataMap* >(object);
  (void)_this;
}
void DataMetadataMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMetadataMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMetadataMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadataMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_metadata_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadataMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_metadata_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMetadataMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadataMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_metadata_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_metadata_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadataMap)
  return target;
}

size_t DataMetadataMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadataMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataMetadataMap.DataMetadataMapEntry data_metadata_entries = 1;
  total_size += 1UL * this->_internal_data_metadata_entries_size();
  for (const auto& msg : this->data_metadata_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMetadataMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataMetadataMap)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMetadataMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataMetadataMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataMetadataMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataMetadataMap)
    MergeFrom(*source);
  }
}

void DataMetadataMap::MergeFrom(const DataMetadataMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadataMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_metadata_entries_.MergeFrom(from.data_metadata_entries_);
}

void DataMetadataMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataMetadataMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMetadataMap::CopyFrom(const DataMetadataMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadataMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadataMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_metadata_entries_)) return false;
  return true;
}

void DataMetadataMap::InternalSwap(DataMetadataMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_metadata_entries_.InternalSwap(&other->data_metadata_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadataMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[15]);
}

// ===================================================================

class DataMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DataMetadata>()._has_bits_);
  static const ::TSP::Color& fallback_color(const DataMetadata* msg);
  static void set_has_fallback_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Color&
DataMetadata::_Internal::fallback_color(const DataMetadata* msg) {
  return *msg->fallback_color_;
}
void DataMetadata::clear_fallback_color() {
  if (fallback_color_ != nullptr) fallback_color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DataMetadata::DataMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataMetadata)
}
DataMetadata::DataMetadata(const DataMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fallback_color()) {
    fallback_color_ = new ::TSP::Color(*from.fallback_color_);
  } else {
    fallback_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.DataMetadata)
}

void DataMetadata::SharedCtor() {
fallback_color_ = nullptr;
}

DataMetadata::~DataMetadata() {
  // @@protoc_insertion_point(destructor:TSP.DataMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fallback_color_;
}

void DataMetadata::ArenaDtor(void* object) {
  DataMetadata* _this = reinterpret_cast< DataMetadata* >(object);
  (void)_this;
}
void DataMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fallback_color_ != nullptr);
    fallback_color_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color fallback_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color fallback_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fallback_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataMetadata)
  return target;
}

size_t DataMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Color fallback_color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fallback_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataMetadata)
    MergeFrom(*source);
  }
}

void DataMetadata::MergeFrom(const DataMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fallback_color()) {
    _internal_mutable_fallback_color()->::TSP::Color::MergeFrom(from._internal_fallback_color());
  }
}

void DataMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMetadata::CopyFrom(const DataMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMetadata::IsInitialized() const {
  if (_internal_has_fallback_color()) {
    if (!fallback_color_->IsInitialized()) return false;
  }
  return true;
}

void DataMetadata::InternalSwap(DataMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fallback_color_, other->fallback_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[16]);
}

// ===================================================================

class EncryptionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionInfo>()._has_bits_);
  static void set_has_decoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_block_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EncryptionInfo::EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.EncryptionInfo)
}
EncryptionInfo::EncryptionInfo(const EncryptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      block_infos_(from.block_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&decoded_length_, &from.decoded_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&preferred_block_size_) -
    reinterpret_cast<char*>(&decoded_length_)) + sizeof(preferred_block_size_));
  // @@protoc_insertion_point(copy_constructor:TSP.EncryptionInfo)
}

void EncryptionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&decoded_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preferred_block_size_) -
    reinterpret_cast<char*>(&decoded_length_)) + sizeof(preferred_block_size_));
}

EncryptionInfo::~EncryptionInfo() {
  // @@protoc_insertion_point(destructor:TSP.EncryptionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncryptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EncryptionInfo::ArenaDtor(void* object) {
  EncryptionInfo* _this = reinterpret_cast< EncryptionInfo* >(object);
  (void)_this;
}
void EncryptionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.EncryptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&decoded_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preferred_block_size_) -
        reinterpret_cast<char*>(&decoded_length_)) + sizeof(preferred_block_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 decoded_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_decoded_length(&has_bits);
          decoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 preferred_block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preferred_block_size(&has_bits);
          preferred_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.EncryptionBlockInfo block_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.EncryptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 decoded_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_decoded_length(), target);
  }

  // optional uint64 preferred_block_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_preferred_block_size(), target);
  }

  // repeated .TSP.EncryptionBlockInfo block_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_block_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.EncryptionInfo)
  return target;
}

size_t EncryptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.EncryptionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.EncryptionBlockInfo block_infos = 3;
  total_size += 1UL * this->_internal_block_infos_size();
  for (const auto& msg : this->block_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 decoded_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decoded_length());
    }

    // optional uint64 preferred_block_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_preferred_block_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.EncryptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.EncryptionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.EncryptionInfo)
    MergeFrom(*source);
  }
}

void EncryptionInfo::MergeFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.EncryptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_infos_.MergeFrom(from.block_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      decoded_length_ = from.decoded_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_block_size_ = from.preferred_block_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncryptionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.EncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptionInfo::CopyFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.EncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(block_infos_)) return false;
  return true;
}

void EncryptionInfo::InternalSwap(EncryptionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  block_infos_.InternalSwap(&other->block_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptionInfo, preferred_block_size_)
      + sizeof(EncryptionInfo::preferred_block_size_)
      - PROTOBUF_FIELD_OFFSET(EncryptionInfo, decoded_length_)>(
          reinterpret_cast<char*>(&decoded_length_),
          reinterpret_cast<char*>(&other->decoded_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[17]);
}

// ===================================================================

class EncryptionBlockInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionBlockInfo>()._has_bits_);
  static void set_has_encoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decoded_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EncryptionBlockInfo::EncryptionBlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.EncryptionBlockInfo)
}
EncryptionBlockInfo::EncryptionBlockInfo(const EncryptionBlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoded_length_, &from.encoded_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&decoded_length_) -
    reinterpret_cast<char*>(&encoded_length_)) + sizeof(decoded_length_));
  // @@protoc_insertion_point(copy_constructor:TSP.EncryptionBlockInfo)
}

void EncryptionBlockInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoded_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decoded_length_) -
    reinterpret_cast<char*>(&encoded_length_)) + sizeof(decoded_length_));
}

EncryptionBlockInfo::~EncryptionBlockInfo() {
  // @@protoc_insertion_point(destructor:TSP.EncryptionBlockInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncryptionBlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EncryptionBlockInfo::ArenaDtor(void* object) {
  EncryptionBlockInfo* _this = reinterpret_cast< EncryptionBlockInfo* >(object);
  (void)_this;
}
void EncryptionBlockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptionBlockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptionBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.EncryptionBlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&encoded_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decoded_length_) -
        reinterpret_cast<char*>(&encoded_length_)) + sizeof(decoded_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptionBlockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 encoded_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encoded_length(&has_bits);
          encoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decoded_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decoded_length(&has_bits);
          decoded_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptionBlockInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.EncryptionBlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 encoded_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_encoded_length(), target);
  }

  // optional uint64 decoded_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_decoded_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.EncryptionBlockInfo)
  return target;
}

size_t EncryptionBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.EncryptionBlockInfo)
  size_t total_size = 0;

  // required uint64 encoded_length = 1;
  if (_internal_has_encoded_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_encoded_length());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 decoded_length = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_decoded_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionBlockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.EncryptionBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptionBlockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptionBlockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.EncryptionBlockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.EncryptionBlockInfo)
    MergeFrom(*source);
  }
}

void EncryptionBlockInfo::MergeFrom(const EncryptionBlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.EncryptionBlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encoded_length_ = from.encoded_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      decoded_length_ = from.decoded_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncryptionBlockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.EncryptionBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptionBlockInfo::CopyFrom(const EncryptionBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.EncryptionBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionBlockInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EncryptionBlockInfo::InternalSwap(EncryptionBlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptionBlockInfo, decoded_length_)
      + sizeof(EncryptionBlockInfo::decoded_length_)
      - PROTOBUF_FIELD_OFFSET(EncryptionBlockInfo, encoded_length_)>(
          reinterpret_cast<char*>(&encoded_length_),
          reinterpret_cast<char*>(&other->encoded_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionBlockInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[18]);
}

// ===================================================================

class ViewStateMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateMetadata>()._has_bits_);
  static const ::TSP::UUID& version_uuid(const ViewStateMetadata* msg);
  static void set_has_version_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::ComponentInfo& component(const ViewStateMetadata* msg);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
ViewStateMetadata::_Internal::version_uuid(const ViewStateMetadata* msg) {
  return *msg->version_uuid_;
}
const ::TSP::ComponentInfo&
ViewStateMetadata::_Internal::component(const ViewStateMetadata* msg) {
  return *msg->component_;
}
void ViewStateMetadata::clear_version_uuid() {
  if (version_uuid_ != nullptr) version_uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ViewStateMetadata::ViewStateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_(arena),
  external_object_uuid_map_entries_(arena),
  read_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ViewStateMetadata)
}
ViewStateMetadata::ViewStateMetadata(const ViewStateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      version_(from.version_),
      external_object_uuid_map_entries_(from.external_object_uuid_map_entries_),
      read_version_(from.read_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_component()) {
    component_ = new ::TSP::ComponentInfo(*from.component_);
  } else {
    component_ = nullptr;
  }
  if (from._internal_has_version_uuid()) {
    version_uuid_ = new ::TSP::UUID(*from.version_uuid_);
  } else {
    version_uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ViewStateMetadata)
}

void ViewStateMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_uuid_) -
    reinterpret_cast<char*>(&component_)) + sizeof(version_uuid_));
}

ViewStateMetadata::~ViewStateMetadata() {
  // @@protoc_insertion_point(destructor:TSP.ViewStateMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewStateMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete component_;
  if (this != internal_default_instance()) delete version_uuid_;
}

void ViewStateMetadata::ArenaDtor(void* object) {
  ViewStateMetadata* _this = reinterpret_cast< ViewStateMetadata* >(object);
  (void)_this;
}
void ViewStateMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewStateMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewStateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ViewStateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.Clear();
  external_object_uuid_map_entries_.Clear();
  read_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(component_ != nullptr);
      component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(version_uuid_ != nullptr);
      version_uuid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.ComponentInfo component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID version_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 read_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewStateMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ViewStateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // required .TSP.ComponentInfo component = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::component(this), target, stream);
  }

  // optional .TSP.UUID version_uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version_uuid(this), target, stream);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_object_uuid_map_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_external_object_uuid_map_entries(i), target, stream);
  }

  // repeated uint32 read_version = 6 [packed = true];
  {
    int byte_size = _read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ViewStateMetadata)
  return target;
}

size_t ViewStateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ViewStateMetadata)
  size_t total_size = 0;

  // required .TSP.ComponentInfo component = 3;
  if (_internal_has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 5;
  total_size += 1UL * this->_internal_external_object_uuid_map_entries_size();
  for (const auto& msg : this->external_object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .TSP.UUID version_uuid = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_uuid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewStateMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ViewStateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewStateMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewStateMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ViewStateMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ViewStateMetadata)
    MergeFrom(*source);
  }
}

void ViewStateMetadata::MergeFrom(const ViewStateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ViewStateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_.MergeFrom(from.version_);
  external_object_uuid_map_entries_.MergeFrom(from.external_object_uuid_map_entries_);
  read_version_.MergeFrom(from.read_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_component()->::TSP::ComponentInfo::MergeFrom(from._internal_component());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_version_uuid()->::TSP::UUID::MergeFrom(from._internal_version_uuid());
    }
  }
}

void ViewStateMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ViewStateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewStateMetadata::CopyFrom(const ViewStateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ViewStateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(external_object_uuid_map_entries_)) return false;
  if (_internal_has_component()) {
    if (!component_->IsInitialized()) return false;
  }
  if (_internal_has_version_uuid()) {
    if (!version_uuid_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateMetadata::InternalSwap(ViewStateMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.InternalSwap(&other->version_);
  external_object_uuid_map_entries_.InternalSwap(&other->external_object_uuid_map_entries_);
  read_version_.InternalSwap(&other->read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateMetadata, version_uuid_)
      + sizeof(ViewStateMetadata::version_uuid_)
      - PROTOBUF_FIELD_OFFSET(ViewStateMetadata, component_)>(
          reinterpret_cast<char*>(&component_),
          reinterpret_cast<char*>(&other->component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[19]);
}

// ===================================================================

class ObjectSerializationMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSerializationMetadata>()._has_bits_);
  static const ::TSP::UUID& source_document_uuid(const ObjectSerializationMetadata* msg);
  static void set_has_source_document_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& version_uuid(const ObjectSerializationMetadata* msg);
  static void set_has_version_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::ComponentInfo& component(const ObjectSerializationMetadata* msg);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& data_metadata_map(const ObjectSerializationMetadata* msg);
  static void set_has_data_metadata_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::UUID&
ObjectSerializationMetadata::_Internal::source_document_uuid(const ObjectSerializationMetadata* msg) {
  return *msg->source_document_uuid_;
}
const ::TSP::UUID&
ObjectSerializationMetadata::_Internal::version_uuid(const ObjectSerializationMetadata* msg) {
  return *msg->version_uuid_;
}
const ::TSP::ComponentInfo&
ObjectSerializationMetadata::_Internal::component(const ObjectSerializationMetadata* msg) {
  return *msg->component_;
}
const ::TSP::Reference&
ObjectSerializationMetadata::_Internal::data_metadata_map(const ObjectSerializationMetadata* msg) {
  return *msg->data_metadata_map_;
}
void ObjectSerializationMetadata::clear_source_document_uuid() {
  if (source_document_uuid_ != nullptr) source_document_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectSerializationMetadata::clear_version_uuid() {
  if (version_uuid_ != nullptr) version_uuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectSerializationMetadata::clear_data_metadata_map() {
  if (data_metadata_map_ != nullptr) data_metadata_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ObjectSerializationMetadata::ObjectSerializationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_(arena),
  datas_(arena),
  external_object_uuid_map_entries_(arena),
  read_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationMetadata)
}
ObjectSerializationMetadata::ObjectSerializationMetadata(const ObjectSerializationMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      version_(from.version_),
      datas_(from.datas_),
      external_object_uuid_map_entries_(from.external_object_uuid_map_entries_),
      read_version_(from.read_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_document_uuid()) {
    source_document_uuid_ = new ::TSP::UUID(*from.source_document_uuid_);
  } else {
    source_document_uuid_ = nullptr;
  }
  if (from._internal_has_version_uuid()) {
    version_uuid_ = new ::TSP::UUID(*from.version_uuid_);
  } else {
    version_uuid_ = nullptr;
  }
  if (from._internal_has_component()) {
    component_ = new ::TSP::ComponentInfo(*from.component_);
  } else {
    component_ = nullptr;
  }
  if (from._internal_has_data_metadata_map()) {
    data_metadata_map_ = new ::TSP::Reference(*from.data_metadata_map_);
  } else {
    data_metadata_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationMetadata)
}

void ObjectSerializationMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_document_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_metadata_map_) -
    reinterpret_cast<char*>(&source_document_uuid_)) + sizeof(data_metadata_map_));
}

ObjectSerializationMetadata::~ObjectSerializationMetadata() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectSerializationMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_document_uuid_;
  if (this != internal_default_instance()) delete version_uuid_;
  if (this != internal_default_instance()) delete component_;
  if (this != internal_default_instance()) delete data_metadata_map_;
}

void ObjectSerializationMetadata::ArenaDtor(void* object) {
  ObjectSerializationMetadata* _this = reinterpret_cast< ObjectSerializationMetadata* >(object);
  (void)_this;
}
void ObjectSerializationMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectSerializationMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectSerializationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.Clear();
  datas_.Clear();
  external_object_uuid_map_entries_.Clear();
  read_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_document_uuid_ != nullptr);
      source_document_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(version_uuid_ != nullptr);
      version_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(component_ != nullptr);
      component_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(data_metadata_map_ != nullptr);
      data_metadata_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID source_document_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_document_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID version_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.ComponentInfo component = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_object_uuid_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference data_metadata_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_metadata_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 read_version = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSerializationMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID source_document_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_document_uuid(this), target, stream);
  }

  // optional .TSP.UUID version_uuid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::version_uuid(this), target, stream);
  }

  // required .TSP.ComponentInfo component = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::component(this), target, stream);
  }

  // repeated .TSP.DataInfo datas = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_datas(i), target, stream);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_object_uuid_map_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_external_object_uuid_map_entries(i), target, stream);
  }

  // optional .TSP.Reference data_metadata_map = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::data_metadata_map(this), target, stream);
  }

  // repeated uint32 read_version = 8 [packed = true];
  {
    int byte_size = _read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_read_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationMetadata)
  return target;
}

size_t ObjectSerializationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationMetadata)
  size_t total_size = 0;

  // required .TSP.ComponentInfo component = 4;
  if (_internal_has_component()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.DataInfo datas = 5;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ObjectUUIDMapEntry external_object_uuid_map_entries = 6;
  total_size += 1UL * this->_internal_external_object_uuid_map_entries_size();
  for (const auto& msg : this->external_object_uuid_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID source_document_uuid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_document_uuid_);
    }

    // optional .TSP.UUID version_uuid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_uuid_);
    }

  }
  // optional .TSP.Reference data_metadata_map = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_metadata_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSerializationMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectSerializationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSerializationMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSerializationMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectSerializationMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectSerializationMetadata)
    MergeFrom(*source);
  }
}

void ObjectSerializationMetadata::MergeFrom(const ObjectSerializationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_.MergeFrom(from.version_);
  datas_.MergeFrom(from.datas_);
  external_object_uuid_map_entries_.MergeFrom(from.external_object_uuid_map_entries_);
  read_version_.MergeFrom(from.read_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_source_document_uuid()->::TSP::UUID::MergeFrom(from._internal_source_document_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_version_uuid()->::TSP::UUID::MergeFrom(from._internal_version_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_component()->::TSP::ComponentInfo::MergeFrom(from._internal_component());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_data_metadata_map()->::TSP::Reference::MergeFrom(from._internal_data_metadata_map());
    }
  }
}

void ObjectSerializationMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectSerializationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSerializationMetadata::CopyFrom(const ObjectSerializationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(external_object_uuid_map_entries_)) return false;
  if (_internal_has_source_document_uuid()) {
    if (!source_document_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_version_uuid()) {
    if (!version_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_component()) {
    if (!component_->IsInitialized()) return false;
  }
  if (_internal_has_data_metadata_map()) {
    if (!data_metadata_map_->IsInitialized()) return false;
  }
  return true;
}

void ObjectSerializationMetadata::InternalSwap(ObjectSerializationMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.InternalSwap(&other->version_);
  datas_.InternalSwap(&other->datas_);
  external_object_uuid_map_entries_.InternalSwap(&other->external_object_uuid_map_entries_);
  read_version_.InternalSwap(&other->read_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectSerializationMetadata, data_metadata_map_)
      + sizeof(ObjectSerializationMetadata::data_metadata_map_)
      - PROTOBUF_FIELD_OFFSET(ObjectSerializationMetadata, source_document_uuid_)>(
          reinterpret_cast<char*>(&source_document_uuid_),
          reinterpret_cast<char*>(&other->source_document_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[20]);
}

// ===================================================================

class ObjectSerializationDirectory_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSerializationDirectory_Entry>()._has_bits_);
  static void set_has_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationDirectory.Entry)
}
ObjectSerializationDirectory_Entry::ObjectSerializationDirectory_Entry(const ObjectSerializationDirectory_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locator()) {
    locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locator(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationDirectory.Entry)
}

void ObjectSerializationDirectory_Entry::SharedCtor() {
locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(size_));
}

ObjectSerializationDirectory_Entry::~ObjectSerializationDirectory_Entry() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationDirectory.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectSerializationDirectory_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  locator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectSerializationDirectory_Entry::ArenaDtor(void* object) {
  ObjectSerializationDirectory_Entry* _this = reinterpret_cast< ObjectSerializationDirectory_Entry* >(object);
  (void)_this;
}
void ObjectSerializationDirectory_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectSerializationDirectory_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectSerializationDirectory_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationDirectory.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    locator_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationDirectory_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string locator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_locator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.ObjectSerializationDirectory.Entry.locator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSerializationDirectory_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationDirectory.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string locator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locator().data(), static_cast<int>(this->_internal_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ObjectSerializationDirectory.Entry.locator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_locator(), target);
  }

  // required uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationDirectory.Entry)
  return target;
}

size_t ObjectSerializationDirectory_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ObjectSerializationDirectory.Entry)
  size_t total_size = 0;

  if (_internal_has_locator()) {
    // required string locator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());
  }

  if (_internal_has_offset()) {
    // required uint64 offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  if (_internal_has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  return total_size;
}
size_t ObjectSerializationDirectory_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationDirectory.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string locator = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());

    // required uint64 offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSerializationDirectory_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectSerializationDirectory.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSerializationDirectory_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSerializationDirectory_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectSerializationDirectory.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectSerializationDirectory.Entry)
    MergeFrom(*source);
  }
}

void ObjectSerializationDirectory_Entry::MergeFrom(const ObjectSerializationDirectory_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationDirectory.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locator(from._internal_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectSerializationDirectory_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectSerializationDirectory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSerializationDirectory_Entry::CopyFrom(const ObjectSerializationDirectory_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationDirectory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationDirectory_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ObjectSerializationDirectory_Entry::InternalSwap(ObjectSerializationDirectory_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  locator_.Swap(&other->locator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectSerializationDirectory_Entry, size_)
      + sizeof(ObjectSerializationDirectory_Entry::size_)
      - PROTOBUF_FIELD_OFFSET(ObjectSerializationDirectory_Entry, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationDirectory_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[21]);
}

// ===================================================================

class ObjectSerializationDirectory::_Internal {
 public:
};

ObjectSerializationDirectory::ObjectSerializationDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectSerializationDirectory)
}
ObjectSerializationDirectory::ObjectSerializationDirectory(const ObjectSerializationDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectSerializationDirectory)
}

void ObjectSerializationDirectory::SharedCtor() {
}

ObjectSerializationDirectory::~ObjectSerializationDirectory() {
  // @@protoc_insertion_point(destructor:TSP.ObjectSerializationDirectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectSerializationDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectSerializationDirectory::ArenaDtor(void* object) {
  ObjectSerializationDirectory* _this = reinterpret_cast< ObjectSerializationDirectory* >(object);
  (void)_this;
}
void ObjectSerializationDirectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectSerializationDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectSerializationDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectSerializationDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSerializationDirectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSerializationDirectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectSerializationDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectSerializationDirectory)
  return target;
}

size_t ObjectSerializationDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectSerializationDirectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ObjectSerializationDirectory.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSerializationDirectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectSerializationDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSerializationDirectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSerializationDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectSerializationDirectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectSerializationDirectory)
    MergeFrom(*source);
  }
}

void ObjectSerializationDirectory::MergeFrom(const ObjectSerializationDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectSerializationDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void ObjectSerializationDirectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectSerializationDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSerializationDirectory::CopyFrom(const ObjectSerializationDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectSerializationDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSerializationDirectory::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void ObjectSerializationDirectory::InternalSwap(ObjectSerializationDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSerializationDirectory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[22]);
}

// ===================================================================

class DataPropertiesEntryV1::_Internal {
 public:
  using HasBits = decltype(std::declval<DataPropertiesEntryV1>()._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expects_matched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creation_time_interval_since_1970(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_mismatched_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataPropertiesEntryV1::DataPropertiesEntryV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  creation_version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataPropertiesEntryV1)
}
DataPropertiesEntryV1::DataPropertiesEntryV1(const DataPropertiesEntryV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      creation_version_(from.creation_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  last_mismatched_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_mismatched_digest()) {
    last_mismatched_digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_mismatched_digest(), 
      GetArena());
  }
  ::memcpy(&creation_time_interval_since_1970_, &from.creation_time_interval_since_1970_,
    static_cast<size_t>(reinterpret_cast<char*>(&expects_matched_digest_) -
    reinterpret_cast<char*>(&creation_time_interval_since_1970_)) + sizeof(expects_matched_digest_));
  // @@protoc_insertion_point(copy_constructor:TSP.DataPropertiesEntryV1)
}

void DataPropertiesEntryV1::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_mismatched_digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_interval_since_1970_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expects_matched_digest_) -
    reinterpret_cast<char*>(&creation_time_interval_since_1970_)) + sizeof(expects_matched_digest_));
}

DataPropertiesEntryV1::~DataPropertiesEntryV1() {
  // @@protoc_insertion_point(destructor:TSP.DataPropertiesEntryV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPropertiesEntryV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_mismatched_digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataPropertiesEntryV1::ArenaDtor(void* object) {
  DataPropertiesEntryV1* _this = reinterpret_cast< DataPropertiesEntryV1* >(object);
  (void)_this;
}
void DataPropertiesEntryV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPropertiesEntryV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataPropertiesEntryV1::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataPropertiesEntryV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creation_version_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_mismatched_digest_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&creation_time_interval_since_1970_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expects_matched_digest_) -
        reinterpret_cast<char*>(&creation_time_interval_since_1970_)) + sizeof(expects_matched_digest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPropertiesEntryV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expects_matched_digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expects_matched_digest(&has_bits);
          expects_matched_digest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double creation_time_interval_since_1970 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_creation_time_interval_since_1970(&has_bits);
          creation_time_interval_since_1970_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 creation_version = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_creation_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_creation_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes last_mismatched_digest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_mismatched_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPropertiesEntryV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataPropertiesEntryV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes digest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional bool expects_matched_digest = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_expects_matched_digest(), target);
  }

  // optional double creation_time_interval_since_1970 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_creation_time_interval_since_1970(), target);
  }

  // repeated uint32 creation_version = 4 [packed = true];
  {
    int byte_size = _creation_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_creation_version(), byte_size, target);
    }
  }

  // optional bytes last_mismatched_digest = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_last_mismatched_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataPropertiesEntryV1)
  return target;
}

size_t DataPropertiesEntryV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataPropertiesEntryV1)
  size_t total_size = 0;

  // required bytes digest = 1;
  if (_internal_has_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 creation_version = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->creation_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _creation_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes last_mismatched_digest = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_mismatched_digest());
    }

    // optional double creation_time_interval_since_1970 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool expects_matched_digest = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPropertiesEntryV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataPropertiesEntryV1)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPropertiesEntryV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPropertiesEntryV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataPropertiesEntryV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataPropertiesEntryV1)
    MergeFrom(*source);
  }
}

void DataPropertiesEntryV1::MergeFrom(const DataPropertiesEntryV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataPropertiesEntryV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  creation_version_.MergeFrom(from.creation_version_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last_mismatched_digest(from._internal_last_mismatched_digest());
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_interval_since_1970_ = from.creation_time_interval_since_1970_;
    }
    if (cached_has_bits & 0x00000008u) {
      expects_matched_digest_ = from.expects_matched_digest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataPropertiesEntryV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataPropertiesEntryV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPropertiesEntryV1::CopyFrom(const DataPropertiesEntryV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataPropertiesEntryV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPropertiesEntryV1::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataPropertiesEntryV1::InternalSwap(DataPropertiesEntryV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  creation_version_.InternalSwap(&other->creation_version_);
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_mismatched_digest_.Swap(&other->last_mismatched_digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPropertiesEntryV1, expects_matched_digest_)
      + sizeof(DataPropertiesEntryV1::expects_matched_digest_)
      - PROTOBUF_FIELD_OFFSET(DataPropertiesEntryV1, creation_time_interval_since_1970_)>(
          reinterpret_cast<char*>(&creation_time_interval_since_1970_),
          reinterpret_cast<char*>(&other->creation_time_interval_since_1970_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPropertiesEntryV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[23]);
}

// ===================================================================

class DataPropertiesV1::_Internal {
 public:
};

DataPropertiesV1::DataPropertiesV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataPropertiesV1)
}
DataPropertiesV1::DataPropertiesV1(const DataPropertiesV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.DataPropertiesV1)
}

void DataPropertiesV1::SharedCtor() {
}

DataPropertiesV1::~DataPropertiesV1() {
  // @@protoc_insertion_point(destructor:TSP.DataPropertiesV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPropertiesV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataPropertiesV1::ArenaDtor(void* object) {
  DataPropertiesV1* _this = reinterpret_cast< DataPropertiesV1* >(object);
  (void)_this;
}
void DataPropertiesV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPropertiesV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataPropertiesV1::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataPropertiesV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPropertiesV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.DataPropertiesEntryV1 properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPropertiesV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataPropertiesV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.DataPropertiesEntryV1 properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataPropertiesV1)
  return target;
}

size_t DataPropertiesV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataPropertiesV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataPropertiesEntryV1 properties = 1;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPropertiesV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataPropertiesV1)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPropertiesV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPropertiesV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataPropertiesV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataPropertiesV1)
    MergeFrom(*source);
  }
}

void DataPropertiesV1::MergeFrom(const DataPropertiesV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataPropertiesV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void DataPropertiesV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataPropertiesV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPropertiesV1::CopyFrom(const DataPropertiesV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataPropertiesV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPropertiesV1::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  return true;
}

void DataPropertiesV1::InternalSwap(DataPropertiesV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPropertiesV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[24]);
}

// ===================================================================

class DocumentMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentMetadata>()._has_bits_);
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataPropertiesV1& data_properties_v1(const DocumentMetadata* msg);
  static void set_has_data_properties_v1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataPropertiesV1&
DocumentMetadata::_Internal::data_properties_v1(const DocumentMetadata* msg) {
  return *msg->data_properties_v1_;
}
DocumentMetadata::DocumentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DocumentMetadata)
}
DocumentMetadata::DocumentMetadata(const DocumentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_properties_v1()) {
    data_properties_v1_ = new ::TSP::DataPropertiesV1(*from.data_properties_v1_);
  } else {
    data_properties_v1_ = nullptr;
  }
  is_in_collaboration_mode_ = from.is_in_collaboration_mode_;
  // @@protoc_insertion_point(copy_constructor:TSP.DocumentMetadata)
}

void DocumentMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_properties_v1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_in_collaboration_mode_) -
    reinterpret_cast<char*>(&data_properties_v1_)) + sizeof(is_in_collaboration_mode_));
}

DocumentMetadata::~DocumentMetadata() {
  // @@protoc_insertion_point(destructor:TSP.DocumentMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_properties_v1_;
}

void DocumentMetadata::ArenaDtor(void* object) {
  DocumentMetadata* _this = reinterpret_cast< DocumentMetadata* >(object);
  (void)_this;
}
void DocumentMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DocumentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_properties_v1_ != nullptr);
    data_properties_v1_->Clear();
  }
  is_in_collaboration_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_in_collaboration_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_properties_v1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DocumentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_in_collaboration_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_collaboration_mode(), target);
  }

  // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data_properties_v1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DocumentMetadata)
  return target;
}

size_t DocumentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DocumentMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.DataPropertiesV1 data_properties_v1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_properties_v1_);
    }

    // optional bool is_in_collaboration_mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DocumentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DocumentMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DocumentMetadata)
    MergeFrom(*source);
  }
}

void DocumentMetadata::MergeFrom(const DocumentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DocumentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data_properties_v1()->::TSP::DataPropertiesV1::MergeFrom(from._internal_data_properties_v1());
    }
    if (cached_has_bits & 0x00000002u) {
      is_in_collaboration_mode_ = from.is_in_collaboration_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DocumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetadata::CopyFrom(const DocumentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DocumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetadata::IsInitialized() const {
  if (_internal_has_data_properties_v1()) {
    if (!data_properties_v1_->IsInitialized()) return false;
  }
  return true;
}

void DocumentMetadata::InternalSwap(DocumentMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentMetadata, is_in_collaboration_mode_)
      + sizeof(DocumentMetadata::is_in_collaboration_mode_)
      - PROTOBUF_FIELD_OFFSET(DocumentMetadata, data_properties_v1_)>(
          reinterpret_cast<char*>(&data_properties_v1_),
          reinterpret_cast<char*>(&other->data_properties_v1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[25]);
}

// ===================================================================

class SupportMetadata_DataCollaborationProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<SupportMetadata_DataCollaborationProperties>()._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acknowledged_by_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_materialized_on_server(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revision_sequence_for_materialized_on_server(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_remote_data_ever(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SupportMetadata.DataCollaborationProperties)
}
SupportMetadata_DataCollaborationProperties::SupportMetadata_DataCollaborationProperties(const SupportMetadata_DataCollaborationProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  ::memcpy(&acknowledged_by_server_, &from.acknowledged_by_server_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_sequence_for_materialized_on_server_) -
    reinterpret_cast<char*>(&acknowledged_by_server_)) + sizeof(revision_sequence_for_materialized_on_server_));
  // @@protoc_insertion_point(copy_constructor:TSP.SupportMetadata.DataCollaborationProperties)
}

void SupportMetadata_DataCollaborationProperties::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acknowledged_by_server_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revision_sequence_for_materialized_on_server_) -
    reinterpret_cast<char*>(&acknowledged_by_server_)) + sizeof(revision_sequence_for_materialized_on_server_));
}

SupportMetadata_DataCollaborationProperties::~SupportMetadata_DataCollaborationProperties() {
  // @@protoc_insertion_point(destructor:TSP.SupportMetadata.DataCollaborationProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupportMetadata_DataCollaborationProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SupportMetadata_DataCollaborationProperties::ArenaDtor(void* object) {
  SupportMetadata_DataCollaborationProperties* _this = reinterpret_cast< SupportMetadata_DataCollaborationProperties* >(object);
  (void)_this;
}
void SupportMetadata_DataCollaborationProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupportMetadata_DataCollaborationProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SupportMetadata_DataCollaborationProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SupportMetadata.DataCollaborationProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    digest_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&acknowledged_by_server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_sequence_for_materialized_on_server_) -
        reinterpret_cast<char*>(&acknowledged_by_server_)) + sizeof(revision_sequence_for_materialized_on_server_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportMetadata_DataCollaborationProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acknowledged_by_server = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_acknowledged_by_server(&has_bits);
          acknowledged_by_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool materialized_on_server = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_materialized_on_server(&has_bits);
          materialized_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_revision_sequence_for_materialized_on_server(&has_bits);
          revision_sequence_for_materialized_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_remote_data_ever = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_remote_data_ever(&has_bits);
          is_remote_data_ever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupportMetadata_DataCollaborationProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SupportMetadata.DataCollaborationProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes digest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional bool acknowledged_by_server = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_acknowledged_by_server(), target);
  }

  // optional bool materialized_on_server = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_materialized_on_server(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_upload_status(), target);
  }

  // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_revision_sequence_for_materialized_on_server(), target);
  }

  // optional bool is_remote_data_ever = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_remote_data_ever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SupportMetadata.DataCollaborationProperties)
  return target;
}

size_t SupportMetadata_DataCollaborationProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SupportMetadata.DataCollaborationProperties)
  size_t total_size = 0;

  // required bytes digest = 1;
  if (_internal_has_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional bool acknowledged_by_server = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool materialized_on_server = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_remote_data_ever = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .TSP.DataUploadStatus upload_status = 4 [default = DataUploadStatus_Pending];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

    // optional int32 revision_sequence_for_materialized_on_server = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_revision_sequence_for_materialized_on_server());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportMetadata_DataCollaborationProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportMetadata_DataCollaborationProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupportMetadata_DataCollaborationProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SupportMetadata.DataCollaborationProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SupportMetadata.DataCollaborationProperties)
    MergeFrom(*source);
  }
}

void SupportMetadata_DataCollaborationProperties::MergeFrom(const SupportMetadata_DataCollaborationProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      acknowledged_by_server_ = from.acknowledged_by_server_;
    }
    if (cached_has_bits & 0x00000004u) {
      materialized_on_server_ = from.materialized_on_server_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_remote_data_ever_ = from.is_remote_data_ever_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_status_ = from.upload_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      revision_sequence_for_materialized_on_server_ = from.revision_sequence_for_materialized_on_server_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SupportMetadata_DataCollaborationProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportMetadata_DataCollaborationProperties::CopyFrom(const SupportMetadata_DataCollaborationProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SupportMetadata.DataCollaborationProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportMetadata_DataCollaborationProperties::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SupportMetadata_DataCollaborationProperties::InternalSwap(SupportMetadata_DataCollaborationProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupportMetadata_DataCollaborationProperties, revision_sequence_for_materialized_on_server_)
      + sizeof(SupportMetadata_DataCollaborationProperties::revision_sequence_for_materialized_on_server_)
      - PROTOBUF_FIELD_OFFSET(SupportMetadata_DataCollaborationProperties, acknowledged_by_server_)>(
          reinterpret_cast<char*>(&acknowledged_by_server_),
          reinterpret_cast<char*>(&other->acknowledged_by_server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportMetadata_DataCollaborationProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[26]);
}

// ===================================================================

class SupportMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<SupportMetadata>()._has_bits_);
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SupportMetadata::SupportMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_collaboration_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SupportMetadata)
}
SupportMetadata::SupportMetadata(const SupportMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_collaboration_properties_(from.data_collaboration_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_in_collaboration_mode_ = from.is_in_collaboration_mode_;
  // @@protoc_insertion_point(copy_constructor:TSP.SupportMetadata)
}

void SupportMetadata::SharedCtor() {
is_in_collaboration_mode_ = false;
}

SupportMetadata::~SupportMetadata() {
  // @@protoc_insertion_point(destructor:TSP.SupportMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupportMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SupportMetadata::ArenaDtor(void* object) {
  SupportMetadata* _this = reinterpret_cast< SupportMetadata* >(object);
  (void)_this;
}
void SupportMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupportMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SupportMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SupportMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_collaboration_properties_.Clear();
  is_in_collaboration_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_in_collaboration_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_collaboration_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupportMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SupportMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_in_collaboration_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_collaboration_mode(), target);
  }

  // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_collaboration_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_collaboration_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SupportMetadata)
  return target;
}

size_t SupportMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SupportMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.SupportMetadata.DataCollaborationProperties data_collaboration_properties = 2;
  total_size += 1UL * this->_internal_data_collaboration_properties_size();
  for (const auto& msg : this->data_collaboration_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_in_collaboration_mode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SupportMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupportMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SupportMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SupportMetadata)
    MergeFrom(*source);
  }
}

void SupportMetadata::MergeFrom(const SupportMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SupportMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_collaboration_properties_.MergeFrom(from.data_collaboration_properties_);
  if (from._internal_has_is_in_collaboration_mode()) {
    _internal_set_is_in_collaboration_mode(from._internal_is_in_collaboration_mode());
  }
}

void SupportMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SupportMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportMetadata::CopyFrom(const SupportMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SupportMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportMetadata::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_collaboration_properties_)) return false;
  return true;
}

void SupportMetadata::InternalSwap(SupportMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_collaboration_properties_.InternalSwap(&other->data_collaboration_properties_);
  swap(is_in_collaboration_mode_, other->is_in_collaboration_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSP::ArchiveInfo* Arena::CreateMaybeMessage< ::TSP::ArchiveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ArchiveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::MessageInfo* Arena::CreateMaybeMessage< ::TSP::MessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::MessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldInfo* Arena::CreateMaybeMessage< ::TSP::FieldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldPath* Arena::CreateMaybeMessage< ::TSP::FieldPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldPath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentInfo* Arena::CreateMaybeMessage< ::TSP::ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentExternalReference* Arena::CreateMaybeMessage< ::TSP::ComponentExternalReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentExternalReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentDataReference_ObjectReference* Arena::CreateMaybeMessage< ::TSP::ComponentDataReference_ObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentDataReference_ObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentDataReference* Arena::CreateMaybeMessage< ::TSP::ComponentDataReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentDataReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectUUIDMapEntry* Arena::CreateMaybeMessage< ::TSP::ObjectUUIDMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectUUIDMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FeatureInfo* Arena::CreateMaybeMessage< ::TSP::FeatureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FeatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PackageMetadata* Arena::CreateMaybeMessage< ::TSP::PackageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PackageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DocumentRevision* Arena::CreateMaybeMessage< ::TSP::DocumentRevision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DocumentRevision >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PasteboardMetadata* Arena::CreateMaybeMessage< ::TSP::PasteboardMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PasteboardMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataInfo* Arena::CreateMaybeMessage< ::TSP::DataInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadataMap_DataMetadataMapEntry* Arena::CreateMaybeMessage< ::TSP::DataMetadataMap_DataMetadataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadataMap_DataMetadataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadataMap* Arena::CreateMaybeMessage< ::TSP::DataMetadataMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadataMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataMetadata* Arena::CreateMaybeMessage< ::TSP::DataMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::EncryptionInfo* Arena::CreateMaybeMessage< ::TSP::EncryptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::EncryptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::EncryptionBlockInfo* Arena::CreateMaybeMessage< ::TSP::EncryptionBlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::EncryptionBlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ViewStateMetadata* Arena::CreateMaybeMessage< ::TSP::ViewStateMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ViewStateMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationMetadata* Arena::CreateMaybeMessage< ::TSP::ObjectSerializationMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationDirectory_Entry* Arena::CreateMaybeMessage< ::TSP::ObjectSerializationDirectory_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationDirectory_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectSerializationDirectory* Arena::CreateMaybeMessage< ::TSP::ObjectSerializationDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectSerializationDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataPropertiesEntryV1* Arena::CreateMaybeMessage< ::TSP::DataPropertiesEntryV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataPropertiesEntryV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataPropertiesV1* Arena::CreateMaybeMessage< ::TSP::DataPropertiesV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataPropertiesV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DocumentMetadata* Arena::CreateMaybeMessage< ::TSP::DocumentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DocumentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SupportMetadata_DataCollaborationProperties* Arena::CreateMaybeMessage< ::TSP::SupportMetadata_DataCollaborationProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SupportMetadata_DataCollaborationProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SupportMetadata* Arena::CreateMaybeMessage< ::TSP::SupportMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SupportMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
