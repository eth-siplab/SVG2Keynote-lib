// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSCH3DArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCHArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSSArchives.pb.h"
#include "TSWPArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[54]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHCommandArchives_2eproto;
namespace TSCH {
class CDESelectionTransformerArchive;
struct CDESelectionTransformerArchiveDefaultTypeInternal;
extern CDESelectionTransformerArchiveDefaultTypeInternal _CDESelectionTransformerArchive_default_instance_;
class ChartCommandArchive;
struct ChartCommandArchiveDefaultTypeInternal;
extern ChartCommandArchiveDefaultTypeInternal _ChartCommandArchive_default_instance_;
class ChartDrawableSelectionTransformerArchive;
struct ChartDrawableSelectionTransformerArchiveDefaultTypeInternal;
extern ChartDrawableSelectionTransformerArchiveDefaultTypeInternal _ChartDrawableSelectionTransformerArchive_default_instance_;
class ChartRefLineSubselectionTransformerHelperArchive;
struct ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal;
extern ChartRefLineSubselectionTransformerHelperArchiveDefaultTypeInternal _ChartRefLineSubselectionTransformerHelperArchive_default_instance_;
class ChartSubselectionIdentityTransformerHelperArchive;
struct ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal;
extern ChartSubselectionIdentityTransformerHelperArchiveDefaultTypeInternal _ChartSubselectionIdentityTransformerHelperArchive_default_instance_;
class ChartSubselectionTransformerArchive;
struct ChartSubselectionTransformerArchiveDefaultTypeInternal;
extern ChartSubselectionTransformerArchiveDefaultTypeInternal _ChartSubselectionTransformerArchive_default_instance_;
class ChartSubselectionTransformerHelperArchive;
struct ChartSubselectionTransformerHelperArchiveDefaultTypeInternal;
extern ChartSubselectionTransformerHelperArchiveDefaultTypeInternal _ChartSubselectionTransformerHelperArchive_default_instance_;
class ChartTextSelectionTransformerArchive;
struct ChartTextSelectionTransformerArchiveDefaultTypeInternal;
extern ChartTextSelectionTransformerArchiveDefaultTypeInternal _ChartTextSelectionTransformerArchive_default_instance_;
class CommandAddGridColumnsArchive;
struct CommandAddGridColumnsArchiveDefaultTypeInternal;
extern CommandAddGridColumnsArchiveDefaultTypeInternal _CommandAddGridColumnsArchive_default_instance_;
class CommandAddGridRowsArchive;
struct CommandAddGridRowsArchiveDefaultTypeInternal;
extern CommandAddGridRowsArchiveDefaultTypeInternal _CommandAddGridRowsArchive_default_instance_;
class CommandAddReferenceLineArchive;
struct CommandAddReferenceLineArchiveDefaultTypeInternal;
extern CommandAddReferenceLineArchiveDefaultTypeInternal _CommandAddReferenceLineArchive_default_instance_;
class CommandApplyFillSetArchive;
struct CommandApplyFillSetArchiveDefaultTypeInternal;
extern CommandApplyFillSetArchiveDefaultTypeInternal _CommandApplyFillSetArchive_default_instance_;
class CommandChartApplyPreset;
struct CommandChartApplyPresetDefaultTypeInternal;
extern CommandChartApplyPresetDefaultTypeInternal _CommandChartApplyPreset_default_instance_;
class CommandChartApplyTheme;
struct CommandChartApplyThemeDefaultTypeInternal;
extern CommandChartApplyThemeDefaultTypeInternal _CommandChartApplyTheme_default_instance_;
class CommandCleanupGeometryArchive;
struct CommandCleanupGeometryArchiveDefaultTypeInternal;
extern CommandCleanupGeometryArchiveDefaultTypeInternal _CommandCleanupGeometryArchive_default_instance_;
class CommandDeleteGridColumnsArchive;
struct CommandDeleteGridColumnsArchiveDefaultTypeInternal;
extern CommandDeleteGridColumnsArchiveDefaultTypeInternal _CommandDeleteGridColumnsArchive_default_instance_;
class CommandDeleteGridRowsArchive;
struct CommandDeleteGridRowsArchiveDefaultTypeInternal;
extern CommandDeleteGridRowsArchiveDefaultTypeInternal _CommandDeleteGridRowsArchive_default_instance_;
class CommandDeleteReferenceLineArchive;
struct CommandDeleteReferenceLineArchiveDefaultTypeInternal;
extern CommandDeleteReferenceLineArchiveDefaultTypeInternal _CommandDeleteReferenceLineArchive_default_instance_;
class CommandInduced3DChartGeometry;
struct CommandInduced3DChartGeometryDefaultTypeInternal;
extern CommandInduced3DChartGeometryDefaultTypeInternal _CommandInduced3DChartGeometry_default_instance_;
class CommandInducedReplaceChartGrid;
struct CommandInducedReplaceChartGridDefaultTypeInternal;
extern CommandInducedReplaceChartGridDefaultTypeInternal _CommandInducedReplaceChartGrid_default_instance_;
class CommandInvalidateWPCaches;
struct CommandInvalidateWPCachesDefaultTypeInternal;
extern CommandInvalidateWPCachesDefaultTypeInternal _CommandInvalidateWPCaches_default_instance_;
class CommandMoveGridColumnsArchive;
struct CommandMoveGridColumnsArchiveDefaultTypeInternal;
extern CommandMoveGridColumnsArchiveDefaultTypeInternal _CommandMoveGridColumnsArchive_default_instance_;
class CommandMoveGridRowsArchive;
struct CommandMoveGridRowsArchiveDefaultTypeInternal;
extern CommandMoveGridRowsArchiveDefaultTypeInternal _CommandMoveGridRowsArchive_default_instance_;
class CommandMutatePropertiesArchive;
struct CommandMutatePropertiesArchiveDefaultTypeInternal;
extern CommandMutatePropertiesArchiveDefaultTypeInternal _CommandMutatePropertiesArchive_default_instance_;
class CommandMutatePropertiesArchive_GenericPropertyDeltaMap;
struct CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal;
extern CommandMutatePropertiesArchive_GenericPropertyDeltaMapDefaultTypeInternal _CommandMutatePropertiesArchive_GenericPropertyDeltaMap_default_instance_;
class CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion;
struct CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal;
extern CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnionDefaultTypeInternal _CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_;
class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap;
struct CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal;
extern CommandMutatePropertiesArchive_ParagraphStyleDeltaMapDefaultTypeInternal _CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_default_instance_;
class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive;
struct CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal;
extern CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal _CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_;
class CommandPasteStyleArchive;
struct CommandPasteStyleArchiveDefaultTypeInternal;
extern CommandPasteStyleArchiveDefaultTypeInternal _CommandPasteStyleArchive_default_instance_;
class CommandReplaceCustomFormatArchive;
struct CommandReplaceCustomFormatArchiveDefaultTypeInternal;
extern CommandReplaceCustomFormatArchiveDefaultTypeInternal _CommandReplaceCustomFormatArchive_default_instance_;
class CommandReplaceCustomFormatArchive_FormatObjectMutation;
struct CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal;
extern CommandReplaceCustomFormatArchive_FormatObjectMutationDefaultTypeInternal _CommandReplaceCustomFormatArchive_FormatObjectMutation_default_instance_;
class CommandReplaceGridValuesArchive;
struct CommandReplaceGridValuesArchiveDefaultTypeInternal;
extern CommandReplaceGridValuesArchiveDefaultTypeInternal _CommandReplaceGridValuesArchive_default_instance_;
class CommandReplaceImageDataArchive;
struct CommandReplaceImageDataArchiveDefaultTypeInternal;
extern CommandReplaceImageDataArchiveDefaultTypeInternal _CommandReplaceImageDataArchive_default_instance_;
class CommandReplaceThemePresetArchive;
struct CommandReplaceThemePresetArchiveDefaultTypeInternal;
extern CommandReplaceThemePresetArchiveDefaultTypeInternal _CommandReplaceThemePresetArchive_default_instance_;
class CommandReplaceThemePresetArchive_StyleAndIdentifierPair;
struct CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal;
extern CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal _CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_;
class CommandScaleAllTextArchive;
struct CommandScaleAllTextArchiveDefaultTypeInternal;
extern CommandScaleAllTextArchiveDefaultTypeInternal _CommandScaleAllTextArchive_default_instance_;
class CommandSetCategoryNameArchive;
struct CommandSetCategoryNameArchiveDefaultTypeInternal;
extern CommandSetCategoryNameArchiveDefaultTypeInternal _CommandSetCategoryNameArchive_default_instance_;
class CommandSetChartTypeArchive;
struct CommandSetChartTypeArchiveDefaultTypeInternal;
extern CommandSetChartTypeArchiveDefaultTypeInternal _CommandSetChartTypeArchive_default_instance_;
class CommandSetFontFamilyArchive;
struct CommandSetFontFamilyArchiveDefaultTypeInternal;
extern CommandSetFontFamilyArchiveDefaultTypeInternal _CommandSetFontFamilyArchive_default_instance_;
class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap;
struct CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal;
extern CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMapDefaultTypeInternal _CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_default_instance_;
class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive;
struct CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal;
extern CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchiveDefaultTypeInternal _CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_;
class CommandSetFontFamilyArchive_StyleSemanticTag;
struct CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal;
extern CommandSetFontFamilyArchive_StyleSemanticTagDefaultTypeInternal _CommandSetFontFamilyArchive_StyleSemanticTag_default_instance_;
class CommandSetGridDirectionArchive;
struct CommandSetGridDirectionArchiveDefaultTypeInternal;
extern CommandSetGridDirectionArchiveDefaultTypeInternal _CommandSetGridDirectionArchive_default_instance_;
class CommandSetGridValueArchive;
struct CommandSetGridValueArchiveDefaultTypeInternal;
extern CommandSetGridValueArchiveDefaultTypeInternal _CommandSetGridValueArchive_default_instance_;
class CommandSetLegendFrameArchive;
struct CommandSetLegendFrameArchiveDefaultTypeInternal;
extern CommandSetLegendFrameArchiveDefaultTypeInternal _CommandSetLegendFrameArchive_default_instance_;
class CommandSetMultiDataSetIndexArchive;
struct CommandSetMultiDataSetIndexArchiveDefaultTypeInternal;
extern CommandSetMultiDataSetIndexArchiveDefaultTypeInternal _CommandSetMultiDataSetIndexArchive_default_instance_;
class CommandSetPieWedgeExplosion;
struct CommandSetPieWedgeExplosionDefaultTypeInternal;
extern CommandSetPieWedgeExplosionDefaultTypeInternal _CommandSetPieWedgeExplosion_default_instance_;
class CommandSetScatterFormatArchive;
struct CommandSetScatterFormatArchiveDefaultTypeInternal;
extern CommandSetScatterFormatArchiveDefaultTypeInternal _CommandSetScatterFormatArchive_default_instance_;
class CommandSetSeriesNameArchive;
struct CommandSetSeriesNameArchiveDefaultTypeInternal;
extern CommandSetSeriesNameArchiveDefaultTypeInternal _CommandSetSeriesNameArchive_default_instance_;
class CommandSetSeriesTypeArchive;
struct CommandSetSeriesTypeArchiveDefaultTypeInternal;
extern CommandSetSeriesTypeArchiveDefaultTypeInternal _CommandSetSeriesTypeArchive_default_instance_;
class CommandStyleSwapArchive;
struct CommandStyleSwapArchiveDefaultTypeInternal;
extern CommandStyleSwapArchiveDefaultTypeInternal _CommandStyleSwapArchive_default_instance_;
class StyleOwnerPath;
struct StyleOwnerPathDefaultTypeInternal;
extern StyleOwnerPathDefaultTypeInternal _StyleOwnerPath_default_instance_;
class StyleSwapUndoTupleArchive;
struct StyleSwapUndoTupleArchiveDefaultTypeInternal;
extern StyleSwapUndoTupleArchiveDefaultTypeInternal _StyleSwapUndoTupleArchive_default_instance_;
class StyleSwapUndoTuplesArchive;
struct StyleSwapUndoTuplesArchiveDefaultTypeInternal;
extern StyleSwapUndoTuplesArchiveDefaultTypeInternal _StyleSwapUndoTuplesArchive_default_instance_;
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::CDESelectionTransformerArchive* Arena::CreateMaybeMessage<::TSCH::CDESelectionTransformerArchive>(Arena*);
template<> ::TSCH::ChartCommandArchive* Arena::CreateMaybeMessage<::TSCH::ChartCommandArchive>(Arena*);
template<> ::TSCH::ChartDrawableSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSCH::ChartDrawableSelectionTransformerArchive>(Arena*);
template<> ::TSCH::ChartRefLineSubselectionTransformerHelperArchive* Arena::CreateMaybeMessage<::TSCH::ChartRefLineSubselectionTransformerHelperArchive>(Arena*);
template<> ::TSCH::ChartSubselectionIdentityTransformerHelperArchive* Arena::CreateMaybeMessage<::TSCH::ChartSubselectionIdentityTransformerHelperArchive>(Arena*);
template<> ::TSCH::ChartSubselectionTransformerArchive* Arena::CreateMaybeMessage<::TSCH::ChartSubselectionTransformerArchive>(Arena*);
template<> ::TSCH::ChartSubselectionTransformerHelperArchive* Arena::CreateMaybeMessage<::TSCH::ChartSubselectionTransformerHelperArchive>(Arena*);
template<> ::TSCH::ChartTextSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSCH::ChartTextSelectionTransformerArchive>(Arena*);
template<> ::TSCH::CommandAddGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandAddGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandAddGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandAddGridRowsArchive>(Arena*);
template<> ::TSCH::CommandAddReferenceLineArchive* Arena::CreateMaybeMessage<::TSCH::CommandAddReferenceLineArchive>(Arena*);
template<> ::TSCH::CommandApplyFillSetArchive* Arena::CreateMaybeMessage<::TSCH::CommandApplyFillSetArchive>(Arena*);
template<> ::TSCH::CommandChartApplyPreset* Arena::CreateMaybeMessage<::TSCH::CommandChartApplyPreset>(Arena*);
template<> ::TSCH::CommandChartApplyTheme* Arena::CreateMaybeMessage<::TSCH::CommandChartApplyTheme>(Arena*);
template<> ::TSCH::CommandCleanupGeometryArchive* Arena::CreateMaybeMessage<::TSCH::CommandCleanupGeometryArchive>(Arena*);
template<> ::TSCH::CommandDeleteGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandDeleteGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridRowsArchive>(Arena*);
template<> ::TSCH::CommandDeleteReferenceLineArchive* Arena::CreateMaybeMessage<::TSCH::CommandDeleteReferenceLineArchive>(Arena*);
template<> ::TSCH::CommandInduced3DChartGeometry* Arena::CreateMaybeMessage<::TSCH::CommandInduced3DChartGeometry>(Arena*);
template<> ::TSCH::CommandInducedReplaceChartGrid* Arena::CreateMaybeMessage<::TSCH::CommandInducedReplaceChartGrid>(Arena*);
template<> ::TSCH::CommandInvalidateWPCaches* Arena::CreateMaybeMessage<::TSCH::CommandInvalidateWPCaches>(Arena*);
template<> ::TSCH::CommandMoveGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandMoveGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandMoveGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandMoveGridRowsArchive>(Arena*);
template<> ::TSCH::CommandMutatePropertiesArchive* Arena::CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive>(Arena*);
template<> ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* Arena::CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap>(Arena*);
template<> ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* Arena::CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>(Arena*);
template<> ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* Arena::CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap>(Arena*);
template<> ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>(Arena*);
template<> ::TSCH::CommandPasteStyleArchive* Arena::CreateMaybeMessage<::TSCH::CommandPasteStyleArchive>(Arena*);
template<> ::TSCH::CommandReplaceCustomFormatArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceCustomFormatArchive>(Arena*);
template<> ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* Arena::CreateMaybeMessage<::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation>(Arena*);
template<> ::TSCH::CommandReplaceGridValuesArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceGridValuesArchive>(Arena*);
template<> ::TSCH::CommandReplaceImageDataArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceImageDataArchive>(Arena*);
template<> ::TSCH::CommandReplaceThemePresetArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceThemePresetArchive>(Arena*);
template<> ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* Arena::CreateMaybeMessage<::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair>(Arena*);
template<> ::TSCH::CommandScaleAllTextArchive* Arena::CreateMaybeMessage<::TSCH::CommandScaleAllTextArchive>(Arena*);
template<> ::TSCH::CommandSetCategoryNameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetCategoryNameArchive>(Arena*);
template<> ::TSCH::CommandSetChartTypeArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetChartTypeArchive>(Arena*);
template<> ::TSCH::CommandSetFontFamilyArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive>(Arena*);
template<> ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* Arena::CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap>(Arena*);
template<> ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>(Arena*);
template<> ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* Arena::CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag>(Arena*);
template<> ::TSCH::CommandSetGridDirectionArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetGridDirectionArchive>(Arena*);
template<> ::TSCH::CommandSetGridValueArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetGridValueArchive>(Arena*);
template<> ::TSCH::CommandSetLegendFrameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetLegendFrameArchive>(Arena*);
template<> ::TSCH::CommandSetMultiDataSetIndexArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetMultiDataSetIndexArchive>(Arena*);
template<> ::TSCH::CommandSetPieWedgeExplosion* Arena::CreateMaybeMessage<::TSCH::CommandSetPieWedgeExplosion>(Arena*);
template<> ::TSCH::CommandSetScatterFormatArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetScatterFormatArchive>(Arena*);
template<> ::TSCH::CommandSetSeriesNameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetSeriesNameArchive>(Arena*);
template<> ::TSCH::CommandSetSeriesTypeArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetSeriesTypeArchive>(Arena*);
template<> ::TSCH::CommandStyleSwapArchive* Arena::CreateMaybeMessage<::TSCH::CommandStyleSwapArchive>(Arena*);
template<> ::TSCH::StyleOwnerPath* Arena::CreateMaybeMessage<::TSCH::StyleOwnerPath>(Arena*);
template<> ::TSCH::StyleSwapUndoTupleArchive* Arena::CreateMaybeMessage<::TSCH::StyleSwapUndoTupleArchive>(Arena*);
template<> ::TSCH::StyleSwapUndoTuplesArchive* Arena::CreateMaybeMessage<::TSCH::StyleSwapUndoTuplesArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {

enum StyleOwnerType : int {
  chart_info = 1,
  legend_model = 2,
  chart_axis = 3,
  chart_series = 4,
  reference_line = 5
};
bool StyleOwnerType_IsValid(int value);
constexpr StyleOwnerType StyleOwnerType_MIN = chart_info;
constexpr StyleOwnerType StyleOwnerType_MAX = reference_line;
constexpr int StyleOwnerType_ARRAYSIZE = StyleOwnerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleOwnerType_descriptor();
template<typename T>
inline const std::string& StyleOwnerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StyleOwnerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StyleOwnerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StyleOwnerType_descriptor(), enum_t_value);
}
inline bool StyleOwnerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StyleOwnerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StyleOwnerType>(
    StyleOwnerType_descriptor(), name, value);
}
enum StyleSwapType : int {
  chart_style = 1,
  chart_non_style = 2,
  legend_style = 3,
  legend_non_style = 4,
  value_axis_style = 5,
  value_axis_non_style = 6,
  category_axis_style = 7,
  category_axis_non_style = 8,
  series_theme_style = 9,
  series_private_style = 10,
  series_non_style = 11,
  paragraph_style = 12,
  reference_line_style = 13,
  reference_line_non_style = 14,
  reference_line_theme_style = 15
};
bool StyleSwapType_IsValid(int value);
constexpr StyleSwapType StyleSwapType_MIN = chart_style;
constexpr StyleSwapType StyleSwapType_MAX = reference_line_theme_style;
constexpr int StyleSwapType_ARRAYSIZE = StyleSwapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleSwapType_descriptor();
template<typename T>
inline const std::string& StyleSwapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StyleSwapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StyleSwapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StyleSwapType_descriptor(), enum_t_value);
}
inline bool StyleSwapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StyleSwapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StyleSwapType>(
    StyleSwapType_descriptor(), name, value);
}
enum ApplyPresetBehavior : int {
  remove_overrides = 1,
  preserve_overrides = 2,
  preserve_appearance = 3
};
bool ApplyPresetBehavior_IsValid(int value);
constexpr ApplyPresetBehavior ApplyPresetBehavior_MIN = remove_overrides;
constexpr ApplyPresetBehavior ApplyPresetBehavior_MAX = preserve_appearance;
constexpr int ApplyPresetBehavior_ARRAYSIZE = ApplyPresetBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplyPresetBehavior_descriptor();
template<typename T>
inline const std::string& ApplyPresetBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApplyPresetBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApplyPresetBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApplyPresetBehavior_descriptor(), enum_t_value);
}
inline bool ApplyPresetBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApplyPresetBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApplyPresetBehavior>(
    ApplyPresetBehavior_descriptor(), name, value);
}
// ===================================================================

class StyleOwnerPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StyleOwnerPath) */ {
 public:
  inline StyleOwnerPath() : StyleOwnerPath(nullptr) {}
  ~StyleOwnerPath() override;
  explicit constexpr StyleOwnerPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleOwnerPath(const StyleOwnerPath& from);
  StyleOwnerPath(StyleOwnerPath&& from) noexcept
    : StyleOwnerPath() {
    *this = ::std::move(from);
  }

  inline StyleOwnerPath& operator=(const StyleOwnerPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleOwnerPath& operator=(StyleOwnerPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleOwnerPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleOwnerPath* internal_default_instance() {
    return reinterpret_cast<const StyleOwnerPath*>(
               &_StyleOwnerPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StyleOwnerPath& a, StyleOwnerPath& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleOwnerPath* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleOwnerPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleOwnerPath* New() const final {
    return new StyleOwnerPath();
  }

  StyleOwnerPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleOwnerPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleOwnerPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleOwnerPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleOwnerPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StyleOwnerPath";
  }
  protected:
  explicit StyleOwnerPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
  };
  // repeated .TSP.UUID uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  ::TSP::UUID* mutable_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uuids();
  private:
  const ::TSP::UUID& _internal_uuids(int index) const;
  ::TSP::UUID* _internal_add_uuids();
  public:
  const ::TSP::UUID& uuids(int index) const;
  ::TSP::UUID* add_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uuids() const;

  // @@protoc_insertion_point(class_scope:TSCH.StyleOwnerPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uuids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetChartTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetChartTypeArchive) */ {
 public:
  inline CommandSetChartTypeArchive() : CommandSetChartTypeArchive(nullptr) {}
  ~CommandSetChartTypeArchive() override;
  explicit constexpr CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from);
  CommandSetChartTypeArchive(CommandSetChartTypeArchive&& from) noexcept
    : CommandSetChartTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetChartTypeArchive& operator=(const CommandSetChartTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetChartTypeArchive& operator=(CommandSetChartTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetChartTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetChartTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetChartTypeArchive*>(
               &_CommandSetChartTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandSetChartTypeArchive& a, CommandSetChartTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetChartTypeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetChartTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetChartTypeArchive* New() const final {
    return new CommandSetChartTypeArchive();
  }

  CommandSetChartTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetChartTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetChartTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetChartTypeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetChartTypeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetChartTypeArchive";
  }
  protected:
  explicit CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowIdsFieldNumber = 5,
    kColumnIdsFieldNumber = 6,
    kOldRowIdsFieldNumber = 7,
    kOldColumnIdsFieldNumber = 8,
    kRollbackRowIdsFieldNumber = 9,
    kRollbackColumnIdsFieldNumber = 10,
    kSuperFieldNumber = 1,
    kNewChartTypeFieldNumber = 2,
    kOldChartTypeFieldNumber = 3,
    kRollbackChartTypeFieldNumber = 4,
    kUsesCapturedDataFieldNumber = 11,
    kUseDefaultDataFieldNumber = 12,
  };
  // repeated .TSP.UUID row_ids = 5;
  int row_ids_size() const;
  private:
  int _internal_row_ids_size() const;
  public:
  void clear_row_ids();
  ::TSP::UUID* mutable_row_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_ids();
  private:
  const ::TSP::UUID& _internal_row_ids(int index) const;
  ::TSP::UUID* _internal_add_row_ids();
  public:
  const ::TSP::UUID& row_ids(int index) const;
  ::TSP::UUID* add_row_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_ids() const;

  // repeated .TSP.UUID column_ids = 6;
  int column_ids_size() const;
  private:
  int _internal_column_ids_size() const;
  public:
  void clear_column_ids();
  ::TSP::UUID* mutable_column_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_column_ids();
  private:
  const ::TSP::UUID& _internal_column_ids(int index) const;
  ::TSP::UUID* _internal_add_column_ids();
  public:
  const ::TSP::UUID& column_ids(int index) const;
  ::TSP::UUID* add_column_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      column_ids() const;

  // repeated .TSP.UUID old_row_ids = 7;
  int old_row_ids_size() const;
  private:
  int _internal_old_row_ids_size() const;
  public:
  void clear_old_row_ids();
  ::TSP::UUID* mutable_old_row_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_row_ids();
  private:
  const ::TSP::UUID& _internal_old_row_ids(int index) const;
  ::TSP::UUID* _internal_add_old_row_ids();
  public:
  const ::TSP::UUID& old_row_ids(int index) const;
  ::TSP::UUID* add_old_row_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_row_ids() const;

  // repeated .TSP.UUID old_column_ids = 8;
  int old_column_ids_size() const;
  private:
  int _internal_old_column_ids_size() const;
  public:
  void clear_old_column_ids();
  ::TSP::UUID* mutable_old_column_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_column_ids();
  private:
  const ::TSP::UUID& _internal_old_column_ids(int index) const;
  ::TSP::UUID* _internal_add_old_column_ids();
  public:
  const ::TSP::UUID& old_column_ids(int index) const;
  ::TSP::UUID* add_old_column_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_column_ids() const;

  // repeated .TSP.UUID rollback_row_ids = 9;
  int rollback_row_ids_size() const;
  private:
  int _internal_rollback_row_ids_size() const;
  public:
  void clear_rollback_row_ids();
  ::TSP::UUID* mutable_rollback_row_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_rollback_row_ids();
  private:
  const ::TSP::UUID& _internal_rollback_row_ids(int index) const;
  ::TSP::UUID* _internal_add_rollback_row_ids();
  public:
  const ::TSP::UUID& rollback_row_ids(int index) const;
  ::TSP::UUID* add_rollback_row_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      rollback_row_ids() const;

  // repeated .TSP.UUID rollback_column_ids = 10;
  int rollback_column_ids_size() const;
  private:
  int _internal_rollback_column_ids_size() const;
  public:
  void clear_rollback_column_ids();
  ::TSP::UUID* mutable_rollback_column_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_rollback_column_ids();
  private:
  const ::TSP::UUID& _internal_rollback_column_ids(int index) const;
  ::TSP::UUID* _internal_add_rollback_column_ids();
  public:
  const ::TSP::UUID& rollback_column_ids(int index) const;
  ::TSP::UUID* add_rollback_column_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      rollback_column_ids() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSCH.ChartType new_chart_type = 2;
  bool has_new_chart_type() const;
  private:
  bool _internal_has_new_chart_type() const;
  public:
  void clear_new_chart_type();
  ::TSCH::ChartType new_chart_type() const;
  void set_new_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_new_chart_type() const;
  void _internal_set_new_chart_type(::TSCH::ChartType value);
  public:

  // optional .TSCH.ChartType old_chart_type = 3;
  bool has_old_chart_type() const;
  private:
  bool _internal_has_old_chart_type() const;
  public:
  void clear_old_chart_type();
  ::TSCH::ChartType old_chart_type() const;
  void set_old_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_old_chart_type() const;
  void _internal_set_old_chart_type(::TSCH::ChartType value);
  public:

  // optional .TSCH.ChartType rollback_chart_type = 4;
  bool has_rollback_chart_type() const;
  private:
  bool _internal_has_rollback_chart_type() const;
  public:
  void clear_rollback_chart_type();
  ::TSCH::ChartType rollback_chart_type() const;
  void set_rollback_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_rollback_chart_type() const;
  void _internal_set_rollback_chart_type(::TSCH::ChartType value);
  public:

  // optional bool uses_captured_data = 11;
  bool has_uses_captured_data() const;
  private:
  bool _internal_has_uses_captured_data() const;
  public:
  void clear_uses_captured_data();
  bool uses_captured_data() const;
  void set_uses_captured_data(bool value);
  private:
  bool _internal_uses_captured_data() const;
  void _internal_set_uses_captured_data(bool value);
  public:

  // optional bool use_default_data = 12;
  bool has_use_default_data() const;
  private:
  bool _internal_has_use_default_data() const;
  public:
  void clear_use_default_data();
  bool use_default_data() const;
  void set_use_default_data(bool value);
  private:
  bool _internal_use_default_data() const;
  void _internal_set_use_default_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetChartTypeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > column_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_row_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_column_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > rollback_row_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > rollback_column_ids_;
  ::TSCH::ChartCommandArchive* super_;
  int new_chart_type_;
  int old_chart_type_;
  int rollback_chart_type_;
  bool uses_captured_data_;
  bool use_default_data_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleSwapUndoTupleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StyleSwapUndoTupleArchive) */ {
 public:
  inline StyleSwapUndoTupleArchive() : StyleSwapUndoTupleArchive(nullptr) {}
  ~StyleSwapUndoTupleArchive() override;
  explicit constexpr StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from);
  StyleSwapUndoTupleArchive(StyleSwapUndoTupleArchive&& from) noexcept
    : StyleSwapUndoTupleArchive() {
    *this = ::std::move(from);
  }

  inline StyleSwapUndoTupleArchive& operator=(const StyleSwapUndoTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleSwapUndoTupleArchive& operator=(StyleSwapUndoTupleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleSwapUndoTupleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleSwapUndoTupleArchive* internal_default_instance() {
    return reinterpret_cast<const StyleSwapUndoTupleArchive*>(
               &_StyleSwapUndoTupleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StyleSwapUndoTupleArchive& a, StyleSwapUndoTupleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleSwapUndoTupleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleSwapUndoTupleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleSwapUndoTupleArchive* New() const final {
    return new StyleSwapUndoTupleArchive();
  }

  StyleSwapUndoTupleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleSwapUndoTupleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleSwapUndoTupleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleSwapUndoTupleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSwapUndoTupleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StyleSwapUndoTupleArchive";
  }
  protected:
  explicit StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartInfoFieldNumber = 1,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
    kRefLineUuidFieldNumber = 6,
    kIndexFieldNumber = 3,
    kSwapTypeFieldNumber = 2,
  };
  // optional .TSP.Reference chart_info = 1;
  bool has_chart_info() const;
  private:
  bool _internal_has_chart_info() const;
  public:
  void clear_chart_info();
  const ::TSP::Reference& chart_info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_chart_info();
  ::TSP::Reference* mutable_chart_info();
  void set_allocated_chart_info(::TSP::Reference* chart_info);
  private:
  const ::TSP::Reference& _internal_chart_info() const;
  ::TSP::Reference* _internal_mutable_chart_info();
  public:
  void unsafe_arena_set_allocated_chart_info(
      ::TSP::Reference* chart_info);
  ::TSP::Reference* unsafe_arena_release_chart_info();

  // optional .TSP.Reference old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::TSP::Reference& old_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_value();
  ::TSP::Reference* mutable_old_value();
  void set_allocated_old_value(::TSP::Reference* old_value);
  private:
  const ::TSP::Reference& _internal_old_value() const;
  ::TSP::Reference* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::TSP::Reference* old_value);
  ::TSP::Reference* unsafe_arena_release_old_value();

  // optional .TSP.Reference new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::TSP::Reference& new_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_new_value();
  ::TSP::Reference* mutable_new_value();
  void set_allocated_new_value(::TSP::Reference* new_value);
  private:
  const ::TSP::Reference& _internal_new_value() const;
  ::TSP::Reference* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::TSP::Reference* new_value);
  ::TSP::Reference* unsafe_arena_release_new_value();

  // optional .TSP.UUID ref_line_uuid = 6;
  bool has_ref_line_uuid() const;
  private:
  bool _internal_has_ref_line_uuid() const;
  public:
  void clear_ref_line_uuid();
  const ::TSP::UUID& ref_line_uuid() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_ref_line_uuid();
  ::TSP::UUID* mutable_ref_line_uuid();
  void set_allocated_ref_line_uuid(::TSP::UUID* ref_line_uuid);
  private:
  const ::TSP::UUID& _internal_ref_line_uuid() const;
  ::TSP::UUID* _internal_mutable_ref_line_uuid();
  public:
  void unsafe_arena_set_allocated_ref_line_uuid(
      ::TSP::UUID* ref_line_uuid);
  ::TSP::UUID* unsafe_arena_release_ref_line_uuid();

  // optional uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TSCH.StyleSwapType swap_type = 2;
  bool has_swap_type() const;
  private:
  bool _internal_has_swap_type() const;
  public:
  void clear_swap_type();
  ::TSCH::StyleSwapType swap_type() const;
  void set_swap_type(::TSCH::StyleSwapType value);
  private:
  ::TSCH::StyleSwapType _internal_swap_type() const;
  void _internal_set_swap_type(::TSCH::StyleSwapType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.StyleSwapUndoTupleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* chart_info_;
  ::TSP::Reference* old_value_;
  ::TSP::Reference* new_value_;
  ::TSP::UUID* ref_line_uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  int swap_type_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleSwapUndoTuplesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StyleSwapUndoTuplesArchive) */ {
 public:
  inline StyleSwapUndoTuplesArchive() : StyleSwapUndoTuplesArchive(nullptr) {}
  ~StyleSwapUndoTuplesArchive() override;
  explicit constexpr StyleSwapUndoTuplesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleSwapUndoTuplesArchive(const StyleSwapUndoTuplesArchive& from);
  StyleSwapUndoTuplesArchive(StyleSwapUndoTuplesArchive&& from) noexcept
    : StyleSwapUndoTuplesArchive() {
    *this = ::std::move(from);
  }

  inline StyleSwapUndoTuplesArchive& operator=(const StyleSwapUndoTuplesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleSwapUndoTuplesArchive& operator=(StyleSwapUndoTuplesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleSwapUndoTuplesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleSwapUndoTuplesArchive* internal_default_instance() {
    return reinterpret_cast<const StyleSwapUndoTuplesArchive*>(
               &_StyleSwapUndoTuplesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StyleSwapUndoTuplesArchive& a, StyleSwapUndoTuplesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleSwapUndoTuplesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleSwapUndoTuplesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleSwapUndoTuplesArchive* New() const final {
    return new StyleSwapUndoTuplesArchive();
  }

  StyleSwapUndoTuplesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleSwapUndoTuplesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleSwapUndoTuplesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StyleSwapUndoTuplesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSwapUndoTuplesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StyleSwapUndoTuplesArchive";
  }
  protected:
  explicit StyleSwapUndoTuplesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwapTuplesFieldNumber = 1,
  };
  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 1;
  int swap_tuples_size() const;
  private:
  int _internal_swap_tuples_size() const;
  public:
  void clear_swap_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_swap_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_swap_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_swap_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_swap_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      swap_tuples() const;

  // @@protoc_insertion_point(class_scope:TSCH.StyleSwapUndoTuplesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > swap_tuples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleSwapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandStyleSwapArchive) */ {
 public:
  inline CommandStyleSwapArchive() : CommandStyleSwapArchive(nullptr) {}
  ~CommandStyleSwapArchive() override;
  explicit constexpr CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleSwapArchive(const CommandStyleSwapArchive& from);
  CommandStyleSwapArchive(CommandStyleSwapArchive&& from) noexcept
    : CommandStyleSwapArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleSwapArchive& operator=(const CommandStyleSwapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleSwapArchive& operator=(CommandStyleSwapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleSwapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleSwapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleSwapArchive*>(
               &_CommandStyleSwapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandStyleSwapArchive& a, CommandStyleSwapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleSwapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleSwapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandStyleSwapArchive* New() const final {
    return new CommandStyleSwapArchive();
  }

  CommandStyleSwapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandStyleSwapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleSwapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandStyleSwapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleSwapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandStyleSwapArchive";
  }
  protected:
  explicit CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoTuplesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  int undo_tuples_size() const;
  private:
  int _internal_undo_tuples_size() const;
  public:
  void clear_undo_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_undo_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_undo_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_undo_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_undo_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& undo_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_undo_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      undo_tuples() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandStyleSwapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > undo_tuples_;
  ::TSCH::ChartCommandArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion) */ {
 public:
  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion() : CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(nullptr) {}
  ~CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion() override;
  explicit constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from);
  CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&& from) noexcept
    : CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion() {
    *this = ::std::move(from);
  }

  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& operator=(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& operator=(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* internal_default_instance() {
    return reinterpret_cast<const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion*>(
               &_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& a, CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* New() const final {
    return new CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion();
  }

  CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion";
  }
  protected:
  explicit CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartMapFieldNumber = 2,
    kLegendMapFieldNumber = 3,
    kAxisMapFieldNumber = 4,
    kSeriesMapFieldNumber = 5,
    kReferenceLineMapFieldNumber = 6,
  };
  // optional .TSCH.Generated.ChartGenericPropertyMapArchive chart_map = 2;
  bool has_chart_map() const;
  private:
  bool _internal_has_chart_map() const;
  public:
  void clear_chart_map();
  const ::TSCH::Generated::ChartGenericPropertyMapArchive& chart_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Generated::ChartGenericPropertyMapArchive* release_chart_map();
  ::TSCH::Generated::ChartGenericPropertyMapArchive* mutable_chart_map();
  void set_allocated_chart_map(::TSCH::Generated::ChartGenericPropertyMapArchive* chart_map);
  private:
  const ::TSCH::Generated::ChartGenericPropertyMapArchive& _internal_chart_map() const;
  ::TSCH::Generated::ChartGenericPropertyMapArchive* _internal_mutable_chart_map();
  public:
  void unsafe_arena_set_allocated_chart_map(
      ::TSCH::Generated::ChartGenericPropertyMapArchive* chart_map);
  ::TSCH::Generated::ChartGenericPropertyMapArchive* unsafe_arena_release_chart_map();

  // optional .TSCH.Generated.LegendGenericPropertyMapArchive legend_map = 3;
  bool has_legend_map() const;
  private:
  bool _internal_has_legend_map() const;
  public:
  void clear_legend_map();
  const ::TSCH::Generated::LegendGenericPropertyMapArchive& legend_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Generated::LegendGenericPropertyMapArchive* release_legend_map();
  ::TSCH::Generated::LegendGenericPropertyMapArchive* mutable_legend_map();
  void set_allocated_legend_map(::TSCH::Generated::LegendGenericPropertyMapArchive* legend_map);
  private:
  const ::TSCH::Generated::LegendGenericPropertyMapArchive& _internal_legend_map() const;
  ::TSCH::Generated::LegendGenericPropertyMapArchive* _internal_mutable_legend_map();
  public:
  void unsafe_arena_set_allocated_legend_map(
      ::TSCH::Generated::LegendGenericPropertyMapArchive* legend_map);
  ::TSCH::Generated::LegendGenericPropertyMapArchive* unsafe_arena_release_legend_map();

  // optional .TSCH.Generated.ChartAxisGenericPropertyMapArchive axis_map = 4;
  bool has_axis_map() const;
  private:
  bool _internal_has_axis_map() const;
  public:
  void clear_axis_map();
  const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive& axis_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* release_axis_map();
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* mutable_axis_map();
  void set_allocated_axis_map(::TSCH::Generated::ChartAxisGenericPropertyMapArchive* axis_map);
  private:
  const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive& _internal_axis_map() const;
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* _internal_mutable_axis_map();
  public:
  void unsafe_arena_set_allocated_axis_map(
      ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* axis_map);
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* unsafe_arena_release_axis_map();

  // optional .TSCH.Generated.ChartSeriesGenericPropertyMapArchive series_map = 5;
  bool has_series_map() const;
  private:
  bool _internal_has_series_map() const;
  public:
  void clear_series_map();
  const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive& series_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* release_series_map();
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* mutable_series_map();
  void set_allocated_series_map(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* series_map);
  private:
  const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive& _internal_series_map() const;
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* _internal_mutable_series_map();
  public:
  void unsafe_arena_set_allocated_series_map(
      ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* series_map);
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* unsafe_arena_release_series_map();

  // optional .TSCH.Generated.ReferenceLineGenericPropertyMapArchive reference_line_map = 6;
  bool has_reference_line_map() const;
  private:
  bool _internal_has_reference_line_map() const;
  public:
  void clear_reference_line_map();
  const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive& reference_line_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* release_reference_line_map();
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* mutable_reference_line_map();
  void set_allocated_reference_line_map(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* reference_line_map);
  private:
  const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive& _internal_reference_line_map() const;
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* _internal_mutable_reference_line_map();
  public:
  void unsafe_arena_set_allocated_reference_line_map(
      ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* reference_line_map);
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* unsafe_arena_release_reference_line_map();

  // @@protoc_insertion_point(class_scope:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Generated::ChartGenericPropertyMapArchive* chart_map_;
  ::TSCH::Generated::LegendGenericPropertyMapArchive* legend_map_;
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* axis_map_;
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* series_map_;
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* reference_line_map_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutatePropertiesArchive_GenericPropertyDeltaMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap) */ {
 public:
  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap() : CommandMutatePropertiesArchive_GenericPropertyDeltaMap(nullptr) {}
  ~CommandMutatePropertiesArchive_GenericPropertyDeltaMap() override;
  explicit constexpr CommandMutatePropertiesArchive_GenericPropertyDeltaMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutatePropertiesArchive_GenericPropertyDeltaMap(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from);
  CommandMutatePropertiesArchive_GenericPropertyDeltaMap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap&& from) noexcept
    : CommandMutatePropertiesArchive_GenericPropertyDeltaMap() {
    *this = ::std::move(from);
  }

  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap& operator=(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap& operator=(CommandMutatePropertiesArchive_GenericPropertyDeltaMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutatePropertiesArchive_GenericPropertyDeltaMap* internal_default_instance() {
    return reinterpret_cast<const CommandMutatePropertiesArchive_GenericPropertyDeltaMap*>(
               &_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap& a, CommandMutatePropertiesArchive_GenericPropertyDeltaMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMutatePropertiesArchive_GenericPropertyDeltaMap* New() const final {
    return new CommandMutatePropertiesArchive_GenericPropertyDeltaMap();
  }

  CommandMutatePropertiesArchive_GenericPropertyDeltaMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMutatePropertiesArchive_GenericPropertyDeltaMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMutatePropertiesArchive_GenericPropertyDeltaMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutatePropertiesArchive_GenericPropertyDeltaMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap";
  }
  protected:
  explicit CommandMutatePropertiesArchive_GenericPropertyDeltaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion GenericMapUnion;

  // accessors -------------------------------------------------------

  enum : int {
    kStyleOwnerPathFieldNumber = 1,
    kForwardMapFieldNumber = 2,
    kReverseMapFieldNumber = 3,
  };
  // optional .TSCH.StyleOwnerPath style_owner_path = 1;
  bool has_style_owner_path() const;
  private:
  bool _internal_has_style_owner_path() const;
  public:
  void clear_style_owner_path();
  const ::TSCH::StyleOwnerPath& style_owner_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::StyleOwnerPath* release_style_owner_path();
  ::TSCH::StyleOwnerPath* mutable_style_owner_path();
  void set_allocated_style_owner_path(::TSCH::StyleOwnerPath* style_owner_path);
  private:
  const ::TSCH::StyleOwnerPath& _internal_style_owner_path() const;
  ::TSCH::StyleOwnerPath* _internal_mutable_style_owner_path();
  public:
  void unsafe_arena_set_allocated_style_owner_path(
      ::TSCH::StyleOwnerPath* style_owner_path);
  ::TSCH::StyleOwnerPath* unsafe_arena_release_style_owner_path();

  // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion forward_map = 2;
  bool has_forward_map() const;
  private:
  bool _internal_has_forward_map() const;
  public:
  void clear_forward_map();
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& forward_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* release_forward_map();
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* mutable_forward_map();
  void set_allocated_forward_map(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* forward_map);
  private:
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& _internal_forward_map() const;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* _internal_mutable_forward_map();
  public:
  void unsafe_arena_set_allocated_forward_map(
      ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* forward_map);
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* unsafe_arena_release_forward_map();

  // optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion reverse_map = 3;
  bool has_reverse_map() const;
  private:
  bool _internal_has_reverse_map() const;
  public:
  void clear_reverse_map();
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& reverse_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* release_reverse_map();
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* mutable_reverse_map();
  void set_allocated_reverse_map(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* reverse_map);
  private:
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& _internal_reverse_map() const;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* _internal_mutable_reverse_map();
  public:
  void unsafe_arena_set_allocated_reverse_map(
      ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* reverse_map);
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* unsafe_arena_release_reverse_map();

  // @@protoc_insertion_point(class_scope:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::StyleOwnerPath* style_owner_path_;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* forward_map_;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* reverse_map_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive) */ {
 public:
  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive() : CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(nullptr) {}
  ~CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive() override;
  explicit constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from);
  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&& from) noexcept
    : CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& operator=(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& operator=(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive*>(
               &_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& a, CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* New() const final {
    return new CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive();
  }

  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive";
  }
  protected:
  explicit CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharPropertiesFieldNumber = 1,
    kParaPropertiesFieldNumber = 2,
  };
  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
  bool has_char_properties() const;
  private:
  bool _internal_has_char_properties() const;
  public:
  void clear_char_properties();
  const ::TSWP::CharacterStylePropertiesArchive& char_properties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::CharacterStylePropertiesArchive* release_char_properties();
  ::TSWP::CharacterStylePropertiesArchive* mutable_char_properties();
  void set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties);
  private:
  const ::TSWP::CharacterStylePropertiesArchive& _internal_char_properties() const;
  ::TSWP::CharacterStylePropertiesArchive* _internal_mutable_char_properties();
  public:
  void unsafe_arena_set_allocated_char_properties(
      ::TSWP::CharacterStylePropertiesArchive* char_properties);
  ::TSWP::CharacterStylePropertiesArchive* unsafe_arena_release_char_properties();

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
  bool has_para_properties() const;
  private:
  bool _internal_has_para_properties() const;
  public:
  void clear_para_properties();
  const ::TSWP::ParagraphStylePropertiesArchive& para_properties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ParagraphStylePropertiesArchive* release_para_properties();
  ::TSWP::ParagraphStylePropertiesArchive* mutable_para_properties();
  void set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties);
  private:
  const ::TSWP::ParagraphStylePropertiesArchive& _internal_para_properties() const;
  ::TSWP::ParagraphStylePropertiesArchive* _internal_mutable_para_properties();
  public:
  void unsafe_arena_set_allocated_para_properties(
      ::TSWP::ParagraphStylePropertiesArchive* para_properties);
  ::TSWP::ParagraphStylePropertiesArchive* unsafe_arena_release_para_properties();

  // @@protoc_insertion_point(class_scope:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::CharacterStylePropertiesArchive* char_properties_;
  ::TSWP::ParagraphStylePropertiesArchive* para_properties_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutatePropertiesArchive_ParagraphStyleDeltaMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap) */ {
 public:
  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap() : CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(nullptr) {}
  ~CommandMutatePropertiesArchive_ParagraphStyleDeltaMap() override;
  explicit constexpr CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from);
  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap&& from) noexcept
    : CommandMutatePropertiesArchive_ParagraphStyleDeltaMap() {
    *this = ::std::move(from);
  }

  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& operator=(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& operator=(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* internal_default_instance() {
    return reinterpret_cast<const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap*>(
               &_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& a, CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* New() const final {
    return new CommandMutatePropertiesArchive_ParagraphStyleDeltaMap();
  }

  CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMutatePropertiesArchive_ParagraphStyleDeltaMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap";
  }
  protected:
  explicit CommandMutatePropertiesArchive_ParagraphStyleDeltaMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive ParagraphStylePropertyMapArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kStyleOwnerPathFieldNumber = 1,
    kForwardMapFieldNumber = 3,
    kReverseMapFieldNumber = 4,
    kParagraphStyleIndexPropertyFieldNumber = 2,
  };
  // optional .TSCH.StyleOwnerPath style_owner_path = 1;
  bool has_style_owner_path() const;
  private:
  bool _internal_has_style_owner_path() const;
  public:
  void clear_style_owner_path();
  const ::TSCH::StyleOwnerPath& style_owner_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::StyleOwnerPath* release_style_owner_path();
  ::TSCH::StyleOwnerPath* mutable_style_owner_path();
  void set_allocated_style_owner_path(::TSCH::StyleOwnerPath* style_owner_path);
  private:
  const ::TSCH::StyleOwnerPath& _internal_style_owner_path() const;
  ::TSCH::StyleOwnerPath* _internal_mutable_style_owner_path();
  public:
  void unsafe_arena_set_allocated_style_owner_path(
      ::TSCH::StyleOwnerPath* style_owner_path);
  ::TSCH::StyleOwnerPath* unsafe_arena_release_style_owner_path();

  // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive forward_map = 3;
  bool has_forward_map() const;
  private:
  bool _internal_has_forward_map() const;
  public:
  void clear_forward_map();
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& forward_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* release_forward_map();
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* mutable_forward_map();
  void set_allocated_forward_map(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* forward_map);
  private:
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& _internal_forward_map() const;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* _internal_mutable_forward_map();
  public:
  void unsafe_arena_set_allocated_forward_map(
      ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* forward_map);
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* unsafe_arena_release_forward_map();

  // optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive reverse_map = 4;
  bool has_reverse_map() const;
  private:
  bool _internal_has_reverse_map() const;
  public:
  void clear_reverse_map();
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& reverse_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* release_reverse_map();
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* mutable_reverse_map();
  void set_allocated_reverse_map(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* reverse_map);
  private:
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& _internal_reverse_map() const;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* _internal_mutable_reverse_map();
  public:
  void unsafe_arena_set_allocated_reverse_map(
      ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* reverse_map);
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* unsafe_arena_release_reverse_map();

  // optional uint32 paragraph_style_index_property = 2;
  bool has_paragraph_style_index_property() const;
  private:
  bool _internal_has_paragraph_style_index_property() const;
  public:
  void clear_paragraph_style_index_property();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_style_index_property() const;
  void set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_style_index_property() const;
  void _internal_set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::StyleOwnerPath* style_owner_path_;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* forward_map_;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* reverse_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_style_index_property_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutatePropertiesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMutatePropertiesArchive) */ {
 public:
  inline CommandMutatePropertiesArchive() : CommandMutatePropertiesArchive(nullptr) {}
  ~CommandMutatePropertiesArchive() override;
  explicit constexpr CommandMutatePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutatePropertiesArchive(const CommandMutatePropertiesArchive& from);
  CommandMutatePropertiesArchive(CommandMutatePropertiesArchive&& from) noexcept
    : CommandMutatePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline CommandMutatePropertiesArchive& operator=(const CommandMutatePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutatePropertiesArchive& operator=(CommandMutatePropertiesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutatePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutatePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMutatePropertiesArchive*>(
               &_CommandMutatePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandMutatePropertiesArchive& a, CommandMutatePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutatePropertiesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutatePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMutatePropertiesArchive* New() const final {
    return new CommandMutatePropertiesArchive();
  }

  CommandMutatePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMutatePropertiesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutatePropertiesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMutatePropertiesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutatePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMutatePropertiesArchive";
  }
  protected:
  explicit CommandMutatePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandMutatePropertiesArchive_GenericPropertyDeltaMap GenericPropertyDeltaMap;
  typedef CommandMutatePropertiesArchive_ParagraphStyleDeltaMap ParagraphStyleDeltaMap;

  // accessors -------------------------------------------------------

  enum : int {
    kGenericPropertyDeltaMapsFieldNumber = 3,
    kParagraphStyleDeltaMapsFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRollbackCmdFieldNumber = 2,
    kInitiatedOnWebFieldNumber = 5,
  };
  // repeated .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap generic_property_delta_maps = 3;
  int generic_property_delta_maps_size() const;
  private:
  int _internal_generic_property_delta_maps_size() const;
  public:
  void clear_generic_property_delta_maps();
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* mutable_generic_property_delta_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >*
      mutable_generic_property_delta_maps();
  private:
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap& _internal_generic_property_delta_maps(int index) const;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* _internal_add_generic_property_delta_maps();
  public:
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap& generic_property_delta_maps(int index) const;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* add_generic_property_delta_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >&
      generic_property_delta_maps() const;

  // repeated .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap paragraph_style_delta_maps = 4;
  int paragraph_style_delta_maps_size() const;
  private:
  int _internal_paragraph_style_delta_maps_size() const;
  public:
  void clear_paragraph_style_delta_maps();
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* mutable_paragraph_style_delta_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >*
      mutable_paragraph_style_delta_maps();
  private:
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& _internal_paragraph_style_delta_maps(int index) const;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* _internal_add_paragraph_style_delta_maps();
  public:
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& paragraph_style_delta_maps(int index) const;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* add_paragraph_style_delta_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >&
      paragraph_style_delta_maps() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference rollback_cmd = 2;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // optional bool initiatedOnWeb = 5;
  bool has_initiatedonweb() const;
  private:
  bool _internal_has_initiatedonweb() const;
  public:
  void clear_initiatedonweb();
  bool initiatedonweb() const;
  void set_initiatedonweb(bool value);
  private:
  bool _internal_initiatedonweb() const;
  void _internal_set_initiatedonweb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandMutatePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap > generic_property_delta_maps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap > paragraph_style_delta_maps_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* rollback_cmd_;
  bool initiatedonweb_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandScaleAllTextArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandScaleAllTextArchive) */ {
 public:
  inline CommandScaleAllTextArchive() : CommandScaleAllTextArchive(nullptr) {}
  ~CommandScaleAllTextArchive() override;
  explicit constexpr CommandScaleAllTextArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandScaleAllTextArchive(const CommandScaleAllTextArchive& from);
  CommandScaleAllTextArchive(CommandScaleAllTextArchive&& from) noexcept
    : CommandScaleAllTextArchive() {
    *this = ::std::move(from);
  }

  inline CommandScaleAllTextArchive& operator=(const CommandScaleAllTextArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandScaleAllTextArchive& operator=(CommandScaleAllTextArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandScaleAllTextArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandScaleAllTextArchive* internal_default_instance() {
    return reinterpret_cast<const CommandScaleAllTextArchive*>(
               &_CommandScaleAllTextArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandScaleAllTextArchive& a, CommandScaleAllTextArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandScaleAllTextArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandScaleAllTextArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandScaleAllTextArchive* New() const final {
    return new CommandScaleAllTextArchive();
  }

  CommandScaleAllTextArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandScaleAllTextArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandScaleAllTextArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandScaleAllTextArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandScaleAllTextArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandScaleAllTextArchive";
  }
  protected:
  explicit CommandScaleAllTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRollbackCmdFieldNumber = 2,
    kScaleFactorFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference rollback_cmd = 2;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // optional double scale_factor = 3;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  double scale_factor() const;
  void set_scale_factor(double value);
  private:
  double _internal_scale_factor() const;
  void _internal_set_scale_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandScaleAllTextArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* rollback_cmd_;
  double scale_factor_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFontFamilyArchive_StyleSemanticTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag) */ {
 public:
  inline CommandSetFontFamilyArchive_StyleSemanticTag() : CommandSetFontFamilyArchive_StyleSemanticTag(nullptr) {}
  ~CommandSetFontFamilyArchive_StyleSemanticTag() override;
  explicit constexpr CommandSetFontFamilyArchive_StyleSemanticTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFontFamilyArchive_StyleSemanticTag(const CommandSetFontFamilyArchive_StyleSemanticTag& from);
  CommandSetFontFamilyArchive_StyleSemanticTag(CommandSetFontFamilyArchive_StyleSemanticTag&& from) noexcept
    : CommandSetFontFamilyArchive_StyleSemanticTag() {
    *this = ::std::move(from);
  }

  inline CommandSetFontFamilyArchive_StyleSemanticTag& operator=(const CommandSetFontFamilyArchive_StyleSemanticTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFontFamilyArchive_StyleSemanticTag& operator=(CommandSetFontFamilyArchive_StyleSemanticTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFontFamilyArchive_StyleSemanticTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFontFamilyArchive_StyleSemanticTag* internal_default_instance() {
    return reinterpret_cast<const CommandSetFontFamilyArchive_StyleSemanticTag*>(
               &_CommandSetFontFamilyArchive_StyleSemanticTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandSetFontFamilyArchive_StyleSemanticTag& a, CommandSetFontFamilyArchive_StyleSemanticTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFontFamilyArchive_StyleSemanticTag* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFontFamilyArchive_StyleSemanticTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetFontFamilyArchive_StyleSemanticTag* New() const final {
    return new CommandSetFontFamilyArchive_StyleSemanticTag();
  }

  CommandSetFontFamilyArchive_StyleSemanticTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetFontFamilyArchive_StyleSemanticTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFontFamilyArchive_StyleSemanticTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetFontFamilyArchive_StyleSemanticTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFontFamilyArchive_StyleSemanticTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetFontFamilyArchive.StyleSemanticTag";
  }
  protected:
  explicit CommandSetFontFamilyArchive_StyleSemanticTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 2,
    kSwapTypeFieldNumber = 1,
  };
  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TSCH.StyleSwapType swap_type = 1;
  bool has_swap_type() const;
  private:
  bool _internal_has_swap_type() const;
  public:
  void clear_swap_type();
  ::TSCH::StyleSwapType swap_type() const;
  void set_swap_type(::TSCH::StyleSwapType value);
  private:
  ::TSCH::StyleSwapType _internal_swap_type() const;
  void _internal_set_swap_type(::TSCH::StyleSwapType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  int swap_type_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive) */ {
 public:
  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive() : CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(nullptr) {}
  ~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive() override;
  explicit constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from);
  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&& from) noexcept
    : CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& operator=(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& operator=(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive*>(
               &_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& a, CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* New() const final {
    return new CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive();
  }

  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive";
  }
  protected:
  explicit CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharPropertiesFieldNumber = 1,
    kParaPropertiesFieldNumber = 2,
  };
  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
  bool has_char_properties() const;
  private:
  bool _internal_has_char_properties() const;
  public:
  void clear_char_properties();
  const ::TSWP::CharacterStylePropertiesArchive& char_properties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::CharacterStylePropertiesArchive* release_char_properties();
  ::TSWP::CharacterStylePropertiesArchive* mutable_char_properties();
  void set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties);
  private:
  const ::TSWP::CharacterStylePropertiesArchive& _internal_char_properties() const;
  ::TSWP::CharacterStylePropertiesArchive* _internal_mutable_char_properties();
  public:
  void unsafe_arena_set_allocated_char_properties(
      ::TSWP::CharacterStylePropertiesArchive* char_properties);
  ::TSWP::CharacterStylePropertiesArchive* unsafe_arena_release_char_properties();

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
  bool has_para_properties() const;
  private:
  bool _internal_has_para_properties() const;
  public:
  void clear_para_properties();
  const ::TSWP::ParagraphStylePropertiesArchive& para_properties() const;
  PROTOBUF_MUST_USE_RESULT ::TSWP::ParagraphStylePropertiesArchive* release_para_properties();
  ::TSWP::ParagraphStylePropertiesArchive* mutable_para_properties();
  void set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties);
  private:
  const ::TSWP::ParagraphStylePropertiesArchive& _internal_para_properties() const;
  ::TSWP::ParagraphStylePropertiesArchive* _internal_mutable_para_properties();
  public:
  void unsafe_arena_set_allocated_para_properties(
      ::TSWP::ParagraphStylePropertiesArchive* para_properties);
  ::TSWP::ParagraphStylePropertiesArchive* unsafe_arena_release_para_properties();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::CharacterStylePropertiesArchive* char_properties_;
  ::TSWP::ParagraphStylePropertiesArchive* para_properties_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap) */ {
 public:
  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap() : CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(nullptr) {}
  ~CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap() override;
  explicit constexpr CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from);
  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap&& from) noexcept
    : CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap() {
    *this = ::std::move(from);
  }

  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& operator=(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& operator=(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* internal_default_instance() {
    return reinterpret_cast<const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap*>(
               &_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& a, CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* New() const final {
    return new CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap();
  }

  CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap";
  }
  protected:
  explicit CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive ParagraphStylePropertyMapArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kStyleSemanticTagFieldNumber = 1,
    kForwardMapFieldNumber = 3,
    kReverseMapFieldNumber = 4,
    kParagraphStyleIndexPropertyFieldNumber = 2,
  };
  // optional .TSCH.CommandSetFontFamilyArchive.StyleSemanticTag style_semantic_tag = 1;
  bool has_style_semantic_tag() const;
  private:
  bool _internal_has_style_semantic_tag() const;
  public:
  void clear_style_semantic_tag();
  const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag& style_semantic_tag() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* release_style_semantic_tag();
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* mutable_style_semantic_tag();
  void set_allocated_style_semantic_tag(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* style_semantic_tag);
  private:
  const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag& _internal_style_semantic_tag() const;
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* _internal_mutable_style_semantic_tag();
  public:
  void unsafe_arena_set_allocated_style_semantic_tag(
      ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* style_semantic_tag);
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* unsafe_arena_release_style_semantic_tag();

  // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive forward_map = 3;
  bool has_forward_map() const;
  private:
  bool _internal_has_forward_map() const;
  public:
  void clear_forward_map();
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& forward_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* release_forward_map();
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* mutable_forward_map();
  void set_allocated_forward_map(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* forward_map);
  private:
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& _internal_forward_map() const;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* _internal_mutable_forward_map();
  public:
  void unsafe_arena_set_allocated_forward_map(
      ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* forward_map);
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* unsafe_arena_release_forward_map();

  // optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive reverse_map = 4;
  bool has_reverse_map() const;
  private:
  bool _internal_has_reverse_map() const;
  public:
  void clear_reverse_map();
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& reverse_map() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* release_reverse_map();
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* mutable_reverse_map();
  void set_allocated_reverse_map(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* reverse_map);
  private:
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& _internal_reverse_map() const;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* _internal_mutable_reverse_map();
  public:
  void unsafe_arena_set_allocated_reverse_map(
      ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* reverse_map);
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* unsafe_arena_release_reverse_map();

  // optional uint32 paragraph_style_index_property = 2;
  bool has_paragraph_style_index_property() const;
  private:
  bool _internal_has_paragraph_style_index_property() const;
  public:
  void clear_paragraph_style_index_property();
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_style_index_property() const;
  void set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paragraph_style_index_property() const;
  void _internal_set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* style_semantic_tag_;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* forward_map_;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* reverse_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paragraph_style_index_property_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFontFamilyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetFontFamilyArchive) */ {
 public:
  inline CommandSetFontFamilyArchive() : CommandSetFontFamilyArchive(nullptr) {}
  ~CommandSetFontFamilyArchive() override;
  explicit constexpr CommandSetFontFamilyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFontFamilyArchive(const CommandSetFontFamilyArchive& from);
  CommandSetFontFamilyArchive(CommandSetFontFamilyArchive&& from) noexcept
    : CommandSetFontFamilyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFontFamilyArchive& operator=(const CommandSetFontFamilyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFontFamilyArchive& operator=(CommandSetFontFamilyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFontFamilyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFontFamilyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFontFamilyArchive*>(
               &_CommandSetFontFamilyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandSetFontFamilyArchive& a, CommandSetFontFamilyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFontFamilyArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFontFamilyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetFontFamilyArchive* New() const final {
    return new CommandSetFontFamilyArchive();
  }

  CommandSetFontFamilyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetFontFamilyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFontFamilyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetFontFamilyArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFontFamilyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetFontFamilyArchive";
  }
  protected:
  explicit CommandSetFontFamilyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSetFontFamilyArchive_StyleSemanticTag StyleSemanticTag;
  typedef CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap SemanticParagraphStyleMutationMap;

  // accessors -------------------------------------------------------

  enum : int {
    kParagraphStyleDeltaMapsFieldNumber = 5,
    kNewFontFamilyFieldNumber = 3,
    kOldFontFamilyFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRollbackCmdFieldNumber = 2,
    kIsBoldFieldNumber = 6,
    kIsItalicFieldNumber = 7,
  };
  // repeated .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap paragraph_style_delta_maps = 5;
  int paragraph_style_delta_maps_size() const;
  private:
  int _internal_paragraph_style_delta_maps_size() const;
  public:
  void clear_paragraph_style_delta_maps();
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* mutable_paragraph_style_delta_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >*
      mutable_paragraph_style_delta_maps();
  private:
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& _internal_paragraph_style_delta_maps(int index) const;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* _internal_add_paragraph_style_delta_maps();
  public:
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& paragraph_style_delta_maps(int index) const;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* add_paragraph_style_delta_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >&
      paragraph_style_delta_maps() const;

  // optional string new_font_family = 3;
  bool has_new_font_family() const;
  private:
  bool _internal_has_new_font_family() const;
  public:
  void clear_new_font_family();
  const std::string& new_font_family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_font_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_font_family();
  PROTOBUF_MUST_USE_RESULT std::string* release_new_font_family();
  void set_allocated_new_font_family(std::string* new_font_family);
  private:
  const std::string& _internal_new_font_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_font_family(const std::string& value);
  std::string* _internal_mutable_new_font_family();
  public:

  // optional string old_font_family = 4;
  bool has_old_font_family() const;
  private:
  bool _internal_has_old_font_family() const;
  public:
  void clear_old_font_family();
  const std::string& old_font_family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_font_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_font_family();
  PROTOBUF_MUST_USE_RESULT std::string* release_old_font_family();
  void set_allocated_old_font_family(std::string* old_font_family);
  private:
  const std::string& _internal_old_font_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_font_family(const std::string& value);
  std::string* _internal_mutable_old_font_family();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference rollback_cmd = 2;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // required bool is_bold = 6;
  bool has_is_bold() const;
  private:
  bool _internal_has_is_bold() const;
  public:
  void clear_is_bold();
  bool is_bold() const;
  void set_is_bold(bool value);
  private:
  bool _internal_is_bold() const;
  void _internal_set_is_bold(bool value);
  public:

  // required bool is_italic = 7;
  bool has_is_italic() const;
  private:
  bool _internal_has_is_italic() const;
  public:
  void clear_is_italic();
  bool is_italic() const;
  void set_is_italic(bool value);
  private:
  bool _internal_is_italic() const;
  void _internal_set_is_italic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetFontFamilyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap > paragraph_style_delta_maps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_font_family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_font_family_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* rollback_cmd_;
  bool is_bold_;
  bool is_italic_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyFillSetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandApplyFillSetArchive) */ {
 public:
  inline CommandApplyFillSetArchive() : CommandApplyFillSetArchive(nullptr) {}
  ~CommandApplyFillSetArchive() override;
  explicit constexpr CommandApplyFillSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyFillSetArchive(const CommandApplyFillSetArchive& from);
  CommandApplyFillSetArchive(CommandApplyFillSetArchive&& from) noexcept
    : CommandApplyFillSetArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyFillSetArchive& operator=(const CommandApplyFillSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyFillSetArchive& operator=(CommandApplyFillSetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyFillSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyFillSetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyFillSetArchive*>(
               &_CommandApplyFillSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandApplyFillSetArchive& a, CommandApplyFillSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyFillSetArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyFillSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandApplyFillSetArchive* New() const final {
    return new CommandApplyFillSetArchive();
  }

  CommandApplyFillSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandApplyFillSetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyFillSetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandApplyFillSetArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyFillSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandApplyFillSetArchive";
  }
  protected:
  explicit CommandApplyFillSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorLastAppliedFillSetLookupStringFieldNumber = 5,
    kSuperFieldNumber = 1,
    kFillSetFieldNumber = 3,
    kOldFillSetFieldNumber = 4,
    kRollbackCmdFieldNumber = 6,
    kChartTypeFieldNumber = 2,
  };
  // optional string prior_last_applied_fill_set_lookup_string = 5;
  bool has_prior_last_applied_fill_set_lookup_string() const;
  private:
  bool _internal_has_prior_last_applied_fill_set_lookup_string() const;
  public:
  void clear_prior_last_applied_fill_set_lookup_string();
  const std::string& prior_last_applied_fill_set_lookup_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prior_last_applied_fill_set_lookup_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prior_last_applied_fill_set_lookup_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_prior_last_applied_fill_set_lookup_string();
  void set_allocated_prior_last_applied_fill_set_lookup_string(std::string* prior_last_applied_fill_set_lookup_string);
  private:
  const std::string& _internal_prior_last_applied_fill_set_lookup_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prior_last_applied_fill_set_lookup_string(const std::string& value);
  std::string* _internal_mutable_prior_last_applied_fill_set_lookup_string();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSCH.ChartFillSetArchive fill_set = 3;
  bool has_fill_set() const;
  private:
  bool _internal_has_fill_set() const;
  public:
  void clear_fill_set();
  const ::TSCH::ChartFillSetArchive& fill_set() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartFillSetArchive* release_fill_set();
  ::TSCH::ChartFillSetArchive* mutable_fill_set();
  void set_allocated_fill_set(::TSCH::ChartFillSetArchive* fill_set);
  private:
  const ::TSCH::ChartFillSetArchive& _internal_fill_set() const;
  ::TSCH::ChartFillSetArchive* _internal_mutable_fill_set();
  public:
  void unsafe_arena_set_allocated_fill_set(
      ::TSCH::ChartFillSetArchive* fill_set);
  ::TSCH::ChartFillSetArchive* unsafe_arena_release_fill_set();

  // optional .TSCH.ChartFillSetArchive old_fill_set = 4;
  bool has_old_fill_set() const;
  private:
  bool _internal_has_old_fill_set() const;
  public:
  void clear_old_fill_set();
  const ::TSCH::ChartFillSetArchive& old_fill_set() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartFillSetArchive* release_old_fill_set();
  ::TSCH::ChartFillSetArchive* mutable_old_fill_set();
  void set_allocated_old_fill_set(::TSCH::ChartFillSetArchive* old_fill_set);
  private:
  const ::TSCH::ChartFillSetArchive& _internal_old_fill_set() const;
  ::TSCH::ChartFillSetArchive* _internal_mutable_old_fill_set();
  public:
  void unsafe_arena_set_allocated_old_fill_set(
      ::TSCH::ChartFillSetArchive* old_fill_set);
  ::TSCH::ChartFillSetArchive* unsafe_arena_release_old_fill_set();

  // optional .TSP.Reference rollback_cmd = 6;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // required .TSCH.ChartType chart_type = 2;
  bool has_chart_type() const;
  private:
  bool _internal_has_chart_type() const;
  public:
  void clear_chart_type();
  ::TSCH::ChartType chart_type() const;
  void set_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_chart_type() const;
  void _internal_set_chart_type(::TSCH::ChartType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandApplyFillSetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prior_last_applied_fill_set_lookup_string_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSCH::ChartFillSetArchive* fill_set_;
  ::TSCH::ChartFillSetArchive* old_fill_set_;
  ::TSP::Reference* rollback_cmd_;
  int chart_type_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSeriesNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetSeriesNameArchive) */ {
 public:
  inline CommandSetSeriesNameArchive() : CommandSetSeriesNameArchive(nullptr) {}
  ~CommandSetSeriesNameArchive() override;
  explicit constexpr CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from);
  CommandSetSeriesNameArchive(CommandSetSeriesNameArchive&& from) noexcept
    : CommandSetSeriesNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSeriesNameArchive& operator=(const CommandSetSeriesNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSeriesNameArchive& operator=(CommandSetSeriesNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSeriesNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSeriesNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSeriesNameArchive*>(
               &_CommandSetSeriesNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandSetSeriesNameArchive& a, CommandSetSeriesNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSeriesNameArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSeriesNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetSeriesNameArchive* New() const final {
    return new CommandSetSeriesNameArchive();
  }

  CommandSetSeriesNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetSeriesNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSeriesNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetSeriesNameArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSeriesNameArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetSeriesNameArchive";
  }
  protected:
  explicit CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 3,
    kNewNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSeriesIndexFieldNumber = 2,
  };
  // optional string oldName = 3;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_MUST_USE_RESULT std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required string newName = 4;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_MUST_USE_RESULT std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 seriesIndex = 2;
  bool has_seriesindex() const;
  private:
  bool _internal_has_seriesindex() const;
  public:
  void clear_seriesindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesindex() const;
  void set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seriesindex() const;
  void _internal_set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesindex_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetCategoryNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetCategoryNameArchive) */ {
 public:
  inline CommandSetCategoryNameArchive() : CommandSetCategoryNameArchive(nullptr) {}
  ~CommandSetCategoryNameArchive() override;
  explicit constexpr CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from);
  CommandSetCategoryNameArchive(CommandSetCategoryNameArchive&& from) noexcept
    : CommandSetCategoryNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetCategoryNameArchive& operator=(const CommandSetCategoryNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetCategoryNameArchive& operator=(CommandSetCategoryNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetCategoryNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetCategoryNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetCategoryNameArchive*>(
               &_CommandSetCategoryNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandSetCategoryNameArchive& a, CommandSetCategoryNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetCategoryNameArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetCategoryNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetCategoryNameArchive* New() const final {
    return new CommandSetCategoryNameArchive();
  }

  CommandSetCategoryNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetCategoryNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetCategoryNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetCategoryNameArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetCategoryNameArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetCategoryNameArchive";
  }
  protected:
  explicit CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 3,
    kNewNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kCategoryIndexFieldNumber = 2,
    kIsMultiDataIndexFieldNumber = 5,
  };
  // optional string oldName = 3;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_MUST_USE_RESULT std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required string newName = 4;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_MUST_USE_RESULT std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 categoryIndex = 2;
  bool has_categoryindex() const;
  private:
  bool _internal_has_categoryindex() const;
  public:
  void clear_categoryindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 categoryindex() const;
  void set_categoryindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_categoryindex() const;
  void _internal_set_categoryindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isMultiDataIndex = 5;
  bool has_ismultidataindex() const;
  private:
  bool _internal_has_ismultidataindex() const;
  public:
  void clear_ismultidataindex();
  bool ismultidataindex() const;
  void set_ismultidataindex(bool value);
  private:
  bool _internal_ismultidataindex() const;
  void _internal_set_ismultidataindex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetCategoryNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 categoryindex_;
  bool ismultidataindex_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandAddGridRowsArchive) */ {
 public:
  inline CommandAddGridRowsArchive() : CommandAddGridRowsArchive(nullptr) {}
  ~CommandAddGridRowsArchive() override;
  explicit constexpr CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from);
  CommandAddGridRowsArchive(CommandAddGridRowsArchive&& from) noexcept
    : CommandAddGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddGridRowsArchive& operator=(const CommandAddGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddGridRowsArchive& operator=(CommandAddGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddGridRowsArchive*>(
               &_CommandAddGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandAddGridRowsArchive& a, CommandAddGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddGridRowsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAddGridRowsArchive* New() const final {
    return new CommandAddGridRowsArchive();
  }

  CommandAddGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAddGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandAddGridRowsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddGridRowsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandAddGridRowsArchive";
  }
  protected:
  explicit CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowIdListFieldNumber = 3,
    kRowNameListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRowIdFieldNumber = 2,
    kUndoDeletionStartIdFieldNumber = 5,
    kUndoDeletionEndIdFieldNumber = 6,
  };
  // repeated .TSP.UUID row_id_list = 3;
  int row_id_list_size() const;
  private:
  int _internal_row_id_list_size() const;
  public:
  void clear_row_id_list();
  ::TSP::UUID* mutable_row_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_id_list();
  private:
  const ::TSP::UUID& _internal_row_id_list(int index) const;
  ::TSP::UUID* _internal_add_row_id_list();
  public:
  const ::TSP::UUID& row_id_list(int index) const;
  ::TSP::UUID* add_row_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_id_list() const;

  // repeated string row_name_list = 4;
  int row_name_list_size() const;
  private:
  int _internal_row_name_list_size() const;
  public:
  void clear_row_name_list();
  const std::string& row_name_list(int index) const;
  std::string* mutable_row_name_list(int index);
  void set_row_name_list(int index, const std::string& value);
  void set_row_name_list(int index, std::string&& value);
  void set_row_name_list(int index, const char* value);
  void set_row_name_list(int index, const char* value, size_t size);
  std::string* add_row_name_list();
  void add_row_name_list(const std::string& value);
  void add_row_name_list(std::string&& value);
  void add_row_name_list(const char* value);
  void add_row_name_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_name_list();
  private:
  const std::string& _internal_row_name_list(int index) const;
  std::string* _internal_add_row_name_list();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID row_id = 2;
  bool has_row_id() const;
  private:
  bool _internal_has_row_id() const;
  public:
  void clear_row_id();
  const ::TSP::UUID& row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_row_id();
  ::TSP::UUID* mutable_row_id();
  void set_allocated_row_id(::TSP::UUID* row_id);
  private:
  const ::TSP::UUID& _internal_row_id() const;
  ::TSP::UUID* _internal_mutable_row_id();
  public:
  void unsafe_arena_set_allocated_row_id(
      ::TSP::UUID* row_id);
  ::TSP::UUID* unsafe_arena_release_row_id();

  // optional .TSP.UUID undo_deletion_start_id = 5;
  bool has_undo_deletion_start_id() const;
  private:
  bool _internal_has_undo_deletion_start_id() const;
  public:
  void clear_undo_deletion_start_id();
  const ::TSP::UUID& undo_deletion_start_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_deletion_start_id();
  ::TSP::UUID* mutable_undo_deletion_start_id();
  void set_allocated_undo_deletion_start_id(::TSP::UUID* undo_deletion_start_id);
  private:
  const ::TSP::UUID& _internal_undo_deletion_start_id() const;
  ::TSP::UUID* _internal_mutable_undo_deletion_start_id();
  public:
  void unsafe_arena_set_allocated_undo_deletion_start_id(
      ::TSP::UUID* undo_deletion_start_id);
  ::TSP::UUID* unsafe_arena_release_undo_deletion_start_id();

  // optional .TSP.UUID undo_deletion_end_id = 6;
  bool has_undo_deletion_end_id() const;
  private:
  bool _internal_has_undo_deletion_end_id() const;
  public:
  void clear_undo_deletion_end_id();
  const ::TSP::UUID& undo_deletion_end_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_deletion_end_id();
  ::TSP::UUID* mutable_undo_deletion_end_id();
  void set_allocated_undo_deletion_end_id(::TSP::UUID* undo_deletion_end_id);
  private:
  const ::TSP::UUID& _internal_undo_deletion_end_id() const;
  ::TSP::UUID* _internal_mutable_undo_deletion_end_id();
  public:
  void unsafe_arena_set_allocated_undo_deletion_end_id(
      ::TSP::UUID* undo_deletion_end_id);
  ::TSP::UUID* unsafe_arena_release_undo_deletion_end_id();

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridRowsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_name_list_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* row_id_;
  ::TSP::UUID* undo_deletion_start_id_;
  ::TSP::UUID* undo_deletion_end_id_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandAddGridColumnsArchive) */ {
 public:
  inline CommandAddGridColumnsArchive() : CommandAddGridColumnsArchive(nullptr) {}
  ~CommandAddGridColumnsArchive() override;
  explicit constexpr CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from);
  CommandAddGridColumnsArchive(CommandAddGridColumnsArchive&& from) noexcept
    : CommandAddGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddGridColumnsArchive& operator=(const CommandAddGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddGridColumnsArchive& operator=(CommandAddGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddGridColumnsArchive*>(
               &_CommandAddGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandAddGridColumnsArchive& a, CommandAddGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddGridColumnsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAddGridColumnsArchive* New() const final {
    return new CommandAddGridColumnsArchive();
  }

  CommandAddGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAddGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandAddGridColumnsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddGridColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandAddGridColumnsArchive";
  }
  protected:
  explicit CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnIdListFieldNumber = 3,
    kColumnNameListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kColumnIdFieldNumber = 2,
    kUndoDeletionStartIdFieldNumber = 5,
    kUndoDeletionEndIdFieldNumber = 6,
  };
  // repeated .TSP.UUID column_id_list = 3;
  int column_id_list_size() const;
  private:
  int _internal_column_id_list_size() const;
  public:
  void clear_column_id_list();
  ::TSP::UUID* mutable_column_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_column_id_list();
  private:
  const ::TSP::UUID& _internal_column_id_list(int index) const;
  ::TSP::UUID* _internal_add_column_id_list();
  public:
  const ::TSP::UUID& column_id_list(int index) const;
  ::TSP::UUID* add_column_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      column_id_list() const;

  // repeated string column_name_list = 4;
  int column_name_list_size() const;
  private:
  int _internal_column_name_list_size() const;
  public:
  void clear_column_name_list();
  const std::string& column_name_list(int index) const;
  std::string* mutable_column_name_list(int index);
  void set_column_name_list(int index, const std::string& value);
  void set_column_name_list(int index, std::string&& value);
  void set_column_name_list(int index, const char* value);
  void set_column_name_list(int index, const char* value, size_t size);
  std::string* add_column_name_list();
  void add_column_name_list(const std::string& value);
  void add_column_name_list(std::string&& value);
  void add_column_name_list(const char* value);
  void add_column_name_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name_list();
  private:
  const std::string& _internal_column_name_list(int index) const;
  std::string* _internal_add_column_name_list();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID column_id = 2;
  bool has_column_id() const;
  private:
  bool _internal_has_column_id() const;
  public:
  void clear_column_id();
  const ::TSP::UUID& column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_column_id();
  ::TSP::UUID* mutable_column_id();
  void set_allocated_column_id(::TSP::UUID* column_id);
  private:
  const ::TSP::UUID& _internal_column_id() const;
  ::TSP::UUID* _internal_mutable_column_id();
  public:
  void unsafe_arena_set_allocated_column_id(
      ::TSP::UUID* column_id);
  ::TSP::UUID* unsafe_arena_release_column_id();

  // optional .TSP.UUID undo_deletion_start_id = 5;
  bool has_undo_deletion_start_id() const;
  private:
  bool _internal_has_undo_deletion_start_id() const;
  public:
  void clear_undo_deletion_start_id();
  const ::TSP::UUID& undo_deletion_start_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_deletion_start_id();
  ::TSP::UUID* mutable_undo_deletion_start_id();
  void set_allocated_undo_deletion_start_id(::TSP::UUID* undo_deletion_start_id);
  private:
  const ::TSP::UUID& _internal_undo_deletion_start_id() const;
  ::TSP::UUID* _internal_mutable_undo_deletion_start_id();
  public:
  void unsafe_arena_set_allocated_undo_deletion_start_id(
      ::TSP::UUID* undo_deletion_start_id);
  ::TSP::UUID* unsafe_arena_release_undo_deletion_start_id();

  // optional .TSP.UUID undo_deletion_end_id = 6;
  bool has_undo_deletion_end_id() const;
  private:
  bool _internal_has_undo_deletion_end_id() const;
  public:
  void clear_undo_deletion_end_id();
  const ::TSP::UUID& undo_deletion_end_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_deletion_end_id();
  ::TSP::UUID* mutable_undo_deletion_end_id();
  void set_allocated_undo_deletion_end_id(::TSP::UUID* undo_deletion_end_id);
  private:
  const ::TSP::UUID& _internal_undo_deletion_end_id() const;
  ::TSP::UUID* _internal_mutable_undo_deletion_end_id();
  public:
  void unsafe_arena_set_allocated_undo_deletion_end_id(
      ::TSP::UUID* undo_deletion_end_id);
  ::TSP::UUID* unsafe_arena_release_undo_deletion_end_id();

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridColumnsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > column_id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_list_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* column_id_;
  ::TSP::UUID* undo_deletion_start_id_;
  ::TSP::UUID* undo_deletion_end_id_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMoveGridRowsArchive) */ {
 public:
  inline CommandMoveGridRowsArchive() : CommandMoveGridRowsArchive(nullptr) {}
  ~CommandMoveGridRowsArchive() override;
  explicit constexpr CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from);
  CommandMoveGridRowsArchive(CommandMoveGridRowsArchive&& from) noexcept
    : CommandMoveGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveGridRowsArchive& operator=(const CommandMoveGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveGridRowsArchive& operator=(CommandMoveGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveGridRowsArchive*>(
               &_CommandMoveGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandMoveGridRowsArchive& a, CommandMoveGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveGridRowsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMoveGridRowsArchive* New() const final {
    return new CommandMoveGridRowsArchive();
  }

  CommandMoveGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMoveGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMoveGridRowsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveGridRowsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMoveGridRowsArchive";
  }
  protected:
  explicit CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStartRowIdFieldNumber = 2,
    kEndRowIdFieldNumber = 3,
    kAfterRowIdFieldNumber = 4,
    kUndoAfterRowIdFieldNumber = 5,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID start_row_id = 2;
  bool has_start_row_id() const;
  private:
  bool _internal_has_start_row_id() const;
  public:
  void clear_start_row_id();
  const ::TSP::UUID& start_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_start_row_id();
  ::TSP::UUID* mutable_start_row_id();
  void set_allocated_start_row_id(::TSP::UUID* start_row_id);
  private:
  const ::TSP::UUID& _internal_start_row_id() const;
  ::TSP::UUID* _internal_mutable_start_row_id();
  public:
  void unsafe_arena_set_allocated_start_row_id(
      ::TSP::UUID* start_row_id);
  ::TSP::UUID* unsafe_arena_release_start_row_id();

  // required .TSP.UUID end_row_id = 3;
  bool has_end_row_id() const;
  private:
  bool _internal_has_end_row_id() const;
  public:
  void clear_end_row_id();
  const ::TSP::UUID& end_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_end_row_id();
  ::TSP::UUID* mutable_end_row_id();
  void set_allocated_end_row_id(::TSP::UUID* end_row_id);
  private:
  const ::TSP::UUID& _internal_end_row_id() const;
  ::TSP::UUID* _internal_mutable_end_row_id();
  public:
  void unsafe_arena_set_allocated_end_row_id(
      ::TSP::UUID* end_row_id);
  ::TSP::UUID* unsafe_arena_release_end_row_id();

  // optional .TSP.UUID after_row_id = 4;
  bool has_after_row_id() const;
  private:
  bool _internal_has_after_row_id() const;
  public:
  void clear_after_row_id();
  const ::TSP::UUID& after_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_after_row_id();
  ::TSP::UUID* mutable_after_row_id();
  void set_allocated_after_row_id(::TSP::UUID* after_row_id);
  private:
  const ::TSP::UUID& _internal_after_row_id() const;
  ::TSP::UUID* _internal_mutable_after_row_id();
  public:
  void unsafe_arena_set_allocated_after_row_id(
      ::TSP::UUID* after_row_id);
  ::TSP::UUID* unsafe_arena_release_after_row_id();

  // optional .TSP.UUID undo_after_row_id = 5;
  bool has_undo_after_row_id() const;
  private:
  bool _internal_has_undo_after_row_id() const;
  public:
  void clear_undo_after_row_id();
  const ::TSP::UUID& undo_after_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_after_row_id();
  ::TSP::UUID* mutable_undo_after_row_id();
  void set_allocated_undo_after_row_id(::TSP::UUID* undo_after_row_id);
  private:
  const ::TSP::UUID& _internal_undo_after_row_id() const;
  ::TSP::UUID* _internal_mutable_undo_after_row_id();
  public:
  void unsafe_arena_set_allocated_undo_after_row_id(
      ::TSP::UUID* undo_after_row_id);
  ::TSP::UUID* unsafe_arena_release_undo_after_row_id();

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* start_row_id_;
  ::TSP::UUID* end_row_id_;
  ::TSP::UUID* after_row_id_;
  ::TSP::UUID* undo_after_row_id_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMoveGridColumnsArchive) */ {
 public:
  inline CommandMoveGridColumnsArchive() : CommandMoveGridColumnsArchive(nullptr) {}
  ~CommandMoveGridColumnsArchive() override;
  explicit constexpr CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from);
  CommandMoveGridColumnsArchive(CommandMoveGridColumnsArchive&& from) noexcept
    : CommandMoveGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveGridColumnsArchive& operator=(const CommandMoveGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveGridColumnsArchive& operator=(CommandMoveGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveGridColumnsArchive*>(
               &_CommandMoveGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandMoveGridColumnsArchive& a, CommandMoveGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveGridColumnsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMoveGridColumnsArchive* New() const final {
    return new CommandMoveGridColumnsArchive();
  }

  CommandMoveGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMoveGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMoveGridColumnsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveGridColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMoveGridColumnsArchive";
  }
  protected:
  explicit CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStartColumnIdFieldNumber = 2,
    kEndColumnIdFieldNumber = 3,
    kAfterColumnIdFieldNumber = 4,
    kUndoAfterColumnIdFieldNumber = 5,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID start_column_id = 2;
  bool has_start_column_id() const;
  private:
  bool _internal_has_start_column_id() const;
  public:
  void clear_start_column_id();
  const ::TSP::UUID& start_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_start_column_id();
  ::TSP::UUID* mutable_start_column_id();
  void set_allocated_start_column_id(::TSP::UUID* start_column_id);
  private:
  const ::TSP::UUID& _internal_start_column_id() const;
  ::TSP::UUID* _internal_mutable_start_column_id();
  public:
  void unsafe_arena_set_allocated_start_column_id(
      ::TSP::UUID* start_column_id);
  ::TSP::UUID* unsafe_arena_release_start_column_id();

  // required .TSP.UUID end_column_id = 3;
  bool has_end_column_id() const;
  private:
  bool _internal_has_end_column_id() const;
  public:
  void clear_end_column_id();
  const ::TSP::UUID& end_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_end_column_id();
  ::TSP::UUID* mutable_end_column_id();
  void set_allocated_end_column_id(::TSP::UUID* end_column_id);
  private:
  const ::TSP::UUID& _internal_end_column_id() const;
  ::TSP::UUID* _internal_mutable_end_column_id();
  public:
  void unsafe_arena_set_allocated_end_column_id(
      ::TSP::UUID* end_column_id);
  ::TSP::UUID* unsafe_arena_release_end_column_id();

  // optional .TSP.UUID after_column_id = 4;
  bool has_after_column_id() const;
  private:
  bool _internal_has_after_column_id() const;
  public:
  void clear_after_column_id();
  const ::TSP::UUID& after_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_after_column_id();
  ::TSP::UUID* mutable_after_column_id();
  void set_allocated_after_column_id(::TSP::UUID* after_column_id);
  private:
  const ::TSP::UUID& _internal_after_column_id() const;
  ::TSP::UUID* _internal_mutable_after_column_id();
  public:
  void unsafe_arena_set_allocated_after_column_id(
      ::TSP::UUID* after_column_id);
  ::TSP::UUID* unsafe_arena_release_after_column_id();

  // optional .TSP.UUID undo_after_column_id = 5;
  bool has_undo_after_column_id() const;
  private:
  bool _internal_has_undo_after_column_id() const;
  public:
  void clear_undo_after_column_id();
  const ::TSP::UUID& undo_after_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_after_column_id();
  ::TSP::UUID* mutable_undo_after_column_id();
  void set_allocated_undo_after_column_id(::TSP::UUID* undo_after_column_id);
  private:
  const ::TSP::UUID& _internal_undo_after_column_id() const;
  ::TSP::UUID* _internal_mutable_undo_after_column_id();
  public:
  void unsafe_arena_set_allocated_undo_after_column_id(
      ::TSP::UUID* undo_after_column_id);
  ::TSP::UUID* unsafe_arena_release_undo_after_column_id();

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* start_column_id_;
  ::TSP::UUID* end_column_id_;
  ::TSP::UUID* after_column_id_;
  ::TSP::UUID* undo_after_column_id_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridRowsArchive) */ {
 public:
  inline CommandDeleteGridRowsArchive() : CommandDeleteGridRowsArchive(nullptr) {}
  ~CommandDeleteGridRowsArchive() override;
  explicit constexpr CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from);
  CommandDeleteGridRowsArchive(CommandDeleteGridRowsArchive&& from) noexcept
    : CommandDeleteGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridRowsArchive& operator=(const CommandDeleteGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridRowsArchive& operator=(CommandDeleteGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridRowsArchive*>(
               &_CommandDeleteGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandDeleteGridRowsArchive& a, CommandDeleteGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridRowsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDeleteGridRowsArchive* New() const final {
    return new CommandDeleteGridRowsArchive();
  }

  CommandDeleteGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDeleteGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandDeleteGridRowsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridRowsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridRowsArchive";
  }
  protected:
  explicit CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCutRowNamesFieldNumber = 4,
    kCutValuesFieldNumber = 5,
    kUndoRowIdListFieldNumber = 9,
    kCutColumnNamesFieldNumber = 11,
    kUndoColumnIdListFieldNumber = 12,
    kSuperFieldNumber = 1,
    kStartRowIdFieldNumber = 2,
    kEndRowIdFieldNumber = 3,
    kUndoColumnInsertionIdFieldNumber = 7,
    kUndoRowInsertionIdFieldNumber = 8,
    kUndoDiscardsValuesFieldNumber = 6,
  };
  // repeated string cut_row_names = 4;
  int cut_row_names_size() const;
  private:
  int _internal_cut_row_names_size() const;
  public:
  void clear_cut_row_names();
  const std::string& cut_row_names(int index) const;
  std::string* mutable_cut_row_names(int index);
  void set_cut_row_names(int index, const std::string& value);
  void set_cut_row_names(int index, std::string&& value);
  void set_cut_row_names(int index, const char* value);
  void set_cut_row_names(int index, const char* value, size_t size);
  std::string* add_cut_row_names();
  void add_cut_row_names(const std::string& value);
  void add_cut_row_names(std::string&& value);
  void add_cut_row_names(const char* value);
  void add_cut_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cut_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cut_row_names();
  private:
  const std::string& _internal_cut_row_names(int index) const;
  std::string* _internal_add_cut_row_names();
  public:

  // repeated .TSCH.GridRow cut_values = 5;
  int cut_values_size() const;
  private:
  int _internal_cut_values_size() const;
  public:
  void clear_cut_values();
  ::TSCH::GridRow* mutable_cut_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
      mutable_cut_values();
  private:
  const ::TSCH::GridRow& _internal_cut_values(int index) const;
  ::TSCH::GridRow* _internal_add_cut_values();
  public:
  const ::TSCH::GridRow& cut_values(int index) const;
  ::TSCH::GridRow* add_cut_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
      cut_values() const;

  // repeated .TSP.UUID undo_row_id_list = 9;
  int undo_row_id_list_size() const;
  private:
  int _internal_undo_row_id_list_size() const;
  public:
  void clear_undo_row_id_list();
  ::TSP::UUID* mutable_undo_row_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_row_id_list();
  private:
  const ::TSP::UUID& _internal_undo_row_id_list(int index) const;
  ::TSP::UUID* _internal_add_undo_row_id_list();
  public:
  const ::TSP::UUID& undo_row_id_list(int index) const;
  ::TSP::UUID* add_undo_row_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_row_id_list() const;

  // repeated string cut_column_names = 11;
  int cut_column_names_size() const;
  private:
  int _internal_cut_column_names_size() const;
  public:
  void clear_cut_column_names();
  const std::string& cut_column_names(int index) const;
  std::string* mutable_cut_column_names(int index);
  void set_cut_column_names(int index, const std::string& value);
  void set_cut_column_names(int index, std::string&& value);
  void set_cut_column_names(int index, const char* value);
  void set_cut_column_names(int index, const char* value, size_t size);
  std::string* add_cut_column_names();
  void add_cut_column_names(const std::string& value);
  void add_cut_column_names(std::string&& value);
  void add_cut_column_names(const char* value);
  void add_cut_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cut_column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cut_column_names();
  private:
  const std::string& _internal_cut_column_names(int index) const;
  std::string* _internal_add_cut_column_names();
  public:

  // repeated .TSP.UUID undo_column_id_list = 12;
  int undo_column_id_list_size() const;
  private:
  int _internal_undo_column_id_list_size() const;
  public:
  void clear_undo_column_id_list();
  ::TSP::UUID* mutable_undo_column_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_column_id_list();
  private:
  const ::TSP::UUID& _internal_undo_column_id_list(int index) const;
  ::TSP::UUID* _internal_add_undo_column_id_list();
  public:
  const ::TSP::UUID& undo_column_id_list(int index) const;
  ::TSP::UUID* add_undo_column_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_column_id_list() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID start_row_id = 2;
  bool has_start_row_id() const;
  private:
  bool _internal_has_start_row_id() const;
  public:
  void clear_start_row_id();
  const ::TSP::UUID& start_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_start_row_id();
  ::TSP::UUID* mutable_start_row_id();
  void set_allocated_start_row_id(::TSP::UUID* start_row_id);
  private:
  const ::TSP::UUID& _internal_start_row_id() const;
  ::TSP::UUID* _internal_mutable_start_row_id();
  public:
  void unsafe_arena_set_allocated_start_row_id(
      ::TSP::UUID* start_row_id);
  ::TSP::UUID* unsafe_arena_release_start_row_id();

  // required .TSP.UUID end_row_id = 3;
  bool has_end_row_id() const;
  private:
  bool _internal_has_end_row_id() const;
  public:
  void clear_end_row_id();
  const ::TSP::UUID& end_row_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_end_row_id();
  ::TSP::UUID* mutable_end_row_id();
  void set_allocated_end_row_id(::TSP::UUID* end_row_id);
  private:
  const ::TSP::UUID& _internal_end_row_id() const;
  ::TSP::UUID* _internal_mutable_end_row_id();
  public:
  void unsafe_arena_set_allocated_end_row_id(
      ::TSP::UUID* end_row_id);
  ::TSP::UUID* unsafe_arena_release_end_row_id();

  // optional .TSP.UUID undo_column_insertion_id = 7;
  bool has_undo_column_insertion_id() const;
  private:
  bool _internal_has_undo_column_insertion_id() const;
  public:
  void clear_undo_column_insertion_id();
  const ::TSP::UUID& undo_column_insertion_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_column_insertion_id();
  ::TSP::UUID* mutable_undo_column_insertion_id();
  void set_allocated_undo_column_insertion_id(::TSP::UUID* undo_column_insertion_id);
  private:
  const ::TSP::UUID& _internal_undo_column_insertion_id() const;
  ::TSP::UUID* _internal_mutable_undo_column_insertion_id();
  public:
  void unsafe_arena_set_allocated_undo_column_insertion_id(
      ::TSP::UUID* undo_column_insertion_id);
  ::TSP::UUID* unsafe_arena_release_undo_column_insertion_id();

  // optional .TSP.UUID undo_row_insertion_id = 8;
  bool has_undo_row_insertion_id() const;
  private:
  bool _internal_has_undo_row_insertion_id() const;
  public:
  void clear_undo_row_insertion_id();
  const ::TSP::UUID& undo_row_insertion_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_row_insertion_id();
  ::TSP::UUID* mutable_undo_row_insertion_id();
  void set_allocated_undo_row_insertion_id(::TSP::UUID* undo_row_insertion_id);
  private:
  const ::TSP::UUID& _internal_undo_row_insertion_id() const;
  ::TSP::UUID* _internal_mutable_undo_row_insertion_id();
  public:
  void unsafe_arena_set_allocated_undo_row_insertion_id(
      ::TSP::UUID* undo_row_insertion_id);
  ::TSP::UUID* unsafe_arena_release_undo_row_insertion_id();

  // optional bool undo_discards_values = 6;
  bool has_undo_discards_values() const;
  private:
  bool _internal_has_undo_discards_values() const;
  public:
  void clear_undo_discards_values();
  bool undo_discards_values() const;
  void set_undo_discards_values(bool value);
  private:
  bool _internal_undo_discards_values() const;
  void _internal_set_undo_discards_values(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cut_row_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow > cut_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_row_id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cut_column_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_column_id_list_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* start_row_id_;
  ::TSP::UUID* end_row_id_;
  ::TSP::UUID* undo_column_insertion_id_;
  ::TSP::UUID* undo_row_insertion_id_;
  bool undo_discards_values_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridColumnsArchive) */ {
 public:
  inline CommandDeleteGridColumnsArchive() : CommandDeleteGridColumnsArchive(nullptr) {}
  ~CommandDeleteGridColumnsArchive() override;
  explicit constexpr CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from);
  CommandDeleteGridColumnsArchive(CommandDeleteGridColumnsArchive&& from) noexcept
    : CommandDeleteGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridColumnsArchive& operator=(const CommandDeleteGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridColumnsArchive& operator=(CommandDeleteGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridColumnsArchive*>(
               &_CommandDeleteGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandDeleteGridColumnsArchive& a, CommandDeleteGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridColumnsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDeleteGridColumnsArchive* New() const final {
    return new CommandDeleteGridColumnsArchive();
  }

  CommandDeleteGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDeleteGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandDeleteGridColumnsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridColumnsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridColumnsArchive";
  }
  protected:
  explicit CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCutNamesFieldNumber = 4,
    kCutValuesFieldNumber = 5,
    kUndoColumnIdListFieldNumber = 9,
    kCutRowNamesFieldNumber = 11,
    kUndoRowIdListFieldNumber = 12,
    kSuperFieldNumber = 1,
    kStartColumnIdFieldNumber = 2,
    kEndColumnIdFieldNumber = 3,
    kUndoColumnInsertionIdFieldNumber = 7,
    kUndoRowInsertionIdFieldNumber = 8,
    kUndoDiscardsValuesFieldNumber = 6,
  };
  // repeated string cut_names = 4;
  int cut_names_size() const;
  private:
  int _internal_cut_names_size() const;
  public:
  void clear_cut_names();
  const std::string& cut_names(int index) const;
  std::string* mutable_cut_names(int index);
  void set_cut_names(int index, const std::string& value);
  void set_cut_names(int index, std::string&& value);
  void set_cut_names(int index, const char* value);
  void set_cut_names(int index, const char* value, size_t size);
  std::string* add_cut_names();
  void add_cut_names(const std::string& value);
  void add_cut_names(std::string&& value);
  void add_cut_names(const char* value);
  void add_cut_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cut_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cut_names();
  private:
  const std::string& _internal_cut_names(int index) const;
  std::string* _internal_add_cut_names();
  public:

  // repeated .TSCH.GridRow cut_values = 5;
  int cut_values_size() const;
  private:
  int _internal_cut_values_size() const;
  public:
  void clear_cut_values();
  ::TSCH::GridRow* mutable_cut_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
      mutable_cut_values();
  private:
  const ::TSCH::GridRow& _internal_cut_values(int index) const;
  ::TSCH::GridRow* _internal_add_cut_values();
  public:
  const ::TSCH::GridRow& cut_values(int index) const;
  ::TSCH::GridRow* add_cut_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
      cut_values() const;

  // repeated .TSP.UUID undo_column_id_list = 9;
  int undo_column_id_list_size() const;
  private:
  int _internal_undo_column_id_list_size() const;
  public:
  void clear_undo_column_id_list();
  ::TSP::UUID* mutable_undo_column_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_column_id_list();
  private:
  const ::TSP::UUID& _internal_undo_column_id_list(int index) const;
  ::TSP::UUID* _internal_add_undo_column_id_list();
  public:
  const ::TSP::UUID& undo_column_id_list(int index) const;
  ::TSP::UUID* add_undo_column_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_column_id_list() const;

  // repeated string cut_row_names = 11;
  int cut_row_names_size() const;
  private:
  int _internal_cut_row_names_size() const;
  public:
  void clear_cut_row_names();
  const std::string& cut_row_names(int index) const;
  std::string* mutable_cut_row_names(int index);
  void set_cut_row_names(int index, const std::string& value);
  void set_cut_row_names(int index, std::string&& value);
  void set_cut_row_names(int index, const char* value);
  void set_cut_row_names(int index, const char* value, size_t size);
  std::string* add_cut_row_names();
  void add_cut_row_names(const std::string& value);
  void add_cut_row_names(std::string&& value);
  void add_cut_row_names(const char* value);
  void add_cut_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cut_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cut_row_names();
  private:
  const std::string& _internal_cut_row_names(int index) const;
  std::string* _internal_add_cut_row_names();
  public:

  // repeated .TSP.UUID undo_row_id_list = 12;
  int undo_row_id_list_size() const;
  private:
  int _internal_undo_row_id_list_size() const;
  public:
  void clear_undo_row_id_list();
  ::TSP::UUID* mutable_undo_row_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_undo_row_id_list();
  private:
  const ::TSP::UUID& _internal_undo_row_id_list(int index) const;
  ::TSP::UUID* _internal_add_undo_row_id_list();
  public:
  const ::TSP::UUID& undo_row_id_list(int index) const;
  ::TSP::UUID* add_undo_row_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      undo_row_id_list() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID start_column_id = 2;
  bool has_start_column_id() const;
  private:
  bool _internal_has_start_column_id() const;
  public:
  void clear_start_column_id();
  const ::TSP::UUID& start_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_start_column_id();
  ::TSP::UUID* mutable_start_column_id();
  void set_allocated_start_column_id(::TSP::UUID* start_column_id);
  private:
  const ::TSP::UUID& _internal_start_column_id() const;
  ::TSP::UUID* _internal_mutable_start_column_id();
  public:
  void unsafe_arena_set_allocated_start_column_id(
      ::TSP::UUID* start_column_id);
  ::TSP::UUID* unsafe_arena_release_start_column_id();

  // required .TSP.UUID end_column_id = 3;
  bool has_end_column_id() const;
  private:
  bool _internal_has_end_column_id() const;
  public:
  void clear_end_column_id();
  const ::TSP::UUID& end_column_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_end_column_id();
  ::TSP::UUID* mutable_end_column_id();
  void set_allocated_end_column_id(::TSP::UUID* end_column_id);
  private:
  const ::TSP::UUID& _internal_end_column_id() const;
  ::TSP::UUID* _internal_mutable_end_column_id();
  public:
  void unsafe_arena_set_allocated_end_column_id(
      ::TSP::UUID* end_column_id);
  ::TSP::UUID* unsafe_arena_release_end_column_id();

  // optional .TSP.UUID undo_column_insertion_id = 7;
  bool has_undo_column_insertion_id() const;
  private:
  bool _internal_has_undo_column_insertion_id() const;
  public:
  void clear_undo_column_insertion_id();
  const ::TSP::UUID& undo_column_insertion_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_column_insertion_id();
  ::TSP::UUID* mutable_undo_column_insertion_id();
  void set_allocated_undo_column_insertion_id(::TSP::UUID* undo_column_insertion_id);
  private:
  const ::TSP::UUID& _internal_undo_column_insertion_id() const;
  ::TSP::UUID* _internal_mutable_undo_column_insertion_id();
  public:
  void unsafe_arena_set_allocated_undo_column_insertion_id(
      ::TSP::UUID* undo_column_insertion_id);
  ::TSP::UUID* unsafe_arena_release_undo_column_insertion_id();

  // optional .TSP.UUID undo_row_insertion_id = 8;
  bool has_undo_row_insertion_id() const;
  private:
  bool _internal_has_undo_row_insertion_id() const;
  public:
  void clear_undo_row_insertion_id();
  const ::TSP::UUID& undo_row_insertion_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_undo_row_insertion_id();
  ::TSP::UUID* mutable_undo_row_insertion_id();
  void set_allocated_undo_row_insertion_id(::TSP::UUID* undo_row_insertion_id);
  private:
  const ::TSP::UUID& _internal_undo_row_insertion_id() const;
  ::TSP::UUID* _internal_mutable_undo_row_insertion_id();
  public:
  void unsafe_arena_set_allocated_undo_row_insertion_id(
      ::TSP::UUID* undo_row_insertion_id);
  ::TSP::UUID* unsafe_arena_release_undo_row_insertion_id();

  // optional bool undo_discards_values = 6;
  bool has_undo_discards_values() const;
  private:
  bool _internal_has_undo_discards_values() const;
  public:
  void clear_undo_discards_values();
  bool undo_discards_values() const;
  void set_undo_discards_values(bool value);
  private:
  bool _internal_undo_discards_values() const;
  void _internal_set_undo_discards_values(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cut_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow > cut_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_column_id_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cut_row_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > undo_row_id_list_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* start_column_id_;
  ::TSP::UUID* end_column_id_;
  ::TSP::UUID* undo_column_insertion_id_;
  ::TSP::UUID* undo_row_insertion_id_;
  bool undo_discards_values_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetGridValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetGridValueArchive) */ {
 public:
  inline CommandSetGridValueArchive() : CommandSetGridValueArchive(nullptr) {}
  ~CommandSetGridValueArchive() override;
  explicit constexpr CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetGridValueArchive(const CommandSetGridValueArchive& from);
  CommandSetGridValueArchive(CommandSetGridValueArchive&& from) noexcept
    : CommandSetGridValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetGridValueArchive& operator=(const CommandSetGridValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetGridValueArchive& operator=(CommandSetGridValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetGridValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetGridValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetGridValueArchive*>(
               &_CommandSetGridValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandSetGridValueArchive& a, CommandSetGridValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetGridValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetGridValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetGridValueArchive* New() const final {
    return new CommandSetGridValueArchive();
  }

  CommandSetGridValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetGridValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetGridValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetGridValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetGridValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetGridValueArchive";
  }
  protected:
  explicit CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRowindexFieldNumber = 2,
    kColumnindexFieldNumber = 3,
    kOldvalueFieldNumber = 4,
    kNewvalueFieldNumber = 5,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 rowindex = 2;
  bool has_rowindex() const;
  private:
  bool _internal_has_rowindex() const;
  public:
  void clear_rowindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 rowindex() const;
  void set_rowindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rowindex() const;
  void _internal_set_rowindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 columnindex = 3;
  bool has_columnindex() const;
  private:
  bool _internal_has_columnindex() const;
  public:
  void clear_columnindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 columnindex() const;
  void set_columnindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_columnindex() const;
  void _internal_set_columnindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double oldvalue = 4;
  bool has_oldvalue() const;
  private:
  bool _internal_has_oldvalue() const;
  public:
  void clear_oldvalue();
  double oldvalue() const;
  void set_oldvalue(double value);
  private:
  double _internal_oldvalue() const;
  void _internal_set_oldvalue(double value);
  public:

  // required double newvalue = 5;
  bool has_newvalue() const;
  private:
  bool _internal_has_newvalue() const;
  public:
  void clear_newvalue();
  double newvalue() const;
  void set_newvalue(double value);
  private:
  double _internal_newvalue() const;
  void _internal_set_newvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rowindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 columnindex_;
  double oldvalue_;
  double newvalue_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetGridDirectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetGridDirectionArchive) */ {
 public:
  inline CommandSetGridDirectionArchive() : CommandSetGridDirectionArchive(nullptr) {}
  ~CommandSetGridDirectionArchive() override;
  explicit constexpr CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from);
  CommandSetGridDirectionArchive(CommandSetGridDirectionArchive&& from) noexcept
    : CommandSetGridDirectionArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetGridDirectionArchive& operator=(const CommandSetGridDirectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetGridDirectionArchive& operator=(CommandSetGridDirectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetGridDirectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetGridDirectionArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetGridDirectionArchive*>(
               &_CommandSetGridDirectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandSetGridDirectionArchive& a, CommandSetGridDirectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetGridDirectionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetGridDirectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetGridDirectionArchive* New() const final {
    return new CommandSetGridDirectionArchive();
  }

  CommandSetGridDirectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetGridDirectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetGridDirectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetGridDirectionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetGridDirectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetGridDirectionArchive";
  }
  protected:
  explicit CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldDirectionFieldNumber = 2,
    kNewDirectionFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 old_direction = 2;
  bool has_old_direction() const;
  private:
  bool _internal_has_old_direction() const;
  public:
  void clear_old_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_direction() const;
  void set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_direction() const;
  void _internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 new_direction = 3;
  bool has_new_direction() const;
  private:
  bool _internal_has_new_direction() const;
  public:
  void clear_new_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_direction() const;
  void set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_direction() const;
  void _internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridDirectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_direction_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSeriesTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetSeriesTypeArchive) */ {
 public:
  inline CommandSetSeriesTypeArchive() : CommandSetSeriesTypeArchive(nullptr) {}
  ~CommandSetSeriesTypeArchive() override;
  explicit constexpr CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from);
  CommandSetSeriesTypeArchive(CommandSetSeriesTypeArchive&& from) noexcept
    : CommandSetSeriesTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSeriesTypeArchive& operator=(const CommandSetSeriesTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSeriesTypeArchive& operator=(CommandSetSeriesTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSeriesTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSeriesTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSeriesTypeArchive*>(
               &_CommandSetSeriesTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandSetSeriesTypeArchive& a, CommandSetSeriesTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSeriesTypeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSeriesTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetSeriesTypeArchive* New() const final {
    return new CommandSetSeriesTypeArchive();
  }

  CommandSetSeriesTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetSeriesTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSeriesTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetSeriesTypeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSeriesTypeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetSeriesTypeArchive";
  }
  protected:
  explicit CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSeriesindexFieldNumber = 2,
    kOldtypeFieldNumber = 3,
    kNewtypeFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 seriesindex = 2;
  bool has_seriesindex() const;
  private:
  bool _internal_has_seriesindex() const;
  public:
  void clear_seriesindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesindex() const;
  void set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seriesindex() const;
  void _internal_set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 oldtype = 3;
  bool has_oldtype() const;
  private:
  bool _internal_has_oldtype() const;
  public:
  void clear_oldtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldtype() const;
  void set_oldtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldtype() const;
  void _internal_set_oldtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 newtype = 4;
  bool has_newtype() const;
  private:
  bool _internal_has_newtype() const;
  public:
  void clear_newtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 newtype() const;
  void set_newtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newtype() const;
  void _internal_set_newtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesTypeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seriesindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newtype_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetScatterFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetScatterFormatArchive) */ {
 public:
  inline CommandSetScatterFormatArchive() : CommandSetScatterFormatArchive(nullptr) {}
  ~CommandSetScatterFormatArchive() override;
  explicit constexpr CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from);
  CommandSetScatterFormatArchive(CommandSetScatterFormatArchive&& from) noexcept
    : CommandSetScatterFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetScatterFormatArchive& operator=(const CommandSetScatterFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetScatterFormatArchive& operator=(CommandSetScatterFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetScatterFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetScatterFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetScatterFormatArchive*>(
               &_CommandSetScatterFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandSetScatterFormatArchive& a, CommandSetScatterFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetScatterFormatArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetScatterFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetScatterFormatArchive* New() const final {
    return new CommandSetScatterFormatArchive();
  }

  CommandSetScatterFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetScatterFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetScatterFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetScatterFormatArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetScatterFormatArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetScatterFormatArchive";
  }
  protected:
  explicit CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldformatFieldNumber = 3,
    kNewformatFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 oldformat = 3;
  bool has_oldformat() const;
  private:
  bool _internal_has_oldformat() const;
  public:
  void clear_oldformat();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldformat() const;
  void set_oldformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldformat() const;
  void _internal_set_oldformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 newformat = 4;
  bool has_newformat() const;
  private:
  bool _internal_has_newformat() const;
  public:
  void clear_newformat();
  ::PROTOBUF_NAMESPACE_ID::uint32 newformat() const;
  void set_newformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newformat() const;
  void _internal_set_newformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetScatterFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldformat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newformat_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultiDataSetIndexArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetMultiDataSetIndexArchive) */ {
 public:
  inline CommandSetMultiDataSetIndexArchive() : CommandSetMultiDataSetIndexArchive(nullptr) {}
  ~CommandSetMultiDataSetIndexArchive() override;
  explicit constexpr CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from);
  CommandSetMultiDataSetIndexArchive(CommandSetMultiDataSetIndexArchive&& from) noexcept
    : CommandSetMultiDataSetIndexArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultiDataSetIndexArchive& operator=(const CommandSetMultiDataSetIndexArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultiDataSetIndexArchive& operator=(CommandSetMultiDataSetIndexArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultiDataSetIndexArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultiDataSetIndexArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultiDataSetIndexArchive*>(
               &_CommandSetMultiDataSetIndexArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandSetMultiDataSetIndexArchive& a, CommandSetMultiDataSetIndexArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultiDataSetIndexArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultiDataSetIndexArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetMultiDataSetIndexArchive* New() const final {
    return new CommandSetMultiDataSetIndexArchive();
  }

  CommandSetMultiDataSetIndexArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetMultiDataSetIndexArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultiDataSetIndexArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetMultiDataSetIndexArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultiDataSetIndexArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetMultiDataSetIndexArchive";
  }
  protected:
  explicit CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldindexFieldNumber = 2,
    kNewindexFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 oldindex = 2;
  bool has_oldindex() const;
  private:
  bool _internal_has_oldindex() const;
  public:
  void clear_oldindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldindex() const;
  void set_oldindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldindex() const;
  void _internal_set_oldindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 newindex = 3;
  bool has_newindex() const;
  private:
  bool _internal_has_newindex() const;
  public:
  void clear_newindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 newindex() const;
  void set_newindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newindex() const;
  void _internal_set_newindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetMultiDataSetIndexArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newindex_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetLegendFrameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetLegendFrameArchive) */ {
 public:
  inline CommandSetLegendFrameArchive() : CommandSetLegendFrameArchive(nullptr) {}
  ~CommandSetLegendFrameArchive() override;
  explicit constexpr CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from);
  CommandSetLegendFrameArchive(CommandSetLegendFrameArchive&& from) noexcept
    : CommandSetLegendFrameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetLegendFrameArchive& operator=(const CommandSetLegendFrameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetLegendFrameArchive& operator=(CommandSetLegendFrameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetLegendFrameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetLegendFrameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetLegendFrameArchive*>(
               &_CommandSetLegendFrameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSetLegendFrameArchive& a, CommandSetLegendFrameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetLegendFrameArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetLegendFrameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetLegendFrameArchive* New() const final {
    return new CommandSetLegendFrameArchive();
  }

  CommandSetLegendFrameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetLegendFrameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetLegendFrameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetLegendFrameArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetLegendFrameArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetLegendFrameArchive";
  }
  protected:
  explicit CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldLegendFrameFieldNumber = 2,
    kNewLegendFrameFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSCH.RectArchive old_legend_frame = 2;
  bool has_old_legend_frame() const;
  private:
  bool _internal_has_old_legend_frame() const;
  public:
  void clear_old_legend_frame();
  const ::TSCH::RectArchive& old_legend_frame() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::RectArchive* release_old_legend_frame();
  ::TSCH::RectArchive* mutable_old_legend_frame();
  void set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_old_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_old_legend_frame();
  public:
  void unsafe_arena_set_allocated_old_legend_frame(
      ::TSCH::RectArchive* old_legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_old_legend_frame();

  // required .TSCH.RectArchive new_legend_frame = 3;
  bool has_new_legend_frame() const;
  private:
  bool _internal_has_new_legend_frame() const;
  public:
  void clear_new_legend_frame();
  const ::TSCH::RectArchive& new_legend_frame() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::RectArchive* release_new_legend_frame();
  ::TSCH::RectArchive* mutable_new_legend_frame();
  void set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_new_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_new_legend_frame();
  public:
  void unsafe_arena_set_allocated_new_legend_frame(
      ::TSCH::RectArchive* new_legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_new_legend_frame();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetLegendFrameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSCH::RectArchive* old_legend_frame_;
  ::TSCH::RectArchive* new_legend_frame_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPieWedgeExplosion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetPieWedgeExplosion) */ {
 public:
  inline CommandSetPieWedgeExplosion() : CommandSetPieWedgeExplosion(nullptr) {}
  ~CommandSetPieWedgeExplosion() override;
  explicit constexpr CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from);
  CommandSetPieWedgeExplosion(CommandSetPieWedgeExplosion&& from) noexcept
    : CommandSetPieWedgeExplosion() {
    *this = ::std::move(from);
  }

  inline CommandSetPieWedgeExplosion& operator=(const CommandSetPieWedgeExplosion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPieWedgeExplosion& operator=(CommandSetPieWedgeExplosion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPieWedgeExplosion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPieWedgeExplosion* internal_default_instance() {
    return reinterpret_cast<const CommandSetPieWedgeExplosion*>(
               &_CommandSetPieWedgeExplosion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandSetPieWedgeExplosion& a, CommandSetPieWedgeExplosion& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPieWedgeExplosion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPieWedgeExplosion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetPieWedgeExplosion* New() const final {
    return new CommandSetPieWedgeExplosion();
  }

  CommandSetPieWedgeExplosion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetPieWedgeExplosion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetPieWedgeExplosion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetPieWedgeExplosion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPieWedgeExplosion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetPieWedgeExplosion";
  }
  protected:
  explicit CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesIndicesFieldNumber = 2,
    kWedgeExplosionsFieldNumber = 3,
    kOldSeriesIndicesFieldNumber = 5,
    kOldWedgeExplosionsFieldNumber = 6,
    kSuperFieldNumber = 1,
    kRollbackCmdFieldNumber = 7,
  };
  // repeated uint32 series_indices = 2;
  int series_indices_size() const;
  private:
  int _internal_series_indices_size() const;
  public:
  void clear_series_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_series_indices() const;
  void _internal_add_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_series_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 series_indices(int index) const;
  void set_series_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      series_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_series_indices();

  // repeated double wedge_explosions = 3;
  int wedge_explosions_size() const;
  private:
  int _internal_wedge_explosions_size() const;
  public:
  void clear_wedge_explosions();
  private:
  double _internal_wedge_explosions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_wedge_explosions() const;
  void _internal_add_wedge_explosions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_wedge_explosions();
  public:
  double wedge_explosions(int index) const;
  void set_wedge_explosions(int index, double value);
  void add_wedge_explosions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      wedge_explosions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_wedge_explosions();

  // repeated uint32 old_series_indices = 5;
  int old_series_indices_size() const;
  private:
  int _internal_old_series_indices_size() const;
  public:
  void clear_old_series_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_series_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_series_indices() const;
  void _internal_add_old_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_series_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_series_indices(int index) const;
  void set_old_series_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_series_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_series_indices();

  // repeated double old_wedge_explosions = 6;
  int old_wedge_explosions_size() const;
  private:
  int _internal_old_wedge_explosions_size() const;
  public:
  void clear_old_wedge_explosions();
  private:
  double _internal_old_wedge_explosions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_old_wedge_explosions() const;
  void _internal_add_old_wedge_explosions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_old_wedge_explosions();
  public:
  double old_wedge_explosions(int index) const;
  void set_old_wedge_explosions(int index, double value);
  void add_old_wedge_explosions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      old_wedge_explosions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_old_wedge_explosions();

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference rollback_cmd = 7;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetPieWedgeExplosion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > series_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > wedge_explosions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_series_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > old_wedge_explosions_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* rollback_cmd_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartApplyTheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandChartApplyTheme) */ {
 public:
  inline CommandChartApplyTheme() : CommandChartApplyTheme(nullptr) {}
  ~CommandChartApplyTheme() override;
  explicit constexpr CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartApplyTheme(const CommandChartApplyTheme& from);
  CommandChartApplyTheme(CommandChartApplyTheme&& from) noexcept
    : CommandChartApplyTheme() {
    *this = ::std::move(from);
  }

  inline CommandChartApplyTheme& operator=(const CommandChartApplyTheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartApplyTheme& operator=(CommandChartApplyTheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartApplyTheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartApplyTheme* internal_default_instance() {
    return reinterpret_cast<const CommandChartApplyTheme*>(
               &_CommandChartApplyTheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CommandChartApplyTheme& a, CommandChartApplyTheme& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartApplyTheme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartApplyTheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartApplyTheme* New() const final {
    return new CommandChartApplyTheme();
  }

  CommandChartApplyTheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartApplyTheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartApplyTheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandChartApplyTheme& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartApplyTheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandChartApplyTheme";
  }
  protected:
  explicit CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kSwapCommandFieldNumber = 3,
    kPresetFieldNumber = 4,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference swap_command = 3;
  bool has_swap_command() const;
  private:
  bool _internal_has_swap_command() const;
  public:
  void clear_swap_command();
  const ::TSP::Reference& swap_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_swap_command();
  ::TSP::Reference* mutable_swap_command();
  void set_allocated_swap_command(::TSP::Reference* swap_command);
  private:
  const ::TSP::Reference& _internal_swap_command() const;
  ::TSP::Reference* _internal_mutable_swap_command();
  public:
  void unsafe_arena_set_allocated_swap_command(
      ::TSP::Reference* swap_command);
  ::TSP::Reference* unsafe_arena_release_swap_command();

  // optional .TSP.Reference preset = 4;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyTheme)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::ApplyThemeChildCommandArchive* super_;
  ::TSP::Reference* info_;
  ::TSP::Reference* swap_command_;
  ::TSP::Reference* preset_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartApplyPreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandChartApplyPreset) */ {
 public:
  inline CommandChartApplyPreset() : CommandChartApplyPreset(nullptr) {}
  ~CommandChartApplyPreset() override;
  explicit constexpr CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartApplyPreset(const CommandChartApplyPreset& from);
  CommandChartApplyPreset(CommandChartApplyPreset&& from) noexcept
    : CommandChartApplyPreset() {
    *this = ::std::move(from);
  }

  inline CommandChartApplyPreset& operator=(const CommandChartApplyPreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartApplyPreset& operator=(CommandChartApplyPreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartApplyPreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartApplyPreset* internal_default_instance() {
    return reinterpret_cast<const CommandChartApplyPreset*>(
               &_CommandChartApplyPreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandChartApplyPreset& a, CommandChartApplyPreset& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartApplyPreset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartApplyPreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartApplyPreset* New() const final {
    return new CommandChartApplyPreset();
  }

  CommandChartApplyPreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartApplyPreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartApplyPreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandChartApplyPreset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartApplyPreset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandChartApplyPreset";
  }
  protected:
  explicit CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwapTuplesFieldNumber = 7,
    kInverseSwapTuplesFieldNumber = 8,
    kRollbackSwapTuplesFieldNumber = 10,
    kSuperFieldNumber = 1,
    kPresetFieldNumber = 3,
    kOldPresetFieldNumber = 4,
    kRollbackPresetFieldNumber = 9,
    kShouldApplySwapTuplesFieldNumber = 5,
    kAreSwapTuplesValidFieldNumber = 6,
    kBehaviorFieldNumber = 2,
  };
  // repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 7;
  int swap_tuples_size() const;
  private:
  int _internal_swap_tuples_size() const;
  public:
  void clear_swap_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_swap_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_swap_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_swap_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_swap_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      swap_tuples() const;

  // repeated .TSCH.StyleSwapUndoTupleArchive inverse_swap_tuples = 8;
  int inverse_swap_tuples_size() const;
  private:
  int _internal_inverse_swap_tuples_size() const;
  public:
  void clear_inverse_swap_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_inverse_swap_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_inverse_swap_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_inverse_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_inverse_swap_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& inverse_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_inverse_swap_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      inverse_swap_tuples() const;

  // repeated .TSCH.StyleSwapUndoTupleArchive rollback_swap_tuples = 10;
  int rollback_swap_tuples_size() const;
  private:
  int _internal_rollback_swap_tuples_size() const;
  public:
  void clear_rollback_swap_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_rollback_swap_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_rollback_swap_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_rollback_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_rollback_swap_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& rollback_swap_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_rollback_swap_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      rollback_swap_tuples() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference preset = 3;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSP.Reference old_preset = 4;
  bool has_old_preset() const;
  private:
  bool _internal_has_old_preset() const;
  public:
  void clear_old_preset();
  const ::TSP::Reference& old_preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_preset();
  ::TSP::Reference* mutable_old_preset();
  void set_allocated_old_preset(::TSP::Reference* old_preset);
  private:
  const ::TSP::Reference& _internal_old_preset() const;
  ::TSP::Reference* _internal_mutable_old_preset();
  public:
  void unsafe_arena_set_allocated_old_preset(
      ::TSP::Reference* old_preset);
  ::TSP::Reference* unsafe_arena_release_old_preset();

  // optional .TSP.Reference rollback_preset = 9;
  bool has_rollback_preset() const;
  private:
  bool _internal_has_rollback_preset() const;
  public:
  void clear_rollback_preset();
  const ::TSP::Reference& rollback_preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_preset();
  ::TSP::Reference* mutable_rollback_preset();
  void set_allocated_rollback_preset(::TSP::Reference* rollback_preset);
  private:
  const ::TSP::Reference& _internal_rollback_preset() const;
  ::TSP::Reference* _internal_mutable_rollback_preset();
  public:
  void unsafe_arena_set_allocated_rollback_preset(
      ::TSP::Reference* rollback_preset);
  ::TSP::Reference* unsafe_arena_release_rollback_preset();

  // optional bool should_apply_swap_tuples = 5;
  bool has_should_apply_swap_tuples() const;
  private:
  bool _internal_has_should_apply_swap_tuples() const;
  public:
  void clear_should_apply_swap_tuples();
  bool should_apply_swap_tuples() const;
  void set_should_apply_swap_tuples(bool value);
  private:
  bool _internal_should_apply_swap_tuples() const;
  void _internal_set_should_apply_swap_tuples(bool value);
  public:

  // optional bool are_swap_tuples_valid = 6;
  bool has_are_swap_tuples_valid() const;
  private:
  bool _internal_has_are_swap_tuples_valid() const;
  public:
  void clear_are_swap_tuples_valid();
  bool are_swap_tuples_valid() const;
  void set_are_swap_tuples_valid(bool value);
  private:
  bool _internal_are_swap_tuples_valid() const;
  void _internal_set_are_swap_tuples_valid(bool value);
  public:

  // optional .TSCH.ApplyPresetBehavior behavior = 2 [default = remove_overrides];
  bool has_behavior() const;
  private:
  bool _internal_has_behavior() const;
  public:
  void clear_behavior();
  ::TSCH::ApplyPresetBehavior behavior() const;
  void set_behavior(::TSCH::ApplyPresetBehavior value);
  private:
  ::TSCH::ApplyPresetBehavior _internal_behavior() const;
  void _internal_set_behavior(::TSCH::ApplyPresetBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyPreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > swap_tuples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > inverse_swap_tuples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > rollback_swap_tuples_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* old_preset_;
  ::TSP::Reference* rollback_preset_;
  bool should_apply_swap_tuples_;
  bool are_swap_tuples_valid_;
  int behavior_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCleanupGeometryArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandCleanupGeometryArchive) */ {
 public:
  inline CommandCleanupGeometryArchive() : CommandCleanupGeometryArchive(nullptr) {}
  ~CommandCleanupGeometryArchive() override;
  explicit constexpr CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from);
  CommandCleanupGeometryArchive(CommandCleanupGeometryArchive&& from) noexcept
    : CommandCleanupGeometryArchive() {
    *this = ::std::move(from);
  }

  inline CommandCleanupGeometryArchive& operator=(const CommandCleanupGeometryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCleanupGeometryArchive& operator=(CommandCleanupGeometryArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCleanupGeometryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCleanupGeometryArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCleanupGeometryArchive*>(
               &_CommandCleanupGeometryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CommandCleanupGeometryArchive& a, CommandCleanupGeometryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCleanupGeometryArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCleanupGeometryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandCleanupGeometryArchive* New() const final {
    return new CommandCleanupGeometryArchive();
  }

  CommandCleanupGeometryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandCleanupGeometryArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCleanupGeometryArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandCleanupGeometryArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCleanupGeometryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandCleanupGeometryArchive";
  }
  protected:
  explicit CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoGeometryCommandFieldNumber = 2,
    kAnchorAttachmentCommandFieldNumber = 3,
    kOriginalLegendRectFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info_geometry_command = 2;
  bool has_info_geometry_command() const;
  private:
  bool _internal_has_info_geometry_command() const;
  public:
  void clear_info_geometry_command();
  const ::TSP::Reference& info_geometry_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_info_geometry_command();
  ::TSP::Reference* mutable_info_geometry_command();
  void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);
  private:
  const ::TSP::Reference& _internal_info_geometry_command() const;
  ::TSP::Reference* _internal_mutable_info_geometry_command();
  public:
  void unsafe_arena_set_allocated_info_geometry_command(
      ::TSP::Reference* info_geometry_command);
  ::TSP::Reference* unsafe_arena_release_info_geometry_command();

  // optional .TSP.Reference anchor_attachment_command = 3;
  bool has_anchor_attachment_command() const;
  private:
  bool _internal_has_anchor_attachment_command() const;
  public:
  void clear_anchor_attachment_command();
  const ::TSP::Reference& anchor_attachment_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_anchor_attachment_command();
  ::TSP::Reference* mutable_anchor_attachment_command();
  void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);
  private:
  const ::TSP::Reference& _internal_anchor_attachment_command() const;
  ::TSP::Reference* _internal_mutable_anchor_attachment_command();
  public:
  void unsafe_arena_set_allocated_anchor_attachment_command(
      ::TSP::Reference* anchor_attachment_command);
  ::TSP::Reference* unsafe_arena_release_anchor_attachment_command();

  // optional .TSCH.RectArchive original_legend_rect = 4;
  bool has_original_legend_rect() const;
  private:
  bool _internal_has_original_legend_rect() const;
  public:
  void clear_original_legend_rect();
  const ::TSCH::RectArchive& original_legend_rect() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::RectArchive* release_original_legend_rect();
  ::TSCH::RectArchive* mutable_original_legend_rect();
  void set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect);
  private:
  const ::TSCH::RectArchive& _internal_original_legend_rect() const;
  ::TSCH::RectArchive* _internal_mutable_original_legend_rect();
  public:
  void unsafe_arena_set_allocated_original_legend_rect(
      ::TSCH::RectArchive* original_legend_rect);
  ::TSCH::RectArchive* unsafe_arena_release_original_legend_rect();

  // @@protoc_insertion_point(class_scope:TSCH.CommandCleanupGeometryArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* info_geometry_command_;
  ::TSP::Reference* anchor_attachment_command_;
  ::TSCH::RectArchive* original_legend_rect_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartCommandArchive) */ {
 public:
  inline ChartCommandArchive() : ChartCommandArchive(nullptr) {}
  ~ChartCommandArchive() override;
  explicit constexpr ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartCommandArchive(const ChartCommandArchive& from);
  ChartCommandArchive(ChartCommandArchive&& from) noexcept
    : ChartCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChartCommandArchive& operator=(const ChartCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCommandArchive& operator=(ChartCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChartCommandArchive*>(
               &_ChartCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ChartCommandArchive& a, ChartCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartCommandArchive* New() const final {
    return new ChartCommandArchive();
  }

  ChartCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartCommandArchive";
  }
  protected:
  explicit ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kChartInfoFieldNumber = 2,
    kChartInfoIdPathFieldNumber = 4,
    kOriginalDirtyStateFieldNumber = 3,
    kIsForForwardUndoRedoFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference chart_info = 2;
  bool has_chart_info() const;
  private:
  bool _internal_has_chart_info() const;
  public:
  void clear_chart_info();
  const ::TSP::Reference& chart_info() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_chart_info();
  ::TSP::Reference* mutable_chart_info();
  void set_allocated_chart_info(::TSP::Reference* chart_info);
  private:
  const ::TSP::Reference& _internal_chart_info() const;
  ::TSP::Reference* _internal_mutable_chart_info();
  public:
  void unsafe_arena_set_allocated_chart_info(
      ::TSP::Reference* chart_info);
  ::TSP::Reference* unsafe_arena_release_chart_info();

  // optional .TSP.UUIDPath chart_info_id_path = 4;
  bool has_chart_info_id_path() const;
  private:
  bool _internal_has_chart_info_id_path() const;
  public:
  void clear_chart_info_id_path();
  const ::TSP::UUIDPath& chart_info_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_chart_info_id_path();
  ::TSP::UUIDPath* mutable_chart_info_id_path();
  void set_allocated_chart_info_id_path(::TSP::UUIDPath* chart_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_chart_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_chart_info_id_path();
  public:
  void unsafe_arena_set_allocated_chart_info_id_path(
      ::TSP::UUIDPath* chart_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_chart_info_id_path();

  // optional bool original_dirty_state = 3;
  bool has_original_dirty_state() const;
  private:
  bool _internal_has_original_dirty_state() const;
  public:
  void clear_original_dirty_state();
  bool original_dirty_state() const;
  void set_original_dirty_state(bool value);
  private:
  bool _internal_original_dirty_state() const;
  void _internal_set_original_dirty_state(bool value);
  public:

  // optional bool is_for_forward_undo_redo = 5;
  bool has_is_for_forward_undo_redo() const;
  private:
  bool _internal_has_is_for_forward_undo_redo() const;
  public:
  void clear_is_for_forward_undo_redo();
  bool is_for_forward_undo_redo() const;
  void set_is_for_forward_undo_redo(bool value);
  private:
  bool _internal_is_for_forward_undo_redo() const;
  void _internal_set_is_for_forward_undo_redo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* chart_info_;
  ::TSP::UUIDPath* chart_info_id_path_;
  bool original_dirty_state_;
  bool is_for_forward_undo_redo_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceGridValuesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceGridValuesArchive) */ {
 public:
  inline CommandReplaceGridValuesArchive() : CommandReplaceGridValuesArchive(nullptr) {}
  ~CommandReplaceGridValuesArchive() override;
  explicit constexpr CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from);
  CommandReplaceGridValuesArchive(CommandReplaceGridValuesArchive&& from) noexcept
    : CommandReplaceGridValuesArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceGridValuesArchive& operator=(const CommandReplaceGridValuesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceGridValuesArchive& operator=(CommandReplaceGridValuesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceGridValuesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceGridValuesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceGridValuesArchive*>(
               &_CommandReplaceGridValuesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommandReplaceGridValuesArchive& a, CommandReplaceGridValuesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceGridValuesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceGridValuesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceGridValuesArchive* New() const final {
    return new CommandReplaceGridValuesArchive();
  }

  CommandReplaceGridValuesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceGridValuesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceGridValuesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceGridValuesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceGridValuesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceGridValuesArchive";
  }
  protected:
  explicit CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldDataRowsFieldNumber = 4,
    kNewDataRowsFieldNumber = 5,
    kOldRowNamesFieldNumber = 6,
    kNewRowNamesFieldNumber = 7,
    kOldColNamesFieldNumber = 8,
    kNewColNamesFieldNumber = 9,
    kUpdateRowUuidsFieldNumber = 10,
    kUpdateColumnUuidsFieldNumber = 11,
    kAddRowUuidsFieldNumber = 12,
    kAddColumnUuidsFieldNumber = 13,
    kDeleteRowUuidsFieldNumber = 14,
    kDeleteColumnUuidsFieldNumber = 15,
    kSuperFieldNumber = 1,
    kSetSeriesDirectionFieldNumber = 16,
    kNewSeriesDirectionFieldNumber = 17,
  };
  // repeated .TSCH.GridRow old_data_rows = 4;
  int old_data_rows_size() const;
  private:
  int _internal_old_data_rows_size() const;
  public:
  void clear_old_data_rows();
  ::TSCH::GridRow* mutable_old_data_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
      mutable_old_data_rows();
  private:
  const ::TSCH::GridRow& _internal_old_data_rows(int index) const;
  ::TSCH::GridRow* _internal_add_old_data_rows();
  public:
  const ::TSCH::GridRow& old_data_rows(int index) const;
  ::TSCH::GridRow* add_old_data_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
      old_data_rows() const;

  // repeated .TSCH.GridRow new_data_rows = 5;
  int new_data_rows_size() const;
  private:
  int _internal_new_data_rows_size() const;
  public:
  void clear_new_data_rows();
  ::TSCH::GridRow* mutable_new_data_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
      mutable_new_data_rows();
  private:
  const ::TSCH::GridRow& _internal_new_data_rows(int index) const;
  ::TSCH::GridRow* _internal_add_new_data_rows();
  public:
  const ::TSCH::GridRow& new_data_rows(int index) const;
  ::TSCH::GridRow* add_new_data_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
      new_data_rows() const;

  // repeated string old_row_names = 6;
  int old_row_names_size() const;
  private:
  int _internal_old_row_names_size() const;
  public:
  void clear_old_row_names();
  const std::string& old_row_names(int index) const;
  std::string* mutable_old_row_names(int index);
  void set_old_row_names(int index, const std::string& value);
  void set_old_row_names(int index, std::string&& value);
  void set_old_row_names(int index, const char* value);
  void set_old_row_names(int index, const char* value, size_t size);
  std::string* add_old_row_names();
  void add_old_row_names(const std::string& value);
  void add_old_row_names(std::string&& value);
  void add_old_row_names(const char* value);
  void add_old_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_row_names();
  private:
  const std::string& _internal_old_row_names(int index) const;
  std::string* _internal_add_old_row_names();
  public:

  // repeated string new_row_names = 7;
  int new_row_names_size() const;
  private:
  int _internal_new_row_names_size() const;
  public:
  void clear_new_row_names();
  const std::string& new_row_names(int index) const;
  std::string* mutable_new_row_names(int index);
  void set_new_row_names(int index, const std::string& value);
  void set_new_row_names(int index, std::string&& value);
  void set_new_row_names(int index, const char* value);
  void set_new_row_names(int index, const char* value, size_t size);
  std::string* add_new_row_names();
  void add_new_row_names(const std::string& value);
  void add_new_row_names(std::string&& value);
  void add_new_row_names(const char* value);
  void add_new_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_row_names();
  private:
  const std::string& _internal_new_row_names(int index) const;
  std::string* _internal_add_new_row_names();
  public:

  // repeated string old_col_names = 8;
  int old_col_names_size() const;
  private:
  int _internal_old_col_names_size() const;
  public:
  void clear_old_col_names();
  const std::string& old_col_names(int index) const;
  std::string* mutable_old_col_names(int index);
  void set_old_col_names(int index, const std::string& value);
  void set_old_col_names(int index, std::string&& value);
  void set_old_col_names(int index, const char* value);
  void set_old_col_names(int index, const char* value, size_t size);
  std::string* add_old_col_names();
  void add_old_col_names(const std::string& value);
  void add_old_col_names(std::string&& value);
  void add_old_col_names(const char* value);
  void add_old_col_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_col_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_col_names();
  private:
  const std::string& _internal_old_col_names(int index) const;
  std::string* _internal_add_old_col_names();
  public:

  // repeated string new_col_names = 9;
  int new_col_names_size() const;
  private:
  int _internal_new_col_names_size() const;
  public:
  void clear_new_col_names();
  const std::string& new_col_names(int index) const;
  std::string* mutable_new_col_names(int index);
  void set_new_col_names(int index, const std::string& value);
  void set_new_col_names(int index, std::string&& value);
  void set_new_col_names(int index, const char* value);
  void set_new_col_names(int index, const char* value, size_t size);
  std::string* add_new_col_names();
  void add_new_col_names(const std::string& value);
  void add_new_col_names(std::string&& value);
  void add_new_col_names(const char* value);
  void add_new_col_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_col_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_col_names();
  private:
  const std::string& _internal_new_col_names(int index) const;
  std::string* _internal_add_new_col_names();
  public:

  // repeated .TSP.UUID update_row_uuids = 10;
  int update_row_uuids_size() const;
  private:
  int _internal_update_row_uuids_size() const;
  public:
  void clear_update_row_uuids();
  ::TSP::UUID* mutable_update_row_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_update_row_uuids();
  private:
  const ::TSP::UUID& _internal_update_row_uuids(int index) const;
  ::TSP::UUID* _internal_add_update_row_uuids();
  public:
  const ::TSP::UUID& update_row_uuids(int index) const;
  ::TSP::UUID* add_update_row_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      update_row_uuids() const;

  // repeated .TSP.UUID update_column_uuids = 11;
  int update_column_uuids_size() const;
  private:
  int _internal_update_column_uuids_size() const;
  public:
  void clear_update_column_uuids();
  ::TSP::UUID* mutable_update_column_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_update_column_uuids();
  private:
  const ::TSP::UUID& _internal_update_column_uuids(int index) const;
  ::TSP::UUID* _internal_add_update_column_uuids();
  public:
  const ::TSP::UUID& update_column_uuids(int index) const;
  ::TSP::UUID* add_update_column_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      update_column_uuids() const;

  // repeated .TSP.UUID add_row_uuids = 12;
  int add_row_uuids_size() const;
  private:
  int _internal_add_row_uuids_size() const;
  public:
  void clear_add_row_uuids();
  ::TSP::UUID* mutable_add_row_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_add_row_uuids();
  private:
  const ::TSP::UUID& _internal_add_row_uuids(int index) const;
  ::TSP::UUID* _internal_add_add_row_uuids();
  public:
  const ::TSP::UUID& add_row_uuids(int index) const;
  ::TSP::UUID* add_add_row_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      add_row_uuids() const;

  // repeated .TSP.UUID add_column_uuids = 13;
  int add_column_uuids_size() const;
  private:
  int _internal_add_column_uuids_size() const;
  public:
  void clear_add_column_uuids();
  ::TSP::UUID* mutable_add_column_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_add_column_uuids();
  private:
  const ::TSP::UUID& _internal_add_column_uuids(int index) const;
  ::TSP::UUID* _internal_add_add_column_uuids();
  public:
  const ::TSP::UUID& add_column_uuids(int index) const;
  ::TSP::UUID* add_add_column_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      add_column_uuids() const;

  // repeated .TSP.UUID delete_row_uuids = 14;
  int delete_row_uuids_size() const;
  private:
  int _internal_delete_row_uuids_size() const;
  public:
  void clear_delete_row_uuids();
  ::TSP::UUID* mutable_delete_row_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_delete_row_uuids();
  private:
  const ::TSP::UUID& _internal_delete_row_uuids(int index) const;
  ::TSP::UUID* _internal_add_delete_row_uuids();
  public:
  const ::TSP::UUID& delete_row_uuids(int index) const;
  ::TSP::UUID* add_delete_row_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      delete_row_uuids() const;

  // repeated .TSP.UUID delete_column_uuids = 15;
  int delete_column_uuids_size() const;
  private:
  int _internal_delete_column_uuids_size() const;
  public:
  void clear_delete_column_uuids();
  ::TSP::UUID* mutable_delete_column_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_delete_column_uuids();
  private:
  const ::TSP::UUID& _internal_delete_column_uuids(int index) const;
  ::TSP::UUID* _internal_add_delete_column_uuids();
  public:
  const ::TSP::UUID& delete_column_uuids(int index) const;
  ::TSP::UUID* add_delete_column_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      delete_column_uuids() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional bool set_series_direction = 16;
  bool has_set_series_direction() const;
  private:
  bool _internal_has_set_series_direction() const;
  public:
  void clear_set_series_direction();
  bool set_series_direction() const;
  void set_set_series_direction(bool value);
  private:
  bool _internal_set_series_direction() const;
  void _internal_set_set_series_direction(bool value);
  public:

  // optional uint32 new_series_direction = 17;
  bool has_new_series_direction() const;
  private:
  bool _internal_has_new_series_direction() const;
  public:
  void clear_new_series_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_series_direction() const;
  void set_new_series_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_series_direction() const;
  void _internal_set_new_series_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceGridValuesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow > old_data_rows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow > new_data_rows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_row_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_row_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_col_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_col_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > update_row_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > update_column_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > add_row_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > add_column_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > delete_row_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > delete_column_uuids_;
  ::TSCH::ChartCommandArchive* super_;
  bool set_series_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_series_direction_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive_StyleAndIdentifierPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair) */ {
 public:
  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair() : CommandReplaceThemePresetArchive_StyleAndIdentifierPair(nullptr) {}
  ~CommandReplaceThemePresetArchive_StyleAndIdentifierPair() override;
  explicit constexpr CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair(CommandReplaceThemePresetArchive_StyleAndIdentifierPair&& from) noexcept
    : CommandReplaceThemePresetArchive_StyleAndIdentifierPair() {
    *this = ::std::move(from);
  }

  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair& operator=(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair& operator=(CommandReplaceThemePresetArchive_StyleAndIdentifierPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceThemePresetArchive_StyleAndIdentifierPair*>(
               &_CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair& a, CommandReplaceThemePresetArchive_StyleAndIdentifierPair& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair* New() const final {
    return new CommandReplaceThemePresetArchive_StyleAndIdentifierPair();
  }

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceThemePresetArchive_StyleAndIdentifierPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair";
  }
  protected:
  explicit CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kStyleFieldNumber = 1,
  };
  // required string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TSP.Reference style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TSP::Reference* style_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceThemePresetArchive) */ {
 public:
  inline CommandReplaceThemePresetArchive() : CommandReplaceThemePresetArchive(nullptr) {}
  ~CommandReplaceThemePresetArchive() override;
  explicit constexpr CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from);
  CommandReplaceThemePresetArchive(CommandReplaceThemePresetArchive&& from) noexcept
    : CommandReplaceThemePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceThemePresetArchive& operator=(const CommandReplaceThemePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceThemePresetArchive& operator=(CommandReplaceThemePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceThemePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceThemePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceThemePresetArchive*>(
               &_CommandReplaceThemePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandReplaceThemePresetArchive& a, CommandReplaceThemePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceThemePresetArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceThemePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceThemePresetArchive* New() const final {
    return new CommandReplaceThemePresetArchive();
  }

  CommandReplaceThemePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceThemePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceThemePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceThemePresetArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceThemePresetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceThemePresetArchive";
  }
  protected:
  explicit CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandReplaceThemePresetArchive_StyleAndIdentifierPair StyleAndIdentifierPair;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiersFieldNumber = 5,
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kOldPresetFieldNumber = 3,
    kNewPresetFieldNumber = 4,
    kOldPresetIndexFieldNumber = 6,
  };
  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  int identifiers_size() const;
  private:
  int _internal_identifiers_size() const;
  public:
  void clear_identifiers();
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* mutable_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
      mutable_identifiers();
  private:
  const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& _internal_identifiers(int index) const;
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* _internal_add_identifiers();
  public:
  const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& identifiers(int index) const;
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* add_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
      identifiers() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference old_preset = 3;
  bool has_old_preset() const;
  private:
  bool _internal_has_old_preset() const;
  public:
  void clear_old_preset();
  const ::TSP::Reference& old_preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_preset();
  ::TSP::Reference* mutable_old_preset();
  void set_allocated_old_preset(::TSP::Reference* old_preset);
  private:
  const ::TSP::Reference& _internal_old_preset() const;
  ::TSP::Reference* _internal_mutable_old_preset();
  public:
  void unsafe_arena_set_allocated_old_preset(
      ::TSP::Reference* old_preset);
  ::TSP::Reference* unsafe_arena_release_old_preset();

  // optional .TSP.Reference new_preset = 4;
  bool has_new_preset() const;
  private:
  bool _internal_has_new_preset() const;
  public:
  void clear_new_preset();
  const ::TSP::Reference& new_preset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_new_preset();
  ::TSP::Reference* mutable_new_preset();
  void set_allocated_new_preset(::TSP::Reference* new_preset);
  private:
  const ::TSP::Reference& _internal_new_preset() const;
  ::TSP::Reference* _internal_mutable_new_preset();
  public:
  void unsafe_arena_set_allocated_new_preset(
      ::TSP::Reference* new_preset);
  ::TSP::Reference* unsafe_arena_release_new_preset();

  // optional uint64 old_preset_index = 6;
  bool has_old_preset_index() const;
  private:
  bool _internal_has_old_preset_index() const;
  public:
  void clear_old_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_preset_index() const;
  void set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_old_preset_index() const;
  void _internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair > identifiers_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* old_preset_;
  ::TSP::Reference* new_preset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_preset_index_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInvalidateWPCaches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandInvalidateWPCaches) */ {
 public:
  inline CommandInvalidateWPCaches() : CommandInvalidateWPCaches(nullptr) {}
  ~CommandInvalidateWPCaches() override;
  explicit constexpr CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from);
  CommandInvalidateWPCaches(CommandInvalidateWPCaches&& from) noexcept
    : CommandInvalidateWPCaches() {
    *this = ::std::move(from);
  }

  inline CommandInvalidateWPCaches& operator=(const CommandInvalidateWPCaches& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInvalidateWPCaches& operator=(CommandInvalidateWPCaches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInvalidateWPCaches& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInvalidateWPCaches* internal_default_instance() {
    return reinterpret_cast<const CommandInvalidateWPCaches*>(
               &_CommandInvalidateWPCaches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CommandInvalidateWPCaches& a, CommandInvalidateWPCaches& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInvalidateWPCaches* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInvalidateWPCaches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInvalidateWPCaches* New() const final {
    return new CommandInvalidateWPCaches();
  }

  CommandInvalidateWPCaches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInvalidateWPCaches>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInvalidateWPCaches& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandInvalidateWPCaches& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInvalidateWPCaches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandInvalidateWPCaches";
  }
  protected:
  explicit CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandInvalidateWPCaches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceCustomFormatArchive_FormatObjectMutation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation) */ {
 public:
  inline CommandReplaceCustomFormatArchive_FormatObjectMutation() : CommandReplaceCustomFormatArchive_FormatObjectMutation(nullptr) {}
  ~CommandReplaceCustomFormatArchive_FormatObjectMutation() override;
  explicit constexpr CommandReplaceCustomFormatArchive_FormatObjectMutation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceCustomFormatArchive_FormatObjectMutation(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from);
  CommandReplaceCustomFormatArchive_FormatObjectMutation(CommandReplaceCustomFormatArchive_FormatObjectMutation&& from) noexcept
    : CommandReplaceCustomFormatArchive_FormatObjectMutation() {
    *this = ::std::move(from);
  }

  inline CommandReplaceCustomFormatArchive_FormatObjectMutation& operator=(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceCustomFormatArchive_FormatObjectMutation& operator=(CommandReplaceCustomFormatArchive_FormatObjectMutation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceCustomFormatArchive_FormatObjectMutation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceCustomFormatArchive_FormatObjectMutation* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceCustomFormatArchive_FormatObjectMutation*>(
               &_CommandReplaceCustomFormatArchive_FormatObjectMutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CommandReplaceCustomFormatArchive_FormatObjectMutation& a, CommandReplaceCustomFormatArchive_FormatObjectMutation& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceCustomFormatArchive_FormatObjectMutation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceCustomFormatArchive_FormatObjectMutation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceCustomFormatArchive_FormatObjectMutation* New() const final {
    return new CommandReplaceCustomFormatArchive_FormatObjectMutation();
  }

  CommandReplaceCustomFormatArchive_FormatObjectMutation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceCustomFormatArchive_FormatObjectMutation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceCustomFormatArchive_FormatObjectMutation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceCustomFormatArchive_FormatObjectMutation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation";
  }
  protected:
  explicit CommandReplaceCustomFormatArchive_FormatObjectMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatObjectFieldNumber = 4,
    kStyleOwnerIndexFieldNumber = 2,
    kFormatObjectPropertyFieldNumber = 3,
    kStyleOwnerTypeFieldNumber = 1,
  };
  // optional .TSK.FormatStructArchive format_object = 4;
  bool has_format_object() const;
  private:
  bool _internal_has_format_object() const;
  public:
  void clear_format_object();
  const ::TSK::FormatStructArchive& format_object() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format_object();
  ::TSK::FormatStructArchive* mutable_format_object();
  void set_allocated_format_object(::TSK::FormatStructArchive* format_object);
  private:
  const ::TSK::FormatStructArchive& _internal_format_object() const;
  ::TSK::FormatStructArchive* _internal_mutable_format_object();
  public:
  void unsafe_arena_set_allocated_format_object(
      ::TSK::FormatStructArchive* format_object);
  ::TSK::FormatStructArchive* unsafe_arena_release_format_object();

  // optional uint32 style_owner_index = 2;
  bool has_style_owner_index() const;
  private:
  bool _internal_has_style_owner_index() const;
  public:
  void clear_style_owner_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 style_owner_index() const;
  void set_style_owner_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style_owner_index() const;
  void _internal_set_style_owner_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 format_object_property = 3;
  bool has_format_object_property() const;
  private:
  bool _internal_has_format_object_property() const;
  public:
  void clear_format_object_property();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_object_property() const;
  void set_format_object_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_object_property() const;
  void _internal_set_format_object_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TSCH.StyleOwnerType style_owner_type = 1;
  bool has_style_owner_type() const;
  private:
  bool _internal_has_style_owner_type() const;
  public:
  void clear_style_owner_type();
  ::TSCH::StyleOwnerType style_owner_type() const;
  void set_style_owner_type(::TSCH::StyleOwnerType value);
  private:
  ::TSCH::StyleOwnerType _internal_style_owner_type() const;
  void _internal_set_style_owner_type(::TSCH::StyleOwnerType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::FormatStructArchive* format_object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_owner_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_object_property_;
  int style_owner_type_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceCustomFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceCustomFormatArchive) */ {
 public:
  inline CommandReplaceCustomFormatArchive() : CommandReplaceCustomFormatArchive(nullptr) {}
  ~CommandReplaceCustomFormatArchive() override;
  explicit constexpr CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from);
  CommandReplaceCustomFormatArchive(CommandReplaceCustomFormatArchive&& from) noexcept
    : CommandReplaceCustomFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceCustomFormatArchive& operator=(const CommandReplaceCustomFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceCustomFormatArchive& operator=(CommandReplaceCustomFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceCustomFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceCustomFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceCustomFormatArchive*>(
               &_CommandReplaceCustomFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommandReplaceCustomFormatArchive& a, CommandReplaceCustomFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceCustomFormatArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceCustomFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceCustomFormatArchive* New() const final {
    return new CommandReplaceCustomFormatArchive();
  }

  CommandReplaceCustomFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceCustomFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceCustomFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceCustomFormatArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceCustomFormatArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceCustomFormatArchive";
  }
  protected:
  explicit CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandReplaceCustomFormatArchive_FormatObjectMutation FormatObjectMutation;

  // accessors -------------------------------------------------------

  enum : int {
    kForwardMutationsFieldNumber = 5,
    kReverseMutationsFieldNumber = 6,
    kSuperFieldNumber = 1,
    kRollbackCmdFieldNumber = 2,
    kOldFormatObjectFieldNumber = 3,
    kNewFormatObjectFieldNumber = 4,
  };
  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation forward_mutations = 5;
  int forward_mutations_size() const;
  private:
  int _internal_forward_mutations_size() const;
  public:
  void clear_forward_mutations();
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* mutable_forward_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >*
      mutable_forward_mutations();
  private:
  const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& _internal_forward_mutations(int index) const;
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* _internal_add_forward_mutations();
  public:
  const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& forward_mutations(int index) const;
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* add_forward_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >&
      forward_mutations() const;

  // repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation reverse_mutations = 6;
  int reverse_mutations_size() const;
  private:
  int _internal_reverse_mutations_size() const;
  public:
  void clear_reverse_mutations();
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* mutable_reverse_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >*
      mutable_reverse_mutations();
  private:
  const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& _internal_reverse_mutations(int index) const;
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* _internal_add_reverse_mutations();
  public:
  const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& reverse_mutations(int index) const;
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* add_reverse_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >&
      reverse_mutations() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference rollback_cmd = 2;
  bool has_rollback_cmd() const;
  private:
  bool _internal_has_rollback_cmd() const;
  public:
  void clear_rollback_cmd();
  const ::TSP::Reference& rollback_cmd() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_rollback_cmd();
  ::TSP::Reference* mutable_rollback_cmd();
  void set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd);
  private:
  const ::TSP::Reference& _internal_rollback_cmd() const;
  ::TSP::Reference* _internal_mutable_rollback_cmd();
  public:
  void unsafe_arena_set_allocated_rollback_cmd(
      ::TSP::Reference* rollback_cmd);
  ::TSP::Reference* unsafe_arena_release_rollback_cmd();

  // optional .TSK.FormatStructArchive old_format_object = 3;
  bool has_old_format_object() const;
  private:
  bool _internal_has_old_format_object() const;
  public:
  void clear_old_format_object();
  const ::TSK::FormatStructArchive& old_format_object() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_old_format_object();
  ::TSK::FormatStructArchive* mutable_old_format_object();
  void set_allocated_old_format_object(::TSK::FormatStructArchive* old_format_object);
  private:
  const ::TSK::FormatStructArchive& _internal_old_format_object() const;
  ::TSK::FormatStructArchive* _internal_mutable_old_format_object();
  public:
  void unsafe_arena_set_allocated_old_format_object(
      ::TSK::FormatStructArchive* old_format_object);
  ::TSK::FormatStructArchive* unsafe_arena_release_old_format_object();

  // optional .TSK.FormatStructArchive new_format_object = 4;
  bool has_new_format_object() const;
  private:
  bool _internal_has_new_format_object() const;
  public:
  void clear_new_format_object();
  const ::TSK::FormatStructArchive& new_format_object() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_new_format_object();
  ::TSK::FormatStructArchive* mutable_new_format_object();
  void set_allocated_new_format_object(::TSK::FormatStructArchive* new_format_object);
  private:
  const ::TSK::FormatStructArchive& _internal_new_format_object() const;
  ::TSK::FormatStructArchive* _internal_mutable_new_format_object();
  public:
  void unsafe_arena_set_allocated_new_format_object(
      ::TSK::FormatStructArchive* new_format_object);
  ::TSK::FormatStructArchive* unsafe_arena_release_new_format_object();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceCustomFormatArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation > forward_mutations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation > reverse_mutations_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* rollback_cmd_;
  ::TSK::FormatStructArchive* old_format_object_;
  ::TSK::FormatStructArchive* new_format_object_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddReferenceLineArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandAddReferenceLineArchive) */ {
 public:
  inline CommandAddReferenceLineArchive() : CommandAddReferenceLineArchive(nullptr) {}
  ~CommandAddReferenceLineArchive() override;
  explicit constexpr CommandAddReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddReferenceLineArchive(const CommandAddReferenceLineArchive& from);
  CommandAddReferenceLineArchive(CommandAddReferenceLineArchive&& from) noexcept
    : CommandAddReferenceLineArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddReferenceLineArchive& operator=(const CommandAddReferenceLineArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddReferenceLineArchive& operator=(CommandAddReferenceLineArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddReferenceLineArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddReferenceLineArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddReferenceLineArchive*>(
               &_CommandAddReferenceLineArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CommandAddReferenceLineArchive& a, CommandAddReferenceLineArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddReferenceLineArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddReferenceLineArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAddReferenceLineArchive* New() const final {
    return new CommandAddReferenceLineArchive();
  }

  CommandAddReferenceLineArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAddReferenceLineArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddReferenceLineArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandAddReferenceLineArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddReferenceLineArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandAddReferenceLineArchive";
  }
  protected:
  explicit CommandAddReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParagraphStylesFieldNumber = 6,
    kRollbackCommandsFieldNumber = 7,
    kSuperFieldNumber = 1,
    kAxisIdFieldNumber = 2,
    kUuidFieldNumber = 3,
    kNonStyleFieldNumber = 4,
    kStyleFieldNumber = 5,
  };
  // repeated .TSP.Reference paragraph_styles = 6;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // repeated .TSP.Reference rollback_commands = 7;
  int rollback_commands_size() const;
  private:
  int _internal_rollback_commands_size() const;
  public:
  void clear_rollback_commands();
  ::TSP::Reference* mutable_rollback_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_rollback_commands();
  private:
  const ::TSP::Reference& _internal_rollback_commands(int index) const;
  ::TSP::Reference* _internal_add_rollback_commands();
  public:
  const ::TSP::Reference& rollback_commands(int index) const;
  ::TSP::Reference* add_rollback_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      rollback_commands() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSCH.ChartAxisIDArchive axis_id = 2;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // optional .TSP.UUID uuid = 3;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // required .TSP.Reference non_style = 4;
  bool has_non_style() const;
  private:
  bool _internal_has_non_style() const;
  public:
  void clear_non_style();
  const ::TSP::Reference& non_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_non_style();
  ::TSP::Reference* mutable_non_style();
  void set_allocated_non_style(::TSP::Reference* non_style);
  private:
  const ::TSP::Reference& _internal_non_style() const;
  ::TSP::Reference* _internal_mutable_non_style();
  public:
  void unsafe_arena_set_allocated_non_style(
      ::TSP::Reference* non_style);
  ::TSP::Reference* unsafe_arena_release_non_style();

  // optional .TSP.Reference style = 5;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddReferenceLineArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > rollback_commands_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSCH::ChartAxisIDArchive* axis_id_;
  ::TSP::UUID* uuid_;
  ::TSP::Reference* non_style_;
  ::TSP::Reference* style_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteReferenceLineArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteReferenceLineArchive) */ {
 public:
  inline CommandDeleteReferenceLineArchive() : CommandDeleteReferenceLineArchive(nullptr) {}
  ~CommandDeleteReferenceLineArchive() override;
  explicit constexpr CommandDeleteReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteReferenceLineArchive(const CommandDeleteReferenceLineArchive& from);
  CommandDeleteReferenceLineArchive(CommandDeleteReferenceLineArchive&& from) noexcept
    : CommandDeleteReferenceLineArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteReferenceLineArchive& operator=(const CommandDeleteReferenceLineArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteReferenceLineArchive& operator=(CommandDeleteReferenceLineArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteReferenceLineArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteReferenceLineArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteReferenceLineArchive*>(
               &_CommandDeleteReferenceLineArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CommandDeleteReferenceLineArchive& a, CommandDeleteReferenceLineArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteReferenceLineArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteReferenceLineArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDeleteReferenceLineArchive* New() const final {
    return new CommandDeleteReferenceLineArchive();
  }

  CommandDeleteReferenceLineArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDeleteReferenceLineArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteReferenceLineArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandDeleteReferenceLineArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteReferenceLineArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteReferenceLineArchive";
  }
  protected:
  explicit CommandDeleteReferenceLineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParagraphStylesFieldNumber = 6,
    kSuperFieldNumber = 1,
    kAxisIdFieldNumber = 2,
    kUuidFieldNumber = 3,
    kNonStyleFieldNumber = 4,
    kStyleFieldNumber = 5,
    kStyleSwapCommandFieldNumber = 7,
  };
  // repeated .TSP.Reference paragraph_styles = 6;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSCH.ChartAxisIDArchive axis_id = 2;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // required .TSP.UUID uuid = 3;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // optional .TSP.Reference non_style = 4;
  bool has_non_style() const;
  private:
  bool _internal_has_non_style() const;
  public:
  void clear_non_style();
  const ::TSP::Reference& non_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_non_style();
  ::TSP::Reference* mutable_non_style();
  void set_allocated_non_style(::TSP::Reference* non_style);
  private:
  const ::TSP::Reference& _internal_non_style() const;
  ::TSP::Reference* _internal_mutable_non_style();
  public:
  void unsafe_arena_set_allocated_non_style(
      ::TSP::Reference* non_style);
  ::TSP::Reference* unsafe_arena_release_non_style();

  // optional .TSP.Reference style = 5;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // optional .TSP.Reference style_swap_command = 7;
  bool has_style_swap_command() const;
  private:
  bool _internal_has_style_swap_command() const;
  public:
  void clear_style_swap_command();
  const ::TSP::Reference& style_swap_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style_swap_command();
  ::TSP::Reference* mutable_style_swap_command();
  void set_allocated_style_swap_command(::TSP::Reference* style_swap_command);
  private:
  const ::TSP::Reference& _internal_style_swap_command() const;
  ::TSP::Reference* _internal_mutable_style_swap_command();
  public:
  void unsafe_arena_set_allocated_style_swap_command(
      ::TSP::Reference* style_swap_command);
  ::TSP::Reference* unsafe_arena_release_style_swap_command();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteReferenceLineArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSCH::ChartAxisIDArchive* axis_id_;
  ::TSP::UUID* uuid_;
  ::TSP::Reference* non_style_;
  ::TSP::Reference* style_;
  ::TSP::Reference* style_swap_command_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPasteStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandPasteStyleArchive) */ {
 public:
  inline CommandPasteStyleArchive() : CommandPasteStyleArchive(nullptr) {}
  ~CommandPasteStyleArchive() override;
  explicit constexpr CommandPasteStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPasteStyleArchive(const CommandPasteStyleArchive& from);
  CommandPasteStyleArchive(CommandPasteStyleArchive&& from) noexcept
    : CommandPasteStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandPasteStyleArchive& operator=(const CommandPasteStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPasteStyleArchive& operator=(CommandPasteStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPasteStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPasteStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPasteStyleArchive*>(
               &_CommandPasteStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CommandPasteStyleArchive& a, CommandPasteStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPasteStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPasteStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPasteStyleArchive* New() const final {
    return new CommandPasteStyleArchive();
  }

  CommandPasteStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPasteStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPasteStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandPasteStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPasteStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandPasteStyleArchive";
  }
  protected:
  explicit CommandPasteStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubselectionFieldNumber = 6,
    kSuperFieldNumber = 1,
    kStyleSwapCommandFieldNumber = 2,
    kInverseChartStyleStateFieldNumber = 3,
    kChartStyleStateFieldNumber = 4,
    kShapeStyleFieldNumber = 5,
  };
  // repeated .TSCH.ChartSelectionPathArchive subselection = 6;
  int subselection_size() const;
  private:
  int _internal_subselection_size() const;
  public:
  void clear_subselection();
  ::TSCH::ChartSelectionPathArchive* mutable_subselection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
      mutable_subselection();
  private:
  const ::TSCH::ChartSelectionPathArchive& _internal_subselection(int index) const;
  ::TSCH::ChartSelectionPathArchive* _internal_add_subselection();
  public:
  const ::TSCH::ChartSelectionPathArchive& subselection(int index) const;
  ::TSCH::ChartSelectionPathArchive* add_subselection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
      subselection() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference style_swap_command = 2;
  bool has_style_swap_command() const;
  private:
  bool _internal_has_style_swap_command() const;
  public:
  void clear_style_swap_command();
  const ::TSP::Reference& style_swap_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style_swap_command();
  ::TSP::Reference* mutable_style_swap_command();
  void set_allocated_style_swap_command(::TSP::Reference* style_swap_command);
  private:
  const ::TSP::Reference& _internal_style_swap_command() const;
  ::TSP::Reference* _internal_mutable_style_swap_command();
  public:
  void unsafe_arena_set_allocated_style_swap_command(
      ::TSP::Reference* style_swap_command);
  ::TSP::Reference* unsafe_arena_release_style_swap_command();

  // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
  bool has_inverse_chart_style_state() const;
  private:
  bool _internal_has_inverse_chart_style_state() const;
  public:
  void clear_inverse_chart_style_state();
  const ::TSCH::PropertyValueStorageContainerArchive& inverse_chart_style_state() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::PropertyValueStorageContainerArchive* release_inverse_chart_style_state();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_inverse_chart_style_state();
  void set_allocated_inverse_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_inverse_chart_style_state() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_inverse_chart_style_state();
  public:
  void unsafe_arena_set_allocated_inverse_chart_style_state(
      ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_inverse_chart_style_state();

  // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
  bool has_chart_style_state() const;
  private:
  bool _internal_has_chart_style_state() const;
  public:
  void clear_chart_style_state();
  const ::TSCH::PropertyValueStorageContainerArchive& chart_style_state() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::PropertyValueStorageContainerArchive* release_chart_style_state();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_chart_style_state();
  void set_allocated_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* chart_style_state);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_chart_style_state() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_chart_style_state();
  public:
  void unsafe_arena_set_allocated_chart_style_state(
      ::TSCH::PropertyValueStorageContainerArchive* chart_style_state);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_chart_style_state();

  // optional .TSP.Reference shape_style = 5;
  bool has_shape_style() const;
  private:
  bool _internal_has_shape_style() const;
  public:
  void clear_shape_style();
  const ::TSP::Reference& shape_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_shape_style();
  ::TSP::Reference* mutable_shape_style();
  void set_allocated_shape_style(::TSP::Reference* shape_style);
  private:
  const ::TSP::Reference& _internal_shape_style() const;
  ::TSP::Reference* _internal_mutable_shape_style();
  public:
  void unsafe_arena_set_allocated_shape_style(
      ::TSP::Reference* shape_style);
  ::TSP::Reference* unsafe_arena_release_shape_style();

  // @@protoc_insertion_point(class_scope:TSCH.CommandPasteStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive > subselection_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* style_swap_command_;
  ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state_;
  ::TSCH::PropertyValueStorageContainerArchive* chart_style_state_;
  ::TSP::Reference* shape_style_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceImageDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceImageDataArchive) */ {
 public:
  inline CommandReplaceImageDataArchive() : CommandReplaceImageDataArchive(nullptr) {}
  ~CommandReplaceImageDataArchive() override;
  explicit constexpr CommandReplaceImageDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceImageDataArchive(const CommandReplaceImageDataArchive& from);
  CommandReplaceImageDataArchive(CommandReplaceImageDataArchive&& from) noexcept
    : CommandReplaceImageDataArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceImageDataArchive& operator=(const CommandReplaceImageDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceImageDataArchive& operator=(CommandReplaceImageDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceImageDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceImageDataArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceImageDataArchive*>(
               &_CommandReplaceImageDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CommandReplaceImageDataArchive& a, CommandReplaceImageDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceImageDataArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceImageDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReplaceImageDataArchive* New() const final {
    return new CommandReplaceImageDataArchive();
  }

  CommandReplaceImageDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplaceImageDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceImageDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReplaceImageDataArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceImageDataArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceImageDataArchive";
  }
  protected:
  explicit CommandReplaceImageDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStyleSwapCommandFieldNumber = 2,
    kInverseChartStyleStateFieldNumber = 3,
    kChartStyleStateFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference style_swap_command = 2;
  bool has_style_swap_command() const;
  private:
  bool _internal_has_style_swap_command() const;
  public:
  void clear_style_swap_command();
  const ::TSP::Reference& style_swap_command() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_style_swap_command();
  ::TSP::Reference* mutable_style_swap_command();
  void set_allocated_style_swap_command(::TSP::Reference* style_swap_command);
  private:
  const ::TSP::Reference& _internal_style_swap_command() const;
  ::TSP::Reference* _internal_mutable_style_swap_command();
  public:
  void unsafe_arena_set_allocated_style_swap_command(
      ::TSP::Reference* style_swap_command);
  ::TSP::Reference* unsafe_arena_release_style_swap_command();

  // optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
  bool has_inverse_chart_style_state() const;
  private:
  bool _internal_has_inverse_chart_style_state() const;
  public:
  void clear_inverse_chart_style_state();
  const ::TSCH::PropertyValueStorageContainerArchive& inverse_chart_style_state() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::PropertyValueStorageContainerArchive* release_inverse_chart_style_state();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_inverse_chart_style_state();
  void set_allocated_inverse_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_inverse_chart_style_state() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_inverse_chart_style_state();
  public:
  void unsafe_arena_set_allocated_inverse_chart_style_state(
      ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_inverse_chart_style_state();

  // optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
  bool has_chart_style_state() const;
  private:
  bool _internal_has_chart_style_state() const;
  public:
  void clear_chart_style_state();
  const ::TSCH::PropertyValueStorageContainerArchive& chart_style_state() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::PropertyValueStorageContainerArchive* release_chart_style_state();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_chart_style_state();
  void set_allocated_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* chart_style_state);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_chart_style_state() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_chart_style_state();
  public:
  void unsafe_arena_set_allocated_chart_style_state(
      ::TSCH::PropertyValueStorageContainerArchive* chart_style_state);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_chart_style_state();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceImageDataArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* style_swap_command_;
  ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state_;
  ::TSCH::PropertyValueStorageContainerArchive* chart_style_state_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInducedReplaceChartGrid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandInducedReplaceChartGrid) */ {
 public:
  inline CommandInducedReplaceChartGrid() : CommandInducedReplaceChartGrid(nullptr) {}
  ~CommandInducedReplaceChartGrid() override;
  explicit constexpr CommandInducedReplaceChartGrid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInducedReplaceChartGrid(const CommandInducedReplaceChartGrid& from);
  CommandInducedReplaceChartGrid(CommandInducedReplaceChartGrid&& from) noexcept
    : CommandInducedReplaceChartGrid() {
    *this = ::std::move(from);
  }

  inline CommandInducedReplaceChartGrid& operator=(const CommandInducedReplaceChartGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInducedReplaceChartGrid& operator=(CommandInducedReplaceChartGrid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInducedReplaceChartGrid& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInducedReplaceChartGrid* internal_default_instance() {
    return reinterpret_cast<const CommandInducedReplaceChartGrid*>(
               &_CommandInducedReplaceChartGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CommandInducedReplaceChartGrid& a, CommandInducedReplaceChartGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInducedReplaceChartGrid* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInducedReplaceChartGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInducedReplaceChartGrid* New() const final {
    return new CommandInducedReplaceChartGrid();
  }

  CommandInducedReplaceChartGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInducedReplaceChartGrid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInducedReplaceChartGrid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandInducedReplaceChartGrid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInducedReplaceChartGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandInducedReplaceChartGrid";
  }
  protected:
  explicit CommandInducedReplaceChartGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandInducedReplaceChartGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInduced3DChartGeometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandInduced3DChartGeometry) */ {
 public:
  inline CommandInduced3DChartGeometry() : CommandInduced3DChartGeometry(nullptr) {}
  ~CommandInduced3DChartGeometry() override;
  explicit constexpr CommandInduced3DChartGeometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInduced3DChartGeometry(const CommandInduced3DChartGeometry& from);
  CommandInduced3DChartGeometry(CommandInduced3DChartGeometry&& from) noexcept
    : CommandInduced3DChartGeometry() {
    *this = ::std::move(from);
  }

  inline CommandInduced3DChartGeometry& operator=(const CommandInduced3DChartGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInduced3DChartGeometry& operator=(CommandInduced3DChartGeometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInduced3DChartGeometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInduced3DChartGeometry* internal_default_instance() {
    return reinterpret_cast<const CommandInduced3DChartGeometry*>(
               &_CommandInduced3DChartGeometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CommandInduced3DChartGeometry& a, CommandInduced3DChartGeometry& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInduced3DChartGeometry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInduced3DChartGeometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInduced3DChartGeometry* New() const final {
    return new CommandInduced3DChartGeometry();
  }

  CommandInduced3DChartGeometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInduced3DChartGeometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInduced3DChartGeometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandInduced3DChartGeometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInduced3DChartGeometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandInduced3DChartGeometry";
  }
  protected:
  explicit CommandInduced3DChartGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandInduced3DChartGeometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartTextSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartTextSelectionTransformerArchive) */ {
 public:
  inline ChartTextSelectionTransformerArchive() : ChartTextSelectionTransformerArchive(nullptr) {}
  ~ChartTextSelectionTransformerArchive() override;
  explicit constexpr ChartTextSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartTextSelectionTransformerArchive(const ChartTextSelectionTransformerArchive& from);
  ChartTextSelectionTransformerArchive(ChartTextSelectionTransformerArchive&& from) noexcept
    : ChartTextSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ChartTextSelectionTransformerArchive& operator=(const ChartTextSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartTextSelectionTransformerArchive& operator=(ChartTextSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartTextSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartTextSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ChartTextSelectionTransformerArchive*>(
               &_ChartTextSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ChartTextSelectionTransformerArchive& a, ChartTextSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartTextSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartTextSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartTextSelectionTransformerArchive* New() const final {
    return new ChartTextSelectionTransformerArchive();
  }

  ChartTextSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartTextSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartTextSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartTextSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartTextSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartTextSelectionTransformerArchive";
  }
  protected:
  explicit ChartTextSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
  };
  // optional .TSP.Reference selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TSP::Reference& selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_selection();
  ::TSP::Reference* mutable_selection();
  void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  ::TSP::Reference* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:TSCH.ChartTextSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* selection_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartDrawableSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartDrawableSelectionTransformerArchive) */ {
 public:
  inline ChartDrawableSelectionTransformerArchive() : ChartDrawableSelectionTransformerArchive(nullptr) {}
  ~ChartDrawableSelectionTransformerArchive() override;
  explicit constexpr ChartDrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartDrawableSelectionTransformerArchive(const ChartDrawableSelectionTransformerArchive& from);
  ChartDrawableSelectionTransformerArchive(ChartDrawableSelectionTransformerArchive&& from) noexcept
    : ChartDrawableSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ChartDrawableSelectionTransformerArchive& operator=(const ChartDrawableSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartDrawableSelectionTransformerArchive& operator=(ChartDrawableSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartDrawableSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartDrawableSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ChartDrawableSelectionTransformerArchive*>(
               &_ChartDrawableSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ChartDrawableSelectionTransformerArchive& a, ChartDrawableSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartDrawableSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartDrawableSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartDrawableSelectionTransformerArchive* New() const final {
    return new ChartDrawableSelectionTransformerArchive();
  }

  ChartDrawableSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartDrawableSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartDrawableSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartDrawableSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartDrawableSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartDrawableSelectionTransformerArchive";
  }
  protected:
  explicit ChartDrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionTransformerArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::DrawableSelectionTransformerArchive* release_super();
  ::TSD::DrawableSelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super);
  private:
  const ::TSD::DrawableSelectionTransformerArchive& _internal_super() const;
  ::TSD::DrawableSelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionTransformerArchive* super);
  ::TSD::DrawableSelectionTransformerArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.ChartDrawableSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableSelectionTransformerArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSubselectionTransformerHelperArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSubselectionTransformerHelperArchive) */ {
 public:
  inline ChartSubselectionTransformerHelperArchive() : ChartSubselectionTransformerHelperArchive(nullptr) {}
  ~ChartSubselectionTransformerHelperArchive() override;
  explicit constexpr ChartSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSubselectionTransformerHelperArchive(const ChartSubselectionTransformerHelperArchive& from);
  ChartSubselectionTransformerHelperArchive(ChartSubselectionTransformerHelperArchive&& from) noexcept
    : ChartSubselectionTransformerHelperArchive() {
    *this = ::std::move(from);
  }

  inline ChartSubselectionTransformerHelperArchive& operator=(const ChartSubselectionTransformerHelperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSubselectionTransformerHelperArchive& operator=(ChartSubselectionTransformerHelperArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSubselectionTransformerHelperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSubselectionTransformerHelperArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSubselectionTransformerHelperArchive*>(
               &_ChartSubselectionTransformerHelperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ChartSubselectionTransformerHelperArchive& a, ChartSubselectionTransformerHelperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSubselectionTransformerHelperArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSubselectionTransformerHelperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSubselectionTransformerHelperArchive* New() const final {
    return new ChartSubselectionTransformerHelperArchive();
  }

  ChartSubselectionTransformerHelperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSubselectionTransformerHelperArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSubselectionTransformerHelperArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSubselectionTransformerHelperArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSubselectionTransformerHelperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSubselectionTransformerHelperArchive";
  }
  protected:
  explicit ChartSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
  };
  // optional .TSP.Reference selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TSP::Reference& selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_selection();
  ::TSP::Reference* mutable_selection();
  void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  ::TSP::Reference* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSubselectionTransformerHelperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* selection_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartRefLineSubselectionTransformerHelperArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartRefLineSubselectionTransformerHelperArchive) */ {
 public:
  inline ChartRefLineSubselectionTransformerHelperArchive() : ChartRefLineSubselectionTransformerHelperArchive(nullptr) {}
  ~ChartRefLineSubselectionTransformerHelperArchive() override;
  explicit constexpr ChartRefLineSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartRefLineSubselectionTransformerHelperArchive(const ChartRefLineSubselectionTransformerHelperArchive& from);
  ChartRefLineSubselectionTransformerHelperArchive(ChartRefLineSubselectionTransformerHelperArchive&& from) noexcept
    : ChartRefLineSubselectionTransformerHelperArchive() {
    *this = ::std::move(from);
  }

  inline ChartRefLineSubselectionTransformerHelperArchive& operator=(const ChartRefLineSubselectionTransformerHelperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartRefLineSubselectionTransformerHelperArchive& operator=(ChartRefLineSubselectionTransformerHelperArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartRefLineSubselectionTransformerHelperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartRefLineSubselectionTransformerHelperArchive* internal_default_instance() {
    return reinterpret_cast<const ChartRefLineSubselectionTransformerHelperArchive*>(
               &_ChartRefLineSubselectionTransformerHelperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ChartRefLineSubselectionTransformerHelperArchive& a, ChartRefLineSubselectionTransformerHelperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartRefLineSubselectionTransformerHelperArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartRefLineSubselectionTransformerHelperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartRefLineSubselectionTransformerHelperArchive* New() const final {
    return new ChartRefLineSubselectionTransformerHelperArchive();
  }

  ChartRefLineSubselectionTransformerHelperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartRefLineSubselectionTransformerHelperArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartRefLineSubselectionTransformerHelperArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartRefLineSubselectionTransformerHelperArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartRefLineSubselectionTransformerHelperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartRefLineSubselectionTransformerHelperArchive";
  }
  protected:
  explicit ChartRefLineSubselectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedReferenceLineUuidsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.UUID selected_reference_line_uuids = 2;
  int selected_reference_line_uuids_size() const;
  private:
  int _internal_selected_reference_line_uuids_size() const;
  public:
  void clear_selected_reference_line_uuids();
  ::TSP::UUID* mutable_selected_reference_line_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_selected_reference_line_uuids();
  private:
  const ::TSP::UUID& _internal_selected_reference_line_uuids(int index) const;
  ::TSP::UUID* _internal_add_selected_reference_line_uuids();
  public:
  const ::TSP::UUID& selected_reference_line_uuids(int index) const;
  ::TSP::UUID* add_selected_reference_line_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      selected_reference_line_uuids() const;

  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartSubselectionTransformerHelperArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartSubselectionTransformerHelperArchive* release_super();
  ::TSCH::ChartSubselectionTransformerHelperArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartSubselectionTransformerHelperArchive* super);
  private:
  const ::TSCH::ChartSubselectionTransformerHelperArchive& _internal_super() const;
  ::TSCH::ChartSubselectionTransformerHelperArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartSubselectionTransformerHelperArchive* super);
  ::TSCH::ChartSubselectionTransformerHelperArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.ChartRefLineSubselectionTransformerHelperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > selected_reference_line_uuids_;
  ::TSCH::ChartSubselectionTransformerHelperArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSubselectionIdentityTransformerHelperArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSubselectionIdentityTransformerHelperArchive) */ {
 public:
  inline ChartSubselectionIdentityTransformerHelperArchive() : ChartSubselectionIdentityTransformerHelperArchive(nullptr) {}
  ~ChartSubselectionIdentityTransformerHelperArchive() override;
  explicit constexpr ChartSubselectionIdentityTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSubselectionIdentityTransformerHelperArchive(const ChartSubselectionIdentityTransformerHelperArchive& from);
  ChartSubselectionIdentityTransformerHelperArchive(ChartSubselectionIdentityTransformerHelperArchive&& from) noexcept
    : ChartSubselectionIdentityTransformerHelperArchive() {
    *this = ::std::move(from);
  }

  inline ChartSubselectionIdentityTransformerHelperArchive& operator=(const ChartSubselectionIdentityTransformerHelperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSubselectionIdentityTransformerHelperArchive& operator=(ChartSubselectionIdentityTransformerHelperArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSubselectionIdentityTransformerHelperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSubselectionIdentityTransformerHelperArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSubselectionIdentityTransformerHelperArchive*>(
               &_ChartSubselectionIdentityTransformerHelperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ChartSubselectionIdentityTransformerHelperArchive& a, ChartSubselectionIdentityTransformerHelperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSubselectionIdentityTransformerHelperArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSubselectionIdentityTransformerHelperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSubselectionIdentityTransformerHelperArchive* New() const final {
    return new ChartSubselectionIdentityTransformerHelperArchive();
  }

  ChartSubselectionIdentityTransformerHelperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSubselectionIdentityTransformerHelperArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSubselectionIdentityTransformerHelperArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSubselectionIdentityTransformerHelperArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSubselectionIdentityTransformerHelperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSubselectionIdentityTransformerHelperArchive";
  }
  protected:
  explicit ChartSubselectionIdentityTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartSubselectionTransformerHelperArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartSubselectionTransformerHelperArchive* release_super();
  ::TSCH::ChartSubselectionTransformerHelperArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartSubselectionTransformerHelperArchive* super);
  private:
  const ::TSCH::ChartSubselectionTransformerHelperArchive& _internal_super() const;
  ::TSCH::ChartSubselectionTransformerHelperArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartSubselectionTransformerHelperArchive* super);
  ::TSCH::ChartSubselectionTransformerHelperArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSubselectionIdentityTransformerHelperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartSubselectionTransformerHelperArchive* super_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSubselectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSubselectionTransformerArchive) */ {
 public:
  inline ChartSubselectionTransformerArchive() : ChartSubselectionTransformerArchive(nullptr) {}
  ~ChartSubselectionTransformerArchive() override;
  explicit constexpr ChartSubselectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSubselectionTransformerArchive(const ChartSubselectionTransformerArchive& from);
  ChartSubselectionTransformerArchive(ChartSubselectionTransformerArchive&& from) noexcept
    : ChartSubselectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ChartSubselectionTransformerArchive& operator=(const ChartSubselectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSubselectionTransformerArchive& operator=(ChartSubselectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSubselectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSubselectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSubselectionTransformerArchive*>(
               &_ChartSubselectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ChartSubselectionTransformerArchive& a, ChartSubselectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSubselectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSubselectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSubselectionTransformerArchive* New() const final {
    return new ChartSubselectionTransformerArchive();
  }

  ChartSubselectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSubselectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSubselectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSubselectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSubselectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSubselectionTransformerArchive";
  }
  protected:
  explicit ChartSubselectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kHelperFieldNumber = 2,
  };
  // optional .TSP.Reference selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TSP::Reference& selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_selection();
  ::TSP::Reference* mutable_selection();
  void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  ::TSP::Reference* unsafe_arena_release_selection();

  // optional .TSP.Reference helper = 2;
  bool has_helper() const;
  private:
  bool _internal_has_helper() const;
  public:
  void clear_helper();
  const ::TSP::Reference& helper() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_helper();
  ::TSP::Reference* mutable_helper();
  void set_allocated_helper(::TSP::Reference* helper);
  private:
  const ::TSP::Reference& _internal_helper() const;
  ::TSP::Reference* _internal_mutable_helper();
  public:
  void unsafe_arena_set_allocated_helper(
      ::TSP::Reference* helper);
  ::TSP::Reference* unsafe_arena_release_helper();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSubselectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* selection_;
  ::TSP::Reference* helper_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CDESelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CDESelectionTransformerArchive) */ {
 public:
  inline CDESelectionTransformerArchive() : CDESelectionTransformerArchive(nullptr) {}
  ~CDESelectionTransformerArchive() override;
  explicit constexpr CDESelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDESelectionTransformerArchive(const CDESelectionTransformerArchive& from);
  CDESelectionTransformerArchive(CDESelectionTransformerArchive&& from) noexcept
    : CDESelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline CDESelectionTransformerArchive& operator=(const CDESelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDESelectionTransformerArchive& operator=(CDESelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDESelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDESelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const CDESelectionTransformerArchive*>(
               &_CDESelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CDESelectionTransformerArchive& a, CDESelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CDESelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDESelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDESelectionTransformerArchive* New() const final {
    return new CDESelectionTransformerArchive();
  }

  CDESelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDESelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDESelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDESelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDESelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CDESelectionTransformerArchive";
  }
  protected:
  explicit CDESelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCdeSelectionFieldNumber = 1,
  };
  // optional .TSP.Reference cde_selection = 1;
  bool has_cde_selection() const;
  private:
  bool _internal_has_cde_selection() const;
  public:
  void clear_cde_selection();
  const ::TSP::Reference& cde_selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_cde_selection();
  ::TSP::Reference* mutable_cde_selection();
  void set_allocated_cde_selection(::TSP::Reference* cde_selection);
  private:
  const ::TSP::Reference& _internal_cde_selection() const;
  ::TSP::Reference* _internal_mutable_cde_selection();
  public:
  void unsafe_arena_set_allocated_cde_selection(
      ::TSP::Reference* cde_selection);
  ::TSP::Reference* unsafe_arena_release_cde_selection();

  // @@protoc_insertion_point(class_scope:TSCH.CDESelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* cde_selection_;
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StyleOwnerPath

// repeated .TSP.UUID uuids = 1;
inline int StyleOwnerPath::_internal_uuids_size() const {
  return uuids_.size();
}
inline int StyleOwnerPath::uuids_size() const {
  return _internal_uuids_size();
}
inline ::TSP::UUID* StyleOwnerPath::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.StyleOwnerPath.uuids)
  return uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
StyleOwnerPath::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.StyleOwnerPath.uuids)
  return &uuids_;
}
inline const ::TSP::UUID& StyleOwnerPath::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const ::TSP::UUID& StyleOwnerPath::uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.StyleOwnerPath.uuids)
  return _internal_uuids(index);
}
inline ::TSP::UUID* StyleOwnerPath::_internal_add_uuids() {
  return uuids_.Add();
}
inline ::TSP::UUID* StyleOwnerPath::add_uuids() {
  ::TSP::UUID* _add = _internal_add_uuids();
  // @@protoc_insertion_point(field_add:TSCH.StyleOwnerPath.uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
StyleOwnerPath::uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.StyleOwnerPath.uuids)
  return uuids_;
}

// -------------------------------------------------------------------

// CommandSetChartTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetChartTypeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetChartTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetChartTypeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetChartTypeArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetChartTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.super)
  return _internal_super();
}
inline void CommandSetChartTypeArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetChartTypeArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetChartTypeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.super)
  return _msg;
}
inline void CommandSetChartTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetChartTypeArchive.super)
}

// optional .TSCH.ChartType new_chart_type = 2;
inline bool CommandSetChartTypeArchive::_internal_has_new_chart_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_new_chart_type() const {
  return _internal_has_new_chart_type();
}
inline void CommandSetChartTypeArchive::clear_new_chart_type() {
  new_chart_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::_internal_new_chart_type() const {
  return static_cast< ::TSCH::ChartType >(new_chart_type_);
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::new_chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.new_chart_type)
  return _internal_new_chart_type();
}
inline void CommandSetChartTypeArchive::_internal_set_new_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  new_chart_type_ = value;
}
inline void CommandSetChartTypeArchive::set_new_chart_type(::TSCH::ChartType value) {
  _internal_set_new_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.new_chart_type)
}

// optional .TSCH.ChartType old_chart_type = 3;
inline bool CommandSetChartTypeArchive::_internal_has_old_chart_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_old_chart_type() const {
  return _internal_has_old_chart_type();
}
inline void CommandSetChartTypeArchive::clear_old_chart_type() {
  old_chart_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::_internal_old_chart_type() const {
  return static_cast< ::TSCH::ChartType >(old_chart_type_);
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::old_chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.old_chart_type)
  return _internal_old_chart_type();
}
inline void CommandSetChartTypeArchive::_internal_set_old_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  old_chart_type_ = value;
}
inline void CommandSetChartTypeArchive::set_old_chart_type(::TSCH::ChartType value) {
  _internal_set_old_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.old_chart_type)
}

// optional .TSCH.ChartType rollback_chart_type = 4;
inline bool CommandSetChartTypeArchive::_internal_has_rollback_chart_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_rollback_chart_type() const {
  return _internal_has_rollback_chart_type();
}
inline void CommandSetChartTypeArchive::clear_rollback_chart_type() {
  rollback_chart_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::_internal_rollback_chart_type() const {
  return static_cast< ::TSCH::ChartType >(rollback_chart_type_);
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::rollback_chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.rollback_chart_type)
  return _internal_rollback_chart_type();
}
inline void CommandSetChartTypeArchive::_internal_set_rollback_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  rollback_chart_type_ = value;
}
inline void CommandSetChartTypeArchive::set_rollback_chart_type(::TSCH::ChartType value) {
  _internal_set_rollback_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.rollback_chart_type)
}

// repeated .TSP.UUID row_ids = 5;
inline int CommandSetChartTypeArchive::_internal_row_ids_size() const {
  return row_ids_.size();
}
inline int CommandSetChartTypeArchive::row_ids_size() const {
  return _internal_row_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_row_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.row_ids)
  return row_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_row_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.row_ids)
  return &row_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_row_ids(int index) const {
  return row_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::row_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.row_ids)
  return _internal_row_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_row_ids() {
  return row_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_row_ids() {
  ::TSP::UUID* _add = _internal_add_row_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.row_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::row_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.row_ids)
  return row_ids_;
}

// repeated .TSP.UUID column_ids = 6;
inline int CommandSetChartTypeArchive::_internal_column_ids_size() const {
  return column_ids_.size();
}
inline int CommandSetChartTypeArchive::column_ids_size() const {
  return _internal_column_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_column_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.column_ids)
  return column_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_column_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.column_ids)
  return &column_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_column_ids(int index) const {
  return column_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::column_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.column_ids)
  return _internal_column_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_column_ids() {
  return column_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_column_ids() {
  ::TSP::UUID* _add = _internal_add_column_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.column_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::column_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.column_ids)
  return column_ids_;
}

// repeated .TSP.UUID old_row_ids = 7;
inline int CommandSetChartTypeArchive::_internal_old_row_ids_size() const {
  return old_row_ids_.size();
}
inline int CommandSetChartTypeArchive::old_row_ids_size() const {
  return _internal_old_row_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_old_row_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.old_row_ids)
  return old_row_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_old_row_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.old_row_ids)
  return &old_row_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_old_row_ids(int index) const {
  return old_row_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::old_row_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.old_row_ids)
  return _internal_old_row_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_old_row_ids() {
  return old_row_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_old_row_ids() {
  ::TSP::UUID* _add = _internal_add_old_row_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.old_row_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::old_row_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.old_row_ids)
  return old_row_ids_;
}

// repeated .TSP.UUID old_column_ids = 8;
inline int CommandSetChartTypeArchive::_internal_old_column_ids_size() const {
  return old_column_ids_.size();
}
inline int CommandSetChartTypeArchive::old_column_ids_size() const {
  return _internal_old_column_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_old_column_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.old_column_ids)
  return old_column_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_old_column_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.old_column_ids)
  return &old_column_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_old_column_ids(int index) const {
  return old_column_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::old_column_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.old_column_ids)
  return _internal_old_column_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_old_column_ids() {
  return old_column_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_old_column_ids() {
  ::TSP::UUID* _add = _internal_add_old_column_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.old_column_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::old_column_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.old_column_ids)
  return old_column_ids_;
}

// repeated .TSP.UUID rollback_row_ids = 9;
inline int CommandSetChartTypeArchive::_internal_rollback_row_ids_size() const {
  return rollback_row_ids_.size();
}
inline int CommandSetChartTypeArchive::rollback_row_ids_size() const {
  return _internal_rollback_row_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_rollback_row_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.rollback_row_ids)
  return rollback_row_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_rollback_row_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.rollback_row_ids)
  return &rollback_row_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_rollback_row_ids(int index) const {
  return rollback_row_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::rollback_row_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.rollback_row_ids)
  return _internal_rollback_row_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_rollback_row_ids() {
  return rollback_row_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_rollback_row_ids() {
  ::TSP::UUID* _add = _internal_add_rollback_row_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.rollback_row_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::rollback_row_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.rollback_row_ids)
  return rollback_row_ids_;
}

// repeated .TSP.UUID rollback_column_ids = 10;
inline int CommandSetChartTypeArchive::_internal_rollback_column_ids_size() const {
  return rollback_column_ids_.size();
}
inline int CommandSetChartTypeArchive::rollback_column_ids_size() const {
  return _internal_rollback_column_ids_size();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::mutable_rollback_column_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.rollback_column_ids)
  return rollback_column_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSetChartTypeArchive::mutable_rollback_column_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetChartTypeArchive.rollback_column_ids)
  return &rollback_column_ids_;
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::_internal_rollback_column_ids(int index) const {
  return rollback_column_ids_.Get(index);
}
inline const ::TSP::UUID& CommandSetChartTypeArchive::rollback_column_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.rollback_column_ids)
  return _internal_rollback_column_ids(index);
}
inline ::TSP::UUID* CommandSetChartTypeArchive::_internal_add_rollback_column_ids() {
  return rollback_column_ids_.Add();
}
inline ::TSP::UUID* CommandSetChartTypeArchive::add_rollback_column_ids() {
  ::TSP::UUID* _add = _internal_add_rollback_column_ids();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetChartTypeArchive.rollback_column_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSetChartTypeArchive::rollback_column_ids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetChartTypeArchive.rollback_column_ids)
  return rollback_column_ids_;
}

// optional bool uses_captured_data = 11;
inline bool CommandSetChartTypeArchive::_internal_has_uses_captured_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_uses_captured_data() const {
  return _internal_has_uses_captured_data();
}
inline void CommandSetChartTypeArchive::clear_uses_captured_data() {
  uses_captured_data_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetChartTypeArchive::_internal_uses_captured_data() const {
  return uses_captured_data_;
}
inline bool CommandSetChartTypeArchive::uses_captured_data() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.uses_captured_data)
  return _internal_uses_captured_data();
}
inline void CommandSetChartTypeArchive::_internal_set_uses_captured_data(bool value) {
  _has_bits_[0] |= 0x00000010u;
  uses_captured_data_ = value;
}
inline void CommandSetChartTypeArchive::set_uses_captured_data(bool value) {
  _internal_set_uses_captured_data(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.uses_captured_data)
}

// optional bool use_default_data = 12;
inline bool CommandSetChartTypeArchive::_internal_has_use_default_data() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_use_default_data() const {
  return _internal_has_use_default_data();
}
inline void CommandSetChartTypeArchive::clear_use_default_data() {
  use_default_data_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSetChartTypeArchive::_internal_use_default_data() const {
  return use_default_data_;
}
inline bool CommandSetChartTypeArchive::use_default_data() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.use_default_data)
  return _internal_use_default_data();
}
inline void CommandSetChartTypeArchive::_internal_set_use_default_data(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_default_data_ = value;
}
inline void CommandSetChartTypeArchive::set_use_default_data(bool value) {
  _internal_set_use_default_data(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.use_default_data)
}

// -------------------------------------------------------------------

// StyleSwapUndoTupleArchive

// optional .TSP.Reference chart_info = 1;
inline bool StyleSwapUndoTupleArchive::_internal_has_chart_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || chart_info_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_chart_info() const {
  return _internal_has_chart_info();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_chart_info() const {
  const ::TSP::Reference* p = chart_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::chart_info() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.chart_info)
  return _internal_chart_info();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_chart_info(
    ::TSP::Reference* chart_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_);
  }
  chart_info_ = chart_info;
  if (chart_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.chart_info)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_chart_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_chart_info() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.chart_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_chart_info() {
  _has_bits_[0] |= 0x00000001u;
  if (chart_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    chart_info_ = p;
  }
  return chart_info_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_chart_info() {
  ::TSP::Reference* _msg = _internal_mutable_chart_info();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.chart_info)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_);
  }
  if (chart_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info));
    if (message_arena != submessage_arena) {
      chart_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chart_info_ = chart_info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.chart_info)
}

// optional .TSCH.StyleSwapType swap_type = 2;
inline bool StyleSwapUndoTupleArchive::_internal_has_swap_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_swap_type() const {
  return _internal_has_swap_type();
}
inline void StyleSwapUndoTupleArchive::clear_swap_type() {
  swap_type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSCH::StyleSwapType StyleSwapUndoTupleArchive::_internal_swap_type() const {
  return static_cast< ::TSCH::StyleSwapType >(swap_type_);
}
inline ::TSCH::StyleSwapType StyleSwapUndoTupleArchive::swap_type() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.swap_type)
  return _internal_swap_type();
}
inline void StyleSwapUndoTupleArchive::_internal_set_swap_type(::TSCH::StyleSwapType value) {
  assert(::TSCH::StyleSwapType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  swap_type_ = value;
}
inline void StyleSwapUndoTupleArchive::set_swap_type(::TSCH::StyleSwapType value) {
  _internal_set_swap_type(value);
  // @@protoc_insertion_point(field_set:TSCH.StyleSwapUndoTupleArchive.swap_type)
}

// optional uint32 index = 3;
inline bool StyleSwapUndoTupleArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_index() const {
  return _internal_has_index();
}
inline void StyleSwapUndoTupleArchive::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleSwapUndoTupleArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleSwapUndoTupleArchive::index() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.index)
  return _internal_index();
}
inline void StyleSwapUndoTupleArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void StyleSwapUndoTupleArchive::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.StyleSwapUndoTupleArchive.index)
}

// optional .TSP.Reference old_value = 4;
inline bool StyleSwapUndoTupleArchive::_internal_has_old_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_value_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_old_value() const {
  const ::TSP::Reference* p = old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::old_value() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.old_value)
  return _internal_old_value();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_old_value(
    ::TSP::Reference* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value_);
  }
  old_value_ = old_value;
  if (old_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.old_value)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_old_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_value_;
  old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.old_value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_value_;
  old_value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_old_value() {
  _has_bits_[0] |= 0x00000002u;
  if (old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_value_ = p;
  }
  return old_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_old_value() {
  ::TSP::Reference* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.old_value)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_old_value(::TSP::Reference* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value_);
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value));
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.old_value)
}

// optional .TSP.Reference new_value = 5;
inline bool StyleSwapUndoTupleArchive::_internal_has_new_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_value_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_new_value() const {
  return _internal_has_new_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_new_value() const {
  const ::TSP::Reference* p = new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::new_value() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.new_value)
  return _internal_new_value();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_new_value(
    ::TSP::Reference* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value_);
  }
  new_value_ = new_value;
  if (new_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.new_value)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_new_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_value_;
  new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.new_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_value_;
  new_value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_new_value() {
  _has_bits_[0] |= 0x00000004u;
  if (new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    new_value_ = p;
  }
  return new_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_new_value() {
  ::TSP::Reference* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.new_value)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_new_value(::TSP::Reference* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value_);
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value));
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.new_value)
}

// optional .TSP.UUID ref_line_uuid = 6;
inline bool StyleSwapUndoTupleArchive::_internal_has_ref_line_uuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ref_line_uuid_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_ref_line_uuid() const {
  return _internal_has_ref_line_uuid();
}
inline const ::TSP::UUID& StyleSwapUndoTupleArchive::_internal_ref_line_uuid() const {
  const ::TSP::UUID* p = ref_line_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& StyleSwapUndoTupleArchive::ref_line_uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.ref_line_uuid)
  return _internal_ref_line_uuid();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_ref_line_uuid(
    ::TSP::UUID* ref_line_uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_line_uuid_);
  }
  ref_line_uuid_ = ref_line_uuid;
  if (ref_line_uuid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.ref_line_uuid)
}
inline ::TSP::UUID* StyleSwapUndoTupleArchive::release_ref_line_uuid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = ref_line_uuid_;
  ref_line_uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* StyleSwapUndoTupleArchive::unsafe_arena_release_ref_line_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.ref_line_uuid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = ref_line_uuid_;
  ref_line_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* StyleSwapUndoTupleArchive::_internal_mutable_ref_line_uuid() {
  _has_bits_[0] |= 0x00000008u;
  if (ref_line_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    ref_line_uuid_ = p;
  }
  return ref_line_uuid_;
}
inline ::TSP::UUID* StyleSwapUndoTupleArchive::mutable_ref_line_uuid() {
  ::TSP::UUID* _msg = _internal_mutable_ref_line_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.ref_line_uuid)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_ref_line_uuid(::TSP::UUID* ref_line_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_line_uuid_);
  }
  if (ref_line_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_line_uuid));
    if (message_arena != submessage_arena) {
      ref_line_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_line_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ref_line_uuid_ = ref_line_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.ref_line_uuid)
}

// -------------------------------------------------------------------

// StyleSwapUndoTuplesArchive

// repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 1;
inline int StyleSwapUndoTuplesArchive::_internal_swap_tuples_size() const {
  return swap_tuples_.size();
}
inline int StyleSwapUndoTuplesArchive::swap_tuples_size() const {
  return _internal_swap_tuples_size();
}
inline void StyleSwapUndoTuplesArchive::clear_swap_tuples() {
  swap_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* StyleSwapUndoTuplesArchive::mutable_swap_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTuplesArchive.swap_tuples)
  return swap_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
StyleSwapUndoTuplesArchive::mutable_swap_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.StyleSwapUndoTuplesArchive.swap_tuples)
  return &swap_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& StyleSwapUndoTuplesArchive::_internal_swap_tuples(int index) const {
  return swap_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& StyleSwapUndoTuplesArchive::swap_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTuplesArchive.swap_tuples)
  return _internal_swap_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* StyleSwapUndoTuplesArchive::_internal_add_swap_tuples() {
  return swap_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* StyleSwapUndoTuplesArchive::add_swap_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_swap_tuples();
  // @@protoc_insertion_point(field_add:TSCH.StyleSwapUndoTuplesArchive.swap_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
StyleSwapUndoTuplesArchive::swap_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.StyleSwapUndoTuplesArchive.swap_tuples)
  return swap_tuples_;
}

// -------------------------------------------------------------------

// CommandStyleSwapArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandStyleSwapArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandStyleSwapArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleSwapArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandStyleSwapArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandStyleSwapArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandStyleSwapArchive.super)
  return _internal_super();
}
inline void CommandStyleSwapArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandStyleSwapArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandStyleSwapArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandStyleSwapArchive.super)
  return _msg;
}
inline void CommandStyleSwapArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandStyleSwapArchive.super)
}

// repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
inline int CommandStyleSwapArchive::_internal_undo_tuples_size() const {
  return undo_tuples_.size();
}
inline int CommandStyleSwapArchive::undo_tuples_size() const {
  return _internal_undo_tuples_size();
}
inline void CommandStyleSwapArchive::clear_undo_tuples() {
  undo_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::mutable_undo_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandStyleSwapArchive.undo_tuples)
  return undo_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandStyleSwapArchive::mutable_undo_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandStyleSwapArchive.undo_tuples)
  return &undo_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandStyleSwapArchive::_internal_undo_tuples(int index) const {
  return undo_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandStyleSwapArchive::undo_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _internal_undo_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::_internal_add_undo_tuples() {
  return undo_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::add_undo_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_undo_tuples();
  // @@protoc_insertion_point(field_add:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandStyleSwapArchive::undo_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandStyleSwapArchive.undo_tuples)
  return undo_tuples_;
}

// -------------------------------------------------------------------

// CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion

// optional .TSCH.Generated.ChartGenericPropertyMapArchive chart_map = 2;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_has_chart_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || chart_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::has_chart_map() const {
  return _internal_has_chart_map();
}
inline const ::TSCH::Generated::ChartGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_chart_map() const {
  const ::TSCH::Generated::ChartGenericPropertyMapArchive* p = chart_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Generated::ChartGenericPropertyMapArchive&>(
      ::TSCH::Generated::_ChartGenericPropertyMapArchive_default_instance_);
}
inline const ::TSCH::Generated::ChartGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::chart_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map)
  return _internal_chart_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_set_allocated_chart_map(
    ::TSCH::Generated::ChartGenericPropertyMapArchive* chart_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_map_);
  }
  chart_map_ = chart_map;
  if (chart_map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map)
}
inline ::TSCH::Generated::ChartGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::release_chart_map() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Generated::ChartGenericPropertyMapArchive* temp = chart_map_;
  chart_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Generated::ChartGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_release_chart_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Generated::ChartGenericPropertyMapArchive* temp = chart_map_;
  chart_map_ = nullptr;
  return temp;
}
inline ::TSCH::Generated::ChartGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_mutable_chart_map() {
  _has_bits_[0] |= 0x00000001u;
  if (chart_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Generated::ChartGenericPropertyMapArchive>(GetArenaForAllocation());
    chart_map_ = p;
  }
  return chart_map_;
}
inline ::TSCH::Generated::ChartGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::mutable_chart_map() {
  ::TSCH::Generated::ChartGenericPropertyMapArchive* _msg = _internal_mutable_chart_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::set_allocated_chart_map(::TSCH::Generated::ChartGenericPropertyMapArchive* chart_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_map_);
  }
  if (chart_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_map));
    if (message_arena != submessage_arena) {
      chart_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chart_map_ = chart_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map)
}

// optional .TSCH.Generated.LegendGenericPropertyMapArchive legend_map = 3;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_has_legend_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || legend_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::has_legend_map() const {
  return _internal_has_legend_map();
}
inline const ::TSCH::Generated::LegendGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_legend_map() const {
  const ::TSCH::Generated::LegendGenericPropertyMapArchive* p = legend_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Generated::LegendGenericPropertyMapArchive&>(
      ::TSCH::Generated::_LegendGenericPropertyMapArchive_default_instance_);
}
inline const ::TSCH::Generated::LegendGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::legend_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map)
  return _internal_legend_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_set_allocated_legend_map(
    ::TSCH::Generated::LegendGenericPropertyMapArchive* legend_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_map_);
  }
  legend_map_ = legend_map;
  if (legend_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map)
}
inline ::TSCH::Generated::LegendGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::release_legend_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Generated::LegendGenericPropertyMapArchive* temp = legend_map_;
  legend_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Generated::LegendGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_release_legend_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Generated::LegendGenericPropertyMapArchive* temp = legend_map_;
  legend_map_ = nullptr;
  return temp;
}
inline ::TSCH::Generated::LegendGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_mutable_legend_map() {
  _has_bits_[0] |= 0x00000002u;
  if (legend_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Generated::LegendGenericPropertyMapArchive>(GetArenaForAllocation());
    legend_map_ = p;
  }
  return legend_map_;
}
inline ::TSCH::Generated::LegendGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::mutable_legend_map() {
  ::TSCH::Generated::LegendGenericPropertyMapArchive* _msg = _internal_mutable_legend_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::set_allocated_legend_map(::TSCH::Generated::LegendGenericPropertyMapArchive* legend_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_map_);
  }
  if (legend_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_map));
    if (message_arena != submessage_arena) {
      legend_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  legend_map_ = legend_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map)
}

// optional .TSCH.Generated.ChartAxisGenericPropertyMapArchive axis_map = 4;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_has_axis_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || axis_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::has_axis_map() const {
  return _internal_has_axis_map();
}
inline const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_axis_map() const {
  const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* p = axis_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive&>(
      ::TSCH::Generated::_ChartAxisGenericPropertyMapArchive_default_instance_);
}
inline const ::TSCH::Generated::ChartAxisGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::axis_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map)
  return _internal_axis_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_set_allocated_axis_map(
    ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* axis_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_map_);
  }
  axis_map_ = axis_map;
  if (axis_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map)
}
inline ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::release_axis_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* temp = axis_map_;
  axis_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_release_axis_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* temp = axis_map_;
  axis_map_ = nullptr;
  return temp;
}
inline ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_mutable_axis_map() {
  _has_bits_[0] |= 0x00000004u;
  if (axis_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Generated::ChartAxisGenericPropertyMapArchive>(GetArenaForAllocation());
    axis_map_ = p;
  }
  return axis_map_;
}
inline ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::mutable_axis_map() {
  ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* _msg = _internal_mutable_axis_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::set_allocated_axis_map(::TSCH::Generated::ChartAxisGenericPropertyMapArchive* axis_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_map_);
  }
  if (axis_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_map));
    if (message_arena != submessage_arena) {
      axis_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  axis_map_ = axis_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map)
}

// optional .TSCH.Generated.ChartSeriesGenericPropertyMapArchive series_map = 5;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_has_series_map() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || series_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::has_series_map() const {
  return _internal_has_series_map();
}
inline const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_series_map() const {
  const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* p = series_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive&>(
      ::TSCH::Generated::_ChartSeriesGenericPropertyMapArchive_default_instance_);
}
inline const ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::series_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map)
  return _internal_series_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_set_allocated_series_map(
    ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* series_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_map_);
  }
  series_map_ = series_map;
  if (series_map) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map)
}
inline ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::release_series_map() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* temp = series_map_;
  series_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_release_series_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* temp = series_map_;
  series_map_ = nullptr;
  return temp;
}
inline ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_mutable_series_map() {
  _has_bits_[0] |= 0x00000008u;
  if (series_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Generated::ChartSeriesGenericPropertyMapArchive>(GetArenaForAllocation());
    series_map_ = p;
  }
  return series_map_;
}
inline ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::mutable_series_map() {
  ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* _msg = _internal_mutable_series_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::set_allocated_series_map(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* series_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_map_);
  }
  if (series_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_map));
    if (message_arena != submessage_arena) {
      series_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  series_map_ = series_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map)
}

// optional .TSCH.Generated.ReferenceLineGenericPropertyMapArchive reference_line_map = 6;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_has_reference_line_map() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || reference_line_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::has_reference_line_map() const {
  return _internal_has_reference_line_map();
}
inline const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_reference_line_map() const {
  const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* p = reference_line_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive&>(
      ::TSCH::Generated::_ReferenceLineGenericPropertyMapArchive_default_instance_);
}
inline const ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive& CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::reference_line_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map)
  return _internal_reference_line_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_set_allocated_reference_line_map(
    ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* reference_line_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_map_);
  }
  reference_line_map_ = reference_line_map;
  if (reference_line_map) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map)
}
inline ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::release_reference_line_map() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* temp = reference_line_map_;
  reference_line_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::unsafe_arena_release_reference_line_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* temp = reference_line_map_;
  reference_line_map_ = nullptr;
  return temp;
}
inline ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::_internal_mutable_reference_line_map() {
  _has_bits_[0] |= 0x00000010u;
  if (reference_line_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Generated::ReferenceLineGenericPropertyMapArchive>(GetArenaForAllocation());
    reference_line_map_ = p;
  }
  return reference_line_map_;
}
inline ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::mutable_reference_line_map() {
  ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* _msg = _internal_mutable_reference_line_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion::set_allocated_reference_line_map(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* reference_line_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_map_);
  }
  if (reference_line_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_map));
    if (message_arena != submessage_arena) {
      reference_line_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reference_line_map_ = reference_line_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map)
}

// -------------------------------------------------------------------

// CommandMutatePropertiesArchive_GenericPropertyDeltaMap

// optional .TSCH.StyleOwnerPath style_owner_path = 1;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_has_style_owner_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || style_owner_path_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::has_style_owner_path() const {
  return _internal_has_style_owner_path();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::clear_style_owner_path() {
  if (style_owner_path_ != nullptr) style_owner_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::StyleOwnerPath& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_style_owner_path() const {
  const ::TSCH::StyleOwnerPath* p = style_owner_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::StyleOwnerPath&>(
      ::TSCH::_StyleOwnerPath_default_instance_);
}
inline const ::TSCH::StyleOwnerPath& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::style_owner_path() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path)
  return _internal_style_owner_path();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_set_allocated_style_owner_path(
    ::TSCH::StyleOwnerPath* style_owner_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_owner_path_);
  }
  style_owner_path_ = style_owner_path;
  if (style_owner_path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path)
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::release_style_owner_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::StyleOwnerPath* temp = style_owner_path_;
  style_owner_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_release_style_owner_path() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::StyleOwnerPath* temp = style_owner_path_;
  style_owner_path_ = nullptr;
  return temp;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_mutable_style_owner_path() {
  _has_bits_[0] |= 0x00000001u;
  if (style_owner_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::StyleOwnerPath>(GetArenaForAllocation());
    style_owner_path_ = p;
  }
  return style_owner_path_;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::mutable_style_owner_path() {
  ::TSCH::StyleOwnerPath* _msg = _internal_mutable_style_owner_path();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::set_allocated_style_owner_path(::TSCH::StyleOwnerPath* style_owner_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_owner_path_;
  }
  if (style_owner_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::StyleOwnerPath>::GetOwningArena(style_owner_path);
    if (message_arena != submessage_arena) {
      style_owner_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_owner_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  style_owner_path_ = style_owner_path;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path)
}

// optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion forward_map = 2;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_has_forward_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || forward_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::has_forward_map() const {
  return _internal_has_forward_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::clear_forward_map() {
  if (forward_map_ != nullptr) forward_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_forward_map() const {
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* p = forward_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&>(
      ::TSCH::_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_);
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::forward_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map)
  return _internal_forward_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_set_allocated_forward_map(
    ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* forward_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_map_);
  }
  forward_map_ = forward_map;
  if (forward_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map)
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::release_forward_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* temp = forward_map_;
  forward_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_release_forward_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* temp = forward_map_;
  forward_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_mutable_forward_map() {
  _has_bits_[0] |= 0x00000002u;
  if (forward_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>(GetArenaForAllocation());
    forward_map_ = p;
  }
  return forward_map_;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::mutable_forward_map() {
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* _msg = _internal_mutable_forward_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::set_allocated_forward_map(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* forward_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete forward_map_;
  }
  if (forward_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>::GetOwningArena(forward_map);
    if (message_arena != submessage_arena) {
      forward_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_map_ = forward_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map)
}

// optional .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion reverse_map = 3;
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_has_reverse_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reverse_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_GenericPropertyDeltaMap::has_reverse_map() const {
  return _internal_has_reverse_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::clear_reverse_map() {
  if (reverse_map_ != nullptr) reverse_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_reverse_map() const {
  const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* p = reverse_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion&>(
      ::TSCH::_CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion_default_instance_);
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion& CommandMutatePropertiesArchive_GenericPropertyDeltaMap::reverse_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map)
  return _internal_reverse_map();
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_set_allocated_reverse_map(
    ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* reverse_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_map_);
  }
  reverse_map_ = reverse_map;
  if (reverse_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map)
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::release_reverse_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* temp = reverse_map_;
  reverse_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::unsafe_arena_release_reverse_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* temp = reverse_map_;
  reverse_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::_internal_mutable_reverse_map() {
  _has_bits_[0] |= 0x00000004u;
  if (reverse_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>(GetArenaForAllocation());
    reverse_map_ = p;
  }
  return reverse_map_;
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* CommandMutatePropertiesArchive_GenericPropertyDeltaMap::mutable_reverse_map() {
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* _msg = _internal_mutable_reverse_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_GenericPropertyDeltaMap::set_allocated_reverse_map(::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion* reverse_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reverse_map_;
  }
  if (reverse_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion>::GetOwningArena(reverse_map);
    if (message_arena != submessage_arena) {
      reverse_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reverse_map_ = reverse_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map)
}

// -------------------------------------------------------------------

// CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive

// optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_has_char_properties() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || char_properties_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::has_char_properties() const {
  return _internal_has_char_properties();
}
inline const ::TSWP::CharacterStylePropertiesArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_char_properties() const {
  const ::TSWP::CharacterStylePropertiesArchive* p = char_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::CharacterStylePropertiesArchive&>(
      ::TSWP::_CharacterStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::CharacterStylePropertiesArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::char_properties() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties)
  return _internal_char_properties();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::unsafe_arena_set_allocated_char_properties(
    ::TSWP::CharacterStylePropertiesArchive* char_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  char_properties_ = char_properties;
  if (char_properties) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties)
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::release_char_properties() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::unsafe_arena_release_char_properties() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_mutable_char_properties() {
  _has_bits_[0] |= 0x00000001u;
  if (char_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(GetArenaForAllocation());
    char_properties_ = p;
  }
  return char_properties_;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::mutable_char_properties() {
  ::TSWP::CharacterStylePropertiesArchive* _msg = _internal_mutable_char_properties();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties)
  return _msg;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  if (char_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties));
    if (message_arena != submessage_arena) {
      char_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  char_properties_ = char_properties;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties)
}

// optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_has_para_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || para_properties_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::has_para_properties() const {
  return _internal_has_para_properties();
}
inline const ::TSWP::ParagraphStylePropertiesArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_para_properties() const {
  const ::TSWP::ParagraphStylePropertiesArchive* p = para_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParagraphStylePropertiesArchive&>(
      ::TSWP::_ParagraphStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ParagraphStylePropertiesArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::para_properties() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties)
  return _internal_para_properties();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::unsafe_arena_set_allocated_para_properties(
    ::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties_);
  }
  para_properties_ = para_properties;
  if (para_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties)
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::release_para_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::unsafe_arena_release_para_properties() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::_internal_mutable_para_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (para_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParagraphStylePropertiesArchive>(GetArenaForAllocation());
    para_properties_ = p;
  }
  return para_properties_;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::mutable_para_properties() {
  ::TSWP::ParagraphStylePropertiesArchive* _msg = _internal_mutable_para_properties();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties)
  return _msg;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive::set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties_);
  }
  if (para_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties));
    if (message_arena != submessage_arena) {
      para_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, para_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  para_properties_ = para_properties;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties)
}

// -------------------------------------------------------------------

// CommandMutatePropertiesArchive_ParagraphStyleDeltaMap

// optional .TSCH.StyleOwnerPath style_owner_path = 1;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_has_style_owner_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || style_owner_path_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::has_style_owner_path() const {
  return _internal_has_style_owner_path();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::clear_style_owner_path() {
  if (style_owner_path_ != nullptr) style_owner_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::StyleOwnerPath& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_style_owner_path() const {
  const ::TSCH::StyleOwnerPath* p = style_owner_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::StyleOwnerPath&>(
      ::TSCH::_StyleOwnerPath_default_instance_);
}
inline const ::TSCH::StyleOwnerPath& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::style_owner_path() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path)
  return _internal_style_owner_path();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_set_allocated_style_owner_path(
    ::TSCH::StyleOwnerPath* style_owner_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_owner_path_);
  }
  style_owner_path_ = style_owner_path;
  if (style_owner_path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path)
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::release_style_owner_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::StyleOwnerPath* temp = style_owner_path_;
  style_owner_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_release_style_owner_path() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::StyleOwnerPath* temp = style_owner_path_;
  style_owner_path_ = nullptr;
  return temp;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_mutable_style_owner_path() {
  _has_bits_[0] |= 0x00000001u;
  if (style_owner_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::StyleOwnerPath>(GetArenaForAllocation());
    style_owner_path_ = p;
  }
  return style_owner_path_;
}
inline ::TSCH::StyleOwnerPath* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::mutable_style_owner_path() {
  ::TSCH::StyleOwnerPath* _msg = _internal_mutable_style_owner_path();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path)
  return _msg;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::set_allocated_style_owner_path(::TSCH::StyleOwnerPath* style_owner_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_owner_path_;
  }
  if (style_owner_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::StyleOwnerPath>::GetOwningArena(style_owner_path);
    if (message_arena != submessage_arena) {
      style_owner_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_owner_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  style_owner_path_ = style_owner_path;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path)
}

// optional uint32 paragraph_style_index_property = 2;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_has_paragraph_style_index_property() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::has_paragraph_style_index_property() const {
  return _internal_has_paragraph_style_index_property();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::clear_paragraph_style_index_property() {
  paragraph_style_index_property_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_paragraph_style_index_property() const {
  return paragraph_style_index_property_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::paragraph_style_index_property() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.paragraph_style_index_property)
  return _internal_paragraph_style_index_property();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  paragraph_style_index_property_ = value;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_style_index_property(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.paragraph_style_index_property)
}

// optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive forward_map = 3;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_has_forward_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || forward_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::has_forward_map() const {
  return _internal_has_forward_map();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::clear_forward_map() {
  if (forward_map_ != nullptr) forward_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_forward_map() const {
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* p = forward_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&>(
      ::TSCH::_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_);
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::forward_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map)
  return _internal_forward_map();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_set_allocated_forward_map(
    ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* forward_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_map_);
  }
  forward_map_ = forward_map;
  if (forward_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map)
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::release_forward_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* temp = forward_map_;
  forward_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_release_forward_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* temp = forward_map_;
  forward_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_mutable_forward_map() {
  _has_bits_[0] |= 0x00000002u;
  if (forward_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>(GetArenaForAllocation());
    forward_map_ = p;
  }
  return forward_map_;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::mutable_forward_map() {
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* _msg = _internal_mutable_forward_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::set_allocated_forward_map(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* forward_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete forward_map_;
  }
  if (forward_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>::GetOwningArena(forward_map);
    if (message_arena != submessage_arena) {
      forward_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_map_ = forward_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map)
}

// optional .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive reverse_map = 4;
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_has_reverse_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reverse_map_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::has_reverse_map() const {
  return _internal_has_reverse_map();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::clear_reverse_map() {
  if (reverse_map_ != nullptr) reverse_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_reverse_map() const {
  const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* p = reverse_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive&>(
      ::TSCH::_CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive_default_instance_);
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive& CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::reverse_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map)
  return _internal_reverse_map();
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_set_allocated_reverse_map(
    ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* reverse_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_map_);
  }
  reverse_map_ = reverse_map;
  if (reverse_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map)
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::release_reverse_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* temp = reverse_map_;
  reverse_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::unsafe_arena_release_reverse_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* temp = reverse_map_;
  reverse_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::_internal_mutable_reverse_map() {
  _has_bits_[0] |= 0x00000004u;
  if (reverse_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>(GetArenaForAllocation());
    reverse_map_ = p;
  }
  return reverse_map_;
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::mutable_reverse_map() {
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* _msg = _internal_mutable_reverse_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map)
  return _msg;
}
inline void CommandMutatePropertiesArchive_ParagraphStyleDeltaMap::set_allocated_reverse_map(::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive* reverse_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reverse_map_;
  }
  if (reverse_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive>::GetOwningArena(reverse_map);
    if (message_arena != submessage_arena) {
      reverse_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reverse_map_ = reverse_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map)
}

// -------------------------------------------------------------------

// CommandMutatePropertiesArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMutatePropertiesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMutatePropertiesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandMutatePropertiesArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandMutatePropertiesArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.super)
  return _internal_super();
}
inline void CommandMutatePropertiesArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandMutatePropertiesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMutatePropertiesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMutatePropertiesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandMutatePropertiesArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.super)
  return _msg;
}
inline void CommandMutatePropertiesArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.super)
}

// optional .TSP.Reference rollback_cmd = 2;
inline bool CommandMutatePropertiesArchive::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandMutatePropertiesArchive::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandMutatePropertiesArchive::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMutatePropertiesArchive::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandMutatePropertiesArchive::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMutatePropertiesArchive.rollback_cmd)
}
inline ::TSP::Reference* CommandMutatePropertiesArchive::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMutatePropertiesArchive::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMutatePropertiesArchive.rollback_cmd)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMutatePropertiesArchive::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000002u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandMutatePropertiesArchive::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.rollback_cmd)
  return _msg;
}
inline void CommandMutatePropertiesArchive::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMutatePropertiesArchive.rollback_cmd)
}

// repeated .TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap generic_property_delta_maps = 3;
inline int CommandMutatePropertiesArchive::_internal_generic_property_delta_maps_size() const {
  return generic_property_delta_maps_.size();
}
inline int CommandMutatePropertiesArchive::generic_property_delta_maps_size() const {
  return _internal_generic_property_delta_maps_size();
}
inline void CommandMutatePropertiesArchive::clear_generic_property_delta_maps() {
  generic_property_delta_maps_.Clear();
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* CommandMutatePropertiesArchive::mutable_generic_property_delta_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps)
  return generic_property_delta_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >*
CommandMutatePropertiesArchive::mutable_generic_property_delta_maps() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps)
  return &generic_property_delta_maps_;
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap& CommandMutatePropertiesArchive::_internal_generic_property_delta_maps(int index) const {
  return generic_property_delta_maps_.Get(index);
}
inline const ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap& CommandMutatePropertiesArchive::generic_property_delta_maps(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps)
  return _internal_generic_property_delta_maps(index);
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* CommandMutatePropertiesArchive::_internal_add_generic_property_delta_maps() {
  return generic_property_delta_maps_.Add();
}
inline ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* CommandMutatePropertiesArchive::add_generic_property_delta_maps() {
  ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap* _add = _internal_add_generic_property_delta_maps();
  // @@protoc_insertion_point(field_add:TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_GenericPropertyDeltaMap >&
CommandMutatePropertiesArchive::generic_property_delta_maps() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps)
  return generic_property_delta_maps_;
}

// repeated .TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap paragraph_style_delta_maps = 4;
inline int CommandMutatePropertiesArchive::_internal_paragraph_style_delta_maps_size() const {
  return paragraph_style_delta_maps_.size();
}
inline int CommandMutatePropertiesArchive::paragraph_style_delta_maps_size() const {
  return _internal_paragraph_style_delta_maps_size();
}
inline void CommandMutatePropertiesArchive::clear_paragraph_style_delta_maps() {
  paragraph_style_delta_maps_.Clear();
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* CommandMutatePropertiesArchive::mutable_paragraph_style_delta_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps)
  return paragraph_style_delta_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >*
CommandMutatePropertiesArchive::mutable_paragraph_style_delta_maps() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps)
  return &paragraph_style_delta_maps_;
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& CommandMutatePropertiesArchive::_internal_paragraph_style_delta_maps(int index) const {
  return paragraph_style_delta_maps_.Get(index);
}
inline const ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap& CommandMutatePropertiesArchive::paragraph_style_delta_maps(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps)
  return _internal_paragraph_style_delta_maps(index);
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* CommandMutatePropertiesArchive::_internal_add_paragraph_style_delta_maps() {
  return paragraph_style_delta_maps_.Add();
}
inline ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* CommandMutatePropertiesArchive::add_paragraph_style_delta_maps() {
  ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap* _add = _internal_add_paragraph_style_delta_maps();
  // @@protoc_insertion_point(field_add:TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandMutatePropertiesArchive_ParagraphStyleDeltaMap >&
CommandMutatePropertiesArchive::paragraph_style_delta_maps() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps)
  return paragraph_style_delta_maps_;
}

// optional bool initiatedOnWeb = 5;
inline bool CommandMutatePropertiesArchive::_internal_has_initiatedonweb() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandMutatePropertiesArchive::has_initiatedonweb() const {
  return _internal_has_initiatedonweb();
}
inline void CommandMutatePropertiesArchive::clear_initiatedonweb() {
  initiatedonweb_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandMutatePropertiesArchive::_internal_initiatedonweb() const {
  return initiatedonweb_;
}
inline bool CommandMutatePropertiesArchive::initiatedonweb() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMutatePropertiesArchive.initiatedOnWeb)
  return _internal_initiatedonweb();
}
inline void CommandMutatePropertiesArchive::_internal_set_initiatedonweb(bool value) {
  _has_bits_[0] |= 0x00000004u;
  initiatedonweb_ = value;
}
inline void CommandMutatePropertiesArchive::set_initiatedonweb(bool value) {
  _internal_set_initiatedonweb(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMutatePropertiesArchive.initiatedOnWeb)
}

// -------------------------------------------------------------------

// CommandScaleAllTextArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandScaleAllTextArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandScaleAllTextArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandScaleAllTextArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandScaleAllTextArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandScaleAllTextArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandScaleAllTextArchive.super)
  return _internal_super();
}
inline void CommandScaleAllTextArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandScaleAllTextArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandScaleAllTextArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandScaleAllTextArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandScaleAllTextArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandScaleAllTextArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandScaleAllTextArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandScaleAllTextArchive.super)
  return _msg;
}
inline void CommandScaleAllTextArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandScaleAllTextArchive.super)
}

// optional .TSP.Reference rollback_cmd = 2;
inline bool CommandScaleAllTextArchive::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandScaleAllTextArchive::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandScaleAllTextArchive::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandScaleAllTextArchive::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandScaleAllTextArchive.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandScaleAllTextArchive::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandScaleAllTextArchive.rollback_cmd)
}
inline ::TSP::Reference* CommandScaleAllTextArchive::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandScaleAllTextArchive::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandScaleAllTextArchive.rollback_cmd)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandScaleAllTextArchive::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000002u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandScaleAllTextArchive::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandScaleAllTextArchive.rollback_cmd)
  return _msg;
}
inline void CommandScaleAllTextArchive::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandScaleAllTextArchive.rollback_cmd)
}

// optional double scale_factor = 3;
inline bool CommandScaleAllTextArchive::_internal_has_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandScaleAllTextArchive::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline void CommandScaleAllTextArchive::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CommandScaleAllTextArchive::_internal_scale_factor() const {
  return scale_factor_;
}
inline double CommandScaleAllTextArchive::scale_factor() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandScaleAllTextArchive.scale_factor)
  return _internal_scale_factor();
}
inline void CommandScaleAllTextArchive::_internal_set_scale_factor(double value) {
  _has_bits_[0] |= 0x00000004u;
  scale_factor_ = value;
}
inline void CommandScaleAllTextArchive::set_scale_factor(double value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandScaleAllTextArchive.scale_factor)
}

// -------------------------------------------------------------------

// CommandSetFontFamilyArchive_StyleSemanticTag

// optional .TSCH.StyleSwapType swap_type = 1;
inline bool CommandSetFontFamilyArchive_StyleSemanticTag::_internal_has_swap_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive_StyleSemanticTag::has_swap_type() const {
  return _internal_has_swap_type();
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::clear_swap_type() {
  swap_type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCH::StyleSwapType CommandSetFontFamilyArchive_StyleSemanticTag::_internal_swap_type() const {
  return static_cast< ::TSCH::StyleSwapType >(swap_type_);
}
inline ::TSCH::StyleSwapType CommandSetFontFamilyArchive_StyleSemanticTag::swap_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag.swap_type)
  return _internal_swap_type();
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::_internal_set_swap_type(::TSCH::StyleSwapType value) {
  assert(::TSCH::StyleSwapType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  swap_type_ = value;
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::set_swap_type(::TSCH::StyleSwapType value) {
  _internal_set_swap_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag.swap_type)
}

// optional uint32 index = 2;
inline bool CommandSetFontFamilyArchive_StyleSemanticTag::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive_StyleSemanticTag::has_index() const {
  return _internal_has_index();
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetFontFamilyArchive_StyleSemanticTag::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetFontFamilyArchive_StyleSemanticTag::index() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag.index)
  return _internal_index();
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void CommandSetFontFamilyArchive_StyleSemanticTag::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.StyleSemanticTag.index)
}

// -------------------------------------------------------------------

// CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive

// optional .TSWP.CharacterStylePropertiesArchive char_properties = 1;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_has_char_properties() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || char_properties_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::has_char_properties() const {
  return _internal_has_char_properties();
}
inline const ::TSWP::CharacterStylePropertiesArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_char_properties() const {
  const ::TSWP::CharacterStylePropertiesArchive* p = char_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::CharacterStylePropertiesArchive&>(
      ::TSWP::_CharacterStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::CharacterStylePropertiesArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::char_properties() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties)
  return _internal_char_properties();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::unsafe_arena_set_allocated_char_properties(
    ::TSWP::CharacterStylePropertiesArchive* char_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  char_properties_ = char_properties;
  if (char_properties) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties)
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::release_char_properties() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::unsafe_arena_release_char_properties() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::CharacterStylePropertiesArchive* temp = char_properties_;
  char_properties_ = nullptr;
  return temp;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_mutable_char_properties() {
  _has_bits_[0] |= 0x00000001u;
  if (char_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::CharacterStylePropertiesArchive>(GetArenaForAllocation());
    char_properties_ = p;
  }
  return char_properties_;
}
inline ::TSWP::CharacterStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::mutable_char_properties() {
  ::TSWP::CharacterStylePropertiesArchive* _msg = _internal_mutable_char_properties();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties)
  return _msg;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::set_allocated_char_properties(::TSWP::CharacterStylePropertiesArchive* char_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties_);
  }
  if (char_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(char_properties));
    if (message_arena != submessage_arena) {
      char_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  char_properties_ = char_properties;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties)
}

// optional .TSWP.ParagraphStylePropertiesArchive para_properties = 2;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_has_para_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || para_properties_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::has_para_properties() const {
  return _internal_has_para_properties();
}
inline const ::TSWP::ParagraphStylePropertiesArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_para_properties() const {
  const ::TSWP::ParagraphStylePropertiesArchive* p = para_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ParagraphStylePropertiesArchive&>(
      ::TSWP::_ParagraphStylePropertiesArchive_default_instance_);
}
inline const ::TSWP::ParagraphStylePropertiesArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::para_properties() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties)
  return _internal_para_properties();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::unsafe_arena_set_allocated_para_properties(
    ::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties_);
  }
  para_properties_ = para_properties;
  if (para_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties)
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::release_para_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::unsafe_arena_release_para_properties() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::ParagraphStylePropertiesArchive* temp = para_properties_;
  para_properties_ = nullptr;
  return temp;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::_internal_mutable_para_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (para_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ParagraphStylePropertiesArchive>(GetArenaForAllocation());
    para_properties_ = p;
  }
  return para_properties_;
}
inline ::TSWP::ParagraphStylePropertiesArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::mutable_para_properties() {
  ::TSWP::ParagraphStylePropertiesArchive* _msg = _internal_mutable_para_properties();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties)
  return _msg;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive::set_allocated_para_properties(::TSWP::ParagraphStylePropertiesArchive* para_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties_);
  }
  if (para_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_properties));
    if (message_arena != submessage_arena) {
      para_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, para_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  para_properties_ = para_properties;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties)
}

// -------------------------------------------------------------------

// CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap

// optional .TSCH.CommandSetFontFamilyArchive.StyleSemanticTag style_semantic_tag = 1;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_has_style_semantic_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || style_semantic_tag_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::has_style_semantic_tag() const {
  return _internal_has_style_semantic_tag();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::clear_style_semantic_tag() {
  if (style_semantic_tag_ != nullptr) style_semantic_tag_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_style_semantic_tag() const {
  const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* p = style_semantic_tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag&>(
      ::TSCH::_CommandSetFontFamilyArchive_StyleSemanticTag_default_instance_);
}
inline const ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::style_semantic_tag() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag)
  return _internal_style_semantic_tag();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_set_allocated_style_semantic_tag(
    ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* style_semantic_tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_semantic_tag_);
  }
  style_semantic_tag_ = style_semantic_tag;
  if (style_semantic_tag) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag)
}
inline ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::release_style_semantic_tag() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* temp = style_semantic_tag_;
  style_semantic_tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_release_style_semantic_tag() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* temp = style_semantic_tag_;
  style_semantic_tag_ = nullptr;
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_mutable_style_semantic_tag() {
  _has_bits_[0] |= 0x00000001u;
  if (style_semantic_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag>(GetArenaForAllocation());
    style_semantic_tag_ = p;
  }
  return style_semantic_tag_;
}
inline ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::mutable_style_semantic_tag() {
  ::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* _msg = _internal_mutable_style_semantic_tag();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag)
  return _msg;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::set_allocated_style_semantic_tag(::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag* style_semantic_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_semantic_tag_;
  }
  if (style_semantic_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandSetFontFamilyArchive_StyleSemanticTag>::GetOwningArena(style_semantic_tag);
    if (message_arena != submessage_arena) {
      style_semantic_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_semantic_tag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  style_semantic_tag_ = style_semantic_tag;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag)
}

// optional uint32 paragraph_style_index_property = 2;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_has_paragraph_style_index_property() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::has_paragraph_style_index_property() const {
  return _internal_has_paragraph_style_index_property();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::clear_paragraph_style_index_property() {
  paragraph_style_index_property_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_paragraph_style_index_property() const {
  return paragraph_style_index_property_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::paragraph_style_index_property() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.paragraph_style_index_property)
  return _internal_paragraph_style_index_property();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  paragraph_style_index_property_ = value;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::set_paragraph_style_index_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paragraph_style_index_property(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.paragraph_style_index_property)
}

// optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive forward_map = 3;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_has_forward_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || forward_map_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::has_forward_map() const {
  return _internal_has_forward_map();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::clear_forward_map() {
  if (forward_map_ != nullptr) forward_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_forward_map() const {
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* p = forward_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&>(
      ::TSCH::_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_);
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::forward_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map)
  return _internal_forward_map();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_set_allocated_forward_map(
    ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* forward_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_map_);
  }
  forward_map_ = forward_map;
  if (forward_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map)
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::release_forward_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* temp = forward_map_;
  forward_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_release_forward_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* temp = forward_map_;
  forward_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_mutable_forward_map() {
  _has_bits_[0] |= 0x00000002u;
  if (forward_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>(GetArenaForAllocation());
    forward_map_ = p;
  }
  return forward_map_;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::mutable_forward_map() {
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* _msg = _internal_mutable_forward_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map)
  return _msg;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::set_allocated_forward_map(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* forward_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete forward_map_;
  }
  if (forward_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>::GetOwningArena(forward_map);
    if (message_arena != submessage_arena) {
      forward_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_map_ = forward_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map)
}

// optional .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive reverse_map = 4;
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_has_reverse_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reverse_map_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::has_reverse_map() const {
  return _internal_has_reverse_map();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::clear_reverse_map() {
  if (reverse_map_ != nullptr) reverse_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_reverse_map() const {
  const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* p = reverse_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive&>(
      ::TSCH::_CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive_default_instance_);
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive& CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::reverse_map() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map)
  return _internal_reverse_map();
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_set_allocated_reverse_map(
    ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* reverse_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_map_);
  }
  reverse_map_ = reverse_map;
  if (reverse_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map)
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::release_reverse_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* temp = reverse_map_;
  reverse_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::unsafe_arena_release_reverse_map() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* temp = reverse_map_;
  reverse_map_ = nullptr;
  return temp;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::_internal_mutable_reverse_map() {
  _has_bits_[0] |= 0x00000004u;
  if (reverse_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>(GetArenaForAllocation());
    reverse_map_ = p;
  }
  return reverse_map_;
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::mutable_reverse_map() {
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* _msg = _internal_mutable_reverse_map();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map)
  return _msg;
}
inline void CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap::set_allocated_reverse_map(::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive* reverse_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reverse_map_;
  }
  if (reverse_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive>::GetOwningArena(reverse_map);
    if (message_arena != submessage_arena) {
      reverse_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reverse_map_ = reverse_map;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map)
}

// -------------------------------------------------------------------

// CommandSetFontFamilyArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetFontFamilyArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFontFamilyArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetFontFamilyArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetFontFamilyArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.super)
  return _internal_super();
}
inline void CommandSetFontFamilyArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetFontFamilyArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetFontFamilyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetFontFamilyArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetFontFamilyArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.super)
  return _msg;
}
inline void CommandSetFontFamilyArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.super)
}

// optional .TSP.Reference rollback_cmd = 2;
inline bool CommandSetFontFamilyArchive::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandSetFontFamilyArchive::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandSetFontFamilyArchive::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetFontFamilyArchive::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandSetFontFamilyArchive::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetFontFamilyArchive.rollback_cmd)
}
inline ::TSP::Reference* CommandSetFontFamilyArchive::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetFontFamilyArchive::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.rollback_cmd)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetFontFamilyArchive::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000008u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandSetFontFamilyArchive::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.rollback_cmd)
  return _msg;
}
inline void CommandSetFontFamilyArchive::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.rollback_cmd)
}

// optional string new_font_family = 3;
inline bool CommandSetFontFamilyArchive::_internal_has_new_font_family() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive::has_new_font_family() const {
  return _internal_has_new_font_family();
}
inline void CommandSetFontFamilyArchive::clear_new_font_family() {
  new_font_family_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetFontFamilyArchive::new_font_family() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.new_font_family)
  return _internal_new_font_family();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetFontFamilyArchive::set_new_font_family(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 new_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.new_font_family)
}
inline std::string* CommandSetFontFamilyArchive::mutable_new_font_family() {
  std::string* _s = _internal_mutable_new_font_family();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.new_font_family)
  return _s;
}
inline const std::string& CommandSetFontFamilyArchive::_internal_new_font_family() const {
  return new_font_family_.Get();
}
inline void CommandSetFontFamilyArchive::_internal_set_new_font_family(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  new_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetFontFamilyArchive::_internal_mutable_new_font_family() {
  _has_bits_[0] |= 0x00000001u;
  return new_font_family_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetFontFamilyArchive::release_new_font_family() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.new_font_family)
  if (!_internal_has_new_font_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return new_font_family_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetFontFamilyArchive::set_allocated_new_font_family(std::string* new_font_family) {
  if (new_font_family != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_font_family_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_font_family,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.new_font_family)
}

// optional string old_font_family = 4;
inline bool CommandSetFontFamilyArchive::_internal_has_old_font_family() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive::has_old_font_family() const {
  return _internal_has_old_font_family();
}
inline void CommandSetFontFamilyArchive::clear_old_font_family() {
  old_font_family_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetFontFamilyArchive::old_font_family() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.old_font_family)
  return _internal_old_font_family();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetFontFamilyArchive::set_old_font_family(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.old_font_family)
}
inline std::string* CommandSetFontFamilyArchive::mutable_old_font_family() {
  std::string* _s = _internal_mutable_old_font_family();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.old_font_family)
  return _s;
}
inline const std::string& CommandSetFontFamilyArchive::_internal_old_font_family() const {
  return old_font_family_.Get();
}
inline void CommandSetFontFamilyArchive::_internal_set_old_font_family(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetFontFamilyArchive::_internal_mutable_old_font_family() {
  _has_bits_[0] |= 0x00000002u;
  return old_font_family_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetFontFamilyArchive::release_old_font_family() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetFontFamilyArchive.old_font_family)
  if (!_internal_has_old_font_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return old_font_family_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetFontFamilyArchive::set_allocated_old_font_family(std::string* old_font_family) {
  if (old_font_family != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_font_family_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_font_family,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetFontFamilyArchive.old_font_family)
}

// repeated .TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap paragraph_style_delta_maps = 5;
inline int CommandSetFontFamilyArchive::_internal_paragraph_style_delta_maps_size() const {
  return paragraph_style_delta_maps_.size();
}
inline int CommandSetFontFamilyArchive::paragraph_style_delta_maps_size() const {
  return _internal_paragraph_style_delta_maps_size();
}
inline void CommandSetFontFamilyArchive::clear_paragraph_style_delta_maps() {
  paragraph_style_delta_maps_.Clear();
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* CommandSetFontFamilyArchive::mutable_paragraph_style_delta_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps)
  return paragraph_style_delta_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >*
CommandSetFontFamilyArchive::mutable_paragraph_style_delta_maps() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps)
  return &paragraph_style_delta_maps_;
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& CommandSetFontFamilyArchive::_internal_paragraph_style_delta_maps(int index) const {
  return paragraph_style_delta_maps_.Get(index);
}
inline const ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap& CommandSetFontFamilyArchive::paragraph_style_delta_maps(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps)
  return _internal_paragraph_style_delta_maps(index);
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* CommandSetFontFamilyArchive::_internal_add_paragraph_style_delta_maps() {
  return paragraph_style_delta_maps_.Add();
}
inline ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* CommandSetFontFamilyArchive::add_paragraph_style_delta_maps() {
  ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap* _add = _internal_add_paragraph_style_delta_maps();
  // @@protoc_insertion_point(field_add:TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap >&
CommandSetFontFamilyArchive::paragraph_style_delta_maps() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps)
  return paragraph_style_delta_maps_;
}

// required bool is_bold = 6;
inline bool CommandSetFontFamilyArchive::_internal_has_is_bold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive::has_is_bold() const {
  return _internal_has_is_bold();
}
inline void CommandSetFontFamilyArchive::clear_is_bold() {
  is_bold_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetFontFamilyArchive::_internal_is_bold() const {
  return is_bold_;
}
inline bool CommandSetFontFamilyArchive::is_bold() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.is_bold)
  return _internal_is_bold();
}
inline void CommandSetFontFamilyArchive::_internal_set_is_bold(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_bold_ = value;
}
inline void CommandSetFontFamilyArchive::set_is_bold(bool value) {
  _internal_set_is_bold(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.is_bold)
}

// required bool is_italic = 7;
inline bool CommandSetFontFamilyArchive::_internal_has_is_italic() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetFontFamilyArchive::has_is_italic() const {
  return _internal_has_is_italic();
}
inline void CommandSetFontFamilyArchive::clear_is_italic() {
  is_italic_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSetFontFamilyArchive::_internal_is_italic() const {
  return is_italic_;
}
inline bool CommandSetFontFamilyArchive::is_italic() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetFontFamilyArchive.is_italic)
  return _internal_is_italic();
}
inline void CommandSetFontFamilyArchive::_internal_set_is_italic(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_italic_ = value;
}
inline void CommandSetFontFamilyArchive::set_is_italic(bool value) {
  _internal_set_is_italic(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetFontFamilyArchive.is_italic)
}

// -------------------------------------------------------------------

// CommandApplyFillSetArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandApplyFillSetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandApplyFillSetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyFillSetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::ChartCommandArchive& CommandApplyFillSetArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandApplyFillSetArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.super)
  return _internal_super();
}
inline void CommandApplyFillSetArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandApplyFillSetArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandApplyFillSetArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandApplyFillSetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandApplyFillSetArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandApplyFillSetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandApplyFillSetArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandApplyFillSetArchive.super)
  return _msg;
}
inline void CommandApplyFillSetArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandApplyFillSetArchive.super)
}

// required .TSCH.ChartType chart_type = 2;
inline bool CommandApplyFillSetArchive::_internal_has_chart_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandApplyFillSetArchive::has_chart_type() const {
  return _internal_has_chart_type();
}
inline void CommandApplyFillSetArchive::clear_chart_type() {
  chart_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSCH::ChartType CommandApplyFillSetArchive::_internal_chart_type() const {
  return static_cast< ::TSCH::ChartType >(chart_type_);
}
inline ::TSCH::ChartType CommandApplyFillSetArchive::chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.chart_type)
  return _internal_chart_type();
}
inline void CommandApplyFillSetArchive::_internal_set_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  chart_type_ = value;
}
inline void CommandApplyFillSetArchive::set_chart_type(::TSCH::ChartType value) {
  _internal_set_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandApplyFillSetArchive.chart_type)
}

// required .TSCH.ChartFillSetArchive fill_set = 3;
inline bool CommandApplyFillSetArchive::_internal_has_fill_set() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fill_set_ != nullptr);
  return value;
}
inline bool CommandApplyFillSetArchive::has_fill_set() const {
  return _internal_has_fill_set();
}
inline const ::TSCH::ChartFillSetArchive& CommandApplyFillSetArchive::_internal_fill_set() const {
  const ::TSCH::ChartFillSetArchive* p = fill_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartFillSetArchive&>(
      ::TSCH::_ChartFillSetArchive_default_instance_);
}
inline const ::TSCH::ChartFillSetArchive& CommandApplyFillSetArchive::fill_set() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.fill_set)
  return _internal_fill_set();
}
inline void CommandApplyFillSetArchive::unsafe_arena_set_allocated_fill_set(
    ::TSCH::ChartFillSetArchive* fill_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_set_);
  }
  fill_set_ = fill_set;
  if (fill_set) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandApplyFillSetArchive.fill_set)
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::release_fill_set() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartFillSetArchive* temp = fill_set_;
  fill_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::unsafe_arena_release_fill_set() {
  // @@protoc_insertion_point(field_release:TSCH.CommandApplyFillSetArchive.fill_set)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartFillSetArchive* temp = fill_set_;
  fill_set_ = nullptr;
  return temp;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::_internal_mutable_fill_set() {
  _has_bits_[0] |= 0x00000004u;
  if (fill_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartFillSetArchive>(GetArenaForAllocation());
    fill_set_ = p;
  }
  return fill_set_;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::mutable_fill_set() {
  ::TSCH::ChartFillSetArchive* _msg = _internal_mutable_fill_set();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandApplyFillSetArchive.fill_set)
  return _msg;
}
inline void CommandApplyFillSetArchive::set_allocated_fill_set(::TSCH::ChartFillSetArchive* fill_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_set_);
  }
  if (fill_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_set));
    if (message_arena != submessage_arena) {
      fill_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fill_set_ = fill_set;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandApplyFillSetArchive.fill_set)
}

// optional .TSCH.ChartFillSetArchive old_fill_set = 4;
inline bool CommandApplyFillSetArchive::_internal_has_old_fill_set() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_fill_set_ != nullptr);
  return value;
}
inline bool CommandApplyFillSetArchive::has_old_fill_set() const {
  return _internal_has_old_fill_set();
}
inline const ::TSCH::ChartFillSetArchive& CommandApplyFillSetArchive::_internal_old_fill_set() const {
  const ::TSCH::ChartFillSetArchive* p = old_fill_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartFillSetArchive&>(
      ::TSCH::_ChartFillSetArchive_default_instance_);
}
inline const ::TSCH::ChartFillSetArchive& CommandApplyFillSetArchive::old_fill_set() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.old_fill_set)
  return _internal_old_fill_set();
}
inline void CommandApplyFillSetArchive::unsafe_arena_set_allocated_old_fill_set(
    ::TSCH::ChartFillSetArchive* old_fill_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_set_);
  }
  old_fill_set_ = old_fill_set;
  if (old_fill_set) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandApplyFillSetArchive.old_fill_set)
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::release_old_fill_set() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartFillSetArchive* temp = old_fill_set_;
  old_fill_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::unsafe_arena_release_old_fill_set() {
  // @@protoc_insertion_point(field_release:TSCH.CommandApplyFillSetArchive.old_fill_set)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartFillSetArchive* temp = old_fill_set_;
  old_fill_set_ = nullptr;
  return temp;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::_internal_mutable_old_fill_set() {
  _has_bits_[0] |= 0x00000008u;
  if (old_fill_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartFillSetArchive>(GetArenaForAllocation());
    old_fill_set_ = p;
  }
  return old_fill_set_;
}
inline ::TSCH::ChartFillSetArchive* CommandApplyFillSetArchive::mutable_old_fill_set() {
  ::TSCH::ChartFillSetArchive* _msg = _internal_mutable_old_fill_set();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandApplyFillSetArchive.old_fill_set)
  return _msg;
}
inline void CommandApplyFillSetArchive::set_allocated_old_fill_set(::TSCH::ChartFillSetArchive* old_fill_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_set_);
  }
  if (old_fill_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_set));
    if (message_arena != submessage_arena) {
      old_fill_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_fill_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_fill_set_ = old_fill_set;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandApplyFillSetArchive.old_fill_set)
}

// optional string prior_last_applied_fill_set_lookup_string = 5;
inline bool CommandApplyFillSetArchive::_internal_has_prior_last_applied_fill_set_lookup_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandApplyFillSetArchive::has_prior_last_applied_fill_set_lookup_string() const {
  return _internal_has_prior_last_applied_fill_set_lookup_string();
}
inline void CommandApplyFillSetArchive::clear_prior_last_applied_fill_set_lookup_string() {
  prior_last_applied_fill_set_lookup_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandApplyFillSetArchive::prior_last_applied_fill_set_lookup_string() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string)
  return _internal_prior_last_applied_fill_set_lookup_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandApplyFillSetArchive::set_prior_last_applied_fill_set_lookup_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 prior_last_applied_fill_set_lookup_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string)
}
inline std::string* CommandApplyFillSetArchive::mutable_prior_last_applied_fill_set_lookup_string() {
  std::string* _s = _internal_mutable_prior_last_applied_fill_set_lookup_string();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string)
  return _s;
}
inline const std::string& CommandApplyFillSetArchive::_internal_prior_last_applied_fill_set_lookup_string() const {
  return prior_last_applied_fill_set_lookup_string_.Get();
}
inline void CommandApplyFillSetArchive::_internal_set_prior_last_applied_fill_set_lookup_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prior_last_applied_fill_set_lookup_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandApplyFillSetArchive::_internal_mutable_prior_last_applied_fill_set_lookup_string() {
  _has_bits_[0] |= 0x00000001u;
  return prior_last_applied_fill_set_lookup_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandApplyFillSetArchive::release_prior_last_applied_fill_set_lookup_string() {
  // @@protoc_insertion_point(field_release:TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string)
  if (!_internal_has_prior_last_applied_fill_set_lookup_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prior_last_applied_fill_set_lookup_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandApplyFillSetArchive::set_allocated_prior_last_applied_fill_set_lookup_string(std::string* prior_last_applied_fill_set_lookup_string) {
  if (prior_last_applied_fill_set_lookup_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prior_last_applied_fill_set_lookup_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prior_last_applied_fill_set_lookup_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandApplyFillSetArchive.prior_last_applied_fill_set_lookup_string)
}

// optional .TSP.Reference rollback_cmd = 6;
inline bool CommandApplyFillSetArchive::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandApplyFillSetArchive::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandApplyFillSetArchive::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyFillSetArchive::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandApplyFillSetArchive.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandApplyFillSetArchive::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandApplyFillSetArchive.rollback_cmd)
}
inline ::TSP::Reference* CommandApplyFillSetArchive::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyFillSetArchive::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandApplyFillSetArchive.rollback_cmd)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyFillSetArchive::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000010u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandApplyFillSetArchive::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandApplyFillSetArchive.rollback_cmd)
  return _msg;
}
inline void CommandApplyFillSetArchive::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandApplyFillSetArchive.rollback_cmd)
}

// -------------------------------------------------------------------

// CommandSetSeriesNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesNameArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetSeriesNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSeriesNameArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesNameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.super)
  return _internal_super();
}
inline void CommandSetSeriesNameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetSeriesNameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.super)
  return _msg;
}
inline void CommandSetSeriesNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.super)
}

// required uint32 seriesIndex = 2;
inline bool CommandSetSeriesNameArchive::_internal_has_seriesindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_seriesindex() const {
  return _internal_has_seriesindex();
}
inline void CommandSetSeriesNameArchive::clear_seriesindex() {
  seriesindex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesNameArchive::_internal_seriesindex() const {
  return seriesindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesNameArchive::seriesindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.seriesIndex)
  return _internal_seriesindex();
}
inline void CommandSetSeriesNameArchive::_internal_set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seriesindex_ = value;
}
inline void CommandSetSeriesNameArchive::set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seriesindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.seriesIndex)
}

// optional string oldName = 3;
inline bool CommandSetSeriesNameArchive::_internal_has_oldname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetSeriesNameArchive::clear_oldname() {
  oldname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetSeriesNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.oldName)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSeriesNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.oldName)
}
inline std::string* CommandSetSeriesNameArchive::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.oldName)
  return _s;
}
inline const std::string& CommandSetSeriesNameArchive::_internal_oldname() const {
  return oldname_.Get();
}
inline void CommandSetSeriesNameArchive::_internal_set_oldname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::_internal_mutable_oldname() {
  _has_bits_[0] |= 0x00000001u;
  return oldname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.oldName)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oldname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetSeriesNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.oldName)
}

// required string newName = 4;
inline bool CommandSetSeriesNameArchive::_internal_has_newname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetSeriesNameArchive::clear_newname() {
  newname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetSeriesNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSeriesNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.newName)
}
inline std::string* CommandSetSeriesNameArchive::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.newName)
  return _s;
}
inline const std::string& CommandSetSeriesNameArchive::_internal_newname() const {
  return newname_.Get();
}
inline void CommandSetSeriesNameArchive::_internal_set_newname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::_internal_mutable_newname() {
  _has_bits_[0] |= 0x00000002u;
  return newname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.newName)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return newname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetSeriesNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.newName)
}

// -------------------------------------------------------------------

// CommandSetCategoryNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetCategoryNameArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetCategoryNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetCategoryNameArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetCategoryNameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetCategoryNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.super)
  return _internal_super();
}
inline void CommandSetCategoryNameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetCategoryNameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.super)
  return _msg;
}
inline void CommandSetCategoryNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.super)
}

// required uint32 categoryIndex = 2;
inline bool CommandSetCategoryNameArchive::_internal_has_categoryindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_categoryindex() const {
  return _internal_has_categoryindex();
}
inline void CommandSetCategoryNameArchive::clear_categoryindex() {
  categoryindex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetCategoryNameArchive::_internal_categoryindex() const {
  return categoryindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetCategoryNameArchive::categoryindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.categoryIndex)
  return _internal_categoryindex();
}
inline void CommandSetCategoryNameArchive::_internal_set_categoryindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  categoryindex_ = value;
}
inline void CommandSetCategoryNameArchive::set_categoryindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_categoryindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.categoryIndex)
}

// optional string oldName = 3;
inline bool CommandSetCategoryNameArchive::_internal_has_oldname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetCategoryNameArchive::clear_oldname() {
  oldname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetCategoryNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.oldName)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCategoryNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.oldName)
}
inline std::string* CommandSetCategoryNameArchive::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.oldName)
  return _s;
}
inline const std::string& CommandSetCategoryNameArchive::_internal_oldname() const {
  return oldname_.Get();
}
inline void CommandSetCategoryNameArchive::_internal_set_oldname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::_internal_mutable_oldname() {
  _has_bits_[0] |= 0x00000001u;
  return oldname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.oldName)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oldname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetCategoryNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.oldName)
}

// required string newName = 4;
inline bool CommandSetCategoryNameArchive::_internal_has_newname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetCategoryNameArchive::clear_newname() {
  newname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetCategoryNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCategoryNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.newName)
}
inline std::string* CommandSetCategoryNameArchive::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.newName)
  return _s;
}
inline const std::string& CommandSetCategoryNameArchive::_internal_newname() const {
  return newname_.Get();
}
inline void CommandSetCategoryNameArchive::_internal_set_newname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::_internal_mutable_newname() {
  _has_bits_[0] |= 0x00000002u;
  return newname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.newName)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return newname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetCategoryNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.newName)
}

// optional bool isMultiDataIndex = 5;
inline bool CommandSetCategoryNameArchive::_internal_has_ismultidataindex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_ismultidataindex() const {
  return _internal_has_ismultidataindex();
}
inline void CommandSetCategoryNameArchive::clear_ismultidataindex() {
  ismultidataindex_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetCategoryNameArchive::_internal_ismultidataindex() const {
  return ismultidataindex_;
}
inline bool CommandSetCategoryNameArchive::ismultidataindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.isMultiDataIndex)
  return _internal_ismultidataindex();
}
inline void CommandSetCategoryNameArchive::_internal_set_ismultidataindex(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ismultidataindex_ = value;
}
inline void CommandSetCategoryNameArchive::set_ismultidataindex(bool value) {
  _internal_set_ismultidataindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.isMultiDataIndex)
}

// -------------------------------------------------------------------

// CommandAddGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridRowsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandAddGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddGridRowsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.super)
  return _internal_super();
}
inline void CommandAddGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridRowsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.super)
  return _msg;
}
inline void CommandAddGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridRowsArchive.super)
}

// optional .TSP.UUID row_id = 2;
inline bool CommandAddGridRowsArchive::_internal_has_row_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || row_id_ != nullptr);
  return value;
}
inline bool CommandAddGridRowsArchive::has_row_id() const {
  return _internal_has_row_id();
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::_internal_row_id() const {
  const ::TSP::UUID* p = row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.row_id)
  return _internal_row_id();
}
inline void CommandAddGridRowsArchive::unsafe_arena_set_allocated_row_id(
    ::TSP::UUID* row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_id_);
  }
  row_id_ = row_id;
  if (row_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridRowsArchive.row_id)
}
inline ::TSP::UUID* CommandAddGridRowsArchive::release_row_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = row_id_;
  row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::unsafe_arena_release_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridRowsArchive.row_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = row_id_;
  row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::_internal_mutable_row_id() {
  _has_bits_[0] |= 0x00000002u;
  if (row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    row_id_ = p;
  }
  return row_id_;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::mutable_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.row_id)
  return _msg;
}
inline void CommandAddGridRowsArchive::set_allocated_row_id(::TSP::UUID* row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_id_);
  }
  if (row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_id));
    if (message_arena != submessage_arena) {
      row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  row_id_ = row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridRowsArchive.row_id)
}

// repeated .TSP.UUID row_id_list = 3;
inline int CommandAddGridRowsArchive::_internal_row_id_list_size() const {
  return row_id_list_.size();
}
inline int CommandAddGridRowsArchive::row_id_list_size() const {
  return _internal_row_id_list_size();
}
inline ::TSP::UUID* CommandAddGridRowsArchive::mutable_row_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.row_id_list)
  return row_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandAddGridRowsArchive::mutable_row_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridRowsArchive.row_id_list)
  return &row_id_list_;
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::_internal_row_id_list(int index) const {
  return row_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::row_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.row_id_list)
  return _internal_row_id_list(index);
}
inline ::TSP::UUID* CommandAddGridRowsArchive::_internal_add_row_id_list() {
  return row_id_list_.Add();
}
inline ::TSP::UUID* CommandAddGridRowsArchive::add_row_id_list() {
  ::TSP::UUID* _add = _internal_add_row_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridRowsArchive.row_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandAddGridRowsArchive::row_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridRowsArchive.row_id_list)
  return row_id_list_;
}

// repeated string row_name_list = 4;
inline int CommandAddGridRowsArchive::_internal_row_name_list_size() const {
  return row_name_list_.size();
}
inline int CommandAddGridRowsArchive::row_name_list_size() const {
  return _internal_row_name_list_size();
}
inline void CommandAddGridRowsArchive::clear_row_name_list() {
  row_name_list_.Clear();
}
inline std::string* CommandAddGridRowsArchive::add_row_name_list() {
  std::string* _s = _internal_add_row_name_list();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandAddGridRowsArchive.row_name_list)
  return _s;
}
inline const std::string& CommandAddGridRowsArchive::_internal_row_name_list(int index) const {
  return row_name_list_.Get(index);
}
inline const std::string& CommandAddGridRowsArchive::row_name_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.row_name_list)
  return _internal_row_name_list(index);
}
inline std::string* CommandAddGridRowsArchive::mutable_row_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.row_name_list)
  return row_name_list_.Mutable(index);
}
inline void CommandAddGridRowsArchive::set_row_name_list(int index, const std::string& value) {
  row_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::set_row_name_list(int index, std::string&& value) {
  row_name_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::set_row_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::set_row_name_list(int index, const char* value, size_t size) {
  row_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline std::string* CommandAddGridRowsArchive::_internal_add_row_name_list() {
  return row_name_list_.Add();
}
inline void CommandAddGridRowsArchive::add_row_name_list(const std::string& value) {
  row_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::add_row_name_list(std::string&& value) {
  row_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::add_row_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline void CommandAddGridRowsArchive::add_row_name_list(const char* value, size_t size) {
  row_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandAddGridRowsArchive.row_name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandAddGridRowsArchive::row_name_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridRowsArchive.row_name_list)
  return row_name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandAddGridRowsArchive::mutable_row_name_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridRowsArchive.row_name_list)
  return &row_name_list_;
}

// optional .TSP.UUID undo_deletion_start_id = 5;
inline bool CommandAddGridRowsArchive::_internal_has_undo_deletion_start_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_deletion_start_id_ != nullptr);
  return value;
}
inline bool CommandAddGridRowsArchive::has_undo_deletion_start_id() const {
  return _internal_has_undo_deletion_start_id();
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::_internal_undo_deletion_start_id() const {
  const ::TSP::UUID* p = undo_deletion_start_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::undo_deletion_start_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.undo_deletion_start_id)
  return _internal_undo_deletion_start_id();
}
inline void CommandAddGridRowsArchive::unsafe_arena_set_allocated_undo_deletion_start_id(
    ::TSP::UUID* undo_deletion_start_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id_);
  }
  undo_deletion_start_id_ = undo_deletion_start_id;
  if (undo_deletion_start_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridRowsArchive.undo_deletion_start_id)
}
inline ::TSP::UUID* CommandAddGridRowsArchive::release_undo_deletion_start_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = undo_deletion_start_id_;
  undo_deletion_start_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::unsafe_arena_release_undo_deletion_start_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridRowsArchive.undo_deletion_start_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = undo_deletion_start_id_;
  undo_deletion_start_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::_internal_mutable_undo_deletion_start_id() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_deletion_start_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_deletion_start_id_ = p;
  }
  return undo_deletion_start_id_;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::mutable_undo_deletion_start_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_deletion_start_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.undo_deletion_start_id)
  return _msg;
}
inline void CommandAddGridRowsArchive::set_allocated_undo_deletion_start_id(::TSP::UUID* undo_deletion_start_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id_);
  }
  if (undo_deletion_start_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id));
    if (message_arena != submessage_arena) {
      undo_deletion_start_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_deletion_start_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_deletion_start_id_ = undo_deletion_start_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridRowsArchive.undo_deletion_start_id)
}

// optional .TSP.UUID undo_deletion_end_id = 6;
inline bool CommandAddGridRowsArchive::_internal_has_undo_deletion_end_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_deletion_end_id_ != nullptr);
  return value;
}
inline bool CommandAddGridRowsArchive::has_undo_deletion_end_id() const {
  return _internal_has_undo_deletion_end_id();
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::_internal_undo_deletion_end_id() const {
  const ::TSP::UUID* p = undo_deletion_end_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridRowsArchive::undo_deletion_end_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.undo_deletion_end_id)
  return _internal_undo_deletion_end_id();
}
inline void CommandAddGridRowsArchive::unsafe_arena_set_allocated_undo_deletion_end_id(
    ::TSP::UUID* undo_deletion_end_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id_);
  }
  undo_deletion_end_id_ = undo_deletion_end_id;
  if (undo_deletion_end_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridRowsArchive.undo_deletion_end_id)
}
inline ::TSP::UUID* CommandAddGridRowsArchive::release_undo_deletion_end_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_deletion_end_id_;
  undo_deletion_end_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::unsafe_arena_release_undo_deletion_end_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridRowsArchive.undo_deletion_end_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_deletion_end_id_;
  undo_deletion_end_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::_internal_mutable_undo_deletion_end_id() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_deletion_end_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_deletion_end_id_ = p;
  }
  return undo_deletion_end_id_;
}
inline ::TSP::UUID* CommandAddGridRowsArchive::mutable_undo_deletion_end_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_deletion_end_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.undo_deletion_end_id)
  return _msg;
}
inline void CommandAddGridRowsArchive::set_allocated_undo_deletion_end_id(::TSP::UUID* undo_deletion_end_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id_);
  }
  if (undo_deletion_end_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id));
    if (message_arena != submessage_arena) {
      undo_deletion_end_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_deletion_end_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_deletion_end_id_ = undo_deletion_end_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridRowsArchive.undo_deletion_end_id)
}

// -------------------------------------------------------------------

// CommandAddGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridColumnsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandAddGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddGridColumnsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandAddGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridColumnsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.super)
  return _msg;
}
inline void CommandAddGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridColumnsArchive.super)
}

// optional .TSP.UUID column_id = 2;
inline bool CommandAddGridColumnsArchive::_internal_has_column_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_id_ != nullptr);
  return value;
}
inline bool CommandAddGridColumnsArchive::has_column_id() const {
  return _internal_has_column_id();
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::_internal_column_id() const {
  const ::TSP::UUID* p = column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.column_id)
  return _internal_column_id();
}
inline void CommandAddGridColumnsArchive::unsafe_arena_set_allocated_column_id(
    ::TSP::UUID* column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_id_);
  }
  column_id_ = column_id;
  if (column_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridColumnsArchive.column_id)
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::release_column_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_id_;
  column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::unsafe_arena_release_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridColumnsArchive.column_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_id_;
  column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::_internal_mutable_column_id() {
  _has_bits_[0] |= 0x00000002u;
  if (column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    column_id_ = p;
  }
  return column_id_;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::mutable_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.column_id)
  return _msg;
}
inline void CommandAddGridColumnsArchive::set_allocated_column_id(::TSP::UUID* column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_id_);
  }
  if (column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_id));
    if (message_arena != submessage_arena) {
      column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_id_ = column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridColumnsArchive.column_id)
}

// repeated .TSP.UUID column_id_list = 3;
inline int CommandAddGridColumnsArchive::_internal_column_id_list_size() const {
  return column_id_list_.size();
}
inline int CommandAddGridColumnsArchive::column_id_list_size() const {
  return _internal_column_id_list_size();
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::mutable_column_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.column_id_list)
  return column_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandAddGridColumnsArchive::mutable_column_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridColumnsArchive.column_id_list)
  return &column_id_list_;
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::_internal_column_id_list(int index) const {
  return column_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::column_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.column_id_list)
  return _internal_column_id_list(index);
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::_internal_add_column_id_list() {
  return column_id_list_.Add();
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::add_column_id_list() {
  ::TSP::UUID* _add = _internal_add_column_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridColumnsArchive.column_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandAddGridColumnsArchive::column_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridColumnsArchive.column_id_list)
  return column_id_list_;
}

// repeated string column_name_list = 4;
inline int CommandAddGridColumnsArchive::_internal_column_name_list_size() const {
  return column_name_list_.size();
}
inline int CommandAddGridColumnsArchive::column_name_list_size() const {
  return _internal_column_name_list_size();
}
inline void CommandAddGridColumnsArchive::clear_column_name_list() {
  column_name_list_.Clear();
}
inline std::string* CommandAddGridColumnsArchive::add_column_name_list() {
  std::string* _s = _internal_add_column_name_list();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandAddGridColumnsArchive.column_name_list)
  return _s;
}
inline const std::string& CommandAddGridColumnsArchive::_internal_column_name_list(int index) const {
  return column_name_list_.Get(index);
}
inline const std::string& CommandAddGridColumnsArchive::column_name_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.column_name_list)
  return _internal_column_name_list(index);
}
inline std::string* CommandAddGridColumnsArchive::mutable_column_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.column_name_list)
  return column_name_list_.Mutable(index);
}
inline void CommandAddGridColumnsArchive::set_column_name_list(int index, const std::string& value) {
  column_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::set_column_name_list(int index, std::string&& value) {
  column_name_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::set_column_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::set_column_name_list(int index, const char* value, size_t size) {
  column_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline std::string* CommandAddGridColumnsArchive::_internal_add_column_name_list() {
  return column_name_list_.Add();
}
inline void CommandAddGridColumnsArchive::add_column_name_list(const std::string& value) {
  column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::add_column_name_list(std::string&& value) {
  column_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::add_column_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline void CommandAddGridColumnsArchive::add_column_name_list(const char* value, size_t size) {
  column_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandAddGridColumnsArchive.column_name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandAddGridColumnsArchive::column_name_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridColumnsArchive.column_name_list)
  return column_name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandAddGridColumnsArchive::mutable_column_name_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridColumnsArchive.column_name_list)
  return &column_name_list_;
}

// optional .TSP.UUID undo_deletion_start_id = 5;
inline bool CommandAddGridColumnsArchive::_internal_has_undo_deletion_start_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_deletion_start_id_ != nullptr);
  return value;
}
inline bool CommandAddGridColumnsArchive::has_undo_deletion_start_id() const {
  return _internal_has_undo_deletion_start_id();
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::_internal_undo_deletion_start_id() const {
  const ::TSP::UUID* p = undo_deletion_start_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::undo_deletion_start_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id)
  return _internal_undo_deletion_start_id();
}
inline void CommandAddGridColumnsArchive::unsafe_arena_set_allocated_undo_deletion_start_id(
    ::TSP::UUID* undo_deletion_start_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id_);
  }
  undo_deletion_start_id_ = undo_deletion_start_id;
  if (undo_deletion_start_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id)
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::release_undo_deletion_start_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = undo_deletion_start_id_;
  undo_deletion_start_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::unsafe_arena_release_undo_deletion_start_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = undo_deletion_start_id_;
  undo_deletion_start_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::_internal_mutable_undo_deletion_start_id() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_deletion_start_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_deletion_start_id_ = p;
  }
  return undo_deletion_start_id_;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::mutable_undo_deletion_start_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_deletion_start_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id)
  return _msg;
}
inline void CommandAddGridColumnsArchive::set_allocated_undo_deletion_start_id(::TSP::UUID* undo_deletion_start_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id_);
  }
  if (undo_deletion_start_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_start_id));
    if (message_arena != submessage_arena) {
      undo_deletion_start_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_deletion_start_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_deletion_start_id_ = undo_deletion_start_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id)
}

// optional .TSP.UUID undo_deletion_end_id = 6;
inline bool CommandAddGridColumnsArchive::_internal_has_undo_deletion_end_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_deletion_end_id_ != nullptr);
  return value;
}
inline bool CommandAddGridColumnsArchive::has_undo_deletion_end_id() const {
  return _internal_has_undo_deletion_end_id();
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::_internal_undo_deletion_end_id() const {
  const ::TSP::UUID* p = undo_deletion_end_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddGridColumnsArchive::undo_deletion_end_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id)
  return _internal_undo_deletion_end_id();
}
inline void CommandAddGridColumnsArchive::unsafe_arena_set_allocated_undo_deletion_end_id(
    ::TSP::UUID* undo_deletion_end_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id_);
  }
  undo_deletion_end_id_ = undo_deletion_end_id;
  if (undo_deletion_end_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id)
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::release_undo_deletion_end_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_deletion_end_id_;
  undo_deletion_end_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::unsafe_arena_release_undo_deletion_end_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_deletion_end_id_;
  undo_deletion_end_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::_internal_mutable_undo_deletion_end_id() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_deletion_end_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_deletion_end_id_ = p;
  }
  return undo_deletion_end_id_;
}
inline ::TSP::UUID* CommandAddGridColumnsArchive::mutable_undo_deletion_end_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_deletion_end_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id)
  return _msg;
}
inline void CommandAddGridColumnsArchive::set_allocated_undo_deletion_end_id(::TSP::UUID* undo_deletion_end_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id_);
  }
  if (undo_deletion_end_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_deletion_end_id));
    if (message_arena != submessage_arena) {
      undo_deletion_end_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_deletion_end_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_deletion_end_id_ = undo_deletion_end_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id)
}

// -------------------------------------------------------------------

// CommandMoveGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridRowsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveGridRowsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.super)
  return _internal_super();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.super)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.super)
}

// required .TSP.UUID start_row_id = 2;
inline bool CommandMoveGridRowsArchive::_internal_has_start_row_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_row_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_start_row_id() const {
  return _internal_has_start_row_id();
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::_internal_start_row_id() const {
  const ::TSP::UUID* p = start_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::start_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.start_row_id)
  return _internal_start_row_id();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_start_row_id(
    ::TSP::UUID* start_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id_);
  }
  start_row_id_ = start_row_id;
  if (start_row_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.start_row_id)
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::release_start_row_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_row_id_;
  start_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::unsafe_arena_release_start_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.start_row_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_row_id_;
  start_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::_internal_mutable_start_row_id() {
  _has_bits_[0] |= 0x00000002u;
  if (start_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    start_row_id_ = p;
  }
  return start_row_id_;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::mutable_start_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_start_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.start_row_id)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_start_row_id(::TSP::UUID* start_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id_);
  }
  if (start_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id));
    if (message_arena != submessage_arena) {
      start_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_row_id_ = start_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.start_row_id)
}

// required .TSP.UUID end_row_id = 3;
inline bool CommandMoveGridRowsArchive::_internal_has_end_row_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_row_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_end_row_id() const {
  return _internal_has_end_row_id();
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::_internal_end_row_id() const {
  const ::TSP::UUID* p = end_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::end_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.end_row_id)
  return _internal_end_row_id();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_end_row_id(
    ::TSP::UUID* end_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id_);
  }
  end_row_id_ = end_row_id;
  if (end_row_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.end_row_id)
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::release_end_row_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_row_id_;
  end_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::unsafe_arena_release_end_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.end_row_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_row_id_;
  end_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::_internal_mutable_end_row_id() {
  _has_bits_[0] |= 0x00000004u;
  if (end_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    end_row_id_ = p;
  }
  return end_row_id_;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::mutable_end_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_end_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.end_row_id)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_end_row_id(::TSP::UUID* end_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id_);
  }
  if (end_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id));
    if (message_arena != submessage_arena) {
      end_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_row_id_ = end_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.end_row_id)
}

// optional .TSP.UUID after_row_id = 4;
inline bool CommandMoveGridRowsArchive::_internal_has_after_row_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || after_row_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_after_row_id() const {
  return _internal_has_after_row_id();
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::_internal_after_row_id() const {
  const ::TSP::UUID* p = after_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::after_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.after_row_id)
  return _internal_after_row_id();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_after_row_id(
    ::TSP::UUID* after_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_row_id_);
  }
  after_row_id_ = after_row_id;
  if (after_row_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.after_row_id)
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::release_after_row_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = after_row_id_;
  after_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::unsafe_arena_release_after_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.after_row_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = after_row_id_;
  after_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::_internal_mutable_after_row_id() {
  _has_bits_[0] |= 0x00000008u;
  if (after_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    after_row_id_ = p;
  }
  return after_row_id_;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::mutable_after_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_after_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.after_row_id)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_after_row_id(::TSP::UUID* after_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_row_id_);
  }
  if (after_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_row_id));
    if (message_arena != submessage_arena) {
      after_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  after_row_id_ = after_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.after_row_id)
}

// optional .TSP.UUID undo_after_row_id = 5;
inline bool CommandMoveGridRowsArchive::_internal_has_undo_after_row_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_after_row_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_undo_after_row_id() const {
  return _internal_has_undo_after_row_id();
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::_internal_undo_after_row_id() const {
  const ::TSP::UUID* p = undo_after_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridRowsArchive::undo_after_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.undo_after_row_id)
  return _internal_undo_after_row_id();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_undo_after_row_id(
    ::TSP::UUID* undo_after_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_row_id_);
  }
  undo_after_row_id_ = undo_after_row_id;
  if (undo_after_row_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.undo_after_row_id)
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::release_undo_after_row_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_after_row_id_;
  undo_after_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::unsafe_arena_release_undo_after_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.undo_after_row_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_after_row_id_;
  undo_after_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::_internal_mutable_undo_after_row_id() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_after_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_after_row_id_ = p;
  }
  return undo_after_row_id_;
}
inline ::TSP::UUID* CommandMoveGridRowsArchive::mutable_undo_after_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_after_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.undo_after_row_id)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_undo_after_row_id(::TSP::UUID* undo_after_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_row_id_);
  }
  if (undo_after_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_row_id));
    if (message_arena != submessage_arena) {
      undo_after_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_after_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_after_row_id_ = undo_after_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.undo_after_row_id)
}

// -------------------------------------------------------------------

// CommandMoveGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridColumnsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveGridColumnsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.super)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.super)
}

// required .TSP.UUID start_column_id = 2;
inline bool CommandMoveGridColumnsArchive::_internal_has_start_column_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_column_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_start_column_id() const {
  return _internal_has_start_column_id();
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::_internal_start_column_id() const {
  const ::TSP::UUID* p = start_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::start_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.start_column_id)
  return _internal_start_column_id();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_start_column_id(
    ::TSP::UUID* start_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id_);
  }
  start_column_id_ = start_column_id;
  if (start_column_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.start_column_id)
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::release_start_column_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_column_id_;
  start_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::unsafe_arena_release_start_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.start_column_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_column_id_;
  start_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::_internal_mutable_start_column_id() {
  _has_bits_[0] |= 0x00000002u;
  if (start_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    start_column_id_ = p;
  }
  return start_column_id_;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::mutable_start_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_start_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.start_column_id)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_start_column_id(::TSP::UUID* start_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id_);
  }
  if (start_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id));
    if (message_arena != submessage_arena) {
      start_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_column_id_ = start_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.start_column_id)
}

// required .TSP.UUID end_column_id = 3;
inline bool CommandMoveGridColumnsArchive::_internal_has_end_column_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_column_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_end_column_id() const {
  return _internal_has_end_column_id();
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::_internal_end_column_id() const {
  const ::TSP::UUID* p = end_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::end_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.end_column_id)
  return _internal_end_column_id();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_end_column_id(
    ::TSP::UUID* end_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id_);
  }
  end_column_id_ = end_column_id;
  if (end_column_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.end_column_id)
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::release_end_column_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_column_id_;
  end_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::unsafe_arena_release_end_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.end_column_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_column_id_;
  end_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::_internal_mutable_end_column_id() {
  _has_bits_[0] |= 0x00000004u;
  if (end_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    end_column_id_ = p;
  }
  return end_column_id_;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::mutable_end_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_end_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.end_column_id)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_end_column_id(::TSP::UUID* end_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id_);
  }
  if (end_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id));
    if (message_arena != submessage_arena) {
      end_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_column_id_ = end_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.end_column_id)
}

// optional .TSP.UUID after_column_id = 4;
inline bool CommandMoveGridColumnsArchive::_internal_has_after_column_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || after_column_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_after_column_id() const {
  return _internal_has_after_column_id();
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::_internal_after_column_id() const {
  const ::TSP::UUID* p = after_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::after_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.after_column_id)
  return _internal_after_column_id();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_after_column_id(
    ::TSP::UUID* after_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_column_id_);
  }
  after_column_id_ = after_column_id;
  if (after_column_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.after_column_id)
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::release_after_column_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = after_column_id_;
  after_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::unsafe_arena_release_after_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.after_column_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = after_column_id_;
  after_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::_internal_mutable_after_column_id() {
  _has_bits_[0] |= 0x00000008u;
  if (after_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    after_column_id_ = p;
  }
  return after_column_id_;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::mutable_after_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_after_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.after_column_id)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_after_column_id(::TSP::UUID* after_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_column_id_);
  }
  if (after_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_column_id));
    if (message_arena != submessage_arena) {
      after_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  after_column_id_ = after_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.after_column_id)
}

// optional .TSP.UUID undo_after_column_id = 5;
inline bool CommandMoveGridColumnsArchive::_internal_has_undo_after_column_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_after_column_id_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_undo_after_column_id() const {
  return _internal_has_undo_after_column_id();
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::_internal_undo_after_column_id() const {
  const ::TSP::UUID* p = undo_after_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandMoveGridColumnsArchive::undo_after_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.undo_after_column_id)
  return _internal_undo_after_column_id();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_undo_after_column_id(
    ::TSP::UUID* undo_after_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_column_id_);
  }
  undo_after_column_id_ = undo_after_column_id;
  if (undo_after_column_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.undo_after_column_id)
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::release_undo_after_column_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_after_column_id_;
  undo_after_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::unsafe_arena_release_undo_after_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.undo_after_column_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_after_column_id_;
  undo_after_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::_internal_mutable_undo_after_column_id() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_after_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_after_column_id_ = p;
  }
  return undo_after_column_id_;
}
inline ::TSP::UUID* CommandMoveGridColumnsArchive::mutable_undo_after_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_after_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.undo_after_column_id)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_undo_after_column_id(::TSP::UUID* undo_after_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_column_id_);
  }
  if (undo_after_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_after_column_id));
    if (message_arena != submessage_arena) {
      undo_after_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_after_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_after_column_id_ = undo_after_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.undo_after_column_id)
}

// -------------------------------------------------------------------

// CommandDeleteGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridRowsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteGridRowsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.super)
  return _internal_super();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.super)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.super)
}

// required .TSP.UUID start_row_id = 2;
inline bool CommandDeleteGridRowsArchive::_internal_has_start_row_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_row_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_start_row_id() const {
  return _internal_has_start_row_id();
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_start_row_id() const {
  const ::TSP::UUID* p = start_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::start_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.start_row_id)
  return _internal_start_row_id();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_start_row_id(
    ::TSP::UUID* start_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id_);
  }
  start_row_id_ = start_row_id;
  if (start_row_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.start_row_id)
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::release_start_row_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_row_id_;
  start_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::unsafe_arena_release_start_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.start_row_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_row_id_;
  start_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_mutable_start_row_id() {
  _has_bits_[0] |= 0x00000002u;
  if (start_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    start_row_id_ = p;
  }
  return start_row_id_;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_start_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_start_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.start_row_id)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_start_row_id(::TSP::UUID* start_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id_);
  }
  if (start_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_row_id));
    if (message_arena != submessage_arena) {
      start_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_row_id_ = start_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.start_row_id)
}

// required .TSP.UUID end_row_id = 3;
inline bool CommandDeleteGridRowsArchive::_internal_has_end_row_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_row_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_end_row_id() const {
  return _internal_has_end_row_id();
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_end_row_id() const {
  const ::TSP::UUID* p = end_row_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::end_row_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.end_row_id)
  return _internal_end_row_id();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_end_row_id(
    ::TSP::UUID* end_row_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id_);
  }
  end_row_id_ = end_row_id;
  if (end_row_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.end_row_id)
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::release_end_row_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_row_id_;
  end_row_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::unsafe_arena_release_end_row_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.end_row_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_row_id_;
  end_row_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_mutable_end_row_id() {
  _has_bits_[0] |= 0x00000004u;
  if (end_row_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    end_row_id_ = p;
  }
  return end_row_id_;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_end_row_id() {
  ::TSP::UUID* _msg = _internal_mutable_end_row_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.end_row_id)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_end_row_id(::TSP::UUID* end_row_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id_);
  }
  if (end_row_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_row_id));
    if (message_arena != submessage_arena) {
      end_row_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_row_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_row_id_ = end_row_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.end_row_id)
}

// repeated string cut_row_names = 4;
inline int CommandDeleteGridRowsArchive::_internal_cut_row_names_size() const {
  return cut_row_names_.size();
}
inline int CommandDeleteGridRowsArchive::cut_row_names_size() const {
  return _internal_cut_row_names_size();
}
inline void CommandDeleteGridRowsArchive::clear_cut_row_names() {
  cut_row_names_.Clear();
}
inline std::string* CommandDeleteGridRowsArchive::add_cut_row_names() {
  std::string* _s = _internal_add_cut_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
  return _s;
}
inline const std::string& CommandDeleteGridRowsArchive::_internal_cut_row_names(int index) const {
  return cut_row_names_.Get(index);
}
inline const std::string& CommandDeleteGridRowsArchive::cut_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
  return _internal_cut_row_names(index);
}
inline std::string* CommandDeleteGridRowsArchive::mutable_cut_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
  return cut_row_names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_cut_row_names(int index, const std::string& value) {
  cut_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_row_names(int index, std::string&& value) {
  cut_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_row_names(int index, const char* value, size_t size) {
  cut_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline std::string* CommandDeleteGridRowsArchive::_internal_add_cut_row_names() {
  return cut_row_names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_cut_row_names(const std::string& value) {
  cut_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_row_names(std::string&& value) {
  cut_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_row_names(const char* value, size_t size) {
  cut_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridRowsArchive::cut_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
  return cut_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridRowsArchive::mutable_cut_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.cut_row_names)
  return &cut_row_names_;
}

// repeated .TSCH.GridRow cut_values = 5;
inline int CommandDeleteGridRowsArchive::_internal_cut_values_size() const {
  return cut_values_.size();
}
inline int CommandDeleteGridRowsArchive::cut_values_size() const {
  return _internal_cut_values_size();
}
inline ::TSCH::GridRow* CommandDeleteGridRowsArchive::mutable_cut_values(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.cut_values)
  return cut_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
CommandDeleteGridRowsArchive::mutable_cut_values() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.cut_values)
  return &cut_values_;
}
inline const ::TSCH::GridRow& CommandDeleteGridRowsArchive::_internal_cut_values(int index) const {
  return cut_values_.Get(index);
}
inline const ::TSCH::GridRow& CommandDeleteGridRowsArchive::cut_values(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.cut_values)
  return _internal_cut_values(index);
}
inline ::TSCH::GridRow* CommandDeleteGridRowsArchive::_internal_add_cut_values() {
  return cut_values_.Add();
}
inline ::TSCH::GridRow* CommandDeleteGridRowsArchive::add_cut_values() {
  ::TSCH::GridRow* _add = _internal_add_cut_values();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.cut_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
CommandDeleteGridRowsArchive::cut_values() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.cut_values)
  return cut_values_;
}

// optional bool undo_discards_values = 6;
inline bool CommandDeleteGridRowsArchive::_internal_has_undo_discards_values() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_undo_discards_values() const {
  return _internal_has_undo_discards_values();
}
inline void CommandDeleteGridRowsArchive::clear_undo_discards_values() {
  undo_discards_values_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandDeleteGridRowsArchive::_internal_undo_discards_values() const {
  return undo_discards_values_;
}
inline bool CommandDeleteGridRowsArchive::undo_discards_values() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.undo_discards_values)
  return _internal_undo_discards_values();
}
inline void CommandDeleteGridRowsArchive::_internal_set_undo_discards_values(bool value) {
  _has_bits_[0] |= 0x00000020u;
  undo_discards_values_ = value;
}
inline void CommandDeleteGridRowsArchive::set_undo_discards_values(bool value) {
  _internal_set_undo_discards_values(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.undo_discards_values)
}

// optional .TSP.UUID undo_column_insertion_id = 7;
inline bool CommandDeleteGridRowsArchive::_internal_has_undo_column_insertion_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_column_insertion_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_undo_column_insertion_id() const {
  return _internal_has_undo_column_insertion_id();
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_undo_column_insertion_id() const {
  const ::TSP::UUID* p = undo_column_insertion_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::undo_column_insertion_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id)
  return _internal_undo_column_insertion_id();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_undo_column_insertion_id(
    ::TSP::UUID* undo_column_insertion_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id_);
  }
  undo_column_insertion_id_ = undo_column_insertion_id;
  if (undo_column_insertion_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id)
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::release_undo_column_insertion_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_column_insertion_id_;
  undo_column_insertion_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::unsafe_arena_release_undo_column_insertion_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_column_insertion_id_;
  undo_column_insertion_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_mutable_undo_column_insertion_id() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_column_insertion_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_column_insertion_id_ = p;
  }
  return undo_column_insertion_id_;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_undo_column_insertion_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_column_insertion_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_undo_column_insertion_id(::TSP::UUID* undo_column_insertion_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id_);
  }
  if (undo_column_insertion_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id));
    if (message_arena != submessage_arena) {
      undo_column_insertion_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_column_insertion_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_column_insertion_id_ = undo_column_insertion_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id)
}

// optional .TSP.UUID undo_row_insertion_id = 8;
inline bool CommandDeleteGridRowsArchive::_internal_has_undo_row_insertion_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_row_insertion_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_undo_row_insertion_id() const {
  return _internal_has_undo_row_insertion_id();
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_undo_row_insertion_id() const {
  const ::TSP::UUID* p = undo_row_insertion_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::undo_row_insertion_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id)
  return _internal_undo_row_insertion_id();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_undo_row_insertion_id(
    ::TSP::UUID* undo_row_insertion_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id_);
  }
  undo_row_insertion_id_ = undo_row_insertion_id;
  if (undo_row_insertion_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id)
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::release_undo_row_insertion_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_row_insertion_id_;
  undo_row_insertion_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::unsafe_arena_release_undo_row_insertion_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_row_insertion_id_;
  undo_row_insertion_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_mutable_undo_row_insertion_id() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_row_insertion_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_row_insertion_id_ = p;
  }
  return undo_row_insertion_id_;
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_undo_row_insertion_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_row_insertion_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_undo_row_insertion_id(::TSP::UUID* undo_row_insertion_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id_);
  }
  if (undo_row_insertion_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id));
    if (message_arena != submessage_arena) {
      undo_row_insertion_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_row_insertion_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_row_insertion_id_ = undo_row_insertion_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id)
}

// repeated .TSP.UUID undo_row_id_list = 9;
inline int CommandDeleteGridRowsArchive::_internal_undo_row_id_list_size() const {
  return undo_row_id_list_.size();
}
inline int CommandDeleteGridRowsArchive::undo_row_id_list_size() const {
  return _internal_undo_row_id_list_size();
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_undo_row_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.undo_row_id_list)
  return undo_row_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandDeleteGridRowsArchive::mutable_undo_row_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.undo_row_id_list)
  return &undo_row_id_list_;
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_undo_row_id_list(int index) const {
  return undo_row_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::undo_row_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.undo_row_id_list)
  return _internal_undo_row_id_list(index);
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_add_undo_row_id_list() {
  return undo_row_id_list_.Add();
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::add_undo_row_id_list() {
  ::TSP::UUID* _add = _internal_add_undo_row_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.undo_row_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandDeleteGridRowsArchive::undo_row_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.undo_row_id_list)
  return undo_row_id_list_;
}

// repeated string cut_column_names = 11;
inline int CommandDeleteGridRowsArchive::_internal_cut_column_names_size() const {
  return cut_column_names_.size();
}
inline int CommandDeleteGridRowsArchive::cut_column_names_size() const {
  return _internal_cut_column_names_size();
}
inline void CommandDeleteGridRowsArchive::clear_cut_column_names() {
  cut_column_names_.Clear();
}
inline std::string* CommandDeleteGridRowsArchive::add_cut_column_names() {
  std::string* _s = _internal_add_cut_column_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
  return _s;
}
inline const std::string& CommandDeleteGridRowsArchive::_internal_cut_column_names(int index) const {
  return cut_column_names_.Get(index);
}
inline const std::string& CommandDeleteGridRowsArchive::cut_column_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
  return _internal_cut_column_names(index);
}
inline std::string* CommandDeleteGridRowsArchive::mutable_cut_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
  return cut_column_names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_cut_column_names(int index, const std::string& value) {
  cut_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_column_names(int index, std::string&& value) {
  cut_column_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::set_cut_column_names(int index, const char* value, size_t size) {
  cut_column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline std::string* CommandDeleteGridRowsArchive::_internal_add_cut_column_names() {
  return cut_column_names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_cut_column_names(const std::string& value) {
  cut_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_column_names(std::string&& value) {
  cut_column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline void CommandDeleteGridRowsArchive::add_cut_column_names(const char* value, size_t size) {
  cut_column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridRowsArchive::cut_column_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
  return cut_column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridRowsArchive::mutable_cut_column_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.cut_column_names)
  return &cut_column_names_;
}

// repeated .TSP.UUID undo_column_id_list = 12;
inline int CommandDeleteGridRowsArchive::_internal_undo_column_id_list_size() const {
  return undo_column_id_list_.size();
}
inline int CommandDeleteGridRowsArchive::undo_column_id_list_size() const {
  return _internal_undo_column_id_list_size();
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::mutable_undo_column_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.undo_column_id_list)
  return undo_column_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandDeleteGridRowsArchive::mutable_undo_column_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.undo_column_id_list)
  return &undo_column_id_list_;
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::_internal_undo_column_id_list(int index) const {
  return undo_column_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandDeleteGridRowsArchive::undo_column_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.undo_column_id_list)
  return _internal_undo_column_id_list(index);
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::_internal_add_undo_column_id_list() {
  return undo_column_id_list_.Add();
}
inline ::TSP::UUID* CommandDeleteGridRowsArchive::add_undo_column_id_list() {
  ::TSP::UUID* _add = _internal_add_undo_column_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.undo_column_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandDeleteGridRowsArchive::undo_column_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.undo_column_id_list)
  return undo_column_id_list_;
}

// -------------------------------------------------------------------

// CommandDeleteGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridColumnsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteGridColumnsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.super)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.super)
}

// required .TSP.UUID start_column_id = 2;
inline bool CommandDeleteGridColumnsArchive::_internal_has_start_column_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_column_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_start_column_id() const {
  return _internal_has_start_column_id();
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_start_column_id() const {
  const ::TSP::UUID* p = start_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::start_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.start_column_id)
  return _internal_start_column_id();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_start_column_id(
    ::TSP::UUID* start_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id_);
  }
  start_column_id_ = start_column_id;
  if (start_column_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.start_column_id)
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::release_start_column_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_column_id_;
  start_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::unsafe_arena_release_start_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.start_column_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = start_column_id_;
  start_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_mutable_start_column_id() {
  _has_bits_[0] |= 0x00000002u;
  if (start_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    start_column_id_ = p;
  }
  return start_column_id_;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_start_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_start_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.start_column_id)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_start_column_id(::TSP::UUID* start_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id_);
  }
  if (start_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_column_id));
    if (message_arena != submessage_arena) {
      start_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_column_id_ = start_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.start_column_id)
}

// required .TSP.UUID end_column_id = 3;
inline bool CommandDeleteGridColumnsArchive::_internal_has_end_column_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_column_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_end_column_id() const {
  return _internal_has_end_column_id();
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_end_column_id() const {
  const ::TSP::UUID* p = end_column_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::end_column_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.end_column_id)
  return _internal_end_column_id();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_end_column_id(
    ::TSP::UUID* end_column_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id_);
  }
  end_column_id_ = end_column_id;
  if (end_column_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.end_column_id)
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::release_end_column_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_column_id_;
  end_column_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::unsafe_arena_release_end_column_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.end_column_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = end_column_id_;
  end_column_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_mutable_end_column_id() {
  _has_bits_[0] |= 0x00000004u;
  if (end_column_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    end_column_id_ = p;
  }
  return end_column_id_;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_end_column_id() {
  ::TSP::UUID* _msg = _internal_mutable_end_column_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.end_column_id)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_end_column_id(::TSP::UUID* end_column_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id_);
  }
  if (end_column_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_column_id));
    if (message_arena != submessage_arena) {
      end_column_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_column_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_column_id_ = end_column_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.end_column_id)
}

// repeated string cut_names = 4;
inline int CommandDeleteGridColumnsArchive::_internal_cut_names_size() const {
  return cut_names_.size();
}
inline int CommandDeleteGridColumnsArchive::cut_names_size() const {
  return _internal_cut_names_size();
}
inline void CommandDeleteGridColumnsArchive::clear_cut_names() {
  cut_names_.Clear();
}
inline std::string* CommandDeleteGridColumnsArchive::add_cut_names() {
  std::string* _s = _internal_add_cut_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridColumnsArchive.cut_names)
  return _s;
}
inline const std::string& CommandDeleteGridColumnsArchive::_internal_cut_names(int index) const {
  return cut_names_.Get(index);
}
inline const std::string& CommandDeleteGridColumnsArchive::cut_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.cut_names)
  return _internal_cut_names(index);
}
inline std::string* CommandDeleteGridColumnsArchive::mutable_cut_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.cut_names)
  return cut_names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_cut_names(int index, const std::string& value) {
  cut_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_names(int index, std::string&& value) {
  cut_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_names(int index, const char* value, size_t size) {
  cut_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline std::string* CommandDeleteGridColumnsArchive::_internal_add_cut_names() {
  return cut_names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_cut_names(const std::string& value) {
  cut_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_names(std::string&& value) {
  cut_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_names(const char* value, size_t size) {
  cut_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridColumnsArchive.cut_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridColumnsArchive::cut_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.cut_names)
  return cut_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridColumnsArchive::mutable_cut_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.cut_names)
  return &cut_names_;
}

// repeated .TSCH.GridRow cut_values = 5;
inline int CommandDeleteGridColumnsArchive::_internal_cut_values_size() const {
  return cut_values_.size();
}
inline int CommandDeleteGridColumnsArchive::cut_values_size() const {
  return _internal_cut_values_size();
}
inline ::TSCH::GridRow* CommandDeleteGridColumnsArchive::mutable_cut_values(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.cut_values)
  return cut_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
CommandDeleteGridColumnsArchive::mutable_cut_values() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.cut_values)
  return &cut_values_;
}
inline const ::TSCH::GridRow& CommandDeleteGridColumnsArchive::_internal_cut_values(int index) const {
  return cut_values_.Get(index);
}
inline const ::TSCH::GridRow& CommandDeleteGridColumnsArchive::cut_values(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.cut_values)
  return _internal_cut_values(index);
}
inline ::TSCH::GridRow* CommandDeleteGridColumnsArchive::_internal_add_cut_values() {
  return cut_values_.Add();
}
inline ::TSCH::GridRow* CommandDeleteGridColumnsArchive::add_cut_values() {
  ::TSCH::GridRow* _add = _internal_add_cut_values();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.cut_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
CommandDeleteGridColumnsArchive::cut_values() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.cut_values)
  return cut_values_;
}

// optional bool undo_discards_values = 6;
inline bool CommandDeleteGridColumnsArchive::_internal_has_undo_discards_values() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_undo_discards_values() const {
  return _internal_has_undo_discards_values();
}
inline void CommandDeleteGridColumnsArchive::clear_undo_discards_values() {
  undo_discards_values_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandDeleteGridColumnsArchive::_internal_undo_discards_values() const {
  return undo_discards_values_;
}
inline bool CommandDeleteGridColumnsArchive::undo_discards_values() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.undo_discards_values)
  return _internal_undo_discards_values();
}
inline void CommandDeleteGridColumnsArchive::_internal_set_undo_discards_values(bool value) {
  _has_bits_[0] |= 0x00000020u;
  undo_discards_values_ = value;
}
inline void CommandDeleteGridColumnsArchive::set_undo_discards_values(bool value) {
  _internal_set_undo_discards_values(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.undo_discards_values)
}

// optional .TSP.UUID undo_column_insertion_id = 7;
inline bool CommandDeleteGridColumnsArchive::_internal_has_undo_column_insertion_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_column_insertion_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_undo_column_insertion_id() const {
  return _internal_has_undo_column_insertion_id();
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_undo_column_insertion_id() const {
  const ::TSP::UUID* p = undo_column_insertion_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::undo_column_insertion_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id)
  return _internal_undo_column_insertion_id();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_undo_column_insertion_id(
    ::TSP::UUID* undo_column_insertion_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id_);
  }
  undo_column_insertion_id_ = undo_column_insertion_id;
  if (undo_column_insertion_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id)
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::release_undo_column_insertion_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_column_insertion_id_;
  undo_column_insertion_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::unsafe_arena_release_undo_column_insertion_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = undo_column_insertion_id_;
  undo_column_insertion_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_mutable_undo_column_insertion_id() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_column_insertion_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_column_insertion_id_ = p;
  }
  return undo_column_insertion_id_;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_undo_column_insertion_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_column_insertion_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_undo_column_insertion_id(::TSP::UUID* undo_column_insertion_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id_);
  }
  if (undo_column_insertion_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_column_insertion_id));
    if (message_arena != submessage_arena) {
      undo_column_insertion_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_column_insertion_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_column_insertion_id_ = undo_column_insertion_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id)
}

// optional .TSP.UUID undo_row_insertion_id = 8;
inline bool CommandDeleteGridColumnsArchive::_internal_has_undo_row_insertion_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_row_insertion_id_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_undo_row_insertion_id() const {
  return _internal_has_undo_row_insertion_id();
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_undo_row_insertion_id() const {
  const ::TSP::UUID* p = undo_row_insertion_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::undo_row_insertion_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id)
  return _internal_undo_row_insertion_id();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_undo_row_insertion_id(
    ::TSP::UUID* undo_row_insertion_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id_);
  }
  undo_row_insertion_id_ = undo_row_insertion_id;
  if (undo_row_insertion_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id)
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::release_undo_row_insertion_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_row_insertion_id_;
  undo_row_insertion_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::unsafe_arena_release_undo_row_insertion_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = undo_row_insertion_id_;
  undo_row_insertion_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_mutable_undo_row_insertion_id() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_row_insertion_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    undo_row_insertion_id_ = p;
  }
  return undo_row_insertion_id_;
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_undo_row_insertion_id() {
  ::TSP::UUID* _msg = _internal_mutable_undo_row_insertion_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_undo_row_insertion_id(::TSP::UUID* undo_row_insertion_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id_);
  }
  if (undo_row_insertion_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_row_insertion_id));
    if (message_arena != submessage_arena) {
      undo_row_insertion_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_row_insertion_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_row_insertion_id_ = undo_row_insertion_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id)
}

// repeated .TSP.UUID undo_column_id_list = 9;
inline int CommandDeleteGridColumnsArchive::_internal_undo_column_id_list_size() const {
  return undo_column_id_list_.size();
}
inline int CommandDeleteGridColumnsArchive::undo_column_id_list_size() const {
  return _internal_undo_column_id_list_size();
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_undo_column_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list)
  return undo_column_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandDeleteGridColumnsArchive::mutable_undo_column_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list)
  return &undo_column_id_list_;
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_undo_column_id_list(int index) const {
  return undo_column_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::undo_column_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list)
  return _internal_undo_column_id_list(index);
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_add_undo_column_id_list() {
  return undo_column_id_list_.Add();
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::add_undo_column_id_list() {
  ::TSP::UUID* _add = _internal_add_undo_column_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandDeleteGridColumnsArchive::undo_column_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list)
  return undo_column_id_list_;
}

// repeated string cut_row_names = 11;
inline int CommandDeleteGridColumnsArchive::_internal_cut_row_names_size() const {
  return cut_row_names_.size();
}
inline int CommandDeleteGridColumnsArchive::cut_row_names_size() const {
  return _internal_cut_row_names_size();
}
inline void CommandDeleteGridColumnsArchive::clear_cut_row_names() {
  cut_row_names_.Clear();
}
inline std::string* CommandDeleteGridColumnsArchive::add_cut_row_names() {
  std::string* _s = _internal_add_cut_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
  return _s;
}
inline const std::string& CommandDeleteGridColumnsArchive::_internal_cut_row_names(int index) const {
  return cut_row_names_.Get(index);
}
inline const std::string& CommandDeleteGridColumnsArchive::cut_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
  return _internal_cut_row_names(index);
}
inline std::string* CommandDeleteGridColumnsArchive::mutable_cut_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
  return cut_row_names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_cut_row_names(int index, const std::string& value) {
  cut_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_row_names(int index, std::string&& value) {
  cut_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::set_cut_row_names(int index, const char* value, size_t size) {
  cut_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline std::string* CommandDeleteGridColumnsArchive::_internal_add_cut_row_names() {
  return cut_row_names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_cut_row_names(const std::string& value) {
  cut_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_row_names(std::string&& value) {
  cut_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cut_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline void CommandDeleteGridColumnsArchive::add_cut_row_names(const char* value, size_t size) {
  cut_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridColumnsArchive::cut_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
  return cut_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridColumnsArchive::mutable_cut_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.cut_row_names)
  return &cut_row_names_;
}

// repeated .TSP.UUID undo_row_id_list = 12;
inline int CommandDeleteGridColumnsArchive::_internal_undo_row_id_list_size() const {
  return undo_row_id_list_.size();
}
inline int CommandDeleteGridColumnsArchive::undo_row_id_list_size() const {
  return _internal_undo_row_id_list_size();
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::mutable_undo_row_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list)
  return undo_row_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandDeleteGridColumnsArchive::mutable_undo_row_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list)
  return &undo_row_id_list_;
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::_internal_undo_row_id_list(int index) const {
  return undo_row_id_list_.Get(index);
}
inline const ::TSP::UUID& CommandDeleteGridColumnsArchive::undo_row_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list)
  return _internal_undo_row_id_list(index);
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::_internal_add_undo_row_id_list() {
  return undo_row_id_list_.Add();
}
inline ::TSP::UUID* CommandDeleteGridColumnsArchive::add_undo_row_id_list() {
  ::TSP::UUID* _add = _internal_add_undo_row_id_list();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandDeleteGridColumnsArchive::undo_row_id_list() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list)
  return undo_row_id_list_;
}

// -------------------------------------------------------------------

// CommandSetGridValueArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetGridValueArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetGridValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridValueArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.super)
  return _internal_super();
}
inline void CommandSetGridValueArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetGridValueArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetGridValueArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetGridValueArchive.super)
  return _msg;
}
inline void CommandSetGridValueArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetGridValueArchive.super)
}

// required uint32 rowindex = 2;
inline bool CommandSetGridValueArchive::_internal_has_rowindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_rowindex() const {
  return _internal_has_rowindex();
}
inline void CommandSetGridValueArchive::clear_rowindex() {
  rowindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridValueArchive::_internal_rowindex() const {
  return rowindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridValueArchive::rowindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.rowindex)
  return _internal_rowindex();
}
inline void CommandSetGridValueArchive::_internal_set_rowindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rowindex_ = value;
}
inline void CommandSetGridValueArchive::set_rowindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rowindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.rowindex)
}

// required uint32 columnindex = 3;
inline bool CommandSetGridValueArchive::_internal_has_columnindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_columnindex() const {
  return _internal_has_columnindex();
}
inline void CommandSetGridValueArchive::clear_columnindex() {
  columnindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridValueArchive::_internal_columnindex() const {
  return columnindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridValueArchive::columnindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.columnindex)
  return _internal_columnindex();
}
inline void CommandSetGridValueArchive::_internal_set_columnindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  columnindex_ = value;
}
inline void CommandSetGridValueArchive::set_columnindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_columnindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.columnindex)
}

// required double oldvalue = 4;
inline bool CommandSetGridValueArchive::_internal_has_oldvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_oldvalue() const {
  return _internal_has_oldvalue();
}
inline void CommandSetGridValueArchive::clear_oldvalue() {
  oldvalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CommandSetGridValueArchive::_internal_oldvalue() const {
  return oldvalue_;
}
inline double CommandSetGridValueArchive::oldvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.oldvalue)
  return _internal_oldvalue();
}
inline void CommandSetGridValueArchive::_internal_set_oldvalue(double value) {
  _has_bits_[0] |= 0x00000008u;
  oldvalue_ = value;
}
inline void CommandSetGridValueArchive::set_oldvalue(double value) {
  _internal_set_oldvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.oldvalue)
}

// required double newvalue = 5;
inline bool CommandSetGridValueArchive::_internal_has_newvalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_newvalue() const {
  return _internal_has_newvalue();
}
inline void CommandSetGridValueArchive::clear_newvalue() {
  newvalue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CommandSetGridValueArchive::_internal_newvalue() const {
  return newvalue_;
}
inline double CommandSetGridValueArchive::newvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.newvalue)
  return _internal_newvalue();
}
inline void CommandSetGridValueArchive::_internal_set_newvalue(double value) {
  _has_bits_[0] |= 0x00000010u;
  newvalue_ = value;
}
inline void CommandSetGridValueArchive::set_newvalue(double value) {
  _internal_set_newvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.newvalue)
}

// -------------------------------------------------------------------

// CommandSetGridDirectionArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridDirectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetGridDirectionArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetGridDirectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridDirectionArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridDirectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.super)
  return _internal_super();
}
inline void CommandSetGridDirectionArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetGridDirectionArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetGridDirectionArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetGridDirectionArchive.super)
  return _msg;
}
inline void CommandSetGridDirectionArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetGridDirectionArchive.super)
}

// required uint32 old_direction = 2;
inline bool CommandSetGridDirectionArchive::_internal_has_old_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetGridDirectionArchive::has_old_direction() const {
  return _internal_has_old_direction();
}
inline void CommandSetGridDirectionArchive::clear_old_direction() {
  old_direction_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridDirectionArchive::_internal_old_direction() const {
  return old_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridDirectionArchive::old_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.old_direction)
  return _internal_old_direction();
}
inline void CommandSetGridDirectionArchive::_internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  old_direction_ = value;
}
inline void CommandSetGridDirectionArchive::set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridDirectionArchive.old_direction)
}

// required uint32 new_direction = 3;
inline bool CommandSetGridDirectionArchive::_internal_has_new_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetGridDirectionArchive::has_new_direction() const {
  return _internal_has_new_direction();
}
inline void CommandSetGridDirectionArchive::clear_new_direction() {
  new_direction_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridDirectionArchive::_internal_new_direction() const {
  return new_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetGridDirectionArchive::new_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.new_direction)
  return _internal_new_direction();
}
inline void CommandSetGridDirectionArchive::_internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  new_direction_ = value;
}
inline void CommandSetGridDirectionArchive::set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridDirectionArchive.new_direction)
}

// -------------------------------------------------------------------

// CommandSetSeriesTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesTypeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSeriesTypeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesTypeArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.super)
  return _internal_super();
}
inline void CommandSetSeriesTypeArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetSeriesTypeArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesTypeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesTypeArchive.super)
  return _msg;
}
inline void CommandSetSeriesTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesTypeArchive.super)
}

// required uint32 seriesindex = 2;
inline bool CommandSetSeriesTypeArchive::_internal_has_seriesindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_seriesindex() const {
  return _internal_has_seriesindex();
}
inline void CommandSetSeriesTypeArchive::clear_seriesindex() {
  seriesindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::_internal_seriesindex() const {
  return seriesindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::seriesindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.seriesindex)
  return _internal_seriesindex();
}
inline void CommandSetSeriesTypeArchive::_internal_set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seriesindex_ = value;
}
inline void CommandSetSeriesTypeArchive::set_seriesindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seriesindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.seriesindex)
}

// required uint32 oldtype = 3;
inline bool CommandSetSeriesTypeArchive::_internal_has_oldtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_oldtype() const {
  return _internal_has_oldtype();
}
inline void CommandSetSeriesTypeArchive::clear_oldtype() {
  oldtype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::_internal_oldtype() const {
  return oldtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::oldtype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.oldtype)
  return _internal_oldtype();
}
inline void CommandSetSeriesTypeArchive::_internal_set_oldtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  oldtype_ = value;
}
inline void CommandSetSeriesTypeArchive::set_oldtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldtype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.oldtype)
}

// required uint32 newtype = 4;
inline bool CommandSetSeriesTypeArchive::_internal_has_newtype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_newtype() const {
  return _internal_has_newtype();
}
inline void CommandSetSeriesTypeArchive::clear_newtype() {
  newtype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::_internal_newtype() const {
  return newtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetSeriesTypeArchive::newtype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.newtype)
  return _internal_newtype();
}
inline void CommandSetSeriesTypeArchive::_internal_set_newtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  newtype_ = value;
}
inline void CommandSetSeriesTypeArchive::set_newtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newtype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.newtype)
}

// -------------------------------------------------------------------

// CommandSetScatterFormatArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetScatterFormatArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetScatterFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetScatterFormatArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetScatterFormatArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetScatterFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.super)
  return _internal_super();
}
inline void CommandSetScatterFormatArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetScatterFormatArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetScatterFormatArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetScatterFormatArchive.super)
  return _msg;
}
inline void CommandSetScatterFormatArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetScatterFormatArchive.super)
}

// required uint32 oldformat = 3;
inline bool CommandSetScatterFormatArchive::_internal_has_oldformat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetScatterFormatArchive::has_oldformat() const {
  return _internal_has_oldformat();
}
inline void CommandSetScatterFormatArchive::clear_oldformat() {
  oldformat_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetScatterFormatArchive::_internal_oldformat() const {
  return oldformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetScatterFormatArchive::oldformat() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.oldformat)
  return _internal_oldformat();
}
inline void CommandSetScatterFormatArchive::_internal_set_oldformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  oldformat_ = value;
}
inline void CommandSetScatterFormatArchive::set_oldformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldformat(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetScatterFormatArchive.oldformat)
}

// required uint32 newformat = 4;
inline bool CommandSetScatterFormatArchive::_internal_has_newformat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetScatterFormatArchive::has_newformat() const {
  return _internal_has_newformat();
}
inline void CommandSetScatterFormatArchive::clear_newformat() {
  newformat_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetScatterFormatArchive::_internal_newformat() const {
  return newformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetScatterFormatArchive::newformat() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.newformat)
  return _internal_newformat();
}
inline void CommandSetScatterFormatArchive::_internal_set_newformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  newformat_ = value;
}
inline void CommandSetScatterFormatArchive::set_newformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newformat(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetScatterFormatArchive.newformat)
}

// -------------------------------------------------------------------

// CommandSetMultiDataSetIndexArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultiDataSetIndexArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetMultiDataSetIndexArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetMultiDataSetIndexArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.super)
  return _internal_super();
}
inline void CommandSetMultiDataSetIndexArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetMultiDataSetIndexArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetMultiDataSetIndexArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetMultiDataSetIndexArchive.super)
  return _msg;
}
inline void CommandSetMultiDataSetIndexArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetMultiDataSetIndexArchive.super)
}

// required uint32 oldindex = 2;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_oldindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_oldindex() const {
  return _internal_has_oldindex();
}
inline void CommandSetMultiDataSetIndexArchive::clear_oldindex() {
  oldindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetMultiDataSetIndexArchive::_internal_oldindex() const {
  return oldindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetMultiDataSetIndexArchive::oldindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.oldindex)
  return _internal_oldindex();
}
inline void CommandSetMultiDataSetIndexArchive::_internal_set_oldindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  oldindex_ = value;
}
inline void CommandSetMultiDataSetIndexArchive::set_oldindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetMultiDataSetIndexArchive.oldindex)
}

// required uint32 newindex = 3;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_newindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_newindex() const {
  return _internal_has_newindex();
}
inline void CommandSetMultiDataSetIndexArchive::clear_newindex() {
  newindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetMultiDataSetIndexArchive::_internal_newindex() const {
  return newindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetMultiDataSetIndexArchive::newindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.newindex)
  return _internal_newindex();
}
inline void CommandSetMultiDataSetIndexArchive::_internal_set_newindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  newindex_ = value;
}
inline void CommandSetMultiDataSetIndexArchive::set_newindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetMultiDataSetIndexArchive.newindex)
}

// -------------------------------------------------------------------

// CommandSetLegendFrameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetLegendFrameArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetLegendFrameArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetLegendFrameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetLegendFrameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.super)
  return _internal_super();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.super)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.super)
}

// required .TSCH.RectArchive old_legend_frame = 2;
inline bool CommandSetLegendFrameArchive::_internal_has_old_legend_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_legend_frame_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_old_legend_frame() const {
  return _internal_has_old_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::_internal_old_legend_frame() const {
  const ::TSCH::RectArchive* p = old_legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::old_legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  return _internal_old_legend_frame();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_old_legend_frame(
    ::TSCH::RectArchive* old_legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_legend_frame_);
  }
  old_legend_frame_ = old_legend_frame;
  if (old_legend_frame) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_old_legend_frame() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = old_legend_frame_;
  old_legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::unsafe_arena_release_old_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = old_legend_frame_;
  old_legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::_internal_mutable_old_legend_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (old_legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    old_legend_frame_ = p;
  }
  return old_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_old_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_old_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_legend_frame_);
  }
  if (old_legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_legend_frame));
    if (message_arena != submessage_arena) {
      old_legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_legend_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_legend_frame_ = old_legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
}

// required .TSCH.RectArchive new_legend_frame = 3;
inline bool CommandSetLegendFrameArchive::_internal_has_new_legend_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_legend_frame_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_new_legend_frame() const {
  return _internal_has_new_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::_internal_new_legend_frame() const {
  const ::TSCH::RectArchive* p = new_legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::new_legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  return _internal_new_legend_frame();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_new_legend_frame(
    ::TSCH::RectArchive* new_legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_legend_frame_);
  }
  new_legend_frame_ = new_legend_frame;
  if (new_legend_frame) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_new_legend_frame() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::RectArchive* temp = new_legend_frame_;
  new_legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::unsafe_arena_release_new_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::RectArchive* temp = new_legend_frame_;
  new_legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::_internal_mutable_new_legend_frame() {
  _has_bits_[0] |= 0x00000004u;
  if (new_legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    new_legend_frame_ = p;
  }
  return new_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_new_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_new_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_legend_frame_);
  }
  if (new_legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_legend_frame));
    if (message_arena != submessage_arena) {
      new_legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_legend_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_legend_frame_ = new_legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
}

// -------------------------------------------------------------------

// CommandSetPieWedgeExplosion

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetPieWedgeExplosion::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_super() const {
  return _internal_has_super();
}
inline void CommandSetPieWedgeExplosion::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetPieWedgeExplosion::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetPieWedgeExplosion::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.super)
  return _internal_super();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.super)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.super)
}

// repeated uint32 series_indices = 2;
inline int CommandSetPieWedgeExplosion::_internal_series_indices_size() const {
  return series_indices_.size();
}
inline int CommandSetPieWedgeExplosion::series_indices_size() const {
  return _internal_series_indices_size();
}
inline void CommandSetPieWedgeExplosion::clear_series_indices() {
  series_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPieWedgeExplosion::_internal_series_indices(int index) const {
  return series_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPieWedgeExplosion::series_indices(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.series_indices)
  return _internal_series_indices(index);
}
inline void CommandSetPieWedgeExplosion::set_series_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  series_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetPieWedgeExplosion.series_indices)
}
inline void CommandSetPieWedgeExplosion::_internal_add_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  series_indices_.Add(value);
}
inline void CommandSetPieWedgeExplosion::add_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_series_indices(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandSetPieWedgeExplosion.series_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSetPieWedgeExplosion::_internal_series_indices() const {
  return series_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSetPieWedgeExplosion::series_indices() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetPieWedgeExplosion.series_indices)
  return _internal_series_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSetPieWedgeExplosion::_internal_mutable_series_indices() {
  return &series_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSetPieWedgeExplosion::mutable_series_indices() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetPieWedgeExplosion.series_indices)
  return _internal_mutable_series_indices();
}

// repeated double wedge_explosions = 3;
inline int CommandSetPieWedgeExplosion::_internal_wedge_explosions_size() const {
  return wedge_explosions_.size();
}
inline int CommandSetPieWedgeExplosion::wedge_explosions_size() const {
  return _internal_wedge_explosions_size();
}
inline void CommandSetPieWedgeExplosion::clear_wedge_explosions() {
  wedge_explosions_.Clear();
}
inline double CommandSetPieWedgeExplosion::_internal_wedge_explosions(int index) const {
  return wedge_explosions_.Get(index);
}
inline double CommandSetPieWedgeExplosion::wedge_explosions(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.wedge_explosions)
  return _internal_wedge_explosions(index);
}
inline void CommandSetPieWedgeExplosion::set_wedge_explosions(int index, double value) {
  wedge_explosions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetPieWedgeExplosion.wedge_explosions)
}
inline void CommandSetPieWedgeExplosion::_internal_add_wedge_explosions(double value) {
  wedge_explosions_.Add(value);
}
inline void CommandSetPieWedgeExplosion::add_wedge_explosions(double value) {
  _internal_add_wedge_explosions(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandSetPieWedgeExplosion.wedge_explosions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetPieWedgeExplosion::_internal_wedge_explosions() const {
  return wedge_explosions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetPieWedgeExplosion::wedge_explosions() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetPieWedgeExplosion.wedge_explosions)
  return _internal_wedge_explosions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetPieWedgeExplosion::_internal_mutable_wedge_explosions() {
  return &wedge_explosions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetPieWedgeExplosion::mutable_wedge_explosions() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetPieWedgeExplosion.wedge_explosions)
  return _internal_mutable_wedge_explosions();
}

// repeated uint32 old_series_indices = 5;
inline int CommandSetPieWedgeExplosion::_internal_old_series_indices_size() const {
  return old_series_indices_.size();
}
inline int CommandSetPieWedgeExplosion::old_series_indices_size() const {
  return _internal_old_series_indices_size();
}
inline void CommandSetPieWedgeExplosion::clear_old_series_indices() {
  old_series_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPieWedgeExplosion::_internal_old_series_indices(int index) const {
  return old_series_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPieWedgeExplosion::old_series_indices(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.old_series_indices)
  return _internal_old_series_indices(index);
}
inline void CommandSetPieWedgeExplosion::set_old_series_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_series_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetPieWedgeExplosion.old_series_indices)
}
inline void CommandSetPieWedgeExplosion::_internal_add_old_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_series_indices_.Add(value);
}
inline void CommandSetPieWedgeExplosion::add_old_series_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_series_indices(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandSetPieWedgeExplosion.old_series_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSetPieWedgeExplosion::_internal_old_series_indices() const {
  return old_series_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSetPieWedgeExplosion::old_series_indices() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetPieWedgeExplosion.old_series_indices)
  return _internal_old_series_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSetPieWedgeExplosion::_internal_mutable_old_series_indices() {
  return &old_series_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSetPieWedgeExplosion::mutable_old_series_indices() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetPieWedgeExplosion.old_series_indices)
  return _internal_mutable_old_series_indices();
}

// repeated double old_wedge_explosions = 6;
inline int CommandSetPieWedgeExplosion::_internal_old_wedge_explosions_size() const {
  return old_wedge_explosions_.size();
}
inline int CommandSetPieWedgeExplosion::old_wedge_explosions_size() const {
  return _internal_old_wedge_explosions_size();
}
inline void CommandSetPieWedgeExplosion::clear_old_wedge_explosions() {
  old_wedge_explosions_.Clear();
}
inline double CommandSetPieWedgeExplosion::_internal_old_wedge_explosions(int index) const {
  return old_wedge_explosions_.Get(index);
}
inline double CommandSetPieWedgeExplosion::old_wedge_explosions(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.old_wedge_explosions)
  return _internal_old_wedge_explosions(index);
}
inline void CommandSetPieWedgeExplosion::set_old_wedge_explosions(int index, double value) {
  old_wedge_explosions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetPieWedgeExplosion.old_wedge_explosions)
}
inline void CommandSetPieWedgeExplosion::_internal_add_old_wedge_explosions(double value) {
  old_wedge_explosions_.Add(value);
}
inline void CommandSetPieWedgeExplosion::add_old_wedge_explosions(double value) {
  _internal_add_old_wedge_explosions(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandSetPieWedgeExplosion.old_wedge_explosions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetPieWedgeExplosion::_internal_old_wedge_explosions() const {
  return old_wedge_explosions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandSetPieWedgeExplosion::old_wedge_explosions() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandSetPieWedgeExplosion.old_wedge_explosions)
  return _internal_old_wedge_explosions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetPieWedgeExplosion::_internal_mutable_old_wedge_explosions() {
  return &old_wedge_explosions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandSetPieWedgeExplosion::mutable_old_wedge_explosions() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandSetPieWedgeExplosion.old_wedge_explosions)
  return _internal_mutable_old_wedge_explosions();
}

// optional .TSP.Reference rollback_cmd = 7;
inline bool CommandSetPieWedgeExplosion::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.rollback_cmd)
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.rollback_cmd)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000002u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.rollback_cmd)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.rollback_cmd)
}

// -------------------------------------------------------------------

// CommandChartApplyTheme

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool CommandChartApplyTheme::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandChartApplyTheme::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandChartApplyTheme::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.super)
  return _internal_super();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.super)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.super)
}

// required .TSP.Reference info = 2;
inline bool CommandChartApplyTheme::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::info() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.info)
  return _internal_info();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.info)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.info)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.info)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.info)
}

// optional .TSP.Reference swap_command = 3;
inline bool CommandChartApplyTheme::_internal_has_swap_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || swap_command_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_swap_command() const {
  return _internal_has_swap_command();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_swap_command() const {
  const ::TSP::Reference* p = swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.swap_command)
  return _internal_swap_command();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_swap_command(
    ::TSP::Reference* swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_command_);
  }
  swap_command_ = swap_command;
  if (swap_command) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.swap_command)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_swap_command() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = swap_command_;
  swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.swap_command)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = swap_command_;
  swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_swap_command() {
  _has_bits_[0] |= 0x00000004u;
  if (swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    swap_command_ = p;
  }
  return swap_command_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.swap_command)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_swap_command(::TSP::Reference* swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_command_);
  }
  if (swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_command));
    if (message_arena != submessage_arena) {
      swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  swap_command_ = swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.swap_command)
}

// optional .TSP.Reference preset = 4;
inline bool CommandChartApplyTheme::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.preset)
  return _internal_preset();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.preset)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_preset() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.preset)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000008u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.preset)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.preset)
}

// -------------------------------------------------------------------

// CommandChartApplyPreset

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartApplyPreset::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_super() const {
  return _internal_has_super();
}
inline void CommandChartApplyPreset::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandChartApplyPreset::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartApplyPreset::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.super)
  return _internal_super();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.super)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.super)
}

// optional .TSCH.ApplyPresetBehavior behavior = 2 [default = remove_overrides];
inline bool CommandChartApplyPreset::_internal_has_behavior() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandChartApplyPreset::has_behavior() const {
  return _internal_has_behavior();
}
inline void CommandChartApplyPreset::clear_behavior() {
  behavior_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSCH::ApplyPresetBehavior CommandChartApplyPreset::_internal_behavior() const {
  return static_cast< ::TSCH::ApplyPresetBehavior >(behavior_);
}
inline ::TSCH::ApplyPresetBehavior CommandChartApplyPreset::behavior() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.behavior)
  return _internal_behavior();
}
inline void CommandChartApplyPreset::_internal_set_behavior(::TSCH::ApplyPresetBehavior value) {
  assert(::TSCH::ApplyPresetBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  behavior_ = value;
}
inline void CommandChartApplyPreset::set_behavior(::TSCH::ApplyPresetBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandChartApplyPreset.behavior)
}

// optional .TSP.Reference preset = 3;
inline bool CommandChartApplyPreset::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyPreset::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyPreset::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.preset)
  return _internal_preset();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.preset)
}
inline ::TSP::Reference* CommandChartApplyPreset::release_preset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.preset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000002u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.preset)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.preset)
}

// optional .TSP.Reference old_preset = 4;
inline bool CommandChartApplyPreset::_internal_has_old_preset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_old_preset() const {
  return _internal_has_old_preset();
}
inline const ::TSP::Reference& CommandChartApplyPreset::_internal_old_preset() const {
  const ::TSP::Reference* p = old_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyPreset::old_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.old_preset)
  return _internal_old_preset();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_old_preset(
    ::TSP::Reference* old_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset_);
  }
  old_preset_ = old_preset;
  if (old_preset) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.old_preset)
}
inline ::TSP::Reference* CommandChartApplyPreset::release_old_preset() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::unsafe_arena_release_old_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.old_preset)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::_internal_mutable_old_preset() {
  _has_bits_[0] |= 0x00000004u;
  if (old_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_preset_ = p;
  }
  return old_preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_old_preset() {
  ::TSP::Reference* _msg = _internal_mutable_old_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.old_preset)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_old_preset(::TSP::Reference* old_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset_);
  }
  if (old_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset));
    if (message_arena != submessage_arena) {
      old_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_preset_ = old_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.old_preset)
}

// optional bool should_apply_swap_tuples = 5;
inline bool CommandChartApplyPreset::_internal_has_should_apply_swap_tuples() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandChartApplyPreset::has_should_apply_swap_tuples() const {
  return _internal_has_should_apply_swap_tuples();
}
inline void CommandChartApplyPreset::clear_should_apply_swap_tuples() {
  should_apply_swap_tuples_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandChartApplyPreset::_internal_should_apply_swap_tuples() const {
  return should_apply_swap_tuples_;
}
inline bool CommandChartApplyPreset::should_apply_swap_tuples() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.should_apply_swap_tuples)
  return _internal_should_apply_swap_tuples();
}
inline void CommandChartApplyPreset::_internal_set_should_apply_swap_tuples(bool value) {
  _has_bits_[0] |= 0x00000010u;
  should_apply_swap_tuples_ = value;
}
inline void CommandChartApplyPreset::set_should_apply_swap_tuples(bool value) {
  _internal_set_should_apply_swap_tuples(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandChartApplyPreset.should_apply_swap_tuples)
}

// optional bool are_swap_tuples_valid = 6;
inline bool CommandChartApplyPreset::_internal_has_are_swap_tuples_valid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandChartApplyPreset::has_are_swap_tuples_valid() const {
  return _internal_has_are_swap_tuples_valid();
}
inline void CommandChartApplyPreset::clear_are_swap_tuples_valid() {
  are_swap_tuples_valid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandChartApplyPreset::_internal_are_swap_tuples_valid() const {
  return are_swap_tuples_valid_;
}
inline bool CommandChartApplyPreset::are_swap_tuples_valid() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.are_swap_tuples_valid)
  return _internal_are_swap_tuples_valid();
}
inline void CommandChartApplyPreset::_internal_set_are_swap_tuples_valid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  are_swap_tuples_valid_ = value;
}
inline void CommandChartApplyPreset::set_are_swap_tuples_valid(bool value) {
  _internal_set_are_swap_tuples_valid(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandChartApplyPreset.are_swap_tuples_valid)
}

// repeated .TSCH.StyleSwapUndoTupleArchive swap_tuples = 7;
inline int CommandChartApplyPreset::_internal_swap_tuples_size() const {
  return swap_tuples_.size();
}
inline int CommandChartApplyPreset::swap_tuples_size() const {
  return _internal_swap_tuples_size();
}
inline void CommandChartApplyPreset::clear_swap_tuples() {
  swap_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::mutable_swap_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.swap_tuples)
  return swap_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandChartApplyPreset::mutable_swap_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandChartApplyPreset.swap_tuples)
  return &swap_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::_internal_swap_tuples(int index) const {
  return swap_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::swap_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.swap_tuples)
  return _internal_swap_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::_internal_add_swap_tuples() {
  return swap_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::add_swap_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_swap_tuples();
  // @@protoc_insertion_point(field_add:TSCH.CommandChartApplyPreset.swap_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandChartApplyPreset::swap_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandChartApplyPreset.swap_tuples)
  return swap_tuples_;
}

// repeated .TSCH.StyleSwapUndoTupleArchive inverse_swap_tuples = 8;
inline int CommandChartApplyPreset::_internal_inverse_swap_tuples_size() const {
  return inverse_swap_tuples_.size();
}
inline int CommandChartApplyPreset::inverse_swap_tuples_size() const {
  return _internal_inverse_swap_tuples_size();
}
inline void CommandChartApplyPreset::clear_inverse_swap_tuples() {
  inverse_swap_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::mutable_inverse_swap_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.inverse_swap_tuples)
  return inverse_swap_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandChartApplyPreset::mutable_inverse_swap_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandChartApplyPreset.inverse_swap_tuples)
  return &inverse_swap_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::_internal_inverse_swap_tuples(int index) const {
  return inverse_swap_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::inverse_swap_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.inverse_swap_tuples)
  return _internal_inverse_swap_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::_internal_add_inverse_swap_tuples() {
  return inverse_swap_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::add_inverse_swap_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_inverse_swap_tuples();
  // @@protoc_insertion_point(field_add:TSCH.CommandChartApplyPreset.inverse_swap_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandChartApplyPreset::inverse_swap_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandChartApplyPreset.inverse_swap_tuples)
  return inverse_swap_tuples_;
}

// optional .TSP.Reference rollback_preset = 9;
inline bool CommandChartApplyPreset::_internal_has_rollback_preset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rollback_preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_rollback_preset() const {
  return _internal_has_rollback_preset();
}
inline const ::TSP::Reference& CommandChartApplyPreset::_internal_rollback_preset() const {
  const ::TSP::Reference* p = rollback_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyPreset::rollback_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.rollback_preset)
  return _internal_rollback_preset();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_rollback_preset(
    ::TSP::Reference* rollback_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_preset_);
  }
  rollback_preset_ = rollback_preset;
  if (rollback_preset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.rollback_preset)
}
inline ::TSP::Reference* CommandChartApplyPreset::release_rollback_preset() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = rollback_preset_;
  rollback_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::unsafe_arena_release_rollback_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.rollback_preset)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = rollback_preset_;
  rollback_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::_internal_mutable_rollback_preset() {
  _has_bits_[0] |= 0x00000008u;
  if (rollback_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_preset_ = p;
  }
  return rollback_preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_rollback_preset() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.rollback_preset)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_rollback_preset(::TSP::Reference* rollback_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_preset_);
  }
  if (rollback_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_preset));
    if (message_arena != submessage_arena) {
      rollback_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rollback_preset_ = rollback_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.rollback_preset)
}

// repeated .TSCH.StyleSwapUndoTupleArchive rollback_swap_tuples = 10;
inline int CommandChartApplyPreset::_internal_rollback_swap_tuples_size() const {
  return rollback_swap_tuples_.size();
}
inline int CommandChartApplyPreset::rollback_swap_tuples_size() const {
  return _internal_rollback_swap_tuples_size();
}
inline void CommandChartApplyPreset::clear_rollback_swap_tuples() {
  rollback_swap_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::mutable_rollback_swap_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.rollback_swap_tuples)
  return rollback_swap_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandChartApplyPreset::mutable_rollback_swap_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandChartApplyPreset.rollback_swap_tuples)
  return &rollback_swap_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::_internal_rollback_swap_tuples(int index) const {
  return rollback_swap_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandChartApplyPreset::rollback_swap_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.rollback_swap_tuples)
  return _internal_rollback_swap_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::_internal_add_rollback_swap_tuples() {
  return rollback_swap_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandChartApplyPreset::add_rollback_swap_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_rollback_swap_tuples();
  // @@protoc_insertion_point(field_add:TSCH.CommandChartApplyPreset.rollback_swap_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandChartApplyPreset::rollback_swap_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandChartApplyPreset.rollback_swap_tuples)
  return rollback_swap_tuples_;
}

// -------------------------------------------------------------------

// CommandCleanupGeometryArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandCleanupGeometryArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCleanupGeometryArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandCleanupGeometryArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandCleanupGeometryArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.super)
  return _internal_super();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.super)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.super)
}

// optional .TSP.Reference info_geometry_command = 2;
inline bool CommandCleanupGeometryArchive::_internal_has_info_geometry_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_geometry_command_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_info_geometry_command() const {
  return _internal_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::_internal_info_geometry_command() const {
  const ::TSP::Reference* p = info_geometry_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::info_geometry_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  return _internal_info_geometry_command();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_info_geometry_command(
    ::TSP::Reference* info_geometry_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command_);
  }
  info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_info_geometry_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_geometry_command_;
  info_geometry_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::unsafe_arena_release_info_geometry_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_geometry_command_;
  info_geometry_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::_internal_mutable_info_geometry_command() {
  _has_bits_[0] |= 0x00000002u;
  if (info_geometry_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    info_geometry_command_ = p;
  }
  return info_geometry_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_info_geometry_command() {
  ::TSP::Reference* _msg = _internal_mutable_info_geometry_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command_);
  }
  if (info_geometry_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command));
    if (message_arena != submessage_arena) {
      info_geometry_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_geometry_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_geometry_command_ = info_geometry_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
}

// optional .TSP.Reference anchor_attachment_command = 3;
inline bool CommandCleanupGeometryArchive::_internal_has_anchor_attachment_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || anchor_attachment_command_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_anchor_attachment_command() const {
  return _internal_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::_internal_anchor_attachment_command() const {
  const ::TSP::Reference* p = anchor_attachment_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::anchor_attachment_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  return _internal_anchor_attachment_command();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_anchor_attachment_command(
    ::TSP::Reference* anchor_attachment_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command_);
  }
  anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_anchor_attachment_command() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = anchor_attachment_command_;
  anchor_attachment_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::unsafe_arena_release_anchor_attachment_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = anchor_attachment_command_;
  anchor_attachment_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::_internal_mutable_anchor_attachment_command() {
  _has_bits_[0] |= 0x00000004u;
  if (anchor_attachment_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    anchor_attachment_command_ = p;
  }
  return anchor_attachment_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_anchor_attachment_command() {
  ::TSP::Reference* _msg = _internal_mutable_anchor_attachment_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command_);
  }
  if (anchor_attachment_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command));
    if (message_arena != submessage_arena) {
      anchor_attachment_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_attachment_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  anchor_attachment_command_ = anchor_attachment_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
}

// optional .TSCH.RectArchive original_legend_rect = 4;
inline bool CommandCleanupGeometryArchive::_internal_has_original_legend_rect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || original_legend_rect_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_original_legend_rect() const {
  return _internal_has_original_legend_rect();
}
inline const ::TSCH::RectArchive& CommandCleanupGeometryArchive::_internal_original_legend_rect() const {
  const ::TSCH::RectArchive* p = original_legend_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandCleanupGeometryArchive::original_legend_rect() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  return _internal_original_legend_rect();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_original_legend_rect(
    ::TSCH::RectArchive* original_legend_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_legend_rect_);
  }
  original_legend_rect_ = original_legend_rect;
  if (original_legend_rect) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::release_original_legend_rect() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = original_legend_rect_;
  original_legend_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::unsafe_arena_release_original_legend_rect() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = original_legend_rect_;
  original_legend_rect_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::_internal_mutable_original_legend_rect() {
  _has_bits_[0] |= 0x00000008u;
  if (original_legend_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    original_legend_rect_ = p;
  }
  return original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::mutable_original_legend_rect() {
  ::TSCH::RectArchive* _msg = _internal_mutable_original_legend_rect();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_legend_rect_);
  }
  if (original_legend_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_legend_rect));
    if (message_arena != submessage_arena) {
      original_legend_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_legend_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  original_legend_rect_ = original_legend_rect;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
}

// -------------------------------------------------------------------

// ChartCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChartCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChartCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChartCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.super)
  return _internal_super();
}
inline void ChartCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCommandArchive.super)
}
inline ::TSK::CommandArchive* ChartCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ChartCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChartCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChartCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCommandArchive.super)
  return _msg;
}
inline void ChartCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCommandArchive.super)
}

// optional .TSP.Reference chart_info = 2;
inline bool ChartCommandArchive::_internal_has_chart_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chart_info_ != nullptr);
  return value;
}
inline bool ChartCommandArchive::has_chart_info() const {
  return _internal_has_chart_info();
}
inline const ::TSP::Reference& ChartCommandArchive::_internal_chart_info() const {
  const ::TSP::Reference* p = chart_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartCommandArchive::chart_info() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.chart_info)
  return _internal_chart_info();
}
inline void ChartCommandArchive::unsafe_arena_set_allocated_chart_info(
    ::TSP::Reference* chart_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_);
  }
  chart_info_ = chart_info;
  if (chart_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCommandArchive.chart_info)
}
inline ::TSP::Reference* ChartCommandArchive::release_chart_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartCommandArchive::unsafe_arena_release_chart_info() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCommandArchive.chart_info)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = chart_info_;
  chart_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartCommandArchive::_internal_mutable_chart_info() {
  _has_bits_[0] |= 0x00000002u;
  if (chart_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    chart_info_ = p;
  }
  return chart_info_;
}
inline ::TSP::Reference* ChartCommandArchive::mutable_chart_info() {
  ::TSP::Reference* _msg = _internal_mutable_chart_info();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCommandArchive.chart_info)
  return _msg;
}
inline void ChartCommandArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_);
  }
  if (chart_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info));
    if (message_arena != submessage_arena) {
      chart_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chart_info_ = chart_info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCommandArchive.chart_info)
}

// optional bool original_dirty_state = 3;
inline bool ChartCommandArchive::_internal_has_original_dirty_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartCommandArchive::has_original_dirty_state() const {
  return _internal_has_original_dirty_state();
}
inline void ChartCommandArchive::clear_original_dirty_state() {
  original_dirty_state_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChartCommandArchive::_internal_original_dirty_state() const {
  return original_dirty_state_;
}
inline bool ChartCommandArchive::original_dirty_state() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.original_dirty_state)
  return _internal_original_dirty_state();
}
inline void ChartCommandArchive::_internal_set_original_dirty_state(bool value) {
  _has_bits_[0] |= 0x00000008u;
  original_dirty_state_ = value;
}
inline void ChartCommandArchive::set_original_dirty_state(bool value) {
  _internal_set_original_dirty_state(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCommandArchive.original_dirty_state)
}

// optional .TSP.UUIDPath chart_info_id_path = 4;
inline bool ChartCommandArchive::_internal_has_chart_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || chart_info_id_path_ != nullptr);
  return value;
}
inline bool ChartCommandArchive::has_chart_info_id_path() const {
  return _internal_has_chart_info_id_path();
}
inline const ::TSP::UUIDPath& ChartCommandArchive::_internal_chart_info_id_path() const {
  const ::TSP::UUIDPath* p = chart_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ChartCommandArchive::chart_info_id_path() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.chart_info_id_path)
  return _internal_chart_info_id_path();
}
inline void ChartCommandArchive::unsafe_arena_set_allocated_chart_info_id_path(
    ::TSP::UUIDPath* chart_info_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_id_path_);
  }
  chart_info_id_path_ = chart_info_id_path;
  if (chart_info_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCommandArchive.chart_info_id_path)
}
inline ::TSP::UUIDPath* ChartCommandArchive::release_chart_info_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = chart_info_id_path_;
  chart_info_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* ChartCommandArchive::unsafe_arena_release_chart_info_id_path() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCommandArchive.chart_info_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = chart_info_id_path_;
  chart_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ChartCommandArchive::_internal_mutable_chart_info_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (chart_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    chart_info_id_path_ = p;
  }
  return chart_info_id_path_;
}
inline ::TSP::UUIDPath* ChartCommandArchive::mutable_chart_info_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_chart_info_id_path();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCommandArchive.chart_info_id_path)
  return _msg;
}
inline void ChartCommandArchive::set_allocated_chart_info_id_path(::TSP::UUIDPath* chart_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_id_path_);
  }
  if (chart_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info_id_path));
    if (message_arena != submessage_arena) {
      chart_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chart_info_id_path_ = chart_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCommandArchive.chart_info_id_path)
}

// optional bool is_for_forward_undo_redo = 5;
inline bool ChartCommandArchive::_internal_has_is_for_forward_undo_redo() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartCommandArchive::has_is_for_forward_undo_redo() const {
  return _internal_has_is_for_forward_undo_redo();
}
inline void ChartCommandArchive::clear_is_for_forward_undo_redo() {
  is_for_forward_undo_redo_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChartCommandArchive::_internal_is_for_forward_undo_redo() const {
  return is_for_forward_undo_redo_;
}
inline bool ChartCommandArchive::is_for_forward_undo_redo() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.is_for_forward_undo_redo)
  return _internal_is_for_forward_undo_redo();
}
inline void ChartCommandArchive::_internal_set_is_for_forward_undo_redo(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_for_forward_undo_redo_ = value;
}
inline void ChartCommandArchive::set_is_for_forward_undo_redo(bool value) {
  _internal_set_is_for_forward_undo_redo(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCommandArchive.is_for_forward_undo_redo)
}

// -------------------------------------------------------------------

// CommandReplaceGridValuesArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandReplaceGridValuesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceGridValuesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceGridValuesArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceGridValuesArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.super)
  return _internal_super();
}
inline void CommandReplaceGridValuesArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceGridValuesArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceGridValuesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.super)
  return _msg;
}
inline void CommandReplaceGridValuesArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceGridValuesArchive.super)
}

// repeated .TSCH.GridRow old_data_rows = 4;
inline int CommandReplaceGridValuesArchive::_internal_old_data_rows_size() const {
  return old_data_rows_.size();
}
inline int CommandReplaceGridValuesArchive::old_data_rows_size() const {
  return _internal_old_data_rows_size();
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::mutable_old_data_rows(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return old_data_rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
CommandReplaceGridValuesArchive::mutable_old_data_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return &old_data_rows_;
}
inline const ::TSCH::GridRow& CommandReplaceGridValuesArchive::_internal_old_data_rows(int index) const {
  return old_data_rows_.Get(index);
}
inline const ::TSCH::GridRow& CommandReplaceGridValuesArchive::old_data_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _internal_old_data_rows(index);
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::_internal_add_old_data_rows() {
  return old_data_rows_.Add();
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::add_old_data_rows() {
  ::TSCH::GridRow* _add = _internal_add_old_data_rows();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
CommandReplaceGridValuesArchive::old_data_rows() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return old_data_rows_;
}

// repeated .TSCH.GridRow new_data_rows = 5;
inline int CommandReplaceGridValuesArchive::_internal_new_data_rows_size() const {
  return new_data_rows_.size();
}
inline int CommandReplaceGridValuesArchive::new_data_rows_size() const {
  return _internal_new_data_rows_size();
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::mutable_new_data_rows(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return new_data_rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
CommandReplaceGridValuesArchive::mutable_new_data_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return &new_data_rows_;
}
inline const ::TSCH::GridRow& CommandReplaceGridValuesArchive::_internal_new_data_rows(int index) const {
  return new_data_rows_.Get(index);
}
inline const ::TSCH::GridRow& CommandReplaceGridValuesArchive::new_data_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _internal_new_data_rows(index);
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::_internal_add_new_data_rows() {
  return new_data_rows_.Add();
}
inline ::TSCH::GridRow* CommandReplaceGridValuesArchive::add_new_data_rows() {
  ::TSCH::GridRow* _add = _internal_add_new_data_rows();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
CommandReplaceGridValuesArchive::new_data_rows() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return new_data_rows_;
}

// repeated string old_row_names = 6;
inline int CommandReplaceGridValuesArchive::_internal_old_row_names_size() const {
  return old_row_names_.size();
}
inline int CommandReplaceGridValuesArchive::old_row_names_size() const {
  return _internal_old_row_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_old_row_names() {
  old_row_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_old_row_names() {
  std::string* _s = _internal_add_old_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_old_row_names(int index) const {
  return old_row_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::old_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _internal_old_row_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_old_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return old_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const std::string& value) {
  old_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, std::string&& value) {
  old_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value, size_t size) {
  old_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_old_row_names() {
  return old_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const std::string& value) {
  old_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(std::string&& value) {
  old_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value, size_t size) {
  old_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::old_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return old_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_old_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return &old_row_names_;
}

// repeated string new_row_names = 7;
inline int CommandReplaceGridValuesArchive::_internal_new_row_names_size() const {
  return new_row_names_.size();
}
inline int CommandReplaceGridValuesArchive::new_row_names_size() const {
  return _internal_new_row_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_new_row_names() {
  new_row_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_new_row_names() {
  std::string* _s = _internal_add_new_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_new_row_names(int index) const {
  return new_row_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::new_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _internal_new_row_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_new_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return new_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const std::string& value) {
  new_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, std::string&& value) {
  new_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value, size_t size) {
  new_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_new_row_names() {
  return new_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const std::string& value) {
  new_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(std::string&& value) {
  new_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value, size_t size) {
  new_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::new_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return new_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_new_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return &new_row_names_;
}

// repeated string old_col_names = 8;
inline int CommandReplaceGridValuesArchive::_internal_old_col_names_size() const {
  return old_col_names_.size();
}
inline int CommandReplaceGridValuesArchive::old_col_names_size() const {
  return _internal_old_col_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_old_col_names() {
  old_col_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_old_col_names() {
  std::string* _s = _internal_add_old_col_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_old_col_names(int index) const {
  return old_col_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::old_col_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _internal_old_col_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_old_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return old_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const std::string& value) {
  old_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, std::string&& value) {
  old_col_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value, size_t size) {
  old_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_old_col_names() {
  return old_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const std::string& value) {
  old_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(std::string&& value) {
  old_col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value, size_t size) {
  old_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::old_col_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return old_col_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_old_col_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return &old_col_names_;
}

// repeated string new_col_names = 9;
inline int CommandReplaceGridValuesArchive::_internal_new_col_names_size() const {
  return new_col_names_.size();
}
inline int CommandReplaceGridValuesArchive::new_col_names_size() const {
  return _internal_new_col_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_new_col_names() {
  new_col_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_new_col_names() {
  std::string* _s = _internal_add_new_col_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_new_col_names(int index) const {
  return new_col_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::new_col_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _internal_new_col_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_new_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return new_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const std::string& value) {
  new_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, std::string&& value) {
  new_col_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value, size_t size) {
  new_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_new_col_names() {
  return new_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const std::string& value) {
  new_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(std::string&& value) {
  new_col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value, size_t size) {
  new_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::new_col_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return new_col_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_new_col_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return &new_col_names_;
}

// repeated .TSP.UUID update_row_uuids = 10;
inline int CommandReplaceGridValuesArchive::_internal_update_row_uuids_size() const {
  return update_row_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::update_row_uuids_size() const {
  return _internal_update_row_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_update_row_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.update_row_uuids)
  return update_row_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_update_row_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.update_row_uuids)
  return &update_row_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_update_row_uuids(int index) const {
  return update_row_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::update_row_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.update_row_uuids)
  return _internal_update_row_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_update_row_uuids() {
  return update_row_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_update_row_uuids() {
  ::TSP::UUID* _add = _internal_add_update_row_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.update_row_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::update_row_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.update_row_uuids)
  return update_row_uuids_;
}

// repeated .TSP.UUID update_column_uuids = 11;
inline int CommandReplaceGridValuesArchive::_internal_update_column_uuids_size() const {
  return update_column_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::update_column_uuids_size() const {
  return _internal_update_column_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_update_column_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.update_column_uuids)
  return update_column_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_update_column_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.update_column_uuids)
  return &update_column_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_update_column_uuids(int index) const {
  return update_column_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::update_column_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.update_column_uuids)
  return _internal_update_column_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_update_column_uuids() {
  return update_column_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_update_column_uuids() {
  ::TSP::UUID* _add = _internal_add_update_column_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.update_column_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::update_column_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.update_column_uuids)
  return update_column_uuids_;
}

// repeated .TSP.UUID add_row_uuids = 12;
inline int CommandReplaceGridValuesArchive::_internal_add_row_uuids_size() const {
  return add_row_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::add_row_uuids_size() const {
  return _internal_add_row_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_add_row_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.add_row_uuids)
  return add_row_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_add_row_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.add_row_uuids)
  return &add_row_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_add_row_uuids(int index) const {
  return add_row_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::add_row_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.add_row_uuids)
  return _internal_add_row_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_add_row_uuids() {
  return add_row_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_add_row_uuids() {
  ::TSP::UUID* _add = _internal_add_add_row_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.add_row_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::add_row_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.add_row_uuids)
  return add_row_uuids_;
}

// repeated .TSP.UUID add_column_uuids = 13;
inline int CommandReplaceGridValuesArchive::_internal_add_column_uuids_size() const {
  return add_column_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::add_column_uuids_size() const {
  return _internal_add_column_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_add_column_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.add_column_uuids)
  return add_column_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_add_column_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.add_column_uuids)
  return &add_column_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_add_column_uuids(int index) const {
  return add_column_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::add_column_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.add_column_uuids)
  return _internal_add_column_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_add_column_uuids() {
  return add_column_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_add_column_uuids() {
  ::TSP::UUID* _add = _internal_add_add_column_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.add_column_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::add_column_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.add_column_uuids)
  return add_column_uuids_;
}

// repeated .TSP.UUID delete_row_uuids = 14;
inline int CommandReplaceGridValuesArchive::_internal_delete_row_uuids_size() const {
  return delete_row_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::delete_row_uuids_size() const {
  return _internal_delete_row_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_delete_row_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.delete_row_uuids)
  return delete_row_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_delete_row_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.delete_row_uuids)
  return &delete_row_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_delete_row_uuids(int index) const {
  return delete_row_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::delete_row_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.delete_row_uuids)
  return _internal_delete_row_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_delete_row_uuids() {
  return delete_row_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_delete_row_uuids() {
  ::TSP::UUID* _add = _internal_add_delete_row_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.delete_row_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::delete_row_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.delete_row_uuids)
  return delete_row_uuids_;
}

// repeated .TSP.UUID delete_column_uuids = 15;
inline int CommandReplaceGridValuesArchive::_internal_delete_column_uuids_size() const {
  return delete_column_uuids_.size();
}
inline int CommandReplaceGridValuesArchive::delete_column_uuids_size() const {
  return _internal_delete_column_uuids_size();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::mutable_delete_column_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.delete_column_uuids)
  return delete_column_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandReplaceGridValuesArchive::mutable_delete_column_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.delete_column_uuids)
  return &delete_column_uuids_;
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::_internal_delete_column_uuids(int index) const {
  return delete_column_uuids_.Get(index);
}
inline const ::TSP::UUID& CommandReplaceGridValuesArchive::delete_column_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.delete_column_uuids)
  return _internal_delete_column_uuids(index);
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::_internal_add_delete_column_uuids() {
  return delete_column_uuids_.Add();
}
inline ::TSP::UUID* CommandReplaceGridValuesArchive::add_delete_column_uuids() {
  ::TSP::UUID* _add = _internal_add_delete_column_uuids();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.delete_column_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandReplaceGridValuesArchive::delete_column_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.delete_column_uuids)
  return delete_column_uuids_;
}

// optional bool set_series_direction = 16;
inline bool CommandReplaceGridValuesArchive::_internal_has_set_series_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_set_series_direction() const {
  return _internal_has_set_series_direction();
}
inline void CommandReplaceGridValuesArchive::clear_set_series_direction() {
  set_series_direction_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CommandReplaceGridValuesArchive::_internal_set_series_direction() const {
  return set_series_direction_;
}
inline bool CommandReplaceGridValuesArchive::set_series_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.set_series_direction)
  return _internal_set_series_direction();
}
inline void CommandReplaceGridValuesArchive::_internal_set_set_series_direction(bool value) {
  _has_bits_[0] |= 0x00000002u;
  set_series_direction_ = value;
}
inline void CommandReplaceGridValuesArchive::set_set_series_direction(bool value) {
  _internal_set_set_series_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.set_series_direction)
}

// optional uint32 new_series_direction = 17;
inline bool CommandReplaceGridValuesArchive::_internal_has_new_series_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_new_series_direction() const {
  return _internal_has_new_series_direction();
}
inline void CommandReplaceGridValuesArchive::clear_new_series_direction() {
  new_series_direction_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceGridValuesArchive::_internal_new_series_direction() const {
  return new_series_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceGridValuesArchive::new_series_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_series_direction)
  return _internal_new_series_direction();
}
inline void CommandReplaceGridValuesArchive::_internal_set_new_series_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  new_series_direction_ = value;
}
inline void CommandReplaceGridValuesArchive::set_new_series_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_series_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_series_direction)
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive_StyleAndIdentifierPair

// required .TSP.Reference style = 1;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  return _internal_style();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000002u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  return _msg;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
}

// required string identifier = 2;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_identifier() const {
  return _internal_has_identifier();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::identifier() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  return _s;
}
inline const std::string& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_identifier() const {
  return identifier_.Get();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_identifier() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReplaceThemePresetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandReplaceThemePresetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandReplaceThemePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.super)
  return _internal_super();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.super)
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.super)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandReplaceThemePresetArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.theme)
  return _internal_theme();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.theme)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.theme)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.theme)
}

// optional .TSP.Reference old_preset = 3;
inline bool CommandReplaceThemePresetArchive::_internal_has_old_preset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_preset_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_old_preset() const {
  return _internal_has_old_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_old_preset() const {
  const ::TSP::Reference* p = old_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::old_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.old_preset)
  return _internal_old_preset();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_old_preset(
    ::TSP::Reference* old_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset_);
  }
  old_preset_ = old_preset;
  if (old_preset) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.old_preset)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_old_preset() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_old_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.old_preset)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_old_preset() {
  _has_bits_[0] |= 0x00000004u;
  if (old_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_preset_ = p;
  }
  return old_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_old_preset() {
  ::TSP::Reference* _msg = _internal_mutable_old_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.old_preset)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_old_preset(::TSP::Reference* old_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset_);
  }
  if (old_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset));
    if (message_arena != submessage_arena) {
      old_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_preset_ = old_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.old_preset)
}

// optional .TSP.Reference new_preset = 4;
inline bool CommandReplaceThemePresetArchive::_internal_has_new_preset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || new_preset_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_new_preset() const {
  return _internal_has_new_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_new_preset() const {
  const ::TSP::Reference* p = new_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::new_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.new_preset)
  return _internal_new_preset();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_new_preset(
    ::TSP::Reference* new_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_preset_);
  }
  new_preset_ = new_preset;
  if (new_preset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.new_preset)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_new_preset() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = new_preset_;
  new_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_new_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.new_preset)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = new_preset_;
  new_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_new_preset() {
  _has_bits_[0] |= 0x00000008u;
  if (new_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    new_preset_ = p;
  }
  return new_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_new_preset() {
  ::TSP::Reference* _msg = _internal_mutable_new_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.new_preset)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_new_preset(::TSP::Reference* new_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_preset_);
  }
  if (new_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_preset));
    if (message_arena != submessage_arena) {
      new_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  new_preset_ = new_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.new_preset)
}

// repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
inline int CommandReplaceThemePresetArchive::_internal_identifiers_size() const {
  return identifiers_.size();
}
inline int CommandReplaceThemePresetArchive::identifiers_size() const {
  return _internal_identifiers_size();
}
inline void CommandReplaceThemePresetArchive::clear_identifiers() {
  identifiers_.Clear();
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::mutable_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
CommandReplaceThemePresetArchive::mutable_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return &identifiers_;
}
inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive::_internal_identifiers(int index) const {
  return identifiers_.Get(index);
}
inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive::identifiers(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _internal_identifiers(index);
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::_internal_add_identifiers() {
  return identifiers_.Add();
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::add_identifiers() {
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* _add = _internal_add_identifiers();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
CommandReplaceThemePresetArchive::identifiers() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return identifiers_;
}

// optional uint64 old_preset_index = 6;
inline bool CommandReplaceThemePresetArchive::_internal_has_old_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_old_preset_index() const {
  return _internal_has_old_preset_index();
}
inline void CommandReplaceThemePresetArchive::clear_old_preset_index() {
  old_preset_index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReplaceThemePresetArchive::_internal_old_preset_index() const {
  return old_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandReplaceThemePresetArchive::old_preset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.old_preset_index)
  return _internal_old_preset_index();
}
inline void CommandReplaceThemePresetArchive::_internal_set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  old_preset_index_ = value;
}
inline void CommandReplaceThemePresetArchive::set_old_preset_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_old_preset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceThemePresetArchive.old_preset_index)
}

// -------------------------------------------------------------------

// CommandInvalidateWPCaches

// required .TSK.CommandArchive super = 1;
inline bool CommandInvalidateWPCaches::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandInvalidateWPCaches::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInvalidateWPCaches::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInvalidateWPCaches::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandInvalidateWPCaches.super)
  return _internal_super();
}
inline void CommandInvalidateWPCaches::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandInvalidateWPCaches.super)
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandInvalidateWPCaches.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandInvalidateWPCaches.super)
  return _msg;
}
inline void CommandInvalidateWPCaches::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandInvalidateWPCaches.super)
}

// -------------------------------------------------------------------

// CommandReplaceCustomFormatArchive_FormatObjectMutation

// optional .TSCH.StyleOwnerType style_owner_type = 1;
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_has_style_owner_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::has_style_owner_type() const {
  return _internal_has_style_owner_type();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::clear_style_owner_type() {
  style_owner_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCH::StyleOwnerType CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_style_owner_type() const {
  return static_cast< ::TSCH::StyleOwnerType >(style_owner_type_);
}
inline ::TSCH::StyleOwnerType CommandReplaceCustomFormatArchive_FormatObjectMutation::style_owner_type() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.style_owner_type)
  return _internal_style_owner_type();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_set_style_owner_type(::TSCH::StyleOwnerType value) {
  assert(::TSCH::StyleOwnerType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  style_owner_type_ = value;
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::set_style_owner_type(::TSCH::StyleOwnerType value) {
  _internal_set_style_owner_type(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.style_owner_type)
}

// optional uint32 style_owner_index = 2;
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_has_style_owner_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::has_style_owner_index() const {
  return _internal_has_style_owner_index();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::clear_style_owner_index() {
  style_owner_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_style_owner_index() const {
  return style_owner_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceCustomFormatArchive_FormatObjectMutation::style_owner_index() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.style_owner_index)
  return _internal_style_owner_index();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_set_style_owner_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  style_owner_index_ = value;
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::set_style_owner_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style_owner_index(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.style_owner_index)
}

// optional uint32 format_object_property = 3;
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_has_format_object_property() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::has_format_object_property() const {
  return _internal_has_format_object_property();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::clear_format_object_property() {
  format_object_property_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_format_object_property() const {
  return format_object_property_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandReplaceCustomFormatArchive_FormatObjectMutation::format_object_property() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object_property)
  return _internal_format_object_property();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_set_format_object_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  format_object_property_ = value;
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::set_format_object_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_object_property(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object_property)
}

// optional .TSK.FormatStructArchive format_object = 4;
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_has_format_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || format_object_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive_FormatObjectMutation::has_format_object() const {
  return _internal_has_format_object();
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_format_object() const {
  const ::TSK::FormatStructArchive* p = format_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive_FormatObjectMutation::format_object() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object)
  return _internal_format_object();
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::unsafe_arena_set_allocated_format_object(
    ::TSK::FormatStructArchive* format_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_object_);
  }
  format_object_ = format_object;
  if (format_object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object)
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive_FormatObjectMutation::release_format_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_object_;
  format_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive_FormatObjectMutation::unsafe_arena_release_format_object() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_object_;
  format_object_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive_FormatObjectMutation::_internal_mutable_format_object() {
  _has_bits_[0] |= 0x00000001u;
  if (format_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    format_object_ = p;
  }
  return format_object_;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive_FormatObjectMutation::mutable_format_object() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_format_object();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive_FormatObjectMutation::set_allocated_format_object(::TSK::FormatStructArchive* format_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_object_);
  }
  if (format_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_object));
    if (message_arena != submessage_arena) {
      format_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_object_ = format_object;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object)
}

// -------------------------------------------------------------------

// CommandReplaceCustomFormatArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandReplaceCustomFormatArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceCustomFormatArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceCustomFormatArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceCustomFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.super)
  return _internal_super();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceCustomFormatArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandReplaceCustomFormatArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceCustomFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceCustomFormatArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceCustomFormatArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceCustomFormatArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.super)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceCustomFormatArchive.super)
}

// optional .TSP.Reference rollback_cmd = 2;
inline bool CommandReplaceCustomFormatArchive::_internal_has_rollback_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rollback_cmd_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_rollback_cmd() const {
  return _internal_has_rollback_cmd();
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::_internal_rollback_cmd() const {
  const ::TSP::Reference* p = rollback_cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceCustomFormatArchive::rollback_cmd() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.rollback_cmd)
  return _internal_rollback_cmd();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_rollback_cmd(
    ::TSP::Reference* rollback_cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  rollback_cmd_ = rollback_cmd;
  if (rollback_cmd) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceCustomFormatArchive.rollback_cmd)
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::release_rollback_cmd() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::unsafe_arena_release_rollback_cmd() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceCustomFormatArchive.rollback_cmd)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = rollback_cmd_;
  rollback_cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::_internal_mutable_rollback_cmd() {
  _has_bits_[0] |= 0x00000002u;
  if (rollback_cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    rollback_cmd_ = p;
  }
  return rollback_cmd_;
}
inline ::TSP::Reference* CommandReplaceCustomFormatArchive::mutable_rollback_cmd() {
  ::TSP::Reference* _msg = _internal_mutable_rollback_cmd();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.rollback_cmd)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_rollback_cmd(::TSP::Reference* rollback_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd_);
  }
  if (rollback_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_cmd));
    if (message_arena != submessage_arena) {
      rollback_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rollback_cmd_ = rollback_cmd;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceCustomFormatArchive.rollback_cmd)
}

// optional .TSK.FormatStructArchive old_format_object = 3;
inline bool CommandReplaceCustomFormatArchive::_internal_has_old_format_object() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_format_object_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_old_format_object() const {
  return _internal_has_old_format_object();
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive::_internal_old_format_object() const {
  const ::TSK::FormatStructArchive* p = old_format_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive::old_format_object() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.old_format_object)
  return _internal_old_format_object();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_old_format_object(
    ::TSK::FormatStructArchive* old_format_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_format_object_);
  }
  old_format_object_ = old_format_object;
  if (old_format_object) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceCustomFormatArchive.old_format_object)
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::release_old_format_object() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = old_format_object_;
  old_format_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::unsafe_arena_release_old_format_object() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceCustomFormatArchive.old_format_object)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = old_format_object_;
  old_format_object_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::_internal_mutable_old_format_object() {
  _has_bits_[0] |= 0x00000004u;
  if (old_format_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    old_format_object_ = p;
  }
  return old_format_object_;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::mutable_old_format_object() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_old_format_object();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.old_format_object)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_old_format_object(::TSK::FormatStructArchive* old_format_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_format_object_);
  }
  if (old_format_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_format_object));
    if (message_arena != submessage_arena) {
      old_format_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_format_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_format_object_ = old_format_object;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceCustomFormatArchive.old_format_object)
}

// optional .TSK.FormatStructArchive new_format_object = 4;
inline bool CommandReplaceCustomFormatArchive::_internal_has_new_format_object() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || new_format_object_ != nullptr);
  return value;
}
inline bool CommandReplaceCustomFormatArchive::has_new_format_object() const {
  return _internal_has_new_format_object();
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive::_internal_new_format_object() const {
  const ::TSK::FormatStructArchive* p = new_format_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CommandReplaceCustomFormatArchive::new_format_object() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.new_format_object)
  return _internal_new_format_object();
}
inline void CommandReplaceCustomFormatArchive::unsafe_arena_set_allocated_new_format_object(
    ::TSK::FormatStructArchive* new_format_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_format_object_);
  }
  new_format_object_ = new_format_object;
  if (new_format_object) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceCustomFormatArchive.new_format_object)
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::release_new_format_object() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = new_format_object_;
  new_format_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::unsafe_arena_release_new_format_object() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceCustomFormatArchive.new_format_object)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = new_format_object_;
  new_format_object_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::_internal_mutable_new_format_object() {
  _has_bits_[0] |= 0x00000008u;
  if (new_format_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    new_format_object_ = p;
  }
  return new_format_object_;
}
inline ::TSK::FormatStructArchive* CommandReplaceCustomFormatArchive::mutable_new_format_object() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_new_format_object();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.new_format_object)
  return _msg;
}
inline void CommandReplaceCustomFormatArchive::set_allocated_new_format_object(::TSK::FormatStructArchive* new_format_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_format_object_);
  }
  if (new_format_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_format_object));
    if (message_arena != submessage_arena) {
      new_format_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_format_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  new_format_object_ = new_format_object;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceCustomFormatArchive.new_format_object)
}

// repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation forward_mutations = 5;
inline int CommandReplaceCustomFormatArchive::_internal_forward_mutations_size() const {
  return forward_mutations_.size();
}
inline int CommandReplaceCustomFormatArchive::forward_mutations_size() const {
  return _internal_forward_mutations_size();
}
inline void CommandReplaceCustomFormatArchive::clear_forward_mutations() {
  forward_mutations_.Clear();
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::mutable_forward_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.forward_mutations)
  return forward_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >*
CommandReplaceCustomFormatArchive::mutable_forward_mutations() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceCustomFormatArchive.forward_mutations)
  return &forward_mutations_;
}
inline const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& CommandReplaceCustomFormatArchive::_internal_forward_mutations(int index) const {
  return forward_mutations_.Get(index);
}
inline const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& CommandReplaceCustomFormatArchive::forward_mutations(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.forward_mutations)
  return _internal_forward_mutations(index);
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::_internal_add_forward_mutations() {
  return forward_mutations_.Add();
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::add_forward_mutations() {
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* _add = _internal_add_forward_mutations();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceCustomFormatArchive.forward_mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >&
CommandReplaceCustomFormatArchive::forward_mutations() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceCustomFormatArchive.forward_mutations)
  return forward_mutations_;
}

// repeated .TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation reverse_mutations = 6;
inline int CommandReplaceCustomFormatArchive::_internal_reverse_mutations_size() const {
  return reverse_mutations_.size();
}
inline int CommandReplaceCustomFormatArchive::reverse_mutations_size() const {
  return _internal_reverse_mutations_size();
}
inline void CommandReplaceCustomFormatArchive::clear_reverse_mutations() {
  reverse_mutations_.Clear();
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::mutable_reverse_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceCustomFormatArchive.reverse_mutations)
  return reverse_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >*
CommandReplaceCustomFormatArchive::mutable_reverse_mutations() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceCustomFormatArchive.reverse_mutations)
  return &reverse_mutations_;
}
inline const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& CommandReplaceCustomFormatArchive::_internal_reverse_mutations(int index) const {
  return reverse_mutations_.Get(index);
}
inline const ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation& CommandReplaceCustomFormatArchive::reverse_mutations(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceCustomFormatArchive.reverse_mutations)
  return _internal_reverse_mutations(index);
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::_internal_add_reverse_mutations() {
  return reverse_mutations_.Add();
}
inline ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* CommandReplaceCustomFormatArchive::add_reverse_mutations() {
  ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation* _add = _internal_add_reverse_mutations();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceCustomFormatArchive.reverse_mutations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceCustomFormatArchive_FormatObjectMutation >&
CommandReplaceCustomFormatArchive::reverse_mutations() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceCustomFormatArchive.reverse_mutations)
  return reverse_mutations_;
}

// -------------------------------------------------------------------

// CommandAddReferenceLineArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddReferenceLineArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandAddReferenceLineArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddReferenceLineArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandAddReferenceLineArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandAddReferenceLineArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.super)
  return _internal_super();
}
inline void CommandAddReferenceLineArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddReferenceLineArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandAddReferenceLineArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddReferenceLineArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddReferenceLineArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddReferenceLineArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddReferenceLineArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.super)
  return _msg;
}
inline void CommandAddReferenceLineArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddReferenceLineArchive.super)
}

// required .TSCH.ChartAxisIDArchive axis_id = 2;
inline bool CommandAddReferenceLineArchive::_internal_has_axis_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || axis_id_ != nullptr);
  return value;
}
inline bool CommandAddReferenceLineArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline const ::TSCH::ChartAxisIDArchive& CommandAddReferenceLineArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& CommandAddReferenceLineArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.axis_id)
  return _internal_axis_id();
}
inline void CommandAddReferenceLineArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id_);
  }
  axis_id_ = axis_id;
  if (axis_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddReferenceLineArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* CommandAddReferenceLineArchive::release_axis_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartAxisIDArchive* temp = axis_id_;
  axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* CommandAddReferenceLineArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddReferenceLineArchive.axis_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartAxisIDArchive* temp = axis_id_;
  axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* CommandAddReferenceLineArchive::_internal_mutable_axis_id() {
  _has_bits_[0] |= 0x00000002u;
  if (axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    axis_id_ = p;
  }
  return axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* CommandAddReferenceLineArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.axis_id)
  return _msg;
}
inline void CommandAddReferenceLineArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id_);
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id));
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddReferenceLineArchive.axis_id)
}

// optional .TSP.UUID uuid = 3;
inline bool CommandAddReferenceLineArchive::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool CommandAddReferenceLineArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& CommandAddReferenceLineArchive::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandAddReferenceLineArchive::uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.uuid)
  return _internal_uuid();
}
inline void CommandAddReferenceLineArchive::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddReferenceLineArchive.uuid)
}
inline ::TSP::UUID* CommandAddReferenceLineArchive::release_uuid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandAddReferenceLineArchive::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddReferenceLineArchive.uuid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandAddReferenceLineArchive::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000004u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* CommandAddReferenceLineArchive::mutable_uuid() {
  ::TSP::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.uuid)
  return _msg;
}
inline void CommandAddReferenceLineArchive::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddReferenceLineArchive.uuid)
}

// required .TSP.Reference non_style = 4;
inline bool CommandAddReferenceLineArchive::_internal_has_non_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || non_style_ != nullptr);
  return value;
}
inline bool CommandAddReferenceLineArchive::has_non_style() const {
  return _internal_has_non_style();
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::_internal_non_style() const {
  const ::TSP::Reference* p = non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.non_style)
  return _internal_non_style();
}
inline void CommandAddReferenceLineArchive::unsafe_arena_set_allocated_non_style(
    ::TSP::Reference* non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  non_style_ = non_style;
  if (non_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddReferenceLineArchive.non_style)
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::release_non_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::unsafe_arena_release_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddReferenceLineArchive.non_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::_internal_mutable_non_style() {
  _has_bits_[0] |= 0x00000008u;
  if (non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    non_style_ = p;
  }
  return non_style_;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::mutable_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.non_style)
  return _msg;
}
inline void CommandAddReferenceLineArchive::set_allocated_non_style(::TSP::Reference* non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  if (non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style));
    if (message_arena != submessage_arena) {
      non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  non_style_ = non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddReferenceLineArchive.non_style)
}

// optional .TSP.Reference style = 5;
inline bool CommandAddReferenceLineArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool CommandAddReferenceLineArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.style)
  return _internal_style();
}
inline void CommandAddReferenceLineArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddReferenceLineArchive.style)
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::release_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddReferenceLineArchive.style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000010u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.style)
  return _msg;
}
inline void CommandAddReferenceLineArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddReferenceLineArchive.style)
}

// repeated .TSP.Reference paragraph_styles = 6;
inline int CommandAddReferenceLineArchive::_internal_paragraph_styles_size() const {
  return paragraph_styles_.size();
}
inline int CommandAddReferenceLineArchive::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.paragraph_styles)
  return paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandAddReferenceLineArchive::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddReferenceLineArchive.paragraph_styles)
  return &paragraph_styles_;
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::_internal_paragraph_styles(int index) const {
  return paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::_internal_add_paragraph_styles() {
  return paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.CommandAddReferenceLineArchive.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandAddReferenceLineArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddReferenceLineArchive.paragraph_styles)
  return paragraph_styles_;
}

// repeated .TSP.Reference rollback_commands = 7;
inline int CommandAddReferenceLineArchive::_internal_rollback_commands_size() const {
  return rollback_commands_.size();
}
inline int CommandAddReferenceLineArchive::rollback_commands_size() const {
  return _internal_rollback_commands_size();
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::mutable_rollback_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddReferenceLineArchive.rollback_commands)
  return rollback_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandAddReferenceLineArchive::mutable_rollback_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddReferenceLineArchive.rollback_commands)
  return &rollback_commands_;
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::_internal_rollback_commands(int index) const {
  return rollback_commands_.Get(index);
}
inline const ::TSP::Reference& CommandAddReferenceLineArchive::rollback_commands(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddReferenceLineArchive.rollback_commands)
  return _internal_rollback_commands(index);
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::_internal_add_rollback_commands() {
  return rollback_commands_.Add();
}
inline ::TSP::Reference* CommandAddReferenceLineArchive::add_rollback_commands() {
  ::TSP::Reference* _add = _internal_add_rollback_commands();
  // @@protoc_insertion_point(field_add:TSCH.CommandAddReferenceLineArchive.rollback_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandAddReferenceLineArchive::rollback_commands() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddReferenceLineArchive.rollback_commands)
  return rollback_commands_;
}

// -------------------------------------------------------------------

// CommandDeleteReferenceLineArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteReferenceLineArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteReferenceLineArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteReferenceLineArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteReferenceLineArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.super)
  return _internal_super();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandDeleteReferenceLineArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteReferenceLineArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteReferenceLineArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteReferenceLineArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.super)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.super)
}

// required .TSCH.ChartAxisIDArchive axis_id = 2;
inline bool CommandDeleteReferenceLineArchive::_internal_has_axis_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || axis_id_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline const ::TSCH::ChartAxisIDArchive& CommandDeleteReferenceLineArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& CommandDeleteReferenceLineArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.axis_id)
  return _internal_axis_id();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id_);
  }
  axis_id_ = axis_id;
  if (axis_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* CommandDeleteReferenceLineArchive::release_axis_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartAxisIDArchive* temp = axis_id_;
  axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* CommandDeleteReferenceLineArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.axis_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartAxisIDArchive* temp = axis_id_;
  axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* CommandDeleteReferenceLineArchive::_internal_mutable_axis_id() {
  _has_bits_[0] |= 0x00000002u;
  if (axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    axis_id_ = p;
  }
  return axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* CommandDeleteReferenceLineArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.axis_id)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id_);
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis_id));
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.axis_id)
}

// required .TSP.UUID uuid = 3;
inline bool CommandDeleteReferenceLineArchive::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& CommandDeleteReferenceLineArchive::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandDeleteReferenceLineArchive::uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.uuid)
  return _internal_uuid();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.uuid)
}
inline ::TSP::UUID* CommandDeleteReferenceLineArchive::release_uuid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandDeleteReferenceLineArchive::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.uuid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandDeleteReferenceLineArchive::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000004u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* CommandDeleteReferenceLineArchive::mutable_uuid() {
  ::TSP::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.uuid)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.uuid)
}

// optional .TSP.Reference non_style = 4;
inline bool CommandDeleteReferenceLineArchive::_internal_has_non_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || non_style_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_non_style() const {
  return _internal_has_non_style();
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::_internal_non_style() const {
  const ::TSP::Reference* p = non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.non_style)
  return _internal_non_style();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_non_style(
    ::TSP::Reference* non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  non_style_ = non_style;
  if (non_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.non_style)
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::release_non_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::unsafe_arena_release_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.non_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::_internal_mutable_non_style() {
  _has_bits_[0] |= 0x00000008u;
  if (non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    non_style_ = p;
  }
  return non_style_;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::mutable_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.non_style)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_non_style(::TSP::Reference* non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  if (non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style));
    if (message_arena != submessage_arena) {
      non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  non_style_ = non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.non_style)
}

// optional .TSP.Reference style = 5;
inline bool CommandDeleteReferenceLineArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.style)
  return _internal_style();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.style)
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::release_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000010u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.style)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.style)
}

// repeated .TSP.Reference paragraph_styles = 6;
inline int CommandDeleteReferenceLineArchive::_internal_paragraph_styles_size() const {
  return paragraph_styles_.size();
}
inline int CommandDeleteReferenceLineArchive::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.paragraph_styles)
  return paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandDeleteReferenceLineArchive::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteReferenceLineArchive.paragraph_styles)
  return &paragraph_styles_;
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::_internal_paragraph_styles(int index) const {
  return paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::_internal_add_paragraph_styles() {
  return paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteReferenceLineArchive.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandDeleteReferenceLineArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteReferenceLineArchive.paragraph_styles)
  return paragraph_styles_;
}

// optional .TSP.Reference style_swap_command = 7;
inline bool CommandDeleteReferenceLineArchive::_internal_has_style_swap_command() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || style_swap_command_ != nullptr);
  return value;
}
inline bool CommandDeleteReferenceLineArchive::has_style_swap_command() const {
  return _internal_has_style_swap_command();
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::_internal_style_swap_command() const {
  const ::TSP::Reference* p = style_swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDeleteReferenceLineArchive::style_swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteReferenceLineArchive.style_swap_command)
  return _internal_style_swap_command();
}
inline void CommandDeleteReferenceLineArchive::unsafe_arena_set_allocated_style_swap_command(
    ::TSP::Reference* style_swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  style_swap_command_ = style_swap_command;
  if (style_swap_command) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteReferenceLineArchive.style_swap_command)
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::release_style_swap_command() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::unsafe_arena_release_style_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteReferenceLineArchive.style_swap_command)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::_internal_mutable_style_swap_command() {
  _has_bits_[0] |= 0x00000020u;
  if (style_swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_swap_command_ = p;
  }
  return style_swap_command_;
}
inline ::TSP::Reference* CommandDeleteReferenceLineArchive::mutable_style_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_style_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteReferenceLineArchive.style_swap_command)
  return _msg;
}
inline void CommandDeleteReferenceLineArchive::set_allocated_style_swap_command(::TSP::Reference* style_swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  if (style_swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command));
    if (message_arena != submessage_arena) {
      style_swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_swap_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  style_swap_command_ = style_swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteReferenceLineArchive.style_swap_command)
}

// -------------------------------------------------------------------

// CommandPasteStyleArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandPasteStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandPasteStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPasteStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandPasteStyleArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandPasteStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.super)
  return _internal_super();
}
inline void CommandPasteStyleArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandPasteStyleArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandPasteStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandPasteStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandPasteStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandPasteStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandPasteStyleArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.super)
  return _msg;
}
inline void CommandPasteStyleArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandPasteStyleArchive.super)
}

// optional .TSP.Reference style_swap_command = 2;
inline bool CommandPasteStyleArchive::_internal_has_style_swap_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || style_swap_command_ != nullptr);
  return value;
}
inline bool CommandPasteStyleArchive::has_style_swap_command() const {
  return _internal_has_style_swap_command();
}
inline const ::TSP::Reference& CommandPasteStyleArchive::_internal_style_swap_command() const {
  const ::TSP::Reference* p = style_swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteStyleArchive::style_swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.style_swap_command)
  return _internal_style_swap_command();
}
inline void CommandPasteStyleArchive::unsafe_arena_set_allocated_style_swap_command(
    ::TSP::Reference* style_swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  style_swap_command_ = style_swap_command;
  if (style_swap_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandPasteStyleArchive.style_swap_command)
}
inline ::TSP::Reference* CommandPasteStyleArchive::release_style_swap_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteStyleArchive::unsafe_arena_release_style_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandPasteStyleArchive.style_swap_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteStyleArchive::_internal_mutable_style_swap_command() {
  _has_bits_[0] |= 0x00000002u;
  if (style_swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_swap_command_ = p;
  }
  return style_swap_command_;
}
inline ::TSP::Reference* CommandPasteStyleArchive::mutable_style_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_style_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.style_swap_command)
  return _msg;
}
inline void CommandPasteStyleArchive::set_allocated_style_swap_command(::TSP::Reference* style_swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  if (style_swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command));
    if (message_arena != submessage_arena) {
      style_swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_swap_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_swap_command_ = style_swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandPasteStyleArchive.style_swap_command)
}

// optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
inline bool CommandPasteStyleArchive::_internal_has_inverse_chart_style_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inverse_chart_style_state_ != nullptr);
  return value;
}
inline bool CommandPasteStyleArchive::has_inverse_chart_style_state() const {
  return _internal_has_inverse_chart_style_state();
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandPasteStyleArchive::_internal_inverse_chart_style_state() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = inverse_chart_style_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandPasteStyleArchive::inverse_chart_style_state() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.inverse_chart_style_state)
  return _internal_inverse_chart_style_state();
}
inline void CommandPasteStyleArchive::unsafe_arena_set_allocated_inverse_chart_style_state(
    ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state_);
  }
  inverse_chart_style_state_ = inverse_chart_style_state;
  if (inverse_chart_style_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandPasteStyleArchive.inverse_chart_style_state)
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::release_inverse_chart_style_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = inverse_chart_style_state_;
  inverse_chart_style_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::unsafe_arena_release_inverse_chart_style_state() {
  // @@protoc_insertion_point(field_release:TSCH.CommandPasteStyleArchive.inverse_chart_style_state)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = inverse_chart_style_state_;
  inverse_chart_style_state_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::_internal_mutable_inverse_chart_style_state() {
  _has_bits_[0] |= 0x00000004u;
  if (inverse_chart_style_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    inverse_chart_style_state_ = p;
  }
  return inverse_chart_style_state_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::mutable_inverse_chart_style_state() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_inverse_chart_style_state();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.inverse_chart_style_state)
  return _msg;
}
inline void CommandPasteStyleArchive::set_allocated_inverse_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state_);
  }
  if (inverse_chart_style_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state));
    if (message_arena != submessage_arena) {
      inverse_chart_style_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_chart_style_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inverse_chart_style_state_ = inverse_chart_style_state;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandPasteStyleArchive.inverse_chart_style_state)
}

// optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
inline bool CommandPasteStyleArchive::_internal_has_chart_style_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || chart_style_state_ != nullptr);
  return value;
}
inline bool CommandPasteStyleArchive::has_chart_style_state() const {
  return _internal_has_chart_style_state();
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandPasteStyleArchive::_internal_chart_style_state() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = chart_style_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandPasteStyleArchive::chart_style_state() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.chart_style_state)
  return _internal_chart_style_state();
}
inline void CommandPasteStyleArchive::unsafe_arena_set_allocated_chart_style_state(
    ::TSCH::PropertyValueStorageContainerArchive* chart_style_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state_);
  }
  chart_style_state_ = chart_style_state;
  if (chart_style_state) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandPasteStyleArchive.chart_style_state)
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::release_chart_style_state() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = chart_style_state_;
  chart_style_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::unsafe_arena_release_chart_style_state() {
  // @@protoc_insertion_point(field_release:TSCH.CommandPasteStyleArchive.chart_style_state)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = chart_style_state_;
  chart_style_state_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::_internal_mutable_chart_style_state() {
  _has_bits_[0] |= 0x00000008u;
  if (chart_style_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    chart_style_state_ = p;
  }
  return chart_style_state_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandPasteStyleArchive::mutable_chart_style_state() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_chart_style_state();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.chart_style_state)
  return _msg;
}
inline void CommandPasteStyleArchive::set_allocated_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* chart_style_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state_);
  }
  if (chart_style_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state));
    if (message_arena != submessage_arena) {
      chart_style_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chart_style_state_ = chart_style_state;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandPasteStyleArchive.chart_style_state)
}

// optional .TSP.Reference shape_style = 5;
inline bool CommandPasteStyleArchive::_internal_has_shape_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || shape_style_ != nullptr);
  return value;
}
inline bool CommandPasteStyleArchive::has_shape_style() const {
  return _internal_has_shape_style();
}
inline const ::TSP::Reference& CommandPasteStyleArchive::_internal_shape_style() const {
  const ::TSP::Reference* p = shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteStyleArchive::shape_style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.shape_style)
  return _internal_shape_style();
}
inline void CommandPasteStyleArchive::unsafe_arena_set_allocated_shape_style(
    ::TSP::Reference* shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_style_);
  }
  shape_style_ = shape_style;
  if (shape_style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandPasteStyleArchive.shape_style)
}
inline ::TSP::Reference* CommandPasteStyleArchive::release_shape_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = shape_style_;
  shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteStyleArchive::unsafe_arena_release_shape_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandPasteStyleArchive.shape_style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = shape_style_;
  shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteStyleArchive::_internal_mutable_shape_style() {
  _has_bits_[0] |= 0x00000010u;
  if (shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    shape_style_ = p;
  }
  return shape_style_;
}
inline ::TSP::Reference* CommandPasteStyleArchive::mutable_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_shape_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.shape_style)
  return _msg;
}
inline void CommandPasteStyleArchive::set_allocated_shape_style(::TSP::Reference* shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_style_);
  }
  if (shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_style));
    if (message_arena != submessage_arena) {
      shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  shape_style_ = shape_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandPasteStyleArchive.shape_style)
}

// repeated .TSCH.ChartSelectionPathArchive subselection = 6;
inline int CommandPasteStyleArchive::_internal_subselection_size() const {
  return subselection_.size();
}
inline int CommandPasteStyleArchive::subselection_size() const {
  return _internal_subselection_size();
}
inline ::TSCH::ChartSelectionPathArchive* CommandPasteStyleArchive::mutable_subselection(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandPasteStyleArchive.subselection)
  return subselection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
CommandPasteStyleArchive::mutable_subselection() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandPasteStyleArchive.subselection)
  return &subselection_;
}
inline const ::TSCH::ChartSelectionPathArchive& CommandPasteStyleArchive::_internal_subselection(int index) const {
  return subselection_.Get(index);
}
inline const ::TSCH::ChartSelectionPathArchive& CommandPasteStyleArchive::subselection(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandPasteStyleArchive.subselection)
  return _internal_subselection(index);
}
inline ::TSCH::ChartSelectionPathArchive* CommandPasteStyleArchive::_internal_add_subselection() {
  return subselection_.Add();
}
inline ::TSCH::ChartSelectionPathArchive* CommandPasteStyleArchive::add_subselection() {
  ::TSCH::ChartSelectionPathArchive* _add = _internal_add_subselection();
  // @@protoc_insertion_point(field_add:TSCH.CommandPasteStyleArchive.subselection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
CommandPasteStyleArchive::subselection() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandPasteStyleArchive.subselection)
  return subselection_;
}

// -------------------------------------------------------------------

// CommandReplaceImageDataArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandReplaceImageDataArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandReplaceImageDataArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceImageDataArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceImageDataArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceImageDataArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceImageDataArchive.super)
  return _internal_super();
}
inline void CommandReplaceImageDataArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceImageDataArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandReplaceImageDataArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceImageDataArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceImageDataArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceImageDataArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceImageDataArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceImageDataArchive.super)
  return _msg;
}
inline void CommandReplaceImageDataArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartCommandArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceImageDataArchive.super)
}

// optional .TSP.Reference style_swap_command = 2;
inline bool CommandReplaceImageDataArchive::_internal_has_style_swap_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || style_swap_command_ != nullptr);
  return value;
}
inline bool CommandReplaceImageDataArchive::has_style_swap_command() const {
  return _internal_has_style_swap_command();
}
inline const ::TSP::Reference& CommandReplaceImageDataArchive::_internal_style_swap_command() const {
  const ::TSP::Reference* p = style_swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceImageDataArchive::style_swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceImageDataArchive.style_swap_command)
  return _internal_style_swap_command();
}
inline void CommandReplaceImageDataArchive::unsafe_arena_set_allocated_style_swap_command(
    ::TSP::Reference* style_swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  style_swap_command_ = style_swap_command;
  if (style_swap_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceImageDataArchive.style_swap_command)
}
inline ::TSP::Reference* CommandReplaceImageDataArchive::release_style_swap_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceImageDataArchive::unsafe_arena_release_style_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceImageDataArchive.style_swap_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_swap_command_;
  style_swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceImageDataArchive::_internal_mutable_style_swap_command() {
  _has_bits_[0] |= 0x00000002u;
  if (style_swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    style_swap_command_ = p;
  }
  return style_swap_command_;
}
inline ::TSP::Reference* CommandReplaceImageDataArchive::mutable_style_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_style_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceImageDataArchive.style_swap_command)
  return _msg;
}
inline void CommandReplaceImageDataArchive::set_allocated_style_swap_command(::TSP::Reference* style_swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command_);
  }
  if (style_swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_swap_command));
    if (message_arena != submessage_arena) {
      style_swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_swap_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_swap_command_ = style_swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceImageDataArchive.style_swap_command)
}

// optional .TSCH.PropertyValueStorageContainerArchive inverse_chart_style_state = 3;
inline bool CommandReplaceImageDataArchive::_internal_has_inverse_chart_style_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inverse_chart_style_state_ != nullptr);
  return value;
}
inline bool CommandReplaceImageDataArchive::has_inverse_chart_style_state() const {
  return _internal_has_inverse_chart_style_state();
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandReplaceImageDataArchive::_internal_inverse_chart_style_state() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = inverse_chart_style_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandReplaceImageDataArchive::inverse_chart_style_state() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state)
  return _internal_inverse_chart_style_state();
}
inline void CommandReplaceImageDataArchive::unsafe_arena_set_allocated_inverse_chart_style_state(
    ::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state_);
  }
  inverse_chart_style_state_ = inverse_chart_style_state;
  if (inverse_chart_style_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state)
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::release_inverse_chart_style_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = inverse_chart_style_state_;
  inverse_chart_style_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::unsafe_arena_release_inverse_chart_style_state() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = inverse_chart_style_state_;
  inverse_chart_style_state_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::_internal_mutable_inverse_chart_style_state() {
  _has_bits_[0] |= 0x00000004u;
  if (inverse_chart_style_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    inverse_chart_style_state_ = p;
  }
  return inverse_chart_style_state_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::mutable_inverse_chart_style_state() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_inverse_chart_style_state();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state)
  return _msg;
}
inline void CommandReplaceImageDataArchive::set_allocated_inverse_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* inverse_chart_style_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state_);
  }
  if (inverse_chart_style_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_chart_style_state));
    if (message_arena != submessage_arena) {
      inverse_chart_style_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_chart_style_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inverse_chart_style_state_ = inverse_chart_style_state;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state)
}

// optional .TSCH.PropertyValueStorageContainerArchive chart_style_state = 4;
inline bool CommandReplaceImageDataArchive::_internal_has_chart_style_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || chart_style_state_ != nullptr);
  return value;
}
inline bool CommandReplaceImageDataArchive::has_chart_style_state() const {
  return _internal_has_chart_style_state();
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandReplaceImageDataArchive::_internal_chart_style_state() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = chart_style_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& CommandReplaceImageDataArchive::chart_style_state() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceImageDataArchive.chart_style_state)
  return _internal_chart_style_state();
}
inline void CommandReplaceImageDataArchive::unsafe_arena_set_allocated_chart_style_state(
    ::TSCH::PropertyValueStorageContainerArchive* chart_style_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state_);
  }
  chart_style_state_ = chart_style_state;
  if (chart_style_state) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceImageDataArchive.chart_style_state)
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::release_chart_style_state() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = chart_style_state_;
  chart_style_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::unsafe_arena_release_chart_style_state() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceImageDataArchive.chart_style_state)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = chart_style_state_;
  chart_style_state_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::_internal_mutable_chart_style_state() {
  _has_bits_[0] |= 0x00000008u;
  if (chart_style_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    chart_style_state_ = p;
  }
  return chart_style_state_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* CommandReplaceImageDataArchive::mutable_chart_style_state() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_chart_style_state();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceImageDataArchive.chart_style_state)
  return _msg;
}
inline void CommandReplaceImageDataArchive::set_allocated_chart_style_state(::TSCH::PropertyValueStorageContainerArchive* chart_style_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state_);
  }
  if (chart_style_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_state));
    if (message_arena != submessage_arena) {
      chart_style_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chart_style_state_ = chart_style_state;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceImageDataArchive.chart_style_state)
}

// -------------------------------------------------------------------

// CommandInducedReplaceChartGrid

// required .TSK.CommandArchive super = 1;
inline bool CommandInducedReplaceChartGrid::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandInducedReplaceChartGrid::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInducedReplaceChartGrid::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInducedReplaceChartGrid::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandInducedReplaceChartGrid.super)
  return _internal_super();
}
inline void CommandInducedReplaceChartGrid::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandInducedReplaceChartGrid.super)
}
inline ::TSK::CommandArchive* CommandInducedReplaceChartGrid::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInducedReplaceChartGrid::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandInducedReplaceChartGrid.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInducedReplaceChartGrid::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandInducedReplaceChartGrid::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandInducedReplaceChartGrid.super)
  return _msg;
}
inline void CommandInducedReplaceChartGrid::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandInducedReplaceChartGrid.super)
}

// -------------------------------------------------------------------

// CommandInduced3DChartGeometry

// required .TSK.CommandArchive super = 1;
inline bool CommandInduced3DChartGeometry::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandInduced3DChartGeometry::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInduced3DChartGeometry::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInduced3DChartGeometry::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandInduced3DChartGeometry.super)
  return _internal_super();
}
inline void CommandInduced3DChartGeometry::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandInduced3DChartGeometry.super)
}
inline ::TSK::CommandArchive* CommandInduced3DChartGeometry::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInduced3DChartGeometry::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandInduced3DChartGeometry.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInduced3DChartGeometry::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandInduced3DChartGeometry::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandInduced3DChartGeometry.super)
  return _msg;
}
inline void CommandInduced3DChartGeometry::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandInduced3DChartGeometry.super)
}

// -------------------------------------------------------------------

// ChartTextSelectionTransformerArchive

// optional .TSP.Reference selection = 1;
inline bool ChartTextSelectionTransformerArchive::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool ChartTextSelectionTransformerArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& ChartTextSelectionTransformerArchive::_internal_selection() const {
  const ::TSP::Reference* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartTextSelectionTransformerArchive::selection() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartTextSelectionTransformerArchive.selection)
  return _internal_selection();
}
inline void ChartTextSelectionTransformerArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartTextSelectionTransformerArchive.selection)
}
inline ::TSP::Reference* ChartTextSelectionTransformerArchive::release_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartTextSelectionTransformerArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TSCH.ChartTextSelectionTransformerArchive.selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartTextSelectionTransformerArchive::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::TSP::Reference* ChartTextSelectionTransformerArchive::mutable_selection() {
  ::TSP::Reference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartTextSelectionTransformerArchive.selection)
  return _msg;
}
inline void ChartTextSelectionTransformerArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartTextSelectionTransformerArchive.selection)
}

// -------------------------------------------------------------------

// ChartDrawableSelectionTransformerArchive

// required .TSD.DrawableSelectionTransformerArchive super = 1;
inline bool ChartDrawableSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartDrawableSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableSelectionTransformerArchive& ChartDrawableSelectionTransformerArchive::_internal_super() const {
  const ::TSD::DrawableSelectionTransformerArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionTransformerArchive&>(
      ::TSD::_DrawableSelectionTransformerArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionTransformerArchive& ChartDrawableSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartDrawableSelectionTransformerArchive.super)
  return _internal_super();
}
inline void ChartDrawableSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionTransformerArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartDrawableSelectionTransformerArchive.super)
}
inline ::TSD::DrawableSelectionTransformerArchive* ChartDrawableSelectionTransformerArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* ChartDrawableSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartDrawableSelectionTransformerArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* ChartDrawableSelectionTransformerArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionTransformerArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableSelectionTransformerArchive* ChartDrawableSelectionTransformerArchive::mutable_super() {
  ::TSD::DrawableSelectionTransformerArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartDrawableSelectionTransformerArchive.super)
  return _msg;
}
inline void ChartDrawableSelectionTransformerArchive::set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartDrawableSelectionTransformerArchive.super)
}

// -------------------------------------------------------------------

// ChartSubselectionTransformerHelperArchive

// optional .TSP.Reference selection = 1;
inline bool ChartSubselectionTransformerHelperArchive::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool ChartSubselectionTransformerHelperArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& ChartSubselectionTransformerHelperArchive::_internal_selection() const {
  const ::TSP::Reference* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSubselectionTransformerHelperArchive::selection() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSubselectionTransformerHelperArchive.selection)
  return _internal_selection();
}
inline void ChartSubselectionTransformerHelperArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSubselectionTransformerHelperArchive.selection)
}
inline ::TSP::Reference* ChartSubselectionTransformerHelperArchive::release_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerHelperArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSubselectionTransformerHelperArchive.selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerHelperArchive::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::TSP::Reference* ChartSubselectionTransformerHelperArchive::mutable_selection() {
  ::TSP::Reference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSubselectionTransformerHelperArchive.selection)
  return _msg;
}
inline void ChartSubselectionTransformerHelperArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSubselectionTransformerHelperArchive.selection)
}

// -------------------------------------------------------------------

// ChartRefLineSubselectionTransformerHelperArchive

// required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
inline bool ChartRefLineSubselectionTransformerHelperArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartRefLineSubselectionTransformerHelperArchive::has_super() const {
  return _internal_has_super();
}
inline void ChartRefLineSubselectionTransformerHelperArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartSubselectionTransformerHelperArchive& ChartRefLineSubselectionTransformerHelperArchive::_internal_super() const {
  const ::TSCH::ChartSubselectionTransformerHelperArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSubselectionTransformerHelperArchive&>(
      ::TSCH::_ChartSubselectionTransformerHelperArchive_default_instance_);
}
inline const ::TSCH::ChartSubselectionTransformerHelperArchive& ChartRefLineSubselectionTransformerHelperArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartRefLineSubselectionTransformerHelperArchive.super)
  return _internal_super();
}
inline void ChartRefLineSubselectionTransformerHelperArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartSubselectionTransformerHelperArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartRefLineSubselectionTransformerHelperArchive.super)
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartRefLineSubselectionTransformerHelperArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSubselectionTransformerHelperArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartRefLineSubselectionTransformerHelperArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartRefLineSubselectionTransformerHelperArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSubselectionTransformerHelperArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartRefLineSubselectionTransformerHelperArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSubselectionTransformerHelperArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartRefLineSubselectionTransformerHelperArchive::mutable_super() {
  ::TSCH::ChartSubselectionTransformerHelperArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartRefLineSubselectionTransformerHelperArchive.super)
  return _msg;
}
inline void ChartRefLineSubselectionTransformerHelperArchive::set_allocated_super(::TSCH::ChartSubselectionTransformerHelperArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartSubselectionTransformerHelperArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartRefLineSubselectionTransformerHelperArchive.super)
}

// repeated .TSP.UUID selected_reference_line_uuids = 2;
inline int ChartRefLineSubselectionTransformerHelperArchive::_internal_selected_reference_line_uuids_size() const {
  return selected_reference_line_uuids_.size();
}
inline int ChartRefLineSubselectionTransformerHelperArchive::selected_reference_line_uuids_size() const {
  return _internal_selected_reference_line_uuids_size();
}
inline ::TSP::UUID* ChartRefLineSubselectionTransformerHelperArchive::mutable_selected_reference_line_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids)
  return selected_reference_line_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ChartRefLineSubselectionTransformerHelperArchive::mutable_selected_reference_line_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids)
  return &selected_reference_line_uuids_;
}
inline const ::TSP::UUID& ChartRefLineSubselectionTransformerHelperArchive::_internal_selected_reference_line_uuids(int index) const {
  return selected_reference_line_uuids_.Get(index);
}
inline const ::TSP::UUID& ChartRefLineSubselectionTransformerHelperArchive::selected_reference_line_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids)
  return _internal_selected_reference_line_uuids(index);
}
inline ::TSP::UUID* ChartRefLineSubselectionTransformerHelperArchive::_internal_add_selected_reference_line_uuids() {
  return selected_reference_line_uuids_.Add();
}
inline ::TSP::UUID* ChartRefLineSubselectionTransformerHelperArchive::add_selected_reference_line_uuids() {
  ::TSP::UUID* _add = _internal_add_selected_reference_line_uuids();
  // @@protoc_insertion_point(field_add:TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ChartRefLineSubselectionTransformerHelperArchive::selected_reference_line_uuids() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids)
  return selected_reference_line_uuids_;
}

// -------------------------------------------------------------------

// ChartSubselectionIdentityTransformerHelperArchive

// required .TSCH.ChartSubselectionTransformerHelperArchive super = 1;
inline bool ChartSubselectionIdentityTransformerHelperArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartSubselectionIdentityTransformerHelperArchive::has_super() const {
  return _internal_has_super();
}
inline void ChartSubselectionIdentityTransformerHelperArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartSubselectionTransformerHelperArchive& ChartSubselectionIdentityTransformerHelperArchive::_internal_super() const {
  const ::TSCH::ChartSubselectionTransformerHelperArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSubselectionTransformerHelperArchive&>(
      ::TSCH::_ChartSubselectionTransformerHelperArchive_default_instance_);
}
inline const ::TSCH::ChartSubselectionTransformerHelperArchive& ChartSubselectionIdentityTransformerHelperArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSubselectionIdentityTransformerHelperArchive.super)
  return _internal_super();
}
inline void ChartSubselectionIdentityTransformerHelperArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartSubselectionTransformerHelperArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSubselectionIdentityTransformerHelperArchive.super)
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartSubselectionIdentityTransformerHelperArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSubselectionTransformerHelperArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartSubselectionIdentityTransformerHelperArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSubselectionIdentityTransformerHelperArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSubselectionTransformerHelperArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartSubselectionIdentityTransformerHelperArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSubselectionTransformerHelperArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartSubselectionTransformerHelperArchive* ChartSubselectionIdentityTransformerHelperArchive::mutable_super() {
  ::TSCH::ChartSubselectionTransformerHelperArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSubselectionIdentityTransformerHelperArchive.super)
  return _msg;
}
inline void ChartSubselectionIdentityTransformerHelperArchive::set_allocated_super(::TSCH::ChartSubselectionTransformerHelperArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TSCH::ChartSubselectionTransformerHelperArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSubselectionIdentityTransformerHelperArchive.super)
}

// -------------------------------------------------------------------

// ChartSubselectionTransformerArchive

// optional .TSP.Reference selection = 1;
inline bool ChartSubselectionTransformerArchive::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool ChartSubselectionTransformerArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& ChartSubselectionTransformerArchive::_internal_selection() const {
  const ::TSP::Reference* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSubselectionTransformerArchive::selection() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSubselectionTransformerArchive.selection)
  return _internal_selection();
}
inline void ChartSubselectionTransformerArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSubselectionTransformerArchive.selection)
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::release_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSubselectionTransformerArchive.selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::mutable_selection() {
  ::TSP::Reference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSubselectionTransformerArchive.selection)
  return _msg;
}
inline void ChartSubselectionTransformerArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSubselectionTransformerArchive.selection)
}

// optional .TSP.Reference helper = 2;
inline bool ChartSubselectionTransformerArchive::_internal_has_helper() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || helper_ != nullptr);
  return value;
}
inline bool ChartSubselectionTransformerArchive::has_helper() const {
  return _internal_has_helper();
}
inline const ::TSP::Reference& ChartSubselectionTransformerArchive::_internal_helper() const {
  const ::TSP::Reference* p = helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSubselectionTransformerArchive::helper() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSubselectionTransformerArchive.helper)
  return _internal_helper();
}
inline void ChartSubselectionTransformerArchive::unsafe_arena_set_allocated_helper(
    ::TSP::Reference* helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(helper_);
  }
  helper_ = helper;
  if (helper) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSubselectionTransformerArchive.helper)
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::release_helper() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = helper_;
  helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::unsafe_arena_release_helper() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSubselectionTransformerArchive.helper)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = helper_;
  helper_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::_internal_mutable_helper() {
  _has_bits_[0] |= 0x00000002u;
  if (helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    helper_ = p;
  }
  return helper_;
}
inline ::TSP::Reference* ChartSubselectionTransformerArchive::mutable_helper() {
  ::TSP::Reference* _msg = _internal_mutable_helper();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSubselectionTransformerArchive.helper)
  return _msg;
}
inline void ChartSubselectionTransformerArchive::set_allocated_helper(::TSP::Reference* helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(helper_);
  }
  if (helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(helper));
    if (message_arena != submessage_arena) {
      helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  helper_ = helper;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSubselectionTransformerArchive.helper)
}

// -------------------------------------------------------------------

// CDESelectionTransformerArchive

// optional .TSP.Reference cde_selection = 1;
inline bool CDESelectionTransformerArchive::_internal_has_cde_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cde_selection_ != nullptr);
  return value;
}
inline bool CDESelectionTransformerArchive::has_cde_selection() const {
  return _internal_has_cde_selection();
}
inline const ::TSP::Reference& CDESelectionTransformerArchive::_internal_cde_selection() const {
  const ::TSP::Reference* p = cde_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CDESelectionTransformerArchive::cde_selection() const {
  // @@protoc_insertion_point(field_get:TSCH.CDESelectionTransformerArchive.cde_selection)
  return _internal_cde_selection();
}
inline void CDESelectionTransformerArchive::unsafe_arena_set_allocated_cde_selection(
    ::TSP::Reference* cde_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_selection_);
  }
  cde_selection_ = cde_selection;
  if (cde_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CDESelectionTransformerArchive.cde_selection)
}
inline ::TSP::Reference* CDESelectionTransformerArchive::release_cde_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cde_selection_;
  cde_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CDESelectionTransformerArchive::unsafe_arena_release_cde_selection() {
  // @@protoc_insertion_point(field_release:TSCH.CDESelectionTransformerArchive.cde_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cde_selection_;
  cde_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CDESelectionTransformerArchive::_internal_mutable_cde_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (cde_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    cde_selection_ = p;
  }
  return cde_selection_;
}
inline ::TSP::Reference* CDESelectionTransformerArchive::mutable_cde_selection() {
  ::TSP::Reference* _msg = _internal_mutable_cde_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.CDESelectionTransformerArchive.cde_selection)
  return _msg;
}
inline void CDESelectionTransformerArchive::set_allocated_cde_selection(::TSP::Reference* cde_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_selection_);
  }
  if (cde_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_selection));
    if (message_arena != submessage_arena) {
      cde_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cde_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cde_selection_ = cde_selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CDESelectionTransformerArchive.cde_selection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSCH::StyleOwnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleOwnerType>() {
  return ::TSCH::StyleOwnerType_descriptor();
}
template <> struct is_proto_enum< ::TSCH::StyleSwapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleSwapType>() {
  return ::TSCH::StyleSwapType_descriptor();
}
template <> struct is_proto_enum< ::TSCH::ApplyPresetBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::ApplyPresetBehavior>() {
  return ::TSCH::ApplyPresetBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto
