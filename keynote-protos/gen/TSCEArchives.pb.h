// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCEArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCEArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[144]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCEArchives_2eproto;
namespace TSCE {
class ASTNodeArrayArchive;
struct ASTNodeArrayArchiveDefaultTypeInternal;
extern ASTNodeArrayArchiveDefaultTypeInternal _ASTNodeArrayArchive_default_instance_;
class ASTNodeArrayArchive_ASTCategoryReferenceArchive;
struct ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_;
class ASTNodeArrayArchive_ASTColonTractArchive;
struct ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_default_instance_;
class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive;
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_;
class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive;
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_;
class ASTNodeArrayArchive_ASTColumnCoordinateArchive;
struct ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_;
class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive;
struct ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive;
struct ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_;
class ASTNodeArrayArchive_ASTLetNodeWhitespace;
struct ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal _ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_;
class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive;
struct ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTNodeArchive;
struct ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTNodeArchive_default_instance_;
class ASTNodeArrayArchive_ASTRowCoordinateArchive;
struct ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_;
class ASTNodeArrayArchive_ASTStickyBits;
struct ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal _ASTNodeArrayArchive_ASTStickyBits_default_instance_;
class ASTNodeArrayArchive_ASTUidCoordinateArchive;
struct ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_;
class ASTNodeArrayArchive_ASTUidList;
struct ASTNodeArrayArchive_ASTUidListDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTUidListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidList_default_instance_;
class ASTNodeArrayArchive_ASTUidTract;
struct ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTract_default_instance_;
class ASTNodeArrayArchive_ASTUidTractList;
struct ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal;
extern ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTractList_default_instance_;
class BooleanCellValueArchive;
struct BooleanCellValueArchiveDefaultTypeInternal;
extern BooleanCellValueArchiveDefaultTypeInternal _BooleanCellValueArchive_default_instance_;
class CalculationEngineArchive;
struct CalculationEngineArchiveDefaultTypeInternal;
extern CalculationEngineArchiveDefaultTypeInternal _CalculationEngineArchive_default_instance_;
class CategoryReferenceArchive;
struct CategoryReferenceArchiveDefaultTypeInternal;
extern CategoryReferenceArchiveDefaultTypeInternal _CategoryReferenceArchive_default_instance_;
class CategoryReferenceArchive_CatRefUidList;
struct CategoryReferenceArchive_CatRefUidListDefaultTypeInternal;
extern CategoryReferenceArchive_CatRefUidListDefaultTypeInternal _CategoryReferenceArchive_CatRefUidList_default_instance_;
class CellCoordSetArchive;
struct CellCoordSetArchiveDefaultTypeInternal;
extern CellCoordSetArchiveDefaultTypeInternal _CellCoordSetArchive_default_instance_;
class CellCoordSetArchive_ColumnEntry;
struct CellCoordSetArchive_ColumnEntryDefaultTypeInternal;
extern CellCoordSetArchive_ColumnEntryDefaultTypeInternal _CellCoordSetArchive_ColumnEntry_default_instance_;
class CellCoordinateArchive;
struct CellCoordinateArchiveDefaultTypeInternal;
extern CellCoordinateArchiveDefaultTypeInternal _CellCoordinateArchive_default_instance_;
class CellCoordinateVectorArchive;
struct CellCoordinateVectorArchiveDefaultTypeInternal;
extern CellCoordinateVectorArchiveDefaultTypeInternal _CellCoordinateVectorArchive_default_instance_;
class CellDependenciesArchive;
struct CellDependenciesArchiveDefaultTypeInternal;
extern CellDependenciesArchiveDefaultTypeInternal _CellDependenciesArchive_default_instance_;
class CellDependenciesExpandedArchive;
struct CellDependenciesExpandedArchiveDefaultTypeInternal;
extern CellDependenciesExpandedArchiveDefaultTypeInternal _CellDependenciesExpandedArchive_default_instance_;
class CellDependenciesTiledArchive;
struct CellDependenciesTiledArchiveDefaultTypeInternal;
extern CellDependenciesTiledArchiveDefaultTypeInternal _CellDependenciesTiledArchive_default_instance_;
class CellErrorsArchive;
struct CellErrorsArchiveDefaultTypeInternal;
extern CellErrorsArchiveDefaultTypeInternal _CellErrorsArchive_default_instance_;
class CellErrorsArchive_ErrorForCell;
struct CellErrorsArchive_ErrorForCellDefaultTypeInternal;
extern CellErrorsArchive_ErrorForCellDefaultTypeInternal _CellErrorsArchive_ErrorForCell_default_instance_;
class CellRecordArchive;
struct CellRecordArchiveDefaultTypeInternal;
extern CellRecordArchiveDefaultTypeInternal _CellRecordArchive_default_instance_;
class CellRecordExpandedArchive;
struct CellRecordExpandedArchiveDefaultTypeInternal;
extern CellRecordExpandedArchiveDefaultTypeInternal _CellRecordExpandedArchive_default_instance_;
class CellRecordTileArchive;
struct CellRecordTileArchiveDefaultTypeInternal;
extern CellRecordTileArchiveDefaultTypeInternal _CellRecordTileArchive_default_instance_;
class CellRectArchive;
struct CellRectArchiveDefaultTypeInternal;
extern CellRectArchiveDefaultTypeInternal _CellRectArchive_default_instance_;
class CellRefSetArchive;
struct CellRefSetArchiveDefaultTypeInternal;
extern CellRefSetArchiveDefaultTypeInternal _CellRefSetArchive_default_instance_;
class CellRefSetArchive_OwnerEntry;
struct CellRefSetArchive_OwnerEntryDefaultTypeInternal;
extern CellRefSetArchive_OwnerEntryDefaultTypeInternal _CellRefSetArchive_OwnerEntry_default_instance_;
class CellReferenceArchive;
struct CellReferenceArchiveDefaultTypeInternal;
extern CellReferenceArchiveDefaultTypeInternal _CellReferenceArchive_default_instance_;
class CellValueArchive;
struct CellValueArchiveDefaultTypeInternal;
extern CellValueArchiveDefaultTypeInternal _CellValueArchive_default_instance_;
class ColumnOrRowUuidsInfoArchive;
struct ColumnOrRowUuidsInfoArchiveDefaultTypeInternal;
extern ColumnOrRowUuidsInfoArchiveDefaultTypeInternal _ColumnOrRowUuidsInfoArchive_default_instance_;
class ColumnRowSize;
struct ColumnRowSizeDefaultTypeInternal;
extern ColumnRowSizeDefaultTypeInternal _ColumnRowSize_default_instance_;
class CoordMapperArchive;
struct CoordMapperArchiveDefaultTypeInternal;
extern CoordMapperArchiveDefaultTypeInternal _CoordMapperArchive_default_instance_;
class CoordMapperArchive_BaseToViewEntry;
struct CoordMapperArchive_BaseToViewEntryDefaultTypeInternal;
extern CoordMapperArchive_BaseToViewEntryDefaultTypeInternal _CoordMapperArchive_BaseToViewEntry_default_instance_;
class DateCellValueArchive;
struct DateCellValueArchiveDefaultTypeInternal;
extern DateCellValueArchiveDefaultTypeInternal _DateCellValueArchive_default_instance_;
class DependencyTrackerArchive;
struct DependencyTrackerArchiveDefaultTypeInternal;
extern DependencyTrackerArchiveDefaultTypeInternal _DependencyTrackerArchive_default_instance_;
class EdgeArchive;
struct EdgeArchiveDefaultTypeInternal;
extern EdgeArchiveDefaultTypeInternal _EdgeArchive_default_instance_;
class EdgesArchive;
struct EdgesArchiveDefaultTypeInternal;
extern EdgesArchiveDefaultTypeInternal _EdgesArchive_default_instance_;
class ErrorCellValueArchive;
struct ErrorCellValueArchiveDefaultTypeInternal;
extern ErrorCellValueArchiveDefaultTypeInternal _ErrorCellValueArchive_default_instance_;
class ExpandedCellRefObjectMapArchive;
struct ExpandedCellRefObjectMapArchiveDefaultTypeInternal;
extern ExpandedCellRefObjectMapArchiveDefaultTypeInternal _ExpandedCellRefObjectMapArchive_default_instance_;
class ExpandedCellRefObjectPairArchive;
struct ExpandedCellRefObjectPairArchiveDefaultTypeInternal;
extern ExpandedCellRefObjectPairArchiveDefaultTypeInternal _ExpandedCellRefObjectPairArchive_default_instance_;
class ExpandedEdgesArchive;
struct ExpandedEdgesArchiveDefaultTypeInternal;
extern ExpandedEdgesArchiveDefaultTypeInternal _ExpandedEdgesArchive_default_instance_;
class ExpandedTrackedReferenceArchive;
struct ExpandedTrackedReferenceArchiveDefaultTypeInternal;
extern ExpandedTrackedReferenceArchiveDefaultTypeInternal _ExpandedTrackedReferenceArchive_default_instance_;
class ExtendTableIDHistoryCommandArchive;
struct ExtendTableIDHistoryCommandArchiveDefaultTypeInternal;
extern ExtendTableIDHistoryCommandArchiveDefaultTypeInternal _ExtendTableIDHistoryCommandArchive_default_instance_;
class FormatStructArchive;
struct FormatStructArchiveDefaultTypeInternal;
extern FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
class FormulaArchive;
struct FormulaArchiveDefaultTypeInternal;
extern FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
class FormulaAtCoordArchive;
struct FormulaAtCoordArchiveDefaultTypeInternal;
extern FormulaAtCoordArchiveDefaultTypeInternal _FormulaAtCoordArchive_default_instance_;
class FormulaCoordPairsByOwnerArchive;
struct FormulaCoordPairsByOwnerArchiveDefaultTypeInternal;
extern FormulaCoordPairsByOwnerArchiveDefaultTypeInternal _FormulaCoordPairsByOwnerArchive_default_instance_;
class FormulaOwnerDependenciesArchive;
struct FormulaOwnerDependenciesArchiveDefaultTypeInternal;
extern FormulaOwnerDependenciesArchiveDefaultTypeInternal _FormulaOwnerDependenciesArchive_default_instance_;
class FormulaOwnerInfoArchive;
struct FormulaOwnerInfoArchiveDefaultTypeInternal;
extern FormulaOwnerInfoArchiveDefaultTypeInternal _FormulaOwnerInfoArchive_default_instance_;
class FormulaRewriteCommandArchive;
struct FormulaRewriteCommandArchiveDefaultTypeInternal;
extern FormulaRewriteCommandArchiveDefaultTypeInternal _FormulaRewriteCommandArchive_default_instance_;
class FormulaRewriteSpecArchive;
struct FormulaRewriteSpecArchiveDefaultTypeInternal;
extern FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
class FormulaTranslationFlagsArchive;
struct FormulaTranslationFlagsArchiveDefaultTypeInternal;
extern FormulaTranslationFlagsArchiveDefaultTypeInternal _FormulaTranslationFlagsArchive_default_instance_;
class FormulasForUndoArchive;
struct FormulasForUndoArchiveDefaultTypeInternal;
extern FormulasForUndoArchiveDefaultTypeInternal _FormulasForUndoArchive_default_instance_;
class FunctorArchive;
struct FunctorArchiveDefaultTypeInternal;
extern FunctorArchiveDefaultTypeInternal _FunctorArchive_default_instance_;
class GroupByChangeArchive;
struct GroupByChangeArchiveDefaultTypeInternal;
extern GroupByChangeArchiveDefaultTypeInternal _GroupByChangeArchive_default_instance_;
class GroupByChangeArchive_GroupingColumnChangeArchive;
struct GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal;
extern GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal _GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_;
class GroupByNodeMapArchive;
struct GroupByNodeMapArchiveDefaultTypeInternal;
extern GroupByNodeMapArchiveDefaultTypeInternal _GroupByNodeMapArchive_default_instance_;
class GroupByNodeMapArchive_CellRefsForGroupNode;
struct GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal;
extern GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal _GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_;
class GroupByNodeMapArchive_GroupNodesForGroupBy;
struct GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal;
extern GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal _GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_;
class HauntedOwnerArchive;
struct HauntedOwnerArchiveDefaultTypeInternal;
extern HauntedOwnerArchiveDefaultTypeInternal _HauntedOwnerArchive_default_instance_;
class IndexSetArchive;
struct IndexSetArchiveDefaultTypeInternal;
extern IndexSetArchiveDefaultTypeInternal _IndexSetArchive_default_instance_;
class IndexSetArchive_IndexSetEntry;
struct IndexSetArchive_IndexSetEntryDefaultTypeInternal;
extern IndexSetArchive_IndexSetEntryDefaultTypeInternal _IndexSetArchive_IndexSetEntry_default_instance_;
class IndexedUidsArchive;
struct IndexedUidsArchiveDefaultTypeInternal;
extern IndexedUidsArchiveDefaultTypeInternal _IndexedUidsArchive_default_instance_;
class IndexedUidsArchive_IndexedUid;
struct IndexedUidsArchive_IndexedUidDefaultTypeInternal;
extern IndexedUidsArchive_IndexedUidDefaultTypeInternal _IndexedUidsArchive_IndexedUid_default_instance_;
class InternalCellRefSetArchive;
struct InternalCellRefSetArchiveDefaultTypeInternal;
extern InternalCellRefSetArchiveDefaultTypeInternal _InternalCellRefSetArchive_default_instance_;
class InternalCellRefSetArchive_OwnerEntry;
struct InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal;
extern InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal _InternalCellRefSetArchive_OwnerEntry_default_instance_;
class InternalCellReferenceArchive;
struct InternalCellReferenceArchiveDefaultTypeInternal;
extern InternalCellReferenceArchiveDefaultTypeInternal _InternalCellReferenceArchive_default_instance_;
class InternalRangeReferenceArchive;
struct InternalRangeReferenceArchiveDefaultTypeInternal;
extern InternalRangeReferenceArchiveDefaultTypeInternal _InternalRangeReferenceArchive_default_instance_;
class MergeOriginMovedArchive;
struct MergeOriginMovedArchiveDefaultTypeInternal;
extern MergeOriginMovedArchiveDefaultTypeInternal _MergeOriginMovedArchive_default_instance_;
class MergeSourceArchive;
struct MergeSourceArchiveDefaultTypeInternal;
extern MergeSourceArchiveDefaultTypeInternal _MergeSourceArchive_default_instance_;
class NameTrackedReferencePair;
struct NameTrackedReferencePairDefaultTypeInternal;
extern NameTrackedReferencePairDefaultTypeInternal _NameTrackedReferencePair_default_instance_;
class NamedReferenceManagerArchive;
struct NamedReferenceManagerArchiveDefaultTypeInternal;
extern NamedReferenceManagerArchiveDefaultTypeInternal _NamedReferenceManagerArchive_default_instance_;
class NamesByTrackedReferenceArchive;
struct NamesByTrackedReferenceArchiveDefaultTypeInternal;
extern NamesByTrackedReferenceArchiveDefaultTypeInternal _NamesByTrackedReferenceArchive_default_instance_;
class NumberCellValueArchive;
struct NumberCellValueArchiveDefaultTypeInternal;
extern NumberCellValueArchiveDefaultTypeInternal _NumberCellValueArchive_default_instance_;
class NumberToTrackedReferenceMapArchive;
struct NumberToTrackedReferenceMapArchiveDefaultTypeInternal;
extern NumberToTrackedReferenceMapArchiveDefaultTypeInternal _NumberToTrackedReferenceMapArchive_default_instance_;
class NumberTrackedReferencePairArchive;
struct NumberTrackedReferencePairArchiveDefaultTypeInternal;
extern NumberTrackedReferencePairArchiveDefaultTypeInternal _NumberTrackedReferencePairArchive_default_instance_;
class OwnerIDMapArchive;
struct OwnerIDMapArchiveDefaultTypeInternal;
extern OwnerIDMapArchiveDefaultTypeInternal _OwnerIDMapArchive_default_instance_;
class OwnerIDMapArchive_OwnerIDMapArchiveEntry;
struct OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal;
extern OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal _OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_;
class OwnerUIDMapperArchive;
struct OwnerUIDMapperArchiveDefaultTypeInternal;
extern OwnerUIDMapperArchiveDefaultTypeInternal _OwnerUIDMapperArchive_default_instance_;
class PreserveColumnRowFlagsArchive;
struct PreserveColumnRowFlagsArchiveDefaultTypeInternal;
extern PreserveColumnRowFlagsArchiveDefaultTypeInternal _PreserveColumnRowFlagsArchive_default_instance_;
class RTreeArchive;
struct RTreeArchiveDefaultTypeInternal;
extern RTreeArchiveDefaultTypeInternal _RTreeArchive_default_instance_;
class RTreeInternalNodeContentsArchive;
struct RTreeInternalNodeContentsArchiveDefaultTypeInternal;
extern RTreeInternalNodeContentsArchiveDefaultTypeInternal _RTreeInternalNodeContentsArchive_default_instance_;
class RTreeLeafNodeContentsArchive;
struct RTreeLeafNodeContentsArchiveDefaultTypeInternal;
extern RTreeLeafNodeContentsArchiveDefaultTypeInternal _RTreeLeafNodeContentsArchive_default_instance_;
class RTreeNodeArchive;
struct RTreeNodeArchiveDefaultTypeInternal;
extern RTreeNodeArchiveDefaultTypeInternal _RTreeNodeArchive_default_instance_;
class RangeBackDependencyArchive;
struct RangeBackDependencyArchiveDefaultTypeInternal;
extern RangeBackDependencyArchiveDefaultTypeInternal _RangeBackDependencyArchive_default_instance_;
class RangeCoordinateArchive;
struct RangeCoordinateArchiveDefaultTypeInternal;
extern RangeCoordinateArchiveDefaultTypeInternal _RangeCoordinateArchive_default_instance_;
class RangeDependenciesArchive;
struct RangeDependenciesArchiveDefaultTypeInternal;
extern RangeDependenciesArchiveDefaultTypeInternal _RangeDependenciesArchive_default_instance_;
class RangeDependenciesTiledArchive;
struct RangeDependenciesTiledArchiveDefaultTypeInternal;
extern RangeDependenciesTiledArchiveDefaultTypeInternal _RangeDependenciesTiledArchive_default_instance_;
class RangePrecedentsTileArchive;
struct RangePrecedentsTileArchiveDefaultTypeInternal;
extern RangePrecedentsTileArchiveDefaultTypeInternal _RangePrecedentsTileArchive_default_instance_;
class RangePrecedentsTileArchive_FromToRangeArchive;
struct RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal;
extern RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal _RangePrecedentsTileArchive_FromToRangeArchive_default_instance_;
class RangeReferenceArchive;
struct RangeReferenceArchiveDefaultTypeInternal;
extern RangeReferenceArchiveDefaultTypeInternal _RangeReferenceArchive_default_instance_;
class ReferenceArchive;
struct ReferenceArchiveDefaultTypeInternal;
extern ReferenceArchiveDefaultTypeInternal _ReferenceArchive_default_instance_;
class ReferenceTrackerArchive;
struct ReferenceTrackerArchiveDefaultTypeInternal;
extern ReferenceTrackerArchiveDefaultTypeInternal _ReferenceTrackerArchive_default_instance_;
class ReferencesToDirtyArchive;
struct ReferencesToDirtyArchiveDefaultTypeInternal;
extern ReferencesToDirtyArchiveDefaultTypeInternal _ReferencesToDirtyArchive_default_instance_;
class RegionInfoArchive;
struct RegionInfoArchiveDefaultTypeInternal;
extern RegionInfoArchiveDefaultTypeInternal _RegionInfoArchive_default_instance_;
class RegionMovedInfoArchive;
struct RegionMovedInfoArchiveDefaultTypeInternal;
extern RegionMovedInfoArchiveDefaultTypeInternal _RegionMovedInfoArchive_default_instance_;
class RemoteDataSpecifierArchive;
struct RemoteDataSpecifierArchiveDefaultTypeInternal;
extern RemoteDataSpecifierArchiveDefaultTypeInternal _RemoteDataSpecifierArchive_default_instance_;
class RemoteDataStoreArchive;
struct RemoteDataStoreArchiveDefaultTypeInternal;
extern RemoteDataStoreArchiveDefaultTypeInternal _RemoteDataStoreArchive_default_instance_;
class RemoteDataValueMapArchive;
struct RemoteDataValueMapArchiveDefaultTypeInternal;
extern RemoteDataValueMapArchiveDefaultTypeInternal _RemoteDataValueMapArchive_default_instance_;
class RemoteDataValueMapArchive_RemoteDataMapEntry;
struct RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal;
extern RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal _RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_;
class RewriteGroupNodeUIDInfoArchive;
struct RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal;
extern RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal _RewriteGroupNodeUIDInfoArchive_default_instance_;
class RewriteRangeEntryArchive;
struct RewriteRangeEntryArchiveDefaultTypeInternal;
extern RewriteRangeEntryArchiveDefaultTypeInternal _RewriteRangeEntryArchive_default_instance_;
class RewriteTableUIDInfoArchive;
struct RewriteTableUIDInfoArchiveDefaultTypeInternal;
extern RewriteTableUIDInfoArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_default_instance_;
class RewriteTableUIDInfoArchive_TableUIDMapEntryArchive;
struct RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal;
extern RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_;
class SpanningDependenciesArchive;
struct SpanningDependenciesArchiveDefaultTypeInternal;
extern SpanningDependenciesArchiveDefaultTypeInternal _SpanningDependenciesArchive_default_instance_;
class SpanningDependenciesArchive_ReferringColumnToLocalCells;
struct SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal;
extern SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_;
class SpanningDependenciesArchive_ReferringColumnToRemoteCells;
struct SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal;
extern SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_;
class SpanningDependenciesExpandedArchive;
struct SpanningDependenciesExpandedArchiveDefaultTypeInternal;
extern SpanningDependenciesExpandedArchiveDefaultTypeInternal _SpanningDependenciesExpandedArchive_default_instance_;
class SpanningDependenciesExpandedArchive_CellCoordRefersToExtents;
struct SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal;
extern SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal _SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_;
class SpanningDependenciesExpandedArchive_ExtentRange;
struct SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal;
extern SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRange_default_instance_;
class SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext;
struct SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal;
extern SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_;
class StockArchive;
struct StockArchiveDefaultTypeInternal;
extern StockArchiveDefaultTypeInternal _StockArchive_default_instance_;
class StockArchive_AttributeEntry;
struct StockArchive_AttributeEntryDefaultTypeInternal;
extern StockArchive_AttributeEntryDefaultTypeInternal _StockArchive_AttributeEntry_default_instance_;
class StringCellValueArchive;
struct StringCellValueArchiveDefaultTypeInternal;
extern StringCellValueArchiveDefaultTypeInternal _StringCellValueArchive_default_instance_;
class SubFormulaOwnerIDArchive;
struct SubFormulaOwnerIDArchiveDefaultTypeInternal;
extern SubFormulaOwnerIDArchiveDefaultTypeInternal _SubFormulaOwnerIDArchive_default_instance_;
class TableTransposeInfoArchive;
struct TableTransposeInfoArchiveDefaultTypeInternal;
extern TableTransposeInfoArchiveDefaultTypeInternal _TableTransposeInfoArchive_default_instance_;
class TrackedReferenceArchive;
struct TrackedReferenceArchiveDefaultTypeInternal;
extern TrackedReferenceArchiveDefaultTypeInternal _TrackedReferenceArchive_default_instance_;
class TrackedReferencesRewriteCommandArchive;
struct TrackedReferencesRewriteCommandArchiveDefaultTypeInternal;
extern TrackedReferencesRewriteCommandArchiveDefaultTypeInternal _TrackedReferencesRewriteCommandArchive_default_instance_;
class UidCellRefSetArchive;
struct UidCellRefSetArchiveDefaultTypeInternal;
extern UidCellRefSetArchiveDefaultTypeInternal _UidCellRefSetArchive_default_instance_;
class UidCellRefSetArchive_OwnerEntry;
struct UidCellRefSetArchive_OwnerEntryDefaultTypeInternal;
extern UidCellRefSetArchive_OwnerEntryDefaultTypeInternal _UidCellRefSetArchive_OwnerEntry_default_instance_;
class UidCoordSetArchive;
struct UidCoordSetArchiveDefaultTypeInternal;
extern UidCoordSetArchiveDefaultTypeInternal _UidCoordSetArchive_default_instance_;
class UidCoordSetArchive_ColumnEntry;
struct UidCoordSetArchive_ColumnEntryDefaultTypeInternal;
extern UidCoordSetArchive_ColumnEntryDefaultTypeInternal _UidCoordSetArchive_ColumnEntry_default_instance_;
class UidLookupListArchive;
struct UidLookupListArchiveDefaultTypeInternal;
extern UidLookupListArchiveDefaultTypeInternal _UidLookupListArchive_default_instance_;
class UuidReferenceMapArchive;
struct UuidReferenceMapArchiveDefaultTypeInternal;
extern UuidReferenceMapArchiveDefaultTypeInternal _UuidReferenceMapArchive_default_instance_;
class UuidReferenceMapArchive_CellRefsForUuid;
struct UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal;
extern UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal _UuidReferenceMapArchive_CellRefsForUuid_default_instance_;
class UuidReferencesArchive;
struct UuidReferencesArchiveDefaultTypeInternal;
extern UuidReferencesArchiveDefaultTypeInternal _UuidReferencesArchive_default_instance_;
class UuidReferencesArchive_TableRef;
struct UuidReferencesArchive_TableRefDefaultTypeInternal;
extern UuidReferencesArchive_TableRefDefaultTypeInternal _UuidReferencesArchive_TableRef_default_instance_;
class UuidReferencesArchive_TableWithUuidRef;
struct UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal;
extern UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal _UuidReferencesArchive_TableWithUuidRef_default_instance_;
class UuidReferencesArchive_UuidRef;
struct UuidReferencesArchive_UuidRefDefaultTypeInternal;
extern UuidReferencesArchive_UuidRefDefaultTypeInternal _UuidReferencesArchive_UuidRef_default_instance_;
class UuidSetStoreArchive;
struct UuidSetStoreArchiveDefaultTypeInternal;
extern UuidSetStoreArchiveDefaultTypeInternal _UuidSetStoreArchive_default_instance_;
class UuidSetStoreArchive_UuidSet;
struct UuidSetStoreArchive_UuidSetDefaultTypeInternal;
extern UuidSetStoreArchive_UuidSetDefaultTypeInternal _UuidSetStoreArchive_UuidSet_default_instance_;
class VolatileDependenciesArchive;
struct VolatileDependenciesArchiveDefaultTypeInternal;
extern VolatileDependenciesArchiveDefaultTypeInternal _VolatileDependenciesArchive_default_instance_;
class VolatileDependenciesExpandedArchive;
struct VolatileDependenciesExpandedArchiveDefaultTypeInternal;
extern VolatileDependenciesExpandedArchiveDefaultTypeInternal _VolatileDependenciesExpandedArchive_default_instance_;
class WholeOwnerDependenciesArchive;
struct WholeOwnerDependenciesArchiveDefaultTypeInternal;
extern WholeOwnerDependenciesArchiveDefaultTypeInternal _WholeOwnerDependenciesArchive_default_instance_;
class WholeOwnerDependenciesExpandedArchive;
struct WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal;
extern WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal _WholeOwnerDependenciesExpandedArchive_default_instance_;
}  // namespace TSCE
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCE::ASTNodeArrayArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColonTractArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTNodeArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTStickyBits* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTStickyBits>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTUidList* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidList>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTUidTract* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidTract>(Arena*);
template<> ::TSCE::ASTNodeArrayArchive_ASTUidTractList* Arena::CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidTractList>(Arena*);
template<> ::TSCE::BooleanCellValueArchive* Arena::CreateMaybeMessage<::TSCE::BooleanCellValueArchive>(Arena*);
template<> ::TSCE::CalculationEngineArchive* Arena::CreateMaybeMessage<::TSCE::CalculationEngineArchive>(Arena*);
template<> ::TSCE::CategoryReferenceArchive* Arena::CreateMaybeMessage<::TSCE::CategoryReferenceArchive>(Arena*);
template<> ::TSCE::CategoryReferenceArchive_CatRefUidList* Arena::CreateMaybeMessage<::TSCE::CategoryReferenceArchive_CatRefUidList>(Arena*);
template<> ::TSCE::CellCoordSetArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordSetArchive>(Arena*);
template<> ::TSCE::CellCoordSetArchive_ColumnEntry* Arena::CreateMaybeMessage<::TSCE::CellCoordSetArchive_ColumnEntry>(Arena*);
template<> ::TSCE::CellCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateArchive>(Arena*);
template<> ::TSCE::CellCoordinateVectorArchive* Arena::CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(Arena*);
template<> ::TSCE::CellDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::CellDependenciesArchive>(Arena*);
template<> ::TSCE::CellDependenciesExpandedArchive* Arena::CreateMaybeMessage<::TSCE::CellDependenciesExpandedArchive>(Arena*);
template<> ::TSCE::CellDependenciesTiledArchive* Arena::CreateMaybeMessage<::TSCE::CellDependenciesTiledArchive>(Arena*);
template<> ::TSCE::CellErrorsArchive* Arena::CreateMaybeMessage<::TSCE::CellErrorsArchive>(Arena*);
template<> ::TSCE::CellErrorsArchive_ErrorForCell* Arena::CreateMaybeMessage<::TSCE::CellErrorsArchive_ErrorForCell>(Arena*);
template<> ::TSCE::CellRecordArchive* Arena::CreateMaybeMessage<::TSCE::CellRecordArchive>(Arena*);
template<> ::TSCE::CellRecordExpandedArchive* Arena::CreateMaybeMessage<::TSCE::CellRecordExpandedArchive>(Arena*);
template<> ::TSCE::CellRecordTileArchive* Arena::CreateMaybeMessage<::TSCE::CellRecordTileArchive>(Arena*);
template<> ::TSCE::CellRectArchive* Arena::CreateMaybeMessage<::TSCE::CellRectArchive>(Arena*);
template<> ::TSCE::CellRefSetArchive* Arena::CreateMaybeMessage<::TSCE::CellRefSetArchive>(Arena*);
template<> ::TSCE::CellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage<::TSCE::CellRefSetArchive_OwnerEntry>(Arena*);
template<> ::TSCE::CellReferenceArchive* Arena::CreateMaybeMessage<::TSCE::CellReferenceArchive>(Arena*);
template<> ::TSCE::CellValueArchive* Arena::CreateMaybeMessage<::TSCE::CellValueArchive>(Arena*);
template<> ::TSCE::ColumnOrRowUuidsInfoArchive* Arena::CreateMaybeMessage<::TSCE::ColumnOrRowUuidsInfoArchive>(Arena*);
template<> ::TSCE::ColumnRowSize* Arena::CreateMaybeMessage<::TSCE::ColumnRowSize>(Arena*);
template<> ::TSCE::CoordMapperArchive* Arena::CreateMaybeMessage<::TSCE::CoordMapperArchive>(Arena*);
template<> ::TSCE::CoordMapperArchive_BaseToViewEntry* Arena::CreateMaybeMessage<::TSCE::CoordMapperArchive_BaseToViewEntry>(Arena*);
template<> ::TSCE::DateCellValueArchive* Arena::CreateMaybeMessage<::TSCE::DateCellValueArchive>(Arena*);
template<> ::TSCE::DependencyTrackerArchive* Arena::CreateMaybeMessage<::TSCE::DependencyTrackerArchive>(Arena*);
template<> ::TSCE::EdgeArchive* Arena::CreateMaybeMessage<::TSCE::EdgeArchive>(Arena*);
template<> ::TSCE::EdgesArchive* Arena::CreateMaybeMessage<::TSCE::EdgesArchive>(Arena*);
template<> ::TSCE::ErrorCellValueArchive* Arena::CreateMaybeMessage<::TSCE::ErrorCellValueArchive>(Arena*);
template<> ::TSCE::ExpandedCellRefObjectMapArchive* Arena::CreateMaybeMessage<::TSCE::ExpandedCellRefObjectMapArchive>(Arena*);
template<> ::TSCE::ExpandedCellRefObjectPairArchive* Arena::CreateMaybeMessage<::TSCE::ExpandedCellRefObjectPairArchive>(Arena*);
template<> ::TSCE::ExpandedEdgesArchive* Arena::CreateMaybeMessage<::TSCE::ExpandedEdgesArchive>(Arena*);
template<> ::TSCE::ExpandedTrackedReferenceArchive* Arena::CreateMaybeMessage<::TSCE::ExpandedTrackedReferenceArchive>(Arena*);
template<> ::TSCE::ExtendTableIDHistoryCommandArchive* Arena::CreateMaybeMessage<::TSCE::ExtendTableIDHistoryCommandArchive>(Arena*);
template<> ::TSCE::FormatStructArchive* Arena::CreateMaybeMessage<::TSCE::FormatStructArchive>(Arena*);
template<> ::TSCE::FormulaArchive* Arena::CreateMaybeMessage<::TSCE::FormulaArchive>(Arena*);
template<> ::TSCE::FormulaAtCoordArchive* Arena::CreateMaybeMessage<::TSCE::FormulaAtCoordArchive>(Arena*);
template<> ::TSCE::FormulaCoordPairsByOwnerArchive* Arena::CreateMaybeMessage<::TSCE::FormulaCoordPairsByOwnerArchive>(Arena*);
template<> ::TSCE::FormulaOwnerDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::FormulaOwnerDependenciesArchive>(Arena*);
template<> ::TSCE::FormulaOwnerInfoArchive* Arena::CreateMaybeMessage<::TSCE::FormulaOwnerInfoArchive>(Arena*);
template<> ::TSCE::FormulaRewriteCommandArchive* Arena::CreateMaybeMessage<::TSCE::FormulaRewriteCommandArchive>(Arena*);
template<> ::TSCE::FormulaRewriteSpecArchive* Arena::CreateMaybeMessage<::TSCE::FormulaRewriteSpecArchive>(Arena*);
template<> ::TSCE::FormulaTranslationFlagsArchive* Arena::CreateMaybeMessage<::TSCE::FormulaTranslationFlagsArchive>(Arena*);
template<> ::TSCE::FormulasForUndoArchive* Arena::CreateMaybeMessage<::TSCE::FormulasForUndoArchive>(Arena*);
template<> ::TSCE::FunctorArchive* Arena::CreateMaybeMessage<::TSCE::FunctorArchive>(Arena*);
template<> ::TSCE::GroupByChangeArchive* Arena::CreateMaybeMessage<::TSCE::GroupByChangeArchive>(Arena*);
template<> ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* Arena::CreateMaybeMessage<::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive>(Arena*);
template<> ::TSCE::GroupByNodeMapArchive* Arena::CreateMaybeMessage<::TSCE::GroupByNodeMapArchive>(Arena*);
template<> ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* Arena::CreateMaybeMessage<::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode>(Arena*);
template<> ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* Arena::CreateMaybeMessage<::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy>(Arena*);
template<> ::TSCE::HauntedOwnerArchive* Arena::CreateMaybeMessage<::TSCE::HauntedOwnerArchive>(Arena*);
template<> ::TSCE::IndexSetArchive* Arena::CreateMaybeMessage<::TSCE::IndexSetArchive>(Arena*);
template<> ::TSCE::IndexSetArchive_IndexSetEntry* Arena::CreateMaybeMessage<::TSCE::IndexSetArchive_IndexSetEntry>(Arena*);
template<> ::TSCE::IndexedUidsArchive* Arena::CreateMaybeMessage<::TSCE::IndexedUidsArchive>(Arena*);
template<> ::TSCE::IndexedUidsArchive_IndexedUid* Arena::CreateMaybeMessage<::TSCE::IndexedUidsArchive_IndexedUid>(Arena*);
template<> ::TSCE::InternalCellRefSetArchive* Arena::CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(Arena*);
template<> ::TSCE::InternalCellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage<::TSCE::InternalCellRefSetArchive_OwnerEntry>(Arena*);
template<> ::TSCE::InternalCellReferenceArchive* Arena::CreateMaybeMessage<::TSCE::InternalCellReferenceArchive>(Arena*);
template<> ::TSCE::InternalRangeReferenceArchive* Arena::CreateMaybeMessage<::TSCE::InternalRangeReferenceArchive>(Arena*);
template<> ::TSCE::MergeOriginMovedArchive* Arena::CreateMaybeMessage<::TSCE::MergeOriginMovedArchive>(Arena*);
template<> ::TSCE::MergeSourceArchive* Arena::CreateMaybeMessage<::TSCE::MergeSourceArchive>(Arena*);
template<> ::TSCE::NameTrackedReferencePair* Arena::CreateMaybeMessage<::TSCE::NameTrackedReferencePair>(Arena*);
template<> ::TSCE::NamedReferenceManagerArchive* Arena::CreateMaybeMessage<::TSCE::NamedReferenceManagerArchive>(Arena*);
template<> ::TSCE::NamesByTrackedReferenceArchive* Arena::CreateMaybeMessage<::TSCE::NamesByTrackedReferenceArchive>(Arena*);
template<> ::TSCE::NumberCellValueArchive* Arena::CreateMaybeMessage<::TSCE::NumberCellValueArchive>(Arena*);
template<> ::TSCE::NumberToTrackedReferenceMapArchive* Arena::CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(Arena*);
template<> ::TSCE::NumberTrackedReferencePairArchive* Arena::CreateMaybeMessage<::TSCE::NumberTrackedReferencePairArchive>(Arena*);
template<> ::TSCE::OwnerIDMapArchive* Arena::CreateMaybeMessage<::TSCE::OwnerIDMapArchive>(Arena*);
template<> ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* Arena::CreateMaybeMessage<::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry>(Arena*);
template<> ::TSCE::OwnerUIDMapperArchive* Arena::CreateMaybeMessage<::TSCE::OwnerUIDMapperArchive>(Arena*);
template<> ::TSCE::PreserveColumnRowFlagsArchive* Arena::CreateMaybeMessage<::TSCE::PreserveColumnRowFlagsArchive>(Arena*);
template<> ::TSCE::RTreeArchive* Arena::CreateMaybeMessage<::TSCE::RTreeArchive>(Arena*);
template<> ::TSCE::RTreeInternalNodeContentsArchive* Arena::CreateMaybeMessage<::TSCE::RTreeInternalNodeContentsArchive>(Arena*);
template<> ::TSCE::RTreeLeafNodeContentsArchive* Arena::CreateMaybeMessage<::TSCE::RTreeLeafNodeContentsArchive>(Arena*);
template<> ::TSCE::RTreeNodeArchive* Arena::CreateMaybeMessage<::TSCE::RTreeNodeArchive>(Arena*);
template<> ::TSCE::RangeBackDependencyArchive* Arena::CreateMaybeMessage<::TSCE::RangeBackDependencyArchive>(Arena*);
template<> ::TSCE::RangeCoordinateArchive* Arena::CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(Arena*);
template<> ::TSCE::RangeDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::RangeDependenciesArchive>(Arena*);
template<> ::TSCE::RangeDependenciesTiledArchive* Arena::CreateMaybeMessage<::TSCE::RangeDependenciesTiledArchive>(Arena*);
template<> ::TSCE::RangePrecedentsTileArchive* Arena::CreateMaybeMessage<::TSCE::RangePrecedentsTileArchive>(Arena*);
template<> ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* Arena::CreateMaybeMessage<::TSCE::RangePrecedentsTileArchive_FromToRangeArchive>(Arena*);
template<> ::TSCE::RangeReferenceArchive* Arena::CreateMaybeMessage<::TSCE::RangeReferenceArchive>(Arena*);
template<> ::TSCE::ReferenceArchive* Arena::CreateMaybeMessage<::TSCE::ReferenceArchive>(Arena*);
template<> ::TSCE::ReferenceTrackerArchive* Arena::CreateMaybeMessage<::TSCE::ReferenceTrackerArchive>(Arena*);
template<> ::TSCE::ReferencesToDirtyArchive* Arena::CreateMaybeMessage<::TSCE::ReferencesToDirtyArchive>(Arena*);
template<> ::TSCE::RegionInfoArchive* Arena::CreateMaybeMessage<::TSCE::RegionInfoArchive>(Arena*);
template<> ::TSCE::RegionMovedInfoArchive* Arena::CreateMaybeMessage<::TSCE::RegionMovedInfoArchive>(Arena*);
template<> ::TSCE::RemoteDataSpecifierArchive* Arena::CreateMaybeMessage<::TSCE::RemoteDataSpecifierArchive>(Arena*);
template<> ::TSCE::RemoteDataStoreArchive* Arena::CreateMaybeMessage<::TSCE::RemoteDataStoreArchive>(Arena*);
template<> ::TSCE::RemoteDataValueMapArchive* Arena::CreateMaybeMessage<::TSCE::RemoteDataValueMapArchive>(Arena*);
template<> ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* Arena::CreateMaybeMessage<::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry>(Arena*);
template<> ::TSCE::RewriteGroupNodeUIDInfoArchive* Arena::CreateMaybeMessage<::TSCE::RewriteGroupNodeUIDInfoArchive>(Arena*);
template<> ::TSCE::RewriteRangeEntryArchive* Arena::CreateMaybeMessage<::TSCE::RewriteRangeEntryArchive>(Arena*);
template<> ::TSCE::RewriteTableUIDInfoArchive* Arena::CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(Arena*);
template<> ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* Arena::CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells>(Arena*);
template<> ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells>(Arena*);
template<> ::TSCE::SpanningDependenciesExpandedArchive* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive>(Arena*);
template<> ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>(Arena*);
template<> ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive_ExtentRange>(Arena*);
template<> ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* Arena::CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>(Arena*);
template<> ::TSCE::StockArchive* Arena::CreateMaybeMessage<::TSCE::StockArchive>(Arena*);
template<> ::TSCE::StockArchive_AttributeEntry* Arena::CreateMaybeMessage<::TSCE::StockArchive_AttributeEntry>(Arena*);
template<> ::TSCE::StringCellValueArchive* Arena::CreateMaybeMessage<::TSCE::StringCellValueArchive>(Arena*);
template<> ::TSCE::SubFormulaOwnerIDArchive* Arena::CreateMaybeMessage<::TSCE::SubFormulaOwnerIDArchive>(Arena*);
template<> ::TSCE::TableTransposeInfoArchive* Arena::CreateMaybeMessage<::TSCE::TableTransposeInfoArchive>(Arena*);
template<> ::TSCE::TrackedReferenceArchive* Arena::CreateMaybeMessage<::TSCE::TrackedReferenceArchive>(Arena*);
template<> ::TSCE::TrackedReferencesRewriteCommandArchive* Arena::CreateMaybeMessage<::TSCE::TrackedReferencesRewriteCommandArchive>(Arena*);
template<> ::TSCE::UidCellRefSetArchive* Arena::CreateMaybeMessage<::TSCE::UidCellRefSetArchive>(Arena*);
template<> ::TSCE::UidCellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage<::TSCE::UidCellRefSetArchive_OwnerEntry>(Arena*);
template<> ::TSCE::UidCoordSetArchive* Arena::CreateMaybeMessage<::TSCE::UidCoordSetArchive>(Arena*);
template<> ::TSCE::UidCoordSetArchive_ColumnEntry* Arena::CreateMaybeMessage<::TSCE::UidCoordSetArchive_ColumnEntry>(Arena*);
template<> ::TSCE::UidLookupListArchive* Arena::CreateMaybeMessage<::TSCE::UidLookupListArchive>(Arena*);
template<> ::TSCE::UuidReferenceMapArchive* Arena::CreateMaybeMessage<::TSCE::UuidReferenceMapArchive>(Arena*);
template<> ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* Arena::CreateMaybeMessage<::TSCE::UuidReferenceMapArchive_CellRefsForUuid>(Arena*);
template<> ::TSCE::UuidReferencesArchive* Arena::CreateMaybeMessage<::TSCE::UuidReferencesArchive>(Arena*);
template<> ::TSCE::UuidReferencesArchive_TableRef* Arena::CreateMaybeMessage<::TSCE::UuidReferencesArchive_TableRef>(Arena*);
template<> ::TSCE::UuidReferencesArchive_TableWithUuidRef* Arena::CreateMaybeMessage<::TSCE::UuidReferencesArchive_TableWithUuidRef>(Arena*);
template<> ::TSCE::UuidReferencesArchive_UuidRef* Arena::CreateMaybeMessage<::TSCE::UuidReferencesArchive_UuidRef>(Arena*);
template<> ::TSCE::UuidSetStoreArchive* Arena::CreateMaybeMessage<::TSCE::UuidSetStoreArchive>(Arena*);
template<> ::TSCE::UuidSetStoreArchive_UuidSet* Arena::CreateMaybeMessage<::TSCE::UuidSetStoreArchive_UuidSet>(Arena*);
template<> ::TSCE::VolatileDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::VolatileDependenciesArchive>(Arena*);
template<> ::TSCE::VolatileDependenciesExpandedArchive* Arena::CreateMaybeMessage<::TSCE::VolatileDependenciesExpandedArchive>(Arena*);
template<> ::TSCE::WholeOwnerDependenciesArchive* Arena::CreateMaybeMessage<::TSCE::WholeOwnerDependenciesArchive>(Arena*);
template<> ::TSCE::WholeOwnerDependenciesExpandedArchive* Arena::CreateMaybeMessage<::TSCE::WholeOwnerDependenciesExpandedArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCE {

enum ReferenceArchive_ReferenceType : int {
  ReferenceArchive_ReferenceType_CELL_REFERENCE = 1,
  ReferenceArchive_ReferenceType_RANGE_REFERENCE = 2,
  ReferenceArchive_ReferenceType_NAME_DEPENDENCY = 3
};
bool ReferenceArchive_ReferenceType_IsValid(int value);
constexpr ReferenceArchive_ReferenceType ReferenceArchive_ReferenceType_ReferenceType_MIN = ReferenceArchive_ReferenceType_CELL_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive_ReferenceType_ReferenceType_MAX = ReferenceArchive_ReferenceType_NAME_DEPENDENCY;
constexpr int ReferenceArchive_ReferenceType_ReferenceType_ARRAYSIZE = ReferenceArchive_ReferenceType_ReferenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor();
template<typename T>
inline const std::string& ReferenceArchive_ReferenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferenceArchive_ReferenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferenceArchive_ReferenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReferenceArchive_ReferenceType_descriptor(), enum_t_value);
}
inline bool ReferenceArchive_ReferenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferenceArchive_ReferenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReferenceArchive_ReferenceType>(
    ReferenceArchive_ReferenceType_descriptor(), name, value);
}
enum SpanningDependenciesArchive_RangeContext : int {
  SpanningDependenciesArchive_RangeContext_DEFAULT = 0,
  SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS = 1
};
bool SpanningDependenciesArchive_RangeContext_IsValid(int value);
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_RangeContext_RangeContext_MIN = SpanningDependenciesArchive_RangeContext_DEFAULT;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_RangeContext_RangeContext_MAX = SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS;
constexpr int SpanningDependenciesArchive_RangeContext_RangeContext_ARRAYSIZE = SpanningDependenciesArchive_RangeContext_RangeContext_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor();
template<typename T>
inline const std::string& SpanningDependenciesArchive_RangeContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpanningDependenciesArchive_RangeContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpanningDependenciesArchive_RangeContext_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpanningDependenciesArchive_RangeContext_descriptor(), enum_t_value);
}
inline bool SpanningDependenciesArchive_RangeContext_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpanningDependenciesArchive_RangeContext* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpanningDependenciesArchive_RangeContext>(
    SpanningDependenciesArchive_RangeContext_descriptor(), name, value);
}
enum SpanningDependenciesExpandedArchive_RangeContext : int {
  SpanningDependenciesExpandedArchive_RangeContext_DEFAULT = 0,
  SpanningDependenciesExpandedArchive_RangeContext_INCLUDE_HEADERS = 1
};
bool SpanningDependenciesExpandedArchive_RangeContext_IsValid(int value);
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive_RangeContext_RangeContext_MIN = SpanningDependenciesExpandedArchive_RangeContext_DEFAULT;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive_RangeContext_RangeContext_MAX = SpanningDependenciesExpandedArchive_RangeContext_INCLUDE_HEADERS;
constexpr int SpanningDependenciesExpandedArchive_RangeContext_RangeContext_ARRAYSIZE = SpanningDependenciesExpandedArchive_RangeContext_RangeContext_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesExpandedArchive_RangeContext_descriptor();
template<typename T>
inline const std::string& SpanningDependenciesExpandedArchive_RangeContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpanningDependenciesExpandedArchive_RangeContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpanningDependenciesExpandedArchive_RangeContext_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpanningDependenciesExpandedArchive_RangeContext_descriptor(), enum_t_value);
}
inline bool SpanningDependenciesExpandedArchive_RangeContext_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpanningDependenciesExpandedArchive_RangeContext* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpanningDependenciesExpandedArchive_RangeContext>(
    SpanningDependenciesExpandedArchive_RangeContext_descriptor(), name, value);
}
enum CellErrorsArchive_ErrorFlavor : int {
  CellErrorsArchive_ErrorFlavor_NONE = 0,
  CellErrorsArchive_ErrorFlavor_ERROR = 1,
  CellErrorsArchive_ErrorFlavor_REF_ERROR = 2,
  CellErrorsArchive_ErrorFlavor_CIRCULAR_REF_ERROR = 3,
  CellErrorsArchive_ErrorFlavor_UNSUPPORTED_FUNCTION_ERROR = 4
};
bool CellErrorsArchive_ErrorFlavor_IsValid(int value);
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive_ErrorFlavor_ErrorFlavor_MIN = CellErrorsArchive_ErrorFlavor_NONE;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive_ErrorFlavor_ErrorFlavor_MAX = CellErrorsArchive_ErrorFlavor_UNSUPPORTED_FUNCTION_ERROR;
constexpr int CellErrorsArchive_ErrorFlavor_ErrorFlavor_ARRAYSIZE = CellErrorsArchive_ErrorFlavor_ErrorFlavor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellErrorsArchive_ErrorFlavor_descriptor();
template<typename T>
inline const std::string& CellErrorsArchive_ErrorFlavor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellErrorsArchive_ErrorFlavor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellErrorsArchive_ErrorFlavor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellErrorsArchive_ErrorFlavor_descriptor(), enum_t_value);
}
inline bool CellErrorsArchive_ErrorFlavor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellErrorsArchive_ErrorFlavor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellErrorsArchive_ErrorFlavor>(
    CellErrorsArchive_ErrorFlavor_descriptor(), name, value);
}
enum CalculationEngineArchive_ExcelImportDateMode : int {
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900 = 1,
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900_LEGACY = 2,
  CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY = 3
};
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value);
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MIN = CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX = CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY;
constexpr int CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_ARRAYSIZE = CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor();
template<typename T>
inline const std::string& CalculationEngineArchive_ExcelImportDateMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalculationEngineArchive_ExcelImportDateMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalculationEngineArchive_ExcelImportDateMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalculationEngineArchive_ExcelImportDateMode_descriptor(), enum_t_value);
}
inline bool CalculationEngineArchive_ExcelImportDateMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalculationEngineArchive_ExcelImportDateMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalculationEngineArchive_ExcelImportDateMode>(
    CalculationEngineArchive_ExcelImportDateMode_descriptor(), name, value);
}
enum ASTNodeArrayArchive_ASTNodeType : int {
  ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE = 1,
  ASTNodeArrayArchive_ASTNodeType_SUBTRACTION_NODE = 2,
  ASTNodeArrayArchive_ASTNodeType_MULTIPLICATION_NODE = 3,
  ASTNodeArrayArchive_ASTNodeType_DIVISION_NODE = 4,
  ASTNodeArrayArchive_ASTNodeType_POWER_NODE = 5,
  ASTNodeArrayArchive_ASTNodeType_CONCATENATION_NODE = 6,
  ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_NODE = 7,
  ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_OR_EQUAL_TO_NODE = 8,
  ASTNodeArrayArchive_ASTNodeType_LESS_THAN_NODE = 9,
  ASTNodeArrayArchive_ASTNodeType_LESS_THAN_OR_EQUAL_TO_NODE = 10,
  ASTNodeArrayArchive_ASTNodeType_EQUAL_TO_NODE = 11,
  ASTNodeArrayArchive_ASTNodeType_NOT_EQUAL_TO_NODE = 12,
  ASTNodeArrayArchive_ASTNodeType_NEGATION_NODE = 13,
  ASTNodeArrayArchive_ASTNodeType_PLUS_SIGN_NODE = 14,
  ASTNodeArrayArchive_ASTNodeType_PERCENT_NODE = 15,
  ASTNodeArrayArchive_ASTNodeType_FUNCTION_NODE = 16,
  ASTNodeArrayArchive_ASTNodeType_NUMBER_NODE = 17,
  ASTNodeArrayArchive_ASTNodeType_BOOLEAN_NODE = 18,
  ASTNodeArrayArchive_ASTNodeType_STRING_NODE = 19,
  ASTNodeArrayArchive_ASTNodeType_DATE_NODE = 20,
  ASTNodeArrayArchive_ASTNodeType_DURATION_NODE = 21,
  ASTNodeArrayArchive_ASTNodeType_EMPTY_ARGUMENT_NODE = 22,
  ASTNodeArrayArchive_ASTNodeType_TOKEN_NODE = 23,
  ASTNodeArrayArchive_ASTNodeType_ARRAY_NODE = 24,
  ASTNodeArrayArchive_ASTNodeType_LIST_NODE = 25,
  ASTNodeArrayArchive_ASTNodeType_THUNK_NODE = 26,
  ASTNodeArrayArchive_ASTNodeType_LOCAL_CELL_REFERENCE_NODE = 27,
  ASTNodeArrayArchive_ASTNodeType_CROSS_TABLE_CELL_REFERENCE_NODE = 28,
  ASTNodeArrayArchive_ASTNodeType_COLON_NODE = 29,
  ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_NODE = 30,
  ASTNodeArrayArchive_ASTNodeType_UNKNOWN_FUNCTION_NODE = 31,
  ASTNodeArrayArchive_ASTNodeType_APPEND_WHITESPACE_NODE = 32,
  ASTNodeArrayArchive_ASTNodeType_PREPEND_WHITESPACE_NODE = 33,
  ASTNodeArrayArchive_ASTNodeType_BEGIN_EMBEDDED_NODE_ARRAY = 34,
  ASTNodeArrayArchive_ASTNodeType_END_THUNK_NODE = 35,
  ASTNodeArrayArchive_ASTNodeType_CELL_REFERENCE_NODE = 36,
  ASTNodeArrayArchive_ASTNodeType_COLON_NODE_WITH_UIDS = 45,
  ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_WITH_UIDS = 46,
  ASTNodeArrayArchive_ASTNodeType_UID_REFERENCE_NODE = 48,
  ASTNodeArrayArchive_ASTNodeType_LET_NODE = 52,
  ASTNodeArrayArchive_ASTNodeType_LET_VAR_NODE = 53,
  ASTNodeArrayArchive_ASTNodeType_LET_END_NODE = 54,
  ASTNodeArrayArchive_ASTNodeType_LINKED_CELL_REF_NODE = 63,
  ASTNodeArrayArchive_ASTNodeType_LINKED_COLUMN_REF_NODE = 64,
  ASTNodeArrayArchive_ASTNodeType_LINKED_ROW_REF_NODE = 65,
  ASTNodeArrayArchive_ASTNodeType_CATEGORY_REF_NODE = 66,
  ASTNodeArrayArchive_ASTNodeType_COLON_TRACT_NODE = 67
};
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value);
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MIN = ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX = ASTNodeArrayArchive_ASTNodeType_COLON_TRACT_NODE;
constexpr int ASTNodeArrayArchive_ASTNodeType_ASTNodeType_ARRAYSIZE = ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor();
template<typename T>
inline const std::string& ASTNodeArrayArchive_ASTNodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ASTNodeArrayArchive_ASTNodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ASTNodeArrayArchive_ASTNodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ASTNodeArrayArchive_ASTNodeType_descriptor(), enum_t_value);
}
inline bool ASTNodeArrayArchive_ASTNodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ASTNodeArrayArchive_ASTNodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ASTNodeArrayArchive_ASTNodeType>(
    ASTNodeArrayArchive_ASTNodeType_descriptor(), name, value);
}
enum ASTNodeArrayArchive_ASTUidTractPurpose : int {
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_INCLUDED = 0,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMERGE = 1,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMOVEREGION = 2,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_EXCLUDED = 3,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_ACTIVE = 4,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMERGE_TOPLEFT = 5,
  ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_REMOVED_BY_MOVE = 6
};
bool ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(int value);
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_MIN = ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_INCLUDED;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_MAX = ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_REMOVED_BY_MOVE;
constexpr int ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_ARRAYSIZE = ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTUidTractPurpose_descriptor();
template<typename T>
inline const std::string& ASTNodeArrayArchive_ASTUidTractPurpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ASTNodeArrayArchive_ASTUidTractPurpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ASTNodeArrayArchive_ASTUidTractPurpose_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ASTNodeArrayArchive_ASTUidTractPurpose_descriptor(), enum_t_value);
}
inline bool ASTNodeArrayArchive_ASTUidTractPurpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ASTNodeArrayArchive_ASTUidTractPurpose* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ASTNodeArrayArchive_ASTUidTractPurpose>(
    ASTNodeArrayArchive_ASTUidTractPurpose_descriptor(), name, value);
}
enum GroupByChangeArchive_ChangeType : int {
  GroupByChangeArchive_ChangeType_NONE = 0,
  GroupByChangeArchive_ChangeType_GROUP_VALUE_CHANGE = 1,
  GroupByChangeArchive_ChangeType_GROUP_DEFINITION_CHANGE = 2,
  GroupByChangeArchive_ChangeType_REMOVE_GROUP_LEVEL = 3,
  GroupByChangeArchive_ChangeType_ADD_GROUP_LEVEL = 4,
  GroupByChangeArchive_ChangeType_PROMOTE = 5,
  GroupByChangeArchive_ChangeType_DEMOTE = 6
};
bool GroupByChangeArchive_ChangeType_IsValid(int value);
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive_ChangeType_ChangeType_MIN = GroupByChangeArchive_ChangeType_NONE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive_ChangeType_ChangeType_MAX = GroupByChangeArchive_ChangeType_DEMOTE;
constexpr int GroupByChangeArchive_ChangeType_ChangeType_ARRAYSIZE = GroupByChangeArchive_ChangeType_ChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupByChangeArchive_ChangeType_descriptor();
template<typename T>
inline const std::string& GroupByChangeArchive_ChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupByChangeArchive_ChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupByChangeArchive_ChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupByChangeArchive_ChangeType_descriptor(), enum_t_value);
}
inline bool GroupByChangeArchive_ChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupByChangeArchive_ChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupByChangeArchive_ChangeType>(
    GroupByChangeArchive_ChangeType_descriptor(), name, value);
}
enum FormulaRewriteSpecArchive_RewriteType : int {
  FormulaRewriteSpecArchive_RewriteType_DELETE_OWNER = 4,
  FormulaRewriteSpecArchive_RewriteType_TRANSPOSE_TABLE = 7,
  FormulaRewriteSpecArchive_RewriteType_REMOVE_COLUMNS_OR_ROWS = 8,
  FormulaRewriteSpecArchive_RewriteType_INSERT_COLUMNS_OR_ROWS = 9,
  FormulaRewriteSpecArchive_RewriteType_MOVE_COLUMNS_OR_ROWS = 10,
  FormulaRewriteSpecArchive_RewriteType_MOVE_REGION = 11,
  FormulaRewriteSpecArchive_RewriteType_SORT_ROWS = 12,
  FormulaRewriteSpecArchive_RewriteType_MERGE_CELLS = 13,
  FormulaRewriteSpecArchive_RewriteType_UNDO_MERGE_CELLS = 14,
  FormulaRewriteSpecArchive_RewriteType_TABLE_ID_REASSIGNMENT = 15,
  FormulaRewriteSpecArchive_RewriteType_INSERT_OWNER = 16,
  FormulaRewriteSpecArchive_RewriteType_MERGE_ORIGIN_MOVED = 17,
  FormulaRewriteSpecArchive_RewriteType_REORDER_ROWS = 18,
  FormulaRewriteSpecArchive_RewriteType_GROUP_NODE_UID_REASSIGNMENT = 19,
  FormulaRewriteSpecArchive_RewriteType_BASE_TO_CHROME_REWRITE = 20,
  FormulaRewriteSpecArchive_RewriteType_CHROME_TO_BASE_REWRITE = 21,
  FormulaRewriteSpecArchive_RewriteType_GROUP_NODE_CHANGE = 22,
  FormulaRewriteSpecArchive_RewriteType_PASTED_AREA = 23
};
bool FormulaRewriteSpecArchive_RewriteType_IsValid(int value);
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive_RewriteType_RewriteType_MIN = FormulaRewriteSpecArchive_RewriteType_DELETE_OWNER;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX = FormulaRewriteSpecArchive_RewriteType_PASTED_AREA;
constexpr int FormulaRewriteSpecArchive_RewriteType_RewriteType_ARRAYSIZE = FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor();
template<typename T>
inline const std::string& FormulaRewriteSpecArchive_RewriteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FormulaRewriteSpecArchive_RewriteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FormulaRewriteSpecArchive_RewriteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FormulaRewriteSpecArchive_RewriteType_descriptor(), enum_t_value);
}
inline bool FormulaRewriteSpecArchive_RewriteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FormulaRewriteSpecArchive_RewriteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FormulaRewriteSpecArchive_RewriteType>(
    FormulaRewriteSpecArchive_RewriteType_descriptor(), name, value);
}
enum ErrorCellValueArchive_ErrorType : int {
  ErrorCellValueArchive_ErrorType_UnknownError = 1,
  ErrorCellValueArchive_ErrorType_InvalidLiveStockAttribute = 111,
  ErrorCellValueArchive_ErrorType_InvalidLiveCurrencyAttribute = 112,
  ErrorCellValueArchive_ErrorType_InvalidHistoricalStockAttribute = 113,
  ErrorCellValueArchive_ErrorType_InvalidHistoricalCurrencyAttribute = 114,
  ErrorCellValueArchive_ErrorType_InvalidHistoricalDate = 115,
  ErrorCellValueArchive_ErrorType_NoTradingInformation = 116,
  ErrorCellValueArchive_ErrorType_InvalidStockCode = 117,
  ErrorCellValueArchive_ErrorType_InvalidCurrencyPair = 118,
  ErrorCellValueArchive_ErrorType_RemoteDataServerError = 119
};
bool ErrorCellValueArchive_ErrorType_IsValid(int value);
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive_ErrorType_ErrorType_MIN = ErrorCellValueArchive_ErrorType_UnknownError;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive_ErrorType_ErrorType_MAX = ErrorCellValueArchive_ErrorType_RemoteDataServerError;
constexpr int ErrorCellValueArchive_ErrorType_ErrorType_ARRAYSIZE = ErrorCellValueArchive_ErrorType_ErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCellValueArchive_ErrorType_descriptor();
template<typename T>
inline const std::string& ErrorCellValueArchive_ErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCellValueArchive_ErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCellValueArchive_ErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCellValueArchive_ErrorType_descriptor(), enum_t_value);
}
inline bool ErrorCellValueArchive_ErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCellValueArchive_ErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCellValueArchive_ErrorType>(
    ErrorCellValueArchive_ErrorType_descriptor(), name, value);
}
enum CellValueArchive_CellValueType : int {
  CellValueArchive_CellValueType_NIL_TYPE = 1,
  CellValueArchive_CellValueType_BOOLEAN_TYPE = 2,
  CellValueArchive_CellValueType_DATE_TYPE = 3,
  CellValueArchive_CellValueType_NUMBER_TYPE = 4,
  CellValueArchive_CellValueType_STRING_TYPE = 5
};
bool CellValueArchive_CellValueType_IsValid(int value);
constexpr CellValueArchive_CellValueType CellValueArchive_CellValueType_CellValueType_MIN = CellValueArchive_CellValueType_NIL_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive_CellValueType_CellValueType_MAX = CellValueArchive_CellValueType_STRING_TYPE;
constexpr int CellValueArchive_CellValueType_CellValueType_ARRAYSIZE = CellValueArchive_CellValueType_CellValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueArchive_CellValueType_descriptor();
template<typename T>
inline const std::string& CellValueArchive_CellValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellValueArchive_CellValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellValueArchive_CellValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellValueArchive_CellValueType_descriptor(), enum_t_value);
}
inline bool CellValueArchive_CellValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellValueArchive_CellValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellValueArchive_CellValueType>(
    CellValueArchive_CellValueType_descriptor(), name, value);
}
enum CategoryAggType : int {
  AGGR_NONE = 0,
  AGGR_COUNT = 1,
  AGGR_TOTAL = 2,
  AGGR_AVG = 3,
  AGGR_MIN = 4,
  AGGR_MAX = 5,
  AGGR_CHARTGROUPVALUEHIERARCHY = 7,
  AGGR_GROUPVALUEHIERARCHY = 8,
  AGGR_GROUPVALUE = 9,
  AGGR_BODYROWS = 10,
  AGGR_INDIRECT = 11,
  AGGR_LABEL = 12
};
bool CategoryAggType_IsValid(int value);
constexpr CategoryAggType CategoryAggType_MIN = AGGR_NONE;
constexpr CategoryAggType CategoryAggType_MAX = AGGR_LABEL;
constexpr int CategoryAggType_ARRAYSIZE = CategoryAggType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CategoryAggType_descriptor();
template<typename T>
inline const std::string& CategoryAggType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CategoryAggType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CategoryAggType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CategoryAggType_descriptor(), enum_t_value);
}
inline bool CategoryAggType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CategoryAggType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CategoryAggType>(
    CategoryAggType_descriptor(), name, value);
}
// ===================================================================

class CellReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellReferenceArchive) */ {
 public:
  inline CellReferenceArchive() : CellReferenceArchive(nullptr) {}
  ~CellReferenceArchive() override;
  explicit constexpr CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellReferenceArchive(const CellReferenceArchive& from);
  CellReferenceArchive(CellReferenceArchive&& from) noexcept
    : CellReferenceArchive() {
    *this = ::std::move(from);
  }

  inline CellReferenceArchive& operator=(const CellReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellReferenceArchive& operator=(CellReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const CellReferenceArchive*>(
               &_CellReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CellReferenceArchive& a, CellReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellReferenceArchive* New() const final {
    return CreateMaybeMessage<CellReferenceArchive>(nullptr);
  }

  CellReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellReferenceArchive& from);
  void MergeFrom(const CellReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellReferenceArchive";
  }
  protected:
  explicit CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
  };
  // required .TSP.CFUUIDArchive table_id = 3;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalCellReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalCellReferenceArchive) */ {
 public:
  inline InternalCellReferenceArchive() : InternalCellReferenceArchive(nullptr) {}
  ~InternalCellReferenceArchive() override;
  explicit constexpr InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalCellReferenceArchive(const InternalCellReferenceArchive& from);
  InternalCellReferenceArchive(InternalCellReferenceArchive&& from) noexcept
    : InternalCellReferenceArchive() {
    *this = ::std::move(from);
  }

  inline InternalCellReferenceArchive& operator=(const InternalCellReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalCellReferenceArchive& operator=(InternalCellReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalCellReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalCellReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const InternalCellReferenceArchive*>(
               &_InternalCellReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalCellReferenceArchive& a, InternalCellReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalCellReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalCellReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalCellReferenceArchive* New() const final {
    return CreateMaybeMessage<InternalCellReferenceArchive>(nullptr);
  }

  InternalCellReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalCellReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalCellReferenceArchive& from);
  void MergeFrom(const InternalCellReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalCellReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalCellReferenceArchive";
  }
  protected:
  explicit InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::TSCE::CellCoordinateArchive& coordinate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_coordinate();
  void set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_coordinate() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::TSCE::CellCoordinateArchive* coordinate);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_coordinate();

  // required uint32 owner_id = 2;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.InternalCellReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeReferenceArchive) */ {
 public:
  inline RangeReferenceArchive() : RangeReferenceArchive(nullptr) {}
  ~RangeReferenceArchive() override;
  explicit constexpr RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeReferenceArchive(const RangeReferenceArchive& from);
  RangeReferenceArchive(RangeReferenceArchive&& from) noexcept
    : RangeReferenceArchive() {
    *this = ::std::move(from);
  }

  inline RangeReferenceArchive& operator=(const RangeReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeReferenceArchive& operator=(RangeReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const RangeReferenceArchive*>(
               &_RangeReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RangeReferenceArchive& a, RangeReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeReferenceArchive* New() const final {
    return CreateMaybeMessage<RangeReferenceArchive>(nullptr);
  }

  RangeReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeReferenceArchive& from);
  void MergeFrom(const RangeReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeReferenceArchive";
  }
  protected:
  explicit RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kTopLeftColumnFieldNumber = 2,
    kTopLeftRowFieldNumber = 3,
    kBottomRightColumnFieldNumber = 4,
    kBottomRightRowFieldNumber = 5,
  };
  // required .TSP.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 top_left_column = 2;
  bool has_top_left_column() const;
  private:
  bool _internal_has_top_left_column() const;
  public:
  void clear_top_left_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_column() const;
  void set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_left_column() const;
  void _internal_set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 top_left_row = 3;
  bool has_top_left_row() const;
  private:
  bool _internal_has_top_left_row() const;
  public:
  void clear_top_left_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_row() const;
  void set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_left_row() const;
  void _internal_set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 bottom_right_column = 4;
  bool has_bottom_right_column() const;
  private:
  bool _internal_has_bottom_right_column() const;
  public:
  void clear_bottom_right_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_column() const;
  void set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bottom_right_column() const;
  void _internal_set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 bottom_right_row = 5;
  bool has_bottom_right_row() const;
  private:
  bool _internal_has_bottom_right_row() const;
  public:
  void clear_bottom_right_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_row() const;
  void set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bottom_right_row() const;
  void _internal_set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalRangeReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalRangeReferenceArchive) */ {
 public:
  inline InternalRangeReferenceArchive() : InternalRangeReferenceArchive(nullptr) {}
  ~InternalRangeReferenceArchive() override;
  explicit constexpr InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from);
  InternalRangeReferenceArchive(InternalRangeReferenceArchive&& from) noexcept
    : InternalRangeReferenceArchive() {
    *this = ::std::move(from);
  }

  inline InternalRangeReferenceArchive& operator=(const InternalRangeReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalRangeReferenceArchive& operator=(InternalRangeReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalRangeReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalRangeReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const InternalRangeReferenceArchive*>(
               &_InternalRangeReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternalRangeReferenceArchive& a, InternalRangeReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalRangeReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalRangeReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalRangeReferenceArchive* New() const final {
    return CreateMaybeMessage<InternalRangeReferenceArchive>(nullptr);
  }

  InternalRangeReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalRangeReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalRangeReferenceArchive& from);
  void MergeFrom(const InternalRangeReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalRangeReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalRangeReferenceArchive";
  }
  protected:
  explicit InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // required .TSCE.RangeCoordinateArchive range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSCE::RangeCoordinateArchive& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_range();
  ::TSCE::RangeCoordinateArchive* mutable_range();
  void set_allocated_range(::TSCE::RangeCoordinateArchive* range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSCE::RangeCoordinateArchive* range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_range();

  // required uint32 owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.InternalRangeReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RangeCoordinateArchive* range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class IndexSetArchive_IndexSetEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.IndexSetArchive.IndexSetEntry) */ {
 public:
  inline IndexSetArchive_IndexSetEntry() : IndexSetArchive_IndexSetEntry(nullptr) {}
  ~IndexSetArchive_IndexSetEntry() override;
  explicit constexpr IndexSetArchive_IndexSetEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexSetArchive_IndexSetEntry(const IndexSetArchive_IndexSetEntry& from);
  IndexSetArchive_IndexSetEntry(IndexSetArchive_IndexSetEntry&& from) noexcept
    : IndexSetArchive_IndexSetEntry() {
    *this = ::std::move(from);
  }

  inline IndexSetArchive_IndexSetEntry& operator=(const IndexSetArchive_IndexSetEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSetArchive_IndexSetEntry& operator=(IndexSetArchive_IndexSetEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSetArchive_IndexSetEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSetArchive_IndexSetEntry* internal_default_instance() {
    return reinterpret_cast<const IndexSetArchive_IndexSetEntry*>(
               &_IndexSetArchive_IndexSetEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IndexSetArchive_IndexSetEntry& a, IndexSetArchive_IndexSetEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexSetArchive_IndexSetEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSetArchive_IndexSetEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexSetArchive_IndexSetEntry* New() const final {
    return CreateMaybeMessage<IndexSetArchive_IndexSetEntry>(nullptr);
  }

  IndexSetArchive_IndexSetEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexSetArchive_IndexSetEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexSetArchive_IndexSetEntry& from);
  void MergeFrom(const IndexSetArchive_IndexSetEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexSetArchive_IndexSetEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.IndexSetArchive.IndexSetEntry";
  }
  protected:
  explicit IndexSetArchive_IndexSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeBeginFieldNumber = 1,
    kRangeEndFieldNumber = 2,
  };
  // required int32 range_begin = 1;
  bool has_range_begin() const;
  private:
  bool _internal_has_range_begin() const;
  public:
  void clear_range_begin();
  ::PROTOBUF_NAMESPACE_ID::int32 range_begin() const;
  void set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_begin() const;
  void _internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 range_end = 2;
  bool has_range_end() const;
  private:
  bool _internal_has_range_end() const;
  public:
  void clear_range_end();
  ::PROTOBUF_NAMESPACE_ID::int32 range_end() const;
  void set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_end() const;
  void _internal_set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.IndexSetArchive.IndexSetEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_begin_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_end_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class IndexSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.IndexSetArchive) */ {
 public:
  inline IndexSetArchive() : IndexSetArchive(nullptr) {}
  ~IndexSetArchive() override;
  explicit constexpr IndexSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexSetArchive(const IndexSetArchive& from);
  IndexSetArchive(IndexSetArchive&& from) noexcept
    : IndexSetArchive() {
    *this = ::std::move(from);
  }

  inline IndexSetArchive& operator=(const IndexSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSetArchive& operator=(IndexSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSetArchive* internal_default_instance() {
    return reinterpret_cast<const IndexSetArchive*>(
               &_IndexSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IndexSetArchive& a, IndexSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexSetArchive* New() const final {
    return CreateMaybeMessage<IndexSetArchive>(nullptr);
  }

  IndexSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexSetArchive& from);
  void MergeFrom(const IndexSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.IndexSetArchive";
  }
  protected:
  explicit IndexSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexSetArchive_IndexSetEntry IndexSetEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSCE::IndexSetArchive_IndexSetEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexSetArchive_IndexSetEntry >*
      mutable_entries();
  private:
  const ::TSCE::IndexSetArchive_IndexSetEntry& _internal_entries(int index) const;
  ::TSCE::IndexSetArchive_IndexSetEntry* _internal_add_entries();
  public:
  const ::TSCE::IndexSetArchive_IndexSetEntry& entries(int index) const;
  ::TSCE::IndexSetArchive_IndexSetEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexSetArchive_IndexSetEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.IndexSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexSetArchive_IndexSetEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordSetArchive_ColumnEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordSetArchive.ColumnEntry) */ {
 public:
  inline CellCoordSetArchive_ColumnEntry() : CellCoordSetArchive_ColumnEntry(nullptr) {}
  ~CellCoordSetArchive_ColumnEntry() override;
  explicit constexpr CellCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordSetArchive_ColumnEntry(const CellCoordSetArchive_ColumnEntry& from);
  CellCoordSetArchive_ColumnEntry(CellCoordSetArchive_ColumnEntry&& from) noexcept
    : CellCoordSetArchive_ColumnEntry() {
    *this = ::std::move(from);
  }

  inline CellCoordSetArchive_ColumnEntry& operator=(const CellCoordSetArchive_ColumnEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordSetArchive_ColumnEntry& operator=(CellCoordSetArchive_ColumnEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordSetArchive_ColumnEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordSetArchive_ColumnEntry* internal_default_instance() {
    return reinterpret_cast<const CellCoordSetArchive_ColumnEntry*>(
               &_CellCoordSetArchive_ColumnEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CellCoordSetArchive_ColumnEntry& a, CellCoordSetArchive_ColumnEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordSetArchive_ColumnEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordSetArchive_ColumnEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellCoordSetArchive_ColumnEntry* New() const final {
    return CreateMaybeMessage<CellCoordSetArchive_ColumnEntry>(nullptr);
  }

  CellCoordSetArchive_ColumnEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellCoordSetArchive_ColumnEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellCoordSetArchive_ColumnEntry& from);
  void MergeFrom(const CellCoordSetArchive_ColumnEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordSetArchive_ColumnEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordSetArchive.ColumnEntry";
  }
  protected:
  explicit CellCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowSetFieldNumber = 2,
    kColumnFieldNumber = 1,
  };
  // required .TSCE.IndexSetArchive row_set = 2;
  bool has_row_set() const;
  private:
  bool _internal_has_row_set() const;
  public:
  void clear_row_set();
  const ::TSCE::IndexSetArchive& row_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexSetArchive* release_row_set();
  ::TSCE::IndexSetArchive* mutable_row_set();
  void set_allocated_row_set(::TSCE::IndexSetArchive* row_set);
  private:
  const ::TSCE::IndexSetArchive& _internal_row_set() const;
  ::TSCE::IndexSetArchive* _internal_mutable_row_set();
  public:
  void unsafe_arena_set_allocated_row_set(
      ::TSCE::IndexSetArchive* row_set);
  ::TSCE::IndexSetArchive* unsafe_arena_release_row_set();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordSetArchive.ColumnEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::IndexSetArchive* row_set_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordSetArchive) */ {
 public:
  inline CellCoordSetArchive() : CellCoordSetArchive(nullptr) {}
  ~CellCoordSetArchive() override;
  explicit constexpr CellCoordSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordSetArchive(const CellCoordSetArchive& from);
  CellCoordSetArchive(CellCoordSetArchive&& from) noexcept
    : CellCoordSetArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordSetArchive& operator=(const CellCoordSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordSetArchive& operator=(CellCoordSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordSetArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordSetArchive*>(
               &_CellCoordSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CellCoordSetArchive& a, CellCoordSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellCoordSetArchive* New() const final {
    return CreateMaybeMessage<CellCoordSetArchive>(nullptr);
  }

  CellCoordSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellCoordSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellCoordSetArchive& from);
  void MergeFrom(const CellCoordSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordSetArchive";
  }
  protected:
  explicit CellCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellCoordSetArchive_ColumnEntry ColumnEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnEntriesFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
  int column_entries_size() const;
  private:
  int _internal_column_entries_size() const;
  public:
  void clear_column_entries();
  ::TSCE::CellCoordSetArchive_ColumnEntry* mutable_column_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordSetArchive_ColumnEntry >*
      mutable_column_entries();
  private:
  const ::TSCE::CellCoordSetArchive_ColumnEntry& _internal_column_entries(int index) const;
  ::TSCE::CellCoordSetArchive_ColumnEntry* _internal_add_column_entries();
  public:
  const ::TSCE::CellCoordSetArchive_ColumnEntry& column_entries(int index) const;
  ::TSCE::CellCoordSetArchive_ColumnEntry* add_column_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordSetArchive_ColumnEntry >&
      column_entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordSetArchive_ColumnEntry > column_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalCellRefSetArchive_OwnerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalCellRefSetArchive.OwnerEntry) */ {
 public:
  inline InternalCellRefSetArchive_OwnerEntry() : InternalCellRefSetArchive_OwnerEntry(nullptr) {}
  ~InternalCellRefSetArchive_OwnerEntry() override;
  explicit constexpr InternalCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalCellRefSetArchive_OwnerEntry(const InternalCellRefSetArchive_OwnerEntry& from);
  InternalCellRefSetArchive_OwnerEntry(InternalCellRefSetArchive_OwnerEntry&& from) noexcept
    : InternalCellRefSetArchive_OwnerEntry() {
    *this = ::std::move(from);
  }

  inline InternalCellRefSetArchive_OwnerEntry& operator=(const InternalCellRefSetArchive_OwnerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalCellRefSetArchive_OwnerEntry& operator=(InternalCellRefSetArchive_OwnerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalCellRefSetArchive_OwnerEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalCellRefSetArchive_OwnerEntry* internal_default_instance() {
    return reinterpret_cast<const InternalCellRefSetArchive_OwnerEntry*>(
               &_InternalCellRefSetArchive_OwnerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InternalCellRefSetArchive_OwnerEntry& a, InternalCellRefSetArchive_OwnerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalCellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalCellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalCellRefSetArchive_OwnerEntry* New() const final {
    return CreateMaybeMessage<InternalCellRefSetArchive_OwnerEntry>(nullptr);
  }

  InternalCellRefSetArchive_OwnerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalCellRefSetArchive_OwnerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalCellRefSetArchive_OwnerEntry& from);
  void MergeFrom(const InternalCellRefSetArchive_OwnerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalCellRefSetArchive_OwnerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalCellRefSetArchive.OwnerEntry";
  }
  protected:
  explicit InternalCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordSetFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // required .TSCE.CellCoordSetArchive coord_set = 2;
  bool has_coord_set() const;
  private:
  bool _internal_has_coord_set() const;
  public:
  void clear_coord_set();
  const ::TSCE::CellCoordSetArchive& coord_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_coord_set();
  ::TSCE::CellCoordSetArchive* mutable_coord_set();
  void set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_coord_set() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_coord_set();
  public:
  void unsafe_arena_set_allocated_coord_set(
      ::TSCE::CellCoordSetArchive* coord_set);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_coord_set();

  // required uint32 owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.InternalCellRefSetArchive.OwnerEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordSetArchive* coord_set_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class InternalCellRefSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.InternalCellRefSetArchive) */ {
 public:
  inline InternalCellRefSetArchive() : InternalCellRefSetArchive(nullptr) {}
  ~InternalCellRefSetArchive() override;
  explicit constexpr InternalCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalCellRefSetArchive(const InternalCellRefSetArchive& from);
  InternalCellRefSetArchive(InternalCellRefSetArchive&& from) noexcept
    : InternalCellRefSetArchive() {
    *this = ::std::move(from);
  }

  inline InternalCellRefSetArchive& operator=(const InternalCellRefSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalCellRefSetArchive& operator=(InternalCellRefSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalCellRefSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalCellRefSetArchive* internal_default_instance() {
    return reinterpret_cast<const InternalCellRefSetArchive*>(
               &_InternalCellRefSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InternalCellRefSetArchive& a, InternalCellRefSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalCellRefSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalCellRefSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalCellRefSetArchive* New() const final {
    return CreateMaybeMessage<InternalCellRefSetArchive>(nullptr);
  }

  InternalCellRefSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalCellRefSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalCellRefSetArchive& from);
  void MergeFrom(const InternalCellRefSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalCellRefSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.InternalCellRefSetArchive";
  }
  protected:
  explicit InternalCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InternalCellRefSetArchive_OwnerEntry OwnerEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerEntriesFieldNumber = 1,
  };
  // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
  int owner_entries_size() const;
  private:
  int _internal_owner_entries_size() const;
  public:
  void clear_owner_entries();
  ::TSCE::InternalCellRefSetArchive_OwnerEntry* mutable_owner_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellRefSetArchive_OwnerEntry >*
      mutable_owner_entries();
  private:
  const ::TSCE::InternalCellRefSetArchive_OwnerEntry& _internal_owner_entries(int index) const;
  ::TSCE::InternalCellRefSetArchive_OwnerEntry* _internal_add_owner_entries();
  public:
  const ::TSCE::InternalCellRefSetArchive_OwnerEntry& owner_entries(int index) const;
  ::TSCE::InternalCellRefSetArchive_OwnerEntry* add_owner_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellRefSetArchive_OwnerEntry >&
      owner_entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.InternalCellRefSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellRefSetArchive_OwnerEntry > owner_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnRowSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ColumnRowSize) */ {
 public:
  inline ColumnRowSize() : ColumnRowSize(nullptr) {}
  ~ColumnRowSize() override;
  explicit constexpr ColumnRowSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnRowSize(const ColumnRowSize& from);
  ColumnRowSize(ColumnRowSize&& from) noexcept
    : ColumnRowSize() {
    *this = ::std::move(from);
  }

  inline ColumnRowSize& operator=(const ColumnRowSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRowSize& operator=(ColumnRowSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnRowSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnRowSize* internal_default_instance() {
    return reinterpret_cast<const ColumnRowSize*>(
               &_ColumnRowSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ColumnRowSize& a, ColumnRowSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRowSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRowSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnRowSize* New() const final {
    return CreateMaybeMessage<ColumnRowSize>(nullptr);
  }

  ColumnRowSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnRowSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnRowSize& from);
  void MergeFrom(const ColumnRowSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRowSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ColumnRowSize";
  }
  protected:
  explicit ColumnRowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumColumnsFieldNumber = 1,
    kNumRowsFieldNumber = 2,
  };
  // optional uint32 num_columns = 1 [default = 1];
  bool has_num_columns() const;
  private:
  bool _internal_has_num_columns() const;
  public:
  void clear_num_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns() const;
  void set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_columns() const;
  void _internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_rows = 2 [default = 1];
  bool has_num_rows() const;
  private:
  bool _internal_has_num_rows() const;
  public:
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ColumnRowSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRectArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRectArchive) */ {
 public:
  inline CellRectArchive() : CellRectArchive(nullptr) {}
  ~CellRectArchive() override;
  explicit constexpr CellRectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRectArchive(const CellRectArchive& from);
  CellRectArchive(CellRectArchive&& from) noexcept
    : CellRectArchive() {
    *this = ::std::move(from);
  }

  inline CellRectArchive& operator=(const CellRectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRectArchive& operator=(CellRectArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRectArchive* internal_default_instance() {
    return reinterpret_cast<const CellRectArchive*>(
               &_CellRectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CellRectArchive& a, CellRectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRectArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRectArchive* New() const final {
    return CreateMaybeMessage<CellRectArchive>(nullptr);
  }

  CellRectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRectArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRectArchive& from);
  void MergeFrom(const CellRectArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRectArchive";
  }
  protected:
  explicit CellRectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::TSCE::CellCoordinateArchive& origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_origin();
  ::TSCE::CellCoordinateArchive* mutable_origin();
  void set_allocated_origin(::TSCE::CellCoordinateArchive* origin);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_origin() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::TSCE::CellCoordinateArchive* origin);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_origin();

  // required .TSCE.ColumnRowSize size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSCE::ColumnRowSize& size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ColumnRowSize* release_size();
  ::TSCE::ColumnRowSize* mutable_size();
  void set_allocated_size(::TSCE::ColumnRowSize* size);
  private:
  const ::TSCE::ColumnRowSize& _internal_size() const;
  ::TSCE::ColumnRowSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSCE::ColumnRowSize* size);
  ::TSCE::ColumnRowSize* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:TSCE.CellRectArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* origin_;
  ::TSCE::ColumnRowSize* size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRefSetArchive_OwnerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRefSetArchive.OwnerEntry) */ {
 public:
  inline CellRefSetArchive_OwnerEntry() : CellRefSetArchive_OwnerEntry(nullptr) {}
  ~CellRefSetArchive_OwnerEntry() override;
  explicit constexpr CellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRefSetArchive_OwnerEntry(const CellRefSetArchive_OwnerEntry& from);
  CellRefSetArchive_OwnerEntry(CellRefSetArchive_OwnerEntry&& from) noexcept
    : CellRefSetArchive_OwnerEntry() {
    *this = ::std::move(from);
  }

  inline CellRefSetArchive_OwnerEntry& operator=(const CellRefSetArchive_OwnerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRefSetArchive_OwnerEntry& operator=(CellRefSetArchive_OwnerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRefSetArchive_OwnerEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRefSetArchive_OwnerEntry* internal_default_instance() {
    return reinterpret_cast<const CellRefSetArchive_OwnerEntry*>(
               &_CellRefSetArchive_OwnerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CellRefSetArchive_OwnerEntry& a, CellRefSetArchive_OwnerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRefSetArchive_OwnerEntry* New() const final {
    return CreateMaybeMessage<CellRefSetArchive_OwnerEntry>(nullptr);
  }

  CellRefSetArchive_OwnerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRefSetArchive_OwnerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRefSetArchive_OwnerEntry& from);
  void MergeFrom(const CellRefSetArchive_OwnerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRefSetArchive_OwnerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRefSetArchive.OwnerEntry";
  }
  protected:
  explicit CellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUidFieldNumber = 1,
    kCoordSetFieldNumber = 2,
  };
  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // required .TSCE.CellCoordSetArchive coord_set = 2;
  bool has_coord_set() const;
  private:
  bool _internal_has_coord_set() const;
  public:
  void clear_coord_set();
  const ::TSCE::CellCoordSetArchive& coord_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_coord_set();
  ::TSCE::CellCoordSetArchive* mutable_coord_set();
  void set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_coord_set() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_coord_set();
  public:
  void unsafe_arena_set_allocated_coord_set(
      ::TSCE::CellCoordSetArchive* coord_set);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_coord_set();

  // @@protoc_insertion_point(class_scope:TSCE.CellRefSetArchive.OwnerEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* owner_uid_;
  ::TSCE::CellCoordSetArchive* coord_set_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRefSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRefSetArchive) */ {
 public:
  inline CellRefSetArchive() : CellRefSetArchive(nullptr) {}
  ~CellRefSetArchive() override;
  explicit constexpr CellRefSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRefSetArchive(const CellRefSetArchive& from);
  CellRefSetArchive(CellRefSetArchive&& from) noexcept
    : CellRefSetArchive() {
    *this = ::std::move(from);
  }

  inline CellRefSetArchive& operator=(const CellRefSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRefSetArchive& operator=(CellRefSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRefSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRefSetArchive* internal_default_instance() {
    return reinterpret_cast<const CellRefSetArchive*>(
               &_CellRefSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CellRefSetArchive& a, CellRefSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRefSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRefSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRefSetArchive* New() const final {
    return CreateMaybeMessage<CellRefSetArchive>(nullptr);
  }

  CellRefSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRefSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRefSetArchive& from);
  void MergeFrom(const CellRefSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRefSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRefSetArchive";
  }
  protected:
  explicit CellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellRefSetArchive_OwnerEntry OwnerEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerEntriesFieldNumber = 1,
  };
  // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
  int owner_entries_size() const;
  private:
  int _internal_owner_entries_size() const;
  public:
  void clear_owner_entries();
  ::TSCE::CellRefSetArchive_OwnerEntry* mutable_owner_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRefSetArchive_OwnerEntry >*
      mutable_owner_entries();
  private:
  const ::TSCE::CellRefSetArchive_OwnerEntry& _internal_owner_entries(int index) const;
  ::TSCE::CellRefSetArchive_OwnerEntry* _internal_add_owner_entries();
  public:
  const ::TSCE::CellRefSetArchive_OwnerEntry& owner_entries(int index) const;
  ::TSCE::CellRefSetArchive_OwnerEntry* add_owner_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRefSetArchive_OwnerEntry >&
      owner_entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellRefSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRefSetArchive_OwnerEntry > owner_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UidCoordSetArchive_ColumnEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UidCoordSetArchive.ColumnEntry) */ {
 public:
  inline UidCoordSetArchive_ColumnEntry() : UidCoordSetArchive_ColumnEntry(nullptr) {}
  ~UidCoordSetArchive_ColumnEntry() override;
  explicit constexpr UidCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UidCoordSetArchive_ColumnEntry(const UidCoordSetArchive_ColumnEntry& from);
  UidCoordSetArchive_ColumnEntry(UidCoordSetArchive_ColumnEntry&& from) noexcept
    : UidCoordSetArchive_ColumnEntry() {
    *this = ::std::move(from);
  }

  inline UidCoordSetArchive_ColumnEntry& operator=(const UidCoordSetArchive_ColumnEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidCoordSetArchive_ColumnEntry& operator=(UidCoordSetArchive_ColumnEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UidCoordSetArchive_ColumnEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UidCoordSetArchive_ColumnEntry* internal_default_instance() {
    return reinterpret_cast<const UidCoordSetArchive_ColumnEntry*>(
               &_UidCoordSetArchive_ColumnEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UidCoordSetArchive_ColumnEntry& a, UidCoordSetArchive_ColumnEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UidCoordSetArchive_ColumnEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidCoordSetArchive_ColumnEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidCoordSetArchive_ColumnEntry* New() const final {
    return CreateMaybeMessage<UidCoordSetArchive_ColumnEntry>(nullptr);
  }

  UidCoordSetArchive_ColumnEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidCoordSetArchive_ColumnEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidCoordSetArchive_ColumnEntry& from);
  void MergeFrom(const UidCoordSetArchive_ColumnEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidCoordSetArchive_ColumnEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UidCoordSetArchive.ColumnEntry";
  }
  protected:
  explicit UidCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowSetFieldNumber = 2,
    kColumnFieldNumber = 1,
  };
  // repeated .TSP.UUID row_set = 2;
  int row_set_size() const;
  private:
  int _internal_row_set_size() const;
  public:
  void clear_row_set();
  ::TSP::UUID* mutable_row_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_set();
  private:
  const ::TSP::UUID& _internal_row_set(int index) const;
  ::TSP::UUID* _internal_add_row_set();
  public:
  const ::TSP::UUID& row_set(int index) const;
  ::TSP::UUID* add_row_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_set() const;

  // required .TSP.UUID column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  const ::TSP::UUID& column() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column();
  ::TSP::UUID* mutable_column();
  void set_allocated_column(::TSP::UUID* column);
  private:
  const ::TSP::UUID& _internal_column() const;
  ::TSP::UUID* _internal_mutable_column();
  public:
  void unsafe_arena_set_allocated_column(
      ::TSP::UUID* column);
  ::TSP::UUID* unsafe_arena_release_column();

  // @@protoc_insertion_point(class_scope:TSCE.UidCoordSetArchive.ColumnEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_set_;
  ::TSP::UUID* column_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UidCoordSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UidCoordSetArchive) */ {
 public:
  inline UidCoordSetArchive() : UidCoordSetArchive(nullptr) {}
  ~UidCoordSetArchive() override;
  explicit constexpr UidCoordSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UidCoordSetArchive(const UidCoordSetArchive& from);
  UidCoordSetArchive(UidCoordSetArchive&& from) noexcept
    : UidCoordSetArchive() {
    *this = ::std::move(from);
  }

  inline UidCoordSetArchive& operator=(const UidCoordSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidCoordSetArchive& operator=(UidCoordSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UidCoordSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UidCoordSetArchive* internal_default_instance() {
    return reinterpret_cast<const UidCoordSetArchive*>(
               &_UidCoordSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UidCoordSetArchive& a, UidCoordSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UidCoordSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidCoordSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidCoordSetArchive* New() const final {
    return CreateMaybeMessage<UidCoordSetArchive>(nullptr);
  }

  UidCoordSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidCoordSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidCoordSetArchive& from);
  void MergeFrom(const UidCoordSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidCoordSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UidCoordSetArchive";
  }
  protected:
  explicit UidCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UidCoordSetArchive_ColumnEntry ColumnEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnEntriesFieldNumber = 1,
  };
  // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
  int column_entries_size() const;
  private:
  int _internal_column_entries_size() const;
  public:
  void clear_column_entries();
  ::TSCE::UidCoordSetArchive_ColumnEntry* mutable_column_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCoordSetArchive_ColumnEntry >*
      mutable_column_entries();
  private:
  const ::TSCE::UidCoordSetArchive_ColumnEntry& _internal_column_entries(int index) const;
  ::TSCE::UidCoordSetArchive_ColumnEntry* _internal_add_column_entries();
  public:
  const ::TSCE::UidCoordSetArchive_ColumnEntry& column_entries(int index) const;
  ::TSCE::UidCoordSetArchive_ColumnEntry* add_column_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCoordSetArchive_ColumnEntry >&
      column_entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.UidCoordSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCoordSetArchive_ColumnEntry > column_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UidCellRefSetArchive_OwnerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UidCellRefSetArchive.OwnerEntry) */ {
 public:
  inline UidCellRefSetArchive_OwnerEntry() : UidCellRefSetArchive_OwnerEntry(nullptr) {}
  ~UidCellRefSetArchive_OwnerEntry() override;
  explicit constexpr UidCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UidCellRefSetArchive_OwnerEntry(const UidCellRefSetArchive_OwnerEntry& from);
  UidCellRefSetArchive_OwnerEntry(UidCellRefSetArchive_OwnerEntry&& from) noexcept
    : UidCellRefSetArchive_OwnerEntry() {
    *this = ::std::move(from);
  }

  inline UidCellRefSetArchive_OwnerEntry& operator=(const UidCellRefSetArchive_OwnerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidCellRefSetArchive_OwnerEntry& operator=(UidCellRefSetArchive_OwnerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UidCellRefSetArchive_OwnerEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UidCellRefSetArchive_OwnerEntry* internal_default_instance() {
    return reinterpret_cast<const UidCellRefSetArchive_OwnerEntry*>(
               &_UidCellRefSetArchive_OwnerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UidCellRefSetArchive_OwnerEntry& a, UidCellRefSetArchive_OwnerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UidCellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidCellRefSetArchive_OwnerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidCellRefSetArchive_OwnerEntry* New() const final {
    return CreateMaybeMessage<UidCellRefSetArchive_OwnerEntry>(nullptr);
  }

  UidCellRefSetArchive_OwnerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidCellRefSetArchive_OwnerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidCellRefSetArchive_OwnerEntry& from);
  void MergeFrom(const UidCellRefSetArchive_OwnerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidCellRefSetArchive_OwnerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UidCellRefSetArchive.OwnerEntry";
  }
  protected:
  explicit UidCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUidFieldNumber = 1,
    kCoordSetFieldNumber = 2,
  };
  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // required .TSCE.UidCoordSetArchive coord_set = 2;
  bool has_coord_set() const;
  private:
  bool _internal_has_coord_set() const;
  public:
  void clear_coord_set();
  const ::TSCE::UidCoordSetArchive& coord_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UidCoordSetArchive* release_coord_set();
  ::TSCE::UidCoordSetArchive* mutable_coord_set();
  void set_allocated_coord_set(::TSCE::UidCoordSetArchive* coord_set);
  private:
  const ::TSCE::UidCoordSetArchive& _internal_coord_set() const;
  ::TSCE::UidCoordSetArchive* _internal_mutable_coord_set();
  public:
  void unsafe_arena_set_allocated_coord_set(
      ::TSCE::UidCoordSetArchive* coord_set);
  ::TSCE::UidCoordSetArchive* unsafe_arena_release_coord_set();

  // @@protoc_insertion_point(class_scope:TSCE.UidCellRefSetArchive.OwnerEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* owner_uid_;
  ::TSCE::UidCoordSetArchive* coord_set_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UidCellRefSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UidCellRefSetArchive) */ {
 public:
  inline UidCellRefSetArchive() : UidCellRefSetArchive(nullptr) {}
  ~UidCellRefSetArchive() override;
  explicit constexpr UidCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UidCellRefSetArchive(const UidCellRefSetArchive& from);
  UidCellRefSetArchive(UidCellRefSetArchive&& from) noexcept
    : UidCellRefSetArchive() {
    *this = ::std::move(from);
  }

  inline UidCellRefSetArchive& operator=(const UidCellRefSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidCellRefSetArchive& operator=(UidCellRefSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UidCellRefSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UidCellRefSetArchive* internal_default_instance() {
    return reinterpret_cast<const UidCellRefSetArchive*>(
               &_UidCellRefSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UidCellRefSetArchive& a, UidCellRefSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UidCellRefSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidCellRefSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidCellRefSetArchive* New() const final {
    return CreateMaybeMessage<UidCellRefSetArchive>(nullptr);
  }

  UidCellRefSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidCellRefSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidCellRefSetArchive& from);
  void MergeFrom(const UidCellRefSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidCellRefSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UidCellRefSetArchive";
  }
  protected:
  explicit UidCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UidCellRefSetArchive_OwnerEntry OwnerEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerEntriesFieldNumber = 1,
  };
  // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
  int owner_entries_size() const;
  private:
  int _internal_owner_entries_size() const;
  public:
  void clear_owner_entries();
  ::TSCE::UidCellRefSetArchive_OwnerEntry* mutable_owner_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCellRefSetArchive_OwnerEntry >*
      mutable_owner_entries();
  private:
  const ::TSCE::UidCellRefSetArchive_OwnerEntry& _internal_owner_entries(int index) const;
  ::TSCE::UidCellRefSetArchive_OwnerEntry* _internal_add_owner_entries();
  public:
  const ::TSCE::UidCellRefSetArchive_OwnerEntry& owner_entries(int index) const;
  ::TSCE::UidCellRefSetArchive_OwnerEntry* add_owner_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCellRefSetArchive_OwnerEntry >&
      owner_entries() const;

  // @@protoc_insertion_point(class_scope:TSCE.UidCellRefSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCellRefSetArchive_OwnerEntry > owner_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferencesToDirtyArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ReferencesToDirtyArchive) */ {
 public:
  inline ReferencesToDirtyArchive() : ReferencesToDirtyArchive(nullptr) {}
  ~ReferencesToDirtyArchive() override;
  explicit constexpr ReferencesToDirtyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferencesToDirtyArchive(const ReferencesToDirtyArchive& from);
  ReferencesToDirtyArchive(ReferencesToDirtyArchive&& from) noexcept
    : ReferencesToDirtyArchive() {
    *this = ::std::move(from);
  }

  inline ReferencesToDirtyArchive& operator=(const ReferencesToDirtyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferencesToDirtyArchive& operator=(ReferencesToDirtyArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferencesToDirtyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferencesToDirtyArchive* internal_default_instance() {
    return reinterpret_cast<const ReferencesToDirtyArchive*>(
               &_ReferencesToDirtyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReferencesToDirtyArchive& a, ReferencesToDirtyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferencesToDirtyArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferencesToDirtyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferencesToDirtyArchive* New() const final {
    return CreateMaybeMessage<ReferencesToDirtyArchive>(nullptr);
  }

  ReferencesToDirtyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferencesToDirtyArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferencesToDirtyArchive& from);
  void MergeFrom(const ReferencesToDirtyArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferencesToDirtyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ReferencesToDirtyArchive";
  }
  protected:
  explicit ReferencesToDirtyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToDirtyRangeRefsFieldNumber = 4,
    kToDirtyOwnerIdsFieldNumber = 1,
    kToDirtyCellsFieldNumber = 2,
    kToDirtyCellsAdditionalFieldNumber = 3,
    kCalcInProgressCellsFieldNumber = 6,
  };
  // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
  int to_dirty_range_refs_size() const;
  private:
  int _internal_to_dirty_range_refs_size() const;
  public:
  void clear_to_dirty_range_refs();
  ::TSCE::InternalRangeReferenceArchive* mutable_to_dirty_range_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalRangeReferenceArchive >*
      mutable_to_dirty_range_refs();
  private:
  const ::TSCE::InternalRangeReferenceArchive& _internal_to_dirty_range_refs(int index) const;
  ::TSCE::InternalRangeReferenceArchive* _internal_add_to_dirty_range_refs();
  public:
  const ::TSCE::InternalRangeReferenceArchive& to_dirty_range_refs(int index) const;
  ::TSCE::InternalRangeReferenceArchive* add_to_dirty_range_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalRangeReferenceArchive >&
      to_dirty_range_refs() const;

  // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
  bool has_to_dirty_owner_ids() const;
  private:
  bool _internal_has_to_dirty_owner_ids() const;
  public:
  void clear_to_dirty_owner_ids();
  const ::TSCE::IndexSetArchive& to_dirty_owner_ids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexSetArchive* release_to_dirty_owner_ids();
  ::TSCE::IndexSetArchive* mutable_to_dirty_owner_ids();
  void set_allocated_to_dirty_owner_ids(::TSCE::IndexSetArchive* to_dirty_owner_ids);
  private:
  const ::TSCE::IndexSetArchive& _internal_to_dirty_owner_ids() const;
  ::TSCE::IndexSetArchive* _internal_mutable_to_dirty_owner_ids();
  public:
  void unsafe_arena_set_allocated_to_dirty_owner_ids(
      ::TSCE::IndexSetArchive* to_dirty_owner_ids);
  ::TSCE::IndexSetArchive* unsafe_arena_release_to_dirty_owner_ids();

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
  bool has_to_dirty_cells() const;
  private:
  bool _internal_has_to_dirty_cells() const;
  public:
  void clear_to_dirty_cells();
  const ::TSCE::InternalCellRefSetArchive& to_dirty_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_to_dirty_cells();
  ::TSCE::InternalCellRefSetArchive* mutable_to_dirty_cells();
  void set_allocated_to_dirty_cells(::TSCE::InternalCellRefSetArchive* to_dirty_cells);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_to_dirty_cells() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_to_dirty_cells();
  public:
  void unsafe_arena_set_allocated_to_dirty_cells(
      ::TSCE::InternalCellRefSetArchive* to_dirty_cells);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_to_dirty_cells();

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
  bool has_to_dirty_cells_additional() const;
  private:
  bool _internal_has_to_dirty_cells_additional() const;
  public:
  void clear_to_dirty_cells_additional();
  const ::TSCE::InternalCellRefSetArchive& to_dirty_cells_additional() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_to_dirty_cells_additional();
  ::TSCE::InternalCellRefSetArchive* mutable_to_dirty_cells_additional();
  void set_allocated_to_dirty_cells_additional(::TSCE::InternalCellRefSetArchive* to_dirty_cells_additional);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_to_dirty_cells_additional() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_to_dirty_cells_additional();
  public:
  void unsafe_arena_set_allocated_to_dirty_cells_additional(
      ::TSCE::InternalCellRefSetArchive* to_dirty_cells_additional);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_to_dirty_cells_additional();

  // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
  bool has_calc_in_progress_cells() const;
  private:
  bool _internal_has_calc_in_progress_cells() const;
  public:
  void clear_calc_in_progress_cells();
  const ::TSCE::InternalCellRefSetArchive& calc_in_progress_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_calc_in_progress_cells();
  ::TSCE::InternalCellRefSetArchive* mutable_calc_in_progress_cells();
  void set_allocated_calc_in_progress_cells(::TSCE::InternalCellRefSetArchive* calc_in_progress_cells);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_calc_in_progress_cells() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_calc_in_progress_cells();
  public:
  void unsafe_arena_set_allocated_calc_in_progress_cells(
      ::TSCE::InternalCellRefSetArchive* calc_in_progress_cells);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_calc_in_progress_cells();

  // @@protoc_insertion_point(class_scope:TSCE.ReferencesToDirtyArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalRangeReferenceArchive > to_dirty_range_refs_;
  ::TSCE::IndexSetArchive* to_dirty_owner_ids_;
  ::TSCE::InternalCellRefSetArchive* to_dirty_cells_;
  ::TSCE::InternalCellRefSetArchive* to_dirty_cells_additional_;
  ::TSCE::InternalCellRefSetArchive* calc_in_progress_cells_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CoordMapperArchive_BaseToViewEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CoordMapperArchive.BaseToViewEntry) */ {
 public:
  inline CoordMapperArchive_BaseToViewEntry() : CoordMapperArchive_BaseToViewEntry(nullptr) {}
  ~CoordMapperArchive_BaseToViewEntry() override;
  explicit constexpr CoordMapperArchive_BaseToViewEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordMapperArchive_BaseToViewEntry(const CoordMapperArchive_BaseToViewEntry& from);
  CoordMapperArchive_BaseToViewEntry(CoordMapperArchive_BaseToViewEntry&& from) noexcept
    : CoordMapperArchive_BaseToViewEntry() {
    *this = ::std::move(from);
  }

  inline CoordMapperArchive_BaseToViewEntry& operator=(const CoordMapperArchive_BaseToViewEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordMapperArchive_BaseToViewEntry& operator=(CoordMapperArchive_BaseToViewEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordMapperArchive_BaseToViewEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordMapperArchive_BaseToViewEntry* internal_default_instance() {
    return reinterpret_cast<const CoordMapperArchive_BaseToViewEntry*>(
               &_CoordMapperArchive_BaseToViewEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CoordMapperArchive_BaseToViewEntry& a, CoordMapperArchive_BaseToViewEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordMapperArchive_BaseToViewEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordMapperArchive_BaseToViewEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordMapperArchive_BaseToViewEntry* New() const final {
    return CreateMaybeMessage<CoordMapperArchive_BaseToViewEntry>(nullptr);
  }

  CoordMapperArchive_BaseToViewEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordMapperArchive_BaseToViewEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordMapperArchive_BaseToViewEntry& from);
  void MergeFrom(const CoordMapperArchive_BaseToViewEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordMapperArchive_BaseToViewEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CoordMapperArchive.BaseToViewEntry";
  }
  protected:
  explicit CoordMapperArchive_BaseToViewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseRowFieldNumber = 1,
    kViewRowFieldNumber = 2,
  };
  // required uint32 base_row = 1;
  bool has_base_row() const;
  private:
  bool _internal_has_base_row() const;
  public:
  void clear_base_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_row() const;
  void set_base_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_row() const;
  void _internal_set_base_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 view_row = 2;
  bool has_view_row() const;
  private:
  bool _internal_has_view_row() const;
  public:
  void clear_view_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 view_row() const;
  void set_view_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_view_row() const;
  void _internal_set_view_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CoordMapperArchive.BaseToViewEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 view_row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CoordMapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CoordMapperArchive) */ {
 public:
  inline CoordMapperArchive() : CoordMapperArchive(nullptr) {}
  ~CoordMapperArchive() override;
  explicit constexpr CoordMapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordMapperArchive(const CoordMapperArchive& from);
  CoordMapperArchive(CoordMapperArchive&& from) noexcept
    : CoordMapperArchive() {
    *this = ::std::move(from);
  }

  inline CoordMapperArchive& operator=(const CoordMapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordMapperArchive& operator=(CoordMapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordMapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordMapperArchive* internal_default_instance() {
    return reinterpret_cast<const CoordMapperArchive*>(
               &_CoordMapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CoordMapperArchive& a, CoordMapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordMapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordMapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordMapperArchive* New() const final {
    return CreateMaybeMessage<CoordMapperArchive>(nullptr);
  }

  CoordMapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordMapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordMapperArchive& from);
  void MergeFrom(const CoordMapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordMapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CoordMapperArchive";
  }
  protected:
  explicit CoordMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CoordMapperArchive_BaseToViewEntry BaseToViewEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kBaseToViewMapFieldNumber = 3,
    kSummaryAndLabelRowsSetFieldNumber = 1,
    kTableUidFieldNumber = 2,
  };
  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_map = 3;
  int base_to_view_map_size() const;
  private:
  int _internal_base_to_view_map_size() const;
  public:
  void clear_base_to_view_map();
  ::TSCE::CoordMapperArchive_BaseToViewEntry* mutable_base_to_view_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CoordMapperArchive_BaseToViewEntry >*
      mutable_base_to_view_map();
  private:
  const ::TSCE::CoordMapperArchive_BaseToViewEntry& _internal_base_to_view_map(int index) const;
  ::TSCE::CoordMapperArchive_BaseToViewEntry* _internal_add_base_to_view_map();
  public:
  const ::TSCE::CoordMapperArchive_BaseToViewEntry& base_to_view_map(int index) const;
  ::TSCE::CoordMapperArchive_BaseToViewEntry* add_base_to_view_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CoordMapperArchive_BaseToViewEntry >&
      base_to_view_map() const;

  // optional .TSCE.IndexSetArchive summary_and_label_rows_set = 1;
  bool has_summary_and_label_rows_set() const;
  private:
  bool _internal_has_summary_and_label_rows_set() const;
  public:
  void clear_summary_and_label_rows_set();
  const ::TSCE::IndexSetArchive& summary_and_label_rows_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexSetArchive* release_summary_and_label_rows_set();
  ::TSCE::IndexSetArchive* mutable_summary_and_label_rows_set();
  void set_allocated_summary_and_label_rows_set(::TSCE::IndexSetArchive* summary_and_label_rows_set);
  private:
  const ::TSCE::IndexSetArchive& _internal_summary_and_label_rows_set() const;
  ::TSCE::IndexSetArchive* _internal_mutable_summary_and_label_rows_set();
  public:
  void unsafe_arena_set_allocated_summary_and_label_rows_set(
      ::TSCE::IndexSetArchive* summary_and_label_rows_set);
  ::TSCE::IndexSetArchive* unsafe_arena_release_summary_and_label_rows_set();

  // required .TSP.UUID table_uid = 2;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // @@protoc_insertion_point(class_scope:TSCE.CoordMapperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CoordMapperArchive_BaseToViewEntry > base_to_view_map_;
  ::TSCE::IndexSetArchive* summary_and_label_rows_set_;
  ::TSP::UUID* table_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ReferenceArchive) */ {
 public:
  inline ReferenceArchive() : ReferenceArchive(nullptr) {}
  ~ReferenceArchive() override;
  explicit constexpr ReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceArchive(const ReferenceArchive& from);
  ReferenceArchive(ReferenceArchive&& from) noexcept
    : ReferenceArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceArchive& operator=(const ReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceArchive& operator=(ReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceArchive*>(
               &_ReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReferenceArchive& a, ReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceArchive* New() const final {
    return CreateMaybeMessage<ReferenceArchive>(nullptr);
  }

  ReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceArchive& from);
  void MergeFrom(const ReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ReferenceArchive";
  }
  protected:
  explicit ReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReferenceArchive_ReferenceType ReferenceType;
  static constexpr ReferenceType CELL_REFERENCE =
    ReferenceArchive_ReferenceType_CELL_REFERENCE;
  static constexpr ReferenceType RANGE_REFERENCE =
    ReferenceArchive_ReferenceType_RANGE_REFERENCE;
  static constexpr ReferenceType NAME_DEPENDENCY =
    ReferenceArchive_ReferenceType_NAME_DEPENDENCY;
  static inline bool ReferenceType_IsValid(int value) {
    return ReferenceArchive_ReferenceType_IsValid(value);
  }
  static constexpr ReferenceType ReferenceType_MIN =
    ReferenceArchive_ReferenceType_ReferenceType_MIN;
  static constexpr ReferenceType ReferenceType_MAX =
    ReferenceArchive_ReferenceType_ReferenceType_MAX;
  static constexpr int ReferenceType_ARRAYSIZE =
    ReferenceArchive_ReferenceType_ReferenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReferenceType_descriptor() {
    return ReferenceArchive_ReferenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReferenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReferenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReferenceType_Name.");
    return ReferenceArchive_ReferenceType_Name(enum_t_value);
  }
  static inline bool ReferenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReferenceType* value) {
    return ReferenceArchive_ReferenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCellReferenceFieldNumber = 2,
    kRangeReferenceFieldNumber = 3,
    kReferenceTypeFieldNumber = 1,
  };
  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  bool has_cell_reference() const;
  private:
  bool _internal_has_cell_reference() const;
  public:
  void clear_cell_reference();
  const ::TSCE::CellReferenceArchive& cell_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellReferenceArchive* release_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_cell_reference();
  void set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_reference() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_reference();
  public:
  void unsafe_arena_set_allocated_cell_reference(
      ::TSCE::CellReferenceArchive* cell_reference);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_reference();

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  bool has_range_reference() const;
  private:
  bool _internal_has_range_reference() const;
  public:
  void clear_range_reference();
  const ::TSCE::RangeReferenceArchive& range_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeReferenceArchive* release_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_range_reference();
  void set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_range_reference();
  public:
  void unsafe_arena_set_allocated_range_reference(
      ::TSCE::RangeReferenceArchive* range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_range_reference();

  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  bool has_reference_type() const;
  private:
  bool _internal_has_reference_type() const;
  public:
  void clear_reference_type();
  ::TSCE::ReferenceArchive_ReferenceType reference_type() const;
  void set_reference_type(::TSCE::ReferenceArchive_ReferenceType value);
  private:
  ::TSCE::ReferenceArchive_ReferenceType _internal_reference_type() const;
  void _internal_set_reference_type(::TSCE::ReferenceArchive_ReferenceType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ReferenceArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellReferenceArchive* cell_reference_;
  ::TSCE::RangeReferenceArchive* range_reference_;
  int reference_type_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class EdgeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.EdgeArchive) */ {
 public:
  inline EdgeArchive() : EdgeArchive(nullptr) {}
  ~EdgeArchive() override;
  explicit constexpr EdgeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeArchive(const EdgeArchive& from);
  EdgeArchive(EdgeArchive&& from) noexcept
    : EdgeArchive() {
    *this = ::std::move(from);
  }

  inline EdgeArchive& operator=(const EdgeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeArchive& operator=(EdgeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeArchive* internal_default_instance() {
    return reinterpret_cast<const EdgeArchive*>(
               &_EdgeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(EdgeArchive& a, EdgeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeArchive* New() const final {
    return CreateMaybeMessage<EdgeArchive>(nullptr);
  }

  EdgeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeArchive& from);
  void MergeFrom(const EdgeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.EdgeArchive";
  }
  protected:
  explicit EdgeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 4,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kIsPrecedentFieldNumber = 3,
  };
  // optional .TSP.CFUUIDArchive owner_id = 4;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSP::CFUUIDArchive& owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_owner_id();
  ::TSP::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSP::CFUUIDArchive* owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_owner_id();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool is_precedent = 3;
  bool has_is_precedent() const;
  private:
  bool _internal_has_is_precedent() const;
  public:
  void clear_is_precedent();
  bool is_precedent() const;
  void set_is_precedent(bool value);
  private:
  bool _internal_is_precedent() const;
  void _internal_set_is_precedent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.EdgeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  bool is_precedent_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class EdgesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.EdgesArchive) */ {
 public:
  inline EdgesArchive() : EdgesArchive(nullptr) {}
  ~EdgesArchive() override;
  explicit constexpr EdgesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgesArchive(const EdgesArchive& from);
  EdgesArchive(EdgesArchive&& from) noexcept
    : EdgesArchive() {
    *this = ::std::move(from);
  }

  inline EdgesArchive& operator=(const EdgesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgesArchive& operator=(EdgesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgesArchive* internal_default_instance() {
    return reinterpret_cast<const EdgesArchive*>(
               &_EdgesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(EdgesArchive& a, EdgesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgesArchive* New() const final {
    return CreateMaybeMessage<EdgesArchive>(nullptr);
  }

  EdgesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgesArchive& from);
  void MergeFrom(const EdgesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.EdgesArchive";
  }
  protected:
  explicit EdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedEdgeWithoutOwnerFieldNumber = 9,
    kPackedEdgeWithOwnerFieldNumber = 10,
    kOwnerIdForEdgeFieldNumber = 11,
    kInternalOwnerIdForEdgeFieldNumber = 12,
  };
  // repeated uint32 packed_edge_without_owner = 9;
  int packed_edge_without_owner_size() const;
  private:
  int _internal_packed_edge_without_owner_size() const;
  public:
  void clear_packed_edge_without_owner();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packed_edge_without_owner(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_packed_edge_without_owner() const;
  void _internal_add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_packed_edge_without_owner();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 packed_edge_without_owner(int index) const;
  void set_packed_edge_without_owner(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      packed_edge_without_owner() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_packed_edge_without_owner();

  // repeated uint32 packed_edge_with_owner = 10;
  int packed_edge_with_owner_size() const;
  private:
  int _internal_packed_edge_with_owner_size() const;
  public:
  void clear_packed_edge_with_owner();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packed_edge_with_owner(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_packed_edge_with_owner() const;
  void _internal_add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_packed_edge_with_owner();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 packed_edge_with_owner(int index) const;
  void set_packed_edge_with_owner(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      packed_edge_with_owner() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_packed_edge_with_owner();

  // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
  int owner_id_for_edge_size() const;
  private:
  int _internal_owner_id_for_edge_size() const;
  public:
  void clear_owner_id_for_edge();
  ::TSP::CFUUIDArchive* mutable_owner_id_for_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::CFUUIDArchive >*
      mutable_owner_id_for_edge();
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id_for_edge(int index) const;
  ::TSP::CFUUIDArchive* _internal_add_owner_id_for_edge();
  public:
  const ::TSP::CFUUIDArchive& owner_id_for_edge(int index) const;
  ::TSP::CFUUIDArchive* add_owner_id_for_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::CFUUIDArchive >&
      owner_id_for_edge() const;

  // repeated uint32 internal_owner_id_for_edge = 12;
  int internal_owner_id_for_edge_size() const;
  private:
  int _internal_internal_owner_id_for_edge_size() const;
  public:
  void clear_internal_owner_id_for_edge();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_owner_id_for_edge(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_internal_owner_id_for_edge() const;
  void _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_internal_owner_id_for_edge();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id_for_edge(int index) const;
  void set_internal_owner_id_for_edge(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      internal_owner_id_for_edge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_internal_owner_id_for_edge();

  // @@protoc_insertion_point(class_scope:TSCE.EdgesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > packed_edge_without_owner_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > packed_edge_with_owner_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::CFUUIDArchive > owner_id_for_edge_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > internal_owner_id_for_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedEdgesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ExpandedEdgesArchive) */ {
 public:
  inline ExpandedEdgesArchive() : ExpandedEdgesArchive(nullptr) {}
  ~ExpandedEdgesArchive() override;
  explicit constexpr ExpandedEdgesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedEdgesArchive(const ExpandedEdgesArchive& from);
  ExpandedEdgesArchive(ExpandedEdgesArchive&& from) noexcept
    : ExpandedEdgesArchive() {
    *this = ::std::move(from);
  }

  inline ExpandedEdgesArchive& operator=(const ExpandedEdgesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedEdgesArchive& operator=(ExpandedEdgesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedEdgesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedEdgesArchive* internal_default_instance() {
    return reinterpret_cast<const ExpandedEdgesArchive*>(
               &_ExpandedEdgesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ExpandedEdgesArchive& a, ExpandedEdgesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedEdgesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedEdgesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedEdgesArchive* New() const final {
    return CreateMaybeMessage<ExpandedEdgesArchive>(nullptr);
  }

  ExpandedEdgesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedEdgesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedEdgesArchive& from);
  void MergeFrom(const ExpandedEdgesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedEdgesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ExpandedEdgesArchive";
  }
  protected:
  explicit ExpandedEdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeWithoutOwnerRowsFieldNumber = 1,
    kEdgeWithoutOwnerColumnsFieldNumber = 2,
    kEdgeWithOwnerRowsFieldNumber = 3,
    kEdgeWithOwnerColumnsFieldNumber = 4,
    kInternalOwnerIdForEdgeFieldNumber = 5,
  };
  // repeated uint32 edge_without_owner_rows = 1;
  int edge_without_owner_rows_size() const;
  private:
  int _internal_edge_without_owner_rows_size() const;
  public:
  void clear_edge_without_owner_rows();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_without_owner_rows(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_without_owner_rows() const;
  void _internal_add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_without_owner_rows();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_without_owner_rows(int index) const;
  void set_edge_without_owner_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_without_owner_rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_without_owner_rows();

  // repeated uint32 edge_without_owner_columns = 2;
  int edge_without_owner_columns_size() const;
  private:
  int _internal_edge_without_owner_columns_size() const;
  public:
  void clear_edge_without_owner_columns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_without_owner_columns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_without_owner_columns() const;
  void _internal_add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_without_owner_columns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_without_owner_columns(int index) const;
  void set_edge_without_owner_columns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_without_owner_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_without_owner_columns();

  // repeated uint32 edge_with_owner_rows = 3;
  int edge_with_owner_rows_size() const;
  private:
  int _internal_edge_with_owner_rows_size() const;
  public:
  void clear_edge_with_owner_rows();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_with_owner_rows(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_with_owner_rows() const;
  void _internal_add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_with_owner_rows();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_with_owner_rows(int index) const;
  void set_edge_with_owner_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_with_owner_rows() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_with_owner_rows();

  // repeated uint32 edge_with_owner_columns = 4;
  int edge_with_owner_columns_size() const;
  private:
  int _internal_edge_with_owner_columns_size() const;
  public:
  void clear_edge_with_owner_columns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_with_owner_columns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_with_owner_columns() const;
  void _internal_add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_with_owner_columns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_with_owner_columns(int index) const;
  void set_edge_with_owner_columns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_with_owner_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_with_owner_columns();

  // repeated uint32 internal_owner_id_for_edge = 5;
  int internal_owner_id_for_edge_size() const;
  private:
  int _internal_internal_owner_id_for_edge_size() const;
  public:
  void clear_internal_owner_id_for_edge();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_owner_id_for_edge(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_internal_owner_id_for_edge() const;
  void _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_internal_owner_id_for_edge();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id_for_edge(int index) const;
  void set_internal_owner_id_for_edge(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      internal_owner_id_for_edge() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_internal_owner_id_for_edge();

  // @@protoc_insertion_point(class_scope:TSCE.ExpandedEdgesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_without_owner_rows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_without_owner_columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_with_owner_rows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_with_owner_columns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > internal_owner_id_for_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRecordArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRecordArchive) */ {
 public:
  inline CellRecordArchive() : CellRecordArchive(nullptr) {}
  ~CellRecordArchive() override;
  explicit constexpr CellRecordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRecordArchive(const CellRecordArchive& from);
  CellRecordArchive(CellRecordArchive&& from) noexcept
    : CellRecordArchive() {
    *this = ::std::move(from);
  }

  inline CellRecordArchive& operator=(const CellRecordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRecordArchive& operator=(CellRecordArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRecordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRecordArchive* internal_default_instance() {
    return reinterpret_cast<const CellRecordArchive*>(
               &_CellRecordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CellRecordArchive& a, CellRecordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRecordArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRecordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRecordArchive* New() const final {
    return CreateMaybeMessage<CellRecordArchive>(nullptr);
  }

  CellRecordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRecordArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRecordArchive& from);
  void MergeFrom(const CellRecordArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRecordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRecordArchive";
  }
  protected:
  explicit CellRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeFieldNumber = 5,
    kEdgesFieldNumber = 9,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kDirtySelfPlusPrecedentsCountFieldNumber = 3,
    kIsInACycleFieldNumber = 4,
    kHasCalculatedPrecedentsFieldNumber = 7,
    kCalculatePrecedentsOnNextRecalcFieldNumber = 8,
    kTranslateForExcelImportOnNextRecalcFieldNumber = 10,
    kContainsAFormulaFieldNumber = 6,
  };
  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_edge();
  PROTOBUF_DEPRECATED ::TSCE::EdgeArchive* mutable_edge(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >*
      mutable_edge();
  private:
  const ::TSCE::EdgeArchive& _internal_edge(int index) const;
  ::TSCE::EdgeArchive* _internal_add_edge();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::EdgeArchive& edge(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::EdgeArchive* add_edge();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >&
      edge() const;

  // optional .TSCE.EdgesArchive edges = 9;
  bool has_edges() const;
  private:
  bool _internal_has_edges() const;
  public:
  void clear_edges();
  const ::TSCE::EdgesArchive& edges() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::EdgesArchive* release_edges();
  ::TSCE::EdgesArchive* mutable_edges();
  void set_allocated_edges(::TSCE::EdgesArchive* edges);
  private:
  const ::TSCE::EdgesArchive& _internal_edges() const;
  ::TSCE::EdgesArchive* _internal_mutable_edges();
  public:
  void unsafe_arena_set_allocated_edges(
      ::TSCE::EdgesArchive* edges);
  ::TSCE::EdgesArchive* unsafe_arena_release_edges();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  bool has_dirty_self_plus_precedents_count() const;
  private:
  bool _internal_has_dirty_self_plus_precedents_count() const;
  public:
  void clear_dirty_self_plus_precedents_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 dirty_self_plus_precedents_count() const;
  void set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dirty_self_plus_precedents_count() const;
  void _internal_set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_in_a_cycle = 4 [default = false];
  bool has_is_in_a_cycle() const;
  private:
  bool _internal_has_is_in_a_cycle() const;
  public:
  void clear_is_in_a_cycle();
  bool is_in_a_cycle() const;
  void set_is_in_a_cycle(bool value);
  private:
  bool _internal_is_in_a_cycle() const;
  void _internal_set_is_in_a_cycle(bool value);
  public:

  // optional bool has_calculated_precedents = 7 [default = false];
  bool has_has_calculated_precedents() const;
  private:
  bool _internal_has_has_calculated_precedents() const;
  public:
  void clear_has_calculated_precedents();
  bool has_calculated_precedents() const;
  void set_has_calculated_precedents(bool value);
  private:
  bool _internal_has_calculated_precedents() const;
  void _internal_set_has_calculated_precedents(bool value);
  public:

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_calculate_precedents_on_next_recalc() const;
  private:
  bool _internal_has_calculate_precedents_on_next_recalc() const;
  public:
  PROTOBUF_DEPRECATED void clear_calculate_precedents_on_next_recalc();
  PROTOBUF_DEPRECATED bool calculate_precedents_on_next_recalc() const;
  PROTOBUF_DEPRECATED void set_calculate_precedents_on_next_recalc(bool value);
  private:
  bool _internal_calculate_precedents_on_next_recalc() const;
  void _internal_set_calculate_precedents_on_next_recalc(bool value);
  public:

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  bool has_translate_for_excel_import_on_next_recalc() const;
  private:
  bool _internal_has_translate_for_excel_import_on_next_recalc() const;
  public:
  void clear_translate_for_excel_import_on_next_recalc();
  bool translate_for_excel_import_on_next_recalc() const;
  void set_translate_for_excel_import_on_next_recalc(bool value);
  private:
  bool _internal_translate_for_excel_import_on_next_recalc() const;
  void _internal_set_translate_for_excel_import_on_next_recalc(bool value);
  public:

  // optional bool contains_a_formula = 6 [default = true];
  bool has_contains_a_formula() const;
  private:
  bool _internal_has_contains_a_formula() const;
  public:
  void clear_contains_a_formula();
  bool contains_a_formula() const;
  void set_contains_a_formula(bool value);
  private:
  bool _internal_contains_a_formula() const;
  void _internal_set_contains_a_formula(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellRecordArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive > edge_;
  ::TSCE::EdgesArchive* edges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dirty_self_plus_precedents_count_;
  bool is_in_a_cycle_;
  bool has_calculated_precedents_;
  bool calculate_precedents_on_next_recalc_;
  bool translate_for_excel_import_on_next_recalc_;
  bool contains_a_formula_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellDependenciesArchive) */ {
 public:
  inline CellDependenciesArchive() : CellDependenciesArchive(nullptr) {}
  ~CellDependenciesArchive() override;
  explicit constexpr CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDependenciesArchive(const CellDependenciesArchive& from);
  CellDependenciesArchive(CellDependenciesArchive&& from) noexcept
    : CellDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline CellDependenciesArchive& operator=(const CellDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDependenciesArchive& operator=(CellDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const CellDependenciesArchive*>(
               &_CellDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CellDependenciesArchive& a, CellDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDependenciesArchive* New() const final {
    return CreateMaybeMessage<CellDependenciesArchive>(nullptr);
  }

  CellDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDependenciesArchive& from);
  void MergeFrom(const CellDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellDependenciesArchive";
  }
  protected:
  explicit CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRecordFieldNumber = 1,
    kNumDirtyCellsFieldNumber = 2,
  };
  // repeated .TSCE.CellRecordArchive cell_record = 1;
  int cell_record_size() const;
  private:
  int _internal_cell_record_size() const;
  public:
  void clear_cell_record();
  ::TSCE::CellRecordArchive* mutable_cell_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >*
      mutable_cell_record();
  private:
  const ::TSCE::CellRecordArchive& _internal_cell_record(int index) const;
  ::TSCE::CellRecordArchive* _internal_add_cell_record();
  public:
  const ::TSCE::CellRecordArchive& cell_record(int index) const;
  ::TSCE::CellRecordArchive* add_cell_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >&
      cell_record() const;

  // optional uint32 num_dirty_cells = 2;
  bool has_num_dirty_cells() const;
  private:
  bool _internal_has_num_dirty_cells() const;
  public:
  void clear_num_dirty_cells();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dirty_cells() const;
  void set_num_dirty_cells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_dirty_cells() const;
  void _internal_set_num_dirty_cells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive > cell_record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dirty_cells_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRecordExpandedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRecordExpandedArchive) */ {
 public:
  inline CellRecordExpandedArchive() : CellRecordExpandedArchive(nullptr) {}
  ~CellRecordExpandedArchive() override;
  explicit constexpr CellRecordExpandedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRecordExpandedArchive(const CellRecordExpandedArchive& from);
  CellRecordExpandedArchive(CellRecordExpandedArchive&& from) noexcept
    : CellRecordExpandedArchive() {
    *this = ::std::move(from);
  }

  inline CellRecordExpandedArchive& operator=(const CellRecordExpandedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRecordExpandedArchive& operator=(CellRecordExpandedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRecordExpandedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRecordExpandedArchive* internal_default_instance() {
    return reinterpret_cast<const CellRecordExpandedArchive*>(
               &_CellRecordExpandedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CellRecordExpandedArchive& a, CellRecordExpandedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRecordExpandedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRecordExpandedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRecordExpandedArchive* New() const final {
    return CreateMaybeMessage<CellRecordExpandedArchive>(nullptr);
  }

  CellRecordExpandedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRecordExpandedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRecordExpandedArchive& from);
  void MergeFrom(const CellRecordExpandedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRecordExpandedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRecordExpandedArchive";
  }
  protected:
  explicit CellRecordExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpandedEdgesFieldNumber = 6,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kDirtySelfPlusPrecedentsCountFieldNumber = 3,
    kIsInACycleFieldNumber = 4,
    kHasCalculatedPrecedentsFieldNumber = 5,
  };
  // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
  bool has_expanded_edges() const;
  private:
  bool _internal_has_expanded_edges() const;
  public:
  void clear_expanded_edges();
  const ::TSCE::ExpandedEdgesArchive& expanded_edges() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ExpandedEdgesArchive* release_expanded_edges();
  ::TSCE::ExpandedEdgesArchive* mutable_expanded_edges();
  void set_allocated_expanded_edges(::TSCE::ExpandedEdgesArchive* expanded_edges);
  private:
  const ::TSCE::ExpandedEdgesArchive& _internal_expanded_edges() const;
  ::TSCE::ExpandedEdgesArchive* _internal_mutable_expanded_edges();
  public:
  void unsafe_arena_set_allocated_expanded_edges(
      ::TSCE::ExpandedEdgesArchive* expanded_edges);
  ::TSCE::ExpandedEdgesArchive* unsafe_arena_release_expanded_edges();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  bool has_dirty_self_plus_precedents_count() const;
  private:
  bool _internal_has_dirty_self_plus_precedents_count() const;
  public:
  void clear_dirty_self_plus_precedents_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 dirty_self_plus_precedents_count() const;
  void set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dirty_self_plus_precedents_count() const;
  void _internal_set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_in_a_cycle = 4 [default = false];
  bool has_is_in_a_cycle() const;
  private:
  bool _internal_has_is_in_a_cycle() const;
  public:
  void clear_is_in_a_cycle();
  bool is_in_a_cycle() const;
  void set_is_in_a_cycle(bool value);
  private:
  bool _internal_is_in_a_cycle() const;
  void _internal_set_is_in_a_cycle(bool value);
  public:

  // optional bool has_calculated_precedents = 5 [default = false];
  bool has_has_calculated_precedents() const;
  private:
  bool _internal_has_has_calculated_precedents() const;
  public:
  void clear_has_calculated_precedents();
  bool has_calculated_precedents() const;
  void set_has_calculated_precedents(bool value);
  private:
  bool _internal_has_calculated_precedents() const;
  void _internal_set_has_calculated_precedents(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellRecordExpandedArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::ExpandedEdgesArchive* expanded_edges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dirty_self_plus_precedents_count_;
  bool is_in_a_cycle_;
  bool has_calculated_precedents_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDependenciesExpandedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellDependenciesExpandedArchive) */ {
 public:
  inline CellDependenciesExpandedArchive() : CellDependenciesExpandedArchive(nullptr) {}
  ~CellDependenciesExpandedArchive() override;
  explicit constexpr CellDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDependenciesExpandedArchive(const CellDependenciesExpandedArchive& from);
  CellDependenciesExpandedArchive(CellDependenciesExpandedArchive&& from) noexcept
    : CellDependenciesExpandedArchive() {
    *this = ::std::move(from);
  }

  inline CellDependenciesExpandedArchive& operator=(const CellDependenciesExpandedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDependenciesExpandedArchive& operator=(CellDependenciesExpandedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDependenciesExpandedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDependenciesExpandedArchive* internal_default_instance() {
    return reinterpret_cast<const CellDependenciesExpandedArchive*>(
               &_CellDependenciesExpandedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CellDependenciesExpandedArchive& a, CellDependenciesExpandedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDependenciesExpandedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDependenciesExpandedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDependenciesExpandedArchive* New() const final {
    return CreateMaybeMessage<CellDependenciesExpandedArchive>(nullptr);
  }

  CellDependenciesExpandedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDependenciesExpandedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDependenciesExpandedArchive& from);
  void MergeFrom(const CellDependenciesExpandedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDependenciesExpandedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellDependenciesExpandedArchive";
  }
  protected:
  explicit CellDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRecordFieldNumber = 1,
  };
  // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
  int cell_record_size() const;
  private:
  int _internal_cell_record_size() const;
  public:
  void clear_cell_record();
  ::TSCE::CellRecordExpandedArchive* mutable_cell_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >*
      mutable_cell_record();
  private:
  const ::TSCE::CellRecordExpandedArchive& _internal_cell_record(int index) const;
  ::TSCE::CellRecordExpandedArchive* _internal_add_cell_record();
  public:
  const ::TSCE::CellRecordExpandedArchive& cell_record(int index) const;
  ::TSCE::CellRecordExpandedArchive* add_cell_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >&
      cell_record() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellDependenciesExpandedArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive > cell_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRecordTileArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellRecordTileArchive) */ {
 public:
  inline CellRecordTileArchive() : CellRecordTileArchive(nullptr) {}
  ~CellRecordTileArchive() override;
  explicit constexpr CellRecordTileArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRecordTileArchive(const CellRecordTileArchive& from);
  CellRecordTileArchive(CellRecordTileArchive&& from) noexcept
    : CellRecordTileArchive() {
    *this = ::std::move(from);
  }

  inline CellRecordTileArchive& operator=(const CellRecordTileArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRecordTileArchive& operator=(CellRecordTileArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRecordTileArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRecordTileArchive* internal_default_instance() {
    return reinterpret_cast<const CellRecordTileArchive*>(
               &_CellRecordTileArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CellRecordTileArchive& a, CellRecordTileArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRecordTileArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRecordTileArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRecordTileArchive* New() const final {
    return CreateMaybeMessage<CellRecordTileArchive>(nullptr);
  }

  CellRecordTileArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRecordTileArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRecordTileArchive& from);
  void MergeFrom(const CellRecordTileArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRecordTileArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellRecordTileArchive";
  }
  protected:
  explicit CellRecordTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRecordsFieldNumber = 4,
    kInternalOwnerIdFieldNumber = 1,
    kTileColumnBeginFieldNumber = 2,
    kTileRowBeginFieldNumber = 3,
  };
  // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
  int cell_records_size() const;
  private:
  int _internal_cell_records_size() const;
  public:
  void clear_cell_records();
  ::TSCE::CellRecordExpandedArchive* mutable_cell_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >*
      mutable_cell_records();
  private:
  const ::TSCE::CellRecordExpandedArchive& _internal_cell_records(int index) const;
  ::TSCE::CellRecordExpandedArchive* _internal_add_cell_records();
  public:
  const ::TSCE::CellRecordExpandedArchive& cell_records(int index) const;
  ::TSCE::CellRecordExpandedArchive* add_cell_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >&
      cell_records() const;

  // required uint32 internal_owner_id = 1;
  bool has_internal_owner_id() const;
  private:
  bool _internal_has_internal_owner_id() const;
  public:
  void clear_internal_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id() const;
  void set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_owner_id() const;
  void _internal_set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tile_column_begin = 2;
  bool has_tile_column_begin() const;
  private:
  bool _internal_has_tile_column_begin() const;
  public:
  void clear_tile_column_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_column_begin() const;
  void set_tile_column_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_column_begin() const;
  void _internal_set_tile_column_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tile_row_begin = 3;
  bool has_tile_row_begin() const;
  private:
  bool _internal_has_tile_row_begin() const;
  public:
  void clear_tile_row_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_row_begin() const;
  void set_tile_row_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_row_begin() const;
  void _internal_set_tile_row_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellRecordTileArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive > cell_records_;
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_column_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_row_begin_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDependenciesTiledArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellDependenciesTiledArchive) */ {
 public:
  inline CellDependenciesTiledArchive() : CellDependenciesTiledArchive(nullptr) {}
  ~CellDependenciesTiledArchive() override;
  explicit constexpr CellDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDependenciesTiledArchive(const CellDependenciesTiledArchive& from);
  CellDependenciesTiledArchive(CellDependenciesTiledArchive&& from) noexcept
    : CellDependenciesTiledArchive() {
    *this = ::std::move(from);
  }

  inline CellDependenciesTiledArchive& operator=(const CellDependenciesTiledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDependenciesTiledArchive& operator=(CellDependenciesTiledArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDependenciesTiledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDependenciesTiledArchive* internal_default_instance() {
    return reinterpret_cast<const CellDependenciesTiledArchive*>(
               &_CellDependenciesTiledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CellDependenciesTiledArchive& a, CellDependenciesTiledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDependenciesTiledArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDependenciesTiledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDependenciesTiledArchive* New() const final {
    return CreateMaybeMessage<CellDependenciesTiledArchive>(nullptr);
  }

  CellDependenciesTiledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDependenciesTiledArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDependenciesTiledArchive& from);
  void MergeFrom(const CellDependenciesTiledArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDependenciesTiledArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellDependenciesTiledArchive";
  }
  protected:
  explicit CellDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRecordTilesFieldNumber = 1,
  };
  // repeated .TSP.Reference cell_record_tiles = 1;
  int cell_record_tiles_size() const;
  private:
  int _internal_cell_record_tiles_size() const;
  public:
  void clear_cell_record_tiles();
  ::TSP::Reference* mutable_cell_record_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_cell_record_tiles();
  private:
  const ::TSP::Reference& _internal_cell_record_tiles(int index) const;
  ::TSP::Reference* _internal_add_cell_record_tiles();
  public:
  const ::TSP::Reference& cell_record_tiles(int index) const;
  ::TSP::Reference* add_cell_record_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      cell_record_tiles() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellDependenciesTiledArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > cell_record_tiles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class VolatileDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.VolatileDependenciesArchive) */ {
 public:
  inline VolatileDependenciesArchive() : VolatileDependenciesArchive(nullptr) {}
  ~VolatileDependenciesArchive() override;
  explicit constexpr VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolatileDependenciesArchive(const VolatileDependenciesArchive& from);
  VolatileDependenciesArchive(VolatileDependenciesArchive&& from) noexcept
    : VolatileDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline VolatileDependenciesArchive& operator=(const VolatileDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolatileDependenciesArchive& operator=(VolatileDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolatileDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolatileDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const VolatileDependenciesArchive*>(
               &_VolatileDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VolatileDependenciesArchive& a, VolatileDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(VolatileDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolatileDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolatileDependenciesArchive* New() const final {
    return CreateMaybeMessage<VolatileDependenciesArchive>(nullptr);
  }

  VolatileDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolatileDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolatileDependenciesArchive& from);
  void MergeFrom(const VolatileDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolatileDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.VolatileDependenciesArchive";
  }
  protected:
  explicit VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolatileTimeCellColumnFieldNumber = 1,
    kVolatileTimeCellRowFieldNumber = 2,
    kVolatileRandomCellColumnFieldNumber = 3,
    kVolatileRandomCellRowFieldNumber = 4,
    kVolatileLocationCellColumnFieldNumber = 5,
    kVolatileLocationCellRowFieldNumber = 6,
    kVolatileCompassCellColumnFieldNumber = 7,
    kVolatileCompassCellRowFieldNumber = 8,
    kCalculatedDependencyCellColumnFieldNumber = 9,
    kCalculatedDependencyCellRowFieldNumber = 10,
    kVolatileGeometryCellFieldNumber = 11,
    kVolatileGeometryCellReferenceFieldNumber = 13,
    kVolatileLocaleCellColumnFieldNumber = 15,
    kVolatileLocaleCellRowFieldNumber = 16,
    kVolatileSheetTableNameCellColumnFieldNumber = 17,
    kVolatileSheetTableNameCellRowFieldNumber = 18,
    kVolatileRemoteDataCellColumnFieldNumber = 19,
    kVolatileRemoteDataCellRowFieldNumber = 20,
  };
  // repeated uint32 volatile_time_cell_column = 1;
  int volatile_time_cell_column_size() const;
  private:
  int _internal_volatile_time_cell_column_size() const;
  public:
  void clear_volatile_time_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_time_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_time_cell_column() const;
  void _internal_add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_time_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_time_cell_column(int index) const;
  void set_volatile_time_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_time_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_time_cell_column();

  // repeated uint32 volatile_time_cell_row = 2;
  int volatile_time_cell_row_size() const;
  private:
  int _internal_volatile_time_cell_row_size() const;
  public:
  void clear_volatile_time_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_time_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_time_cell_row() const;
  void _internal_add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_time_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_time_cell_row(int index) const;
  void set_volatile_time_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_time_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_time_cell_row();

  // repeated uint32 volatile_random_cell_column = 3;
  int volatile_random_cell_column_size() const;
  private:
  int _internal_volatile_random_cell_column_size() const;
  public:
  void clear_volatile_random_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_random_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_random_cell_column() const;
  void _internal_add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_random_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_random_cell_column(int index) const;
  void set_volatile_random_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_random_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_random_cell_column();

  // repeated uint32 volatile_random_cell_row = 4;
  int volatile_random_cell_row_size() const;
  private:
  int _internal_volatile_random_cell_row_size() const;
  public:
  void clear_volatile_random_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_random_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_random_cell_row() const;
  void _internal_add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_random_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_random_cell_row(int index) const;
  void set_volatile_random_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_random_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_random_cell_row();

  // repeated uint32 volatile_location_cell_column = 5;
  int volatile_location_cell_column_size() const;
  private:
  int _internal_volatile_location_cell_column_size() const;
  public:
  void clear_volatile_location_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_location_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_location_cell_column() const;
  void _internal_add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_location_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_location_cell_column(int index) const;
  void set_volatile_location_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_location_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_location_cell_column();

  // repeated uint32 volatile_location_cell_row = 6;
  int volatile_location_cell_row_size() const;
  private:
  int _internal_volatile_location_cell_row_size() const;
  public:
  void clear_volatile_location_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_location_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_location_cell_row() const;
  void _internal_add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_location_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_location_cell_row(int index) const;
  void set_volatile_location_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_location_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_location_cell_row();

  // repeated uint32 volatile_compass_cell_column = 7;
  int volatile_compass_cell_column_size() const;
  private:
  int _internal_volatile_compass_cell_column_size() const;
  public:
  void clear_volatile_compass_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_compass_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_compass_cell_column() const;
  void _internal_add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_compass_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_compass_cell_column(int index) const;
  void set_volatile_compass_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_compass_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_compass_cell_column();

  // repeated uint32 volatile_compass_cell_row = 8;
  int volatile_compass_cell_row_size() const;
  private:
  int _internal_volatile_compass_cell_row_size() const;
  public:
  void clear_volatile_compass_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_compass_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_compass_cell_row() const;
  void _internal_add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_compass_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_compass_cell_row(int index) const;
  void set_volatile_compass_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_compass_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_compass_cell_row();

  // repeated uint32 calculated_dependency_cell_column = 9;
  int calculated_dependency_cell_column_size() const;
  private:
  int _internal_calculated_dependency_cell_column_size() const;
  public:
  void clear_calculated_dependency_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_calculated_dependency_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_calculated_dependency_cell_column() const;
  void _internal_add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_calculated_dependency_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 calculated_dependency_cell_column(int index) const;
  void set_calculated_dependency_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      calculated_dependency_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_calculated_dependency_cell_column();

  // repeated uint32 calculated_dependency_cell_row = 10;
  int calculated_dependency_cell_row_size() const;
  private:
  int _internal_calculated_dependency_cell_row_size() const;
  public:
  void clear_calculated_dependency_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_calculated_dependency_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_calculated_dependency_cell_row() const;
  void _internal_add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_calculated_dependency_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 calculated_dependency_cell_row(int index) const;
  void set_calculated_dependency_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      calculated_dependency_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_calculated_dependency_cell_row();

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  int volatile_geometry_cell_size() const;
  private:
  int _internal_volatile_geometry_cell_size() const;
  public:
  void clear_volatile_geometry_cell();
  ::TSCE::CellCoordinateArchive* mutable_volatile_geometry_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_volatile_geometry_cell();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_volatile_geometry_cell(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_volatile_geometry_cell();
  public:
  const ::TSCE::CellCoordinateArchive& volatile_geometry_cell(int index) const;
  ::TSCE::CellCoordinateArchive* add_volatile_geometry_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      volatile_geometry_cell() const;

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  int volatile_geometry_cell_reference_size() const;
  private:
  int _internal_volatile_geometry_cell_reference_size() const;
  public:
  void clear_volatile_geometry_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_volatile_geometry_cell_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_volatile_geometry_cell_reference();
  private:
  const ::TSCE::CellReferenceArchive& _internal_volatile_geometry_cell_reference(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_volatile_geometry_cell_reference();
  public:
  const ::TSCE::CellReferenceArchive& volatile_geometry_cell_reference(int index) const;
  ::TSCE::CellReferenceArchive* add_volatile_geometry_cell_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      volatile_geometry_cell_reference() const;

  // repeated uint32 volatile_locale_cell_column = 15;
  int volatile_locale_cell_column_size() const;
  private:
  int _internal_volatile_locale_cell_column_size() const;
  public:
  void clear_volatile_locale_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_locale_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_locale_cell_column() const;
  void _internal_add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_locale_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_locale_cell_column(int index) const;
  void set_volatile_locale_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_locale_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_locale_cell_column();

  // repeated uint32 volatile_locale_cell_row = 16;
  int volatile_locale_cell_row_size() const;
  private:
  int _internal_volatile_locale_cell_row_size() const;
  public:
  void clear_volatile_locale_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_locale_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_locale_cell_row() const;
  void _internal_add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_locale_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_locale_cell_row(int index) const;
  void set_volatile_locale_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_locale_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_locale_cell_row();

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  int volatile_sheet_table_name_cell_column_size() const;
  private:
  int _internal_volatile_sheet_table_name_cell_column_size() const;
  public:
  void clear_volatile_sheet_table_name_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_sheet_table_name_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_sheet_table_name_cell_column() const;
  void _internal_add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_sheet_table_name_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_sheet_table_name_cell_column(int index) const;
  void set_volatile_sheet_table_name_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_sheet_table_name_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_sheet_table_name_cell_column();

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  int volatile_sheet_table_name_cell_row_size() const;
  private:
  int _internal_volatile_sheet_table_name_cell_row_size() const;
  public:
  void clear_volatile_sheet_table_name_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_sheet_table_name_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_sheet_table_name_cell_row() const;
  void _internal_add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_sheet_table_name_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_sheet_table_name_cell_row(int index) const;
  void set_volatile_sheet_table_name_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_sheet_table_name_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_sheet_table_name_cell_row();

  // repeated uint32 volatile_remote_data_cell_column = 19;
  int volatile_remote_data_cell_column_size() const;
  private:
  int _internal_volatile_remote_data_cell_column_size() const;
  public:
  void clear_volatile_remote_data_cell_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_remote_data_cell_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_remote_data_cell_column() const;
  void _internal_add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_remote_data_cell_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_remote_data_cell_column(int index) const;
  void set_volatile_remote_data_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_remote_data_cell_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_remote_data_cell_column();

  // repeated uint32 volatile_remote_data_cell_row = 20;
  int volatile_remote_data_cell_row_size() const;
  private:
  int _internal_volatile_remote_data_cell_row_size() const;
  public:
  void clear_volatile_remote_data_cell_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatile_remote_data_cell_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_volatile_remote_data_cell_row() const;
  void _internal_add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_volatile_remote_data_cell_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 volatile_remote_data_cell_row(int index) const;
  void set_volatile_remote_data_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      volatile_remote_data_cell_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_volatile_remote_data_cell_row();

  // @@protoc_insertion_point(class_scope:TSCE.VolatileDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_time_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_time_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_random_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_random_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_location_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_location_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_compass_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_compass_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > calculated_dependency_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > calculated_dependency_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > volatile_geometry_cell_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > volatile_geometry_cell_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_locale_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_locale_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_sheet_table_name_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_sheet_table_name_cell_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_remote_data_cell_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > volatile_remote_data_cell_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class VolatileDependenciesExpandedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.VolatileDependenciesExpandedArchive) */ {
 public:
  inline VolatileDependenciesExpandedArchive() : VolatileDependenciesExpandedArchive(nullptr) {}
  ~VolatileDependenciesExpandedArchive() override;
  explicit constexpr VolatileDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolatileDependenciesExpandedArchive(const VolatileDependenciesExpandedArchive& from);
  VolatileDependenciesExpandedArchive(VolatileDependenciesExpandedArchive&& from) noexcept
    : VolatileDependenciesExpandedArchive() {
    *this = ::std::move(from);
  }

  inline VolatileDependenciesExpandedArchive& operator=(const VolatileDependenciesExpandedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolatileDependenciesExpandedArchive& operator=(VolatileDependenciesExpandedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolatileDependenciesExpandedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolatileDependenciesExpandedArchive* internal_default_instance() {
    return reinterpret_cast<const VolatileDependenciesExpandedArchive*>(
               &_VolatileDependenciesExpandedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(VolatileDependenciesExpandedArchive& a, VolatileDependenciesExpandedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(VolatileDependenciesExpandedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolatileDependenciesExpandedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VolatileDependenciesExpandedArchive* New() const final {
    return CreateMaybeMessage<VolatileDependenciesExpandedArchive>(nullptr);
  }

  VolatileDependenciesExpandedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VolatileDependenciesExpandedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VolatileDependenciesExpandedArchive& from);
  void MergeFrom(const VolatileDependenciesExpandedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolatileDependenciesExpandedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.VolatileDependenciesExpandedArchive";
  }
  protected:
  explicit VolatileDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolatileTimeCellsFieldNumber = 1,
    kVolatileRandomCellsFieldNumber = 2,
    kVolatileLocaleCellsFieldNumber = 3,
    kVolatileSheetTableNameCellsFieldNumber = 4,
    kVolatileRemoteDataCellsFieldNumber = 5,
    kVolatileGeometryCellRefsFieldNumber = 7,
  };
  // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
  bool has_volatile_time_cells() const;
  private:
  bool _internal_has_volatile_time_cells() const;
  public:
  void clear_volatile_time_cells();
  const ::TSCE::CellCoordSetArchive& volatile_time_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_volatile_time_cells();
  ::TSCE::CellCoordSetArchive* mutable_volatile_time_cells();
  void set_allocated_volatile_time_cells(::TSCE::CellCoordSetArchive* volatile_time_cells);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_volatile_time_cells() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_volatile_time_cells();
  public:
  void unsafe_arena_set_allocated_volatile_time_cells(
      ::TSCE::CellCoordSetArchive* volatile_time_cells);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_volatile_time_cells();

  // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
  bool has_volatile_random_cells() const;
  private:
  bool _internal_has_volatile_random_cells() const;
  public:
  void clear_volatile_random_cells();
  const ::TSCE::CellCoordSetArchive& volatile_random_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_volatile_random_cells();
  ::TSCE::CellCoordSetArchive* mutable_volatile_random_cells();
  void set_allocated_volatile_random_cells(::TSCE::CellCoordSetArchive* volatile_random_cells);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_volatile_random_cells() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_volatile_random_cells();
  public:
  void unsafe_arena_set_allocated_volatile_random_cells(
      ::TSCE::CellCoordSetArchive* volatile_random_cells);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_volatile_random_cells();

  // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
  bool has_volatile_locale_cells() const;
  private:
  bool _internal_has_volatile_locale_cells() const;
  public:
  void clear_volatile_locale_cells();
  const ::TSCE::CellCoordSetArchive& volatile_locale_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_volatile_locale_cells();
  ::TSCE::CellCoordSetArchive* mutable_volatile_locale_cells();
  void set_allocated_volatile_locale_cells(::TSCE::CellCoordSetArchive* volatile_locale_cells);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_volatile_locale_cells() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_volatile_locale_cells();
  public:
  void unsafe_arena_set_allocated_volatile_locale_cells(
      ::TSCE::CellCoordSetArchive* volatile_locale_cells);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_volatile_locale_cells();

  // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
  bool has_volatile_sheet_table_name_cells() const;
  private:
  bool _internal_has_volatile_sheet_table_name_cells() const;
  public:
  void clear_volatile_sheet_table_name_cells();
  const ::TSCE::CellCoordSetArchive& volatile_sheet_table_name_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_volatile_sheet_table_name_cells();
  ::TSCE::CellCoordSetArchive* mutable_volatile_sheet_table_name_cells();
  void set_allocated_volatile_sheet_table_name_cells(::TSCE::CellCoordSetArchive* volatile_sheet_table_name_cells);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_volatile_sheet_table_name_cells() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_volatile_sheet_table_name_cells();
  public:
  void unsafe_arena_set_allocated_volatile_sheet_table_name_cells(
      ::TSCE::CellCoordSetArchive* volatile_sheet_table_name_cells);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_volatile_sheet_table_name_cells();

  // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
  bool has_volatile_remote_data_cells() const;
  private:
  bool _internal_has_volatile_remote_data_cells() const;
  public:
  void clear_volatile_remote_data_cells();
  const ::TSCE::CellCoordSetArchive& volatile_remote_data_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_volatile_remote_data_cells();
  ::TSCE::CellCoordSetArchive* mutable_volatile_remote_data_cells();
  void set_allocated_volatile_remote_data_cells(::TSCE::CellCoordSetArchive* volatile_remote_data_cells);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_volatile_remote_data_cells() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_volatile_remote_data_cells();
  public:
  void unsafe_arena_set_allocated_volatile_remote_data_cells(
      ::TSCE::CellCoordSetArchive* volatile_remote_data_cells);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_volatile_remote_data_cells();

  // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
  bool has_volatile_geometry_cell_refs() const;
  private:
  bool _internal_has_volatile_geometry_cell_refs() const;
  public:
  void clear_volatile_geometry_cell_refs();
  const ::TSCE::InternalCellRefSetArchive& volatile_geometry_cell_refs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_volatile_geometry_cell_refs();
  ::TSCE::InternalCellRefSetArchive* mutable_volatile_geometry_cell_refs();
  void set_allocated_volatile_geometry_cell_refs(::TSCE::InternalCellRefSetArchive* volatile_geometry_cell_refs);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_volatile_geometry_cell_refs() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_volatile_geometry_cell_refs();
  public:
  void unsafe_arena_set_allocated_volatile_geometry_cell_refs(
      ::TSCE::InternalCellRefSetArchive* volatile_geometry_cell_refs);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_volatile_geometry_cell_refs();

  // @@protoc_insertion_point(class_scope:TSCE.VolatileDependenciesExpandedArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordSetArchive* volatile_time_cells_;
  ::TSCE::CellCoordSetArchive* volatile_random_cells_;
  ::TSCE::CellCoordSetArchive* volatile_locale_cells_;
  ::TSCE::CellCoordSetArchive* volatile_sheet_table_name_cells_;
  ::TSCE::CellCoordSetArchive* volatile_remote_data_cells_;
  ::TSCE::InternalCellRefSetArchive* volatile_geometry_cell_refs_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeInternalNodeContentsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeInternalNodeContentsArchive) */ {
 public:
  inline RTreeInternalNodeContentsArchive() : RTreeInternalNodeContentsArchive(nullptr) {}
  ~RTreeInternalNodeContentsArchive() override;
  explicit constexpr RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from);
  RTreeInternalNodeContentsArchive(RTreeInternalNodeContentsArchive&& from) noexcept
    : RTreeInternalNodeContentsArchive() {
    *this = ::std::move(from);
  }

  inline RTreeInternalNodeContentsArchive& operator=(const RTreeInternalNodeContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeInternalNodeContentsArchive& operator=(RTreeInternalNodeContentsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeInternalNodeContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeInternalNodeContentsArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeInternalNodeContentsArchive*>(
               &_RTreeInternalNodeContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RTreeInternalNodeContentsArchive& a, RTreeInternalNodeContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeInternalNodeContentsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeInternalNodeContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTreeInternalNodeContentsArchive* New() const final {
    return CreateMaybeMessage<RTreeInternalNodeContentsArchive>(nullptr);
  }

  RTreeInternalNodeContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTreeInternalNodeContentsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTreeInternalNodeContentsArchive& from);
  void MergeFrom(const RTreeInternalNodeContentsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeInternalNodeContentsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeInternalNodeContentsArchive";
  }
  protected:
  explicit RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kChildFieldNumber = 3,
  };
  // repeated uint32 min = 1;
  int min_size() const;
  private:
  int _internal_min_size() const;
  public:
  void clear_min();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_min() const;
  void _internal_add_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_min();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 min(int index) const;
  void set_min(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      min() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_min();

  // repeated uint32 max = 2;
  int max_size() const;
  private:
  int _internal_max_size() const;
  public:
  void clear_max();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_max() const;
  void _internal_add_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_max();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 max(int index) const;
  void set_max(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_max();

  // required .TSCE.RTreeNodeArchive child = 3;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::TSCE::RTreeNodeArchive& child() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RTreeNodeArchive* release_child();
  ::TSCE::RTreeNodeArchive* mutable_child();
  void set_allocated_child(::TSCE::RTreeNodeArchive* child);
  private:
  const ::TSCE::RTreeNodeArchive& _internal_child() const;
  ::TSCE::RTreeNodeArchive* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::TSCE::RTreeNodeArchive* child);
  ::TSCE::RTreeNodeArchive* unsafe_arena_release_child();

  // @@protoc_insertion_point(class_scope:TSCE.RTreeInternalNodeContentsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > min_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > max_;
  ::TSCE::RTreeNodeArchive* child_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeLeafNodeContentsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeLeafNodeContentsArchive) */ {
 public:
  inline RTreeLeafNodeContentsArchive() : RTreeLeafNodeContentsArchive(nullptr) {}
  ~RTreeLeafNodeContentsArchive() override;
  explicit constexpr RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from);
  RTreeLeafNodeContentsArchive(RTreeLeafNodeContentsArchive&& from) noexcept
    : RTreeLeafNodeContentsArchive() {
    *this = ::std::move(from);
  }

  inline RTreeLeafNodeContentsArchive& operator=(const RTreeLeafNodeContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeLeafNodeContentsArchive& operator=(RTreeLeafNodeContentsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeLeafNodeContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeLeafNodeContentsArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeLeafNodeContentsArchive*>(
               &_RTreeLeafNodeContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RTreeLeafNodeContentsArchive& a, RTreeLeafNodeContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeLeafNodeContentsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeLeafNodeContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTreeLeafNodeContentsArchive* New() const final {
    return CreateMaybeMessage<RTreeLeafNodeContentsArchive>(nullptr);
  }

  RTreeLeafNodeContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTreeLeafNodeContentsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTreeLeafNodeContentsArchive& from);
  void MergeFrom(const RTreeLeafNodeContentsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeLeafNodeContentsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeLeafNodeContentsArchive";
  }
  protected:
  explicit RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kCellReferenceFieldNumber = 3,
  };
  // repeated uint32 min = 1;
  int min_size() const;
  private:
  int _internal_min_size() const;
  public:
  void clear_min();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_min() const;
  void _internal_add_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_min();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 min(int index) const;
  void set_min(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      min() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_min();

  // repeated uint32 max = 2;
  int max_size() const;
  private:
  int _internal_max_size() const;
  public:
  void clear_max();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_max() const;
  void _internal_add_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_max();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 max(int index) const;
  void set_max(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_max();

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  bool has_cell_reference() const;
  private:
  bool _internal_has_cell_reference() const;
  public:
  void clear_cell_reference();
  const ::TSCE::CellReferenceArchive& cell_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellReferenceArchive* release_cell_reference();
  ::TSCE::CellReferenceArchive* mutable_cell_reference();
  void set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_reference() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_reference();
  public:
  void unsafe_arena_set_allocated_cell_reference(
      ::TSCE::CellReferenceArchive* cell_reference);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_reference();

  // @@protoc_insertion_point(class_scope:TSCE.RTreeLeafNodeContentsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > min_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > max_;
  ::TSCE::CellReferenceArchive* cell_reference_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeNodeArchive) */ {
 public:
  inline RTreeNodeArchive() : RTreeNodeArchive(nullptr) {}
  ~RTreeNodeArchive() override;
  explicit constexpr RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeNodeArchive(const RTreeNodeArchive& from);
  RTreeNodeArchive(RTreeNodeArchive&& from) noexcept
    : RTreeNodeArchive() {
    *this = ::std::move(from);
  }

  inline RTreeNodeArchive& operator=(const RTreeNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeNodeArchive& operator=(RTreeNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeNodeArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeNodeArchive*>(
               &_RTreeNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RTreeNodeArchive& a, RTreeNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTreeNodeArchive* New() const final {
    return CreateMaybeMessage<RTreeNodeArchive>(nullptr);
  }

  RTreeNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTreeNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTreeNodeArchive& from);
  void MergeFrom(const RTreeNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeNodeArchive";
  }
  protected:
  explicit RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalNodeContentsFieldNumber = 3,
    kLeafNodeContentsFieldNumber = 4,
    kLevelFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  int internal_node_contents_size() const;
  private:
  int _internal_internal_node_contents_size() const;
  public:
  void clear_internal_node_contents();
  ::TSCE::RTreeInternalNodeContentsArchive* mutable_internal_node_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >*
      mutable_internal_node_contents();
  private:
  const ::TSCE::RTreeInternalNodeContentsArchive& _internal_internal_node_contents(int index) const;
  ::TSCE::RTreeInternalNodeContentsArchive* _internal_add_internal_node_contents();
  public:
  const ::TSCE::RTreeInternalNodeContentsArchive& internal_node_contents(int index) const;
  ::TSCE::RTreeInternalNodeContentsArchive* add_internal_node_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >&
      internal_node_contents() const;

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  int leaf_node_contents_size() const;
  private:
  int _internal_leaf_node_contents_size() const;
  public:
  void clear_leaf_node_contents();
  ::TSCE::RTreeLeafNodeContentsArchive* mutable_leaf_node_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >*
      mutable_leaf_node_contents();
  private:
  const ::TSCE::RTreeLeafNodeContentsArchive& _internal_leaf_node_contents(int index) const;
  ::TSCE::RTreeLeafNodeContentsArchive* _internal_add_leaf_node_contents();
  public:
  const ::TSCE::RTreeLeafNodeContentsArchive& leaf_node_contents(int index) const;
  ::TSCE::RTreeLeafNodeContentsArchive* add_leaf_node_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >&
      leaf_node_contents() const;

  // required uint32 level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RTreeNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive > internal_node_contents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive > leaf_node_contents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RTreeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RTreeArchive) */ {
 public:
  inline RTreeArchive() : RTreeArchive(nullptr) {}
  ~RTreeArchive() override;
  explicit constexpr RTreeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RTreeArchive(const RTreeArchive& from);
  RTreeArchive(RTreeArchive&& from) noexcept
    : RTreeArchive() {
    *this = ::std::move(from);
  }

  inline RTreeArchive& operator=(const RTreeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTreeArchive& operator=(RTreeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTreeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RTreeArchive* internal_default_instance() {
    return reinterpret_cast<const RTreeArchive*>(
               &_RTreeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RTreeArchive& a, RTreeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RTreeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTreeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTreeArchive* New() const final {
    return CreateMaybeMessage<RTreeArchive>(nullptr);
  }

  RTreeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTreeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTreeArchive& from);
  void MergeFrom(const RTreeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTreeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RTreeArchive";
  }
  protected:
  explicit RTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 8,
    kDataFileIdFieldNumber = 1,
    kDataSizeFieldNumber = 2,
    kDataNumDimsFieldNumber = 3,
    kDataElemSizeFieldNumber = 4,
    kDataElemRealSizeFieldNumber = 5,
    kDataMaxNodesFieldNumber = 6,
    kDataMinNodesFieldNumber = 7,
  };
  // required .TSCE.RTreeNodeArchive root = 8;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::TSCE::RTreeNodeArchive& root() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RTreeNodeArchive* release_root();
  ::TSCE::RTreeNodeArchive* mutable_root();
  void set_allocated_root(::TSCE::RTreeNodeArchive* root);
  private:
  const ::TSCE::RTreeNodeArchive& _internal_root() const;
  ::TSCE::RTreeNodeArchive* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::TSCE::RTreeNodeArchive* root);
  ::TSCE::RTreeNodeArchive* unsafe_arena_release_root();

  // required uint32 data_file_id = 1;
  bool has_data_file_id() const;
  private:
  bool _internal_has_data_file_id() const;
  public:
  void clear_data_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_file_id() const;
  void set_data_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_file_id() const;
  void _internal_set_data_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_size = 2;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_num_dims = 3;
  bool has_data_num_dims() const;
  private:
  bool _internal_has_data_num_dims() const;
  public:
  void clear_data_num_dims();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_num_dims() const;
  void set_data_num_dims(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_num_dims() const;
  void _internal_set_data_num_dims(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_elem_size = 4;
  bool has_data_elem_size() const;
  private:
  bool _internal_has_data_elem_size() const;
  public:
  void clear_data_elem_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_elem_size() const;
  void set_data_elem_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_elem_size() const;
  void _internal_set_data_elem_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_elem_real_size = 5;
  bool has_data_elem_real_size() const;
  private:
  bool _internal_has_data_elem_real_size() const;
  public:
  void clear_data_elem_real_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_elem_real_size() const;
  void set_data_elem_real_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_elem_real_size() const;
  void _internal_set_data_elem_real_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_max_nodes = 6;
  bool has_data_max_nodes() const;
  private:
  bool _internal_has_data_max_nodes() const;
  public:
  void clear_data_max_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_max_nodes() const;
  void set_data_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_max_nodes() const;
  void _internal_set_data_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 data_min_nodes = 7;
  bool has_data_min_nodes() const;
  private:
  bool _internal_has_data_min_nodes() const;
  public:
  void clear_data_min_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_min_nodes() const;
  void set_data_min_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_min_nodes() const;
  void _internal_set_data_min_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RTreeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RTreeNodeArchive* root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_num_dims_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_elem_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_elem_real_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_max_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_min_nodes_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeBackDependencyArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeBackDependencyArchive) */ {
 public:
  inline RangeBackDependencyArchive() : RangeBackDependencyArchive(nullptr) {}
  ~RangeBackDependencyArchive() override;
  explicit constexpr RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeBackDependencyArchive(const RangeBackDependencyArchive& from);
  RangeBackDependencyArchive(RangeBackDependencyArchive&& from) noexcept
    : RangeBackDependencyArchive() {
    *this = ::std::move(from);
  }

  inline RangeBackDependencyArchive& operator=(const RangeBackDependencyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeBackDependencyArchive& operator=(RangeBackDependencyArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeBackDependencyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeBackDependencyArchive* internal_default_instance() {
    return reinterpret_cast<const RangeBackDependencyArchive*>(
               &_RangeBackDependencyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RangeBackDependencyArchive& a, RangeBackDependencyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeBackDependencyArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeBackDependencyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeBackDependencyArchive* New() const final {
    return CreateMaybeMessage<RangeBackDependencyArchive>(nullptr);
  }

  RangeBackDependencyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeBackDependencyArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeBackDependencyArchive& from);
  void MergeFrom(const RangeBackDependencyArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeBackDependencyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeBackDependencyArchive";
  }
  protected:
  explicit RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeReferenceFieldNumber = 3,
    kInternalRangeReferenceFieldNumber = 4,
    kCellCoordRowFieldNumber = 1,
    kCellCoordColumnFieldNumber = 2,
  };
  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  bool has_range_reference() const;
  private:
  bool _internal_has_range_reference() const;
  public:
  void clear_range_reference();
  const ::TSCE::RangeReferenceArchive& range_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeReferenceArchive* release_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_range_reference();
  void set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_range_reference();
  public:
  void unsafe_arena_set_allocated_range_reference(
      ::TSCE::RangeReferenceArchive* range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_range_reference();

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  bool has_internal_range_reference() const;
  private:
  bool _internal_has_internal_range_reference() const;
  public:
  void clear_internal_range_reference();
  const ::TSCE::InternalRangeReferenceArchive& internal_range_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalRangeReferenceArchive* release_internal_range_reference();
  ::TSCE::InternalRangeReferenceArchive* mutable_internal_range_reference();
  void set_allocated_internal_range_reference(::TSCE::InternalRangeReferenceArchive* internal_range_reference);
  private:
  const ::TSCE::InternalRangeReferenceArchive& _internal_internal_range_reference() const;
  ::TSCE::InternalRangeReferenceArchive* _internal_mutable_internal_range_reference();
  public:
  void unsafe_arena_set_allocated_internal_range_reference(
      ::TSCE::InternalRangeReferenceArchive* internal_range_reference);
  ::TSCE::InternalRangeReferenceArchive* unsafe_arena_release_internal_range_reference();

  // required uint32 cell_coord_row = 1;
  bool has_cell_coord_row() const;
  private:
  bool _internal_has_cell_coord_row() const;
  public:
  void clear_cell_coord_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_coord_row() const;
  void set_cell_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_coord_row() const;
  void _internal_set_cell_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cell_coord_column = 2;
  bool has_cell_coord_column() const;
  private:
  bool _internal_has_cell_coord_column() const;
  public:
  void clear_cell_coord_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_coord_column() const;
  void set_cell_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_coord_column() const;
  void _internal_set_cell_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeBackDependencyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RangeReferenceArchive* range_reference_;
  ::TSCE::InternalRangeReferenceArchive* internal_range_reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_coord_row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_coord_column_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeDependenciesArchive) */ {
 public:
  inline RangeDependenciesArchive() : RangeDependenciesArchive(nullptr) {}
  ~RangeDependenciesArchive() override;
  explicit constexpr RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeDependenciesArchive(const RangeDependenciesArchive& from);
  RangeDependenciesArchive(RangeDependenciesArchive&& from) noexcept
    : RangeDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline RangeDependenciesArchive& operator=(const RangeDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeDependenciesArchive& operator=(RangeDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const RangeDependenciesArchive*>(
               &_RangeDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RangeDependenciesArchive& a, RangeDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeDependenciesArchive* New() const final {
    return CreateMaybeMessage<RangeDependenciesArchive>(nullptr);
  }

  RangeDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeDependenciesArchive& from);
  void MergeFrom(const RangeDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeDependenciesArchive";
  }
  protected:
  explicit RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackDependencyFieldNumber = 2,
  };
  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  int back_dependency_size() const;
  private:
  int _internal_back_dependency_size() const;
  public:
  void clear_back_dependency();
  ::TSCE::RangeBackDependencyArchive* mutable_back_dependency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >*
      mutable_back_dependency();
  private:
  const ::TSCE::RangeBackDependencyArchive& _internal_back_dependency(int index) const;
  ::TSCE::RangeBackDependencyArchive* _internal_add_back_dependency();
  public:
  const ::TSCE::RangeBackDependencyArchive& back_dependency(int index) const;
  ::TSCE::RangeBackDependencyArchive* add_back_dependency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >&
      back_dependency() const;

  // @@protoc_insertion_point(class_scope:TSCE.RangeDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive > back_dependency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangePrecedentsTileArchive_FromToRangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangePrecedentsTileArchive.FromToRangeArchive) */ {
 public:
  inline RangePrecedentsTileArchive_FromToRangeArchive() : RangePrecedentsTileArchive_FromToRangeArchive(nullptr) {}
  ~RangePrecedentsTileArchive_FromToRangeArchive() override;
  explicit constexpr RangePrecedentsTileArchive_FromToRangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangePrecedentsTileArchive_FromToRangeArchive(const RangePrecedentsTileArchive_FromToRangeArchive& from);
  RangePrecedentsTileArchive_FromToRangeArchive(RangePrecedentsTileArchive_FromToRangeArchive&& from) noexcept
    : RangePrecedentsTileArchive_FromToRangeArchive() {
    *this = ::std::move(from);
  }

  inline RangePrecedentsTileArchive_FromToRangeArchive& operator=(const RangePrecedentsTileArchive_FromToRangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangePrecedentsTileArchive_FromToRangeArchive& operator=(RangePrecedentsTileArchive_FromToRangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangePrecedentsTileArchive_FromToRangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangePrecedentsTileArchive_FromToRangeArchive* internal_default_instance() {
    return reinterpret_cast<const RangePrecedentsTileArchive_FromToRangeArchive*>(
               &_RangePrecedentsTileArchive_FromToRangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RangePrecedentsTileArchive_FromToRangeArchive& a, RangePrecedentsTileArchive_FromToRangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangePrecedentsTileArchive_FromToRangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangePrecedentsTileArchive_FromToRangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangePrecedentsTileArchive_FromToRangeArchive* New() const final {
    return CreateMaybeMessage<RangePrecedentsTileArchive_FromToRangeArchive>(nullptr);
  }

  RangePrecedentsTileArchive_FromToRangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangePrecedentsTileArchive_FromToRangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangePrecedentsTileArchive_FromToRangeArchive& from);
  void MergeFrom(const RangePrecedentsTileArchive_FromToRangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangePrecedentsTileArchive_FromToRangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangePrecedentsTileArchive.FromToRangeArchive";
  }
  protected:
  explicit RangePrecedentsTileArchive_FromToRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromCoordFieldNumber = 1,
    kRefersToRectFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive from_coord = 1;
  bool has_from_coord() const;
  private:
  bool _internal_has_from_coord() const;
  public:
  void clear_from_coord();
  const ::TSCE::CellCoordinateArchive& from_coord() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_from_coord();
  ::TSCE::CellCoordinateArchive* mutable_from_coord();
  void set_allocated_from_coord(::TSCE::CellCoordinateArchive* from_coord);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_from_coord() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_from_coord();
  public:
  void unsafe_arena_set_allocated_from_coord(
      ::TSCE::CellCoordinateArchive* from_coord);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_from_coord();

  // required .TSCE.CellRectArchive refers_to_rect = 2;
  bool has_refers_to_rect() const;
  private:
  bool _internal_has_refers_to_rect() const;
  public:
  void clear_refers_to_rect();
  const ::TSCE::CellRectArchive& refers_to_rect() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellRectArchive* release_refers_to_rect();
  ::TSCE::CellRectArchive* mutable_refers_to_rect();
  void set_allocated_refers_to_rect(::TSCE::CellRectArchive* refers_to_rect);
  private:
  const ::TSCE::CellRectArchive& _internal_refers_to_rect() const;
  ::TSCE::CellRectArchive* _internal_mutable_refers_to_rect();
  public:
  void unsafe_arena_set_allocated_refers_to_rect(
      ::TSCE::CellRectArchive* refers_to_rect);
  ::TSCE::CellRectArchive* unsafe_arena_release_refers_to_rect();

  // @@protoc_insertion_point(class_scope:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* from_coord_;
  ::TSCE::CellRectArchive* refers_to_rect_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangePrecedentsTileArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangePrecedentsTileArchive) */ {
 public:
  inline RangePrecedentsTileArchive() : RangePrecedentsTileArchive(nullptr) {}
  ~RangePrecedentsTileArchive() override;
  explicit constexpr RangePrecedentsTileArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangePrecedentsTileArchive(const RangePrecedentsTileArchive& from);
  RangePrecedentsTileArchive(RangePrecedentsTileArchive&& from) noexcept
    : RangePrecedentsTileArchive() {
    *this = ::std::move(from);
  }

  inline RangePrecedentsTileArchive& operator=(const RangePrecedentsTileArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangePrecedentsTileArchive& operator=(RangePrecedentsTileArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangePrecedentsTileArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangePrecedentsTileArchive* internal_default_instance() {
    return reinterpret_cast<const RangePrecedentsTileArchive*>(
               &_RangePrecedentsTileArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RangePrecedentsTileArchive& a, RangePrecedentsTileArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangePrecedentsTileArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangePrecedentsTileArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangePrecedentsTileArchive* New() const final {
    return CreateMaybeMessage<RangePrecedentsTileArchive>(nullptr);
  }

  RangePrecedentsTileArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangePrecedentsTileArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangePrecedentsTileArchive& from);
  void MergeFrom(const RangePrecedentsTileArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangePrecedentsTileArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangePrecedentsTileArchive";
  }
  protected:
  explicit RangePrecedentsTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RangePrecedentsTileArchive_FromToRangeArchive FromToRangeArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kFromToRangeFieldNumber = 2,
    kToOwnerIdFieldNumber = 1,
  };
  // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
  int from_to_range_size() const;
  private:
  int _internal_from_to_range_size() const;
  public:
  void clear_from_to_range();
  ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* mutable_from_to_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >*
      mutable_from_to_range();
  private:
  const ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive& _internal_from_to_range(int index) const;
  ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* _internal_add_from_to_range();
  public:
  const ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive& from_to_range(int index) const;
  ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* add_from_to_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >&
      from_to_range() const;

  // required uint32 to_owner_id = 1;
  bool has_to_owner_id() const;
  private:
  bool _internal_has_to_owner_id() const;
  public:
  void clear_to_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_owner_id() const;
  void set_to_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_owner_id() const;
  void _internal_set_to_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangePrecedentsTileArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive > from_to_range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_owner_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeDependenciesTiledArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeDependenciesTiledArchive) */ {
 public:
  inline RangeDependenciesTiledArchive() : RangeDependenciesTiledArchive(nullptr) {}
  ~RangeDependenciesTiledArchive() override;
  explicit constexpr RangeDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeDependenciesTiledArchive(const RangeDependenciesTiledArchive& from);
  RangeDependenciesTiledArchive(RangeDependenciesTiledArchive&& from) noexcept
    : RangeDependenciesTiledArchive() {
    *this = ::std::move(from);
  }

  inline RangeDependenciesTiledArchive& operator=(const RangeDependenciesTiledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeDependenciesTiledArchive& operator=(RangeDependenciesTiledArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeDependenciesTiledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeDependenciesTiledArchive* internal_default_instance() {
    return reinterpret_cast<const RangeDependenciesTiledArchive*>(
               &_RangeDependenciesTiledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RangeDependenciesTiledArchive& a, RangeDependenciesTiledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeDependenciesTiledArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeDependenciesTiledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeDependenciesTiledArchive* New() const final {
    return CreateMaybeMessage<RangeDependenciesTiledArchive>(nullptr);
  }

  RangeDependenciesTiledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeDependenciesTiledArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeDependenciesTiledArchive& from);
  void MergeFrom(const RangeDependenciesTiledArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeDependenciesTiledArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeDependenciesTiledArchive";
  }
  protected:
  explicit RangeDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangePrecedentsTileFieldNumber = 1,
  };
  // repeated .TSP.Reference range_precedents_tile = 1;
  int range_precedents_tile_size() const;
  private:
  int _internal_range_precedents_tile_size() const;
  public:
  void clear_range_precedents_tile();
  ::TSP::Reference* mutable_range_precedents_tile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_range_precedents_tile();
  private:
  const ::TSP::Reference& _internal_range_precedents_tile(int index) const;
  ::TSP::Reference* _internal_add_range_precedents_tile();
  public:
  const ::TSP::Reference& range_precedents_tile(int index) const;
  ::TSP::Reference* add_range_precedents_tile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      range_precedents_tile() const;

  // @@protoc_insertion_point(class_scope:TSCE.RangeDependenciesTiledArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > range_precedents_tile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive_ReferringColumnToLocalCells PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells) */ {
 public:
  inline SpanningDependenciesArchive_ReferringColumnToLocalCells() : SpanningDependenciesArchive_ReferringColumnToLocalCells(nullptr) {}
  ~SpanningDependenciesArchive_ReferringColumnToLocalCells() override;
  explicit constexpr SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from);
  SpanningDependenciesArchive_ReferringColumnToLocalCells(SpanningDependenciesArchive_ReferringColumnToLocalCells&& from) noexcept
    : SpanningDependenciesArchive_ReferringColumnToLocalCells() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive_ReferringColumnToLocalCells& operator=(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive_ReferringColumnToLocalCells& operator=(SpanningDependenciesArchive_ReferringColumnToLocalCells&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive_ReferringColumnToLocalCells& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive_ReferringColumnToLocalCells* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive_ReferringColumnToLocalCells*>(
               &_SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SpanningDependenciesArchive_ReferringColumnToLocalCells& a, SpanningDependenciesArchive_ReferringColumnToLocalCells& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesArchive_ReferringColumnToLocalCells* New() const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToLocalCells>(nullptr);
  }

  SpanningDependenciesArchive_ReferringColumnToLocalCells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToLocalCells>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from);
  void MergeFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells";
  }
  protected:
  explicit SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordinateFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
  };
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  int cell_coordinate_size() const;
  private:
  int _internal_cell_coordinate_size() const;
  public:
  void clear_cell_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_cell_coordinate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_cell_coordinate();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_cell_coordinate();
  public:
  const ::TSCE::CellCoordinateArchive& cell_coordinate(int index) const;
  ::TSCE::CellCoordinateArchive* add_cell_coordinate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      cell_coordinate() const;

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  bool has_range_context() const;
  private:
  bool _internal_has_range_context() const;
  public:
  void clear_range_context();
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context() const;
  void set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context() const;
  void _internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > cell_coordinate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  int range_context_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive_ReferringColumnToRemoteCells PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells) */ {
 public:
  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells() : SpanningDependenciesArchive_ReferringColumnToRemoteCells(nullptr) {}
  ~SpanningDependenciesArchive_ReferringColumnToRemoteCells() override;
  explicit constexpr SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from);
  SpanningDependenciesArchive_ReferringColumnToRemoteCells(SpanningDependenciesArchive_ReferringColumnToRemoteCells&& from) noexcept
    : SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells& operator=(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells& operator=(SpanningDependenciesArchive_ReferringColumnToRemoteCells&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive_ReferringColumnToRemoteCells& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive_ReferringColumnToRemoteCells* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive_ReferringColumnToRemoteCells*>(
               &_SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SpanningDependenciesArchive_ReferringColumnToRemoteCells& a, SpanningDependenciesArchive_ReferringColumnToRemoteCells& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesArchive_ReferringColumnToRemoteCells* New() const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToRemoteCells>(nullptr);
  }

  SpanningDependenciesArchive_ReferringColumnToRemoteCells* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive_ReferringColumnToRemoteCells>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from);
  void MergeFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells";
  }
  protected:
  explicit SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalCellReferenceFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
  };
  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  int internal_cell_reference_size() const;
  private:
  int _internal_internal_cell_reference_size() const;
  public:
  void clear_internal_cell_reference();
  ::TSCE::InternalCellReferenceArchive* mutable_internal_cell_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_internal_cell_reference();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_internal_cell_reference(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_internal_cell_reference();
  public:
  const ::TSCE::InternalCellReferenceArchive& internal_cell_reference(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_internal_cell_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      internal_cell_reference() const;

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  bool has_range_context() const;
  private:
  bool _internal_has_range_context() const;
  public:
  void clear_range_context();
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context() const;
  void set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context() const;
  void _internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > internal_cell_reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  int range_context_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesArchive) */ {
 public:
  inline SpanningDependenciesArchive() : SpanningDependenciesArchive(nullptr) {}
  ~SpanningDependenciesArchive() override;
  explicit constexpr SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesArchive(const SpanningDependenciesArchive& from);
  SpanningDependenciesArchive(SpanningDependenciesArchive&& from) noexcept
    : SpanningDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesArchive& operator=(const SpanningDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesArchive& operator=(SpanningDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesArchive*>(
               &_SpanningDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SpanningDependenciesArchive& a, SpanningDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesArchive* New() const final {
    return CreateMaybeMessage<SpanningDependenciesArchive>(nullptr);
  }

  SpanningDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesArchive& from);
  void MergeFrom(const SpanningDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesArchive";
  }
  protected:
  explicit SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpanningDependenciesArchive_ReferringColumnToLocalCells ReferringColumnToLocalCells;
  typedef SpanningDependenciesArchive_ReferringColumnToRemoteCells ReferringColumnToRemoteCells;

  typedef SpanningDependenciesArchive_RangeContext RangeContext;
  static constexpr RangeContext DEFAULT =
    SpanningDependenciesArchive_RangeContext_DEFAULT;
  static constexpr RangeContext INCLUDE_HEADERS =
    SpanningDependenciesArchive_RangeContext_INCLUDE_HEADERS;
  static inline bool RangeContext_IsValid(int value) {
    return SpanningDependenciesArchive_RangeContext_IsValid(value);
  }
  static constexpr RangeContext RangeContext_MIN =
    SpanningDependenciesArchive_RangeContext_RangeContext_MIN;
  static constexpr RangeContext RangeContext_MAX =
    SpanningDependenciesArchive_RangeContext_RangeContext_MAX;
  static constexpr int RangeContext_ARRAYSIZE =
    SpanningDependenciesArchive_RangeContext_RangeContext_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RangeContext_descriptor() {
    return SpanningDependenciesArchive_RangeContext_descriptor();
  }
  template<typename T>
  static inline const std::string& RangeContext_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RangeContext>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RangeContext_Name.");
    return SpanningDependenciesArchive_RangeContext_Name(enum_t_value);
  }
  static inline bool RangeContext_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RangeContext* value) {
    return SpanningDependenciesArchive_RangeContext_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kRangeContextFieldNumber = 2,
    kCellFieldNumber = 3,
    kReferringColumnToLocalCellsFieldNumber = 6,
    kReferringColumnToRemoteCellsFieldNumber = 7,
    kTotalRangeForDeletedTableFieldNumber = 4,
    kBodyRangeForDeletedTableFieldNumber = 5,
  };
  // repeated uint32 column = 1;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_column() const;
  void _internal_add_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 column(int index) const;
  void set_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_column();

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  int range_context_size() const;
  private:
  int _internal_range_context_size() const;
  public:
  void clear_range_context();
  private:
  ::TSCE::SpanningDependenciesArchive_RangeContext _internal_range_context(int index) const;
  void _internal_add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_range_context();
  public:
  ::TSCE::SpanningDependenciesArchive_RangeContext range_context(int index) const;
  void set_range_context(int index, ::TSCE::SpanningDependenciesArchive_RangeContext value);
  void add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& range_context() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_range_context();

  // repeated .TSCE.CellReferenceArchive cell = 3;
  int cell_size() const;
  private:
  int _internal_cell_size() const;
  public:
  void clear_cell();
  ::TSCE::CellReferenceArchive* mutable_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_cell();
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_cell();
  public:
  const ::TSCE::CellReferenceArchive& cell(int index) const;
  ::TSCE::CellReferenceArchive* add_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      cell() const;

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  int referring_column_to_local_cells_size() const;
  private:
  int _internal_referring_column_to_local_cells_size() const;
  public:
  void clear_referring_column_to_local_cells();
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* mutable_referring_column_to_local_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >*
      mutable_referring_column_to_local_cells();
  private:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& _internal_referring_column_to_local_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* _internal_add_referring_column_to_local_cells();
  public:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& referring_column_to_local_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* add_referring_column_to_local_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >&
      referring_column_to_local_cells() const;

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  int referring_column_to_remote_cells_size() const;
  private:
  int _internal_referring_column_to_remote_cells_size() const;
  public:
  void clear_referring_column_to_remote_cells();
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* mutable_referring_column_to_remote_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >*
      mutable_referring_column_to_remote_cells();
  private:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& _internal_referring_column_to_remote_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* _internal_add_referring_column_to_remote_cells();
  public:
  const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& referring_column_to_remote_cells(int index) const;
  ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* add_referring_column_to_remote_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >&
      referring_column_to_remote_cells() const;

  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  bool has_total_range_for_deleted_table() const;
  private:
  bool _internal_has_total_range_for_deleted_table() const;
  public:
  void clear_total_range_for_deleted_table();
  const ::TSCE::RangeCoordinateArchive& total_range_for_deleted_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_total_range_for_deleted_table();
  ::TSCE::RangeCoordinateArchive* mutable_total_range_for_deleted_table();
  void set_allocated_total_range_for_deleted_table(::TSCE::RangeCoordinateArchive* total_range_for_deleted_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_total_range_for_deleted_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_total_range_for_deleted_table();
  public:
  void unsafe_arena_set_allocated_total_range_for_deleted_table(
      ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_total_range_for_deleted_table();

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  bool has_body_range_for_deleted_table() const;
  private:
  bool _internal_has_body_range_for_deleted_table() const;
  public:
  void clear_body_range_for_deleted_table();
  const ::TSCE::RangeCoordinateArchive& body_range_for_deleted_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_body_range_for_deleted_table();
  ::TSCE::RangeCoordinateArchive* mutable_body_range_for_deleted_table();
  void set_allocated_body_range_for_deleted_table(::TSCE::RangeCoordinateArchive* body_range_for_deleted_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_body_range_for_deleted_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_body_range_for_deleted_table();
  public:
  void unsafe_arena_set_allocated_body_range_for_deleted_table(
      ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_body_range_for_deleted_table();

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> range_context_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > cell_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells > referring_column_to_local_cells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells > referring_column_to_remote_cells_;
  ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table_;
  ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesExpandedArchive_ExtentRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesExpandedArchive.ExtentRange) */ {
 public:
  inline SpanningDependenciesExpandedArchive_ExtentRange() : SpanningDependenciesExpandedArchive_ExtentRange(nullptr) {}
  ~SpanningDependenciesExpandedArchive_ExtentRange() override;
  explicit constexpr SpanningDependenciesExpandedArchive_ExtentRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesExpandedArchive_ExtentRange(const SpanningDependenciesExpandedArchive_ExtentRange& from);
  SpanningDependenciesExpandedArchive_ExtentRange(SpanningDependenciesExpandedArchive_ExtentRange&& from) noexcept
    : SpanningDependenciesExpandedArchive_ExtentRange() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesExpandedArchive_ExtentRange& operator=(const SpanningDependenciesExpandedArchive_ExtentRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesExpandedArchive_ExtentRange& operator=(SpanningDependenciesExpandedArchive_ExtentRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesExpandedArchive_ExtentRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesExpandedArchive_ExtentRange* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesExpandedArchive_ExtentRange*>(
               &_SpanningDependenciesExpandedArchive_ExtentRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SpanningDependenciesExpandedArchive_ExtentRange& a, SpanningDependenciesExpandedArchive_ExtentRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesExpandedArchive_ExtentRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesExpandedArchive_ExtentRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesExpandedArchive_ExtentRange* New() const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_ExtentRange>(nullptr);
  }

  SpanningDependenciesExpandedArchive_ExtentRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_ExtentRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRange& from);
  void MergeFrom(const SpanningDependenciesExpandedArchive_ExtentRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesExpandedArchive_ExtentRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesExpandedArchive.ExtentRange";
  }
  protected:
  explicit SpanningDependenciesExpandedArchive_ExtentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentBeginFieldNumber = 1,
    kExtentEndFieldNumber = 2,
  };
  // required uint32 extent_begin = 1;
  bool has_extent_begin() const;
  private:
  bool _internal_has_extent_begin() const;
  public:
  void clear_extent_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 extent_begin() const;
  void set_extent_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extent_begin() const;
  void _internal_set_extent_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 extent_end = 2;
  bool has_extent_end() const;
  private:
  bool _internal_has_extent_end() const;
  public:
  void clear_extent_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 extent_end() const;
  void set_extent_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extent_end() const;
  void _internal_set_extent_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extent_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extent_end_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext) */ {
 public:
  inline SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext() : SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(nullptr) {}
  ~SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext() override;
  explicit constexpr SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from);
  SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext&& from) noexcept
    : SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& operator=(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& operator=(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext*>(
               &_SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& a, SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* New() const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>(nullptr);
  }

  SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from);
  void MergeFrom(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext";
  }
  protected:
  explicit SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 3,
    kOwnerIdFieldNumber = 1,
    kRangeContextFieldNumber = 2,
  };
  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >*
      mutable_ranges();
  private:
  const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange& _internal_ranges(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* _internal_add_ranges();
  public:
  const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange& ranges(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >&
      ranges() const;

  // required uint32 owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
  bool has_range_context() const;
  private:
  bool _internal_has_range_context() const;
  public:
  void clear_range_context();
  ::TSCE::SpanningDependenciesExpandedArchive_RangeContext range_context() const;
  void set_range_context(::TSCE::SpanningDependenciesExpandedArchive_RangeContext value);
  private:
  ::TSCE::SpanningDependenciesExpandedArchive_RangeContext _internal_range_context() const;
  void _internal_set_range_context(::TSCE::SpanningDependenciesExpandedArchive_RangeContext value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange > ranges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_id_;
  int range_context_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesExpandedArchive_CellCoordRefersToExtents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents) */ {
 public:
  inline SpanningDependenciesExpandedArchive_CellCoordRefersToExtents() : SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(nullptr) {}
  ~SpanningDependenciesExpandedArchive_CellCoordRefersToExtents() override;
  explicit constexpr SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from);
  SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents&& from) noexcept
    : SpanningDependenciesExpandedArchive_CellCoordRefersToExtents() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& operator=(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& operator=(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents*>(
               &_SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& a, SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* New() const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>(nullptr);
  }

  SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from);
  void MergeFrom(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents";
  }
  protected:
  explicit SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesByTableContextFieldNumber = 2,
    kCoordinateFieldNumber = 1,
  };
  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
  int ranges_by_table_context_size() const;
  private:
  int _internal_ranges_by_table_context_size() const;
  public:
  void clear_ranges_by_table_context();
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* mutable_ranges_by_table_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >*
      mutable_ranges_by_table_context();
  private:
  const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& _internal_ranges_by_table_context(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* _internal_add_ranges_by_table_context();
  public:
  const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& ranges_by_table_context(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* add_ranges_by_table_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >&
      ranges_by_table_context() const;

  // required .TSCE.CellCoordinateArchive coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::TSCE::CellCoordinateArchive& coordinate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_coordinate();
  void set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_coordinate() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::TSCE::CellCoordinateArchive* coordinate);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_coordinate();

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext > ranges_by_table_context_;
  ::TSCE::CellCoordinateArchive* coordinate_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SpanningDependenciesExpandedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SpanningDependenciesExpandedArchive) */ {
 public:
  inline SpanningDependenciesExpandedArchive() : SpanningDependenciesExpandedArchive(nullptr) {}
  ~SpanningDependenciesExpandedArchive() override;
  explicit constexpr SpanningDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpanningDependenciesExpandedArchive(const SpanningDependenciesExpandedArchive& from);
  SpanningDependenciesExpandedArchive(SpanningDependenciesExpandedArchive&& from) noexcept
    : SpanningDependenciesExpandedArchive() {
    *this = ::std::move(from);
  }

  inline SpanningDependenciesExpandedArchive& operator=(const SpanningDependenciesExpandedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanningDependenciesExpandedArchive& operator=(SpanningDependenciesExpandedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpanningDependenciesExpandedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpanningDependenciesExpandedArchive* internal_default_instance() {
    return reinterpret_cast<const SpanningDependenciesExpandedArchive*>(
               &_SpanningDependenciesExpandedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SpanningDependenciesExpandedArchive& a, SpanningDependenciesExpandedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanningDependenciesExpandedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpanningDependenciesExpandedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanningDependenciesExpandedArchive* New() const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive>(nullptr);
  }

  SpanningDependenciesExpandedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanningDependenciesExpandedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanningDependenciesExpandedArchive& from);
  void MergeFrom(const SpanningDependenciesExpandedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanningDependenciesExpandedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SpanningDependenciesExpandedArchive";
  }
  protected:
  explicit SpanningDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpanningDependenciesExpandedArchive_ExtentRange ExtentRange;
  typedef SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext ExtentRangeWithTableWithContext;
  typedef SpanningDependenciesExpandedArchive_CellCoordRefersToExtents CellCoordRefersToExtents;

  typedef SpanningDependenciesExpandedArchive_RangeContext RangeContext;
  static constexpr RangeContext DEFAULT =
    SpanningDependenciesExpandedArchive_RangeContext_DEFAULT;
  static constexpr RangeContext INCLUDE_HEADERS =
    SpanningDependenciesExpandedArchive_RangeContext_INCLUDE_HEADERS;
  static inline bool RangeContext_IsValid(int value) {
    return SpanningDependenciesExpandedArchive_RangeContext_IsValid(value);
  }
  static constexpr RangeContext RangeContext_MIN =
    SpanningDependenciesExpandedArchive_RangeContext_RangeContext_MIN;
  static constexpr RangeContext RangeContext_MAX =
    SpanningDependenciesExpandedArchive_RangeContext_RangeContext_MAX;
  static constexpr int RangeContext_ARRAYSIZE =
    SpanningDependenciesExpandedArchive_RangeContext_RangeContext_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RangeContext_descriptor() {
    return SpanningDependenciesExpandedArchive_RangeContext_descriptor();
  }
  template<typename T>
  static inline const std::string& RangeContext_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RangeContext>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RangeContext_Name.");
    return SpanningDependenciesExpandedArchive_RangeContext_Name(enum_t_value);
  }
  static inline bool RangeContext_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RangeContext* value) {
    return SpanningDependenciesExpandedArchive_RangeContext_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoordRefersToSpansFieldNumber = 1,
    kTotalRangeForTableFieldNumber = 2,
    kBodyRangeForTableFieldNumber = 3,
  };
  // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
  int coord_refers_to_spans_size() const;
  private:
  int _internal_coord_refers_to_spans_size() const;
  public:
  void clear_coord_refers_to_spans();
  ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* mutable_coord_refers_to_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >*
      mutable_coord_refers_to_spans();
  private:
  const ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& _internal_coord_refers_to_spans(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* _internal_add_coord_refers_to_spans();
  public:
  const ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& coord_refers_to_spans(int index) const;
  ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* add_coord_refers_to_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >&
      coord_refers_to_spans() const;

  // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
  bool has_total_range_for_table() const;
  private:
  bool _internal_has_total_range_for_table() const;
  public:
  void clear_total_range_for_table();
  const ::TSCE::RangeCoordinateArchive& total_range_for_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_total_range_for_table();
  ::TSCE::RangeCoordinateArchive* mutable_total_range_for_table();
  void set_allocated_total_range_for_table(::TSCE::RangeCoordinateArchive* total_range_for_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_total_range_for_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_total_range_for_table();
  public:
  void unsafe_arena_set_allocated_total_range_for_table(
      ::TSCE::RangeCoordinateArchive* total_range_for_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_total_range_for_table();

  // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
  bool has_body_range_for_table() const;
  private:
  bool _internal_has_body_range_for_table() const;
  public:
  void clear_body_range_for_table();
  const ::TSCE::RangeCoordinateArchive& body_range_for_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_body_range_for_table();
  ::TSCE::RangeCoordinateArchive* mutable_body_range_for_table();
  void set_allocated_body_range_for_table(::TSCE::RangeCoordinateArchive* body_range_for_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_body_range_for_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_body_range_for_table();
  public:
  void unsafe_arena_set_allocated_body_range_for_table(
      ::TSCE::RangeCoordinateArchive* body_range_for_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_body_range_for_table();

  // @@protoc_insertion_point(class_scope:TSCE.SpanningDependenciesExpandedArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents > coord_refers_to_spans_;
  ::TSCE::RangeCoordinateArchive* total_range_for_table_;
  ::TSCE::RangeCoordinateArchive* body_range_for_table_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class WholeOwnerDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.WholeOwnerDependenciesArchive) */ {
 public:
  inline WholeOwnerDependenciesArchive() : WholeOwnerDependenciesArchive(nullptr) {}
  ~WholeOwnerDependenciesArchive() override;
  explicit constexpr WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from);
  WholeOwnerDependenciesArchive(WholeOwnerDependenciesArchive&& from) noexcept
    : WholeOwnerDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline WholeOwnerDependenciesArchive& operator=(const WholeOwnerDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline WholeOwnerDependenciesArchive& operator=(WholeOwnerDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WholeOwnerDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const WholeOwnerDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const WholeOwnerDependenciesArchive*>(
               &_WholeOwnerDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(WholeOwnerDependenciesArchive& a, WholeOwnerDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(WholeOwnerDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WholeOwnerDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WholeOwnerDependenciesArchive* New() const final {
    return CreateMaybeMessage<WholeOwnerDependenciesArchive>(nullptr);
  }

  WholeOwnerDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WholeOwnerDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WholeOwnerDependenciesArchive& from);
  void MergeFrom(const WholeOwnerDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WholeOwnerDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.WholeOwnerDependenciesArchive";
  }
  protected:
  explicit WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependentCellFieldNumber = 1,
  };
  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  int dependent_cell_size() const;
  private:
  int _internal_dependent_cell_size() const;
  public:
  void clear_dependent_cell();
  ::TSCE::InternalCellReferenceArchive* mutable_dependent_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_dependent_cell();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_dependent_cell(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_dependent_cell();
  public:
  const ::TSCE::InternalCellReferenceArchive& dependent_cell(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_dependent_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      dependent_cell() const;

  // @@protoc_insertion_point(class_scope:TSCE.WholeOwnerDependenciesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > dependent_cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class WholeOwnerDependenciesExpandedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.WholeOwnerDependenciesExpandedArchive) */ {
 public:
  inline WholeOwnerDependenciesExpandedArchive() : WholeOwnerDependenciesExpandedArchive(nullptr) {}
  ~WholeOwnerDependenciesExpandedArchive() override;
  explicit constexpr WholeOwnerDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WholeOwnerDependenciesExpandedArchive(const WholeOwnerDependenciesExpandedArchive& from);
  WholeOwnerDependenciesExpandedArchive(WholeOwnerDependenciesExpandedArchive&& from) noexcept
    : WholeOwnerDependenciesExpandedArchive() {
    *this = ::std::move(from);
  }

  inline WholeOwnerDependenciesExpandedArchive& operator=(const WholeOwnerDependenciesExpandedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline WholeOwnerDependenciesExpandedArchive& operator=(WholeOwnerDependenciesExpandedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WholeOwnerDependenciesExpandedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const WholeOwnerDependenciesExpandedArchive* internal_default_instance() {
    return reinterpret_cast<const WholeOwnerDependenciesExpandedArchive*>(
               &_WholeOwnerDependenciesExpandedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(WholeOwnerDependenciesExpandedArchive& a, WholeOwnerDependenciesExpandedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(WholeOwnerDependenciesExpandedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WholeOwnerDependenciesExpandedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WholeOwnerDependenciesExpandedArchive* New() const final {
    return CreateMaybeMessage<WholeOwnerDependenciesExpandedArchive>(nullptr);
  }

  WholeOwnerDependenciesExpandedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WholeOwnerDependenciesExpandedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WholeOwnerDependenciesExpandedArchive& from);
  void MergeFrom(const WholeOwnerDependenciesExpandedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WholeOwnerDependenciesExpandedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.WholeOwnerDependenciesExpandedArchive";
  }
  protected:
  explicit WholeOwnerDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependentCellsFieldNumber = 1,
  };
  // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
  bool has_dependent_cells() const;
  private:
  bool _internal_has_dependent_cells() const;
  public:
  void clear_dependent_cells();
  const ::TSCE::InternalCellRefSetArchive& dependent_cells() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_dependent_cells();
  ::TSCE::InternalCellRefSetArchive* mutable_dependent_cells();
  void set_allocated_dependent_cells(::TSCE::InternalCellRefSetArchive* dependent_cells);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_dependent_cells() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_dependent_cells();
  public:
  void unsafe_arena_set_allocated_dependent_cells(
      ::TSCE::InternalCellRefSetArchive* dependent_cells);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_dependent_cells();

  // @@protoc_insertion_point(class_scope:TSCE.WholeOwnerDependenciesExpandedArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::InternalCellRefSetArchive* dependent_cells_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellErrorsArchive_ErrorForCell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellErrorsArchive.ErrorForCell) */ {
 public:
  inline CellErrorsArchive_ErrorForCell() : CellErrorsArchive_ErrorForCell(nullptr) {}
  ~CellErrorsArchive_ErrorForCell() override;
  explicit constexpr CellErrorsArchive_ErrorForCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellErrorsArchive_ErrorForCell(const CellErrorsArchive_ErrorForCell& from);
  CellErrorsArchive_ErrorForCell(CellErrorsArchive_ErrorForCell&& from) noexcept
    : CellErrorsArchive_ErrorForCell() {
    *this = ::std::move(from);
  }

  inline CellErrorsArchive_ErrorForCell& operator=(const CellErrorsArchive_ErrorForCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellErrorsArchive_ErrorForCell& operator=(CellErrorsArchive_ErrorForCell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellErrorsArchive_ErrorForCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellErrorsArchive_ErrorForCell* internal_default_instance() {
    return reinterpret_cast<const CellErrorsArchive_ErrorForCell*>(
               &_CellErrorsArchive_ErrorForCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CellErrorsArchive_ErrorForCell& a, CellErrorsArchive_ErrorForCell& b) {
    a.Swap(&b);
  }
  inline void Swap(CellErrorsArchive_ErrorForCell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellErrorsArchive_ErrorForCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellErrorsArchive_ErrorForCell* New() const final {
    return CreateMaybeMessage<CellErrorsArchive_ErrorForCell>(nullptr);
  }

  CellErrorsArchive_ErrorForCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellErrorsArchive_ErrorForCell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellErrorsArchive_ErrorForCell& from);
  void MergeFrom(const CellErrorsArchive_ErrorForCell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellErrorsArchive_ErrorForCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellErrorsArchive.ErrorForCell";
  }
  protected:
  explicit CellErrorsArchive_ErrorForCell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kErrDueToCellFieldNumber = 3,
    kErrorFlavorFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::TSCE::CellCoordinateArchive& coordinate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_coordinate();
  ::TSCE::CellCoordinateArchive* mutable_coordinate();
  void set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_coordinate() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::TSCE::CellCoordinateArchive* coordinate);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_coordinate();

  // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
  bool has_err_due_to_cell() const;
  private:
  bool _internal_has_err_due_to_cell() const;
  public:
  void clear_err_due_to_cell();
  const ::TSCE::InternalCellReferenceArchive& err_due_to_cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellReferenceArchive* release_err_due_to_cell();
  ::TSCE::InternalCellReferenceArchive* mutable_err_due_to_cell();
  void set_allocated_err_due_to_cell(::TSCE::InternalCellReferenceArchive* err_due_to_cell);
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_err_due_to_cell() const;
  ::TSCE::InternalCellReferenceArchive* _internal_mutable_err_due_to_cell();
  public:
  void unsafe_arena_set_allocated_err_due_to_cell(
      ::TSCE::InternalCellReferenceArchive* err_due_to_cell);
  ::TSCE::InternalCellReferenceArchive* unsafe_arena_release_err_due_to_cell();

  // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
  bool has_error_flavor() const;
  private:
  bool _internal_has_error_flavor() const;
  public:
  void clear_error_flavor();
  ::TSCE::CellErrorsArchive_ErrorFlavor error_flavor() const;
  void set_error_flavor(::TSCE::CellErrorsArchive_ErrorFlavor value);
  private:
  ::TSCE::CellErrorsArchive_ErrorFlavor _internal_error_flavor() const;
  void _internal_set_error_flavor(::TSCE::CellErrorsArchive_ErrorFlavor value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellErrorsArchive.ErrorForCell)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* coordinate_;
  ::TSCE::InternalCellReferenceArchive* err_due_to_cell_;
  int error_flavor_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellErrorsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellErrorsArchive) */ {
 public:
  inline CellErrorsArchive() : CellErrorsArchive(nullptr) {}
  ~CellErrorsArchive() override;
  explicit constexpr CellErrorsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellErrorsArchive(const CellErrorsArchive& from);
  CellErrorsArchive(CellErrorsArchive&& from) noexcept
    : CellErrorsArchive() {
    *this = ::std::move(from);
  }

  inline CellErrorsArchive& operator=(const CellErrorsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellErrorsArchive& operator=(CellErrorsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellErrorsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellErrorsArchive* internal_default_instance() {
    return reinterpret_cast<const CellErrorsArchive*>(
               &_CellErrorsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CellErrorsArchive& a, CellErrorsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellErrorsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellErrorsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellErrorsArchive* New() const final {
    return CreateMaybeMessage<CellErrorsArchive>(nullptr);
  }

  CellErrorsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellErrorsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellErrorsArchive& from);
  void MergeFrom(const CellErrorsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellErrorsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellErrorsArchive";
  }
  protected:
  explicit CellErrorsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellErrorsArchive_ErrorForCell ErrorForCell;

  typedef CellErrorsArchive_ErrorFlavor ErrorFlavor;
  static constexpr ErrorFlavor NONE =
    CellErrorsArchive_ErrorFlavor_NONE;
  static constexpr ErrorFlavor ERROR =
    CellErrorsArchive_ErrorFlavor_ERROR;
  static constexpr ErrorFlavor REF_ERROR =
    CellErrorsArchive_ErrorFlavor_REF_ERROR;
  static constexpr ErrorFlavor CIRCULAR_REF_ERROR =
    CellErrorsArchive_ErrorFlavor_CIRCULAR_REF_ERROR;
  static constexpr ErrorFlavor UNSUPPORTED_FUNCTION_ERROR =
    CellErrorsArchive_ErrorFlavor_UNSUPPORTED_FUNCTION_ERROR;
  static inline bool ErrorFlavor_IsValid(int value) {
    return CellErrorsArchive_ErrorFlavor_IsValid(value);
  }
  static constexpr ErrorFlavor ErrorFlavor_MIN =
    CellErrorsArchive_ErrorFlavor_ErrorFlavor_MIN;
  static constexpr ErrorFlavor ErrorFlavor_MAX =
    CellErrorsArchive_ErrorFlavor_ErrorFlavor_MAX;
  static constexpr int ErrorFlavor_ARRAYSIZE =
    CellErrorsArchive_ErrorFlavor_ErrorFlavor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorFlavor_descriptor() {
    return CellErrorsArchive_ErrorFlavor_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorFlavor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorFlavor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorFlavor_Name.");
    return CellErrorsArchive_ErrorFlavor_Name(enum_t_value);
  }
  static inline bool ErrorFlavor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorFlavor* value) {
    return CellErrorsArchive_ErrorFlavor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
  };
  // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::TSCE::CellErrorsArchive_ErrorForCell* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellErrorsArchive_ErrorForCell >*
      mutable_errors();
  private:
  const ::TSCE::CellErrorsArchive_ErrorForCell& _internal_errors(int index) const;
  ::TSCE::CellErrorsArchive_ErrorForCell* _internal_add_errors();
  public:
  const ::TSCE::CellErrorsArchive_ErrorForCell& errors(int index) const;
  ::TSCE::CellErrorsArchive_ErrorForCell* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellErrorsArchive_ErrorForCell >&
      errors() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellErrorsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellErrorsArchive_ErrorForCell > errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferencesArchive_TableRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferencesArchive.TableRef) */ {
 public:
  inline UuidReferencesArchive_TableRef() : UuidReferencesArchive_TableRef(nullptr) {}
  ~UuidReferencesArchive_TableRef() override;
  explicit constexpr UuidReferencesArchive_TableRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferencesArchive_TableRef(const UuidReferencesArchive_TableRef& from);
  UuidReferencesArchive_TableRef(UuidReferencesArchive_TableRef&& from) noexcept
    : UuidReferencesArchive_TableRef() {
    *this = ::std::move(from);
  }

  inline UuidReferencesArchive_TableRef& operator=(const UuidReferencesArchive_TableRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferencesArchive_TableRef& operator=(UuidReferencesArchive_TableRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferencesArchive_TableRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferencesArchive_TableRef* internal_default_instance() {
    return reinterpret_cast<const UuidReferencesArchive_TableRef*>(
               &_UuidReferencesArchive_TableRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(UuidReferencesArchive_TableRef& a, UuidReferencesArchive_TableRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferencesArchive_TableRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferencesArchive_TableRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferencesArchive_TableRef* New() const final {
    return CreateMaybeMessage<UuidReferencesArchive_TableRef>(nullptr);
  }

  UuidReferencesArchive_TableRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferencesArchive_TableRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferencesArchive_TableRef& from);
  void MergeFrom(const UuidReferencesArchive_TableRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferencesArchive_TableRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferencesArchive.TableRef";
  }
  protected:
  explicit UuidReferencesArchive_TableRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUuidFieldNumber = 1,
    kCoordSetFieldNumber = 2,
  };
  // required .TSP.UUID owner_uuid = 1;
  bool has_owner_uuid() const;
  private:
  bool _internal_has_owner_uuid() const;
  public:
  void clear_owner_uuid();
  const ::TSP::UUID& owner_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uuid();
  ::TSP::UUID* mutable_owner_uuid();
  void set_allocated_owner_uuid(::TSP::UUID* owner_uuid);
  private:
  const ::TSP::UUID& _internal_owner_uuid() const;
  ::TSP::UUID* _internal_mutable_owner_uuid();
  public:
  void unsafe_arena_set_allocated_owner_uuid(
      ::TSP::UUID* owner_uuid);
  ::TSP::UUID* unsafe_arena_release_owner_uuid();

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  bool has_coord_set() const;
  private:
  bool _internal_has_coord_set() const;
  public:
  void clear_coord_set();
  const ::TSCE::CellCoordSetArchive& coord_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_coord_set();
  ::TSCE::CellCoordSetArchive* mutable_coord_set();
  void set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_coord_set() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_coord_set();
  public:
  void unsafe_arena_set_allocated_coord_set(
      ::TSCE::CellCoordSetArchive* coord_set);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_coord_set();

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferencesArchive.TableRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* owner_uuid_;
  ::TSCE::CellCoordSetArchive* coord_set_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferencesArchive_UuidRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferencesArchive.UuidRef) */ {
 public:
  inline UuidReferencesArchive_UuidRef() : UuidReferencesArchive_UuidRef(nullptr) {}
  ~UuidReferencesArchive_UuidRef() override;
  explicit constexpr UuidReferencesArchive_UuidRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferencesArchive_UuidRef(const UuidReferencesArchive_UuidRef& from);
  UuidReferencesArchive_UuidRef(UuidReferencesArchive_UuidRef&& from) noexcept
    : UuidReferencesArchive_UuidRef() {
    *this = ::std::move(from);
  }

  inline UuidReferencesArchive_UuidRef& operator=(const UuidReferencesArchive_UuidRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferencesArchive_UuidRef& operator=(UuidReferencesArchive_UuidRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferencesArchive_UuidRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferencesArchive_UuidRef* internal_default_instance() {
    return reinterpret_cast<const UuidReferencesArchive_UuidRef*>(
               &_UuidReferencesArchive_UuidRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(UuidReferencesArchive_UuidRef& a, UuidReferencesArchive_UuidRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferencesArchive_UuidRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferencesArchive_UuidRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferencesArchive_UuidRef* New() const final {
    return CreateMaybeMessage<UuidReferencesArchive_UuidRef>(nullptr);
  }

  UuidReferencesArchive_UuidRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferencesArchive_UuidRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferencesArchive_UuidRef& from);
  void MergeFrom(const UuidReferencesArchive_UuidRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferencesArchive_UuidRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferencesArchive.UuidRef";
  }
  protected:
  explicit UuidReferencesArchive_UuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kCoordSetFieldNumber = 2,
  };
  // required .TSP.UUID uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  bool has_coord_set() const;
  private:
  bool _internal_has_coord_set() const;
  public:
  void clear_coord_set();
  const ::TSCE::CellCoordSetArchive& coord_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordSetArchive* release_coord_set();
  ::TSCE::CellCoordSetArchive* mutable_coord_set();
  void set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set);
  private:
  const ::TSCE::CellCoordSetArchive& _internal_coord_set() const;
  ::TSCE::CellCoordSetArchive* _internal_mutable_coord_set();
  public:
  void unsafe_arena_set_allocated_coord_set(
      ::TSCE::CellCoordSetArchive* coord_set);
  ::TSCE::CellCoordSetArchive* unsafe_arena_release_coord_set();

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferencesArchive.UuidRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* uuid_;
  ::TSCE::CellCoordSetArchive* coord_set_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferencesArchive_TableWithUuidRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferencesArchive.TableWithUuidRef) */ {
 public:
  inline UuidReferencesArchive_TableWithUuidRef() : UuidReferencesArchive_TableWithUuidRef(nullptr) {}
  ~UuidReferencesArchive_TableWithUuidRef() override;
  explicit constexpr UuidReferencesArchive_TableWithUuidRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferencesArchive_TableWithUuidRef(const UuidReferencesArchive_TableWithUuidRef& from);
  UuidReferencesArchive_TableWithUuidRef(UuidReferencesArchive_TableWithUuidRef&& from) noexcept
    : UuidReferencesArchive_TableWithUuidRef() {
    *this = ::std::move(from);
  }

  inline UuidReferencesArchive_TableWithUuidRef& operator=(const UuidReferencesArchive_TableWithUuidRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferencesArchive_TableWithUuidRef& operator=(UuidReferencesArchive_TableWithUuidRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferencesArchive_TableWithUuidRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferencesArchive_TableWithUuidRef* internal_default_instance() {
    return reinterpret_cast<const UuidReferencesArchive_TableWithUuidRef*>(
               &_UuidReferencesArchive_TableWithUuidRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(UuidReferencesArchive_TableWithUuidRef& a, UuidReferencesArchive_TableWithUuidRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferencesArchive_TableWithUuidRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferencesArchive_TableWithUuidRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferencesArchive_TableWithUuidRef* New() const final {
    return CreateMaybeMessage<UuidReferencesArchive_TableWithUuidRef>(nullptr);
  }

  UuidReferencesArchive_TableWithUuidRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferencesArchive_TableWithUuidRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferencesArchive_TableWithUuidRef& from);
  void MergeFrom(const UuidReferencesArchive_TableWithUuidRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferencesArchive_TableWithUuidRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferencesArchive.TableWithUuidRef";
  }
  protected:
  explicit UuidReferencesArchive_TableWithUuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidRefsFieldNumber = 2,
    kOwnerUuidFieldNumber = 1,
  };
  // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
  int uuid_refs_size() const;
  private:
  int _internal_uuid_refs_size() const;
  public:
  void clear_uuid_refs();
  ::TSCE::UuidReferencesArchive_UuidRef* mutable_uuid_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_UuidRef >*
      mutable_uuid_refs();
  private:
  const ::TSCE::UuidReferencesArchive_UuidRef& _internal_uuid_refs(int index) const;
  ::TSCE::UuidReferencesArchive_UuidRef* _internal_add_uuid_refs();
  public:
  const ::TSCE::UuidReferencesArchive_UuidRef& uuid_refs(int index) const;
  ::TSCE::UuidReferencesArchive_UuidRef* add_uuid_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_UuidRef >&
      uuid_refs() const;

  // required .TSP.UUID owner_uuid = 1;
  bool has_owner_uuid() const;
  private:
  bool _internal_has_owner_uuid() const;
  public:
  void clear_owner_uuid();
  const ::TSP::UUID& owner_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uuid();
  ::TSP::UUID* mutable_owner_uuid();
  void set_allocated_owner_uuid(::TSP::UUID* owner_uuid);
  private:
  const ::TSP::UUID& _internal_owner_uuid() const;
  ::TSP::UUID* _internal_mutable_owner_uuid();
  public:
  void unsafe_arena_set_allocated_owner_uuid(
      ::TSP::UUID* owner_uuid);
  ::TSP::UUID* unsafe_arena_release_owner_uuid();

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferencesArchive.TableWithUuidRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_UuidRef > uuid_refs_;
  ::TSP::UUID* owner_uuid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferencesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferencesArchive) */ {
 public:
  inline UuidReferencesArchive() : UuidReferencesArchive(nullptr) {}
  ~UuidReferencesArchive() override;
  explicit constexpr UuidReferencesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferencesArchive(const UuidReferencesArchive& from);
  UuidReferencesArchive(UuidReferencesArchive&& from) noexcept
    : UuidReferencesArchive() {
    *this = ::std::move(from);
  }

  inline UuidReferencesArchive& operator=(const UuidReferencesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferencesArchive& operator=(UuidReferencesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferencesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferencesArchive* internal_default_instance() {
    return reinterpret_cast<const UuidReferencesArchive*>(
               &_UuidReferencesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(UuidReferencesArchive& a, UuidReferencesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferencesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferencesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferencesArchive* New() const final {
    return CreateMaybeMessage<UuidReferencesArchive>(nullptr);
  }

  UuidReferencesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferencesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferencesArchive& from);
  void MergeFrom(const UuidReferencesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferencesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferencesArchive";
  }
  protected:
  explicit UuidReferencesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UuidReferencesArchive_TableRef TableRef;
  typedef UuidReferencesArchive_UuidRef UuidRef;
  typedef UuidReferencesArchive_TableWithUuidRef TableWithUuidRef;

  // accessors -------------------------------------------------------

  enum : int {
    kTableRefsFieldNumber = 1,
    kTableUuidRefsFieldNumber = 2,
  };
  // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
  int table_refs_size() const;
  private:
  int _internal_table_refs_size() const;
  public:
  void clear_table_refs();
  ::TSCE::UuidReferencesArchive_TableRef* mutable_table_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableRef >*
      mutable_table_refs();
  private:
  const ::TSCE::UuidReferencesArchive_TableRef& _internal_table_refs(int index) const;
  ::TSCE::UuidReferencesArchive_TableRef* _internal_add_table_refs();
  public:
  const ::TSCE::UuidReferencesArchive_TableRef& table_refs(int index) const;
  ::TSCE::UuidReferencesArchive_TableRef* add_table_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableRef >&
      table_refs() const;

  // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
  int table_uuid_refs_size() const;
  private:
  int _internal_table_uuid_refs_size() const;
  public:
  void clear_table_uuid_refs();
  ::TSCE::UuidReferencesArchive_TableWithUuidRef* mutable_table_uuid_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableWithUuidRef >*
      mutable_table_uuid_refs();
  private:
  const ::TSCE::UuidReferencesArchive_TableWithUuidRef& _internal_table_uuid_refs(int index) const;
  ::TSCE::UuidReferencesArchive_TableWithUuidRef* _internal_add_table_uuid_refs();
  public:
  const ::TSCE::UuidReferencesArchive_TableWithUuidRef& table_uuid_refs(int index) const;
  ::TSCE::UuidReferencesArchive_TableWithUuidRef* add_table_uuid_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableWithUuidRef >&
      table_uuid_refs() const;

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferencesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableRef > table_refs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableWithUuidRef > table_uuid_refs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaOwnerDependenciesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaOwnerDependenciesArchive) */ {
 public:
  inline FormulaOwnerDependenciesArchive() : FormulaOwnerDependenciesArchive(nullptr) {}
  ~FormulaOwnerDependenciesArchive() override;
  explicit constexpr FormulaOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaOwnerDependenciesArchive(const FormulaOwnerDependenciesArchive& from);
  FormulaOwnerDependenciesArchive(FormulaOwnerDependenciesArchive&& from) noexcept
    : FormulaOwnerDependenciesArchive() {
    *this = ::std::move(from);
  }

  inline FormulaOwnerDependenciesArchive& operator=(const FormulaOwnerDependenciesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaOwnerDependenciesArchive& operator=(FormulaOwnerDependenciesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaOwnerDependenciesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaOwnerDependenciesArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaOwnerDependenciesArchive*>(
               &_FormulaOwnerDependenciesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FormulaOwnerDependenciesArchive& a, FormulaOwnerDependenciesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaOwnerDependenciesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaOwnerDependenciesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaOwnerDependenciesArchive* New() const final {
    return CreateMaybeMessage<FormulaOwnerDependenciesArchive>(nullptr);
  }

  FormulaOwnerDependenciesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaOwnerDependenciesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaOwnerDependenciesArchive& from);
  void MergeFrom(const FormulaOwnerDependenciesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaOwnerDependenciesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaOwnerDependenciesArchive";
  }
  protected:
  explicit FormulaOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaOwnerUidFieldNumber = 1,
    kCellDependenciesFieldNumber = 4,
    kRangeDependenciesFieldNumber = 5,
    kVolatileDependenciesFieldNumber = 6,
    kSpanningColumnDependenciesFieldNumber = 7,
    kSpanningRowDependenciesFieldNumber = 8,
    kWholeOwnerDependenciesFieldNumber = 9,
    kCellErrorsFieldNumber = 10,
    kFormulaOwnerFieldNumber = 11,
    kBaseOwnerUidFieldNumber = 12,
    kTiledCellDependenciesFieldNumber = 13,
    kUuidReferencesFieldNumber = 14,
    kTiledRangeDependenciesFieldNumber = 15,
    kInternalFormulaOwnerIdFieldNumber = 2,
    kOwnerKindFieldNumber = 3,
  };
  // required .TSP.UUID formula_owner_uid = 1;
  bool has_formula_owner_uid() const;
  private:
  bool _internal_has_formula_owner_uid() const;
  public:
  void clear_formula_owner_uid();
  const ::TSP::UUID& formula_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_formula_owner_uid();
  ::TSP::UUID* mutable_formula_owner_uid();
  void set_allocated_formula_owner_uid(::TSP::UUID* formula_owner_uid);
  private:
  const ::TSP::UUID& _internal_formula_owner_uid() const;
  ::TSP::UUID* _internal_mutable_formula_owner_uid();
  public:
  void unsafe_arena_set_allocated_formula_owner_uid(
      ::TSP::UUID* formula_owner_uid);
  ::TSP::UUID* unsafe_arena_release_formula_owner_uid();

  // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
  bool has_cell_dependencies() const;
  private:
  bool _internal_has_cell_dependencies() const;
  public:
  void clear_cell_dependencies();
  const ::TSCE::CellDependenciesExpandedArchive& cell_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellDependenciesExpandedArchive* release_cell_dependencies();
  ::TSCE::CellDependenciesExpandedArchive* mutable_cell_dependencies();
  void set_allocated_cell_dependencies(::TSCE::CellDependenciesExpandedArchive* cell_dependencies);
  private:
  const ::TSCE::CellDependenciesExpandedArchive& _internal_cell_dependencies() const;
  ::TSCE::CellDependenciesExpandedArchive* _internal_mutable_cell_dependencies();
  public:
  void unsafe_arena_set_allocated_cell_dependencies(
      ::TSCE::CellDependenciesExpandedArchive* cell_dependencies);
  ::TSCE::CellDependenciesExpandedArchive* unsafe_arena_release_cell_dependencies();

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
  bool has_range_dependencies() const;
  private:
  bool _internal_has_range_dependencies() const;
  public:
  void clear_range_dependencies();
  const ::TSCE::RangeDependenciesArchive& range_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeDependenciesArchive* release_range_dependencies();
  ::TSCE::RangeDependenciesArchive* mutable_range_dependencies();
  void set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies);
  private:
  const ::TSCE::RangeDependenciesArchive& _internal_range_dependencies() const;
  ::TSCE::RangeDependenciesArchive* _internal_mutable_range_dependencies();
  public:
  void unsafe_arena_set_allocated_range_dependencies(
      ::TSCE::RangeDependenciesArchive* range_dependencies);
  ::TSCE::RangeDependenciesArchive* unsafe_arena_release_range_dependencies();

  // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
  bool has_volatile_dependencies() const;
  private:
  bool _internal_has_volatile_dependencies() const;
  public:
  void clear_volatile_dependencies();
  const ::TSCE::VolatileDependenciesExpandedArchive& volatile_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::VolatileDependenciesExpandedArchive* release_volatile_dependencies();
  ::TSCE::VolatileDependenciesExpandedArchive* mutable_volatile_dependencies();
  void set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesExpandedArchive* volatile_dependencies);
  private:
  const ::TSCE::VolatileDependenciesExpandedArchive& _internal_volatile_dependencies() const;
  ::TSCE::VolatileDependenciesExpandedArchive* _internal_mutable_volatile_dependencies();
  public:
  void unsafe_arena_set_allocated_volatile_dependencies(
      ::TSCE::VolatileDependenciesExpandedArchive* volatile_dependencies);
  ::TSCE::VolatileDependenciesExpandedArchive* unsafe_arena_release_volatile_dependencies();

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
  bool has_spanning_column_dependencies() const;
  private:
  bool _internal_has_spanning_column_dependencies() const;
  public:
  void clear_spanning_column_dependencies();
  const ::TSCE::SpanningDependenciesExpandedArchive& spanning_column_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::SpanningDependenciesExpandedArchive* release_spanning_column_dependencies();
  ::TSCE::SpanningDependenciesExpandedArchive* mutable_spanning_column_dependencies();
  void set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesExpandedArchive* spanning_column_dependencies);
  private:
  const ::TSCE::SpanningDependenciesExpandedArchive& _internal_spanning_column_dependencies() const;
  ::TSCE::SpanningDependenciesExpandedArchive* _internal_mutable_spanning_column_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_column_dependencies(
      ::TSCE::SpanningDependenciesExpandedArchive* spanning_column_dependencies);
  ::TSCE::SpanningDependenciesExpandedArchive* unsafe_arena_release_spanning_column_dependencies();

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
  bool has_spanning_row_dependencies() const;
  private:
  bool _internal_has_spanning_row_dependencies() const;
  public:
  void clear_spanning_row_dependencies();
  const ::TSCE::SpanningDependenciesExpandedArchive& spanning_row_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::SpanningDependenciesExpandedArchive* release_spanning_row_dependencies();
  ::TSCE::SpanningDependenciesExpandedArchive* mutable_spanning_row_dependencies();
  void set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesExpandedArchive* spanning_row_dependencies);
  private:
  const ::TSCE::SpanningDependenciesExpandedArchive& _internal_spanning_row_dependencies() const;
  ::TSCE::SpanningDependenciesExpandedArchive* _internal_mutable_spanning_row_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_row_dependencies(
      ::TSCE::SpanningDependenciesExpandedArchive* spanning_row_dependencies);
  ::TSCE::SpanningDependenciesExpandedArchive* unsafe_arena_release_spanning_row_dependencies();

  // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
  bool has_whole_owner_dependencies() const;
  private:
  bool _internal_has_whole_owner_dependencies() const;
  public:
  void clear_whole_owner_dependencies();
  const ::TSCE::WholeOwnerDependenciesExpandedArchive& whole_owner_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::WholeOwnerDependenciesExpandedArchive* release_whole_owner_dependencies();
  ::TSCE::WholeOwnerDependenciesExpandedArchive* mutable_whole_owner_dependencies();
  void set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesExpandedArchive* whole_owner_dependencies);
  private:
  const ::TSCE::WholeOwnerDependenciesExpandedArchive& _internal_whole_owner_dependencies() const;
  ::TSCE::WholeOwnerDependenciesExpandedArchive* _internal_mutable_whole_owner_dependencies();
  public:
  void unsafe_arena_set_allocated_whole_owner_dependencies(
      ::TSCE::WholeOwnerDependenciesExpandedArchive* whole_owner_dependencies);
  ::TSCE::WholeOwnerDependenciesExpandedArchive* unsafe_arena_release_whole_owner_dependencies();

  // optional .TSCE.CellErrorsArchive cell_errors = 10;
  bool has_cell_errors() const;
  private:
  bool _internal_has_cell_errors() const;
  public:
  void clear_cell_errors();
  const ::TSCE::CellErrorsArchive& cell_errors() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellErrorsArchive* release_cell_errors();
  ::TSCE::CellErrorsArchive* mutable_cell_errors();
  void set_allocated_cell_errors(::TSCE::CellErrorsArchive* cell_errors);
  private:
  const ::TSCE::CellErrorsArchive& _internal_cell_errors() const;
  ::TSCE::CellErrorsArchive* _internal_mutable_cell_errors();
  public:
  void unsafe_arena_set_allocated_cell_errors(
      ::TSCE::CellErrorsArchive* cell_errors);
  ::TSCE::CellErrorsArchive* unsafe_arena_release_cell_errors();

  // optional .TSP.Reference formula_owner = 11;
  bool has_formula_owner() const;
  private:
  bool _internal_has_formula_owner() const;
  public:
  void clear_formula_owner();
  const ::TSP::Reference& formula_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formula_owner();
  ::TSP::Reference* mutable_formula_owner();
  void set_allocated_formula_owner(::TSP::Reference* formula_owner);
  private:
  const ::TSP::Reference& _internal_formula_owner() const;
  ::TSP::Reference* _internal_mutable_formula_owner();
  public:
  void unsafe_arena_set_allocated_formula_owner(
      ::TSP::Reference* formula_owner);
  ::TSP::Reference* unsafe_arena_release_formula_owner();

  // optional .TSP.UUID base_owner_uid = 12;
  bool has_base_owner_uid() const;
  private:
  bool _internal_has_base_owner_uid() const;
  public:
  void clear_base_owner_uid();
  const ::TSP::UUID& base_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_base_owner_uid();
  ::TSP::UUID* mutable_base_owner_uid();
  void set_allocated_base_owner_uid(::TSP::UUID* base_owner_uid);
  private:
  const ::TSP::UUID& _internal_base_owner_uid() const;
  ::TSP::UUID* _internal_mutable_base_owner_uid();
  public:
  void unsafe_arena_set_allocated_base_owner_uid(
      ::TSP::UUID* base_owner_uid);
  ::TSP::UUID* unsafe_arena_release_base_owner_uid();

  // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
  bool has_tiled_cell_dependencies() const;
  private:
  bool _internal_has_tiled_cell_dependencies() const;
  public:
  void clear_tiled_cell_dependencies();
  const ::TSCE::CellDependenciesTiledArchive& tiled_cell_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellDependenciesTiledArchive* release_tiled_cell_dependencies();
  ::TSCE::CellDependenciesTiledArchive* mutable_tiled_cell_dependencies();
  void set_allocated_tiled_cell_dependencies(::TSCE::CellDependenciesTiledArchive* tiled_cell_dependencies);
  private:
  const ::TSCE::CellDependenciesTiledArchive& _internal_tiled_cell_dependencies() const;
  ::TSCE::CellDependenciesTiledArchive* _internal_mutable_tiled_cell_dependencies();
  public:
  void unsafe_arena_set_allocated_tiled_cell_dependencies(
      ::TSCE::CellDependenciesTiledArchive* tiled_cell_dependencies);
  ::TSCE::CellDependenciesTiledArchive* unsafe_arena_release_tiled_cell_dependencies();

  // optional .TSCE.UuidReferencesArchive uuid_references = 14;
  bool has_uuid_references() const;
  private:
  bool _internal_has_uuid_references() const;
  public:
  void clear_uuid_references();
  const ::TSCE::UuidReferencesArchive& uuid_references() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UuidReferencesArchive* release_uuid_references();
  ::TSCE::UuidReferencesArchive* mutable_uuid_references();
  void set_allocated_uuid_references(::TSCE::UuidReferencesArchive* uuid_references);
  private:
  const ::TSCE::UuidReferencesArchive& _internal_uuid_references() const;
  ::TSCE::UuidReferencesArchive* _internal_mutable_uuid_references();
  public:
  void unsafe_arena_set_allocated_uuid_references(
      ::TSCE::UuidReferencesArchive* uuid_references);
  ::TSCE::UuidReferencesArchive* unsafe_arena_release_uuid_references();

  // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
  bool has_tiled_range_dependencies() const;
  private:
  bool _internal_has_tiled_range_dependencies() const;
  public:
  void clear_tiled_range_dependencies();
  const ::TSCE::RangeDependenciesTiledArchive& tiled_range_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeDependenciesTiledArchive* release_tiled_range_dependencies();
  ::TSCE::RangeDependenciesTiledArchive* mutable_tiled_range_dependencies();
  void set_allocated_tiled_range_dependencies(::TSCE::RangeDependenciesTiledArchive* tiled_range_dependencies);
  private:
  const ::TSCE::RangeDependenciesTiledArchive& _internal_tiled_range_dependencies() const;
  ::TSCE::RangeDependenciesTiledArchive* _internal_mutable_tiled_range_dependencies();
  public:
  void unsafe_arena_set_allocated_tiled_range_dependencies(
      ::TSCE::RangeDependenciesTiledArchive* tiled_range_dependencies);
  ::TSCE::RangeDependenciesTiledArchive* unsafe_arena_release_tiled_range_dependencies();

  // required uint32 internal_formula_owner_id = 2;
  bool has_internal_formula_owner_id() const;
  private:
  bool _internal_has_internal_formula_owner_id() const;
  public:
  void clear_internal_formula_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_formula_owner_id() const;
  void set_internal_formula_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_formula_owner_id() const;
  void _internal_set_internal_formula_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_kind = 3;
  bool has_owner_kind() const;
  private:
  bool _internal_has_owner_kind() const;
  public:
  void clear_owner_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind() const;
  void set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_kind() const;
  void _internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaOwnerDependenciesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* formula_owner_uid_;
  ::TSCE::CellDependenciesExpandedArchive* cell_dependencies_;
  ::TSCE::RangeDependenciesArchive* range_dependencies_;
  ::TSCE::VolatileDependenciesExpandedArchive* volatile_dependencies_;
  ::TSCE::SpanningDependenciesExpandedArchive* spanning_column_dependencies_;
  ::TSCE::SpanningDependenciesExpandedArchive* spanning_row_dependencies_;
  ::TSCE::WholeOwnerDependenciesExpandedArchive* whole_owner_dependencies_;
  ::TSCE::CellErrorsArchive* cell_errors_;
  ::TSP::Reference* formula_owner_;
  ::TSP::UUID* base_owner_uid_;
  ::TSCE::CellDependenciesTiledArchive* tiled_cell_dependencies_;
  ::TSCE::UuidReferencesArchive* uuid_references_;
  ::TSCE::RangeDependenciesTiledArchive* tiled_range_dependencies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_formula_owner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaOwnerInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaOwnerInfoArchive) */ {
 public:
  inline FormulaOwnerInfoArchive() : FormulaOwnerInfoArchive(nullptr) {}
  ~FormulaOwnerInfoArchive() override;
  explicit constexpr FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from);
  FormulaOwnerInfoArchive(FormulaOwnerInfoArchive&& from) noexcept
    : FormulaOwnerInfoArchive() {
    *this = ::std::move(from);
  }

  inline FormulaOwnerInfoArchive& operator=(const FormulaOwnerInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaOwnerInfoArchive& operator=(FormulaOwnerInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaOwnerInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaOwnerInfoArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaOwnerInfoArchive*>(
               &_FormulaOwnerInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(FormulaOwnerInfoArchive& a, FormulaOwnerInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaOwnerInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaOwnerInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaOwnerInfoArchive* New() const final {
    return CreateMaybeMessage<FormulaOwnerInfoArchive>(nullptr);
  }

  FormulaOwnerInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaOwnerInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaOwnerInfoArchive& from);
  void MergeFrom(const FormulaOwnerInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaOwnerInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaOwnerInfoArchive";
  }
  protected:
  explicit FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaOwnerIdFieldNumber = 1,
    kCellDependenciesFieldNumber = 2,
    kRangeDependenciesFieldNumber = 3,
    kVolatileDependenciesFieldNumber = 4,
    kSpanningColumnDependenciesFieldNumber = 5,
    kSpanningRowDependenciesFieldNumber = 6,
    kFormulaOwnerFieldNumber = 7,
    kWholeOwnerDependenciesFieldNumber = 8,
    kCellErrorsFieldNumber = 9,
  };
  // required .TSP.CFUUIDArchive formula_owner_id = 1;
  bool has_formula_owner_id() const;
  private:
  bool _internal_has_formula_owner_id() const;
  public:
  void clear_formula_owner_id();
  const ::TSP::CFUUIDArchive& formula_owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_formula_owner_id();
  ::TSP::CFUUIDArchive* mutable_formula_owner_id();
  void set_allocated_formula_owner_id(::TSP::CFUUIDArchive* formula_owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_formula_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_formula_owner_id();
  public:
  void unsafe_arena_set_allocated_formula_owner_id(
      ::TSP::CFUUIDArchive* formula_owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_formula_owner_id();

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  bool has_cell_dependencies() const;
  private:
  bool _internal_has_cell_dependencies() const;
  public:
  void clear_cell_dependencies();
  const ::TSCE::CellDependenciesArchive& cell_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellDependenciesArchive* release_cell_dependencies();
  ::TSCE::CellDependenciesArchive* mutable_cell_dependencies();
  void set_allocated_cell_dependencies(::TSCE::CellDependenciesArchive* cell_dependencies);
  private:
  const ::TSCE::CellDependenciesArchive& _internal_cell_dependencies() const;
  ::TSCE::CellDependenciesArchive* _internal_mutable_cell_dependencies();
  public:
  void unsafe_arena_set_allocated_cell_dependencies(
      ::TSCE::CellDependenciesArchive* cell_dependencies);
  ::TSCE::CellDependenciesArchive* unsafe_arena_release_cell_dependencies();

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  bool has_range_dependencies() const;
  private:
  bool _internal_has_range_dependencies() const;
  public:
  void clear_range_dependencies();
  const ::TSCE::RangeDependenciesArchive& range_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeDependenciesArchive* release_range_dependencies();
  ::TSCE::RangeDependenciesArchive* mutable_range_dependencies();
  void set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies);
  private:
  const ::TSCE::RangeDependenciesArchive& _internal_range_dependencies() const;
  ::TSCE::RangeDependenciesArchive* _internal_mutable_range_dependencies();
  public:
  void unsafe_arena_set_allocated_range_dependencies(
      ::TSCE::RangeDependenciesArchive* range_dependencies);
  ::TSCE::RangeDependenciesArchive* unsafe_arena_release_range_dependencies();

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  bool has_volatile_dependencies() const;
  private:
  bool _internal_has_volatile_dependencies() const;
  public:
  void clear_volatile_dependencies();
  const ::TSCE::VolatileDependenciesArchive& volatile_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::VolatileDependenciesArchive* release_volatile_dependencies();
  ::TSCE::VolatileDependenciesArchive* mutable_volatile_dependencies();
  void set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesArchive* volatile_dependencies);
  private:
  const ::TSCE::VolatileDependenciesArchive& _internal_volatile_dependencies() const;
  ::TSCE::VolatileDependenciesArchive* _internal_mutable_volatile_dependencies();
  public:
  void unsafe_arena_set_allocated_volatile_dependencies(
      ::TSCE::VolatileDependenciesArchive* volatile_dependencies);
  ::TSCE::VolatileDependenciesArchive* unsafe_arena_release_volatile_dependencies();

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  bool has_spanning_column_dependencies() const;
  private:
  bool _internal_has_spanning_column_dependencies() const;
  public:
  void clear_spanning_column_dependencies();
  const ::TSCE::SpanningDependenciesArchive& spanning_column_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::SpanningDependenciesArchive* release_spanning_column_dependencies();
  ::TSCE::SpanningDependenciesArchive* mutable_spanning_column_dependencies();
  void set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesArchive* spanning_column_dependencies);
  private:
  const ::TSCE::SpanningDependenciesArchive& _internal_spanning_column_dependencies() const;
  ::TSCE::SpanningDependenciesArchive* _internal_mutable_spanning_column_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_column_dependencies(
      ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies);
  ::TSCE::SpanningDependenciesArchive* unsafe_arena_release_spanning_column_dependencies();

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  bool has_spanning_row_dependencies() const;
  private:
  bool _internal_has_spanning_row_dependencies() const;
  public:
  void clear_spanning_row_dependencies();
  const ::TSCE::SpanningDependenciesArchive& spanning_row_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::SpanningDependenciesArchive* release_spanning_row_dependencies();
  ::TSCE::SpanningDependenciesArchive* mutable_spanning_row_dependencies();
  void set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesArchive* spanning_row_dependencies);
  private:
  const ::TSCE::SpanningDependenciesArchive& _internal_spanning_row_dependencies() const;
  ::TSCE::SpanningDependenciesArchive* _internal_mutable_spanning_row_dependencies();
  public:
  void unsafe_arena_set_allocated_spanning_row_dependencies(
      ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies);
  ::TSCE::SpanningDependenciesArchive* unsafe_arena_release_spanning_row_dependencies();

  // optional .TSP.Reference formula_owner = 7;
  bool has_formula_owner() const;
  private:
  bool _internal_has_formula_owner() const;
  public:
  void clear_formula_owner();
  const ::TSP::Reference& formula_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formula_owner();
  ::TSP::Reference* mutable_formula_owner();
  void set_allocated_formula_owner(::TSP::Reference* formula_owner);
  private:
  const ::TSP::Reference& _internal_formula_owner() const;
  ::TSP::Reference* _internal_mutable_formula_owner();
  public:
  void unsafe_arena_set_allocated_formula_owner(
      ::TSP::Reference* formula_owner);
  ::TSP::Reference* unsafe_arena_release_formula_owner();

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  bool has_whole_owner_dependencies() const;
  private:
  bool _internal_has_whole_owner_dependencies() const;
  public:
  void clear_whole_owner_dependencies();
  const ::TSCE::WholeOwnerDependenciesArchive& whole_owner_dependencies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::WholeOwnerDependenciesArchive* release_whole_owner_dependencies();
  ::TSCE::WholeOwnerDependenciesArchive* mutable_whole_owner_dependencies();
  void set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies);
  private:
  const ::TSCE::WholeOwnerDependenciesArchive& _internal_whole_owner_dependencies() const;
  ::TSCE::WholeOwnerDependenciesArchive* _internal_mutable_whole_owner_dependencies();
  public:
  void unsafe_arena_set_allocated_whole_owner_dependencies(
      ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies);
  ::TSCE::WholeOwnerDependenciesArchive* unsafe_arena_release_whole_owner_dependencies();

  // optional .TSCE.CellErrorsArchive cell_errors = 9;
  bool has_cell_errors() const;
  private:
  bool _internal_has_cell_errors() const;
  public:
  void clear_cell_errors();
  const ::TSCE::CellErrorsArchive& cell_errors() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellErrorsArchive* release_cell_errors();
  ::TSCE::CellErrorsArchive* mutable_cell_errors();
  void set_allocated_cell_errors(::TSCE::CellErrorsArchive* cell_errors);
  private:
  const ::TSCE::CellErrorsArchive& _internal_cell_errors() const;
  ::TSCE::CellErrorsArchive* _internal_mutable_cell_errors();
  public:
  void unsafe_arena_set_allocated_cell_errors(
      ::TSCE::CellErrorsArchive* cell_errors);
  ::TSCE::CellErrorsArchive* unsafe_arena_release_cell_errors();

  // @@protoc_insertion_point(class_scope:TSCE.FormulaOwnerInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* formula_owner_id_;
  ::TSCE::CellDependenciesArchive* cell_dependencies_;
  ::TSCE::RangeDependenciesArchive* range_dependencies_;
  ::TSCE::VolatileDependenciesArchive* volatile_dependencies_;
  ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies_;
  ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies_;
  ::TSP::Reference* formula_owner_;
  ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies_;
  ::TSCE::CellErrorsArchive* cell_errors_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class SubFormulaOwnerIDArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.SubFormulaOwnerIDArchive) */ {
 public:
  inline SubFormulaOwnerIDArchive() : SubFormulaOwnerIDArchive(nullptr) {}
  ~SubFormulaOwnerIDArchive() override;
  explicit constexpr SubFormulaOwnerIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubFormulaOwnerIDArchive(const SubFormulaOwnerIDArchive& from);
  SubFormulaOwnerIDArchive(SubFormulaOwnerIDArchive&& from) noexcept
    : SubFormulaOwnerIDArchive() {
    *this = ::std::move(from);
  }

  inline SubFormulaOwnerIDArchive& operator=(const SubFormulaOwnerIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubFormulaOwnerIDArchive& operator=(SubFormulaOwnerIDArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubFormulaOwnerIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubFormulaOwnerIDArchive* internal_default_instance() {
    return reinterpret_cast<const SubFormulaOwnerIDArchive*>(
               &_SubFormulaOwnerIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SubFormulaOwnerIDArchive& a, SubFormulaOwnerIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SubFormulaOwnerIDArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubFormulaOwnerIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubFormulaOwnerIDArchive* New() const final {
    return CreateMaybeMessage<SubFormulaOwnerIDArchive>(nullptr);
  }

  SubFormulaOwnerIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubFormulaOwnerIDArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubFormulaOwnerIDArchive& from);
  void MergeFrom(const SubFormulaOwnerIDArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubFormulaOwnerIDArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.SubFormulaOwnerIDArchive";
  }
  protected:
  explicit SubFormulaOwnerIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseOwnerUidFieldNumber = 1,
    kOwnerKindFieldNumber = 2,
  };
  // required .TSP.UUID base_owner_uid = 1;
  bool has_base_owner_uid() const;
  private:
  bool _internal_has_base_owner_uid() const;
  public:
  void clear_base_owner_uid();
  const ::TSP::UUID& base_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_base_owner_uid();
  ::TSP::UUID* mutable_base_owner_uid();
  void set_allocated_base_owner_uid(::TSP::UUID* base_owner_uid);
  private:
  const ::TSP::UUID& _internal_base_owner_uid() const;
  ::TSP::UUID* _internal_mutable_base_owner_uid();
  public:
  void unsafe_arena_set_allocated_base_owner_uid(
      ::TSP::UUID* base_owner_uid);
  ::TSP::UUID* unsafe_arena_release_base_owner_uid();

  // optional uint32 owner_kind = 2;
  bool has_owner_kind() const;
  private:
  bool _internal_has_owner_kind() const;
  public:
  void clear_owner_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind() const;
  void set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_kind() const;
  void _internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.SubFormulaOwnerIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* base_owner_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerIDMapArchive_OwnerIDMapArchiveEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry) */ {
 public:
  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry() : OwnerIDMapArchive_OwnerIDMapArchiveEntry(nullptr) {}
  ~OwnerIDMapArchive_OwnerIDMapArchiveEntry() override;
  explicit constexpr OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from);
  OwnerIDMapArchive_OwnerIDMapArchiveEntry(OwnerIDMapArchive_OwnerIDMapArchiveEntry&& from) noexcept
    : OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
    *this = ::std::move(from);
  }

  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry& operator=(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry& operator=(OwnerIDMapArchive_OwnerIDMapArchiveEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerIDMapArchive_OwnerIDMapArchiveEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerIDMapArchive_OwnerIDMapArchiveEntry* internal_default_instance() {
    return reinterpret_cast<const OwnerIDMapArchive_OwnerIDMapArchiveEntry*>(
               &_OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(OwnerIDMapArchive_OwnerIDMapArchiveEntry& a, OwnerIDMapArchive_OwnerIDMapArchiveEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnerIDMapArchive_OwnerIDMapArchiveEntry* New() const final {
    return CreateMaybeMessage<OwnerIDMapArchive_OwnerIDMapArchiveEntry>(nullptr);
  }

  OwnerIDMapArchive_OwnerIDMapArchiveEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnerIDMapArchive_OwnerIDMapArchiveEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from);
  void MergeFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry";
  }
  protected:
  explicit OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 2,
    kSubFormulaOwnerUidFieldNumber = 3,
    kInternalOwnerIdFieldNumber = 1,
  };
  // required .TSP.CFUUIDArchive owner_id = 2;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSP::CFUUIDArchive& owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_owner_id();
  ::TSP::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSP::CFUUIDArchive* owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_owner_id();

  // optional .TSCE.SubFormulaOwnerIDArchive sub_formula_owner_uid = 3;
  bool has_sub_formula_owner_uid() const;
  private:
  bool _internal_has_sub_formula_owner_uid() const;
  public:
  void clear_sub_formula_owner_uid();
  const ::TSCE::SubFormulaOwnerIDArchive& sub_formula_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::SubFormulaOwnerIDArchive* release_sub_formula_owner_uid();
  ::TSCE::SubFormulaOwnerIDArchive* mutable_sub_formula_owner_uid();
  void set_allocated_sub_formula_owner_uid(::TSCE::SubFormulaOwnerIDArchive* sub_formula_owner_uid);
  private:
  const ::TSCE::SubFormulaOwnerIDArchive& _internal_sub_formula_owner_uid() const;
  ::TSCE::SubFormulaOwnerIDArchive* _internal_mutable_sub_formula_owner_uid();
  public:
  void unsafe_arena_set_allocated_sub_formula_owner_uid(
      ::TSCE::SubFormulaOwnerIDArchive* sub_formula_owner_uid);
  ::TSCE::SubFormulaOwnerIDArchive* unsafe_arena_release_sub_formula_owner_uid();

  // required uint32 internal_owner_id = 1;
  bool has_internal_owner_id() const;
  private:
  bool _internal_has_internal_owner_id() const;
  public:
  void clear_internal_owner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id() const;
  void set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_owner_id() const;
  void _internal_set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* owner_id_;
  ::TSCE::SubFormulaOwnerIDArchive* sub_formula_owner_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_owner_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerIDMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerIDMapArchive) */ {
 public:
  inline OwnerIDMapArchive() : OwnerIDMapArchive(nullptr) {}
  ~OwnerIDMapArchive() override;
  explicit constexpr OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerIDMapArchive(const OwnerIDMapArchive& from);
  OwnerIDMapArchive(OwnerIDMapArchive&& from) noexcept
    : OwnerIDMapArchive() {
    *this = ::std::move(from);
  }

  inline OwnerIDMapArchive& operator=(const OwnerIDMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerIDMapArchive& operator=(OwnerIDMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerIDMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerIDMapArchive* internal_default_instance() {
    return reinterpret_cast<const OwnerIDMapArchive*>(
               &_OwnerIDMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(OwnerIDMapArchive& a, OwnerIDMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerIDMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerIDMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnerIDMapArchive* New() const final {
    return CreateMaybeMessage<OwnerIDMapArchive>(nullptr);
  }

  OwnerIDMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnerIDMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnerIDMapArchive& from);
  void MergeFrom(const OwnerIDMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerIDMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerIDMapArchive";
  }
  protected:
  explicit OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OwnerIDMapArchive_OwnerIDMapArchiveEntry OwnerIDMapArchiveEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMapEntryFieldNumber = 1,
    kUnregisteredInternalOwnerIdFieldNumber = 2,
  };
  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  int map_entry_size() const;
  private:
  int _internal_map_entry_size() const;
  public:
  void clear_map_entry();
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* mutable_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >*
      mutable_map_entry();
  private:
  const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& _internal_map_entry(int index) const;
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* _internal_add_map_entry();
  public:
  const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& map_entry(int index) const;
  ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* add_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >&
      map_entry() const;

  // repeated uint32 unregistered_internal_owner_id = 2;
  int unregistered_internal_owner_id_size() const;
  private:
  int _internal_unregistered_internal_owner_id_size() const;
  public:
  void clear_unregistered_internal_owner_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unregistered_internal_owner_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_unregistered_internal_owner_id() const;
  void _internal_add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_unregistered_internal_owner_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 unregistered_internal_owner_id(int index) const;
  void set_unregistered_internal_owner_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      unregistered_internal_owner_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_unregistered_internal_owner_id();

  // @@protoc_insertion_point(class_scope:TSCE.OwnerIDMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry > map_entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > unregistered_internal_owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UidLookupListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UidLookupListArchive) */ {
 public:
  inline UidLookupListArchive() : UidLookupListArchive(nullptr) {}
  ~UidLookupListArchive() override;
  explicit constexpr UidLookupListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UidLookupListArchive(const UidLookupListArchive& from);
  UidLookupListArchive(UidLookupListArchive&& from) noexcept
    : UidLookupListArchive() {
    *this = ::std::move(from);
  }

  inline UidLookupListArchive& operator=(const UidLookupListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidLookupListArchive& operator=(UidLookupListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UidLookupListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UidLookupListArchive* internal_default_instance() {
    return reinterpret_cast<const UidLookupListArchive*>(
               &_UidLookupListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(UidLookupListArchive& a, UidLookupListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UidLookupListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UidLookupListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidLookupListArchive* New() const final {
    return CreateMaybeMessage<UidLookupListArchive>(nullptr);
  }

  UidLookupListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidLookupListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UidLookupListArchive& from);
  void MergeFrom(const UidLookupListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UidLookupListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UidLookupListArchive";
  }
  protected:
  explicit UidLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
  };
  // repeated .TSP.UUID uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  ::TSP::UUID* mutable_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uuids();
  private:
  const ::TSP::UUID& _internal_uuids(int index) const;
  ::TSP::UUID* _internal_add_uuids();
  public:
  const ::TSP::UUID& uuids(int index) const;
  ::TSP::UUID* add_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uuids() const;

  // @@protoc_insertion_point(class_scope:TSCE.UidLookupListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uuids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class DependencyTrackerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.DependencyTrackerArchive) */ {
 public:
  inline DependencyTrackerArchive() : DependencyTrackerArchive(nullptr) {}
  ~DependencyTrackerArchive() override;
  explicit constexpr DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DependencyTrackerArchive(const DependencyTrackerArchive& from);
  DependencyTrackerArchive(DependencyTrackerArchive&& from) noexcept
    : DependencyTrackerArchive() {
    *this = ::std::move(from);
  }

  inline DependencyTrackerArchive& operator=(const DependencyTrackerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DependencyTrackerArchive& operator=(DependencyTrackerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DependencyTrackerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DependencyTrackerArchive* internal_default_instance() {
    return reinterpret_cast<const DependencyTrackerArchive*>(
               &_DependencyTrackerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(DependencyTrackerArchive& a, DependencyTrackerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DependencyTrackerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DependencyTrackerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DependencyTrackerArchive* New() const final {
    return CreateMaybeMessage<DependencyTrackerArchive>(nullptr);
  }

  DependencyTrackerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DependencyTrackerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DependencyTrackerArchive& from);
  void MergeFrom(const DependencyTrackerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DependencyTrackerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.DependencyTrackerArchive";
  }
  protected:
  explicit DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaOwnerInfoFieldNumber = 1,
    kDirtyLeafFieldNumber = 2,
    kInternalDirtyLeafFieldNumber = 4,
    kFormulaOwnerDependenciesFieldNumber = 6,
    kOwnerIdMapFieldNumber = 3,
    kNumberOfFormulasFieldNumber = 5,
  };
  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  int formula_owner_info_size() const;
  private:
  int _internal_formula_owner_info_size() const;
  public:
  void clear_formula_owner_info();
  ::TSCE::FormulaOwnerInfoArchive* mutable_formula_owner_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >*
      mutable_formula_owner_info();
  private:
  const ::TSCE::FormulaOwnerInfoArchive& _internal_formula_owner_info(int index) const;
  ::TSCE::FormulaOwnerInfoArchive* _internal_add_formula_owner_info();
  public:
  const ::TSCE::FormulaOwnerInfoArchive& formula_owner_info(int index) const;
  ::TSCE::FormulaOwnerInfoArchive* add_formula_owner_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >&
      formula_owner_info() const;

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int dirty_leaf_size() const;
  private:
  int _internal_dirty_leaf_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_dirty_leaf();
  PROTOBUF_DEPRECATED ::TSCE::CellReferenceArchive* mutable_dirty_leaf(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
      mutable_dirty_leaf();
  private:
  const ::TSCE::CellReferenceArchive& _internal_dirty_leaf(int index) const;
  ::TSCE::CellReferenceArchive* _internal_add_dirty_leaf();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::CellReferenceArchive& dirty_leaf(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::CellReferenceArchive* add_dirty_leaf();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
      dirty_leaf() const;

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int internal_dirty_leaf_size() const;
  private:
  int _internal_internal_dirty_leaf_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_internal_dirty_leaf();
  PROTOBUF_DEPRECATED ::TSCE::InternalCellReferenceArchive* mutable_internal_dirty_leaf(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_internal_dirty_leaf();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_internal_dirty_leaf(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_internal_dirty_leaf();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::InternalCellReferenceArchive& internal_dirty_leaf(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::InternalCellReferenceArchive* add_internal_dirty_leaf();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      internal_dirty_leaf() const;

  // repeated .TSP.Reference formula_owner_dependencies = 6;
  int formula_owner_dependencies_size() const;
  private:
  int _internal_formula_owner_dependencies_size() const;
  public:
  void clear_formula_owner_dependencies();
  ::TSP::Reference* mutable_formula_owner_dependencies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_formula_owner_dependencies();
  private:
  const ::TSP::Reference& _internal_formula_owner_dependencies(int index) const;
  ::TSP::Reference* _internal_add_formula_owner_dependencies();
  public:
  const ::TSP::Reference& formula_owner_dependencies(int index) const;
  ::TSP::Reference* add_formula_owner_dependencies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      formula_owner_dependencies() const;

  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  bool has_owner_id_map() const;
  private:
  bool _internal_has_owner_id_map() const;
  public:
  void clear_owner_id_map();
  const ::TSCE::OwnerIDMapArchive& owner_id_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::OwnerIDMapArchive* release_owner_id_map();
  ::TSCE::OwnerIDMapArchive* mutable_owner_id_map();
  void set_allocated_owner_id_map(::TSCE::OwnerIDMapArchive* owner_id_map);
  private:
  const ::TSCE::OwnerIDMapArchive& _internal_owner_id_map() const;
  ::TSCE::OwnerIDMapArchive* _internal_mutable_owner_id_map();
  public:
  void unsafe_arena_set_allocated_owner_id_map(
      ::TSCE::OwnerIDMapArchive* owner_id_map);
  ::TSCE::OwnerIDMapArchive* unsafe_arena_release_owner_id_map();

  // optional uint64 number_of_formulas = 5;
  bool has_number_of_formulas() const;
  private:
  bool _internal_has_number_of_formulas() const;
  public:
  void clear_number_of_formulas();
  ::PROTOBUF_NAMESPACE_ID::uint64 number_of_formulas() const;
  void set_number_of_formulas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number_of_formulas() const;
  void _internal_set_number_of_formulas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.DependencyTrackerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive > formula_owner_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive > dirty_leaf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > internal_dirty_leaf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > formula_owner_dependencies_;
  ::TSCE::OwnerIDMapArchive* owner_id_map_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_of_formulas_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoteDataSpecifierArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RemoteDataSpecifierArchive) */ {
 public:
  inline RemoteDataSpecifierArchive() : RemoteDataSpecifierArchive(nullptr) {}
  ~RemoteDataSpecifierArchive() override;
  explicit constexpr RemoteDataSpecifierArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteDataSpecifierArchive(const RemoteDataSpecifierArchive& from);
  RemoteDataSpecifierArchive(RemoteDataSpecifierArchive&& from) noexcept
    : RemoteDataSpecifierArchive() {
    *this = ::std::move(from);
  }

  inline RemoteDataSpecifierArchive& operator=(const RemoteDataSpecifierArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDataSpecifierArchive& operator=(RemoteDataSpecifierArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteDataSpecifierArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteDataSpecifierArchive* internal_default_instance() {
    return reinterpret_cast<const RemoteDataSpecifierArchive*>(
               &_RemoteDataSpecifierArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(RemoteDataSpecifierArchive& a, RemoteDataSpecifierArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDataSpecifierArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDataSpecifierArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDataSpecifierArchive* New() const final {
    return CreateMaybeMessage<RemoteDataSpecifierArchive>(nullptr);
  }

  RemoteDataSpecifierArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDataSpecifierArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDataSpecifierArchive& from);
  void MergeFrom(const RemoteDataSpecifierArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDataSpecifierArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RemoteDataSpecifierArchive";
  }
  protected:
  explicit RemoteDataSpecifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kFunctionIndexFieldNumber = 1,
    kAttributeFieldNumber = 3,
    kDateFieldNumber = 4,
  };
  // required string symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // required uint32 function_index = 1;
  bool has_function_index() const;
  private:
  bool _internal_has_function_index() const;
  public:
  void clear_function_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_index() const;
  void set_function_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_index() const;
  void _internal_set_function_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 attribute = 3;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute() const;
  void set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute() const;
  void _internal_set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  double date() const;
  void set_date(double value);
  private:
  double _internal_date() const;
  void _internal_set_date(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RemoteDataSpecifierArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_;
  double date_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoteDataValueMapArchive_RemoteDataMapEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry) */ {
 public:
  inline RemoteDataValueMapArchive_RemoteDataMapEntry() : RemoteDataValueMapArchive_RemoteDataMapEntry(nullptr) {}
  ~RemoteDataValueMapArchive_RemoteDataMapEntry() override;
  explicit constexpr RemoteDataValueMapArchive_RemoteDataMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteDataValueMapArchive_RemoteDataMapEntry(const RemoteDataValueMapArchive_RemoteDataMapEntry& from);
  RemoteDataValueMapArchive_RemoteDataMapEntry(RemoteDataValueMapArchive_RemoteDataMapEntry&& from) noexcept
    : RemoteDataValueMapArchive_RemoteDataMapEntry() {
    *this = ::std::move(from);
  }

  inline RemoteDataValueMapArchive_RemoteDataMapEntry& operator=(const RemoteDataValueMapArchive_RemoteDataMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDataValueMapArchive_RemoteDataMapEntry& operator=(RemoteDataValueMapArchive_RemoteDataMapEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteDataValueMapArchive_RemoteDataMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteDataValueMapArchive_RemoteDataMapEntry* internal_default_instance() {
    return reinterpret_cast<const RemoteDataValueMapArchive_RemoteDataMapEntry*>(
               &_RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RemoteDataValueMapArchive_RemoteDataMapEntry& a, RemoteDataValueMapArchive_RemoteDataMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDataValueMapArchive_RemoteDataMapEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDataValueMapArchive_RemoteDataMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDataValueMapArchive_RemoteDataMapEntry* New() const final {
    return CreateMaybeMessage<RemoteDataValueMapArchive_RemoteDataMapEntry>(nullptr);
  }

  RemoteDataValueMapArchive_RemoteDataMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDataValueMapArchive_RemoteDataMapEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDataValueMapArchive_RemoteDataMapEntry& from);
  void MergeFrom(const RemoteDataValueMapArchive_RemoteDataMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDataValueMapArchive_RemoteDataMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry";
  }
  protected:
  explicit RemoteDataValueMapArchive_RemoteDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecifierFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
  bool has_specifier() const;
  private:
  bool _internal_has_specifier() const;
  public:
  void clear_specifier();
  const ::TSCE::RemoteDataSpecifierArchive& specifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RemoteDataSpecifierArchive* release_specifier();
  ::TSCE::RemoteDataSpecifierArchive* mutable_specifier();
  void set_allocated_specifier(::TSCE::RemoteDataSpecifierArchive* specifier);
  private:
  const ::TSCE::RemoteDataSpecifierArchive& _internal_specifier() const;
  ::TSCE::RemoteDataSpecifierArchive* _internal_mutable_specifier();
  public:
  void unsafe_arena_set_allocated_specifier(
      ::TSCE::RemoteDataSpecifierArchive* specifier);
  ::TSCE::RemoteDataSpecifierArchive* unsafe_arena_release_specifier();

  // required .TSCE.CellValueArchive value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSCE::CellValueArchive& value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_value();
  ::TSCE::CellValueArchive* mutable_value();
  void set_allocated_value(::TSCE::CellValueArchive* value);
  private:
  const ::TSCE::CellValueArchive& _internal_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSCE::CellValueArchive* value);
  ::TSCE::CellValueArchive* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RemoteDataSpecifierArchive* specifier_;
  ::TSCE::CellValueArchive* value_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoteDataValueMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RemoteDataValueMapArchive) */ {
 public:
  inline RemoteDataValueMapArchive() : RemoteDataValueMapArchive(nullptr) {}
  ~RemoteDataValueMapArchive() override;
  explicit constexpr RemoteDataValueMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteDataValueMapArchive(const RemoteDataValueMapArchive& from);
  RemoteDataValueMapArchive(RemoteDataValueMapArchive&& from) noexcept
    : RemoteDataValueMapArchive() {
    *this = ::std::move(from);
  }

  inline RemoteDataValueMapArchive& operator=(const RemoteDataValueMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDataValueMapArchive& operator=(RemoteDataValueMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteDataValueMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteDataValueMapArchive* internal_default_instance() {
    return reinterpret_cast<const RemoteDataValueMapArchive*>(
               &_RemoteDataValueMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RemoteDataValueMapArchive& a, RemoteDataValueMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDataValueMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDataValueMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDataValueMapArchive* New() const final {
    return CreateMaybeMessage<RemoteDataValueMapArchive>(nullptr);
  }

  RemoteDataValueMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDataValueMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDataValueMapArchive& from);
  void MergeFrom(const RemoteDataValueMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDataValueMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RemoteDataValueMapArchive";
  }
  protected:
  explicit RemoteDataValueMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteDataValueMapArchive_RemoteDataMapEntry RemoteDataMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >*
      mutable_entry();
  private:
  const ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry& _internal_entry(int index) const;
  ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* _internal_add_entry();
  public:
  const ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry& entry(int index) const;
  ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >&
      entry() const;

  // @@protoc_insertion_point(class_scope:TSCE.RemoteDataValueMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry > entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class StockArchive_AttributeEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.StockArchive.AttributeEntry) */ {
 public:
  inline StockArchive_AttributeEntry() : StockArchive_AttributeEntry(nullptr) {}
  ~StockArchive_AttributeEntry() override;
  explicit constexpr StockArchive_AttributeEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockArchive_AttributeEntry(const StockArchive_AttributeEntry& from);
  StockArchive_AttributeEntry(StockArchive_AttributeEntry&& from) noexcept
    : StockArchive_AttributeEntry() {
    *this = ::std::move(from);
  }

  inline StockArchive_AttributeEntry& operator=(const StockArchive_AttributeEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockArchive_AttributeEntry& operator=(StockArchive_AttributeEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockArchive_AttributeEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockArchive_AttributeEntry* internal_default_instance() {
    return reinterpret_cast<const StockArchive_AttributeEntry*>(
               &_StockArchive_AttributeEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(StockArchive_AttributeEntry& a, StockArchive_AttributeEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StockArchive_AttributeEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockArchive_AttributeEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StockArchive_AttributeEntry* New() const final {
    return CreateMaybeMessage<StockArchive_AttributeEntry>(nullptr);
  }

  StockArchive_AttributeEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StockArchive_AttributeEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StockArchive_AttributeEntry& from);
  void MergeFrom(const StockArchive_AttributeEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockArchive_AttributeEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.StockArchive.AttributeEntry";
  }
  protected:
  explicit StockArchive_AttributeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kAttributeFieldNumber = 1,
  };
  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 attribute = 1;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute() const;
  void set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attribute() const;
  void _internal_set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.StockArchive.AttributeEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attribute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class StockArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.StockArchive) */ {
 public:
  inline StockArchive() : StockArchive(nullptr) {}
  ~StockArchive() override;
  explicit constexpr StockArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockArchive(const StockArchive& from);
  StockArchive(StockArchive&& from) noexcept
    : StockArchive() {
    *this = ::std::move(from);
  }

  inline StockArchive& operator=(const StockArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockArchive& operator=(StockArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockArchive* internal_default_instance() {
    return reinterpret_cast<const StockArchive*>(
               &_StockArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(StockArchive& a, StockArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StockArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StockArchive* New() const final {
    return CreateMaybeMessage<StockArchive>(nullptr);
  }

  StockArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StockArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StockArchive& from);
  void MergeFrom(const StockArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.StockArchive";
  }
  protected:
  explicit StockArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StockArchive_AttributeEntry AttributeEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kSymbolFieldNumber = 1,
    kDateFieldNumber = 2,
  };
  // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::TSCE::StockArchive_AttributeEntry* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive_AttributeEntry >*
      mutable_attribute();
  private:
  const ::TSCE::StockArchive_AttributeEntry& _internal_attribute(int index) const;
  ::TSCE::StockArchive_AttributeEntry* _internal_add_attribute();
  public:
  const ::TSCE::StockArchive_AttributeEntry& attribute(int index) const;
  ::TSCE::StockArchive_AttributeEntry* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive_AttributeEntry >&
      attribute() const;

  // required string symbol = 1;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // optional double date = 2;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  double date() const;
  void set_date(double value);
  private:
  double _internal_date() const;
  void _internal_set_date(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.StockArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive_AttributeEntry > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  double date_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoteDataStoreArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RemoteDataStoreArchive) */ {
 public:
  inline RemoteDataStoreArchive() : RemoteDataStoreArchive(nullptr) {}
  ~RemoteDataStoreArchive() override;
  explicit constexpr RemoteDataStoreArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteDataStoreArchive(const RemoteDataStoreArchive& from);
  RemoteDataStoreArchive(RemoteDataStoreArchive&& from) noexcept
    : RemoteDataStoreArchive() {
    *this = ::std::move(from);
  }

  inline RemoteDataStoreArchive& operator=(const RemoteDataStoreArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDataStoreArchive& operator=(RemoteDataStoreArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteDataStoreArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteDataStoreArchive* internal_default_instance() {
    return reinterpret_cast<const RemoteDataStoreArchive*>(
               &_RemoteDataStoreArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(RemoteDataStoreArchive& a, RemoteDataStoreArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDataStoreArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDataStoreArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDataStoreArchive* New() const final {
    return CreateMaybeMessage<RemoteDataStoreArchive>(nullptr);
  }

  RemoteDataStoreArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDataStoreArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDataStoreArchive& from);
  void MergeFrom(const RemoteDataStoreArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDataStoreArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RemoteDataStoreArchive";
  }
  protected:
  explicit RemoteDataStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStocksFieldNumber = 2,
    kValueMapFieldNumber = 1,
  };
  // repeated .TSCE.StockArchive stocks = 2;
  int stocks_size() const;
  private:
  int _internal_stocks_size() const;
  public:
  void clear_stocks();
  ::TSCE::StockArchive* mutable_stocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >*
      mutable_stocks();
  private:
  const ::TSCE::StockArchive& _internal_stocks(int index) const;
  ::TSCE::StockArchive* _internal_add_stocks();
  public:
  const ::TSCE::StockArchive& stocks(int index) const;
  ::TSCE::StockArchive* add_stocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >&
      stocks() const;

  // required .TSCE.RemoteDataValueMapArchive value_map = 1;
  bool has_value_map() const;
  private:
  bool _internal_has_value_map() const;
  public:
  void clear_value_map();
  const ::TSCE::RemoteDataValueMapArchive& value_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RemoteDataValueMapArchive* release_value_map();
  ::TSCE::RemoteDataValueMapArchive* mutable_value_map();
  void set_allocated_value_map(::TSCE::RemoteDataValueMapArchive* value_map);
  private:
  const ::TSCE::RemoteDataValueMapArchive& _internal_value_map() const;
  ::TSCE::RemoteDataValueMapArchive* _internal_mutable_value_map();
  public:
  void unsafe_arena_set_allocated_value_map(
      ::TSCE::RemoteDataValueMapArchive* value_map);
  ::TSCE::RemoteDataValueMapArchive* unsafe_arena_release_value_map();

  // @@protoc_insertion_point(class_scope:TSCE.RemoteDataStoreArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive > stocks_;
  ::TSCE::RemoteDataValueMapArchive* value_map_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NameTrackedReferencePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NameTrackedReferencePair) */ {
 public:
  inline NameTrackedReferencePair() : NameTrackedReferencePair(nullptr) {}
  ~NameTrackedReferencePair() override;
  explicit constexpr NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NameTrackedReferencePair(const NameTrackedReferencePair& from);
  NameTrackedReferencePair(NameTrackedReferencePair&& from) noexcept
    : NameTrackedReferencePair() {
    *this = ::std::move(from);
  }

  inline NameTrackedReferencePair& operator=(const NameTrackedReferencePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameTrackedReferencePair& operator=(NameTrackedReferencePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameTrackedReferencePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameTrackedReferencePair* internal_default_instance() {
    return reinterpret_cast<const NameTrackedReferencePair*>(
               &_NameTrackedReferencePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(NameTrackedReferencePair& a, NameTrackedReferencePair& b) {
    a.Swap(&b);
  }
  inline void Swap(NameTrackedReferencePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameTrackedReferencePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameTrackedReferencePair* New() const final {
    return CreateMaybeMessage<NameTrackedReferencePair>(nullptr);
  }

  NameTrackedReferencePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameTrackedReferencePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameTrackedReferencePair& from);
  void MergeFrom(const NameTrackedReferencePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameTrackedReferencePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NameTrackedReferencePair";
  }
  protected:
  explicit NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTrackedReferenceFieldNumber = 2,
    kTrackedReferenceIdFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Reference tracked_reference = 2;
  bool has_tracked_reference() const;
  private:
  bool _internal_has_tracked_reference() const;
  public:
  void clear_tracked_reference();
  const ::TSP::Reference& tracked_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tracked_reference();
  ::TSP::Reference* mutable_tracked_reference();
  void set_allocated_tracked_reference(::TSP::Reference* tracked_reference);
  private:
  const ::TSP::Reference& _internal_tracked_reference() const;
  ::TSP::Reference* _internal_mutable_tracked_reference();
  public:
  void unsafe_arena_set_allocated_tracked_reference(
      ::TSP::Reference* tracked_reference);
  ::TSP::Reference* unsafe_arena_release_tracked_reference();

  // optional uint32 tracked_reference_id = 3;
  bool has_tracked_reference_id() const;
  private:
  bool _internal_has_tracked_reference_id() const;
  public:
  void clear_tracked_reference_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tracked_reference_id() const;
  void set_tracked_reference_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tracked_reference_id() const;
  void _internal_set_tracked_reference_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NameTrackedReferencePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSP::Reference* tracked_reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tracked_reference_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NamesByTrackedReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NamesByTrackedReferenceArchive) */ {
 public:
  inline NamesByTrackedReferenceArchive() : NamesByTrackedReferenceArchive(nullptr) {}
  ~NamesByTrackedReferenceArchive() override;
  explicit constexpr NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from);
  NamesByTrackedReferenceArchive(NamesByTrackedReferenceArchive&& from) noexcept
    : NamesByTrackedReferenceArchive() {
    *this = ::std::move(from);
  }

  inline NamesByTrackedReferenceArchive& operator=(const NamesByTrackedReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamesByTrackedReferenceArchive& operator=(NamesByTrackedReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamesByTrackedReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamesByTrackedReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const NamesByTrackedReferenceArchive*>(
               &_NamesByTrackedReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(NamesByTrackedReferenceArchive& a, NamesByTrackedReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NamesByTrackedReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamesByTrackedReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamesByTrackedReferenceArchive* New() const final {
    return CreateMaybeMessage<NamesByTrackedReferenceArchive>(nullptr);
  }

  NamesByTrackedReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamesByTrackedReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamesByTrackedReferenceArchive& from);
  void MergeFrom(const NamesByTrackedReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamesByTrackedReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NamesByTrackedReferenceArchive";
  }
  protected:
  explicit NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTrackedReferencePairFieldNumber = 2,
    kTableIdFieldNumber = 1,
  };
  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  int name_tracked_reference_pair_size() const;
  private:
  int _internal_name_tracked_reference_pair_size() const;
  public:
  void clear_name_tracked_reference_pair();
  ::TSCE::NameTrackedReferencePair* mutable_name_tracked_reference_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >*
      mutable_name_tracked_reference_pair();
  private:
  const ::TSCE::NameTrackedReferencePair& _internal_name_tracked_reference_pair(int index) const;
  ::TSCE::NameTrackedReferencePair* _internal_add_name_tracked_reference_pair();
  public:
  const ::TSCE::NameTrackedReferencePair& name_tracked_reference_pair(int index) const;
  ::TSCE::NameTrackedReferencePair* add_name_tracked_reference_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >&
      name_tracked_reference_pair() const;

  // required .TSP.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TSCE.NamesByTrackedReferenceArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair > name_tracked_reference_pair_;
  ::TSP::CFUUIDArchive* table_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NamedReferenceManagerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NamedReferenceManagerArchive) */ {
 public:
  inline NamedReferenceManagerArchive() : NamedReferenceManagerArchive(nullptr) {}
  ~NamedReferenceManagerArchive() override;
  explicit constexpr NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from);
  NamedReferenceManagerArchive(NamedReferenceManagerArchive&& from) noexcept
    : NamedReferenceManagerArchive() {
    *this = ::std::move(from);
  }

  inline NamedReferenceManagerArchive& operator=(const NamedReferenceManagerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedReferenceManagerArchive& operator=(NamedReferenceManagerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedReferenceManagerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedReferenceManagerArchive* internal_default_instance() {
    return reinterpret_cast<const NamedReferenceManagerArchive*>(
               &_NamedReferenceManagerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(NamedReferenceManagerArchive& a, NamedReferenceManagerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedReferenceManagerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedReferenceManagerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedReferenceManagerArchive* New() const final {
    return CreateMaybeMessage<NamedReferenceManagerArchive>(nullptr);
  }

  NamedReferenceManagerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedReferenceManagerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedReferenceManagerArchive& from);
  void MergeFrom(const NamedReferenceManagerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedReferenceManagerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NamedReferenceManagerArchive";
  }
  protected:
  explicit NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesByTrackedReferenceByTableFieldNumber = 2,
    kReferenceTrackerFieldNumber = 1,
  };
  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int names_by_tracked_reference_by_table_size() const;
  private:
  int _internal_names_by_tracked_reference_by_table_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_names_by_tracked_reference_by_table();
  PROTOBUF_DEPRECATED ::TSCE::NamesByTrackedReferenceArchive* mutable_names_by_tracked_reference_by_table(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >*
      mutable_names_by_tracked_reference_by_table();
  private:
  const ::TSCE::NamesByTrackedReferenceArchive& _internal_names_by_tracked_reference_by_table(int index) const;
  ::TSCE::NamesByTrackedReferenceArchive* _internal_add_names_by_tracked_reference_by_table();
  public:
  PROTOBUF_DEPRECATED const ::TSCE::NamesByTrackedReferenceArchive& names_by_tracked_reference_by_table(int index) const;
  PROTOBUF_DEPRECATED ::TSCE::NamesByTrackedReferenceArchive* add_names_by_tracked_reference_by_table();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >&
      names_by_tracked_reference_by_table() const;

  // required .TSP.Reference reference_tracker = 1;
  bool has_reference_tracker() const;
  private:
  bool _internal_has_reference_tracker() const;
  public:
  void clear_reference_tracker();
  const ::TSP::Reference& reference_tracker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_reference_tracker();
  ::TSP::Reference* mutable_reference_tracker();
  void set_allocated_reference_tracker(::TSP::Reference* reference_tracker);
  private:
  const ::TSP::Reference& _internal_reference_tracker() const;
  ::TSP::Reference* _internal_mutable_reference_tracker();
  public:
  void unsafe_arena_set_allocated_reference_tracker(
      ::TSP::Reference* reference_tracker);
  ::TSP::Reference* unsafe_arena_release_reference_tracker();

  // @@protoc_insertion_point(class_scope:TSCE.NamedReferenceManagerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive > names_by_tracked_reference_by_table_;
  ::TSP::Reference* reference_tracker_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidSetStoreArchive_UuidSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidSetStoreArchive.UuidSet) */ {
 public:
  inline UuidSetStoreArchive_UuidSet() : UuidSetStoreArchive_UuidSet(nullptr) {}
  ~UuidSetStoreArchive_UuidSet() override;
  explicit constexpr UuidSetStoreArchive_UuidSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidSetStoreArchive_UuidSet(const UuidSetStoreArchive_UuidSet& from);
  UuidSetStoreArchive_UuidSet(UuidSetStoreArchive_UuidSet&& from) noexcept
    : UuidSetStoreArchive_UuidSet() {
    *this = ::std::move(from);
  }

  inline UuidSetStoreArchive_UuidSet& operator=(const UuidSetStoreArchive_UuidSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidSetStoreArchive_UuidSet& operator=(UuidSetStoreArchive_UuidSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidSetStoreArchive_UuidSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidSetStoreArchive_UuidSet* internal_default_instance() {
    return reinterpret_cast<const UuidSetStoreArchive_UuidSet*>(
               &_UuidSetStoreArchive_UuidSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(UuidSetStoreArchive_UuidSet& a, UuidSetStoreArchive_UuidSet& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidSetStoreArchive_UuidSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidSetStoreArchive_UuidSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidSetStoreArchive_UuidSet* New() const final {
    return CreateMaybeMessage<UuidSetStoreArchive_UuidSet>(nullptr);
  }

  UuidSetStoreArchive_UuidSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidSetStoreArchive_UuidSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidSetStoreArchive_UuidSet& from);
  void MergeFrom(const UuidSetStoreArchive_UuidSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidSetStoreArchive_UuidSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidSetStoreArchive.UuidSet";
  }
  protected:
  explicit UuidSetStoreArchive_UuidSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIndexOfSetFieldNumber = 2,
  };
  // repeated .TSP.UUID uuid = 1;
  int uuid_size() const;
  private:
  int _internal_uuid_size() const;
  public:
  void clear_uuid();
  ::TSP::UUID* mutable_uuid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uuid();
  private:
  const ::TSP::UUID& _internal_uuid(int index) const;
  ::TSP::UUID* _internal_add_uuid();
  public:
  const ::TSP::UUID& uuid(int index) const;
  ::TSP::UUID* add_uuid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uuid() const;

  // required uint32 index_of_set = 2;
  bool has_index_of_set() const;
  private:
  bool _internal_has_index_of_set() const;
  public:
  void clear_index_of_set();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_of_set() const;
  void set_index_of_set(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_of_set() const;
  void _internal_set_index_of_set(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.UuidSetStoreArchive.UuidSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_of_set_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidSetStoreArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidSetStoreArchive) */ {
 public:
  inline UuidSetStoreArchive() : UuidSetStoreArchive(nullptr) {}
  ~UuidSetStoreArchive() override;
  explicit constexpr UuidSetStoreArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidSetStoreArchive(const UuidSetStoreArchive& from);
  UuidSetStoreArchive(UuidSetStoreArchive&& from) noexcept
    : UuidSetStoreArchive() {
    *this = ::std::move(from);
  }

  inline UuidSetStoreArchive& operator=(const UuidSetStoreArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidSetStoreArchive& operator=(UuidSetStoreArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidSetStoreArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidSetStoreArchive* internal_default_instance() {
    return reinterpret_cast<const UuidSetStoreArchive*>(
               &_UuidSetStoreArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(UuidSetStoreArchive& a, UuidSetStoreArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidSetStoreArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidSetStoreArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidSetStoreArchive* New() const final {
    return CreateMaybeMessage<UuidSetStoreArchive>(nullptr);
  }

  UuidSetStoreArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidSetStoreArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidSetStoreArchive& from);
  void MergeFrom(const UuidSetStoreArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidSetStoreArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidSetStoreArchive";
  }
  protected:
  explicit UuidSetStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UuidSetStoreArchive_UuidSet UuidSet;

  // accessors -------------------------------------------------------

  enum : int {
    kUuidSetFieldNumber = 1,
  };
  // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
  int uuidset_size() const;
  private:
  int _internal_uuidset_size() const;
  public:
  void clear_uuidset();
  ::TSCE::UuidSetStoreArchive_UuidSet* mutable_uuidset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidSetStoreArchive_UuidSet >*
      mutable_uuidset();
  private:
  const ::TSCE::UuidSetStoreArchive_UuidSet& _internal_uuidset(int index) const;
  ::TSCE::UuidSetStoreArchive_UuidSet* _internal_add_uuidset();
  public:
  const ::TSCE::UuidSetStoreArchive_UuidSet& uuidset(int index) const;
  ::TSCE::UuidSetStoreArchive_UuidSet* add_uuidset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidSetStoreArchive_UuidSet >&
      uuidset() const;

  // @@protoc_insertion_point(class_scope:TSCE.UuidSetStoreArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidSetStoreArchive_UuidSet > uuidset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferenceMapArchive_CellRefsForUuid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferenceMapArchive.CellRefsForUuid) */ {
 public:
  inline UuidReferenceMapArchive_CellRefsForUuid() : UuidReferenceMapArchive_CellRefsForUuid(nullptr) {}
  ~UuidReferenceMapArchive_CellRefsForUuid() override;
  explicit constexpr UuidReferenceMapArchive_CellRefsForUuid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferenceMapArchive_CellRefsForUuid(const UuidReferenceMapArchive_CellRefsForUuid& from);
  UuidReferenceMapArchive_CellRefsForUuid(UuidReferenceMapArchive_CellRefsForUuid&& from) noexcept
    : UuidReferenceMapArchive_CellRefsForUuid() {
    *this = ::std::move(from);
  }

  inline UuidReferenceMapArchive_CellRefsForUuid& operator=(const UuidReferenceMapArchive_CellRefsForUuid& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferenceMapArchive_CellRefsForUuid& operator=(UuidReferenceMapArchive_CellRefsForUuid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferenceMapArchive_CellRefsForUuid& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferenceMapArchive_CellRefsForUuid* internal_default_instance() {
    return reinterpret_cast<const UuidReferenceMapArchive_CellRefsForUuid*>(
               &_UuidReferenceMapArchive_CellRefsForUuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(UuidReferenceMapArchive_CellRefsForUuid& a, UuidReferenceMapArchive_CellRefsForUuid& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferenceMapArchive_CellRefsForUuid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferenceMapArchive_CellRefsForUuid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferenceMapArchive_CellRefsForUuid* New() const final {
    return CreateMaybeMessage<UuidReferenceMapArchive_CellRefsForUuid>(nullptr);
  }

  UuidReferenceMapArchive_CellRefsForUuid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferenceMapArchive_CellRefsForUuid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferenceMapArchive_CellRefsForUuid& from);
  void MergeFrom(const UuidReferenceMapArchive_CellRefsForUuid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferenceMapArchive_CellRefsForUuid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferenceMapArchive.CellRefsForUuid";
  }
  protected:
  explicit UuidReferenceMapArchive_CellRefsForUuid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRefFieldNumber = 2,
    kUuidFieldNumber = 1,
    kCellRefsFieldNumber = 3,
  };
  // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
  int cell_ref_size() const;
  private:
  int _internal_cell_ref_size() const;
  public:
  void clear_cell_ref();
  ::TSCE::InternalCellReferenceArchive* mutable_cell_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
      mutable_cell_ref();
  private:
  const ::TSCE::InternalCellReferenceArchive& _internal_cell_ref(int index) const;
  ::TSCE::InternalCellReferenceArchive* _internal_add_cell_ref();
  public:
  const ::TSCE::InternalCellReferenceArchive& cell_ref(int index) const;
  ::TSCE::InternalCellReferenceArchive* add_cell_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
      cell_ref() const;

  // required .TSP.UUID uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  bool has_cell_refs() const;
  private:
  bool _internal_has_cell_refs() const;
  public:
  void clear_cell_refs();
  const ::TSCE::InternalCellRefSetArchive& cell_refs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_cell_refs();
  ::TSCE::InternalCellRefSetArchive* mutable_cell_refs();
  void set_allocated_cell_refs(::TSCE::InternalCellRefSetArchive* cell_refs);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_cell_refs() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_cell_refs();
  public:
  void unsafe_arena_set_allocated_cell_refs(
      ::TSCE::InternalCellRefSetArchive* cell_refs);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_cell_refs();

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive > cell_ref_;
  ::TSP::UUID* uuid_;
  ::TSCE::InternalCellRefSetArchive* cell_refs_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class UuidReferenceMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.UuidReferenceMapArchive) */ {
 public:
  inline UuidReferenceMapArchive() : UuidReferenceMapArchive(nullptr) {}
  ~UuidReferenceMapArchive() override;
  explicit constexpr UuidReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidReferenceMapArchive(const UuidReferenceMapArchive& from);
  UuidReferenceMapArchive(UuidReferenceMapArchive&& from) noexcept
    : UuidReferenceMapArchive() {
    *this = ::std::move(from);
  }

  inline UuidReferenceMapArchive& operator=(const UuidReferenceMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidReferenceMapArchive& operator=(UuidReferenceMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidReferenceMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidReferenceMapArchive* internal_default_instance() {
    return reinterpret_cast<const UuidReferenceMapArchive*>(
               &_UuidReferenceMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(UuidReferenceMapArchive& a, UuidReferenceMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidReferenceMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidReferenceMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UuidReferenceMapArchive* New() const final {
    return CreateMaybeMessage<UuidReferenceMapArchive>(nullptr);
  }

  UuidReferenceMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UuidReferenceMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UuidReferenceMapArchive& from);
  void MergeFrom(const UuidReferenceMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidReferenceMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.UuidReferenceMapArchive";
  }
  protected:
  explicit UuidReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UuidReferenceMapArchive_CellRefsForUuid CellRefsForUuid;

  // accessors -------------------------------------------------------

  enum : int {
    kCellRefsForUuidFieldNumber = 1,
  };
  // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
  int cell_refs_for_uuid_size() const;
  private:
  int _internal_cell_refs_for_uuid_size() const;
  public:
  void clear_cell_refs_for_uuid();
  ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* mutable_cell_refs_for_uuid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >*
      mutable_cell_refs_for_uuid();
  private:
  const ::TSCE::UuidReferenceMapArchive_CellRefsForUuid& _internal_cell_refs_for_uuid(int index) const;
  ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* _internal_add_cell_refs_for_uuid();
  public:
  const ::TSCE::UuidReferenceMapArchive_CellRefsForUuid& cell_refs_for_uuid(int index) const;
  ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* add_cell_refs_for_uuid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >&
      cell_refs_for_uuid() const;

  // @@protoc_insertion_point(class_scope:TSCE.UuidReferenceMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid > cell_refs_for_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupByNodeMapArchive_CellRefsForGroupNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode) */ {
 public:
  inline GroupByNodeMapArchive_CellRefsForGroupNode() : GroupByNodeMapArchive_CellRefsForGroupNode(nullptr) {}
  ~GroupByNodeMapArchive_CellRefsForGroupNode() override;
  explicit constexpr GroupByNodeMapArchive_CellRefsForGroupNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByNodeMapArchive_CellRefsForGroupNode(const GroupByNodeMapArchive_CellRefsForGroupNode& from);
  GroupByNodeMapArchive_CellRefsForGroupNode(GroupByNodeMapArchive_CellRefsForGroupNode&& from) noexcept
    : GroupByNodeMapArchive_CellRefsForGroupNode() {
    *this = ::std::move(from);
  }

  inline GroupByNodeMapArchive_CellRefsForGroupNode& operator=(const GroupByNodeMapArchive_CellRefsForGroupNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByNodeMapArchive_CellRefsForGroupNode& operator=(GroupByNodeMapArchive_CellRefsForGroupNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByNodeMapArchive_CellRefsForGroupNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByNodeMapArchive_CellRefsForGroupNode* internal_default_instance() {
    return reinterpret_cast<const GroupByNodeMapArchive_CellRefsForGroupNode*>(
               &_GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GroupByNodeMapArchive_CellRefsForGroupNode& a, GroupByNodeMapArchive_CellRefsForGroupNode& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByNodeMapArchive_CellRefsForGroupNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByNodeMapArchive_CellRefsForGroupNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupByNodeMapArchive_CellRefsForGroupNode* New() const final {
    return CreateMaybeMessage<GroupByNodeMapArchive_CellRefsForGroupNode>(nullptr);
  }

  GroupByNodeMapArchive_CellRefsForGroupNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupByNodeMapArchive_CellRefsForGroupNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupByNodeMapArchive_CellRefsForGroupNode& from);
  void MergeFrom(const GroupByNodeMapArchive_CellRefsForGroupNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByNodeMapArchive_CellRefsForGroupNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.GroupByNodeMapArchive.CellRefsForGroupNode";
  }
  protected:
  explicit GroupByNodeMapArchive_CellRefsForGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNodeUidFieldNumber = 1,
    kCellRefsFieldNumber = 3,
  };
  // required .TSP.UUID group_node_uid = 1;
  bool has_group_node_uid() const;
  private:
  bool _internal_has_group_node_uid() const;
  public:
  void clear_group_node_uid();
  const ::TSP::UUID& group_node_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_node_uid();
  ::TSP::UUID* mutable_group_node_uid();
  void set_allocated_group_node_uid(::TSP::UUID* group_node_uid);
  private:
  const ::TSP::UUID& _internal_group_node_uid() const;
  ::TSP::UUID* _internal_mutable_group_node_uid();
  public:
  void unsafe_arena_set_allocated_group_node_uid(
      ::TSP::UUID* group_node_uid);
  ::TSP::UUID* unsafe_arena_release_group_node_uid();

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  bool has_cell_refs() const;
  private:
  bool _internal_has_cell_refs() const;
  public:
  void clear_cell_refs();
  const ::TSCE::InternalCellRefSetArchive& cell_refs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::InternalCellRefSetArchive* release_cell_refs();
  ::TSCE::InternalCellRefSetArchive* mutable_cell_refs();
  void set_allocated_cell_refs(::TSCE::InternalCellRefSetArchive* cell_refs);
  private:
  const ::TSCE::InternalCellRefSetArchive& _internal_cell_refs() const;
  ::TSCE::InternalCellRefSetArchive* _internal_mutable_cell_refs();
  public:
  void unsafe_arena_set_allocated_cell_refs(
      ::TSCE::InternalCellRefSetArchive* cell_refs);
  ::TSCE::InternalCellRefSetArchive* unsafe_arena_release_cell_refs();

  // @@protoc_insertion_point(class_scope:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* group_node_uid_;
  ::TSCE::InternalCellRefSetArchive* cell_refs_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupByNodeMapArchive_GroupNodesForGroupBy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy) */ {
 public:
  inline GroupByNodeMapArchive_GroupNodesForGroupBy() : GroupByNodeMapArchive_GroupNodesForGroupBy(nullptr) {}
  ~GroupByNodeMapArchive_GroupNodesForGroupBy() override;
  explicit constexpr GroupByNodeMapArchive_GroupNodesForGroupBy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByNodeMapArchive_GroupNodesForGroupBy(const GroupByNodeMapArchive_GroupNodesForGroupBy& from);
  GroupByNodeMapArchive_GroupNodesForGroupBy(GroupByNodeMapArchive_GroupNodesForGroupBy&& from) noexcept
    : GroupByNodeMapArchive_GroupNodesForGroupBy() {
    *this = ::std::move(from);
  }

  inline GroupByNodeMapArchive_GroupNodesForGroupBy& operator=(const GroupByNodeMapArchive_GroupNodesForGroupBy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByNodeMapArchive_GroupNodesForGroupBy& operator=(GroupByNodeMapArchive_GroupNodesForGroupBy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByNodeMapArchive_GroupNodesForGroupBy& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByNodeMapArchive_GroupNodesForGroupBy* internal_default_instance() {
    return reinterpret_cast<const GroupByNodeMapArchive_GroupNodesForGroupBy*>(
               &_GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GroupByNodeMapArchive_GroupNodesForGroupBy& a, GroupByNodeMapArchive_GroupNodesForGroupBy& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByNodeMapArchive_GroupNodesForGroupBy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByNodeMapArchive_GroupNodesForGroupBy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupByNodeMapArchive_GroupNodesForGroupBy* New() const final {
    return CreateMaybeMessage<GroupByNodeMapArchive_GroupNodesForGroupBy>(nullptr);
  }

  GroupByNodeMapArchive_GroupNodesForGroupBy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupByNodeMapArchive_GroupNodesForGroupBy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupByNodeMapArchive_GroupNodesForGroupBy& from);
  void MergeFrom(const GroupByNodeMapArchive_GroupNodesForGroupBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByNodeMapArchive_GroupNodesForGroupBy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy";
  }
  protected:
  explicit GroupByNodeMapArchive_GroupNodesForGroupBy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefsForGroupNodeFieldNumber = 2,
    kGroupByUidFieldNumber = 1,
  };
  // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
  int refs_for_group_node_size() const;
  private:
  int _internal_refs_for_group_node_size() const;
  public:
  void clear_refs_for_group_node();
  ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* mutable_refs_for_group_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >*
      mutable_refs_for_group_node();
  private:
  const ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode& _internal_refs_for_group_node(int index) const;
  ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* _internal_add_refs_for_group_node();
  public:
  const ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode& refs_for_group_node(int index) const;
  ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* add_refs_for_group_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >&
      refs_for_group_node() const;

  // required .TSP.UUID group_by_uid = 1;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // @@protoc_insertion_point(class_scope:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode > refs_for_group_node_;
  ::TSP::UUID* group_by_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupByNodeMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.GroupByNodeMapArchive) */ {
 public:
  inline GroupByNodeMapArchive() : GroupByNodeMapArchive(nullptr) {}
  ~GroupByNodeMapArchive() override;
  explicit constexpr GroupByNodeMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByNodeMapArchive(const GroupByNodeMapArchive& from);
  GroupByNodeMapArchive(GroupByNodeMapArchive&& from) noexcept
    : GroupByNodeMapArchive() {
    *this = ::std::move(from);
  }

  inline GroupByNodeMapArchive& operator=(const GroupByNodeMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByNodeMapArchive& operator=(GroupByNodeMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByNodeMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByNodeMapArchive* internal_default_instance() {
    return reinterpret_cast<const GroupByNodeMapArchive*>(
               &_GroupByNodeMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GroupByNodeMapArchive& a, GroupByNodeMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByNodeMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByNodeMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupByNodeMapArchive* New() const final {
    return CreateMaybeMessage<GroupByNodeMapArchive>(nullptr);
  }

  GroupByNodeMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupByNodeMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupByNodeMapArchive& from);
  void MergeFrom(const GroupByNodeMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByNodeMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.GroupByNodeMapArchive";
  }
  protected:
  explicit GroupByNodeMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupByNodeMapArchive_CellRefsForGroupNode CellRefsForGroupNode;
  typedef GroupByNodeMapArchive_GroupNodesForGroupBy GroupNodesForGroupBy;

  // accessors -------------------------------------------------------

  enum : int {
    kRefsForGroupByFieldNumber = 1,
  };
  // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
  int refs_for_group_by_size() const;
  private:
  int _internal_refs_for_group_by_size() const;
  public:
  void clear_refs_for_group_by();
  ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* mutable_refs_for_group_by(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >*
      mutable_refs_for_group_by();
  private:
  const ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy& _internal_refs_for_group_by(int index) const;
  ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* _internal_add_refs_for_group_by();
  public:
  const ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy& refs_for_group_by(int index) const;
  ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* add_refs_for_group_by();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >&
      refs_for_group_by() const;

  // @@protoc_insertion_point(class_scope:TSCE.GroupByNodeMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy > refs_for_group_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CalculationEngineArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CalculationEngineArchive) */ {
 public:
  inline CalculationEngineArchive() : CalculationEngineArchive(nullptr) {}
  ~CalculationEngineArchive() override;
  explicit constexpr CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculationEngineArchive(const CalculationEngineArchive& from);
  CalculationEngineArchive(CalculationEngineArchive&& from) noexcept
    : CalculationEngineArchive() {
    *this = ::std::move(from);
  }

  inline CalculationEngineArchive& operator=(const CalculationEngineArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculationEngineArchive& operator=(CalculationEngineArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculationEngineArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculationEngineArchive* internal_default_instance() {
    return reinterpret_cast<const CalculationEngineArchive*>(
               &_CalculationEngineArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CalculationEngineArchive& a, CalculationEngineArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculationEngineArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculationEngineArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculationEngineArchive* New() const final {
    return CreateMaybeMessage<CalculationEngineArchive>(nullptr);
  }

  CalculationEngineArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculationEngineArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculationEngineArchive& from);
  void MergeFrom(const CalculationEngineArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculationEngineArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CalculationEngineArchive";
  }
  protected:
  explicit CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalculationEngineArchive_ExcelImportDateMode ExcelImportDateMode;
  static constexpr ExcelImportDateMode DATE_MODE_1900 =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900;
  static constexpr ExcelImportDateMode DATE_MODE_1900_LEGACY =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1900_LEGACY;
  static constexpr ExcelImportDateMode DATE_MODE_1904_LEGACY =
    CalculationEngineArchive_ExcelImportDateMode_DATE_MODE_1904_LEGACY;
  static inline bool ExcelImportDateMode_IsValid(int value) {
    return CalculationEngineArchive_ExcelImportDateMode_IsValid(value);
  }
  static constexpr ExcelImportDateMode ExcelImportDateMode_MIN =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MIN;
  static constexpr ExcelImportDateMode ExcelImportDateMode_MAX =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_MAX;
  static constexpr int ExcelImportDateMode_ARRAYSIZE =
    CalculationEngineArchive_ExcelImportDateMode_ExcelImportDateMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExcelImportDateMode_descriptor() {
    return CalculationEngineArchive_ExcelImportDateMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ExcelImportDateMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExcelImportDateMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExcelImportDateMode_Name.");
    return CalculationEngineArchive_ExcelImportDateMode_Name(enum_t_value);
  }
  static inline bool ExcelImportDateMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExcelImportDateMode* value) {
    return CalculationEngineArchive_ExcelImportDateMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTrackingNamesLegacyNrmFieldNumber = 17,
    kEndTrackingNamesLegacyNrmFieldNumber = 18,
    kSavedLocaleIdentifierFor42FieldNumber = 5,
    kDocumentTimezoneFieldNumber = 10,
    kSavedLocaleIdentifierFieldNumber = 16,
    kDependencyTrackerFieldNumber = 2,
    kNamedReferenceManagerFieldNumber = 3,
    kUuidReferenceMapFieldNumber = 7,
    kTableUidHistoryFieldNumber = 11,
    kRemoteDataStoreFieldNumber = 12,
    kGroupNodeMapFieldNumber = 13,
    kHeaderNameManagerFieldNumber = 14,
    kRefsToDirtyFieldNumber = 15,
    kDocumentRandomSeedFieldNumber = 6,
    kDocumentTimestampFieldNumber = 9,
    kBaseDate1904FieldNumber = 1,
    kExcelImportDateModeFieldNumber = 4,
  };
  // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
  int begin_tracking_names_legacy_nrm_size() const;
  private:
  int _internal_begin_tracking_names_legacy_nrm_size() const;
  public:
  void clear_begin_tracking_names_legacy_nrm();
  ::TSP::UUID* mutable_begin_tracking_names_legacy_nrm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_begin_tracking_names_legacy_nrm();
  private:
  const ::TSP::UUID& _internal_begin_tracking_names_legacy_nrm(int index) const;
  ::TSP::UUID* _internal_add_begin_tracking_names_legacy_nrm();
  public:
  const ::TSP::UUID& begin_tracking_names_legacy_nrm(int index) const;
  ::TSP::UUID* add_begin_tracking_names_legacy_nrm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      begin_tracking_names_legacy_nrm() const;

  // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
  int end_tracking_names_legacy_nrm_size() const;
  private:
  int _internal_end_tracking_names_legacy_nrm_size() const;
  public:
  void clear_end_tracking_names_legacy_nrm();
  ::TSP::UUID* mutable_end_tracking_names_legacy_nrm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_end_tracking_names_legacy_nrm();
  private:
  const ::TSP::UUID& _internal_end_tracking_names_legacy_nrm(int index) const;
  ::TSP::UUID* _internal_add_end_tracking_names_legacy_nrm();
  public:
  const ::TSP::UUID& end_tracking_names_legacy_nrm(int index) const;
  ::TSP::UUID* add_end_tracking_names_legacy_nrm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      end_tracking_names_legacy_nrm() const;

  // optional string saved_locale_identifier_for_4_2 = 5;
  bool has_saved_locale_identifier_for_4_2() const;
  private:
  bool _internal_has_saved_locale_identifier_for_4_2() const;
  public:
  void clear_saved_locale_identifier_for_4_2();
  const std::string& saved_locale_identifier_for_4_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saved_locale_identifier_for_4_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saved_locale_identifier_for_4_2();
  std::string* release_saved_locale_identifier_for_4_2();
  void set_allocated_saved_locale_identifier_for_4_2(std::string* saved_locale_identifier_for_4_2);
  private:
  const std::string& _internal_saved_locale_identifier_for_4_2() const;
  void _internal_set_saved_locale_identifier_for_4_2(const std::string& value);
  std::string* _internal_mutable_saved_locale_identifier_for_4_2();
  public:

  // optional string document_timezone = 10;
  bool has_document_timezone() const;
  private:
  bool _internal_has_document_timezone() const;
  public:
  void clear_document_timezone();
  const std::string& document_timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_timezone();
  std::string* release_document_timezone();
  void set_allocated_document_timezone(std::string* document_timezone);
  private:
  const std::string& _internal_document_timezone() const;
  void _internal_set_document_timezone(const std::string& value);
  std::string* _internal_mutable_document_timezone();
  public:

  // optional string saved_locale_identifier = 16;
  bool has_saved_locale_identifier() const;
  private:
  bool _internal_has_saved_locale_identifier() const;
  public:
  void clear_saved_locale_identifier();
  const std::string& saved_locale_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saved_locale_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saved_locale_identifier();
  std::string* release_saved_locale_identifier();
  void set_allocated_saved_locale_identifier(std::string* saved_locale_identifier);
  private:
  const std::string& _internal_saved_locale_identifier() const;
  void _internal_set_saved_locale_identifier(const std::string& value);
  std::string* _internal_mutable_saved_locale_identifier();
  public:

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  bool has_dependency_tracker() const;
  private:
  bool _internal_has_dependency_tracker() const;
  public:
  void clear_dependency_tracker();
  const ::TSCE::DependencyTrackerArchive& dependency_tracker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::DependencyTrackerArchive* release_dependency_tracker();
  ::TSCE::DependencyTrackerArchive* mutable_dependency_tracker();
  void set_allocated_dependency_tracker(::TSCE::DependencyTrackerArchive* dependency_tracker);
  private:
  const ::TSCE::DependencyTrackerArchive& _internal_dependency_tracker() const;
  ::TSCE::DependencyTrackerArchive* _internal_mutable_dependency_tracker();
  public:
  void unsafe_arena_set_allocated_dependency_tracker(
      ::TSCE::DependencyTrackerArchive* dependency_tracker);
  ::TSCE::DependencyTrackerArchive* unsafe_arena_release_dependency_tracker();

  // optional .TSP.Reference named_reference_manager = 3;
  bool has_named_reference_manager() const;
  private:
  bool _internal_has_named_reference_manager() const;
  public:
  void clear_named_reference_manager();
  const ::TSP::Reference& named_reference_manager() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_named_reference_manager();
  ::TSP::Reference* mutable_named_reference_manager();
  void set_allocated_named_reference_manager(::TSP::Reference* named_reference_manager);
  private:
  const ::TSP::Reference& _internal_named_reference_manager() const;
  ::TSP::Reference* _internal_mutable_named_reference_manager();
  public:
  void unsafe_arena_set_allocated_named_reference_manager(
      ::TSP::Reference* named_reference_manager);
  ::TSP::Reference* unsafe_arena_release_named_reference_manager();

  // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
  bool has_uuid_reference_map() const;
  private:
  bool _internal_has_uuid_reference_map() const;
  public:
  void clear_uuid_reference_map();
  const ::TSCE::UuidReferenceMapArchive& uuid_reference_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UuidReferenceMapArchive* release_uuid_reference_map();
  ::TSCE::UuidReferenceMapArchive* mutable_uuid_reference_map();
  void set_allocated_uuid_reference_map(::TSCE::UuidReferenceMapArchive* uuid_reference_map);
  private:
  const ::TSCE::UuidReferenceMapArchive& _internal_uuid_reference_map() const;
  ::TSCE::UuidReferenceMapArchive* _internal_mutable_uuid_reference_map();
  public:
  void unsafe_arena_set_allocated_uuid_reference_map(
      ::TSCE::UuidReferenceMapArchive* uuid_reference_map);
  ::TSCE::UuidReferenceMapArchive* unsafe_arena_release_uuid_reference_map();

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
  bool has_table_uid_history() const;
  private:
  bool _internal_has_table_uid_history() const;
  public:
  void clear_table_uid_history();
  const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RewriteTableUIDInfoArchive* release_table_uid_history();
  ::TSCE::RewriteTableUIDInfoArchive* mutable_table_uid_history();
  void set_allocated_table_uid_history(::TSCE::RewriteTableUIDInfoArchive* table_uid_history);
  private:
  const ::TSCE::RewriteTableUIDInfoArchive& _internal_table_uid_history() const;
  ::TSCE::RewriteTableUIDInfoArchive* _internal_mutable_table_uid_history();
  public:
  void unsafe_arena_set_allocated_table_uid_history(
      ::TSCE::RewriteTableUIDInfoArchive* table_uid_history);
  ::TSCE::RewriteTableUIDInfoArchive* unsafe_arena_release_table_uid_history();

  // optional .TSP.Reference remote_data_store = 12;
  bool has_remote_data_store() const;
  private:
  bool _internal_has_remote_data_store() const;
  public:
  void clear_remote_data_store();
  const ::TSP::Reference& remote_data_store() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_remote_data_store();
  ::TSP::Reference* mutable_remote_data_store();
  void set_allocated_remote_data_store(::TSP::Reference* remote_data_store);
  private:
  const ::TSP::Reference& _internal_remote_data_store() const;
  ::TSP::Reference* _internal_mutable_remote_data_store();
  public:
  void unsafe_arena_set_allocated_remote_data_store(
      ::TSP::Reference* remote_data_store);
  ::TSP::Reference* unsafe_arena_release_remote_data_store();

  // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
  bool has_group_node_map() const;
  private:
  bool _internal_has_group_node_map() const;
  public:
  void clear_group_node_map();
  const ::TSCE::GroupByNodeMapArchive& group_node_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::GroupByNodeMapArchive* release_group_node_map();
  ::TSCE::GroupByNodeMapArchive* mutable_group_node_map();
  void set_allocated_group_node_map(::TSCE::GroupByNodeMapArchive* group_node_map);
  private:
  const ::TSCE::GroupByNodeMapArchive& _internal_group_node_map() const;
  ::TSCE::GroupByNodeMapArchive* _internal_mutable_group_node_map();
  public:
  void unsafe_arena_set_allocated_group_node_map(
      ::TSCE::GroupByNodeMapArchive* group_node_map);
  ::TSCE::GroupByNodeMapArchive* unsafe_arena_release_group_node_map();

  // optional .TSP.Reference header_name_manager = 14;
  bool has_header_name_manager() const;
  private:
  bool _internal_has_header_name_manager() const;
  public:
  void clear_header_name_manager();
  const ::TSP::Reference& header_name_manager() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_name_manager();
  ::TSP::Reference* mutable_header_name_manager();
  void set_allocated_header_name_manager(::TSP::Reference* header_name_manager);
  private:
  const ::TSP::Reference& _internal_header_name_manager() const;
  ::TSP::Reference* _internal_mutable_header_name_manager();
  public:
  void unsafe_arena_set_allocated_header_name_manager(
      ::TSP::Reference* header_name_manager);
  ::TSP::Reference* unsafe_arena_release_header_name_manager();

  // optional .TSP.Reference refs_to_dirty = 15;
  bool has_refs_to_dirty() const;
  private:
  bool _internal_has_refs_to_dirty() const;
  public:
  void clear_refs_to_dirty();
  const ::TSP::Reference& refs_to_dirty() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_refs_to_dirty();
  ::TSP::Reference* mutable_refs_to_dirty();
  void set_allocated_refs_to_dirty(::TSP::Reference* refs_to_dirty);
  private:
  const ::TSP::Reference& _internal_refs_to_dirty() const;
  ::TSP::Reference* _internal_mutable_refs_to_dirty();
  public:
  void unsafe_arena_set_allocated_refs_to_dirty(
      ::TSP::Reference* refs_to_dirty);
  ::TSP::Reference* unsafe_arena_release_refs_to_dirty();

  // optional uint64 document_random_seed = 6;
  bool has_document_random_seed() const;
  private:
  bool _internal_has_document_random_seed() const;
  public:
  void clear_document_random_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 document_random_seed() const;
  void set_document_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_document_random_seed() const;
  void _internal_set_document_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double document_timestamp = 9;
  bool has_document_timestamp() const;
  private:
  bool _internal_has_document_timestamp() const;
  public:
  void clear_document_timestamp();
  double document_timestamp() const;
  void set_document_timestamp(double value);
  private:
  double _internal_document_timestamp() const;
  void _internal_set_document_timestamp(double value);
  public:

  // optional bool base_date_1904 = 1;
  bool has_base_date_1904() const;
  private:
  bool _internal_has_base_date_1904() const;
  public:
  void clear_base_date_1904();
  bool base_date_1904() const;
  void set_base_date_1904(bool value);
  private:
  bool _internal_base_date_1904() const;
  void _internal_set_base_date_1904(bool value);
  public:

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  bool has_excel_import_date_mode() const;
  private:
  bool _internal_has_excel_import_date_mode() const;
  public:
  void clear_excel_import_date_mode();
  ::TSCE::CalculationEngineArchive_ExcelImportDateMode excel_import_date_mode() const;
  void set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value);
  private:
  ::TSCE::CalculationEngineArchive_ExcelImportDateMode _internal_excel_import_date_mode() const;
  void _internal_set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CalculationEngineArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > begin_tracking_names_legacy_nrm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > end_tracking_names_legacy_nrm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saved_locale_identifier_for_4_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saved_locale_identifier_;
  ::TSCE::DependencyTrackerArchive* dependency_tracker_;
  ::TSP::Reference* named_reference_manager_;
  ::TSCE::UuidReferenceMapArchive* uuid_reference_map_;
  ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_;
  ::TSP::Reference* remote_data_store_;
  ::TSCE::GroupByNodeMapArchive* group_node_map_;
  ::TSP::Reference* header_name_manager_;
  ::TSP::Reference* refs_to_dirty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 document_random_seed_;
  double document_timestamp_;
  bool base_date_1904_;
  int excel_import_date_mode_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class PreserveColumnRowFlagsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.PreserveColumnRowFlagsArchive) */ {
 public:
  inline PreserveColumnRowFlagsArchive() : PreserveColumnRowFlagsArchive(nullptr) {}
  ~PreserveColumnRowFlagsArchive() override;
  explicit constexpr PreserveColumnRowFlagsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreserveColumnRowFlagsArchive(const PreserveColumnRowFlagsArchive& from);
  PreserveColumnRowFlagsArchive(PreserveColumnRowFlagsArchive&& from) noexcept
    : PreserveColumnRowFlagsArchive() {
    *this = ::std::move(from);
  }

  inline PreserveColumnRowFlagsArchive& operator=(const PreserveColumnRowFlagsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreserveColumnRowFlagsArchive& operator=(PreserveColumnRowFlagsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreserveColumnRowFlagsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreserveColumnRowFlagsArchive* internal_default_instance() {
    return reinterpret_cast<const PreserveColumnRowFlagsArchive*>(
               &_PreserveColumnRowFlagsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PreserveColumnRowFlagsArchive& a, PreserveColumnRowFlagsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PreserveColumnRowFlagsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreserveColumnRowFlagsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreserveColumnRowFlagsArchive* New() const final {
    return CreateMaybeMessage<PreserveColumnRowFlagsArchive>(nullptr);
  }

  PreserveColumnRowFlagsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreserveColumnRowFlagsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreserveColumnRowFlagsArchive& from);
  void MergeFrom(const PreserveColumnRowFlagsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreserveColumnRowFlagsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.PreserveColumnRowFlagsArchive";
  }
  protected:
  explicit PreserveColumnRowFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginRowIsAbsoluteFieldNumber = 1,
    kBeginColumnIsAbsoluteFieldNumber = 2,
    kEndRowIsAbsoluteFieldNumber = 3,
    kEndColumnIsAbsoluteFieldNumber = 4,
  };
  // required bool begin_row_is_absolute = 1;
  bool has_begin_row_is_absolute() const;
  private:
  bool _internal_has_begin_row_is_absolute() const;
  public:
  void clear_begin_row_is_absolute();
  bool begin_row_is_absolute() const;
  void set_begin_row_is_absolute(bool value);
  private:
  bool _internal_begin_row_is_absolute() const;
  void _internal_set_begin_row_is_absolute(bool value);
  public:

  // required bool begin_column_is_absolute = 2;
  bool has_begin_column_is_absolute() const;
  private:
  bool _internal_has_begin_column_is_absolute() const;
  public:
  void clear_begin_column_is_absolute();
  bool begin_column_is_absolute() const;
  void set_begin_column_is_absolute(bool value);
  private:
  bool _internal_begin_column_is_absolute() const;
  void _internal_set_begin_column_is_absolute(bool value);
  public:

  // optional bool end_row_is_absolute = 3;
  bool has_end_row_is_absolute() const;
  private:
  bool _internal_has_end_row_is_absolute() const;
  public:
  void clear_end_row_is_absolute();
  bool end_row_is_absolute() const;
  void set_end_row_is_absolute(bool value);
  private:
  bool _internal_end_row_is_absolute() const;
  void _internal_set_end_row_is_absolute(bool value);
  public:

  // optional bool end_column_is_absolute = 4;
  bool has_end_column_is_absolute() const;
  private:
  bool _internal_has_end_column_is_absolute() const;
  public:
  void clear_end_column_is_absolute();
  bool end_column_is_absolute() const;
  void set_end_column_is_absolute(bool value);
  private:
  bool _internal_end_column_is_absolute() const;
  void _internal_set_end_column_is_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.PreserveColumnRowFlagsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool begin_row_is_absolute_;
  bool begin_column_is_absolute_;
  bool end_row_is_absolute_;
  bool end_column_is_absolute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryReferenceArchive_CatRefUidList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CategoryReferenceArchive.CatRefUidList) */ {
 public:
  inline CategoryReferenceArchive_CatRefUidList() : CategoryReferenceArchive_CatRefUidList(nullptr) {}
  ~CategoryReferenceArchive_CatRefUidList() override;
  explicit constexpr CategoryReferenceArchive_CatRefUidList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryReferenceArchive_CatRefUidList(const CategoryReferenceArchive_CatRefUidList& from);
  CategoryReferenceArchive_CatRefUidList(CategoryReferenceArchive_CatRefUidList&& from) noexcept
    : CategoryReferenceArchive_CatRefUidList() {
    *this = ::std::move(from);
  }

  inline CategoryReferenceArchive_CatRefUidList& operator=(const CategoryReferenceArchive_CatRefUidList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryReferenceArchive_CatRefUidList& operator=(CategoryReferenceArchive_CatRefUidList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryReferenceArchive_CatRefUidList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryReferenceArchive_CatRefUidList* internal_default_instance() {
    return reinterpret_cast<const CategoryReferenceArchive_CatRefUidList*>(
               &_CategoryReferenceArchive_CatRefUidList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CategoryReferenceArchive_CatRefUidList& a, CategoryReferenceArchive_CatRefUidList& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryReferenceArchive_CatRefUidList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryReferenceArchive_CatRefUidList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryReferenceArchive_CatRefUidList* New() const final {
    return CreateMaybeMessage<CategoryReferenceArchive_CatRefUidList>(nullptr);
  }

  CategoryReferenceArchive_CatRefUidList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryReferenceArchive_CatRefUidList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryReferenceArchive_CatRefUidList& from);
  void MergeFrom(const CategoryReferenceArchive_CatRefUidList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryReferenceArchive_CatRefUidList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CategoryReferenceArchive.CatRefUidList";
  }
  protected:
  explicit CategoryReferenceArchive_CatRefUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // repeated .TSP.UUID uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  ::TSP::UUID* mutable_uid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uid();
  private:
  const ::TSP::UUID& _internal_uid(int index) const;
  ::TSP::UUID* _internal_add_uid();
  public:
  const ::TSP::UUID& uid(int index) const;
  ::TSP::UUID* add_uid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uid() const;

  // @@protoc_insertion_point(class_scope:TSCE.CategoryReferenceArchive.CatRefUidList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CategoryReferenceArchive) */ {
 public:
  inline CategoryReferenceArchive() : CategoryReferenceArchive(nullptr) {}
  ~CategoryReferenceArchive() override;
  explicit constexpr CategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryReferenceArchive(const CategoryReferenceArchive& from);
  CategoryReferenceArchive(CategoryReferenceArchive&& from) noexcept
    : CategoryReferenceArchive() {
    *this = ::std::move(from);
  }

  inline CategoryReferenceArchive& operator=(const CategoryReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryReferenceArchive& operator=(CategoryReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryReferenceArchive*>(
               &_CategoryReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CategoryReferenceArchive& a, CategoryReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryReferenceArchive* New() const final {
    return CreateMaybeMessage<CategoryReferenceArchive>(nullptr);
  }

  CategoryReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryReferenceArchive& from);
  void MergeFrom(const CategoryReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CategoryReferenceArchive";
  }
  protected:
  explicit CategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryReferenceArchive_CatRefUidList CatRefUidList;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupByUidFieldNumber = 1,
    kColumnUidFieldNumber = 2,
    kGroupUidsFieldNumber = 6,
    kPreserveFlagsFieldNumber = 7,
    kRelativeGroupUidFieldNumber = 9,
    kAbsoluteGroupUidFieldNumber = 10,
    kAggregateTypeFieldNumber = 3,
    kGroupLevelFieldNumber = 4,
    kRelativeColumnFieldNumber = 8,
  };
  // required .TSP.UUID group_by_uid = 1;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // required .TSP.UUID column_uid = 2;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
  bool has_group_uids() const;
  private:
  bool _internal_has_group_uids() const;
  public:
  void clear_group_uids();
  const ::TSCE::CategoryReferenceArchive_CatRefUidList& group_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CategoryReferenceArchive_CatRefUidList* release_group_uids();
  ::TSCE::CategoryReferenceArchive_CatRefUidList* mutable_group_uids();
  void set_allocated_group_uids(::TSCE::CategoryReferenceArchive_CatRefUidList* group_uids);
  private:
  const ::TSCE::CategoryReferenceArchive_CatRefUidList& _internal_group_uids() const;
  ::TSCE::CategoryReferenceArchive_CatRefUidList* _internal_mutable_group_uids();
  public:
  void unsafe_arena_set_allocated_group_uids(
      ::TSCE::CategoryReferenceArchive_CatRefUidList* group_uids);
  ::TSCE::CategoryReferenceArchive_CatRefUidList* unsafe_arena_release_group_uids();

  // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
  bool has_preserve_flags() const;
  private:
  bool _internal_has_preserve_flags() const;
  public:
  void clear_preserve_flags();
  const ::TSCE::PreserveColumnRowFlagsArchive& preserve_flags() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::PreserveColumnRowFlagsArchive* release_preserve_flags();
  ::TSCE::PreserveColumnRowFlagsArchive* mutable_preserve_flags();
  void set_allocated_preserve_flags(::TSCE::PreserveColumnRowFlagsArchive* preserve_flags);
  private:
  const ::TSCE::PreserveColumnRowFlagsArchive& _internal_preserve_flags() const;
  ::TSCE::PreserveColumnRowFlagsArchive* _internal_mutable_preserve_flags();
  public:
  void unsafe_arena_set_allocated_preserve_flags(
      ::TSCE::PreserveColumnRowFlagsArchive* preserve_flags);
  ::TSCE::PreserveColumnRowFlagsArchive* unsafe_arena_release_preserve_flags();

  // optional .TSP.UUID relative_group_uid = 9;
  bool has_relative_group_uid() const;
  private:
  bool _internal_has_relative_group_uid() const;
  public:
  void clear_relative_group_uid();
  const ::TSP::UUID& relative_group_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_relative_group_uid();
  ::TSP::UUID* mutable_relative_group_uid();
  void set_allocated_relative_group_uid(::TSP::UUID* relative_group_uid);
  private:
  const ::TSP::UUID& _internal_relative_group_uid() const;
  ::TSP::UUID* _internal_mutable_relative_group_uid();
  public:
  void unsafe_arena_set_allocated_relative_group_uid(
      ::TSP::UUID* relative_group_uid);
  ::TSP::UUID* unsafe_arena_release_relative_group_uid();

  // optional .TSP.UUID absolute_group_uid = 10;
  bool has_absolute_group_uid() const;
  private:
  bool _internal_has_absolute_group_uid() const;
  public:
  void clear_absolute_group_uid();
  const ::TSP::UUID& absolute_group_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_absolute_group_uid();
  ::TSP::UUID* mutable_absolute_group_uid();
  void set_allocated_absolute_group_uid(::TSP::UUID* absolute_group_uid);
  private:
  const ::TSP::UUID& _internal_absolute_group_uid() const;
  ::TSP::UUID* _internal_mutable_absolute_group_uid();
  public:
  void unsafe_arena_set_allocated_absolute_group_uid(
      ::TSP::UUID* absolute_group_uid);
  ::TSP::UUID* unsafe_arena_release_absolute_group_uid();

  // required .TSCE.CategoryAggType aggregate_type = 3;
  bool has_aggregate_type() const;
  private:
  bool _internal_has_aggregate_type() const;
  public:
  void clear_aggregate_type();
  ::TSCE::CategoryAggType aggregate_type() const;
  void set_aggregate_type(::TSCE::CategoryAggType value);
  private:
  ::TSCE::CategoryAggType _internal_aggregate_type() const;
  void _internal_set_aggregate_type(::TSCE::CategoryAggType value);
  public:

  // required sint32 group_level = 4;
  bool has_group_level() const;
  private:
  bool _internal_has_group_level() const;
  public:
  void clear_group_level();
  ::PROTOBUF_NAMESPACE_ID::int32 group_level() const;
  void set_group_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_level() const;
  void _internal_set_group_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 relative_column = 8;
  bool has_relative_column() const;
  private:
  bool _internal_has_relative_column() const;
  public:
  void clear_relative_column();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_column() const;
  void set_relative_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relative_column() const;
  void _internal_set_relative_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CategoryReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* group_by_uid_;
  ::TSP::UUID* column_uid_;
  ::TSCE::CategoryReferenceArchive_CatRefUidList* group_uids_;
  ::TSCE::PreserveColumnRowFlagsArchive* preserve_flags_;
  ::TSP::UUID* relative_group_uid_;
  ::TSP::UUID* absolute_group_uid_;
  int aggregate_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_column_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() : ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from);
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& operator=(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& operator=(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(
               &_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& a, ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowHandleFieldNumber = 1,
    kColumnHandleFieldNumber = 2,
    kRowIsStickyFieldNumber = 3,
    kColumnIsStickyFieldNumber = 4,
  };
  // required uint32 row_handle = 1;
  bool has_row_handle() const;
  private:
  bool _internal_has_row_handle() const;
  public:
  void clear_row_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_handle() const;
  void set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_handle() const;
  void _internal_set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 column_handle = 2;
  bool has_column_handle() const;
  private:
  bool _internal_has_column_handle() const;
  public:
  void clear_column_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_handle() const;
  void set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_handle() const;
  void _internal_set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row_is_sticky = 3;
  bool has_row_is_sticky() const;
  private:
  bool _internal_has_row_is_sticky() const;
  public:
  void clear_row_is_sticky();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_is_sticky() const;
  void set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_is_sticky() const;
  void _internal_set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 column_is_sticky = 4;
  bool has_column_is_sticky() const;
  private:
  bool _internal_has_column_is_sticky() const;
  public:
  void clear_column_is_sticky();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_is_sticky() const;
  void set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_is_sticky() const;
  void _internal_set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_is_sticky_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_is_sticky_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() : ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from);
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& operator=(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& operator=(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(
               &_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& a, ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTReferenceWhitespaceAfterSheetNameFieldNumber = 6,
    kASTReferenceWhitespaceBeforeTableNameFieldNumber = 7,
    kASTReferenceWhitespaceAfterTableNameFieldNumber = 8,
    kASTReferenceWhitespaceBeforeCellAddressFieldNumber = 9,
    kTableIdFieldNumber = 5,
    kRowHandleFieldNumber = 1,
    kColumnHandleFieldNumber = 2,
    kRowIsStickyFieldNumber = 3,
    kColumnIsStickyFieldNumber = 4,
  };
  // optional string AST_reference_whitespace_after_sheet_name = 6;
  bool has_ast_reference_whitespace_after_sheet_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_sheet_name() const;
  public:
  void clear_ast_reference_whitespace_after_sheet_name();
  const std::string& ast_reference_whitespace_after_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_sheet_name();
  std::string* release_ast_reference_whitespace_after_sheet_name();
  void set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_sheet_name() const;
  void _internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_sheet_name();
  public:

  // optional string AST_reference_whitespace_before_table_name = 7;
  bool has_ast_reference_whitespace_before_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_table_name() const;
  public:
  void clear_ast_reference_whitespace_before_table_name();
  const std::string& ast_reference_whitespace_before_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_table_name();
  std::string* release_ast_reference_whitespace_before_table_name();
  void set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_before_table_name() const;
  void _internal_set_ast_reference_whitespace_before_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_table_name();
  public:

  // optional string AST_reference_whitespace_after_table_name = 8;
  bool has_ast_reference_whitespace_after_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_table_name() const;
  public:
  void clear_ast_reference_whitespace_after_table_name();
  const std::string& ast_reference_whitespace_after_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_table_name();
  std::string* release_ast_reference_whitespace_after_table_name();
  void set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_table_name() const;
  void _internal_set_ast_reference_whitespace_after_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_table_name();
  public:

  // optional string AST_reference_whitespace_before_cell_address = 9;
  bool has_ast_reference_whitespace_before_cell_address() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_cell_address() const;
  public:
  void clear_ast_reference_whitespace_before_cell_address();
  const std::string& ast_reference_whitespace_before_cell_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_cell_address();
  std::string* release_ast_reference_whitespace_before_cell_address();
  void set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address);
  private:
  const std::string& _internal_ast_reference_whitespace_before_cell_address() const;
  void _internal_set_ast_reference_whitespace_before_cell_address(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_cell_address();
  public:

  // required .TSP.CFUUIDArchive table_id = 5;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // required uint32 row_handle = 1;
  bool has_row_handle() const;
  private:
  bool _internal_has_row_handle() const;
  public:
  void clear_row_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_handle() const;
  void set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_handle() const;
  void _internal_set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 column_handle = 2;
  bool has_column_handle() const;
  private:
  bool _internal_has_column_handle() const;
  public:
  void clear_column_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_handle() const;
  void set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_handle() const;
  void _internal_set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row_is_sticky = 3;
  bool has_row_is_sticky() const;
  private:
  bool _internal_has_row_is_sticky() const;
  public:
  void clear_row_is_sticky();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_is_sticky() const;
  void set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_is_sticky() const;
  void _internal_set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 column_is_sticky = 4;
  bool has_column_is_sticky() const;
  private:
  bool _internal_has_column_is_sticky() const;
  public:
  void clear_column_is_sticky();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_is_sticky() const;
  void set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_is_sticky() const;
  void _internal_set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_sheet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_cell_address_;
  ::TSP::CFUUIDArchive* table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_is_sticky_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_is_sticky_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTColumnCoordinateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive() : ASTNodeArrayArchive_ASTColumnCoordinateArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTColumnCoordinateArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from);
  ASTNodeArrayArchive_ASTColumnCoordinateArchive(ASTNodeArrayArchive_ASTColumnCoordinateArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive& operator=(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive& operator=(ASTNodeArrayArchive_ASTColumnCoordinateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTColumnCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTColumnCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(
               &_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ASTNodeArrayArchive_ASTColumnCoordinateArchive& a, ASTNodeArrayArchive_ASTColumnCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTColumnCoordinateArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColumnCoordinateArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTColumnCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColumnCoordinateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kAbsoluteFieldNumber = 2,
  };
  // required sint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::int32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool absolute = 2 [default = false];
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  bool absolute() const;
  void set_absolute(bool value);
  private:
  bool _internal_absolute() const;
  void _internal_set_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 column_;
  bool absolute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTRowCoordinateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTRowCoordinateArchive() : ASTNodeArrayArchive_ASTRowCoordinateArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTRowCoordinateArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from);
  ASTNodeArrayArchive_ASTRowCoordinateArchive(ASTNodeArrayArchive_ASTRowCoordinateArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTRowCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTRowCoordinateArchive& operator=(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTRowCoordinateArchive& operator=(ASTNodeArrayArchive_ASTRowCoordinateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTRowCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTRowCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTRowCoordinateArchive*>(
               &_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ASTNodeArrayArchive_ASTRowCoordinateArchive& a, ASTNodeArrayArchive_ASTRowCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTRowCoordinateArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTRowCoordinateArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTRowCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTRowCoordinateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kAbsoluteFieldNumber = 2,
  };
  // required sint32 row = 1;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool absolute = 2 [default = false];
  bool has_absolute() const;
  private:
  bool _internal_has_absolute() const;
  public:
  void clear_absolute();
  bool absolute() const;
  void set_absolute(bool value);
  private:
  bool _internal_absolute() const;
  void _internal_set_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  bool absolute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTUidList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTUidList) */ {
 public:
  inline ASTNodeArrayArchive_ASTUidList() : ASTNodeArrayArchive_ASTUidList(nullptr) {}
  ~ASTNodeArrayArchive_ASTUidList() override;
  explicit constexpr ASTNodeArrayArchive_ASTUidList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTUidList(const ASTNodeArrayArchive_ASTUidList& from);
  ASTNodeArrayArchive_ASTUidList(ASTNodeArrayArchive_ASTUidList&& from) noexcept
    : ASTNodeArrayArchive_ASTUidList() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTUidList& operator=(const ASTNodeArrayArchive_ASTUidList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTUidList& operator=(ASTNodeArrayArchive_ASTUidList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTUidList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTUidList* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTUidList*>(
               &_ASTNodeArrayArchive_ASTUidList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ASTNodeArrayArchive_ASTUidList& a, ASTNodeArrayArchive_ASTUidList& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTUidList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTUidList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTUidList* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidList>(nullptr);
  }

  ASTNodeArrayArchive_ASTUidList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTUidList& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTUidList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTUidList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTUidList";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // repeated .TSP.UUID uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  ::TSP::UUID* mutable_uid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uid();
  private:
  const ::TSP::UUID& _internal_uid(int index) const;
  ::TSP::UUID* _internal_add_uid();
  public:
  const ::TSP::UUID& uid(int index) const;
  ::TSP::UUID* add_uid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uid() const;

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTUidList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTUidTract PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTUidTract) */ {
 public:
  inline ASTNodeArrayArchive_ASTUidTract() : ASTNodeArrayArchive_ASTUidTract(nullptr) {}
  ~ASTNodeArrayArchive_ASTUidTract() override;
  explicit constexpr ASTNodeArrayArchive_ASTUidTract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTUidTract(const ASTNodeArrayArchive_ASTUidTract& from);
  ASTNodeArrayArchive_ASTUidTract(ASTNodeArrayArchive_ASTUidTract&& from) noexcept
    : ASTNodeArrayArchive_ASTUidTract() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTUidTract& operator=(const ASTNodeArrayArchive_ASTUidTract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTUidTract& operator=(ASTNodeArrayArchive_ASTUidTract&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTUidTract& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTUidTract* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTUidTract*>(
               &_ASTNodeArrayArchive_ASTUidTract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(ASTNodeArrayArchive_ASTUidTract& a, ASTNodeArrayArchive_ASTUidTract& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTUidTract* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTUidTract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTUidTract* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidTract>(nullptr);
  }

  ASTNodeArrayArchive_ASTUidTract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidTract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTUidTract& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTUidTract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTUidTract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTUidTract";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTUidTract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidsFieldNumber = 1,
    kRowUidsFieldNumber = 2,
    kIsRangeRefFieldNumber = 3,
    kPurposeFieldNumber = 4,
    kPreserveRectangularFieldNumber = 5,
  };
  // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
  bool has_columnuids() const;
  private:
  bool _internal_has_columnuids() const;
  public:
  void clear_columnuids();
  const ::TSCE::ASTNodeArrayArchive_ASTUidList& columnuids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTUidList* release_columnuids();
  ::TSCE::ASTNodeArrayArchive_ASTUidList* mutable_columnuids();
  void set_allocated_columnuids(::TSCE::ASTNodeArrayArchive_ASTUidList* columnuids);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTUidList& _internal_columnuids() const;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* _internal_mutable_columnuids();
  public:
  void unsafe_arena_set_allocated_columnuids(
      ::TSCE::ASTNodeArrayArchive_ASTUidList* columnuids);
  ::TSCE::ASTNodeArrayArchive_ASTUidList* unsafe_arena_release_columnuids();

  // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
  bool has_rowuids() const;
  private:
  bool _internal_has_rowuids() const;
  public:
  void clear_rowuids();
  const ::TSCE::ASTNodeArrayArchive_ASTUidList& rowuids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTUidList* release_rowuids();
  ::TSCE::ASTNodeArrayArchive_ASTUidList* mutable_rowuids();
  void set_allocated_rowuids(::TSCE::ASTNodeArrayArchive_ASTUidList* rowuids);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTUidList& _internal_rowuids() const;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* _internal_mutable_rowuids();
  public:
  void unsafe_arena_set_allocated_rowuids(
      ::TSCE::ASTNodeArrayArchive_ASTUidList* rowuids);
  ::TSCE::ASTNodeArrayArchive_ASTUidList* unsafe_arena_release_rowuids();

  // optional bool is_range_ref = 3;
  bool has_is_range_ref() const;
  private:
  bool _internal_has_is_range_ref() const;
  public:
  void clear_is_range_ref();
  bool is_range_ref() const;
  void set_is_range_ref(bool value);
  private:
  bool _internal_is_range_ref() const;
  void _internal_set_is_range_ref(bool value);
  public:

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose purpose() const;
  void set_purpose(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose value);
  private:
  ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose _internal_purpose() const;
  void _internal_set_purpose(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose value);
  public:

  // optional bool preserve_rectangular = 5 [default = true];
  bool has_preserve_rectangular() const;
  private:
  bool _internal_has_preserve_rectangular() const;
  public:
  void clear_preserve_rectangular();
  bool preserve_rectangular() const;
  void set_preserve_rectangular(bool value);
  private:
  bool _internal_preserve_rectangular() const;
  void _internal_set_preserve_rectangular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTUidTract)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* columnuids_;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* rowuids_;
  bool is_range_ref_;
  int purpose_;
  bool preserve_rectangular_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTStickyBits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTStickyBits) */ {
 public:
  inline ASTNodeArrayArchive_ASTStickyBits() : ASTNodeArrayArchive_ASTStickyBits(nullptr) {}
  ~ASTNodeArrayArchive_ASTStickyBits() override;
  explicit constexpr ASTNodeArrayArchive_ASTStickyBits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTStickyBits(const ASTNodeArrayArchive_ASTStickyBits& from);
  ASTNodeArrayArchive_ASTStickyBits(ASTNodeArrayArchive_ASTStickyBits&& from) noexcept
    : ASTNodeArrayArchive_ASTStickyBits() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTStickyBits& operator=(const ASTNodeArrayArchive_ASTStickyBits& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTStickyBits& operator=(ASTNodeArrayArchive_ASTStickyBits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTStickyBits& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTStickyBits* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTStickyBits*>(
               &_ASTNodeArrayArchive_ASTStickyBits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ASTNodeArrayArchive_ASTStickyBits& a, ASTNodeArrayArchive_ASTStickyBits& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTStickyBits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTStickyBits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTStickyBits* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTStickyBits>(nullptr);
  }

  ASTNodeArrayArchive_ASTStickyBits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTStickyBits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTStickyBits& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTStickyBits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTStickyBits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTStickyBits";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTStickyBits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginRowIsAbsoluteFieldNumber = 1,
    kBeginColumnIsAbsoluteFieldNumber = 2,
    kEndRowIsAbsoluteFieldNumber = 3,
    kEndColumnIsAbsoluteFieldNumber = 4,
  };
  // required bool begin_row_is_absolute = 1;
  bool has_begin_row_is_absolute() const;
  private:
  bool _internal_has_begin_row_is_absolute() const;
  public:
  void clear_begin_row_is_absolute();
  bool begin_row_is_absolute() const;
  void set_begin_row_is_absolute(bool value);
  private:
  bool _internal_begin_row_is_absolute() const;
  void _internal_set_begin_row_is_absolute(bool value);
  public:

  // required bool begin_column_is_absolute = 2;
  bool has_begin_column_is_absolute() const;
  private:
  bool _internal_has_begin_column_is_absolute() const;
  public:
  void clear_begin_column_is_absolute();
  bool begin_column_is_absolute() const;
  void set_begin_column_is_absolute(bool value);
  private:
  bool _internal_begin_column_is_absolute() const;
  void _internal_set_begin_column_is_absolute(bool value);
  public:

  // required bool end_row_is_absolute = 3;
  bool has_end_row_is_absolute() const;
  private:
  bool _internal_has_end_row_is_absolute() const;
  public:
  void clear_end_row_is_absolute();
  bool end_row_is_absolute() const;
  void set_end_row_is_absolute(bool value);
  private:
  bool _internal_end_row_is_absolute() const;
  void _internal_set_end_row_is_absolute(bool value);
  public:

  // required bool end_column_is_absolute = 4;
  bool has_end_column_is_absolute() const;
  private:
  bool _internal_has_end_column_is_absolute() const;
  public:
  void clear_end_column_is_absolute();
  bool end_column_is_absolute() const;
  void set_end_column_is_absolute(bool value);
  private:
  bool _internal_end_column_is_absolute() const;
  void _internal_set_end_column_is_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTStickyBits)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool begin_row_is_absolute_;
  bool begin_column_is_absolute_;
  bool end_row_is_absolute_;
  bool end_column_is_absolute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTUidTractList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTUidTractList) */ {
 public:
  inline ASTNodeArrayArchive_ASTUidTractList() : ASTNodeArrayArchive_ASTUidTractList(nullptr) {}
  ~ASTNodeArrayArchive_ASTUidTractList() override;
  explicit constexpr ASTNodeArrayArchive_ASTUidTractList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTUidTractList(const ASTNodeArrayArchive_ASTUidTractList& from);
  ASTNodeArrayArchive_ASTUidTractList(ASTNodeArrayArchive_ASTUidTractList&& from) noexcept
    : ASTNodeArrayArchive_ASTUidTractList() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTUidTractList& operator=(const ASTNodeArrayArchive_ASTUidTractList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTUidTractList& operator=(ASTNodeArrayArchive_ASTUidTractList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTUidTractList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTUidTractList* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTUidTractList*>(
               &_ASTNodeArrayArchive_ASTUidTractList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ASTNodeArrayArchive_ASTUidTractList& a, ASTNodeArrayArchive_ASTUidTractList& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTUidTractList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTUidTractList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTUidTractList* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidTractList>(nullptr);
  }

  ASTNodeArrayArchive_ASTUidTractList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidTractList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTUidTractList& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTUidTractList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTUidTractList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTUidTractList";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTUidTractList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTractFieldNumber = 1,
    kStickyBitsFieldNumber = 2,
  };
  // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
  int tract_size() const;
  private:
  int _internal_tract_size() const;
  public:
  void clear_tract();
  ::TSCE::ASTNodeArrayArchive_ASTUidTract* mutable_tract(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTUidTract >*
      mutable_tract();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTUidTract& _internal_tract(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTUidTract* _internal_add_tract();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTUidTract& tract(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTUidTract* add_tract();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTUidTract >&
      tract() const;

  // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
  bool has_sticky_bits() const;
  private:
  bool _internal_has_sticky_bits() const;
  public:
  void clear_sticky_bits();
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& sticky_bits() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTStickyBits* release_sticky_bits();
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* mutable_sticky_bits();
  void set_allocated_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* sticky_bits);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& _internal_sticky_bits() const;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* _internal_mutable_sticky_bits();
  public:
  void unsafe_arena_set_allocated_sticky_bits(
      ::TSCE::ASTNodeArrayArchive_ASTStickyBits* sticky_bits);
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* unsafe_arena_release_sticky_bits();

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTUidTractList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTUidTract > tract_;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* sticky_bits_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTUidCoordinateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTUidCoordinateArchive() : ASTNodeArrayArchive_ASTUidCoordinateArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTUidCoordinateArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTUidCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTUidCoordinateArchive(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from);
  ASTNodeArrayArchive_ASTUidCoordinateArchive(ASTNodeArrayArchive_ASTUidCoordinateArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTUidCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTUidCoordinateArchive& operator=(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTUidCoordinateArchive& operator=(ASTNodeArrayArchive_ASTUidCoordinateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTUidCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTUidCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTUidCoordinateArchive*>(
               &_ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ASTNodeArrayArchive_ASTUidCoordinateArchive& a, ASTNodeArrayArchive_ASTUidCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTUidCoordinateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTUidCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTUidCoordinateArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidCoordinateArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTUidCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTUidCoordinateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTUidCoordinateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTUidCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidFieldNumber = 1,
    kRowUidFieldNumber = 2,
    kColumnAbsoluteFieldNumber = 3,
    kRowAbsoluteFieldNumber = 4,
  };
  // required .TSP.UUID column_uid = 1;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // required .TSP.UUID row_uid = 2;
  bool has_row_uid() const;
  private:
  bool _internal_has_row_uid() const;
  public:
  void clear_row_uid();
  const ::TSP::UUID& row_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_row_uid();
  ::TSP::UUID* mutable_row_uid();
  void set_allocated_row_uid(::TSP::UUID* row_uid);
  private:
  const ::TSP::UUID& _internal_row_uid() const;
  ::TSP::UUID* _internal_mutable_row_uid();
  public:
  void unsafe_arena_set_allocated_row_uid(
      ::TSP::UUID* row_uid);
  ::TSP::UUID* unsafe_arena_release_row_uid();

  // required bool column_absolute = 3;
  bool has_column_absolute() const;
  private:
  bool _internal_has_column_absolute() const;
  public:
  void clear_column_absolute();
  bool column_absolute() const;
  void set_column_absolute(bool value);
  private:
  bool _internal_column_absolute() const;
  void _internal_set_column_absolute(bool value);
  public:

  // required bool row_absolute = 4;
  bool has_row_absolute() const;
  private:
  bool _internal_has_row_absolute() const;
  public:
  void clear_row_absolute();
  bool row_absolute() const;
  void set_row_absolute(bool value);
  private:
  bool _internal_row_absolute() const;
  void _internal_set_row_absolute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* column_uid_;
  ::TSP::UUID* row_uid_;
  bool column_absolute_;
  bool row_absolute_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTCategoryReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTCategoryReferenceArchive() : ASTNodeArrayArchive_ASTCategoryReferenceArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTCategoryReferenceArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTCategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTCategoryReferenceArchive(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from);
  ASTNodeArrayArchive_ASTCategoryReferenceArchive(ASTNodeArrayArchive_ASTCategoryReferenceArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTCategoryReferenceArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTCategoryReferenceArchive& operator=(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTCategoryReferenceArchive& operator=(ASTNodeArrayArchive_ASTCategoryReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTCategoryReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTCategoryReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTCategoryReferenceArchive*>(
               &_ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ASTNodeArrayArchive_ASTCategoryReferenceArchive& a, ASTNodeArrayArchive_ASTCategoryReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTCategoryReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTCategoryReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTCategoryReferenceArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCategoryReferenceArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTCategoryReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCategoryReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTCategoryReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTCategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryRefFieldNumber = 1,
  };
  // required .TSCE.CategoryReferenceArchive category_ref = 1;
  bool has_category_ref() const;
  private:
  bool _internal_has_category_ref() const;
  public:
  void clear_category_ref();
  const ::TSCE::CategoryReferenceArchive& category_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CategoryReferenceArchive* release_category_ref();
  ::TSCE::CategoryReferenceArchive* mutable_category_ref();
  void set_allocated_category_ref(::TSCE::CategoryReferenceArchive* category_ref);
  private:
  const ::TSCE::CategoryReferenceArchive& _internal_category_ref() const;
  ::TSCE::CategoryReferenceArchive* _internal_mutable_category_ref();
  public:
  void unsafe_arena_set_allocated_category_ref(
      ::TSCE::CategoryReferenceArchive* category_ref);
  ::TSCE::CategoryReferenceArchive* unsafe_arena_release_category_ref();

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CategoryReferenceArchive* category_ref_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive() : ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from);
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& operator=(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& operator=(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive*>(
               &_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& a, ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeBeginFieldNumber = 1,
    kRangeEndFieldNumber = 2,
  };
  // required int32 range_begin = 1;
  bool has_range_begin() const;
  private:
  bool _internal_has_range_begin() const;
  public:
  void clear_range_begin();
  ::PROTOBUF_NAMESPACE_ID::int32 range_begin() const;
  void set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_begin() const;
  void _internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 range_end = 2;
  bool has_range_end() const;
  private:
  bool _internal_has_range_end() const;
  public:
  void clear_range_end();
  ::PROTOBUF_NAMESPACE_ID::int32 range_end() const;
  void set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range_end() const;
  void _internal_set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_begin_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_end_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive() : ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from);
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& operator=(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& operator=(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive*>(
               &_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& a, ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeBeginFieldNumber = 1,
    kRangeEndFieldNumber = 2,
  };
  // required uint32 range_begin = 1;
  bool has_range_begin() const;
  private:
  bool _internal_has_range_begin() const;
  public:
  void clear_range_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 range_begin() const;
  void set_range_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_begin() const;
  void _internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 range_end = 2;
  bool has_range_end() const;
  private:
  bool _internal_has_range_end() const;
  public:
  void clear_range_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 range_end() const;
  void set_range_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_end() const;
  void _internal_set_range_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_end_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTColonTractArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTColonTractArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTColonTractArchive() : ASTNodeArrayArchive_ASTColonTractArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTColonTractArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTColonTractArchive(const ASTNodeArrayArchive_ASTColonTractArchive& from);
  ASTNodeArrayArchive_ASTColonTractArchive(ASTNodeArrayArchive_ASTColonTractArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTColonTractArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTColonTractArchive& operator=(const ASTNodeArrayArchive_ASTColonTractArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTColonTractArchive& operator=(ASTNodeArrayArchive_ASTColonTractArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTColonTractArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTColonTractArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTColonTractArchive*>(
               &_ASTNodeArrayArchive_ASTColonTractArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ASTNodeArrayArchive_ASTColonTractArchive& a, ASTNodeArrayArchive_ASTColonTractArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTColonTractArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTColonTractArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTColonTractArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTColonTractArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTColonTractArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTColonTractArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTColonTractArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive ASTColonTractRelativeRangeArchive;
  typedef ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive ASTColonTractAbsoluteRangeArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeColumnFieldNumber = 1,
    kRelativeRowFieldNumber = 2,
    kAbsoluteColumnFieldNumber = 3,
    kAbsoluteRowFieldNumber = 4,
    kPreserveRectangularFieldNumber = 5,
  };
  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
  int relative_column_size() const;
  private:
  int _internal_relative_column_size() const;
  public:
  void clear_relative_column();
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* mutable_relative_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >*
      mutable_relative_column();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& _internal_relative_column(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* _internal_add_relative_column();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& relative_column(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* add_relative_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >&
      relative_column() const;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
  int relative_row_size() const;
  private:
  int _internal_relative_row_size() const;
  public:
  void clear_relative_row();
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* mutable_relative_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >*
      mutable_relative_row();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& _internal_relative_row(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* _internal_add_relative_row();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& relative_row(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* add_relative_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >&
      relative_row() const;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
  int absolute_column_size() const;
  private:
  int _internal_absolute_column_size() const;
  public:
  void clear_absolute_column();
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* mutable_absolute_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >*
      mutable_absolute_column();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& _internal_absolute_column(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* _internal_add_absolute_column();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& absolute_column(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* add_absolute_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >&
      absolute_column() const;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
  int absolute_row_size() const;
  private:
  int _internal_absolute_row_size() const;
  public:
  void clear_absolute_row();
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* mutable_absolute_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >*
      mutable_absolute_row();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& _internal_absolute_row(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* _internal_add_absolute_row();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& absolute_row(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* add_absolute_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >&
      absolute_row() const;

  // optional bool preserve_rectangular = 5 [default = true];
  bool has_preserve_rectangular() const;
  private:
  bool _internal_has_preserve_rectangular() const;
  public:
  void clear_preserve_rectangular();
  bool preserve_rectangular() const;
  void set_preserve_rectangular(bool value);
  private:
  bool _internal_preserve_rectangular() const;
  void _internal_set_preserve_rectangular(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive > relative_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive > relative_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive > absolute_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive > absolute_row_;
  bool preserve_rectangular_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() : ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from);
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& operator=(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& operator=(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(
               &_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& a, ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTReferenceWhitespaceAfterSheetNameFieldNumber = 2,
    kASTReferenceWhitespaceBeforeTableNameFieldNumber = 3,
    kASTReferenceWhitespaceAfterTableNameFieldNumber = 4,
    kASTReferenceWhitespaceBeforeCellAddressFieldNumber = 5,
    kTableIdFieldNumber = 1,
  };
  // optional string AST_reference_whitespace_after_sheet_name = 2;
  bool has_ast_reference_whitespace_after_sheet_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_sheet_name() const;
  public:
  void clear_ast_reference_whitespace_after_sheet_name();
  const std::string& ast_reference_whitespace_after_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_sheet_name();
  std::string* release_ast_reference_whitespace_after_sheet_name();
  void set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_sheet_name() const;
  void _internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_sheet_name();
  public:

  // optional string AST_reference_whitespace_before_table_name = 3;
  bool has_ast_reference_whitespace_before_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_table_name() const;
  public:
  void clear_ast_reference_whitespace_before_table_name();
  const std::string& ast_reference_whitespace_before_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_table_name();
  std::string* release_ast_reference_whitespace_before_table_name();
  void set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_before_table_name() const;
  void _internal_set_ast_reference_whitespace_before_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_table_name();
  public:

  // optional string AST_reference_whitespace_after_table_name = 4;
  bool has_ast_reference_whitespace_after_table_name() const;
  private:
  bool _internal_has_ast_reference_whitespace_after_table_name() const;
  public:
  void clear_ast_reference_whitespace_after_table_name();
  const std::string& ast_reference_whitespace_after_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_after_table_name();
  std::string* release_ast_reference_whitespace_after_table_name();
  void set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name);
  private:
  const std::string& _internal_ast_reference_whitespace_after_table_name() const;
  void _internal_set_ast_reference_whitespace_after_table_name(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_after_table_name();
  public:

  // optional string AST_reference_whitespace_before_cell_address = 5;
  bool has_ast_reference_whitespace_before_cell_address() const;
  private:
  bool _internal_has_ast_reference_whitespace_before_cell_address() const;
  public:
  void clear_ast_reference_whitespace_before_cell_address();
  const std::string& ast_reference_whitespace_before_cell_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_reference_whitespace_before_cell_address();
  std::string* release_ast_reference_whitespace_before_cell_address();
  void set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address);
  private:
  const std::string& _internal_ast_reference_whitespace_before_cell_address() const;
  void _internal_set_ast_reference_whitespace_before_cell_address(const std::string& value);
  std::string* _internal_mutable_ast_reference_whitespace_before_cell_address();
  public:

  // required .TSP.CFUUIDArchive table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_sheet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_after_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_reference_whitespace_before_cell_address_;
  ::TSP::CFUUIDArchive* table_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTLetNodeWhitespace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace) */ {
 public:
  inline ASTNodeArrayArchive_ASTLetNodeWhitespace() : ASTNodeArrayArchive_ASTLetNodeWhitespace(nullptr) {}
  ~ASTNodeArrayArchive_ASTLetNodeWhitespace() override;
  explicit constexpr ASTNodeArrayArchive_ASTLetNodeWhitespace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTLetNodeWhitespace(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from);
  ASTNodeArrayArchive_ASTLetNodeWhitespace(ASTNodeArrayArchive_ASTLetNodeWhitespace&& from) noexcept
    : ASTNodeArrayArchive_ASTLetNodeWhitespace() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTLetNodeWhitespace& operator=(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTLetNodeWhitespace& operator=(ASTNodeArrayArchive_ASTLetNodeWhitespace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTLetNodeWhitespace& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTLetNodeWhitespace* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTLetNodeWhitespace*>(
               &_ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ASTNodeArrayArchive_ASTLetNodeWhitespace& a, ASTNodeArrayArchive_ASTLetNodeWhitespace& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTLetNodeWhitespace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTLetNodeWhitespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTLetNodeWhitespace* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTLetNodeWhitespace>(nullptr);
  }

  ASTNodeArrayArchive_ASTLetNodeWhitespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTLetNodeWhitespace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTLetNodeWhitespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTLetNodeWhitespace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTLetWhitespaceAfterLetFieldNumber = 1,
    kASTLetWhitespaceAfterIdentifierFieldNumber = 2,
    kASTLetWhitespaceAfterEqualsFieldNumber = 3,
    kASTLetWhitespaceAfterDelimiterFieldNumber = 4,
  };
  // optional string AST_let_whitespace_after_let = 1;
  bool has_ast_let_whitespace_after_let() const;
  private:
  bool _internal_has_ast_let_whitespace_after_let() const;
  public:
  void clear_ast_let_whitespace_after_let();
  const std::string& ast_let_whitespace_after_let() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_let_whitespace_after_let(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_let_whitespace_after_let();
  std::string* release_ast_let_whitespace_after_let();
  void set_allocated_ast_let_whitespace_after_let(std::string* ast_let_whitespace_after_let);
  private:
  const std::string& _internal_ast_let_whitespace_after_let() const;
  void _internal_set_ast_let_whitespace_after_let(const std::string& value);
  std::string* _internal_mutable_ast_let_whitespace_after_let();
  public:

  // optional string AST_let_whitespace_after_identifier = 2;
  bool has_ast_let_whitespace_after_identifier() const;
  private:
  bool _internal_has_ast_let_whitespace_after_identifier() const;
  public:
  void clear_ast_let_whitespace_after_identifier();
  const std::string& ast_let_whitespace_after_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_let_whitespace_after_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_let_whitespace_after_identifier();
  std::string* release_ast_let_whitespace_after_identifier();
  void set_allocated_ast_let_whitespace_after_identifier(std::string* ast_let_whitespace_after_identifier);
  private:
  const std::string& _internal_ast_let_whitespace_after_identifier() const;
  void _internal_set_ast_let_whitespace_after_identifier(const std::string& value);
  std::string* _internal_mutable_ast_let_whitespace_after_identifier();
  public:

  // optional string AST_let_whitespace_after_equals = 3;
  bool has_ast_let_whitespace_after_equals() const;
  private:
  bool _internal_has_ast_let_whitespace_after_equals() const;
  public:
  void clear_ast_let_whitespace_after_equals();
  const std::string& ast_let_whitespace_after_equals() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_let_whitespace_after_equals(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_let_whitespace_after_equals();
  std::string* release_ast_let_whitespace_after_equals();
  void set_allocated_ast_let_whitespace_after_equals(std::string* ast_let_whitespace_after_equals);
  private:
  const std::string& _internal_ast_let_whitespace_after_equals() const;
  void _internal_set_ast_let_whitespace_after_equals(const std::string& value);
  std::string* _internal_mutable_ast_let_whitespace_after_equals();
  public:

  // optional string AST_let_whitespace_after_delimiter = 4;
  bool has_ast_let_whitespace_after_delimiter() const;
  private:
  bool _internal_has_ast_let_whitespace_after_delimiter() const;
  public:
  void clear_ast_let_whitespace_after_delimiter();
  const std::string& ast_let_whitespace_after_delimiter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_let_whitespace_after_delimiter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_let_whitespace_after_delimiter();
  std::string* release_ast_let_whitespace_after_delimiter();
  void set_allocated_ast_let_whitespace_after_delimiter(std::string* ast_let_whitespace_after_delimiter);
  private:
  const std::string& _internal_ast_let_whitespace_after_delimiter() const;
  void _internal_set_ast_let_whitespace_after_delimiter(const std::string& value);
  std::string* _internal_mutable_ast_let_whitespace_after_delimiter();
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_let_whitespace_after_let_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_let_whitespace_after_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_let_whitespace_after_equals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_let_whitespace_after_delimiter_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive_ASTNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive.ASTNodeArchive) */ {
 public:
  inline ASTNodeArrayArchive_ASTNodeArchive() : ASTNodeArrayArchive_ASTNodeArchive(nullptr) {}
  ~ASTNodeArrayArchive_ASTNodeArchive() override;
  explicit constexpr ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from);
  ASTNodeArrayArchive_ASTNodeArchive(ASTNodeArrayArchive_ASTNodeArchive&& from) noexcept
    : ASTNodeArrayArchive_ASTNodeArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive_ASTNodeArchive& operator=(const ASTNodeArrayArchive_ASTNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive_ASTNodeArchive& operator=(ASTNodeArrayArchive_ASTNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive_ASTNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive_ASTNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive_ASTNodeArchive*>(
               &_ASTNodeArrayArchive_ASTNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(ASTNodeArrayArchive_ASTNodeArchive& a, ASTNodeArrayArchive_ASTNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive_ASTNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive_ASTNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive_ASTNodeArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTNodeArchive>(nullptr);
  }

  ASTNodeArrayArchive_ASTNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive_ASTNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from);
  void MergeFrom(const ASTNodeArrayArchive_ASTNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive_ASTNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive.ASTNodeArchive";
  }
  protected:
  explicit ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTStringNodeStringFieldNumber = 6,
    kASTUnknownFunctionNodeStringFieldNumber = 17,
    kASTDateNodeDateTimeFormatFieldNumber = 21,
    kASTWhitespaceFieldNumber = 25,
    kASTLetIdentifierFieldNumber = 34,
    kASTThunkNodeArrayFieldNumber = 14,
    kASTLocalCellReferenceNodeReferenceFieldNumber = 15,
    kASTCrossTableCellReferenceNodeReferenceFieldNumber = 16,
    kASTColumnFieldNumber = 26,
    kASTRowFieldNumber = 27,
    kASTCrossTableReferenceExtraInfoFieldNumber = 28,
    kASTUidCoordinateFieldNumber = 30,
    kASTStickyBitsFieldNumber = 33,
    kASTLetE2FieldNumber = 35,
    kASTLetWhitespaceFieldNumber = 36,
    kASTTractListFieldNumber = 38,
    kASTCategoryRefFieldNumber = 39,
    kASTColonTractFieldNumber = 40,
    kASTFrozenStickyBitsFieldNumber = 41,
    kASTFunctionNodeIndexFieldNumber = 2,
    kASTFunctionNodeNumArgsFieldNumber = 3,
    kASTNumberNodeNumberFieldNumber = 4,
    kASTDateNodeDateNumFieldNumber = 7,
    kASTDurationNodeUnitNumFieldNumber = 8,
    kASTDurationNodeUnitFieldNumber = 9,
    kASTTokenNodeBooleanFieldNumber = 10,
    kASTArrayNodeNumColFieldNumber = 11,
    kASTArrayNodeNumRowFieldNumber = 12,
    kASTListNodeNumArgsFieldNumber = 13,
    kASTUnknownFunctionNodeNumArgsFieldNumber = 18,
    kASTBooleanNodeBooleanFieldNumber = 5,
    kASTDateNodeSuppressDateFormatFieldNumber = 19,
    kASTDateNodeSuppressTimeFormatFieldNumber = 20,
    kASTDurationNodeUseAutomaticUnitsFieldNumber = 29,
    kASTDurationNodeStyleFieldNumber = 22,
    kASTDurationNodeDurationUnitLargestFieldNumber = 23,
    kASTDurationNodeDurationUnitSmallestFieldNumber = 24,
    kASTNumberNodeDecimalLowFieldNumber = 42,
    kASTSymbolFieldNumber = 37,
    kASTNumberNodeDecimalHighFieldNumber = 43,
    kASTNodeTypeFieldNumber = 1,
  };
  // optional string AST_string_node_string = 6;
  bool has_ast_string_node_string() const;
  private:
  bool _internal_has_ast_string_node_string() const;
  public:
  void clear_ast_string_node_string();
  const std::string& ast_string_node_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_string_node_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_string_node_string();
  std::string* release_ast_string_node_string();
  void set_allocated_ast_string_node_string(std::string* ast_string_node_string);
  private:
  const std::string& _internal_ast_string_node_string() const;
  void _internal_set_ast_string_node_string(const std::string& value);
  std::string* _internal_mutable_ast_string_node_string();
  public:

  // optional string AST_unknown_function_node_string = 17;
  bool has_ast_unknown_function_node_string() const;
  private:
  bool _internal_has_ast_unknown_function_node_string() const;
  public:
  void clear_ast_unknown_function_node_string();
  const std::string& ast_unknown_function_node_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_unknown_function_node_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_unknown_function_node_string();
  std::string* release_ast_unknown_function_node_string();
  void set_allocated_ast_unknown_function_node_string(std::string* ast_unknown_function_node_string);
  private:
  const std::string& _internal_ast_unknown_function_node_string() const;
  void _internal_set_ast_unknown_function_node_string(const std::string& value);
  std::string* _internal_mutable_ast_unknown_function_node_string();
  public:

  // optional string AST_date_node_date_time_format = 21;
  bool has_ast_date_node_date_time_format() const;
  private:
  bool _internal_has_ast_date_node_date_time_format() const;
  public:
  void clear_ast_date_node_date_time_format();
  const std::string& ast_date_node_date_time_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_date_node_date_time_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_date_node_date_time_format();
  std::string* release_ast_date_node_date_time_format();
  void set_allocated_ast_date_node_date_time_format(std::string* ast_date_node_date_time_format);
  private:
  const std::string& _internal_ast_date_node_date_time_format() const;
  void _internal_set_ast_date_node_date_time_format(const std::string& value);
  std::string* _internal_mutable_ast_date_node_date_time_format();
  public:

  // optional string AST_whitespace = 25;
  bool has_ast_whitespace() const;
  private:
  bool _internal_has_ast_whitespace() const;
  public:
  void clear_ast_whitespace();
  const std::string& ast_whitespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_whitespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_whitespace();
  std::string* release_ast_whitespace();
  void set_allocated_ast_whitespace(std::string* ast_whitespace);
  private:
  const std::string& _internal_ast_whitespace() const;
  void _internal_set_ast_whitespace(const std::string& value);
  std::string* _internal_mutable_ast_whitespace();
  public:

  // optional string AST_let_identifier = 34;
  bool has_ast_let_identifier() const;
  private:
  bool _internal_has_ast_let_identifier() const;
  public:
  void clear_ast_let_identifier();
  const std::string& ast_let_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ast_let_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ast_let_identifier();
  std::string* release_ast_let_identifier();
  void set_allocated_ast_let_identifier(std::string* ast_let_identifier);
  private:
  const std::string& _internal_ast_let_identifier() const;
  void _internal_set_ast_let_identifier(const std::string& value);
  std::string* _internal_mutable_ast_let_identifier();
  public:

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  bool has_ast_thunk_node_array() const;
  private:
  bool _internal_has_ast_thunk_node_array() const;
  public:
  void clear_ast_thunk_node_array();
  const ::TSCE::ASTNodeArrayArchive& ast_thunk_node_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive* release_ast_thunk_node_array();
  ::TSCE::ASTNodeArrayArchive* mutable_ast_thunk_node_array();
  void set_allocated_ast_thunk_node_array(::TSCE::ASTNodeArrayArchive* ast_thunk_node_array);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast_thunk_node_array() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast_thunk_node_array();
  public:
  void unsafe_arena_set_allocated_ast_thunk_node_array(
      ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast_thunk_node_array();

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  bool has_ast_local_cell_reference_node_reference() const;
  private:
  bool _internal_has_ast_local_cell_reference_node_reference() const;
  public:
  void clear_ast_local_cell_reference_node_reference();
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ast_local_cell_reference_node_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* release_ast_local_cell_reference_node_reference();
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* mutable_ast_local_cell_reference_node_reference();
  void set_allocated_ast_local_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& _internal_ast_local_cell_reference_node_reference() const;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* _internal_mutable_ast_local_cell_reference_node_reference();
  public:
  void unsafe_arena_set_allocated_ast_local_cell_reference_node_reference(
      ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference);
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* unsafe_arena_release_ast_local_cell_reference_node_reference();

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  bool has_ast_cross_table_cell_reference_node_reference() const;
  private:
  bool _internal_has_ast_cross_table_cell_reference_node_reference() const;
  public:
  void clear_ast_cross_table_cell_reference_node_reference();
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ast_cross_table_cell_reference_node_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* release_ast_cross_table_cell_reference_node_reference();
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* mutable_ast_cross_table_cell_reference_node_reference();
  void set_allocated_ast_cross_table_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& _internal_ast_cross_table_cell_reference_node_reference() const;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* _internal_mutable_ast_cross_table_cell_reference_node_reference();
  public:
  void unsafe_arena_set_allocated_ast_cross_table_cell_reference_node_reference(
      ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference);
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* unsafe_arena_release_ast_cross_table_cell_reference_node_reference();

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  bool has_ast_column() const;
  private:
  bool _internal_has_ast_column() const;
  public:
  void clear_ast_column();
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ast_column() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* release_ast_column();
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* mutable_ast_column();
  void set_allocated_ast_column(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& _internal_ast_column() const;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* _internal_mutable_ast_column();
  public:
  void unsafe_arena_set_allocated_ast_column(
      ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column);
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* unsafe_arena_release_ast_column();

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  bool has_ast_row() const;
  private:
  bool _internal_has_ast_row() const;
  public:
  void clear_ast_row();
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ast_row() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* release_ast_row();
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* mutable_ast_row();
  void set_allocated_ast_row(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& _internal_ast_row() const;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* _internal_mutable_ast_row();
  public:
  void unsafe_arena_set_allocated_ast_row(
      ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row);
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* unsafe_arena_release_ast_row();

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  bool has_ast_cross_table_reference_extra_info() const;
  private:
  bool _internal_has_ast_cross_table_reference_extra_info() const;
  public:
  void clear_ast_cross_table_reference_extra_info();
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ast_cross_table_reference_extra_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* release_ast_cross_table_reference_extra_info();
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* mutable_ast_cross_table_reference_extra_info();
  void set_allocated_ast_cross_table_reference_extra_info(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& _internal_ast_cross_table_reference_extra_info() const;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* _internal_mutable_ast_cross_table_reference_extra_info();
  public:
  void unsafe_arena_set_allocated_ast_cross_table_reference_extra_info(
      ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info);
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* unsafe_arena_release_ast_cross_table_reference_extra_info();

  // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
  bool has_ast_uid_coordinate() const;
  private:
  bool _internal_has_ast_uid_coordinate() const;
  public:
  void clear_ast_uid_coordinate();
  const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& ast_uid_coordinate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* release_ast_uid_coordinate();
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* mutable_ast_uid_coordinate();
  void set_allocated_ast_uid_coordinate(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ast_uid_coordinate);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& _internal_ast_uid_coordinate() const;
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* _internal_mutable_ast_uid_coordinate();
  public:
  void unsafe_arena_set_allocated_ast_uid_coordinate(
      ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ast_uid_coordinate);
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* unsafe_arena_release_ast_uid_coordinate();

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
  bool has_ast_sticky_bits() const;
  private:
  bool _internal_has_ast_sticky_bits() const;
  public:
  void clear_ast_sticky_bits();
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_sticky_bits() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTStickyBits* release_ast_sticky_bits();
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* mutable_ast_sticky_bits();
  void set_allocated_ast_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_sticky_bits);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& _internal_ast_sticky_bits() const;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* _internal_mutable_ast_sticky_bits();
  public:
  void unsafe_arena_set_allocated_ast_sticky_bits(
      ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_sticky_bits);
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* unsafe_arena_release_ast_sticky_bits();

  // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
  bool has_ast_let_e2() const;
  private:
  bool _internal_has_ast_let_e2() const;
  public:
  void clear_ast_let_e2();
  const ::TSCE::ASTNodeArrayArchive& ast_let_e2() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive* release_ast_let_e2();
  ::TSCE::ASTNodeArrayArchive* mutable_ast_let_e2();
  void set_allocated_ast_let_e2(::TSCE::ASTNodeArrayArchive* ast_let_e2);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast_let_e2() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast_let_e2();
  public:
  void unsafe_arena_set_allocated_ast_let_e2(
      ::TSCE::ASTNodeArrayArchive* ast_let_e2);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast_let_e2();

  // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
  bool has_ast_let_whitespace() const;
  private:
  bool _internal_has_ast_let_whitespace() const;
  public:
  void clear_ast_let_whitespace();
  const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& ast_let_whitespace() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* release_ast_let_whitespace();
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* mutable_ast_let_whitespace();
  void set_allocated_ast_let_whitespace(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ast_let_whitespace);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& _internal_ast_let_whitespace() const;
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* _internal_mutable_ast_let_whitespace();
  public:
  void unsafe_arena_set_allocated_ast_let_whitespace(
      ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ast_let_whitespace);
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* unsafe_arena_release_ast_let_whitespace();

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
  bool has_ast_tract_list() const;
  private:
  bool _internal_has_ast_tract_list() const;
  public:
  void clear_ast_tract_list();
  const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& ast_tract_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTUidTractList* release_ast_tract_list();
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* mutable_ast_tract_list();
  void set_allocated_ast_tract_list(::TSCE::ASTNodeArrayArchive_ASTUidTractList* ast_tract_list);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& _internal_ast_tract_list() const;
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* _internal_mutable_ast_tract_list();
  public:
  void unsafe_arena_set_allocated_ast_tract_list(
      ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ast_tract_list);
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* unsafe_arena_release_ast_tract_list();

  // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
  bool has_ast_category_ref() const;
  private:
  bool _internal_has_ast_category_ref() const;
  public:
  void clear_ast_category_ref();
  const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& ast_category_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* release_ast_category_ref();
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* mutable_ast_category_ref();
  void set_allocated_ast_category_ref(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ast_category_ref);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& _internal_ast_category_ref() const;
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* _internal_mutable_ast_category_ref();
  public:
  void unsafe_arena_set_allocated_ast_category_ref(
      ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ast_category_ref);
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* unsafe_arena_release_ast_category_ref();

  // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
  bool has_ast_colon_tract() const;
  private:
  bool _internal_has_ast_colon_tract() const;
  public:
  void clear_ast_colon_tract();
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& ast_colon_tract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* release_ast_colon_tract();
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* mutable_ast_colon_tract();
  void set_allocated_ast_colon_tract(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ast_colon_tract);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& _internal_ast_colon_tract() const;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* _internal_mutable_ast_colon_tract();
  public:
  void unsafe_arena_set_allocated_ast_colon_tract(
      ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ast_colon_tract);
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* unsafe_arena_release_ast_colon_tract();

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
  bool has_ast_frozen_sticky_bits() const;
  private:
  bool _internal_has_ast_frozen_sticky_bits() const;
  public:
  void clear_ast_frozen_sticky_bits();
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_frozen_sticky_bits() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive_ASTStickyBits* release_ast_frozen_sticky_bits();
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* mutable_ast_frozen_sticky_bits();
  void set_allocated_ast_frozen_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_frozen_sticky_bits);
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& _internal_ast_frozen_sticky_bits() const;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* _internal_mutable_ast_frozen_sticky_bits();
  public:
  void unsafe_arena_set_allocated_ast_frozen_sticky_bits(
      ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_frozen_sticky_bits);
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* unsafe_arena_release_ast_frozen_sticky_bits();

  // optional uint32 AST_function_node_index = 2;
  bool has_ast_function_node_index() const;
  private:
  bool _internal_has_ast_function_node_index() const;
  public:
  void clear_ast_function_node_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_function_node_index() const;
  void set_ast_function_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_function_node_index() const;
  void _internal_set_ast_function_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_function_node_numArgs = 3;
  bool has_ast_function_node_numargs() const;
  private:
  bool _internal_has_ast_function_node_numargs() const;
  public:
  void clear_ast_function_node_numargs();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_function_node_numargs() const;
  void set_ast_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_function_node_numargs() const;
  void _internal_set_ast_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double AST_number_node_number = 4;
  bool has_ast_number_node_number() const;
  private:
  bool _internal_has_ast_number_node_number() const;
  public:
  void clear_ast_number_node_number();
  double ast_number_node_number() const;
  void set_ast_number_node_number(double value);
  private:
  double _internal_ast_number_node_number() const;
  void _internal_set_ast_number_node_number(double value);
  public:

  // optional double AST_date_node_dateNum = 7;
  bool has_ast_date_node_datenum() const;
  private:
  bool _internal_has_ast_date_node_datenum() const;
  public:
  void clear_ast_date_node_datenum();
  double ast_date_node_datenum() const;
  void set_ast_date_node_datenum(double value);
  private:
  double _internal_ast_date_node_datenum() const;
  void _internal_set_ast_date_node_datenum(double value);
  public:

  // optional double AST_duration_node_unitNum = 8;
  bool has_ast_duration_node_unitnum() const;
  private:
  bool _internal_has_ast_duration_node_unitnum() const;
  public:
  void clear_ast_duration_node_unitnum();
  double ast_duration_node_unitnum() const;
  void set_ast_duration_node_unitnum(double value);
  private:
  double _internal_ast_duration_node_unitnum() const;
  void _internal_set_ast_duration_node_unitnum(double value);
  public:

  // optional int32 AST_duration_node_unit = 9;
  bool has_ast_duration_node_unit() const;
  private:
  bool _internal_has_ast_duration_node_unit() const;
  public:
  void clear_ast_duration_node_unit();
  ::PROTOBUF_NAMESPACE_ID::int32 ast_duration_node_unit() const;
  void set_ast_duration_node_unit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ast_duration_node_unit() const;
  void _internal_set_ast_duration_node_unit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool AST_token_node_boolean = 10;
  bool has_ast_token_node_boolean() const;
  private:
  bool _internal_has_ast_token_node_boolean() const;
  public:
  void clear_ast_token_node_boolean();
  bool ast_token_node_boolean() const;
  void set_ast_token_node_boolean(bool value);
  private:
  bool _internal_ast_token_node_boolean() const;
  void _internal_set_ast_token_node_boolean(bool value);
  public:

  // optional uint32 AST_array_node_numCol = 11;
  bool has_ast_array_node_numcol() const;
  private:
  bool _internal_has_ast_array_node_numcol() const;
  public:
  void clear_ast_array_node_numcol();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_array_node_numcol() const;
  void set_ast_array_node_numcol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_array_node_numcol() const;
  void _internal_set_ast_array_node_numcol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_array_node_numRow = 12;
  bool has_ast_array_node_numrow() const;
  private:
  bool _internal_has_ast_array_node_numrow() const;
  public:
  void clear_ast_array_node_numrow();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_array_node_numrow() const;
  void set_ast_array_node_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_array_node_numrow() const;
  void _internal_set_ast_array_node_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_list_node_numArgs = 13;
  bool has_ast_list_node_numargs() const;
  private:
  bool _internal_has_ast_list_node_numargs() const;
  public:
  void clear_ast_list_node_numargs();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_list_node_numargs() const;
  void set_ast_list_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_list_node_numargs() const;
  void _internal_set_ast_list_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  bool has_ast_unknown_function_node_numargs() const;
  private:
  bool _internal_has_ast_unknown_function_node_numargs() const;
  public:
  void clear_ast_unknown_function_node_numargs();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_unknown_function_node_numargs() const;
  void set_ast_unknown_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_unknown_function_node_numargs() const;
  void _internal_set_ast_unknown_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool AST_boolean_node_boolean = 5;
  bool has_ast_boolean_node_boolean() const;
  private:
  bool _internal_has_ast_boolean_node_boolean() const;
  public:
  void clear_ast_boolean_node_boolean();
  bool ast_boolean_node_boolean() const;
  void set_ast_boolean_node_boolean(bool value);
  private:
  bool _internal_ast_boolean_node_boolean() const;
  void _internal_set_ast_boolean_node_boolean(bool value);
  public:

  // optional bool AST_date_node_suppress_date_format = 19;
  bool has_ast_date_node_suppress_date_format() const;
  private:
  bool _internal_has_ast_date_node_suppress_date_format() const;
  public:
  void clear_ast_date_node_suppress_date_format();
  bool ast_date_node_suppress_date_format() const;
  void set_ast_date_node_suppress_date_format(bool value);
  private:
  bool _internal_ast_date_node_suppress_date_format() const;
  void _internal_set_ast_date_node_suppress_date_format(bool value);
  public:

  // optional bool AST_date_node_suppress_time_format = 20;
  bool has_ast_date_node_suppress_time_format() const;
  private:
  bool _internal_has_ast_date_node_suppress_time_format() const;
  public:
  void clear_ast_date_node_suppress_time_format();
  bool ast_date_node_suppress_time_format() const;
  void set_ast_date_node_suppress_time_format(bool value);
  private:
  bool _internal_ast_date_node_suppress_time_format() const;
  void _internal_set_ast_date_node_suppress_time_format(bool value);
  public:

  // optional bool AST_duration_node_use_automatic_units = 29;
  bool has_ast_duration_node_use_automatic_units() const;
  private:
  bool _internal_has_ast_duration_node_use_automatic_units() const;
  public:
  void clear_ast_duration_node_use_automatic_units();
  bool ast_duration_node_use_automatic_units() const;
  void set_ast_duration_node_use_automatic_units(bool value);
  private:
  bool _internal_ast_duration_node_use_automatic_units() const;
  void _internal_set_ast_duration_node_use_automatic_units(bool value);
  public:

  // optional uint32 AST_duration_node_style = 22;
  bool has_ast_duration_node_style() const;
  private:
  bool _internal_has_ast_duration_node_style() const;
  public:
  void clear_ast_duration_node_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_style() const;
  void set_ast_duration_node_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_duration_node_style() const;
  void _internal_set_ast_duration_node_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  bool has_ast_duration_node_duration_unit_largest() const;
  private:
  bool _internal_has_ast_duration_node_duration_unit_largest() const;
  public:
  void clear_ast_duration_node_duration_unit_largest();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_duration_unit_largest() const;
  void set_ast_duration_node_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_duration_node_duration_unit_largest() const;
  void _internal_set_ast_duration_node_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  bool has_ast_duration_node_duration_unit_smallest() const;
  private:
  bool _internal_has_ast_duration_node_duration_unit_smallest() const;
  public:
  void clear_ast_duration_node_duration_unit_smallest();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_duration_unit_smallest() const;
  void set_ast_duration_node_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_duration_node_duration_unit_smallest() const;
  void _internal_set_ast_duration_node_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 AST_number_node_decimal_low = 42;
  bool has_ast_number_node_decimal_low() const;
  private:
  bool _internal_has_ast_number_node_decimal_low() const;
  public:
  void clear_ast_number_node_decimal_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 ast_number_node_decimal_low() const;
  void set_ast_number_node_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ast_number_node_decimal_low() const;
  void _internal_set_ast_number_node_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 AST_symbol = 37;
  bool has_ast_symbol() const;
  private:
  bool _internal_has_ast_symbol() const;
  public:
  void clear_ast_symbol();
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_symbol() const;
  void set_ast_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ast_symbol() const;
  void _internal_set_ast_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 AST_number_node_decimal_high = 43;
  bool has_ast_number_node_decimal_high() const;
  private:
  bool _internal_has_ast_number_node_decimal_high() const;
  public:
  void clear_ast_number_node_decimal_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 ast_number_node_decimal_high() const;
  void set_ast_number_node_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ast_number_node_decimal_high() const;
  void _internal_set_ast_number_node_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  bool has_ast_node_type() const;
  private:
  bool _internal_has_ast_node_type() const;
  public:
  void clear_ast_node_type();
  ::TSCE::ASTNodeArrayArchive_ASTNodeType ast_node_type() const;
  void set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value);
  private:
  ::TSCE::ASTNodeArrayArchive_ASTNodeType _internal_ast_node_type() const;
  void _internal_set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_string_node_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_unknown_function_node_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_date_node_date_time_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_whitespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ast_let_identifier_;
  ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array_;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference_;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference_;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column_;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row_;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info_;
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ast_uid_coordinate_;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_sticky_bits_;
  ::TSCE::ASTNodeArrayArchive* ast_let_e2_;
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ast_let_whitespace_;
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ast_tract_list_;
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ast_category_ref_;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ast_colon_tract_;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_frozen_sticky_bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_function_node_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_function_node_numargs_;
  double ast_number_node_number_;
  double ast_date_node_datenum_;
  double ast_duration_node_unitnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 ast_duration_node_unit_;
  bool ast_token_node_boolean_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_array_node_numcol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_array_node_numrow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_list_node_numargs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_unknown_function_node_numargs_;
  bool ast_boolean_node_boolean_;
  bool ast_date_node_suppress_date_format_;
  bool ast_date_node_suppress_time_format_;
  bool ast_duration_node_use_automatic_units_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_duration_unit_largest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_duration_node_duration_unit_smallest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ast_number_node_decimal_low_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ast_symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ast_number_node_decimal_high_;
  int ast_node_type_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ASTNodeArrayArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ASTNodeArrayArchive) */ {
 public:
  inline ASTNodeArrayArchive() : ASTNodeArrayArchive(nullptr) {}
  ~ASTNodeArrayArchive() override;
  explicit constexpr ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ASTNodeArrayArchive(const ASTNodeArrayArchive& from);
  ASTNodeArrayArchive(ASTNodeArrayArchive&& from) noexcept
    : ASTNodeArrayArchive() {
    *this = ::std::move(from);
  }

  inline ASTNodeArrayArchive& operator=(const ASTNodeArrayArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASTNodeArrayArchive& operator=(ASTNodeArrayArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ASTNodeArrayArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ASTNodeArrayArchive* internal_default_instance() {
    return reinterpret_cast<const ASTNodeArrayArchive*>(
               &_ASTNodeArrayArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ASTNodeArrayArchive& a, ASTNodeArrayArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ASTNodeArrayArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASTNodeArrayArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASTNodeArrayArchive* New() const final {
    return CreateMaybeMessage<ASTNodeArrayArchive>(nullptr);
  }

  ASTNodeArrayArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASTNodeArrayArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASTNodeArrayArchive& from);
  void MergeFrom(const ASTNodeArrayArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNodeArrayArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ASTNodeArrayArchive";
  }
  protected:
  explicit ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive ASTLocalCellReferenceNodeArchive;
  typedef ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive ASTCrossTableCellReferenceNodeArchive;
  typedef ASTNodeArrayArchive_ASTColumnCoordinateArchive ASTColumnCoordinateArchive;
  typedef ASTNodeArrayArchive_ASTRowCoordinateArchive ASTRowCoordinateArchive;
  typedef ASTNodeArrayArchive_ASTUidList ASTUidList;
  typedef ASTNodeArrayArchive_ASTUidTract ASTUidTract;
  typedef ASTNodeArrayArchive_ASTStickyBits ASTStickyBits;
  typedef ASTNodeArrayArchive_ASTUidTractList ASTUidTractList;
  typedef ASTNodeArrayArchive_ASTUidCoordinateArchive ASTUidCoordinateArchive;
  typedef ASTNodeArrayArchive_ASTCategoryReferenceArchive ASTCategoryReferenceArchive;
  typedef ASTNodeArrayArchive_ASTColonTractArchive ASTColonTractArchive;
  typedef ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive ASTCrossTableReferenceExtraInfoArchive;
  typedef ASTNodeArrayArchive_ASTLetNodeWhitespace ASTLetNodeWhitespace;
  typedef ASTNodeArrayArchive_ASTNodeArchive ASTNodeArchive;

  typedef ASTNodeArrayArchive_ASTNodeType ASTNodeType;
  static constexpr ASTNodeType ADDITION_NODE =
    ASTNodeArrayArchive_ASTNodeType_ADDITION_NODE;
  static constexpr ASTNodeType SUBTRACTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_SUBTRACTION_NODE;
  static constexpr ASTNodeType MULTIPLICATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_MULTIPLICATION_NODE;
  static constexpr ASTNodeType DIVISION_NODE =
    ASTNodeArrayArchive_ASTNodeType_DIVISION_NODE;
  static constexpr ASTNodeType POWER_NODE =
    ASTNodeArrayArchive_ASTNodeType_POWER_NODE;
  static constexpr ASTNodeType CONCATENATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_CONCATENATION_NODE;
  static constexpr ASTNodeType GREATER_THAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_NODE;
  static constexpr ASTNodeType GREATER_THAN_OR_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_GREATER_THAN_OR_EQUAL_TO_NODE;
  static constexpr ASTNodeType LESS_THAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_LESS_THAN_NODE;
  static constexpr ASTNodeType LESS_THAN_OR_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_LESS_THAN_OR_EQUAL_TO_NODE;
  static constexpr ASTNodeType EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_EQUAL_TO_NODE;
  static constexpr ASTNodeType NOT_EQUAL_TO_NODE =
    ASTNodeArrayArchive_ASTNodeType_NOT_EQUAL_TO_NODE;
  static constexpr ASTNodeType NEGATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_NEGATION_NODE;
  static constexpr ASTNodeType PLUS_SIGN_NODE =
    ASTNodeArrayArchive_ASTNodeType_PLUS_SIGN_NODE;
  static constexpr ASTNodeType PERCENT_NODE =
    ASTNodeArrayArchive_ASTNodeType_PERCENT_NODE;
  static constexpr ASTNodeType FUNCTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_FUNCTION_NODE;
  static constexpr ASTNodeType NUMBER_NODE =
    ASTNodeArrayArchive_ASTNodeType_NUMBER_NODE;
  static constexpr ASTNodeType BOOLEAN_NODE =
    ASTNodeArrayArchive_ASTNodeType_BOOLEAN_NODE;
  static constexpr ASTNodeType STRING_NODE =
    ASTNodeArrayArchive_ASTNodeType_STRING_NODE;
  static constexpr ASTNodeType DATE_NODE =
    ASTNodeArrayArchive_ASTNodeType_DATE_NODE;
  static constexpr ASTNodeType DURATION_NODE =
    ASTNodeArrayArchive_ASTNodeType_DURATION_NODE;
  static constexpr ASTNodeType EMPTY_ARGUMENT_NODE =
    ASTNodeArrayArchive_ASTNodeType_EMPTY_ARGUMENT_NODE;
  static constexpr ASTNodeType TOKEN_NODE =
    ASTNodeArrayArchive_ASTNodeType_TOKEN_NODE;
  static constexpr ASTNodeType ARRAY_NODE =
    ASTNodeArrayArchive_ASTNodeType_ARRAY_NODE;
  static constexpr ASTNodeType LIST_NODE =
    ASTNodeArrayArchive_ASTNodeType_LIST_NODE;
  static constexpr ASTNodeType THUNK_NODE =
    ASTNodeArrayArchive_ASTNodeType_THUNK_NODE;
  static constexpr ASTNodeType LOCAL_CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_LOCAL_CELL_REFERENCE_NODE;
  static constexpr ASTNodeType CROSS_TABLE_CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_CROSS_TABLE_CELL_REFERENCE_NODE;
  static constexpr ASTNodeType COLON_NODE =
    ASTNodeArrayArchive_ASTNodeType_COLON_NODE;
  static constexpr ASTNodeType REFERENCE_ERROR_NODE =
    ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_NODE;
  static constexpr ASTNodeType UNKNOWN_FUNCTION_NODE =
    ASTNodeArrayArchive_ASTNodeType_UNKNOWN_FUNCTION_NODE;
  static constexpr ASTNodeType APPEND_WHITESPACE_NODE =
    ASTNodeArrayArchive_ASTNodeType_APPEND_WHITESPACE_NODE;
  static constexpr ASTNodeType PREPEND_WHITESPACE_NODE =
    ASTNodeArrayArchive_ASTNodeType_PREPEND_WHITESPACE_NODE;
  static constexpr ASTNodeType BEGIN_EMBEDDED_NODE_ARRAY =
    ASTNodeArrayArchive_ASTNodeType_BEGIN_EMBEDDED_NODE_ARRAY;
  static constexpr ASTNodeType END_THUNK_NODE =
    ASTNodeArrayArchive_ASTNodeType_END_THUNK_NODE;
  static constexpr ASTNodeType CELL_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_CELL_REFERENCE_NODE;
  static constexpr ASTNodeType COLON_NODE_WITH_UIDS =
    ASTNodeArrayArchive_ASTNodeType_COLON_NODE_WITH_UIDS;
  static constexpr ASTNodeType REFERENCE_ERROR_WITH_UIDS =
    ASTNodeArrayArchive_ASTNodeType_REFERENCE_ERROR_WITH_UIDS;
  static constexpr ASTNodeType UID_REFERENCE_NODE =
    ASTNodeArrayArchive_ASTNodeType_UID_REFERENCE_NODE;
  static constexpr ASTNodeType LET_NODE =
    ASTNodeArrayArchive_ASTNodeType_LET_NODE;
  static constexpr ASTNodeType LET_VAR_NODE =
    ASTNodeArrayArchive_ASTNodeType_LET_VAR_NODE;
  static constexpr ASTNodeType LET_END_NODE =
    ASTNodeArrayArchive_ASTNodeType_LET_END_NODE;
  static constexpr ASTNodeType LINKED_CELL_REF_NODE =
    ASTNodeArrayArchive_ASTNodeType_LINKED_CELL_REF_NODE;
  static constexpr ASTNodeType LINKED_COLUMN_REF_NODE =
    ASTNodeArrayArchive_ASTNodeType_LINKED_COLUMN_REF_NODE;
  static constexpr ASTNodeType LINKED_ROW_REF_NODE =
    ASTNodeArrayArchive_ASTNodeType_LINKED_ROW_REF_NODE;
  static constexpr ASTNodeType CATEGORY_REF_NODE =
    ASTNodeArrayArchive_ASTNodeType_CATEGORY_REF_NODE;
  static constexpr ASTNodeType COLON_TRACT_NODE =
    ASTNodeArrayArchive_ASTNodeType_COLON_TRACT_NODE;
  static inline bool ASTNodeType_IsValid(int value) {
    return ASTNodeArrayArchive_ASTNodeType_IsValid(value);
  }
  static constexpr ASTNodeType ASTNodeType_MIN =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MIN;
  static constexpr ASTNodeType ASTNodeType_MAX =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_MAX;
  static constexpr int ASTNodeType_ARRAYSIZE =
    ASTNodeArrayArchive_ASTNodeType_ASTNodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ASTNodeType_descriptor() {
    return ASTNodeArrayArchive_ASTNodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ASTNodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ASTNodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ASTNodeType_Name.");
    return ASTNodeArrayArchive_ASTNodeType_Name(enum_t_value);
  }
  static inline bool ASTNodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ASTNodeType* value) {
    return ASTNodeArrayArchive_ASTNodeType_Parse(name, value);
  }

  typedef ASTNodeArrayArchive_ASTUidTractPurpose ASTUidTractPurpose;
  static constexpr ASTUidTractPurpose UIDS_INCLUDED =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_INCLUDED;
  static constexpr ASTUidTractPurpose UIDS_PREMERGE =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMERGE;
  static constexpr ASTUidTractPurpose UIDS_PREMOVEREGION =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMOVEREGION;
  static constexpr ASTUidTractPurpose UIDS_EXCLUDED =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_EXCLUDED;
  static constexpr ASTUidTractPurpose UIDS_ACTIVE =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_ACTIVE;
  static constexpr ASTUidTractPurpose UIDS_PREMERGE_TOPLEFT =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_PREMERGE_TOPLEFT;
  static constexpr ASTUidTractPurpose UIDS_REMOVED_BY_MOVE =
    ASTNodeArrayArchive_ASTUidTractPurpose_UIDS_REMOVED_BY_MOVE;
  static inline bool ASTUidTractPurpose_IsValid(int value) {
    return ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(value);
  }
  static constexpr ASTUidTractPurpose ASTUidTractPurpose_MIN =
    ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_MIN;
  static constexpr ASTUidTractPurpose ASTUidTractPurpose_MAX =
    ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_MAX;
  static constexpr int ASTUidTractPurpose_ARRAYSIZE =
    ASTNodeArrayArchive_ASTUidTractPurpose_ASTUidTractPurpose_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ASTUidTractPurpose_descriptor() {
    return ASTNodeArrayArchive_ASTUidTractPurpose_descriptor();
  }
  template<typename T>
  static inline const std::string& ASTUidTractPurpose_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ASTUidTractPurpose>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ASTUidTractPurpose_Name.");
    return ASTNodeArrayArchive_ASTUidTractPurpose_Name(enum_t_value);
  }
  static inline bool ASTUidTractPurpose_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ASTUidTractPurpose* value) {
    return ASTNodeArrayArchive_ASTUidTractPurpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kASTNodeFieldNumber = 1,
  };
  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  int ast_node_size() const;
  private:
  int _internal_ast_node_size() const;
  public:
  void clear_ast_node();
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* mutable_ast_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >*
      mutable_ast_node();
  private:
  const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& _internal_ast_node(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* _internal_add_ast_node();
  public:
  const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ast_node(int index) const;
  ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* add_ast_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >&
      ast_node() const;

  // @@protoc_insertion_point(class_scope:TSCE.ASTNodeArrayArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive > ast_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaTranslationFlagsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaTranslationFlagsArchive) */ {
 public:
  inline FormulaTranslationFlagsArchive() : FormulaTranslationFlagsArchive(nullptr) {}
  ~FormulaTranslationFlagsArchive() override;
  explicit constexpr FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from);
  FormulaTranslationFlagsArchive(FormulaTranslationFlagsArchive&& from) noexcept
    : FormulaTranslationFlagsArchive() {
    *this = ::std::move(from);
  }

  inline FormulaTranslationFlagsArchive& operator=(const FormulaTranslationFlagsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaTranslationFlagsArchive& operator=(FormulaTranslationFlagsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaTranslationFlagsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaTranslationFlagsArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaTranslationFlagsArchive*>(
               &_FormulaTranslationFlagsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(FormulaTranslationFlagsArchive& a, FormulaTranslationFlagsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaTranslationFlagsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaTranslationFlagsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaTranslationFlagsArchive* New() const final {
    return CreateMaybeMessage<FormulaTranslationFlagsArchive>(nullptr);
  }

  FormulaTranslationFlagsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaTranslationFlagsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaTranslationFlagsArchive& from);
  void MergeFrom(const FormulaTranslationFlagsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaTranslationFlagsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaTranslationFlagsArchive";
  }
  protected:
  explicit FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcelImportTranslationFieldNumber = 1,
    kNumberToDateCoercionRemovalTranslationFieldNumber = 2,
    kContainsUidFormReferencesFieldNumber = 3,
    kContainsFrozenReferencesFieldNumber = 4,
  };
  // optional bool excel_import_translation = 1 [default = false];
  bool has_excel_import_translation() const;
  private:
  bool _internal_has_excel_import_translation() const;
  public:
  void clear_excel_import_translation();
  bool excel_import_translation() const;
  void set_excel_import_translation(bool value);
  private:
  bool _internal_excel_import_translation() const;
  void _internal_set_excel_import_translation(bool value);
  public:

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  bool has_number_to_date_coercion_removal_translation() const;
  private:
  bool _internal_has_number_to_date_coercion_removal_translation() const;
  public:
  void clear_number_to_date_coercion_removal_translation();
  bool number_to_date_coercion_removal_translation() const;
  void set_number_to_date_coercion_removal_translation(bool value);
  private:
  bool _internal_number_to_date_coercion_removal_translation() const;
  void _internal_set_number_to_date_coercion_removal_translation(bool value);
  public:

  // optional bool contains_uid_form_references = 3 [default = false];
  bool has_contains_uid_form_references() const;
  private:
  bool _internal_has_contains_uid_form_references() const;
  public:
  void clear_contains_uid_form_references();
  bool contains_uid_form_references() const;
  void set_contains_uid_form_references(bool value);
  private:
  bool _internal_contains_uid_form_references() const;
  void _internal_set_contains_uid_form_references(bool value);
  public:

  // optional bool contains_frozen_references = 4 [default = false];
  bool has_contains_frozen_references() const;
  private:
  bool _internal_has_contains_frozen_references() const;
  public:
  void clear_contains_frozen_references();
  bool contains_frozen_references() const;
  void set_contains_frozen_references(bool value);
  private:
  bool _internal_contains_frozen_references() const;
  void _internal_set_contains_frozen_references(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaTranslationFlagsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool excel_import_translation_;
  bool number_to_date_coercion_removal_translation_;
  bool contains_uid_form_references_;
  bool contains_frozen_references_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaArchive) */ {
 public:
  inline FormulaArchive() : FormulaArchive(nullptr) {}
  ~FormulaArchive() override;
  explicit constexpr FormulaArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaArchive(const FormulaArchive& from);
  FormulaArchive(FormulaArchive&& from) noexcept
    : FormulaArchive() {
    *this = ::std::move(from);
  }

  inline FormulaArchive& operator=(const FormulaArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaArchive& operator=(FormulaArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaArchive*>(
               &_FormulaArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(FormulaArchive& a, FormulaArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaArchive* New() const final {
    return CreateMaybeMessage<FormulaArchive>(nullptr);
  }

  FormulaArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaArchive& from);
  void MergeFrom(const FormulaArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaArchive";
  }
  protected:
  explicit FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASTNodeArrayFieldNumber = 1,
    kTranslationFlagsFieldNumber = 6,
    kHostTableUidFieldNumber = 7,
    kHostColumnUidFieldNumber = 8,
    kHostRowUidFieldNumber = 9,
    kHostColumnFieldNumber = 2,
    kHostRowFieldNumber = 3,
    kHostColumnIsNegativeFieldNumber = 4,
    kHostRowIsNegativeFieldNumber = 5,
  };
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  bool has_ast_node_array() const;
  private:
  bool _internal_has_ast_node_array() const;
  public:
  void clear_ast_node_array();
  const ::TSCE::ASTNodeArrayArchive& ast_node_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive* release_ast_node_array();
  ::TSCE::ASTNodeArrayArchive* mutable_ast_node_array();
  void set_allocated_ast_node_array(::TSCE::ASTNodeArrayArchive* ast_node_array);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast_node_array() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast_node_array();
  public:
  void unsafe_arena_set_allocated_ast_node_array(
      ::TSCE::ASTNodeArrayArchive* ast_node_array);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast_node_array();

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  bool has_translation_flags() const;
  private:
  bool _internal_has_translation_flags() const;
  public:
  void clear_translation_flags();
  const ::TSCE::FormulaTranslationFlagsArchive& translation_flags() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaTranslationFlagsArchive* release_translation_flags();
  ::TSCE::FormulaTranslationFlagsArchive* mutable_translation_flags();
  void set_allocated_translation_flags(::TSCE::FormulaTranslationFlagsArchive* translation_flags);
  private:
  const ::TSCE::FormulaTranslationFlagsArchive& _internal_translation_flags() const;
  ::TSCE::FormulaTranslationFlagsArchive* _internal_mutable_translation_flags();
  public:
  void unsafe_arena_set_allocated_translation_flags(
      ::TSCE::FormulaTranslationFlagsArchive* translation_flags);
  ::TSCE::FormulaTranslationFlagsArchive* unsafe_arena_release_translation_flags();

  // optional .TSP.UUID host_table_uid = 7;
  bool has_host_table_uid() const;
  private:
  bool _internal_has_host_table_uid() const;
  public:
  void clear_host_table_uid();
  const ::TSP::UUID& host_table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_host_table_uid();
  ::TSP::UUID* mutable_host_table_uid();
  void set_allocated_host_table_uid(::TSP::UUID* host_table_uid);
  private:
  const ::TSP::UUID& _internal_host_table_uid() const;
  ::TSP::UUID* _internal_mutable_host_table_uid();
  public:
  void unsafe_arena_set_allocated_host_table_uid(
      ::TSP::UUID* host_table_uid);
  ::TSP::UUID* unsafe_arena_release_host_table_uid();

  // optional .TSP.UUID host_column_uid = 8;
  bool has_host_column_uid() const;
  private:
  bool _internal_has_host_column_uid() const;
  public:
  void clear_host_column_uid();
  const ::TSP::UUID& host_column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_host_column_uid();
  ::TSP::UUID* mutable_host_column_uid();
  void set_allocated_host_column_uid(::TSP::UUID* host_column_uid);
  private:
  const ::TSP::UUID& _internal_host_column_uid() const;
  ::TSP::UUID* _internal_mutable_host_column_uid();
  public:
  void unsafe_arena_set_allocated_host_column_uid(
      ::TSP::UUID* host_column_uid);
  ::TSP::UUID* unsafe_arena_release_host_column_uid();

  // optional .TSP.UUID host_row_uid = 9;
  bool has_host_row_uid() const;
  private:
  bool _internal_has_host_row_uid() const;
  public:
  void clear_host_row_uid();
  const ::TSP::UUID& host_row_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_host_row_uid();
  ::TSP::UUID* mutable_host_row_uid();
  void set_allocated_host_row_uid(::TSP::UUID* host_row_uid);
  private:
  const ::TSP::UUID& _internal_host_row_uid() const;
  ::TSP::UUID* _internal_mutable_host_row_uid();
  public:
  void unsafe_arena_set_allocated_host_row_uid(
      ::TSP::UUID* host_row_uid);
  ::TSP::UUID* unsafe_arena_release_host_row_uid();

  // optional uint32 host_column = 2;
  bool has_host_column() const;
  private:
  bool _internal_has_host_column() const;
  public:
  void clear_host_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_column() const;
  void set_host_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_column() const;
  void _internal_set_host_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_row = 3;
  bool has_host_row() const;
  private:
  bool _internal_has_host_row() const;
  public:
  void clear_host_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_row() const;
  void set_host_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_row() const;
  void _internal_set_host_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool host_column_is_negative = 4 [default = false];
  bool has_host_column_is_negative() const;
  private:
  bool _internal_has_host_column_is_negative() const;
  public:
  void clear_host_column_is_negative();
  bool host_column_is_negative() const;
  void set_host_column_is_negative(bool value);
  private:
  bool _internal_host_column_is_negative() const;
  void _internal_set_host_column_is_negative(bool value);
  public:

  // optional bool host_row_is_negative = 5 [default = false];
  bool has_host_row_is_negative() const;
  private:
  bool _internal_has_host_row_is_negative() const;
  public:
  void clear_host_row_is_negative();
  bool host_row_is_negative() const;
  void set_host_row_is_negative(bool value);
  private:
  bool _internal_host_row_is_negative() const;
  void _internal_set_host_row_is_negative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::ASTNodeArrayArchive* ast_node_array_;
  ::TSCE::FormulaTranslationFlagsArchive* translation_flags_;
  ::TSP::UUID* host_table_uid_;
  ::TSP::UUID* host_column_uid_;
  ::TSP::UUID* host_row_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_row_;
  bool host_column_is_negative_;
  bool host_row_is_negative_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FunctorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FunctorArchive) */ {
 public:
  inline FunctorArchive() : FunctorArchive(nullptr) {}
  ~FunctorArchive() override;
  explicit constexpr FunctorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctorArchive(const FunctorArchive& from);
  FunctorArchive(FunctorArchive&& from) noexcept
    : FunctorArchive() {
    *this = ::std::move(from);
  }

  inline FunctorArchive& operator=(const FunctorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctorArchive& operator=(FunctorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctorArchive* internal_default_instance() {
    return reinterpret_cast<const FunctorArchive*>(
               &_FunctorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(FunctorArchive& a, FunctorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctorArchive* New() const final {
    return CreateMaybeMessage<FunctorArchive>(nullptr);
  }

  FunctorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctorArchive& from);
  void MergeFrom(const FunctorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FunctorArchive";
  }
  protected:
  explicit FunctorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 1,
    kNumArgsFieldNumber = 2,
  };
  // required .TSCE.FormulaArchive formula = 1;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // required uint32 num_args = 2;
  bool has_num_args() const;
  private:
  bool _internal_has_num_args() const;
  public:
  void clear_num_args();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_args() const;
  void set_num_args(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_args() const;
  void _internal_set_num_args(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FunctorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::FormulaArchive* formula_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_args_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormatStructArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormatStructArchive) */ {
 public:
  inline FormatStructArchive() : FormatStructArchive(nullptr) {}
  ~FormatStructArchive() override;
  explicit constexpr FormatStructArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStructArchive(const FormatStructArchive& from);
  FormatStructArchive(FormatStructArchive&& from) noexcept
    : FormatStructArchive() {
    *this = ::std::move(from);
  }

  inline FormatStructArchive& operator=(const FormatStructArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStructArchive& operator=(FormatStructArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStructArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStructArchive* internal_default_instance() {
    return reinterpret_cast<const FormatStructArchive*>(
               &_FormatStructArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(FormatStructArchive& a, FormatStructArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStructArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStructArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormatStructArchive* New() const final {
    return CreateMaybeMessage<FormatStructArchive>(nullptr);
  }

  FormatStructArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormatStructArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormatStructArchive& from);
  void MergeFrom(const FormatStructArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStructArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormatStructArchive";
  }
  protected:
  explicit FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 3,
    kDateTimeFormatFieldNumber = 14,
    kFormatTypeFieldNumber = 1,
    kDecimalPlacesFieldNumber = 2,
    kNegativeStyleFieldNumber = 4,
    kDurationStyleFieldNumber = 7,
    kBaseFieldNumber = 8,
    kShowThousandsSeparatorFieldNumber = 5,
    kUseAccountingStyleFieldNumber = 6,
    kBaseUseMinusSignFieldNumber = 10,
    kSuppressDateFormatFieldNumber = 12,
    kBasePlacesFieldNumber = 9,
    kFractionAccuracyFieldNumber = 11,
    kSuppressTimeFormatFieldNumber = 13,
    kDurationUnitLargestFieldNumber = 15,
    kDurationUnitSmallestFieldNumber = 16,
  };
  // optional string currency_code = 3;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional string date_time_format = 14;
  bool has_date_time_format() const;
  private:
  bool _internal_has_date_time_format() const;
  public:
  void clear_date_time_format();
  const std::string& date_time_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time_format();
  std::string* release_date_time_format();
  void set_allocated_date_time_format(std::string* date_time_format);
  private:
  const std::string& _internal_date_time_format() const;
  void _internal_set_date_time_format(const std::string& value);
  std::string* _internal_mutable_date_time_format();
  public:

  // required uint32 format_type = 1;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type() const;
  void set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_type() const;
  void _internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 decimal_places = 2;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places() const;
  void set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimal_places() const;
  void _internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 negative_style = 4;
  bool has_negative_style() const;
  private:
  bool _internal_has_negative_style() const;
  public:
  void clear_negative_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_style() const;
  void set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_negative_style() const;
  void _internal_set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_style = 7;
  bool has_duration_style() const;
  private:
  bool _internal_has_duration_style() const;
  public:
  void clear_duration_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_style() const;
  void set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_style() const;
  void _internal_set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 base = 8;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::uint32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool show_thousands_separator = 5;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // optional bool use_accounting_style = 6;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // optional bool base_use_minus_sign = 10;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // optional bool suppress_date_format = 12;
  bool has_suppress_date_format() const;
  private:
  bool _internal_has_suppress_date_format() const;
  public:
  void clear_suppress_date_format();
  bool suppress_date_format() const;
  void set_suppress_date_format(bool value);
  private:
  bool _internal_suppress_date_format() const;
  void _internal_set_suppress_date_format(bool value);
  public:

  // optional uint32 base_places = 9;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places() const;
  void set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_places() const;
  void _internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fraction_accuracy = 11;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_accuracy() const;
  void set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool suppress_time_format = 13;
  bool has_suppress_time_format() const;
  private:
  bool _internal_has_suppress_time_format() const;
  public:
  void clear_suppress_time_format();
  bool suppress_time_format() const;
  void set_suppress_time_format(bool value);
  private:
  bool _internal_suppress_time_format() const;
  void _internal_set_suppress_time_format(bool value);
  public:

  // optional uint32 duration_unit_largest = 15;
  bool has_duration_unit_largest() const;
  private:
  bool _internal_has_duration_unit_largest() const;
  public:
  void clear_duration_unit_largest();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_largest() const;
  void set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_unit_largest() const;
  void _internal_set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_unit_smallest = 16;
  bool has_duration_unit_smallest() const;
  private:
  bool _internal_has_duration_unit_smallest() const;
  public:
  void clear_duration_unit_smallest();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_smallest() const;
  void set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_unit_smallest() const;
  void _internal_set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormatStructArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places_;
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_;
  bool show_thousands_separator_;
  bool use_accounting_style_;
  bool base_use_minus_sign_;
  bool suppress_date_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_accuracy_;
  bool suppress_time_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_largest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_smallest_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeCoordinateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RangeCoordinateArchive) */ {
 public:
  inline RangeCoordinateArchive() : RangeCoordinateArchive(nullptr) {}
  ~RangeCoordinateArchive() override;
  explicit constexpr RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeCoordinateArchive(const RangeCoordinateArchive& from);
  RangeCoordinateArchive(RangeCoordinateArchive&& from) noexcept
    : RangeCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline RangeCoordinateArchive& operator=(const RangeCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeCoordinateArchive& operator=(RangeCoordinateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const RangeCoordinateArchive*>(
               &_RangeCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(RangeCoordinateArchive& a, RangeCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeCoordinateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeCoordinateArchive* New() const final {
    return CreateMaybeMessage<RangeCoordinateArchive>(nullptr);
  }

  RangeCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeCoordinateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeCoordinateArchive& from);
  void MergeFrom(const RangeCoordinateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeCoordinateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RangeCoordinateArchive";
  }
  protected:
  explicit RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftColumnFieldNumber = 1,
    kTopLeftRowFieldNumber = 2,
    kBottomRightColumnFieldNumber = 3,
    kBottomRightRowFieldNumber = 4,
  };
  // required uint32 top_left_column = 1;
  bool has_top_left_column() const;
  private:
  bool _internal_has_top_left_column() const;
  public:
  void clear_top_left_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_column() const;
  void set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_left_column() const;
  void _internal_set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 top_left_row = 2;
  bool has_top_left_row() const;
  private:
  bool _internal_has_top_left_row() const;
  public:
  void clear_top_left_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_row() const;
  void set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_left_row() const;
  void _internal_set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 bottom_right_column = 3;
  bool has_bottom_right_column() const;
  private:
  bool _internal_has_bottom_right_column() const;
  public:
  void clear_bottom_right_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_column() const;
  void set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bottom_right_column() const;
  void _internal_set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 bottom_right_row = 4;
  bool has_bottom_right_row() const;
  private:
  bool _internal_has_bottom_right_row() const;
  public:
  void clear_bottom_right_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_row() const;
  void set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bottom_right_row() const;
  void _internal_set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RangeCoordinateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_left_row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bottom_right_row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TableTransposeInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TableTransposeInfoArchive) */ {
 public:
  inline TableTransposeInfoArchive() : TableTransposeInfoArchive(nullptr) {}
  ~TableTransposeInfoArchive() override;
  explicit constexpr TableTransposeInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableTransposeInfoArchive(const TableTransposeInfoArchive& from);
  TableTransposeInfoArchive(TableTransposeInfoArchive&& from) noexcept
    : TableTransposeInfoArchive() {
    *this = ::std::move(from);
  }

  inline TableTransposeInfoArchive& operator=(const TableTransposeInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableTransposeInfoArchive& operator=(TableTransposeInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableTransposeInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableTransposeInfoArchive* internal_default_instance() {
    return reinterpret_cast<const TableTransposeInfoArchive*>(
               &_TableTransposeInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TableTransposeInfoArchive& a, TableTransposeInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableTransposeInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableTransposeInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableTransposeInfoArchive* New() const final {
    return CreateMaybeMessage<TableTransposeInfoArchive>(nullptr);
  }

  TableTransposeInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableTransposeInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableTransposeInfoArchive& from);
  void MergeFrom(const TableTransposeInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableTransposeInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TableTransposeInfoArchive";
  }
  protected:
  explicit TableTransposeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyRangeForTransposedTableFieldNumber = 4,
    kNumberOfFooterRowsFieldNumber = 3,
  };
  // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
  bool has_body_range_for_transposed_table() const;
  private:
  bool _internal_has_body_range_for_transposed_table() const;
  public:
  void clear_body_range_for_transposed_table();
  const ::TSCE::RangeCoordinateArchive& body_range_for_transposed_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_body_range_for_transposed_table();
  ::TSCE::RangeCoordinateArchive* mutable_body_range_for_transposed_table();
  void set_allocated_body_range_for_transposed_table(::TSCE::RangeCoordinateArchive* body_range_for_transposed_table);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_body_range_for_transposed_table() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_body_range_for_transposed_table();
  public:
  void unsafe_arena_set_allocated_body_range_for_transposed_table(
      ::TSCE::RangeCoordinateArchive* body_range_for_transposed_table);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_body_range_for_transposed_table();

  // required uint32 number_of_footer_rows = 3;
  bool has_number_of_footer_rows() const;
  private:
  bool _internal_has_number_of_footer_rows() const;
  public:
  void clear_number_of_footer_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_footer_rows() const;
  void set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_footer_rows() const;
  void _internal_set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.TableTransposeInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RangeCoordinateArchive* body_range_for_transposed_table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_footer_rows_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeOriginMovedArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.MergeOriginMovedArchive) */ {
 public:
  inline MergeOriginMovedArchive() : MergeOriginMovedArchive(nullptr) {}
  ~MergeOriginMovedArchive() override;
  explicit constexpr MergeOriginMovedArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeOriginMovedArchive(const MergeOriginMovedArchive& from);
  MergeOriginMovedArchive(MergeOriginMovedArchive&& from) noexcept
    : MergeOriginMovedArchive() {
    *this = ::std::move(from);
  }

  inline MergeOriginMovedArchive& operator=(const MergeOriginMovedArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeOriginMovedArchive& operator=(MergeOriginMovedArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeOriginMovedArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeOriginMovedArchive* internal_default_instance() {
    return reinterpret_cast<const MergeOriginMovedArchive*>(
               &_MergeOriginMovedArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(MergeOriginMovedArchive& a, MergeOriginMovedArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeOriginMovedArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeOriginMovedArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeOriginMovedArchive* New() const final {
    return CreateMaybeMessage<MergeOriginMovedArchive>(nullptr);
  }

  MergeOriginMovedArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeOriginMovedArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeOriginMovedArchive& from);
  void MergeFrom(const MergeOriginMovedArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeOriginMovedArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.MergeOriginMovedArchive";
  }
  protected:
  explicit MergeOriginMovedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcColumnFieldNumber = 1,
    kSrcRowFieldNumber = 2,
    kDstColumnFieldNumber = 3,
    kDstRowFieldNumber = 4,
  };
  // repeated uint32 src_column = 1;
  int src_column_size() const;
  private:
  int _internal_src_column_size() const;
  public:
  void clear_src_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_src_column() const;
  void _internal_add_src_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_src_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 src_column(int index) const;
  void set_src_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_src_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      src_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_src_column();

  // repeated uint32 src_row = 2;
  int src_row_size() const;
  private:
  int _internal_src_row_size() const;
  public:
  void clear_src_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_src_row() const;
  void _internal_add_src_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_src_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 src_row(int index) const;
  void set_src_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_src_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      src_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_src_row();

  // repeated uint32 dst_column = 3;
  int dst_column_size() const;
  private:
  int _internal_dst_column_size() const;
  public:
  void clear_dst_column();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_column(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dst_column() const;
  void _internal_add_dst_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dst_column();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_column(int index) const;
  void set_dst_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dst_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dst_column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dst_column();

  // repeated uint32 dst_row = 4;
  int dst_row_size() const;
  private:
  int _internal_dst_row_size() const;
  public:
  void clear_dst_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dst_row() const;
  void _internal_add_dst_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dst_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_row(int index) const;
  void set_dst_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dst_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dst_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dst_row();

  // @@protoc_insertion_point(class_scope:TSCE.MergeOriginMovedArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > src_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > src_row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dst_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dst_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class OwnerUIDMapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.OwnerUIDMapperArchive) */ {
 public:
  inline OwnerUIDMapperArchive() : OwnerUIDMapperArchive(nullptr) {}
  ~OwnerUIDMapperArchive() override;
  explicit constexpr OwnerUIDMapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OwnerUIDMapperArchive(const OwnerUIDMapperArchive& from);
  OwnerUIDMapperArchive(OwnerUIDMapperArchive&& from) noexcept
    : OwnerUIDMapperArchive() {
    *this = ::std::move(from);
  }

  inline OwnerUIDMapperArchive& operator=(const OwnerUIDMapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnerUIDMapperArchive& operator=(OwnerUIDMapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OwnerUIDMapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OwnerUIDMapperArchive* internal_default_instance() {
    return reinterpret_cast<const OwnerUIDMapperArchive*>(
               &_OwnerUIDMapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(OwnerUIDMapperArchive& a, OwnerUIDMapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnerUIDMapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OwnerUIDMapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnerUIDMapperArchive* New() const final {
    return CreateMaybeMessage<OwnerUIDMapperArchive>(nullptr);
  }

  OwnerUIDMapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnerUIDMapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnerUIDMapperArchive& from);
  void MergeFrom(const OwnerUIDMapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnerUIDMapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.OwnerUIDMapperArchive";
  }
  protected:
  explicit OwnerUIDMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableUidFieldNumber = 1,
    kNextTableUidFieldNumber = 2,
    kHiddenStateForRowsOwnerUidFieldNumber = 3,
    kNextHiddenStateForRowsOwnerUidFieldNumber = 4,
    kHiddenStateForColumnsOwnerUidFieldNumber = 5,
    kNextHiddenStateForColumnsOwnerUidFieldNumber = 6,
    kConditionalStyleOwnerUidFieldNumber = 7,
    kNextConditionalStyleOwnerUidFieldNumber = 8,
    kSortRuleReferenceTrackerOwnerUidFieldNumber = 9,
    kNextSortRuleReferenceTrackerOwnerUidFieldNumber = 10,
    kMergeOwnerUidFieldNumber = 11,
    kNextMergeOwnerUidFieldNumber = 12,
    kCategoryOwnerUidFieldNumber = 13,
    kNextCategoryOwnerUidFieldNumber = 14,
    kCategoryAggregatesOwnerUidFieldNumber = 15,
    kNextCategoryAggregatesOwnerUidFieldNumber = 16,
    kGroupByUidFieldNumber = 17,
    kNextGroupByUidFieldNumber = 18,
    kPencilAnnotationOwnerUidFieldNumber = 19,
    kNextPencilAnnotationOwnerUidFieldNumber = 20,
  };
  // required .TSP.UUID table_uid = 1;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // required .TSP.UUID next_table_uid = 2;
  bool has_next_table_uid() const;
  private:
  bool _internal_has_next_table_uid() const;
  public:
  void clear_next_table_uid();
  const ::TSP::UUID& next_table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_table_uid();
  ::TSP::UUID* mutable_next_table_uid();
  void set_allocated_next_table_uid(::TSP::UUID* next_table_uid);
  private:
  const ::TSP::UUID& _internal_next_table_uid() const;
  ::TSP::UUID* _internal_mutable_next_table_uid();
  public:
  void unsafe_arena_set_allocated_next_table_uid(
      ::TSP::UUID* next_table_uid);
  ::TSP::UUID* unsafe_arena_release_next_table_uid();

  // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
  bool has_hidden_state_for_rows_owner_uid() const;
  private:
  bool _internal_has_hidden_state_for_rows_owner_uid() const;
  public:
  void clear_hidden_state_for_rows_owner_uid();
  const ::TSP::UUID& hidden_state_for_rows_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_hidden_state_for_rows_owner_uid();
  ::TSP::UUID* mutable_hidden_state_for_rows_owner_uid();
  void set_allocated_hidden_state_for_rows_owner_uid(::TSP::UUID* hidden_state_for_rows_owner_uid);
  private:
  const ::TSP::UUID& _internal_hidden_state_for_rows_owner_uid() const;
  ::TSP::UUID* _internal_mutable_hidden_state_for_rows_owner_uid();
  public:
  void unsafe_arena_set_allocated_hidden_state_for_rows_owner_uid(
      ::TSP::UUID* hidden_state_for_rows_owner_uid);
  ::TSP::UUID* unsafe_arena_release_hidden_state_for_rows_owner_uid();

  // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
  bool has_next_hidden_state_for_rows_owner_uid() const;
  private:
  bool _internal_has_next_hidden_state_for_rows_owner_uid() const;
  public:
  void clear_next_hidden_state_for_rows_owner_uid();
  const ::TSP::UUID& next_hidden_state_for_rows_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_hidden_state_for_rows_owner_uid();
  ::TSP::UUID* mutable_next_hidden_state_for_rows_owner_uid();
  void set_allocated_next_hidden_state_for_rows_owner_uid(::TSP::UUID* next_hidden_state_for_rows_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_hidden_state_for_rows_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_hidden_state_for_rows_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_hidden_state_for_rows_owner_uid(
      ::TSP::UUID* next_hidden_state_for_rows_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_hidden_state_for_rows_owner_uid();

  // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
  bool has_hidden_state_for_columns_owner_uid() const;
  private:
  bool _internal_has_hidden_state_for_columns_owner_uid() const;
  public:
  void clear_hidden_state_for_columns_owner_uid();
  const ::TSP::UUID& hidden_state_for_columns_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_hidden_state_for_columns_owner_uid();
  ::TSP::UUID* mutable_hidden_state_for_columns_owner_uid();
  void set_allocated_hidden_state_for_columns_owner_uid(::TSP::UUID* hidden_state_for_columns_owner_uid);
  private:
  const ::TSP::UUID& _internal_hidden_state_for_columns_owner_uid() const;
  ::TSP::UUID* _internal_mutable_hidden_state_for_columns_owner_uid();
  public:
  void unsafe_arena_set_allocated_hidden_state_for_columns_owner_uid(
      ::TSP::UUID* hidden_state_for_columns_owner_uid);
  ::TSP::UUID* unsafe_arena_release_hidden_state_for_columns_owner_uid();

  // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
  bool has_next_hidden_state_for_columns_owner_uid() const;
  private:
  bool _internal_has_next_hidden_state_for_columns_owner_uid() const;
  public:
  void clear_next_hidden_state_for_columns_owner_uid();
  const ::TSP::UUID& next_hidden_state_for_columns_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_hidden_state_for_columns_owner_uid();
  ::TSP::UUID* mutable_next_hidden_state_for_columns_owner_uid();
  void set_allocated_next_hidden_state_for_columns_owner_uid(::TSP::UUID* next_hidden_state_for_columns_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_hidden_state_for_columns_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_hidden_state_for_columns_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_hidden_state_for_columns_owner_uid(
      ::TSP::UUID* next_hidden_state_for_columns_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_hidden_state_for_columns_owner_uid();

  // required .TSP.UUID conditional_style_owner_uid = 7;
  bool has_conditional_style_owner_uid() const;
  private:
  bool _internal_has_conditional_style_owner_uid() const;
  public:
  void clear_conditional_style_owner_uid();
  const ::TSP::UUID& conditional_style_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_conditional_style_owner_uid();
  ::TSP::UUID* mutable_conditional_style_owner_uid();
  void set_allocated_conditional_style_owner_uid(::TSP::UUID* conditional_style_owner_uid);
  private:
  const ::TSP::UUID& _internal_conditional_style_owner_uid() const;
  ::TSP::UUID* _internal_mutable_conditional_style_owner_uid();
  public:
  void unsafe_arena_set_allocated_conditional_style_owner_uid(
      ::TSP::UUID* conditional_style_owner_uid);
  ::TSP::UUID* unsafe_arena_release_conditional_style_owner_uid();

  // required .TSP.UUID next_conditional_style_owner_uid = 8;
  bool has_next_conditional_style_owner_uid() const;
  private:
  bool _internal_has_next_conditional_style_owner_uid() const;
  public:
  void clear_next_conditional_style_owner_uid();
  const ::TSP::UUID& next_conditional_style_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_conditional_style_owner_uid();
  ::TSP::UUID* mutable_next_conditional_style_owner_uid();
  void set_allocated_next_conditional_style_owner_uid(::TSP::UUID* next_conditional_style_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_conditional_style_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_conditional_style_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_conditional_style_owner_uid(
      ::TSP::UUID* next_conditional_style_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_conditional_style_owner_uid();

  // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
  bool has_sort_rule_reference_tracker_owner_uid() const;
  private:
  bool _internal_has_sort_rule_reference_tracker_owner_uid() const;
  public:
  void clear_sort_rule_reference_tracker_owner_uid();
  const ::TSP::UUID& sort_rule_reference_tracker_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sort_rule_reference_tracker_owner_uid();
  ::TSP::UUID* mutable_sort_rule_reference_tracker_owner_uid();
  void set_allocated_sort_rule_reference_tracker_owner_uid(::TSP::UUID* sort_rule_reference_tracker_owner_uid);
  private:
  const ::TSP::UUID& _internal_sort_rule_reference_tracker_owner_uid() const;
  ::TSP::UUID* _internal_mutable_sort_rule_reference_tracker_owner_uid();
  public:
  void unsafe_arena_set_allocated_sort_rule_reference_tracker_owner_uid(
      ::TSP::UUID* sort_rule_reference_tracker_owner_uid);
  ::TSP::UUID* unsafe_arena_release_sort_rule_reference_tracker_owner_uid();

  // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
  bool has_next_sort_rule_reference_tracker_owner_uid() const;
  private:
  bool _internal_has_next_sort_rule_reference_tracker_owner_uid() const;
  public:
  void clear_next_sort_rule_reference_tracker_owner_uid();
  const ::TSP::UUID& next_sort_rule_reference_tracker_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_sort_rule_reference_tracker_owner_uid();
  ::TSP::UUID* mutable_next_sort_rule_reference_tracker_owner_uid();
  void set_allocated_next_sort_rule_reference_tracker_owner_uid(::TSP::UUID* next_sort_rule_reference_tracker_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_sort_rule_reference_tracker_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_sort_rule_reference_tracker_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_sort_rule_reference_tracker_owner_uid(
      ::TSP::UUID* next_sort_rule_reference_tracker_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_sort_rule_reference_tracker_owner_uid();

  // required .TSP.UUID merge_owner_uid = 11;
  bool has_merge_owner_uid() const;
  private:
  bool _internal_has_merge_owner_uid() const;
  public:
  void clear_merge_owner_uid();
  const ::TSP::UUID& merge_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_merge_owner_uid();
  ::TSP::UUID* mutable_merge_owner_uid();
  void set_allocated_merge_owner_uid(::TSP::UUID* merge_owner_uid);
  private:
  const ::TSP::UUID& _internal_merge_owner_uid() const;
  ::TSP::UUID* _internal_mutable_merge_owner_uid();
  public:
  void unsafe_arena_set_allocated_merge_owner_uid(
      ::TSP::UUID* merge_owner_uid);
  ::TSP::UUID* unsafe_arena_release_merge_owner_uid();

  // required .TSP.UUID next_merge_owner_uid = 12;
  bool has_next_merge_owner_uid() const;
  private:
  bool _internal_has_next_merge_owner_uid() const;
  public:
  void clear_next_merge_owner_uid();
  const ::TSP::UUID& next_merge_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_merge_owner_uid();
  ::TSP::UUID* mutable_next_merge_owner_uid();
  void set_allocated_next_merge_owner_uid(::TSP::UUID* next_merge_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_merge_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_merge_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_merge_owner_uid(
      ::TSP::UUID* next_merge_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_merge_owner_uid();

  // required .TSP.UUID category_owner_uid = 13;
  bool has_category_owner_uid() const;
  private:
  bool _internal_has_category_owner_uid() const;
  public:
  void clear_category_owner_uid();
  const ::TSP::UUID& category_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_category_owner_uid();
  ::TSP::UUID* mutable_category_owner_uid();
  void set_allocated_category_owner_uid(::TSP::UUID* category_owner_uid);
  private:
  const ::TSP::UUID& _internal_category_owner_uid() const;
  ::TSP::UUID* _internal_mutable_category_owner_uid();
  public:
  void unsafe_arena_set_allocated_category_owner_uid(
      ::TSP::UUID* category_owner_uid);
  ::TSP::UUID* unsafe_arena_release_category_owner_uid();

  // required .TSP.UUID next_category_owner_uid = 14;
  bool has_next_category_owner_uid() const;
  private:
  bool _internal_has_next_category_owner_uid() const;
  public:
  void clear_next_category_owner_uid();
  const ::TSP::UUID& next_category_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_category_owner_uid();
  ::TSP::UUID* mutable_next_category_owner_uid();
  void set_allocated_next_category_owner_uid(::TSP::UUID* next_category_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_category_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_category_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_category_owner_uid(
      ::TSP::UUID* next_category_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_category_owner_uid();

  // required .TSP.UUID category_aggregates_owner_uid = 15;
  bool has_category_aggregates_owner_uid() const;
  private:
  bool _internal_has_category_aggregates_owner_uid() const;
  public:
  void clear_category_aggregates_owner_uid();
  const ::TSP::UUID& category_aggregates_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_category_aggregates_owner_uid();
  ::TSP::UUID* mutable_category_aggregates_owner_uid();
  void set_allocated_category_aggregates_owner_uid(::TSP::UUID* category_aggregates_owner_uid);
  private:
  const ::TSP::UUID& _internal_category_aggregates_owner_uid() const;
  ::TSP::UUID* _internal_mutable_category_aggregates_owner_uid();
  public:
  void unsafe_arena_set_allocated_category_aggregates_owner_uid(
      ::TSP::UUID* category_aggregates_owner_uid);
  ::TSP::UUID* unsafe_arena_release_category_aggregates_owner_uid();

  // required .TSP.UUID next_category_aggregates_owner_uid = 16;
  bool has_next_category_aggregates_owner_uid() const;
  private:
  bool _internal_has_next_category_aggregates_owner_uid() const;
  public:
  void clear_next_category_aggregates_owner_uid();
  const ::TSP::UUID& next_category_aggregates_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_category_aggregates_owner_uid();
  ::TSP::UUID* mutable_next_category_aggregates_owner_uid();
  void set_allocated_next_category_aggregates_owner_uid(::TSP::UUID* next_category_aggregates_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_category_aggregates_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_category_aggregates_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_category_aggregates_owner_uid(
      ::TSP::UUID* next_category_aggregates_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_category_aggregates_owner_uid();

  // required .TSP.UUID group_by_uid = 17;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // required .TSP.UUID next_group_by_uid = 18;
  bool has_next_group_by_uid() const;
  private:
  bool _internal_has_next_group_by_uid() const;
  public:
  void clear_next_group_by_uid();
  const ::TSP::UUID& next_group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_group_by_uid();
  ::TSP::UUID* mutable_next_group_by_uid();
  void set_allocated_next_group_by_uid(::TSP::UUID* next_group_by_uid);
  private:
  const ::TSP::UUID& _internal_next_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_next_group_by_uid();
  public:
  void unsafe_arena_set_allocated_next_group_by_uid(
      ::TSP::UUID* next_group_by_uid);
  ::TSP::UUID* unsafe_arena_release_next_group_by_uid();

  // required .TSP.UUID pencil_annotation_owner_uid = 19;
  bool has_pencil_annotation_owner_uid() const;
  private:
  bool _internal_has_pencil_annotation_owner_uid() const;
  public:
  void clear_pencil_annotation_owner_uid();
  const ::TSP::UUID& pencil_annotation_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_pencil_annotation_owner_uid();
  ::TSP::UUID* mutable_pencil_annotation_owner_uid();
  void set_allocated_pencil_annotation_owner_uid(::TSP::UUID* pencil_annotation_owner_uid);
  private:
  const ::TSP::UUID& _internal_pencil_annotation_owner_uid() const;
  ::TSP::UUID* _internal_mutable_pencil_annotation_owner_uid();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_owner_uid(
      ::TSP::UUID* pencil_annotation_owner_uid);
  ::TSP::UUID* unsafe_arena_release_pencil_annotation_owner_uid();

  // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
  bool has_next_pencil_annotation_owner_uid() const;
  private:
  bool _internal_has_next_pencil_annotation_owner_uid() const;
  public:
  void clear_next_pencil_annotation_owner_uid();
  const ::TSP::UUID& next_pencil_annotation_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_next_pencil_annotation_owner_uid();
  ::TSP::UUID* mutable_next_pencil_annotation_owner_uid();
  void set_allocated_next_pencil_annotation_owner_uid(::TSP::UUID* next_pencil_annotation_owner_uid);
  private:
  const ::TSP::UUID& _internal_next_pencil_annotation_owner_uid() const;
  ::TSP::UUID* _internal_mutable_next_pencil_annotation_owner_uid();
  public:
  void unsafe_arena_set_allocated_next_pencil_annotation_owner_uid(
      ::TSP::UUID* next_pencil_annotation_owner_uid);
  ::TSP::UUID* unsafe_arena_release_next_pencil_annotation_owner_uid();

  // @@protoc_insertion_point(class_scope:TSCE.OwnerUIDMapperArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* table_uid_;
  ::TSP::UUID* next_table_uid_;
  ::TSP::UUID* hidden_state_for_rows_owner_uid_;
  ::TSP::UUID* next_hidden_state_for_rows_owner_uid_;
  ::TSP::UUID* hidden_state_for_columns_owner_uid_;
  ::TSP::UUID* next_hidden_state_for_columns_owner_uid_;
  ::TSP::UUID* conditional_style_owner_uid_;
  ::TSP::UUID* next_conditional_style_owner_uid_;
  ::TSP::UUID* sort_rule_reference_tracker_owner_uid_;
  ::TSP::UUID* next_sort_rule_reference_tracker_owner_uid_;
  ::TSP::UUID* merge_owner_uid_;
  ::TSP::UUID* next_merge_owner_uid_;
  ::TSP::UUID* category_owner_uid_;
  ::TSP::UUID* next_category_owner_uid_;
  ::TSP::UUID* category_aggregates_owner_uid_;
  ::TSP::UUID* next_category_aggregates_owner_uid_;
  ::TSP::UUID* group_by_uid_;
  ::TSP::UUID* next_group_by_uid_;
  ::TSP::UUID* pencil_annotation_owner_uid_;
  ::TSP::UUID* next_pencil_annotation_owner_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RewriteTableUIDInfoArchive_TableUIDMapEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive) */ {
 public:
  inline RewriteTableUIDInfoArchive_TableUIDMapEntryArchive() : RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(nullptr) {}
  ~RewriteTableUIDInfoArchive_TableUIDMapEntryArchive() override;
  explicit constexpr RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from);
  RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive&& from) noexcept
    : RewriteTableUIDInfoArchive_TableUIDMapEntryArchive() {
    *this = ::std::move(from);
  }

  inline RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& operator=(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& operator=(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* internal_default_instance() {
    return reinterpret_cast<const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive*>(
               &_RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& a, RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* New() const final {
    return CreateMaybeMessage<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>(nullptr);
  }

  RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from);
  void MergeFrom(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive";
  }
  protected:
  explicit RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevTableUidFieldNumber = 1,
    kNewTableUidFieldNumber = 2,
  };
  // required .TSP.UUID prev_table_uid = 1;
  bool has_prev_table_uid() const;
  private:
  bool _internal_has_prev_table_uid() const;
  public:
  void clear_prev_table_uid();
  const ::TSP::UUID& prev_table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_prev_table_uid();
  ::TSP::UUID* mutable_prev_table_uid();
  void set_allocated_prev_table_uid(::TSP::UUID* prev_table_uid);
  private:
  const ::TSP::UUID& _internal_prev_table_uid() const;
  ::TSP::UUID* _internal_mutable_prev_table_uid();
  public:
  void unsafe_arena_set_allocated_prev_table_uid(
      ::TSP::UUID* prev_table_uid);
  ::TSP::UUID* unsafe_arena_release_prev_table_uid();

  // required .TSP.UUID new_table_uid = 2;
  bool has_new_table_uid() const;
  private:
  bool _internal_has_new_table_uid() const;
  public:
  void clear_new_table_uid();
  const ::TSP::UUID& new_table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_new_table_uid();
  ::TSP::UUID* mutable_new_table_uid();
  void set_allocated_new_table_uid(::TSP::UUID* new_table_uid);
  private:
  const ::TSP::UUID& _internal_new_table_uid() const;
  ::TSP::UUID* _internal_mutable_new_table_uid();
  public:
  void unsafe_arena_set_allocated_new_table_uid(
      ::TSP::UUID* new_table_uid);
  ::TSP::UUID* unsafe_arena_release_new_table_uid();

  // @@protoc_insertion_point(class_scope:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* prev_table_uid_;
  ::TSP::UUID* new_table_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RewriteTableUIDInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RewriteTableUIDInfoArchive) */ {
 public:
  inline RewriteTableUIDInfoArchive() : RewriteTableUIDInfoArchive(nullptr) {}
  ~RewriteTableUIDInfoArchive() override;
  explicit constexpr RewriteTableUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteTableUIDInfoArchive(const RewriteTableUIDInfoArchive& from);
  RewriteTableUIDInfoArchive(RewriteTableUIDInfoArchive&& from) noexcept
    : RewriteTableUIDInfoArchive() {
    *this = ::std::move(from);
  }

  inline RewriteTableUIDInfoArchive& operator=(const RewriteTableUIDInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteTableUIDInfoArchive& operator=(RewriteTableUIDInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteTableUIDInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteTableUIDInfoArchive* internal_default_instance() {
    return reinterpret_cast<const RewriteTableUIDInfoArchive*>(
               &_RewriteTableUIDInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(RewriteTableUIDInfoArchive& a, RewriteTableUIDInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteTableUIDInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteTableUIDInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewriteTableUIDInfoArchive* New() const final {
    return CreateMaybeMessage<RewriteTableUIDInfoArchive>(nullptr);
  }

  RewriteTableUIDInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewriteTableUIDInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewriteTableUIDInfoArchive& from);
  void MergeFrom(const RewriteTableUIDInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteTableUIDInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RewriteTableUIDInfoArchive";
  }
  protected:
  explicit RewriteTableUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RewriteTableUIDInfoArchive_TableUIDMapEntryArchive TableUIDMapEntryArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kTableUidMapFieldNumber = 1,
  };
  // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
  int table_uid_map_size() const;
  private:
  int _internal_table_uid_map_size() const;
  public:
  void clear_table_uid_map();
  ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* mutable_table_uid_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >*
      mutable_table_uid_map();
  private:
  const ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& _internal_table_uid_map(int index) const;
  ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* _internal_add_table_uid_map();
  public:
  const ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& table_uid_map(int index) const;
  ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* add_table_uid_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >&
      table_uid_map() const;

  // @@protoc_insertion_point(class_scope:TSCE.RewriteTableUIDInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive > table_uid_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupByChangeArchive_GroupingColumnChangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive) */ {
 public:
  inline GroupByChangeArchive_GroupingColumnChangeArchive() : GroupByChangeArchive_GroupingColumnChangeArchive(nullptr) {}
  ~GroupByChangeArchive_GroupingColumnChangeArchive() override;
  explicit constexpr GroupByChangeArchive_GroupingColumnChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByChangeArchive_GroupingColumnChangeArchive(const GroupByChangeArchive_GroupingColumnChangeArchive& from);
  GroupByChangeArchive_GroupingColumnChangeArchive(GroupByChangeArchive_GroupingColumnChangeArchive&& from) noexcept
    : GroupByChangeArchive_GroupingColumnChangeArchive() {
    *this = ::std::move(from);
  }

  inline GroupByChangeArchive_GroupingColumnChangeArchive& operator=(const GroupByChangeArchive_GroupingColumnChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByChangeArchive_GroupingColumnChangeArchive& operator=(GroupByChangeArchive_GroupingColumnChangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByChangeArchive_GroupingColumnChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByChangeArchive_GroupingColumnChangeArchive* internal_default_instance() {
    return reinterpret_cast<const GroupByChangeArchive_GroupingColumnChangeArchive*>(
               &_GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(GroupByChangeArchive_GroupingColumnChangeArchive& a, GroupByChangeArchive_GroupingColumnChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByChangeArchive_GroupingColumnChangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByChangeArchive_GroupingColumnChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupByChangeArchive_GroupingColumnChangeArchive* New() const final {
    return CreateMaybeMessage<GroupByChangeArchive_GroupingColumnChangeArchive>(nullptr);
  }

  GroupByChangeArchive_GroupingColumnChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupByChangeArchive_GroupingColumnChangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupByChangeArchive_GroupingColumnChangeArchive& from);
  void MergeFrom(const GroupByChangeArchive_GroupingColumnChangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByChangeArchive_GroupingColumnChangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.GroupByChangeArchive.GroupingColumnChangeArchive";
  }
  protected:
  explicit GroupByChangeArchive_GroupingColumnChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldLevelFieldNumber = 1,
    kNewLevelFieldNumber = 2,
  };
  // required uint32 old_level = 1;
  bool has_old_level() const;
  private:
  bool _internal_has_old_level() const;
  public:
  void clear_old_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_level() const;
  void set_old_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_level() const;
  void _internal_set_old_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 new_level = 2;
  bool has_new_level() const;
  private:
  bool _internal_has_new_level() const;
  public:
  void clear_new_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_level() const;
  void set_new_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_level() const;
  void _internal_set_new_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_level_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupByChangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.GroupByChangeArchive) */ {
 public:
  inline GroupByChangeArchive() : GroupByChangeArchive(nullptr) {}
  ~GroupByChangeArchive() override;
  explicit constexpr GroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByChangeArchive(const GroupByChangeArchive& from);
  GroupByChangeArchive(GroupByChangeArchive&& from) noexcept
    : GroupByChangeArchive() {
    *this = ::std::move(from);
  }

  inline GroupByChangeArchive& operator=(const GroupByChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByChangeArchive& operator=(GroupByChangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByChangeArchive* internal_default_instance() {
    return reinterpret_cast<const GroupByChangeArchive*>(
               &_GroupByChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(GroupByChangeArchive& a, GroupByChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByChangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupByChangeArchive* New() const final {
    return CreateMaybeMessage<GroupByChangeArchive>(nullptr);
  }

  GroupByChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupByChangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupByChangeArchive& from);
  void MergeFrom(const GroupByChangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByChangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.GroupByChangeArchive";
  }
  protected:
  explicit GroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupByChangeArchive_GroupingColumnChangeArchive GroupingColumnChangeArchive;

  typedef GroupByChangeArchive_ChangeType ChangeType;
  static constexpr ChangeType NONE =
    GroupByChangeArchive_ChangeType_NONE;
  static constexpr ChangeType GROUP_VALUE_CHANGE =
    GroupByChangeArchive_ChangeType_GROUP_VALUE_CHANGE;
  static constexpr ChangeType GROUP_DEFINITION_CHANGE =
    GroupByChangeArchive_ChangeType_GROUP_DEFINITION_CHANGE;
  static constexpr ChangeType REMOVE_GROUP_LEVEL =
    GroupByChangeArchive_ChangeType_REMOVE_GROUP_LEVEL;
  static constexpr ChangeType ADD_GROUP_LEVEL =
    GroupByChangeArchive_ChangeType_ADD_GROUP_LEVEL;
  static constexpr ChangeType PROMOTE =
    GroupByChangeArchive_ChangeType_PROMOTE;
  static constexpr ChangeType DEMOTE =
    GroupByChangeArchive_ChangeType_DEMOTE;
  static inline bool ChangeType_IsValid(int value) {
    return GroupByChangeArchive_ChangeType_IsValid(value);
  }
  static constexpr ChangeType ChangeType_MIN =
    GroupByChangeArchive_ChangeType_ChangeType_MIN;
  static constexpr ChangeType ChangeType_MAX =
    GroupByChangeArchive_ChangeType_ChangeType_MAX;
  static constexpr int ChangeType_ARRAYSIZE =
    GroupByChangeArchive_ChangeType_ChangeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChangeType_descriptor() {
    return GroupByChangeArchive_ChangeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChangeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangeType_Name.");
    return GroupByChangeArchive_ChangeType_Name(enum_t_value);
  }
  static inline bool ChangeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChangeType* value) {
    return GroupByChangeArchive_ChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedGroupUidsFieldNumber = 7,
    kGroupingColumnChangesFieldNumber = 8,
    kGroupByUidFieldNumber = 2,
    kPreviousToUpdatedMapFieldNumber = 5,
    kUpdatedToPreviousMapFieldNumber = 6,
    kChangeTypeFieldNumber = 1,
    kPreviousLevelFieldNumber = 3,
    kUpdatedLevelFieldNumber = 4,
  };
  // repeated .TSP.UUID removed_group_uids = 7;
  int removed_group_uids_size() const;
  private:
  int _internal_removed_group_uids_size() const;
  public:
  void clear_removed_group_uids();
  ::TSP::UUID* mutable_removed_group_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_removed_group_uids();
  private:
  const ::TSP::UUID& _internal_removed_group_uids(int index) const;
  ::TSP::UUID* _internal_add_removed_group_uids();
  public:
  const ::TSP::UUID& removed_group_uids(int index) const;
  ::TSP::UUID* add_removed_group_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      removed_group_uids() const;

  // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
  int grouping_column_changes_size() const;
  private:
  int _internal_grouping_column_changes_size() const;
  public:
  void clear_grouping_column_changes();
  ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* mutable_grouping_column_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >*
      mutable_grouping_column_changes();
  private:
  const ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive& _internal_grouping_column_changes(int index) const;
  ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* _internal_add_grouping_column_changes();
  public:
  const ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive& grouping_column_changes(int index) const;
  ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* add_grouping_column_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >&
      grouping_column_changes() const;

  // required .TSP.UUID group_by_uid = 2;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
  bool has_previous_to_updated_map() const;
  private:
  bool _internal_has_previous_to_updated_map() const;
  public:
  void clear_previous_to_updated_map();
  const ::TSP::UUIDMapArchive& previous_to_updated_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDMapArchive* release_previous_to_updated_map();
  ::TSP::UUIDMapArchive* mutable_previous_to_updated_map();
  void set_allocated_previous_to_updated_map(::TSP::UUIDMapArchive* previous_to_updated_map);
  private:
  const ::TSP::UUIDMapArchive& _internal_previous_to_updated_map() const;
  ::TSP::UUIDMapArchive* _internal_mutable_previous_to_updated_map();
  public:
  void unsafe_arena_set_allocated_previous_to_updated_map(
      ::TSP::UUIDMapArchive* previous_to_updated_map);
  ::TSP::UUIDMapArchive* unsafe_arena_release_previous_to_updated_map();

  // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
  bool has_updated_to_previous_map() const;
  private:
  bool _internal_has_updated_to_previous_map() const;
  public:
  void clear_updated_to_previous_map();
  const ::TSP::UUIDMapArchive& updated_to_previous_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDMapArchive* release_updated_to_previous_map();
  ::TSP::UUIDMapArchive* mutable_updated_to_previous_map();
  void set_allocated_updated_to_previous_map(::TSP::UUIDMapArchive* updated_to_previous_map);
  private:
  const ::TSP::UUIDMapArchive& _internal_updated_to_previous_map() const;
  ::TSP::UUIDMapArchive* _internal_mutable_updated_to_previous_map();
  public:
  void unsafe_arena_set_allocated_updated_to_previous_map(
      ::TSP::UUIDMapArchive* updated_to_previous_map);
  ::TSP::UUIDMapArchive* unsafe_arena_release_updated_to_previous_map();

  // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::TSCE::GroupByChangeArchive_ChangeType change_type() const;
  void set_change_type(::TSCE::GroupByChangeArchive_ChangeType value);
  private:
  ::TSCE::GroupByChangeArchive_ChangeType _internal_change_type() const;
  void _internal_set_change_type(::TSCE::GroupByChangeArchive_ChangeType value);
  public:

  // optional uint32 previous_level = 3;
  bool has_previous_level() const;
  private:
  bool _internal_has_previous_level() const;
  public:
  void clear_previous_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_level() const;
  void set_previous_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_previous_level() const;
  void _internal_set_previous_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 updated_level = 4;
  bool has_updated_level() const;
  private:
  bool _internal_has_updated_level() const;
  public:
  void clear_updated_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 updated_level() const;
  void set_updated_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updated_level() const;
  void _internal_set_updated_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.GroupByChangeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > removed_group_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive > grouping_column_changes_;
  ::TSP::UUID* group_by_uid_;
  ::TSP::UUIDMapArchive* previous_to_updated_map_;
  ::TSP::UUIDMapArchive* updated_to_previous_map_;
  int change_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updated_level_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RewriteGroupNodeUIDInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RewriteGroupNodeUIDInfoArchive) */ {
 public:
  inline RewriteGroupNodeUIDInfoArchive() : RewriteGroupNodeUIDInfoArchive(nullptr) {}
  ~RewriteGroupNodeUIDInfoArchive() override;
  explicit constexpr RewriteGroupNodeUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteGroupNodeUIDInfoArchive(const RewriteGroupNodeUIDInfoArchive& from);
  RewriteGroupNodeUIDInfoArchive(RewriteGroupNodeUIDInfoArchive&& from) noexcept
    : RewriteGroupNodeUIDInfoArchive() {
    *this = ::std::move(from);
  }

  inline RewriteGroupNodeUIDInfoArchive& operator=(const RewriteGroupNodeUIDInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteGroupNodeUIDInfoArchive& operator=(RewriteGroupNodeUIDInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteGroupNodeUIDInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteGroupNodeUIDInfoArchive* internal_default_instance() {
    return reinterpret_cast<const RewriteGroupNodeUIDInfoArchive*>(
               &_RewriteGroupNodeUIDInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(RewriteGroupNodeUIDInfoArchive& a, RewriteGroupNodeUIDInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteGroupNodeUIDInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteGroupNodeUIDInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewriteGroupNodeUIDInfoArchive* New() const final {
    return CreateMaybeMessage<RewriteGroupNodeUIDInfoArchive>(nullptr);
  }

  RewriteGroupNodeUIDInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewriteGroupNodeUIDInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewriteGroupNodeUIDInfoArchive& from);
  void MergeFrom(const RewriteGroupNodeUIDInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteGroupNodeUIDInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RewriteGroupNodeUIDInfoArchive";
  }
  protected:
  explicit RewriteGroupNodeUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupByUidFieldNumber = 1,
    kGroupNodeUidMapFieldNumber = 2,
  };
  // optional .TSP.UUID group_by_uid = 1;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // required .TSP.UUIDMapArchive group_node_uid_map = 2;
  bool has_group_node_uid_map() const;
  private:
  bool _internal_has_group_node_uid_map() const;
  public:
  void clear_group_node_uid_map();
  const ::TSP::UUIDMapArchive& group_node_uid_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDMapArchive* release_group_node_uid_map();
  ::TSP::UUIDMapArchive* mutable_group_node_uid_map();
  void set_allocated_group_node_uid_map(::TSP::UUIDMapArchive* group_node_uid_map);
  private:
  const ::TSP::UUIDMapArchive& _internal_group_node_uid_map() const;
  ::TSP::UUIDMapArchive* _internal_mutable_group_node_uid_map();
  public:
  void unsafe_arena_set_allocated_group_node_uid_map(
      ::TSP::UUIDMapArchive* group_node_uid_map);
  ::TSP::UUIDMapArchive* unsafe_arena_release_group_node_uid_map();

  // @@protoc_insertion_point(class_scope:TSCE.RewriteGroupNodeUIDInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* group_by_uid_;
  ::TSP::UUIDMapArchive* group_node_uid_map_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class IndexedUidsArchive_IndexedUid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.IndexedUidsArchive.IndexedUid) */ {
 public:
  inline IndexedUidsArchive_IndexedUid() : IndexedUidsArchive_IndexedUid(nullptr) {}
  ~IndexedUidsArchive_IndexedUid() override;
  explicit constexpr IndexedUidsArchive_IndexedUid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexedUidsArchive_IndexedUid(const IndexedUidsArchive_IndexedUid& from);
  IndexedUidsArchive_IndexedUid(IndexedUidsArchive_IndexedUid&& from) noexcept
    : IndexedUidsArchive_IndexedUid() {
    *this = ::std::move(from);
  }

  inline IndexedUidsArchive_IndexedUid& operator=(const IndexedUidsArchive_IndexedUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexedUidsArchive_IndexedUid& operator=(IndexedUidsArchive_IndexedUid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexedUidsArchive_IndexedUid& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexedUidsArchive_IndexedUid* internal_default_instance() {
    return reinterpret_cast<const IndexedUidsArchive_IndexedUid*>(
               &_IndexedUidsArchive_IndexedUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(IndexedUidsArchive_IndexedUid& a, IndexedUidsArchive_IndexedUid& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexedUidsArchive_IndexedUid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexedUidsArchive_IndexedUid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexedUidsArchive_IndexedUid* New() const final {
    return CreateMaybeMessage<IndexedUidsArchive_IndexedUid>(nullptr);
  }

  IndexedUidsArchive_IndexedUid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexedUidsArchive_IndexedUid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexedUidsArchive_IndexedUid& from);
  void MergeFrom(const IndexedUidsArchive_IndexedUid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexedUidsArchive_IndexedUid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.IndexedUidsArchive.IndexedUid";
  }
  protected:
  explicit IndexedUidsArchive_IndexedUid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidForIndexFieldNumber = 1,
    kIndexForUidFieldNumber = 2,
  };
  // required .TSP.UUID uid_for_index = 1;
  bool has_uid_for_index() const;
  private:
  bool _internal_has_uid_for_index() const;
  public:
  void clear_uid_for_index();
  const ::TSP::UUID& uid_for_index() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_uid_for_index();
  ::TSP::UUID* mutable_uid_for_index();
  void set_allocated_uid_for_index(::TSP::UUID* uid_for_index);
  private:
  const ::TSP::UUID& _internal_uid_for_index() const;
  ::TSP::UUID* _internal_mutable_uid_for_index();
  public:
  void unsafe_arena_set_allocated_uid_for_index(
      ::TSP::UUID* uid_for_index);
  ::TSP::UUID* unsafe_arena_release_uid_for_index();

  // required uint32 index_for_uid = 2;
  bool has_index_for_uid() const;
  private:
  bool _internal_has_index_for_uid() const;
  public:
  void clear_index_for_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_for_uid() const;
  void set_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_for_uid() const;
  void _internal_set_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.IndexedUidsArchive.IndexedUid)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* uid_for_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_for_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class IndexedUidsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.IndexedUidsArchive) */ {
 public:
  inline IndexedUidsArchive() : IndexedUidsArchive(nullptr) {}
  ~IndexedUidsArchive() override;
  explicit constexpr IndexedUidsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexedUidsArchive(const IndexedUidsArchive& from);
  IndexedUidsArchive(IndexedUidsArchive&& from) noexcept
    : IndexedUidsArchive() {
    *this = ::std::move(from);
  }

  inline IndexedUidsArchive& operator=(const IndexedUidsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexedUidsArchive& operator=(IndexedUidsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexedUidsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexedUidsArchive* internal_default_instance() {
    return reinterpret_cast<const IndexedUidsArchive*>(
               &_IndexedUidsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(IndexedUidsArchive& a, IndexedUidsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexedUidsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexedUidsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexedUidsArchive* New() const final {
    return CreateMaybeMessage<IndexedUidsArchive>(nullptr);
  }

  IndexedUidsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexedUidsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexedUidsArchive& from);
  void MergeFrom(const IndexedUidsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexedUidsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.IndexedUidsArchive";
  }
  protected:
  explicit IndexedUidsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexedUidsArchive_IndexedUid IndexedUid;

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  ::TSCE::IndexedUidsArchive_IndexedUid* mutable_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexedUidsArchive_IndexedUid >*
      mutable_uids();
  private:
  const ::TSCE::IndexedUidsArchive_IndexedUid& _internal_uids(int index) const;
  ::TSCE::IndexedUidsArchive_IndexedUid* _internal_add_uids();
  public:
  const ::TSCE::IndexedUidsArchive_IndexedUid& uids(int index) const;
  ::TSCE::IndexedUidsArchive_IndexedUid* add_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexedUidsArchive_IndexedUid >&
      uids() const;

  // @@protoc_insertion_point(class_scope:TSCE.IndexedUidsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexedUidsArchive_IndexedUid > uids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RewriteRangeEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RewriteRangeEntryArchive) */ {
 public:
  inline RewriteRangeEntryArchive() : RewriteRangeEntryArchive(nullptr) {}
  ~RewriteRangeEntryArchive() override;
  explicit constexpr RewriteRangeEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewriteRangeEntryArchive(const RewriteRangeEntryArchive& from);
  RewriteRangeEntryArchive(RewriteRangeEntryArchive&& from) noexcept
    : RewriteRangeEntryArchive() {
    *this = ::std::move(from);
  }

  inline RewriteRangeEntryArchive& operator=(const RewriteRangeEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewriteRangeEntryArchive& operator=(RewriteRangeEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewriteRangeEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewriteRangeEntryArchive* internal_default_instance() {
    return reinterpret_cast<const RewriteRangeEntryArchive*>(
               &_RewriteRangeEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(RewriteRangeEntryArchive& a, RewriteRangeEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RewriteRangeEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewriteRangeEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewriteRangeEntryArchive* New() const final {
    return CreateMaybeMessage<RewriteRangeEntryArchive>(nullptr);
  }

  RewriteRangeEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewriteRangeEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewriteRangeEntryArchive& from);
  void MergeFrom(const RewriteRangeEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewriteRangeEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RewriteRangeEntryArchive";
  }
  protected:
  explicit RewriteRangeEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeUidsFieldNumber = 3,
    kRangeLocationFieldNumber = 1,
    kRangeLengthFieldNumber = 2,
    kOffsetFieldNumber = 4,
  };
  // repeated .TSP.UUID range_uids = 3;
  int range_uids_size() const;
  private:
  int _internal_range_uids_size() const;
  public:
  void clear_range_uids();
  ::TSP::UUID* mutable_range_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_range_uids();
  private:
  const ::TSP::UUID& _internal_range_uids(int index) const;
  ::TSP::UUID* _internal_add_range_uids();
  public:
  const ::TSP::UUID& range_uids(int index) const;
  ::TSP::UUID* add_range_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      range_uids() const;

  // required uint32 range_location = 1;
  bool has_range_location() const;
  private:
  bool _internal_has_range_location() const;
  public:
  void clear_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 range_location() const;
  void set_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_location() const;
  void _internal_set_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 range_length = 2;
  bool has_range_length() const;
  private:
  bool _internal_has_range_length() const;
  public:
  void clear_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 range_length() const;
  void set_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_length() const;
  void _internal_set_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RewriteRangeEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > range_uids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnOrRowUuidsInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ColumnOrRowUuidsInfoArchive) */ {
 public:
  inline ColumnOrRowUuidsInfoArchive() : ColumnOrRowUuidsInfoArchive(nullptr) {}
  ~ColumnOrRowUuidsInfoArchive() override;
  explicit constexpr ColumnOrRowUuidsInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnOrRowUuidsInfoArchive(const ColumnOrRowUuidsInfoArchive& from);
  ColumnOrRowUuidsInfoArchive(ColumnOrRowUuidsInfoArchive&& from) noexcept
    : ColumnOrRowUuidsInfoArchive() {
    *this = ::std::move(from);
  }

  inline ColumnOrRowUuidsInfoArchive& operator=(const ColumnOrRowUuidsInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnOrRowUuidsInfoArchive& operator=(ColumnOrRowUuidsInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnOrRowUuidsInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnOrRowUuidsInfoArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnOrRowUuidsInfoArchive*>(
               &_ColumnOrRowUuidsInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ColumnOrRowUuidsInfoArchive& a, ColumnOrRowUuidsInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnOrRowUuidsInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnOrRowUuidsInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnOrRowUuidsInfoArchive* New() const final {
    return CreateMaybeMessage<ColumnOrRowUuidsInfoArchive>(nullptr);
  }

  ColumnOrRowUuidsInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnOrRowUuidsInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnOrRowUuidsInfoArchive& from);
  void MergeFrom(const ColumnOrRowUuidsInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnOrRowUuidsInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ColumnOrRowUuidsInfoArchive";
  }
  protected:
  explicit ColumnOrRowUuidsInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeEntriesFieldNumber = 6,
    kTableUidFieldNumber = 2,
    kCondStyleOwnerUidFieldNumber = 3,
    kGroupByUidFieldNumber = 4,
    kUidsFieldNumber = 5,
    kTableRangeFieldNumber = 7,
    kInsertAtUidFieldNumber = 8,
    kInsertOppositeUidFieldNumber = 9,
    kIsRowsFieldNumber = 1,
  };
  // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
  int range_entries_size() const;
  private:
  int _internal_range_entries_size() const;
  public:
  void clear_range_entries();
  ::TSCE::RewriteRangeEntryArchive* mutable_range_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteRangeEntryArchive >*
      mutable_range_entries();
  private:
  const ::TSCE::RewriteRangeEntryArchive& _internal_range_entries(int index) const;
  ::TSCE::RewriteRangeEntryArchive* _internal_add_range_entries();
  public:
  const ::TSCE::RewriteRangeEntryArchive& range_entries(int index) const;
  ::TSCE::RewriteRangeEntryArchive* add_range_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteRangeEntryArchive >&
      range_entries() const;

  // required .TSP.UUID table_uid = 2;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // required .TSP.UUID cond_style_owner_uid = 3;
  bool has_cond_style_owner_uid() const;
  private:
  bool _internal_has_cond_style_owner_uid() const;
  public:
  void clear_cond_style_owner_uid();
  const ::TSP::UUID& cond_style_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_cond_style_owner_uid();
  ::TSP::UUID* mutable_cond_style_owner_uid();
  void set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid);
  private:
  const ::TSP::UUID& _internal_cond_style_owner_uid() const;
  ::TSP::UUID* _internal_mutable_cond_style_owner_uid();
  public:
  void unsafe_arena_set_allocated_cond_style_owner_uid(
      ::TSP::UUID* cond_style_owner_uid);
  ::TSP::UUID* unsafe_arena_release_cond_style_owner_uid();

  // required .TSP.UUID group_by_uid = 4;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // required .TSCE.IndexedUidsArchive uids = 5;
  bool has_uids() const;
  private:
  bool _internal_has_uids() const;
  public:
  void clear_uids();
  const ::TSCE::IndexedUidsArchive& uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexedUidsArchive* release_uids();
  ::TSCE::IndexedUidsArchive* mutable_uids();
  void set_allocated_uids(::TSCE::IndexedUidsArchive* uids);
  private:
  const ::TSCE::IndexedUidsArchive& _internal_uids() const;
  ::TSCE::IndexedUidsArchive* _internal_mutable_uids();
  public:
  void unsafe_arena_set_allocated_uids(
      ::TSCE::IndexedUidsArchive* uids);
  ::TSCE::IndexedUidsArchive* unsafe_arena_release_uids();

  // required .TSCE.RangeCoordinateArchive table_range = 7;
  bool has_table_range() const;
  private:
  bool _internal_has_table_range() const;
  public:
  void clear_table_range();
  const ::TSCE::RangeCoordinateArchive& table_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeCoordinateArchive* release_table_range();
  ::TSCE::RangeCoordinateArchive* mutable_table_range();
  void set_allocated_table_range(::TSCE::RangeCoordinateArchive* table_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_table_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_table_range();
  public:
  void unsafe_arena_set_allocated_table_range(
      ::TSCE::RangeCoordinateArchive* table_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_table_range();

  // optional .TSP.UUID insert_at_uid = 8;
  bool has_insert_at_uid() const;
  private:
  bool _internal_has_insert_at_uid() const;
  public:
  void clear_insert_at_uid();
  const ::TSP::UUID& insert_at_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_insert_at_uid();
  ::TSP::UUID* mutable_insert_at_uid();
  void set_allocated_insert_at_uid(::TSP::UUID* insert_at_uid);
  private:
  const ::TSP::UUID& _internal_insert_at_uid() const;
  ::TSP::UUID* _internal_mutable_insert_at_uid();
  public:
  void unsafe_arena_set_allocated_insert_at_uid(
      ::TSP::UUID* insert_at_uid);
  ::TSP::UUID* unsafe_arena_release_insert_at_uid();

  // optional .TSP.UUID insert_opposite_uid = 9;
  bool has_insert_opposite_uid() const;
  private:
  bool _internal_has_insert_opposite_uid() const;
  public:
  void clear_insert_opposite_uid();
  const ::TSP::UUID& insert_opposite_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_insert_opposite_uid();
  ::TSP::UUID* mutable_insert_opposite_uid();
  void set_allocated_insert_opposite_uid(::TSP::UUID* insert_opposite_uid);
  private:
  const ::TSP::UUID& _internal_insert_opposite_uid() const;
  ::TSP::UUID* _internal_mutable_insert_opposite_uid();
  public:
  void unsafe_arena_set_allocated_insert_opposite_uid(
      ::TSP::UUID* insert_opposite_uid);
  ::TSP::UUID* unsafe_arena_release_insert_opposite_uid();

  // required bool is_rows = 1;
  bool has_is_rows() const;
  private:
  bool _internal_has_is_rows() const;
  public:
  void clear_is_rows();
  bool is_rows() const;
  void set_is_rows(bool value);
  private:
  bool _internal_is_rows() const;
  void _internal_set_is_rows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ColumnOrRowUuidsInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteRangeEntryArchive > range_entries_;
  ::TSP::UUID* table_uid_;
  ::TSP::UUID* cond_style_owner_uid_;
  ::TSP::UUID* group_by_uid_;
  ::TSCE::IndexedUidsArchive* uids_;
  ::TSCE::RangeCoordinateArchive* table_range_;
  ::TSP::UUID* insert_at_uid_;
  ::TSP::UUID* insert_opposite_uid_;
  bool is_rows_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RegionInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RegionInfoArchive) */ {
 public:
  inline RegionInfoArchive() : RegionInfoArchive(nullptr) {}
  ~RegionInfoArchive() override;
  explicit constexpr RegionInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionInfoArchive(const RegionInfoArchive& from);
  RegionInfoArchive(RegionInfoArchive&& from) noexcept
    : RegionInfoArchive() {
    *this = ::std::move(from);
  }

  inline RegionInfoArchive& operator=(const RegionInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionInfoArchive& operator=(RegionInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionInfoArchive* internal_default_instance() {
    return reinterpret_cast<const RegionInfoArchive*>(
               &_RegionInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(RegionInfoArchive& a, RegionInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionInfoArchive* New() const final {
    return CreateMaybeMessage<RegionInfoArchive>(nullptr);
  }

  RegionInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionInfoArchive& from);
  void MergeFrom(const RegionInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RegionInfoArchive";
  }
  protected:
  explicit RegionInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableUidFieldNumber = 1,
    kColumnUidsFieldNumber = 2,
    kRowUidsFieldNumber = 3,
  };
  // required .TSP.UUID table_uid = 1;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // required .TSCE.IndexedUidsArchive column_uids = 2;
  bool has_column_uids() const;
  private:
  bool _internal_has_column_uids() const;
  public:
  void clear_column_uids();
  const ::TSCE::IndexedUidsArchive& column_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexedUidsArchive* release_column_uids();
  ::TSCE::IndexedUidsArchive* mutable_column_uids();
  void set_allocated_column_uids(::TSCE::IndexedUidsArchive* column_uids);
  private:
  const ::TSCE::IndexedUidsArchive& _internal_column_uids() const;
  ::TSCE::IndexedUidsArchive* _internal_mutable_column_uids();
  public:
  void unsafe_arena_set_allocated_column_uids(
      ::TSCE::IndexedUidsArchive* column_uids);
  ::TSCE::IndexedUidsArchive* unsafe_arena_release_column_uids();

  // required .TSCE.IndexedUidsArchive row_uids = 3;
  bool has_row_uids() const;
  private:
  bool _internal_has_row_uids() const;
  public:
  void clear_row_uids();
  const ::TSCE::IndexedUidsArchive& row_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::IndexedUidsArchive* release_row_uids();
  ::TSCE::IndexedUidsArchive* mutable_row_uids();
  void set_allocated_row_uids(::TSCE::IndexedUidsArchive* row_uids);
  private:
  const ::TSCE::IndexedUidsArchive& _internal_row_uids() const;
  ::TSCE::IndexedUidsArchive* _internal_mutable_row_uids();
  public:
  void unsafe_arena_set_allocated_row_uids(
      ::TSCE::IndexedUidsArchive* row_uids);
  ::TSCE::IndexedUidsArchive* unsafe_arena_release_row_uids();

  // @@protoc_insertion_point(class_scope:TSCE.RegionInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* table_uid_;
  ::TSCE::IndexedUidsArchive* column_uids_;
  ::TSCE::IndexedUidsArchive* row_uids_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class RegionMovedInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.RegionMovedInfoArchive) */ {
 public:
  inline RegionMovedInfoArchive() : RegionMovedInfoArchive(nullptr) {}
  ~RegionMovedInfoArchive() override;
  explicit constexpr RegionMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionMovedInfoArchive(const RegionMovedInfoArchive& from);
  RegionMovedInfoArchive(RegionMovedInfoArchive&& from) noexcept
    : RegionMovedInfoArchive() {
    *this = ::std::move(from);
  }

  inline RegionMovedInfoArchive& operator=(const RegionMovedInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionMovedInfoArchive& operator=(RegionMovedInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionMovedInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionMovedInfoArchive* internal_default_instance() {
    return reinterpret_cast<const RegionMovedInfoArchive*>(
               &_RegionMovedInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(RegionMovedInfoArchive& a, RegionMovedInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionMovedInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionMovedInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionMovedInfoArchive* New() const final {
    return CreateMaybeMessage<RegionMovedInfoArchive>(nullptr);
  }

  RegionMovedInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionMovedInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionMovedInfoArchive& from);
  void MergeFrom(const RegionMovedInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionMovedInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.RegionMovedInfoArchive";
  }
  protected:
  explicit RegionMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcRegionFieldNumber = 1,
    kDstRegionFieldNumber = 2,
    kOriginalSrcRegionFieldNumber = 5,
    kFinalDestTableUidFieldNumber = 6,
    kSpanRowsFieldNumber = 3,
    kSpanColumnsFieldNumber = 4,
  };
  // required .TSCE.RegionInfoArchive src_region = 1;
  bool has_src_region() const;
  private:
  bool _internal_has_src_region() const;
  public:
  void clear_src_region();
  const ::TSCE::RegionInfoArchive& src_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RegionInfoArchive* release_src_region();
  ::TSCE::RegionInfoArchive* mutable_src_region();
  void set_allocated_src_region(::TSCE::RegionInfoArchive* src_region);
  private:
  const ::TSCE::RegionInfoArchive& _internal_src_region() const;
  ::TSCE::RegionInfoArchive* _internal_mutable_src_region();
  public:
  void unsafe_arena_set_allocated_src_region(
      ::TSCE::RegionInfoArchive* src_region);
  ::TSCE::RegionInfoArchive* unsafe_arena_release_src_region();

  // required .TSCE.RegionInfoArchive dst_region = 2;
  bool has_dst_region() const;
  private:
  bool _internal_has_dst_region() const;
  public:
  void clear_dst_region();
  const ::TSCE::RegionInfoArchive& dst_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RegionInfoArchive* release_dst_region();
  ::TSCE::RegionInfoArchive* mutable_dst_region();
  void set_allocated_dst_region(::TSCE::RegionInfoArchive* dst_region);
  private:
  const ::TSCE::RegionInfoArchive& _internal_dst_region() const;
  ::TSCE::RegionInfoArchive* _internal_mutable_dst_region();
  public:
  void unsafe_arena_set_allocated_dst_region(
      ::TSCE::RegionInfoArchive* dst_region);
  ::TSCE::RegionInfoArchive* unsafe_arena_release_dst_region();

  // optional .TSCE.RegionInfoArchive original_src_region = 5;
  bool has_original_src_region() const;
  private:
  bool _internal_has_original_src_region() const;
  public:
  void clear_original_src_region();
  const ::TSCE::RegionInfoArchive& original_src_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RegionInfoArchive* release_original_src_region();
  ::TSCE::RegionInfoArchive* mutable_original_src_region();
  void set_allocated_original_src_region(::TSCE::RegionInfoArchive* original_src_region);
  private:
  const ::TSCE::RegionInfoArchive& _internal_original_src_region() const;
  ::TSCE::RegionInfoArchive* _internal_mutable_original_src_region();
  public:
  void unsafe_arena_set_allocated_original_src_region(
      ::TSCE::RegionInfoArchive* original_src_region);
  ::TSCE::RegionInfoArchive* unsafe_arena_release_original_src_region();

  // optional .TSP.UUID final_dest_table_uid = 6;
  bool has_final_dest_table_uid() const;
  private:
  bool _internal_has_final_dest_table_uid() const;
  public:
  void clear_final_dest_table_uid();
  const ::TSP::UUID& final_dest_table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_final_dest_table_uid();
  ::TSP::UUID* mutable_final_dest_table_uid();
  void set_allocated_final_dest_table_uid(::TSP::UUID* final_dest_table_uid);
  private:
  const ::TSP::UUID& _internal_final_dest_table_uid() const;
  ::TSP::UUID* _internal_mutable_final_dest_table_uid();
  public:
  void unsafe_arena_set_allocated_final_dest_table_uid(
      ::TSP::UUID* final_dest_table_uid);
  ::TSP::UUID* unsafe_arena_release_final_dest_table_uid();

  // optional bool span_rows = 3;
  bool has_span_rows() const;
  private:
  bool _internal_has_span_rows() const;
  public:
  void clear_span_rows();
  bool span_rows() const;
  void set_span_rows(bool value);
  private:
  bool _internal_span_rows() const;
  void _internal_set_span_rows(bool value);
  public:

  // optional bool span_columns = 4;
  bool has_span_columns() const;
  private:
  bool _internal_has_span_columns() const;
  public:
  void clear_span_columns();
  bool span_columns() const;
  void set_span_columns(bool value);
  private:
  bool _internal_span_columns() const;
  void _internal_set_span_columns(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.RegionMovedInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RegionInfoArchive* src_region_;
  ::TSCE::RegionInfoArchive* dst_region_;
  ::TSCE::RegionInfoArchive* original_src_region_;
  ::TSP::UUID* final_dest_table_uid_;
  bool span_rows_;
  bool span_columns_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeSourceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.MergeSourceArchive) */ {
 public:
  inline MergeSourceArchive() : MergeSourceArchive(nullptr) {}
  ~MergeSourceArchive() override;
  explicit constexpr MergeSourceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeSourceArchive(const MergeSourceArchive& from);
  MergeSourceArchive(MergeSourceArchive&& from) noexcept
    : MergeSourceArchive() {
    *this = ::std::move(from);
  }

  inline MergeSourceArchive& operator=(const MergeSourceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeSourceArchive& operator=(MergeSourceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeSourceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeSourceArchive* internal_default_instance() {
    return reinterpret_cast<const MergeSourceArchive*>(
               &_MergeSourceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(MergeSourceArchive& a, MergeSourceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeSourceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeSourceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeSourceArchive* New() const final {
    return CreateMaybeMessage<MergeSourceArchive>(nullptr);
  }

  MergeSourceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeSourceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeSourceArchive& from);
  void MergeFrom(const MergeSourceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeSourceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.MergeSourceArchive";
  }
  protected:
  explicit MergeSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordColumnFieldNumber = 1,
    kCoordRowFieldNumber = 2,
  };
  // required uint32 coord_column = 1;
  bool has_coord_column() const;
  private:
  bool _internal_has_coord_column() const;
  public:
  void clear_coord_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 coord_column() const;
  void set_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coord_column() const;
  void _internal_set_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 coord_row = 2;
  bool has_coord_row() const;
  private:
  bool _internal_has_coord_row() const;
  public:
  void clear_coord_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 coord_row() const;
  void set_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coord_row() const;
  void _internal_set_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.MergeSourceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coord_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coord_row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaRewriteSpecArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaRewriteSpecArchive) */ {
 public:
  inline FormulaRewriteSpecArchive() : FormulaRewriteSpecArchive(nullptr) {}
  ~FormulaRewriteSpecArchive() override;
  explicit constexpr FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from);
  FormulaRewriteSpecArchive(FormulaRewriteSpecArchive&& from) noexcept
    : FormulaRewriteSpecArchive() {
    *this = ::std::move(from);
  }

  inline FormulaRewriteSpecArchive& operator=(const FormulaRewriteSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaRewriteSpecArchive& operator=(FormulaRewriteSpecArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaRewriteSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaRewriteSpecArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaRewriteSpecArchive*>(
               &_FormulaRewriteSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(FormulaRewriteSpecArchive& a, FormulaRewriteSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaRewriteSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaRewriteSpecArchive* New() const final {
    return CreateMaybeMessage<FormulaRewriteSpecArchive>(nullptr);
  }

  FormulaRewriteSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaRewriteSpecArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaRewriteSpecArchive& from);
  void MergeFrom(const FormulaRewriteSpecArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaRewriteSpecArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaRewriteSpecArchive";
  }
  protected:
  explicit FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FormulaRewriteSpecArchive_RewriteType RewriteType;
  static constexpr RewriteType DELETE_OWNER =
    FormulaRewriteSpecArchive_RewriteType_DELETE_OWNER;
  static constexpr RewriteType TRANSPOSE_TABLE =
    FormulaRewriteSpecArchive_RewriteType_TRANSPOSE_TABLE;
  static constexpr RewriteType REMOVE_COLUMNS_OR_ROWS =
    FormulaRewriteSpecArchive_RewriteType_REMOVE_COLUMNS_OR_ROWS;
  static constexpr RewriteType INSERT_COLUMNS_OR_ROWS =
    FormulaRewriteSpecArchive_RewriteType_INSERT_COLUMNS_OR_ROWS;
  static constexpr RewriteType MOVE_COLUMNS_OR_ROWS =
    FormulaRewriteSpecArchive_RewriteType_MOVE_COLUMNS_OR_ROWS;
  static constexpr RewriteType MOVE_REGION =
    FormulaRewriteSpecArchive_RewriteType_MOVE_REGION;
  static constexpr RewriteType SORT_ROWS =
    FormulaRewriteSpecArchive_RewriteType_SORT_ROWS;
  static constexpr RewriteType MERGE_CELLS =
    FormulaRewriteSpecArchive_RewriteType_MERGE_CELLS;
  static constexpr RewriteType UNDO_MERGE_CELLS =
    FormulaRewriteSpecArchive_RewriteType_UNDO_MERGE_CELLS;
  static constexpr RewriteType TABLE_ID_REASSIGNMENT =
    FormulaRewriteSpecArchive_RewriteType_TABLE_ID_REASSIGNMENT;
  static constexpr RewriteType INSERT_OWNER =
    FormulaRewriteSpecArchive_RewriteType_INSERT_OWNER;
  static constexpr RewriteType MERGE_ORIGIN_MOVED =
    FormulaRewriteSpecArchive_RewriteType_MERGE_ORIGIN_MOVED;
  static constexpr RewriteType REORDER_ROWS =
    FormulaRewriteSpecArchive_RewriteType_REORDER_ROWS;
  static constexpr RewriteType GROUP_NODE_UID_REASSIGNMENT =
    FormulaRewriteSpecArchive_RewriteType_GROUP_NODE_UID_REASSIGNMENT;
  static constexpr RewriteType BASE_TO_CHROME_REWRITE =
    FormulaRewriteSpecArchive_RewriteType_BASE_TO_CHROME_REWRITE;
  static constexpr RewriteType CHROME_TO_BASE_REWRITE =
    FormulaRewriteSpecArchive_RewriteType_CHROME_TO_BASE_REWRITE;
  static constexpr RewriteType GROUP_NODE_CHANGE =
    FormulaRewriteSpecArchive_RewriteType_GROUP_NODE_CHANGE;
  static constexpr RewriteType PASTED_AREA =
    FormulaRewriteSpecArchive_RewriteType_PASTED_AREA;
  static inline bool RewriteType_IsValid(int value) {
    return FormulaRewriteSpecArchive_RewriteType_IsValid(value);
  }
  static constexpr RewriteType RewriteType_MIN =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_MIN;
  static constexpr RewriteType RewriteType_MAX =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_MAX;
  static constexpr int RewriteType_ARRAYSIZE =
    FormulaRewriteSpecArchive_RewriteType_RewriteType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RewriteType_descriptor() {
    return FormulaRewriteSpecArchive_RewriteType_descriptor();
  }
  template<typename T>
  static inline const std::string& RewriteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RewriteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RewriteType_Name.");
    return FormulaRewriteSpecArchive_RewriteType_Name(enum_t_value);
  }
  static inline bool RewriteType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RewriteType* value) {
    return FormulaRewriteSpecArchive_RewriteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableUidFieldNumber = 2,
    kCondStyleOwnerUidFieldNumber = 3,
    kGroupByUidFieldNumber = 4,
    kColumnOrRowUuidsInfoFieldNumber = 5,
    kAuxColumnOrRowUuidsInfoFieldNumber = 6,
    kRegionMovedInfoFieldNumber = 7,
    kRegionInfoFieldNumber = 8,
    kRewriteTableIdInfoFieldNumber = 9,
    kTransposedTableInfoFieldNumber = 10,
    kMergeOriginMovedInfoFieldNumber = 11,
    kMergeSourceFieldNumber = 12,
    kGroupNodeInfoFieldNumber = 13,
    kGroupbyChangeFieldNumber = 14,
    kIsInverseFieldNumber = 15,
    kRewriteTypeFieldNumber = 1,
  };
  // optional .TSP.UUID table_uid = 2;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // optional .TSP.UUID cond_style_owner_uid = 3;
  bool has_cond_style_owner_uid() const;
  private:
  bool _internal_has_cond_style_owner_uid() const;
  public:
  void clear_cond_style_owner_uid();
  const ::TSP::UUID& cond_style_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_cond_style_owner_uid();
  ::TSP::UUID* mutable_cond_style_owner_uid();
  void set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid);
  private:
  const ::TSP::UUID& _internal_cond_style_owner_uid() const;
  ::TSP::UUID* _internal_mutable_cond_style_owner_uid();
  public:
  void unsafe_arena_set_allocated_cond_style_owner_uid(
      ::TSP::UUID* cond_style_owner_uid);
  ::TSP::UUID* unsafe_arena_release_cond_style_owner_uid();

  // optional .TSP.UUID group_by_uid = 4;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 5;
  bool has_column_or_row_uuids_info() const;
  private:
  bool _internal_has_column_or_row_uuids_info() const;
  public:
  void clear_column_or_row_uuids_info();
  const ::TSCE::ColumnOrRowUuidsInfoArchive& column_or_row_uuids_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ColumnOrRowUuidsInfoArchive* release_column_or_row_uuids_info();
  ::TSCE::ColumnOrRowUuidsInfoArchive* mutable_column_or_row_uuids_info();
  void set_allocated_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info);
  private:
  const ::TSCE::ColumnOrRowUuidsInfoArchive& _internal_column_or_row_uuids_info() const;
  ::TSCE::ColumnOrRowUuidsInfoArchive* _internal_mutable_column_or_row_uuids_info();
  public:
  void unsafe_arena_set_allocated_column_or_row_uuids_info(
      ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info);
  ::TSCE::ColumnOrRowUuidsInfoArchive* unsafe_arena_release_column_or_row_uuids_info();

  // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 6;
  bool has_aux_column_or_row_uuids_info() const;
  private:
  bool _internal_has_aux_column_or_row_uuids_info() const;
  public:
  void clear_aux_column_or_row_uuids_info();
  const ::TSCE::ColumnOrRowUuidsInfoArchive& aux_column_or_row_uuids_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ColumnOrRowUuidsInfoArchive* release_aux_column_or_row_uuids_info();
  ::TSCE::ColumnOrRowUuidsInfoArchive* mutable_aux_column_or_row_uuids_info();
  void set_allocated_aux_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info);
  private:
  const ::TSCE::ColumnOrRowUuidsInfoArchive& _internal_aux_column_or_row_uuids_info() const;
  ::TSCE::ColumnOrRowUuidsInfoArchive* _internal_mutable_aux_column_or_row_uuids_info();
  public:
  void unsafe_arena_set_allocated_aux_column_or_row_uuids_info(
      ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info);
  ::TSCE::ColumnOrRowUuidsInfoArchive* unsafe_arena_release_aux_column_or_row_uuids_info();

  // optional .TSCE.RegionMovedInfoArchive region_moved_info = 7;
  bool has_region_moved_info() const;
  private:
  bool _internal_has_region_moved_info() const;
  public:
  void clear_region_moved_info();
  const ::TSCE::RegionMovedInfoArchive& region_moved_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RegionMovedInfoArchive* release_region_moved_info();
  ::TSCE::RegionMovedInfoArchive* mutable_region_moved_info();
  void set_allocated_region_moved_info(::TSCE::RegionMovedInfoArchive* region_moved_info);
  private:
  const ::TSCE::RegionMovedInfoArchive& _internal_region_moved_info() const;
  ::TSCE::RegionMovedInfoArchive* _internal_mutable_region_moved_info();
  public:
  void unsafe_arena_set_allocated_region_moved_info(
      ::TSCE::RegionMovedInfoArchive* region_moved_info);
  ::TSCE::RegionMovedInfoArchive* unsafe_arena_release_region_moved_info();

  // optional .TSCE.RegionInfoArchive region_info = 8;
  bool has_region_info() const;
  private:
  bool _internal_has_region_info() const;
  public:
  void clear_region_info();
  const ::TSCE::RegionInfoArchive& region_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RegionInfoArchive* release_region_info();
  ::TSCE::RegionInfoArchive* mutable_region_info();
  void set_allocated_region_info(::TSCE::RegionInfoArchive* region_info);
  private:
  const ::TSCE::RegionInfoArchive& _internal_region_info() const;
  ::TSCE::RegionInfoArchive* _internal_mutable_region_info();
  public:
  void unsafe_arena_set_allocated_region_info(
      ::TSCE::RegionInfoArchive* region_info);
  ::TSCE::RegionInfoArchive* unsafe_arena_release_region_info();

  // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 9;
  bool has_rewrite_table_id_info() const;
  private:
  bool _internal_has_rewrite_table_id_info() const;
  public:
  void clear_rewrite_table_id_info();
  const ::TSCE::RewriteTableUIDInfoArchive& rewrite_table_id_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RewriteTableUIDInfoArchive* release_rewrite_table_id_info();
  ::TSCE::RewriteTableUIDInfoArchive* mutable_rewrite_table_id_info();
  void set_allocated_rewrite_table_id_info(::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info);
  private:
  const ::TSCE::RewriteTableUIDInfoArchive& _internal_rewrite_table_id_info() const;
  ::TSCE::RewriteTableUIDInfoArchive* _internal_mutable_rewrite_table_id_info();
  public:
  void unsafe_arena_set_allocated_rewrite_table_id_info(
      ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info);
  ::TSCE::RewriteTableUIDInfoArchive* unsafe_arena_release_rewrite_table_id_info();

  // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 10;
  bool has_transposed_table_info() const;
  private:
  bool _internal_has_transposed_table_info() const;
  public:
  void clear_transposed_table_info();
  const ::TSCE::TableTransposeInfoArchive& transposed_table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::TableTransposeInfoArchive* release_transposed_table_info();
  ::TSCE::TableTransposeInfoArchive* mutable_transposed_table_info();
  void set_allocated_transposed_table_info(::TSCE::TableTransposeInfoArchive* transposed_table_info);
  private:
  const ::TSCE::TableTransposeInfoArchive& _internal_transposed_table_info() const;
  ::TSCE::TableTransposeInfoArchive* _internal_mutable_transposed_table_info();
  public:
  void unsafe_arena_set_allocated_transposed_table_info(
      ::TSCE::TableTransposeInfoArchive* transposed_table_info);
  ::TSCE::TableTransposeInfoArchive* unsafe_arena_release_transposed_table_info();

  // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 11;
  bool has_merge_origin_moved_info() const;
  private:
  bool _internal_has_merge_origin_moved_info() const;
  public:
  void clear_merge_origin_moved_info();
  const ::TSCE::MergeOriginMovedArchive& merge_origin_moved_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::MergeOriginMovedArchive* release_merge_origin_moved_info();
  ::TSCE::MergeOriginMovedArchive* mutable_merge_origin_moved_info();
  void set_allocated_merge_origin_moved_info(::TSCE::MergeOriginMovedArchive* merge_origin_moved_info);
  private:
  const ::TSCE::MergeOriginMovedArchive& _internal_merge_origin_moved_info() const;
  ::TSCE::MergeOriginMovedArchive* _internal_mutable_merge_origin_moved_info();
  public:
  void unsafe_arena_set_allocated_merge_origin_moved_info(
      ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info);
  ::TSCE::MergeOriginMovedArchive* unsafe_arena_release_merge_origin_moved_info();

  // optional .TSCE.MergeSourceArchive merge_source = 12;
  bool has_merge_source() const;
  private:
  bool _internal_has_merge_source() const;
  public:
  void clear_merge_source();
  const ::TSCE::MergeSourceArchive& merge_source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::MergeSourceArchive* release_merge_source();
  ::TSCE::MergeSourceArchive* mutable_merge_source();
  void set_allocated_merge_source(::TSCE::MergeSourceArchive* merge_source);
  private:
  const ::TSCE::MergeSourceArchive& _internal_merge_source() const;
  ::TSCE::MergeSourceArchive* _internal_mutable_merge_source();
  public:
  void unsafe_arena_set_allocated_merge_source(
      ::TSCE::MergeSourceArchive* merge_source);
  ::TSCE::MergeSourceArchive* unsafe_arena_release_merge_source();

  // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 13;
  bool has_group_node_info() const;
  private:
  bool _internal_has_group_node_info() const;
  public:
  void clear_group_node_info();
  const ::TSCE::RewriteGroupNodeUIDInfoArchive& group_node_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RewriteGroupNodeUIDInfoArchive* release_group_node_info();
  ::TSCE::RewriteGroupNodeUIDInfoArchive* mutable_group_node_info();
  void set_allocated_group_node_info(::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info);
  private:
  const ::TSCE::RewriteGroupNodeUIDInfoArchive& _internal_group_node_info() const;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* _internal_mutable_group_node_info();
  public:
  void unsafe_arena_set_allocated_group_node_info(
      ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info);
  ::TSCE::RewriteGroupNodeUIDInfoArchive* unsafe_arena_release_group_node_info();

  // optional .TSCE.GroupByChangeArchive groupby_change = 14;
  bool has_groupby_change() const;
  private:
  bool _internal_has_groupby_change() const;
  public:
  void clear_groupby_change();
  const ::TSCE::GroupByChangeArchive& groupby_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::GroupByChangeArchive* release_groupby_change();
  ::TSCE::GroupByChangeArchive* mutable_groupby_change();
  void set_allocated_groupby_change(::TSCE::GroupByChangeArchive* groupby_change);
  private:
  const ::TSCE::GroupByChangeArchive& _internal_groupby_change() const;
  ::TSCE::GroupByChangeArchive* _internal_mutable_groupby_change();
  public:
  void unsafe_arena_set_allocated_groupby_change(
      ::TSCE::GroupByChangeArchive* groupby_change);
  ::TSCE::GroupByChangeArchive* unsafe_arena_release_groupby_change();

  // optional bool is_inverse = 15;
  bool has_is_inverse() const;
  private:
  bool _internal_has_is_inverse() const;
  public:
  void clear_is_inverse();
  bool is_inverse() const;
  void set_is_inverse(bool value);
  private:
  bool _internal_is_inverse() const;
  void _internal_set_is_inverse(bool value);
  public:

  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  bool has_rewrite_type() const;
  private:
  bool _internal_has_rewrite_type() const;
  public:
  void clear_rewrite_type();
  ::TSCE::FormulaRewriteSpecArchive_RewriteType rewrite_type() const;
  void set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value);
  private:
  ::TSCE::FormulaRewriteSpecArchive_RewriteType _internal_rewrite_type() const;
  void _internal_set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaRewriteSpecArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* table_uid_;
  ::TSP::UUID* cond_style_owner_uid_;
  ::TSP::UUID* group_by_uid_;
  ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info_;
  ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info_;
  ::TSCE::RegionMovedInfoArchive* region_moved_info_;
  ::TSCE::RegionInfoArchive* region_info_;
  ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info_;
  ::TSCE::TableTransposeInfoArchive* transposed_table_info_;
  ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info_;
  ::TSCE::MergeSourceArchive* merge_source_;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info_;
  ::TSCE::GroupByChangeArchive* groupby_change_;
  bool is_inverse_;
  int rewrite_type_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class HauntedOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.HauntedOwnerArchive) */ {
 public:
  inline HauntedOwnerArchive() : HauntedOwnerArchive(nullptr) {}
  ~HauntedOwnerArchive() override;
  explicit constexpr HauntedOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HauntedOwnerArchive(const HauntedOwnerArchive& from);
  HauntedOwnerArchive(HauntedOwnerArchive&& from) noexcept
    : HauntedOwnerArchive() {
    *this = ::std::move(from);
  }

  inline HauntedOwnerArchive& operator=(const HauntedOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HauntedOwnerArchive& operator=(HauntedOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HauntedOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HauntedOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const HauntedOwnerArchive*>(
               &_HauntedOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(HauntedOwnerArchive& a, HauntedOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HauntedOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HauntedOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HauntedOwnerArchive* New() const final {
    return CreateMaybeMessage<HauntedOwnerArchive>(nullptr);
  }

  HauntedOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HauntedOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HauntedOwnerArchive& from);
  void MergeFrom(const HauntedOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HauntedOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.HauntedOwnerArchive";
  }
  protected:
  explicit HauntedOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUidFieldNumber = 1,
  };
  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // @@protoc_insertion_point(class_scope:TSCE.HauntedOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* owner_uid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateArchive) */ {
 public:
  inline CellCoordinateArchive() : CellCoordinateArchive(nullptr) {}
  ~CellCoordinateArchive() override;
  explicit constexpr CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateArchive(const CellCoordinateArchive& from);
  CellCoordinateArchive(CellCoordinateArchive&& from) noexcept
    : CellCoordinateArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateArchive& operator=(const CellCoordinateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateArchive& operator=(CellCoordinateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateArchive*>(
               &_CellCoordinateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CellCoordinateArchive& a, CellCoordinateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellCoordinateArchive* New() const final {
    return CreateMaybeMessage<CellCoordinateArchive>(nullptr);
  }

  CellCoordinateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellCoordinateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellCoordinateArchive& from);
  void MergeFrom(const CellCoordinateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateArchive";
  }
  protected:
  explicit CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedDataFieldNumber = 1,
    kColumnFieldNumber = 2,
    kRowFieldNumber = 3,
  };
  // optional fixed32 packedData = 1;
  bool has_packeddata() const;
  private:
  bool _internal_has_packeddata() const;
  public:
  void clear_packeddata();
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata() const;
  void set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packeddata() const;
  void _internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column = 2;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row = 3;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellCoordinateVectorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellCoordinateVectorArchive) */ {
 public:
  inline CellCoordinateVectorArchive() : CellCoordinateVectorArchive(nullptr) {}
  ~CellCoordinateVectorArchive() override;
  explicit constexpr CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from);
  CellCoordinateVectorArchive(CellCoordinateVectorArchive&& from) noexcept
    : CellCoordinateVectorArchive() {
    *this = ::std::move(from);
  }

  inline CellCoordinateVectorArchive& operator=(const CellCoordinateVectorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellCoordinateVectorArchive& operator=(CellCoordinateVectorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellCoordinateVectorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellCoordinateVectorArchive* internal_default_instance() {
    return reinterpret_cast<const CellCoordinateVectorArchive*>(
               &_CellCoordinateVectorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CellCoordinateVectorArchive& a, CellCoordinateVectorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellCoordinateVectorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellCoordinateVectorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellCoordinateVectorArchive* New() const final {
    return CreateMaybeMessage<CellCoordinateVectorArchive>(nullptr);
  }

  CellCoordinateVectorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellCoordinateVectorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellCoordinateVectorArchive& from);
  void MergeFrom(const CellCoordinateVectorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellCoordinateVectorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellCoordinateVectorArchive";
  }
  protected:
  explicit CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellCoordFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
  int cell_coord_size() const;
  private:
  int _internal_cell_coord_size() const;
  public:
  void clear_cell_coord();
  ::TSCE::CellCoordinateArchive* mutable_cell_coord(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_cell_coord();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_cell_coord(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_cell_coord();
  public:
  const ::TSCE::CellCoordinateArchive& cell_coord(int index) const;
  ::TSCE::CellCoordinateArchive* add_cell_coord();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      cell_coord() const;

  // @@protoc_insertion_point(class_scope:TSCE.CellCoordinateVectorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > cell_coord_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedCellRefObjectPairArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ExpandedCellRefObjectPairArchive) */ {
 public:
  inline ExpandedCellRefObjectPairArchive() : ExpandedCellRefObjectPairArchive(nullptr) {}
  ~ExpandedCellRefObjectPairArchive() override;
  explicit constexpr ExpandedCellRefObjectPairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedCellRefObjectPairArchive(const ExpandedCellRefObjectPairArchive& from);
  ExpandedCellRefObjectPairArchive(ExpandedCellRefObjectPairArchive&& from) noexcept
    : ExpandedCellRefObjectPairArchive() {
    *this = ::std::move(from);
  }

  inline ExpandedCellRefObjectPairArchive& operator=(const ExpandedCellRefObjectPairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedCellRefObjectPairArchive& operator=(ExpandedCellRefObjectPairArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedCellRefObjectPairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedCellRefObjectPairArchive* internal_default_instance() {
    return reinterpret_cast<const ExpandedCellRefObjectPairArchive*>(
               &_ExpandedCellRefObjectPairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ExpandedCellRefObjectPairArchive& a, ExpandedCellRefObjectPairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedCellRefObjectPairArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedCellRefObjectPairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedCellRefObjectPairArchive* New() const final {
    return CreateMaybeMessage<ExpandedCellRefObjectPairArchive>(nullptr);
  }

  ExpandedCellRefObjectPairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedCellRefObjectPairArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedCellRefObjectPairArchive& from);
  void MergeFrom(const ExpandedCellRefObjectPairArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedCellRefObjectPairArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ExpandedCellRefObjectPairArchive";
  }
  protected:
  explicit ExpandedCellRefObjectPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRefFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  bool has_cell_ref() const;
  private:
  bool _internal_has_cell_ref() const;
  public:
  void clear_cell_ref();
  const ::TSCE::CellReferenceArchive& cell_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellReferenceArchive* release_cell_ref();
  ::TSCE::CellReferenceArchive* mutable_cell_ref();
  void set_allocated_cell_ref(::TSCE::CellReferenceArchive* cell_ref);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_ref() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_ref();
  public:
  void unsafe_arena_set_allocated_cell_ref(
      ::TSCE::CellReferenceArchive* cell_ref);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_ref();

  // required .TSP.Reference object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:TSCE.ExpandedCellRefObjectPairArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellReferenceArchive* cell_ref_;
  ::TSP::Reference* object_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedCellRefObjectMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ExpandedCellRefObjectMapArchive) */ {
 public:
  inline ExpandedCellRefObjectMapArchive() : ExpandedCellRefObjectMapArchive(nullptr) {}
  ~ExpandedCellRefObjectMapArchive() override;
  explicit constexpr ExpandedCellRefObjectMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedCellRefObjectMapArchive(const ExpandedCellRefObjectMapArchive& from);
  ExpandedCellRefObjectMapArchive(ExpandedCellRefObjectMapArchive&& from) noexcept
    : ExpandedCellRefObjectMapArchive() {
    *this = ::std::move(from);
  }

  inline ExpandedCellRefObjectMapArchive& operator=(const ExpandedCellRefObjectMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedCellRefObjectMapArchive& operator=(ExpandedCellRefObjectMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedCellRefObjectMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedCellRefObjectMapArchive* internal_default_instance() {
    return reinterpret_cast<const ExpandedCellRefObjectMapArchive*>(
               &_ExpandedCellRefObjectMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(ExpandedCellRefObjectMapArchive& a, ExpandedCellRefObjectMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedCellRefObjectMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedCellRefObjectMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedCellRefObjectMapArchive* New() const final {
    return CreateMaybeMessage<ExpandedCellRefObjectMapArchive>(nullptr);
  }

  ExpandedCellRefObjectMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedCellRefObjectMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedCellRefObjectMapArchive& from);
  void MergeFrom(const ExpandedCellRefObjectMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedCellRefObjectMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ExpandedCellRefObjectMapArchive";
  }
  protected:
  explicit ExpandedCellRefObjectMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRefObjectPairFieldNumber = 1,
  };
  // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
  int cell_ref_object_pair_size() const;
  private:
  int _internal_cell_ref_object_pair_size() const;
  public:
  void clear_cell_ref_object_pair();
  ::TSCE::ExpandedCellRefObjectPairArchive* mutable_cell_ref_object_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedCellRefObjectPairArchive >*
      mutable_cell_ref_object_pair();
  private:
  const ::TSCE::ExpandedCellRefObjectPairArchive& _internal_cell_ref_object_pair(int index) const;
  ::TSCE::ExpandedCellRefObjectPairArchive* _internal_add_cell_ref_object_pair();
  public:
  const ::TSCE::ExpandedCellRefObjectPairArchive& cell_ref_object_pair(int index) const;
  ::TSCE::ExpandedCellRefObjectPairArchive* add_cell_ref_object_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedCellRefObjectPairArchive >&
      cell_ref_object_pair() const;

  // @@protoc_insertion_point(class_scope:TSCE.ExpandedCellRefObjectMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedCellRefObjectPairArchive > cell_ref_object_pair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaAtCoordArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaAtCoordArchive) */ {
 public:
  inline FormulaAtCoordArchive() : FormulaAtCoordArchive(nullptr) {}
  ~FormulaAtCoordArchive() override;
  explicit constexpr FormulaAtCoordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaAtCoordArchive(const FormulaAtCoordArchive& from);
  FormulaAtCoordArchive(FormulaAtCoordArchive&& from) noexcept
    : FormulaAtCoordArchive() {
    *this = ::std::move(from);
  }

  inline FormulaAtCoordArchive& operator=(const FormulaAtCoordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaAtCoordArchive& operator=(FormulaAtCoordArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaAtCoordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaAtCoordArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaAtCoordArchive*>(
               &_FormulaAtCoordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(FormulaAtCoordArchive& a, FormulaAtCoordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaAtCoordArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaAtCoordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaAtCoordArchive* New() const final {
    return CreateMaybeMessage<FormulaAtCoordArchive>(nullptr);
  }

  FormulaAtCoordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaAtCoordArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaAtCoordArchive& from);
  void MergeFrom(const FormulaAtCoordArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaAtCoordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaAtCoordArchive";
  }
  protected:
  explicit FormulaAtCoordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 3,
    kColumnFieldNumber = 1,
    kRowFieldNumber = 2,
    kRepeatPreviousFormulaFieldNumber = 4,
  };
  // optional .TSCE.FormulaArchive formula = 3;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row = 2;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool repeat_previous_formula = 4 [default = false];
  bool has_repeat_previous_formula() const;
  private:
  bool _internal_has_repeat_previous_formula() const;
  public:
  void clear_repeat_previous_formula();
  bool repeat_previous_formula() const;
  void set_repeat_previous_formula(bool value);
  private:
  bool _internal_repeat_previous_formula() const;
  void _internal_set_repeat_previous_formula(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaAtCoordArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::FormulaArchive* formula_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_;
  bool repeat_previous_formula_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaCoordPairsByOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaCoordPairsByOwnerArchive) */ {
 public:
  inline FormulaCoordPairsByOwnerArchive() : FormulaCoordPairsByOwnerArchive(nullptr) {}
  ~FormulaCoordPairsByOwnerArchive() override;
  explicit constexpr FormulaCoordPairsByOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaCoordPairsByOwnerArchive(const FormulaCoordPairsByOwnerArchive& from);
  FormulaCoordPairsByOwnerArchive(FormulaCoordPairsByOwnerArchive&& from) noexcept
    : FormulaCoordPairsByOwnerArchive() {
    *this = ::std::move(from);
  }

  inline FormulaCoordPairsByOwnerArchive& operator=(const FormulaCoordPairsByOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaCoordPairsByOwnerArchive& operator=(FormulaCoordPairsByOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaCoordPairsByOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaCoordPairsByOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaCoordPairsByOwnerArchive*>(
               &_FormulaCoordPairsByOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(FormulaCoordPairsByOwnerArchive& a, FormulaCoordPairsByOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaCoordPairsByOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaCoordPairsByOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaCoordPairsByOwnerArchive* New() const final {
    return CreateMaybeMessage<FormulaCoordPairsByOwnerArchive>(nullptr);
  }

  FormulaCoordPairsByOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaCoordPairsByOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaCoordPairsByOwnerArchive& from);
  void MergeFrom(const FormulaCoordPairsByOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaCoordPairsByOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaCoordPairsByOwnerArchive";
  }
  protected:
  explicit FormulaCoordPairsByOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaAtCoordsFieldNumber = 3,
    kOwnerUidFieldNumber = 2,
    kOwnerKindFieldNumber = 1,
  };
  // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
  int formula_at_coords_size() const;
  private:
  int _internal_formula_at_coords_size() const;
  public:
  void clear_formula_at_coords();
  ::TSCE::FormulaAtCoordArchive* mutable_formula_at_coords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaAtCoordArchive >*
      mutable_formula_at_coords();
  private:
  const ::TSCE::FormulaAtCoordArchive& _internal_formula_at_coords(int index) const;
  ::TSCE::FormulaAtCoordArchive* _internal_add_formula_at_coords();
  public:
  const ::TSCE::FormulaAtCoordArchive& formula_at_coords(int index) const;
  ::TSCE::FormulaAtCoordArchive* add_formula_at_coords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaAtCoordArchive >&
      formula_at_coords() const;

  // optional .TSP.UUID owner_uid = 2;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // required uint32 owner_kind = 1;
  bool has_owner_kind() const;
  private:
  bool _internal_has_owner_kind() const;
  public:
  void clear_owner_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind() const;
  void set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_kind() const;
  void _internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.FormulaCoordPairsByOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaAtCoordArchive > formula_at_coords_;
  ::TSP::UUID* owner_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_kind_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulasForUndoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulasForUndoArchive) */ {
 public:
  inline FormulasForUndoArchive() : FormulasForUndoArchive(nullptr) {}
  ~FormulasForUndoArchive() override;
  explicit constexpr FormulasForUndoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulasForUndoArchive(const FormulasForUndoArchive& from);
  FormulasForUndoArchive(FormulasForUndoArchive&& from) noexcept
    : FormulasForUndoArchive() {
    *this = ::std::move(from);
  }

  inline FormulasForUndoArchive& operator=(const FormulasForUndoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulasForUndoArchive& operator=(FormulasForUndoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulasForUndoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulasForUndoArchive* internal_default_instance() {
    return reinterpret_cast<const FormulasForUndoArchive*>(
               &_FormulasForUndoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(FormulasForUndoArchive& a, FormulasForUndoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulasForUndoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulasForUndoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulasForUndoArchive* New() const final {
    return CreateMaybeMessage<FormulasForUndoArchive>(nullptr);
  }

  FormulasForUndoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulasForUndoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulasForUndoArchive& from);
  void MergeFrom(const FormulasForUndoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulasForUndoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulasForUndoArchive";
  }
  protected:
  explicit FormulasForUndoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulasForOwnerFieldNumber = 1,
  };
  // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
  int formulas_for_owner_size() const;
  private:
  int _internal_formulas_for_owner_size() const;
  public:
  void clear_formulas_for_owner();
  ::TSCE::FormulaCoordPairsByOwnerArchive* mutable_formulas_for_owner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaCoordPairsByOwnerArchive >*
      mutable_formulas_for_owner();
  private:
  const ::TSCE::FormulaCoordPairsByOwnerArchive& _internal_formulas_for_owner(int index) const;
  ::TSCE::FormulaCoordPairsByOwnerArchive* _internal_add_formulas_for_owner();
  public:
  const ::TSCE::FormulaCoordPairsByOwnerArchive& formulas_for_owner(int index) const;
  ::TSCE::FormulaCoordPairsByOwnerArchive* add_formulas_for_owner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaCoordPairsByOwnerArchive >&
      formulas_for_owner() const;

  // @@protoc_insertion_point(class_scope:TSCE.FormulasForUndoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaCoordPairsByOwnerArchive > formulas_for_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaRewriteCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.FormulaRewriteCommandArchive) */ {
 public:
  inline FormulaRewriteCommandArchive() : FormulaRewriteCommandArchive(nullptr) {}
  ~FormulaRewriteCommandArchive() override;
  explicit constexpr FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from);
  FormulaRewriteCommandArchive(FormulaRewriteCommandArchive&& from) noexcept
    : FormulaRewriteCommandArchive() {
    *this = ::std::move(from);
  }

  inline FormulaRewriteCommandArchive& operator=(const FormulaRewriteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaRewriteCommandArchive& operator=(FormulaRewriteCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaRewriteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaRewriteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaRewriteCommandArchive*>(
               &_FormulaRewriteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(FormulaRewriteCommandArchive& a, FormulaRewriteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaRewriteCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaRewriteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaRewriteCommandArchive* New() const final {
    return CreateMaybeMessage<FormulaRewriteCommandArchive>(nullptr);
  }

  FormulaRewriteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaRewriteCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaRewriteCommandArchive& from);
  void MergeFrom(const FormulaRewriteCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaRewriteCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.FormulaRewriteCommandArchive";
  }
  protected:
  explicit FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableRewriteCommandFieldNumber = 1,
    kSuperFieldNumber = 2,
  };
  // optional .TSP.Reference table_rewrite_command = 1;
  bool has_table_rewrite_command() const;
  private:
  bool _internal_has_table_rewrite_command() const;
  public:
  void clear_table_rewrite_command();
  const ::TSP::Reference& table_rewrite_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_rewrite_command();
  ::TSP::Reference* mutable_table_rewrite_command();
  void set_allocated_table_rewrite_command(::TSP::Reference* table_rewrite_command);
  private:
  const ::TSP::Reference& _internal_table_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_table_rewrite_command();
  public:
  void unsafe_arena_set_allocated_table_rewrite_command(
      ::TSP::Reference* table_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_table_rewrite_command();

  // optional .TSK.CommandArchive super = 2;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCE.FormulaRewriteCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* table_rewrite_command_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ExtendTableIDHistoryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ExtendTableIDHistoryCommandArchive) */ {
 public:
  inline ExtendTableIDHistoryCommandArchive() : ExtendTableIDHistoryCommandArchive(nullptr) {}
  ~ExtendTableIDHistoryCommandArchive() override;
  explicit constexpr ExtendTableIDHistoryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendTableIDHistoryCommandArchive(const ExtendTableIDHistoryCommandArchive& from);
  ExtendTableIDHistoryCommandArchive(ExtendTableIDHistoryCommandArchive&& from) noexcept
    : ExtendTableIDHistoryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ExtendTableIDHistoryCommandArchive& operator=(const ExtendTableIDHistoryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendTableIDHistoryCommandArchive& operator=(ExtendTableIDHistoryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendTableIDHistoryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendTableIDHistoryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ExtendTableIDHistoryCommandArchive*>(
               &_ExtendTableIDHistoryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(ExtendTableIDHistoryCommandArchive& a, ExtendTableIDHistoryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendTableIDHistoryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendTableIDHistoryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtendTableIDHistoryCommandArchive* New() const final {
    return CreateMaybeMessage<ExtendTableIDHistoryCommandArchive>(nullptr);
  }

  ExtendTableIDHistoryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtendTableIDHistoryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtendTableIDHistoryCommandArchive& from);
  void MergeFrom(const ExtendTableIDHistoryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendTableIDHistoryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ExtendTableIDHistoryCommandArchive";
  }
  protected:
  explicit ExtendTableIDHistoryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRewriteSpecFieldNumber = 2,
    kTableUidHistoryRollbackFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TSCE::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TSCE::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TSCE::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  ::TSCE::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  bool has_table_uid_history_rollback() const;
  private:
  bool _internal_has_table_uid_history_rollback() const;
  public:
  void clear_table_uid_history_rollback();
  const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history_rollback() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RewriteTableUIDInfoArchive* release_table_uid_history_rollback();
  ::TSCE::RewriteTableUIDInfoArchive* mutable_table_uid_history_rollback();
  void set_allocated_table_uid_history_rollback(::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback);
  private:
  const ::TSCE::RewriteTableUIDInfoArchive& _internal_table_uid_history_rollback() const;
  ::TSCE::RewriteTableUIDInfoArchive* _internal_mutable_table_uid_history_rollback();
  public:
  void unsafe_arena_set_allocated_table_uid_history_rollback(
      ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback);
  ::TSCE::RewriteTableUIDInfoArchive* unsafe_arena_release_table_uid_history_rollback();

  // @@protoc_insertion_point(class_scope:TSCE.ExtendTableIDHistoryCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSCE::FormulaRewriteSpecArchive* rewrite_spec_;
  ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberTrackedReferencePairArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberTrackedReferencePairArchive) */ {
 public:
  inline NumberTrackedReferencePairArchive() : NumberTrackedReferencePairArchive(nullptr) {}
  ~NumberTrackedReferencePairArchive() override;
  explicit constexpr NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberTrackedReferencePairArchive(const NumberTrackedReferencePairArchive& from);
  NumberTrackedReferencePairArchive(NumberTrackedReferencePairArchive&& from) noexcept
    : NumberTrackedReferencePairArchive() {
    *this = ::std::move(from);
  }

  inline NumberTrackedReferencePairArchive& operator=(const NumberTrackedReferencePairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberTrackedReferencePairArchive& operator=(NumberTrackedReferencePairArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberTrackedReferencePairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberTrackedReferencePairArchive* internal_default_instance() {
    return reinterpret_cast<const NumberTrackedReferencePairArchive*>(
               &_NumberTrackedReferencePairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(NumberTrackedReferencePairArchive& a, NumberTrackedReferencePairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberTrackedReferencePairArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberTrackedReferencePairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberTrackedReferencePairArchive* New() const final {
    return CreateMaybeMessage<NumberTrackedReferencePairArchive>(nullptr);
  }

  NumberTrackedReferencePairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberTrackedReferencePairArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberTrackedReferencePairArchive& from);
  void MergeFrom(const NumberTrackedReferencePairArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberTrackedReferencePairArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberTrackedReferencePairArchive";
  }
  protected:
  explicit NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedReferenceFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // optional .TSP.Reference tracked_reference = 2;
  bool has_tracked_reference() const;
  private:
  bool _internal_has_tracked_reference() const;
  public:
  void clear_tracked_reference();
  const ::TSP::Reference& tracked_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tracked_reference();
  ::TSP::Reference* mutable_tracked_reference();
  void set_allocated_tracked_reference(::TSP::Reference* tracked_reference);
  private:
  const ::TSP::Reference& _internal_tracked_reference() const;
  ::TSP::Reference* _internal_mutable_tracked_reference();
  public:
  void unsafe_arena_set_allocated_tracked_reference(
      ::TSP::Reference* tracked_reference);
  ::TSP::Reference* unsafe_arena_release_tracked_reference();

  // required uint32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NumberTrackedReferencePairArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* tracked_reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberToTrackedReferenceMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberToTrackedReferenceMapArchive) */ {
 public:
  inline NumberToTrackedReferenceMapArchive() : NumberToTrackedReferenceMapArchive(nullptr) {}
  ~NumberToTrackedReferenceMapArchive() override;
  explicit constexpr NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberToTrackedReferenceMapArchive(const NumberToTrackedReferenceMapArchive& from);
  NumberToTrackedReferenceMapArchive(NumberToTrackedReferenceMapArchive&& from) noexcept
    : NumberToTrackedReferenceMapArchive() {
    *this = ::std::move(from);
  }

  inline NumberToTrackedReferenceMapArchive& operator=(const NumberToTrackedReferenceMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberToTrackedReferenceMapArchive& operator=(NumberToTrackedReferenceMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberToTrackedReferenceMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberToTrackedReferenceMapArchive* internal_default_instance() {
    return reinterpret_cast<const NumberToTrackedReferenceMapArchive*>(
               &_NumberToTrackedReferenceMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(NumberToTrackedReferenceMapArchive& a, NumberToTrackedReferenceMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberToTrackedReferenceMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberToTrackedReferenceMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberToTrackedReferenceMapArchive* New() const final {
    return CreateMaybeMessage<NumberToTrackedReferenceMapArchive>(nullptr);
  }

  NumberToTrackedReferenceMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberToTrackedReferenceMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberToTrackedReferenceMapArchive& from);
  void MergeFrom(const NumberToTrackedReferenceMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberToTrackedReferenceMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberToTrackedReferenceMapArchive";
  }
  protected:
  explicit NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberTrackedReferencePairFieldNumber = 1,
  };
  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  int number_tracked_reference_pair_size() const;
  private:
  int _internal_number_tracked_reference_pair_size() const;
  public:
  void clear_number_tracked_reference_pair();
  ::TSCE::NumberTrackedReferencePairArchive* mutable_number_tracked_reference_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >*
      mutable_number_tracked_reference_pair();
  private:
  const ::TSCE::NumberTrackedReferencePairArchive& _internal_number_tracked_reference_pair(int index) const;
  ::TSCE::NumberTrackedReferencePairArchive* _internal_add_number_tracked_reference_pair();
  public:
  const ::TSCE::NumberTrackedReferencePairArchive& number_tracked_reference_pair(int index) const;
  ::TSCE::NumberTrackedReferencePairArchive* add_number_tracked_reference_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >&
      number_tracked_reference_pair() const;

  // @@protoc_insertion_point(class_scope:TSCE.NumberToTrackedReferenceMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive > number_tracked_reference_pair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TrackedReferencesRewriteCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TrackedReferencesRewriteCommandArchive) */ {
 public:
  inline TrackedReferencesRewriteCommandArchive() : TrackedReferencesRewriteCommandArchive(nullptr) {}
  ~TrackedReferencesRewriteCommandArchive() override;
  explicit constexpr TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedReferencesRewriteCommandArchive(const TrackedReferencesRewriteCommandArchive& from);
  TrackedReferencesRewriteCommandArchive(TrackedReferencesRewriteCommandArchive&& from) noexcept
    : TrackedReferencesRewriteCommandArchive() {
    *this = ::std::move(from);
  }

  inline TrackedReferencesRewriteCommandArchive& operator=(const TrackedReferencesRewriteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedReferencesRewriteCommandArchive& operator=(TrackedReferencesRewriteCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedReferencesRewriteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedReferencesRewriteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TrackedReferencesRewriteCommandArchive*>(
               &_TrackedReferencesRewriteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(TrackedReferencesRewriteCommandArchive& a, TrackedReferencesRewriteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedReferencesRewriteCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedReferencesRewriteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedReferencesRewriteCommandArchive* New() const final {
    return CreateMaybeMessage<TrackedReferencesRewriteCommandArchive>(nullptr);
  }

  TrackedReferencesRewriteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedReferencesRewriteCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedReferencesRewriteCommandArchive& from);
  void MergeFrom(const TrackedReferencesRewriteCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedReferencesRewriteCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TrackedReferencesRewriteCommandArchive";
  }
  protected:
  explicit TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesInReferenceTrackerFieldNumber = 1,
    kOriginalTrackedReferenceCopiesFieldNumber = 2,
    kRewriteSpecFieldNumber = 3,
    kSuperFieldNumber = 4,
  };
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_references_in_reference_tracker() const;
  private:
  bool _internal_has_references_in_reference_tracker() const;
  public:
  PROTOBUF_DEPRECATED void clear_references_in_reference_tracker();
  PROTOBUF_DEPRECATED const ::TSCE::NumberToTrackedReferenceMapArchive& references_in_reference_tracker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* release_references_in_reference_tracker();
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* mutable_references_in_reference_tracker();
  PROTOBUF_DEPRECATED void set_allocated_references_in_reference_tracker(::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker);
  private:
  const ::TSCE::NumberToTrackedReferenceMapArchive& _internal_references_in_reference_tracker() const;
  ::TSCE::NumberToTrackedReferenceMapArchive* _internal_mutable_references_in_reference_tracker();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_references_in_reference_tracker(
      ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker);
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* unsafe_arena_release_references_in_reference_tracker();

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_original_tracked_reference_copies() const;
  private:
  bool _internal_has_original_tracked_reference_copies() const;
  public:
  PROTOBUF_DEPRECATED void clear_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED const ::TSCE::NumberToTrackedReferenceMapArchive& original_tracked_reference_copies() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* release_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* mutable_original_tracked_reference_copies();
  PROTOBUF_DEPRECATED void set_allocated_original_tracked_reference_copies(::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies);
  private:
  const ::TSCE::NumberToTrackedReferenceMapArchive& _internal_original_tracked_reference_copies() const;
  ::TSCE::NumberToTrackedReferenceMapArchive* _internal_mutable_original_tracked_reference_copies();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_original_tracked_reference_copies(
      ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies);
  PROTOBUF_DEPRECATED ::TSCE::NumberToTrackedReferenceMapArchive* unsafe_arena_release_original_tracked_reference_copies();

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  bool has_rewrite_spec() const;
  private:
  bool _internal_has_rewrite_spec() const;
  public:
  void clear_rewrite_spec();
  const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaRewriteSpecArchive* release_rewrite_spec();
  ::TSCE::FormulaRewriteSpecArchive* mutable_rewrite_spec();
  void set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  private:
  const ::TSCE::FormulaRewriteSpecArchive& _internal_rewrite_spec() const;
  ::TSCE::FormulaRewriteSpecArchive* _internal_mutable_rewrite_spec();
  public:
  void unsafe_arena_set_allocated_rewrite_spec(
      ::TSCE::FormulaRewriteSpecArchive* rewrite_spec);
  ::TSCE::FormulaRewriteSpecArchive* unsafe_arena_release_rewrite_spec();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCE.TrackedReferencesRewriteCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker_;
  ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies_;
  ::TSCE::FormulaRewriteSpecArchive* rewrite_spec_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class TrackedReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.TrackedReferenceArchive) */ {
 public:
  inline TrackedReferenceArchive() : TrackedReferenceArchive(nullptr) {}
  ~TrackedReferenceArchive() override;
  explicit constexpr TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedReferenceArchive(const TrackedReferenceArchive& from);
  TrackedReferenceArchive(TrackedReferenceArchive&& from) noexcept
    : TrackedReferenceArchive() {
    *this = ::std::move(from);
  }

  inline TrackedReferenceArchive& operator=(const TrackedReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedReferenceArchive& operator=(TrackedReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const TrackedReferenceArchive*>(
               &_TrackedReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(TrackedReferenceArchive& a, TrackedReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedReferenceArchive* New() const final {
    return CreateMaybeMessage<TrackedReferenceArchive>(nullptr);
  }

  TrackedReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedReferenceArchive& from);
  void MergeFrom(const TrackedReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.TrackedReferenceArchive";
  }
  protected:
  explicit TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAstFieldNumber = 1,
    kFormulaIdFieldNumber = 2,
  };
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  bool has_ast() const;
  private:
  bool _internal_has_ast() const;
  public:
  void clear_ast();
  const ::TSCE::ASTNodeArrayArchive& ast() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive* release_ast();
  ::TSCE::ASTNodeArrayArchive* mutable_ast();
  void set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast();
  public:
  void unsafe_arena_set_allocated_ast(
      ::TSCE::ASTNodeArrayArchive* ast);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast();

  // required uint32 formula_id = 2;
  bool has_formula_id() const;
  private:
  bool _internal_has_formula_id() const;
  public:
  void clear_formula_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_id() const;
  void set_formula_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_id() const;
  void _internal_set_formula_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.TrackedReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::ASTNodeArrayArchive* ast_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_id_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedTrackedReferenceArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ExpandedTrackedReferenceArchive) */ {
 public:
  inline ExpandedTrackedReferenceArchive() : ExpandedTrackedReferenceArchive(nullptr) {}
  ~ExpandedTrackedReferenceArchive() override;
  explicit constexpr ExpandedTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedTrackedReferenceArchive(const ExpandedTrackedReferenceArchive& from);
  ExpandedTrackedReferenceArchive(ExpandedTrackedReferenceArchive&& from) noexcept
    : ExpandedTrackedReferenceArchive() {
    *this = ::std::move(from);
  }

  inline ExpandedTrackedReferenceArchive& operator=(const ExpandedTrackedReferenceArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedTrackedReferenceArchive& operator=(ExpandedTrackedReferenceArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedTrackedReferenceArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedTrackedReferenceArchive* internal_default_instance() {
    return reinterpret_cast<const ExpandedTrackedReferenceArchive*>(
               &_ExpandedTrackedReferenceArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(ExpandedTrackedReferenceArchive& a, ExpandedTrackedReferenceArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedTrackedReferenceArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedTrackedReferenceArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedTrackedReferenceArchive* New() const final {
    return CreateMaybeMessage<ExpandedTrackedReferenceArchive>(nullptr);
  }

  ExpandedTrackedReferenceArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedTrackedReferenceArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedTrackedReferenceArchive& from);
  void MergeFrom(const ExpandedTrackedReferenceArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedTrackedReferenceArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ExpandedTrackedReferenceArchive";
  }
  protected:
  explicit ExpandedTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAstFieldNumber = 1,
    kFormulaColumnFieldNumber = 2,
    kFormulaRowFieldNumber = 3,
  };
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  bool has_ast() const;
  private:
  bool _internal_has_ast() const;
  public:
  void clear_ast();
  const ::TSCE::ASTNodeArrayArchive& ast() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ASTNodeArrayArchive* release_ast();
  ::TSCE::ASTNodeArrayArchive* mutable_ast();
  void set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast);
  private:
  const ::TSCE::ASTNodeArrayArchive& _internal_ast() const;
  ::TSCE::ASTNodeArrayArchive* _internal_mutable_ast();
  public:
  void unsafe_arena_set_allocated_ast(
      ::TSCE::ASTNodeArrayArchive* ast);
  ::TSCE::ASTNodeArrayArchive* unsafe_arena_release_ast();

  // required uint32 formula_column = 2;
  bool has_formula_column() const;
  private:
  bool _internal_has_formula_column() const;
  public:
  void clear_formula_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_column() const;
  void set_formula_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_column() const;
  void _internal_set_formula_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 formula_row = 3;
  bool has_formula_row() const;
  private:
  bool _internal_has_formula_row() const;
  public:
  void clear_formula_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_row() const;
  void set_formula_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_row() const;
  void _internal_set_formula_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ExpandedTrackedReferenceArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::ASTNodeArrayArchive* ast_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_row_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferenceTrackerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ReferenceTrackerArchive) */ {
 public:
  inline ReferenceTrackerArchive() : ReferenceTrackerArchive(nullptr) {}
  ~ReferenceTrackerArchive() override;
  explicit constexpr ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceTrackerArchive(const ReferenceTrackerArchive& from);
  ReferenceTrackerArchive(ReferenceTrackerArchive&& from) noexcept
    : ReferenceTrackerArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceTrackerArchive& operator=(const ReferenceTrackerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceTrackerArchive& operator=(ReferenceTrackerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceTrackerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceTrackerArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceTrackerArchive*>(
               &_ReferenceTrackerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(ReferenceTrackerArchive& a, ReferenceTrackerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceTrackerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceTrackerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceTrackerArchive* New() const final {
    return CreateMaybeMessage<ReferenceTrackerArchive>(nullptr);
  }

  ReferenceTrackerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceTrackerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceTrackerArchive& from);
  void MergeFrom(const ReferenceTrackerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceTrackerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ReferenceTrackerArchive";
  }
  protected:
  explicit ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedReferenceFieldNumber = 2,
    kContainedTrackedReferenceFieldNumber = 3,
    kContainedExpandedTrackedReferenceFieldNumber = 4,
    kUuidFieldNumber = 1,
  };
  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int tracked_reference_size() const;
  private:
  int _internal_tracked_reference_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tracked_reference();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_tracked_reference(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tracked_reference();
  private:
  const ::TSP::Reference& _internal_tracked_reference(int index) const;
  ::TSP::Reference* _internal_add_tracked_reference();
  public:
  PROTOBUF_DEPRECATED const ::TSP::Reference& tracked_reference(int index) const;
  PROTOBUF_DEPRECATED ::TSP::Reference* add_tracked_reference();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tracked_reference() const;

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  int contained_tracked_reference_size() const;
  private:
  int _internal_contained_tracked_reference_size() const;
  public:
  void clear_contained_tracked_reference();
  ::TSCE::TrackedReferenceArchive* mutable_contained_tracked_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >*
      mutable_contained_tracked_reference();
  private:
  const ::TSCE::TrackedReferenceArchive& _internal_contained_tracked_reference(int index) const;
  ::TSCE::TrackedReferenceArchive* _internal_add_contained_tracked_reference();
  public:
  const ::TSCE::TrackedReferenceArchive& contained_tracked_reference(int index) const;
  ::TSCE::TrackedReferenceArchive* add_contained_tracked_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >&
      contained_tracked_reference() const;

  // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
  int contained_expanded_tracked_reference_size() const;
  private:
  int _internal_contained_expanded_tracked_reference_size() const;
  public:
  void clear_contained_expanded_tracked_reference();
  ::TSCE::ExpandedTrackedReferenceArchive* mutable_contained_expanded_tracked_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedTrackedReferenceArchive >*
      mutable_contained_expanded_tracked_reference();
  private:
  const ::TSCE::ExpandedTrackedReferenceArchive& _internal_contained_expanded_tracked_reference(int index) const;
  ::TSCE::ExpandedTrackedReferenceArchive* _internal_add_contained_expanded_tracked_reference();
  public:
  const ::TSCE::ExpandedTrackedReferenceArchive& contained_expanded_tracked_reference(int index) const;
  ::TSCE::ExpandedTrackedReferenceArchive* add_contained_expanded_tracked_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedTrackedReferenceArchive >&
      contained_expanded_tracked_reference() const;

  // required .TSP.CFUUIDArchive uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::CFUUIDArchive& uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_uuid();
  ::TSP::CFUUIDArchive* mutable_uuid();
  void set_allocated_uuid(::TSP::CFUUIDArchive* uuid);
  private:
  const ::TSP::CFUUIDArchive& _internal_uuid() const;
  ::TSP::CFUUIDArchive* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::CFUUIDArchive* uuid);
  ::TSP::CFUUIDArchive* unsafe_arena_release_uuid();

  // @@protoc_insertion_point(class_scope:TSCE.ReferenceTrackerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tracked_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive > contained_tracked_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedTrackedReferenceArchive > contained_expanded_tracked_reference_;
  ::TSP::CFUUIDArchive* uuid_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class BooleanCellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.BooleanCellValueArchive) */ {
 public:
  inline BooleanCellValueArchive() : BooleanCellValueArchive(nullptr) {}
  ~BooleanCellValueArchive() override;
  explicit constexpr BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanCellValueArchive(const BooleanCellValueArchive& from);
  BooleanCellValueArchive(BooleanCellValueArchive&& from) noexcept
    : BooleanCellValueArchive() {
    *this = ::std::move(from);
  }

  inline BooleanCellValueArchive& operator=(const BooleanCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanCellValueArchive& operator=(BooleanCellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const BooleanCellValueArchive*>(
               &_BooleanCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(BooleanCellValueArchive& a, BooleanCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanCellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanCellValueArchive* New() const final {
    return CreateMaybeMessage<BooleanCellValueArchive>(nullptr);
  }

  BooleanCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanCellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanCellValueArchive& from);
  void MergeFrom(const BooleanCellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanCellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.BooleanCellValueArchive";
  }
  protected:
  explicit BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kValueFieldNumber = 1,
    kFormatIsExplicitFieldNumber = 3,
  };
  // optional .TSK.FormatStructArchive format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // required bool value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // optional bool format_is_explicit = 3 [default = false];
  bool has_format_is_explicit() const;
  private:
  bool _internal_has_format_is_explicit() const;
  public:
  void clear_format_is_explicit();
  bool format_is_explicit() const;
  void set_format_is_explicit(bool value);
  private:
  bool _internal_format_is_explicit() const;
  void _internal_set_format_is_explicit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.BooleanCellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::FormatStructArchive* format_;
  bool value_;
  bool format_is_explicit_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class DateCellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.DateCellValueArchive) */ {
 public:
  inline DateCellValueArchive() : DateCellValueArchive(nullptr) {}
  ~DateCellValueArchive() override;
  explicit constexpr DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateCellValueArchive(const DateCellValueArchive& from);
  DateCellValueArchive(DateCellValueArchive&& from) noexcept
    : DateCellValueArchive() {
    *this = ::std::move(from);
  }

  inline DateCellValueArchive& operator=(const DateCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateCellValueArchive& operator=(DateCellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const DateCellValueArchive*>(
               &_DateCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(DateCellValueArchive& a, DateCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DateCellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateCellValueArchive* New() const final {
    return CreateMaybeMessage<DateCellValueArchive>(nullptr);
  }

  DateCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateCellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateCellValueArchive& from);
  void MergeFrom(const DateCellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateCellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.DateCellValueArchive";
  }
  protected:
  explicit DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kValueFieldNumber = 1,
    kFormatIsImplicitFieldNumber = 3,
    kFormatIsExplicitFieldNumber = 4,
  };
  // required .TSK.FormatStructArchive format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // required double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // optional bool format_is_implicit = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  PROTOBUF_DEPRECATED void clear_format_is_implicit();
  PROTOBUF_DEPRECATED bool format_is_implicit() const;
  PROTOBUF_DEPRECATED void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // optional bool format_is_explicit = 4 [default = false];
  bool has_format_is_explicit() const;
  private:
  bool _internal_has_format_is_explicit() const;
  public:
  void clear_format_is_explicit();
  bool format_is_explicit() const;
  void set_format_is_explicit(bool value);
  private:
  bool _internal_format_is_explicit() const;
  void _internal_set_format_is_explicit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.DateCellValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::FormatStructArchive* format_;
  double value_;
  bool format_is_implicit_;
  bool format_is_explicit_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberCellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.NumberCellValueArchive) */ {
 public:
  inline NumberCellValueArchive() : NumberCellValueArchive(nullptr) {}
  ~NumberCellValueArchive() override;
  explicit constexpr NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberCellValueArchive(const NumberCellValueArchive& from);
  NumberCellValueArchive(NumberCellValueArchive&& from) noexcept
    : NumberCellValueArchive() {
    *this = ::std::move(from);
  }

  inline NumberCellValueArchive& operator=(const NumberCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberCellValueArchive& operator=(NumberCellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const NumberCellValueArchive*>(
               &_NumberCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(NumberCellValueArchive& a, NumberCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberCellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberCellValueArchive* New() const final {
    return CreateMaybeMessage<NumberCellValueArchive>(nullptr);
  }

  NumberCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberCellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberCellValueArchive& from);
  void MergeFrom(const NumberCellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberCellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.NumberCellValueArchive";
  }
  protected:
  explicit NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 5,
    kFormatFieldNumber = 3,
    kValueFieldNumber = 1,
    kUnitIndexFieldNumber = 2,
    kFormatIsImplicitFieldNumber = 4,
    kFormatIsExplicitFieldNumber = 6,
    kDecimalLowFieldNumber = 7,
    kDecimalHighFieldNumber = 8,
  };
  // optional string currency_code = 5;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // required .TSK.FormatStructArchive format = 3;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // optional double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // optional int32 unit_index = 2;
  bool has_unit_index() const;
  private:
  bool _internal_has_unit_index() const;
  public:
  void clear_unit_index();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_index() const;
  void set_unit_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_index() const;
  void _internal_set_unit_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool format_is_implicit = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  PROTOBUF_DEPRECATED void clear_format_is_implicit();
  PROTOBUF_DEPRECATED bool format_is_implicit() const;
  PROTOBUF_DEPRECATED void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // optional bool format_is_explicit = 6 [default = false];
  bool has_format_is_explicit() const;
  private:
  bool _internal_has_format_is_explicit() const;
  public:
  void clear_format_is_explicit();
  bool format_is_explicit() const;
  void set_format_is_explicit(bool value);
  private:
  bool _internal_format_is_explicit() const;
  void _internal_set_format_is_explicit(bool value);
  public:

  // optional uint64 decimal_low = 7;
  bool has_decimal_low() const;
  private:
  bool _internal_has_decimal_low() const;
  public:
  void clear_decimal_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low() const;
  void set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_low() const;
  void _internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 decimal_high = 8;
  bool has_decimal_high() const;
  private:
  bool _internal_has_decimal_high() const;
  public:
  void clear_decimal_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high() const;
  void set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_high() const;
  void _internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.NumberCellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  ::TSK::FormatStructArchive* format_;
  double value_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_index_;
  bool format_is_implicit_;
  bool format_is_explicit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class StringCellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.StringCellValueArchive) */ {
 public:
  inline StringCellValueArchive() : StringCellValueArchive(nullptr) {}
  ~StringCellValueArchive() override;
  explicit constexpr StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringCellValueArchive(const StringCellValueArchive& from);
  StringCellValueArchive(StringCellValueArchive&& from) noexcept
    : StringCellValueArchive() {
    *this = ::std::move(from);
  }

  inline StringCellValueArchive& operator=(const StringCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringCellValueArchive& operator=(StringCellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const StringCellValueArchive*>(
               &_StringCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(StringCellValueArchive& a, StringCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StringCellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringCellValueArchive* New() const final {
    return CreateMaybeMessage<StringCellValueArchive>(nullptr);
  }

  StringCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringCellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringCellValueArchive& from);
  void MergeFrom(const StringCellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringCellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.StringCellValueArchive";
  }
  protected:
  explicit StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kFormatFieldNumber = 2,
    kFormatIsImplicitFieldNumber = 3,
    kFormatIsExplicitFieldNumber = 4,
    kIsRegexFieldNumber = 5,
    kIsCaseSensitiveRegexFieldNumber = 6,
  };
  // required string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .TSK.FormatStructArchive format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // optional bool format_is_implicit = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_format_is_implicit() const;
  private:
  bool _internal_has_format_is_implicit() const;
  public:
  PROTOBUF_DEPRECATED void clear_format_is_implicit();
  PROTOBUF_DEPRECATED bool format_is_implicit() const;
  PROTOBUF_DEPRECATED void set_format_is_implicit(bool value);
  private:
  bool _internal_format_is_implicit() const;
  void _internal_set_format_is_implicit(bool value);
  public:

  // optional bool format_is_explicit = 4 [default = false];
  bool has_format_is_explicit() const;
  private:
  bool _internal_has_format_is_explicit() const;
  public:
  void clear_format_is_explicit();
  bool format_is_explicit() const;
  void set_format_is_explicit(bool value);
  private:
  bool _internal_format_is_explicit() const;
  void _internal_set_format_is_explicit(bool value);
  public:

  // optional bool is_regex = 5 [default = false];
  bool has_is_regex() const;
  private:
  bool _internal_has_is_regex() const;
  public:
  void clear_is_regex();
  bool is_regex() const;
  void set_is_regex(bool value);
  private:
  bool _internal_is_regex() const;
  void _internal_set_is_regex(bool value);
  public:

  // optional bool is_case_sensitive_regex = 6 [default = false];
  bool has_is_case_sensitive_regex() const;
  private:
  bool _internal_has_is_case_sensitive_regex() const;
  public:
  void clear_is_case_sensitive_regex();
  bool is_case_sensitive_regex() const;
  void set_is_case_sensitive_regex(bool value);
  private:
  bool _internal_is_case_sensitive_regex() const;
  void _internal_set_is_case_sensitive_regex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.StringCellValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TSK::FormatStructArchive* format_;
  bool format_is_implicit_;
  bool format_is_explicit_;
  bool is_regex_;
  bool is_case_sensitive_regex_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class ErrorCellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.ErrorCellValueArchive) */ {
 public:
  inline ErrorCellValueArchive() : ErrorCellValueArchive(nullptr) {}
  ~ErrorCellValueArchive() override;
  explicit constexpr ErrorCellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorCellValueArchive(const ErrorCellValueArchive& from);
  ErrorCellValueArchive(ErrorCellValueArchive&& from) noexcept
    : ErrorCellValueArchive() {
    *this = ::std::move(from);
  }

  inline ErrorCellValueArchive& operator=(const ErrorCellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorCellValueArchive& operator=(ErrorCellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorCellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorCellValueArchive* internal_default_instance() {
    return reinterpret_cast<const ErrorCellValueArchive*>(
               &_ErrorCellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(ErrorCellValueArchive& a, ErrorCellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorCellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorCellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorCellValueArchive* New() const final {
    return CreateMaybeMessage<ErrorCellValueArchive>(nullptr);
  }

  ErrorCellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorCellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorCellValueArchive& from);
  void MergeFrom(const ErrorCellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.ErrorCellValueArchive";
  }
  protected:
  explicit ErrorCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ErrorCellValueArchive_ErrorType ErrorType;
  static constexpr ErrorType UnknownError =
    ErrorCellValueArchive_ErrorType_UnknownError;
  static constexpr ErrorType InvalidLiveStockAttribute =
    ErrorCellValueArchive_ErrorType_InvalidLiveStockAttribute;
  static constexpr ErrorType InvalidLiveCurrencyAttribute =
    ErrorCellValueArchive_ErrorType_InvalidLiveCurrencyAttribute;
  static constexpr ErrorType InvalidHistoricalStockAttribute =
    ErrorCellValueArchive_ErrorType_InvalidHistoricalStockAttribute;
  static constexpr ErrorType InvalidHistoricalCurrencyAttribute =
    ErrorCellValueArchive_ErrorType_InvalidHistoricalCurrencyAttribute;
  static constexpr ErrorType InvalidHistoricalDate =
    ErrorCellValueArchive_ErrorType_InvalidHistoricalDate;
  static constexpr ErrorType NoTradingInformation =
    ErrorCellValueArchive_ErrorType_NoTradingInformation;
  static constexpr ErrorType InvalidStockCode =
    ErrorCellValueArchive_ErrorType_InvalidStockCode;
  static constexpr ErrorType InvalidCurrencyPair =
    ErrorCellValueArchive_ErrorType_InvalidCurrencyPair;
  static constexpr ErrorType RemoteDataServerError =
    ErrorCellValueArchive_ErrorType_RemoteDataServerError;
  static inline bool ErrorType_IsValid(int value) {
    return ErrorCellValueArchive_ErrorType_IsValid(value);
  }
  static constexpr ErrorType ErrorType_MIN =
    ErrorCellValueArchive_ErrorType_ErrorType_MIN;
  static constexpr ErrorType ErrorType_MAX =
    ErrorCellValueArchive_ErrorType_ErrorType_MAX;
  static constexpr int ErrorType_ARRAYSIZE =
    ErrorCellValueArchive_ErrorType_ErrorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorType_descriptor() {
    return ErrorCellValueArchive_ErrorType_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorType_Name.");
    return ErrorCellValueArchive_ErrorType_Name(enum_t_value);
  }
  static inline bool ErrorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorType* value) {
    return ErrorCellValueArchive_ErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtraInfoStringFieldNumber = 4,
    kExtraInfoDoubleFieldNumber = 5,
    kExtraInfoIntFieldNumber = 3,
    kErrorTypeFieldNumber = 1,
  };
  // optional string extra_info_string = 4;
  bool has_extra_info_string() const;
  private:
  bool _internal_has_extra_info_string() const;
  public:
  void clear_extra_info_string();
  const std::string& extra_info_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_info_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_info_string();
  std::string* release_extra_info_string();
  void set_allocated_extra_info_string(std::string* extra_info_string);
  private:
  const std::string& _internal_extra_info_string() const;
  void _internal_set_extra_info_string(const std::string& value);
  std::string* _internal_mutable_extra_info_string();
  public:

  // optional double extra_info_double = 5;
  bool has_extra_info_double() const;
  private:
  bool _internal_has_extra_info_double() const;
  public:
  void clear_extra_info_double();
  double extra_info_double() const;
  void set_extra_info_double(double value);
  private:
  double _internal_extra_info_double() const;
  void _internal_set_extra_info_double(double value);
  public:

  // optional int32 extra_info_int = 3;
  bool has_extra_info_int() const;
  private:
  bool _internal_has_extra_info_int() const;
  public:
  void clear_extra_info_int();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_info_int() const;
  void set_extra_info_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_info_int() const;
  void _internal_set_extra_info_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .TSCE.ErrorCellValueArchive.ErrorType error_type = 1;
  bool has_error_type() const;
  private:
  bool _internal_has_error_type() const;
  public:
  void clear_error_type();
  ::TSCE::ErrorCellValueArchive_ErrorType error_type() const;
  void set_error_type(::TSCE::ErrorCellValueArchive_ErrorType value);
  private:
  ::TSCE::ErrorCellValueArchive_ErrorType _internal_error_type() const;
  void _internal_set_error_type(::TSCE::ErrorCellValueArchive_ErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.ErrorCellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_info_string_;
  double extra_info_double_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_info_int_;
  int error_type_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// -------------------------------------------------------------------

class CellValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCE.CellValueArchive) */ {
 public:
  inline CellValueArchive() : CellValueArchive(nullptr) {}
  ~CellValueArchive() override;
  explicit constexpr CellValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellValueArchive(const CellValueArchive& from);
  CellValueArchive(CellValueArchive&& from) noexcept
    : CellValueArchive() {
    *this = ::std::move(from);
  }

  inline CellValueArchive& operator=(const CellValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellValueArchive& operator=(CellValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellValueArchive* internal_default_instance() {
    return reinterpret_cast<const CellValueArchive*>(
               &_CellValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CellValueArchive& a, CellValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellValueArchive* New() const final {
    return CreateMaybeMessage<CellValueArchive>(nullptr);
  }

  CellValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellValueArchive& from);
  void MergeFrom(const CellValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCE.CellValueArchive";
  }
  protected:
  explicit CellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellValueArchive_CellValueType CellValueType;
  static constexpr CellValueType NIL_TYPE =
    CellValueArchive_CellValueType_NIL_TYPE;
  static constexpr CellValueType BOOLEAN_TYPE =
    CellValueArchive_CellValueType_BOOLEAN_TYPE;
  static constexpr CellValueType DATE_TYPE =
    CellValueArchive_CellValueType_DATE_TYPE;
  static constexpr CellValueType NUMBER_TYPE =
    CellValueArchive_CellValueType_NUMBER_TYPE;
  static constexpr CellValueType STRING_TYPE =
    CellValueArchive_CellValueType_STRING_TYPE;
  static inline bool CellValueType_IsValid(int value) {
    return CellValueArchive_CellValueType_IsValid(value);
  }
  static constexpr CellValueType CellValueType_MIN =
    CellValueArchive_CellValueType_CellValueType_MIN;
  static constexpr CellValueType CellValueType_MAX =
    CellValueArchive_CellValueType_CellValueType_MAX;
  static constexpr int CellValueType_ARRAYSIZE =
    CellValueArchive_CellValueType_CellValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CellValueType_descriptor() {
    return CellValueArchive_CellValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& CellValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CellValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CellValueType_Name.");
    return CellValueArchive_CellValueType_Name(enum_t_value);
  }
  static inline bool CellValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CellValueType* value) {
    return CellValueArchive_CellValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBooleanValueFieldNumber = 2,
    kDateValueFieldNumber = 3,
    kNumberValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kErrorValueFieldNumber = 6,
    kCellValueTypeFieldNumber = 1,
  };
  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  const ::TSCE::BooleanCellValueArchive& boolean_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::BooleanCellValueArchive* release_boolean_value();
  ::TSCE::BooleanCellValueArchive* mutable_boolean_value();
  void set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value);
  private:
  const ::TSCE::BooleanCellValueArchive& _internal_boolean_value() const;
  ::TSCE::BooleanCellValueArchive* _internal_mutable_boolean_value();
  public:
  void unsafe_arena_set_allocated_boolean_value(
      ::TSCE::BooleanCellValueArchive* boolean_value);
  ::TSCE::BooleanCellValueArchive* unsafe_arena_release_boolean_value();

  // optional .TSCE.DateCellValueArchive date_value = 3;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  const ::TSCE::DateCellValueArchive& date_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::DateCellValueArchive* release_date_value();
  ::TSCE::DateCellValueArchive* mutable_date_value();
  void set_allocated_date_value(::TSCE::DateCellValueArchive* date_value);
  private:
  const ::TSCE::DateCellValueArchive& _internal_date_value() const;
  ::TSCE::DateCellValueArchive* _internal_mutable_date_value();
  public:
  void unsafe_arena_set_allocated_date_value(
      ::TSCE::DateCellValueArchive* date_value);
  ::TSCE::DateCellValueArchive* unsafe_arena_release_date_value();

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  bool has_number_value() const;
  private:
  bool _internal_has_number_value() const;
  public:
  void clear_number_value();
  const ::TSCE::NumberCellValueArchive& number_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::NumberCellValueArchive* release_number_value();
  ::TSCE::NumberCellValueArchive* mutable_number_value();
  void set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value);
  private:
  const ::TSCE::NumberCellValueArchive& _internal_number_value() const;
  ::TSCE::NumberCellValueArchive* _internal_mutable_number_value();
  public:
  void unsafe_arena_set_allocated_number_value(
      ::TSCE::NumberCellValueArchive* number_value);
  ::TSCE::NumberCellValueArchive* unsafe_arena_release_number_value();

  // optional .TSCE.StringCellValueArchive string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const ::TSCE::StringCellValueArchive& string_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::StringCellValueArchive* release_string_value();
  ::TSCE::StringCellValueArchive* mutable_string_value();
  void set_allocated_string_value(::TSCE::StringCellValueArchive* string_value);
  private:
  const ::TSCE::StringCellValueArchive& _internal_string_value() const;
  ::TSCE::StringCellValueArchive* _internal_mutable_string_value();
  public:
  void unsafe_arena_set_allocated_string_value(
      ::TSCE::StringCellValueArchive* string_value);
  ::TSCE::StringCellValueArchive* unsafe_arena_release_string_value();

  // optional .TSCE.ErrorCellValueArchive error_value = 6;
  bool has_error_value() const;
  private:
  bool _internal_has_error_value() const;
  public:
  void clear_error_value();
  const ::TSCE::ErrorCellValueArchive& error_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::ErrorCellValueArchive* release_error_value();
  ::TSCE::ErrorCellValueArchive* mutable_error_value();
  void set_allocated_error_value(::TSCE::ErrorCellValueArchive* error_value);
  private:
  const ::TSCE::ErrorCellValueArchive& _internal_error_value() const;
  ::TSCE::ErrorCellValueArchive* _internal_mutable_error_value();
  public:
  void unsafe_arena_set_allocated_error_value(
      ::TSCE::ErrorCellValueArchive* error_value);
  ::TSCE::ErrorCellValueArchive* unsafe_arena_release_error_value();

  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  bool has_cell_value_type() const;
  private:
  bool _internal_has_cell_value_type() const;
  public:
  void clear_cell_value_type();
  ::TSCE::CellValueArchive_CellValueType cell_value_type() const;
  void set_cell_value_type(::TSCE::CellValueArchive_CellValueType value);
  private:
  ::TSCE::CellValueArchive_CellValueType _internal_cell_value_type() const;
  void _internal_set_cell_value_type(::TSCE::CellValueArchive_CellValueType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCE.CellValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::BooleanCellValueArchive* boolean_value_;
  ::TSCE::DateCellValueArchive* date_value_;
  ::TSCE::NumberCellValueArchive* number_value_;
  ::TSCE::StringCellValueArchive* string_value_;
  ::TSCE::ErrorCellValueArchive* error_value_;
  int cell_value_type_;
  friend struct ::TableStruct_TSCEArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CellReferenceArchive

// required uint32 column = 1;
inline bool CellReferenceArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellReferenceArchive::has_column() const {
  return _internal_has_column();
}
inline void CellReferenceArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellReferenceArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellReferenceArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.column)
  return _internal_column();
}
inline void CellReferenceArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void CellReferenceArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellReferenceArchive.column)
}

// required uint32 row = 2;
inline bool CellReferenceArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellReferenceArchive::has_row() const {
  return _internal_has_row();
}
inline void CellReferenceArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellReferenceArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellReferenceArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.row)
  return _internal_row();
}
inline void CellReferenceArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void CellReferenceArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellReferenceArchive.row)
}

// required .TSP.CFUUIDArchive table_id = 3;
inline bool CellReferenceArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool CellReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& CellReferenceArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& CellReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.CellReferenceArchive.table_id)
  return _internal_table_id();
}
inline void CellReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellReferenceArchive.table_id)
}
inline ::TSP::CFUUIDArchive* CellReferenceArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* CellReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.CellReferenceArchive.table_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* CellReferenceArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000001u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* CellReferenceArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellReferenceArchive.table_id)
  return _internal_mutable_table_id();
}
inline void CellReferenceArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellReferenceArchive.table_id)
}

// -------------------------------------------------------------------

// InternalCellReferenceArchive

// required .TSCE.CellCoordinateArchive coordinate = 1;
inline bool InternalCellReferenceArchive::_internal_has_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coordinate_ != nullptr);
  return value;
}
inline bool InternalCellReferenceArchive::has_coordinate() const {
  return _internal_has_coordinate();
}
inline void InternalCellReferenceArchive::clear_coordinate() {
  if (coordinate_ != nullptr) coordinate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& InternalCellReferenceArchive::_internal_coordinate() const {
  const ::TSCE::CellCoordinateArchive* p = coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& InternalCellReferenceArchive::coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellReferenceArchive.coordinate)
  return _internal_coordinate();
}
inline void InternalCellReferenceArchive::unsafe_arena_set_allocated_coordinate(
    ::TSCE::CellCoordinateArchive* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.InternalCellReferenceArchive.coordinate)
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::release_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.InternalCellReferenceArchive.coordinate)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::_internal_mutable_coordinate() {
  _has_bits_[0] |= 0x00000001u;
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::TSCE::CellCoordinateArchive* InternalCellReferenceArchive::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:TSCE.InternalCellReferenceArchive.coordinate)
  return _internal_mutable_coordinate();
}
inline void InternalCellReferenceArchive::set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinate_;
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinate);
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.InternalCellReferenceArchive.coordinate)
}

// required uint32 owner_id = 2;
inline bool InternalCellReferenceArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalCellReferenceArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void InternalCellReferenceArchive::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalCellReferenceArchive::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalCellReferenceArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellReferenceArchive.owner_id)
  return _internal_owner_id();
}
inline void InternalCellReferenceArchive::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_id_ = value;
}
inline void InternalCellReferenceArchive::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.InternalCellReferenceArchive.owner_id)
}

// -------------------------------------------------------------------

// RangeReferenceArchive

// required .TSP.CFUUIDArchive table_id = 1;
inline bool RangeReferenceArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool RangeReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& RangeReferenceArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& RangeReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.table_id)
  return _internal_table_id();
}
inline void RangeReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeReferenceArchive.table_id)
}
inline ::TSP::CFUUIDArchive* RangeReferenceArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* RangeReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.RangeReferenceArchive.table_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* RangeReferenceArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000001u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* RangeReferenceArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeReferenceArchive.table_id)
  return _internal_mutable_table_id();
}
inline void RangeReferenceArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeReferenceArchive.table_id)
}

// required uint32 top_left_column = 2;
inline bool RangeReferenceArchive::_internal_has_top_left_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_top_left_column() const {
  return _internal_has_top_left_column();
}
inline void RangeReferenceArchive::clear_top_left_column() {
  top_left_column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::_internal_top_left_column() const {
  return top_left_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::top_left_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.top_left_column)
  return _internal_top_left_column();
}
inline void RangeReferenceArchive::_internal_set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_left_column_ = value;
}
inline void RangeReferenceArchive::set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_left_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.top_left_column)
}

// required uint32 top_left_row = 3;
inline bool RangeReferenceArchive::_internal_has_top_left_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_top_left_row() const {
  return _internal_has_top_left_row();
}
inline void RangeReferenceArchive::clear_top_left_row() {
  top_left_row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::_internal_top_left_row() const {
  return top_left_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::top_left_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.top_left_row)
  return _internal_top_left_row();
}
inline void RangeReferenceArchive::_internal_set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  top_left_row_ = value;
}
inline void RangeReferenceArchive::set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_left_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.top_left_row)
}

// required uint32 bottom_right_column = 4;
inline bool RangeReferenceArchive::_internal_has_bottom_right_column() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_bottom_right_column() const {
  return _internal_has_bottom_right_column();
}
inline void RangeReferenceArchive::clear_bottom_right_column() {
  bottom_right_column_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::_internal_bottom_right_column() const {
  return bottom_right_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::bottom_right_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.bottom_right_column)
  return _internal_bottom_right_column();
}
inline void RangeReferenceArchive::_internal_set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_right_column_ = value;
}
inline void RangeReferenceArchive::set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bottom_right_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.bottom_right_column)
}

// required uint32 bottom_right_row = 5;
inline bool RangeReferenceArchive::_internal_has_bottom_right_row() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RangeReferenceArchive::has_bottom_right_row() const {
  return _internal_has_bottom_right_row();
}
inline void RangeReferenceArchive::clear_bottom_right_row() {
  bottom_right_row_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::_internal_bottom_right_row() const {
  return bottom_right_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeReferenceArchive::bottom_right_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeReferenceArchive.bottom_right_row)
  return _internal_bottom_right_row();
}
inline void RangeReferenceArchive::_internal_set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bottom_right_row_ = value;
}
inline void RangeReferenceArchive::set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bottom_right_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeReferenceArchive.bottom_right_row)
}

// -------------------------------------------------------------------

// InternalRangeReferenceArchive

// required uint32 owner_id = 1;
inline bool InternalRangeReferenceArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalRangeReferenceArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void InternalRangeReferenceArchive::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalRangeReferenceArchive::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalRangeReferenceArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalRangeReferenceArchive.owner_id)
  return _internal_owner_id();
}
inline void InternalRangeReferenceArchive::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_id_ = value;
}
inline void InternalRangeReferenceArchive::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.InternalRangeReferenceArchive.owner_id)
}

// required .TSCE.RangeCoordinateArchive range = 2;
inline bool InternalRangeReferenceArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool InternalRangeReferenceArchive::has_range() const {
  return _internal_has_range();
}
inline void InternalRangeReferenceArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& InternalRangeReferenceArchive::_internal_range() const {
  const ::TSCE::RangeCoordinateArchive* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& InternalRangeReferenceArchive::range() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalRangeReferenceArchive.range)
  return _internal_range();
}
inline void InternalRangeReferenceArchive::unsafe_arena_set_allocated_range(
    ::TSCE::RangeCoordinateArchive* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.InternalRangeReferenceArchive.range)
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TSCE.InternalRangeReferenceArchive.range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSCE::RangeCoordinateArchive* InternalRangeReferenceArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TSCE.InternalRangeReferenceArchive.range)
  return _internal_mutable_range();
}
inline void InternalRangeReferenceArchive::set_allocated_range(::TSCE::RangeCoordinateArchive* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.InternalRangeReferenceArchive.range)
}

// -------------------------------------------------------------------

// IndexSetArchive_IndexSetEntry

// required int32 range_begin = 1;
inline bool IndexSetArchive_IndexSetEntry::_internal_has_range_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IndexSetArchive_IndexSetEntry::has_range_begin() const {
  return _internal_has_range_begin();
}
inline void IndexSetArchive_IndexSetEntry::clear_range_begin() {
  range_begin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexSetArchive_IndexSetEntry::_internal_range_begin() const {
  return range_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexSetArchive_IndexSetEntry::range_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.IndexSetArchive.IndexSetEntry.range_begin)
  return _internal_range_begin();
}
inline void IndexSetArchive_IndexSetEntry::_internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  range_begin_ = value;
}
inline void IndexSetArchive_IndexSetEntry::set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.IndexSetArchive.IndexSetEntry.range_begin)
}

// optional int32 range_end = 2;
inline bool IndexSetArchive_IndexSetEntry::_internal_has_range_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IndexSetArchive_IndexSetEntry::has_range_end() const {
  return _internal_has_range_end();
}
inline void IndexSetArchive_IndexSetEntry::clear_range_end() {
  range_end_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexSetArchive_IndexSetEntry::_internal_range_end() const {
  return range_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexSetArchive_IndexSetEntry::range_end() const {
  // @@protoc_insertion_point(field_get:TSCE.IndexSetArchive.IndexSetEntry.range_end)
  return _internal_range_end();
}
inline void IndexSetArchive_IndexSetEntry::_internal_set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  range_end_ = value;
}
inline void IndexSetArchive_IndexSetEntry::set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:TSCE.IndexSetArchive.IndexSetEntry.range_end)
}

// -------------------------------------------------------------------

// IndexSetArchive

// repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
inline int IndexSetArchive::_internal_entries_size() const {
  return entries_.size();
}
inline int IndexSetArchive::entries_size() const {
  return _internal_entries_size();
}
inline void IndexSetArchive::clear_entries() {
  entries_.Clear();
}
inline ::TSCE::IndexSetArchive_IndexSetEntry* IndexSetArchive::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.IndexSetArchive.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexSetArchive_IndexSetEntry >*
IndexSetArchive::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.IndexSetArchive.entries)
  return &entries_;
}
inline const ::TSCE::IndexSetArchive_IndexSetEntry& IndexSetArchive::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSCE::IndexSetArchive_IndexSetEntry& IndexSetArchive::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.IndexSetArchive.entries)
  return _internal_entries(index);
}
inline ::TSCE::IndexSetArchive_IndexSetEntry* IndexSetArchive::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSCE::IndexSetArchive_IndexSetEntry* IndexSetArchive::add_entries() {
  // @@protoc_insertion_point(field_add:TSCE.IndexSetArchive.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexSetArchive_IndexSetEntry >&
IndexSetArchive::entries() const {
  // @@protoc_insertion_point(field_list:TSCE.IndexSetArchive.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CellCoordSetArchive_ColumnEntry

// required uint32 column = 1;
inline bool CellCoordSetArchive_ColumnEntry::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellCoordSetArchive_ColumnEntry::has_column() const {
  return _internal_has_column();
}
inline void CellCoordSetArchive_ColumnEntry::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordSetArchive_ColumnEntry::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordSetArchive_ColumnEntry::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordSetArchive.ColumnEntry.column)
  return _internal_column();
}
inline void CellCoordSetArchive_ColumnEntry::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void CellCoordSetArchive_ColumnEntry::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordSetArchive.ColumnEntry.column)
}

// required .TSCE.IndexSetArchive row_set = 2;
inline bool CellCoordSetArchive_ColumnEntry::_internal_has_row_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || row_set_ != nullptr);
  return value;
}
inline bool CellCoordSetArchive_ColumnEntry::has_row_set() const {
  return _internal_has_row_set();
}
inline void CellCoordSetArchive_ColumnEntry::clear_row_set() {
  if (row_set_ != nullptr) row_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::IndexSetArchive& CellCoordSetArchive_ColumnEntry::_internal_row_set() const {
  const ::TSCE::IndexSetArchive* p = row_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexSetArchive&>(
      ::TSCE::_IndexSetArchive_default_instance_);
}
inline const ::TSCE::IndexSetArchive& CellCoordSetArchive_ColumnEntry::row_set() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordSetArchive.ColumnEntry.row_set)
  return _internal_row_set();
}
inline void CellCoordSetArchive_ColumnEntry::unsafe_arena_set_allocated_row_set(
    ::TSCE::IndexSetArchive* row_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_set_);
  }
  row_set_ = row_set;
  if (row_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellCoordSetArchive.ColumnEntry.row_set)
}
inline ::TSCE::IndexSetArchive* CellCoordSetArchive_ColumnEntry::release_row_set() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = row_set_;
  row_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexSetArchive* CellCoordSetArchive_ColumnEntry::unsafe_arena_release_row_set() {
  // @@protoc_insertion_point(field_release:TSCE.CellCoordSetArchive.ColumnEntry.row_set)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = row_set_;
  row_set_ = nullptr;
  return temp;
}
inline ::TSCE::IndexSetArchive* CellCoordSetArchive_ColumnEntry::_internal_mutable_row_set() {
  _has_bits_[0] |= 0x00000001u;
  if (row_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexSetArchive>(GetArena());
    row_set_ = p;
  }
  return row_set_;
}
inline ::TSCE::IndexSetArchive* CellCoordSetArchive_ColumnEntry::mutable_row_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordSetArchive.ColumnEntry.row_set)
  return _internal_mutable_row_set();
}
inline void CellCoordSetArchive_ColumnEntry::set_allocated_row_set(::TSCE::IndexSetArchive* row_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row_set_;
  }
  if (row_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row_set);
    if (message_arena != submessage_arena) {
      row_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_set_ = row_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellCoordSetArchive.ColumnEntry.row_set)
}

// -------------------------------------------------------------------

// CellCoordSetArchive

// repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
inline int CellCoordSetArchive::_internal_column_entries_size() const {
  return column_entries_.size();
}
inline int CellCoordSetArchive::column_entries_size() const {
  return _internal_column_entries_size();
}
inline void CellCoordSetArchive::clear_column_entries() {
  column_entries_.Clear();
}
inline ::TSCE::CellCoordSetArchive_ColumnEntry* CellCoordSetArchive::mutable_column_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordSetArchive.column_entries)
  return column_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordSetArchive_ColumnEntry >*
CellCoordSetArchive::mutable_column_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellCoordSetArchive.column_entries)
  return &column_entries_;
}
inline const ::TSCE::CellCoordSetArchive_ColumnEntry& CellCoordSetArchive::_internal_column_entries(int index) const {
  return column_entries_.Get(index);
}
inline const ::TSCE::CellCoordSetArchive_ColumnEntry& CellCoordSetArchive::column_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordSetArchive.column_entries)
  return _internal_column_entries(index);
}
inline ::TSCE::CellCoordSetArchive_ColumnEntry* CellCoordSetArchive::_internal_add_column_entries() {
  return column_entries_.Add();
}
inline ::TSCE::CellCoordSetArchive_ColumnEntry* CellCoordSetArchive::add_column_entries() {
  // @@protoc_insertion_point(field_add:TSCE.CellCoordSetArchive.column_entries)
  return _internal_add_column_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordSetArchive_ColumnEntry >&
CellCoordSetArchive::column_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.CellCoordSetArchive.column_entries)
  return column_entries_;
}

// -------------------------------------------------------------------

// InternalCellRefSetArchive_OwnerEntry

// required uint32 owner_id = 1;
inline bool InternalCellRefSetArchive_OwnerEntry::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalCellRefSetArchive_OwnerEntry::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void InternalCellRefSetArchive_OwnerEntry::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalCellRefSetArchive_OwnerEntry::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InternalCellRefSetArchive_OwnerEntry::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellRefSetArchive.OwnerEntry.owner_id)
  return _internal_owner_id();
}
inline void InternalCellRefSetArchive_OwnerEntry::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_id_ = value;
}
inline void InternalCellRefSetArchive_OwnerEntry::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.InternalCellRefSetArchive.OwnerEntry.owner_id)
}

// required .TSCE.CellCoordSetArchive coord_set = 2;
inline bool InternalCellRefSetArchive_OwnerEntry::_internal_has_coord_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coord_set_ != nullptr);
  return value;
}
inline bool InternalCellRefSetArchive_OwnerEntry::has_coord_set() const {
  return _internal_has_coord_set();
}
inline void InternalCellRefSetArchive_OwnerEntry::clear_coord_set() {
  if (coord_set_ != nullptr) coord_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordSetArchive& InternalCellRefSetArchive_OwnerEntry::_internal_coord_set() const {
  const ::TSCE::CellCoordSetArchive* p = coord_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& InternalCellRefSetArchive_OwnerEntry::coord_set() const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set)
  return _internal_coord_set();
}
inline void InternalCellRefSetArchive_OwnerEntry::unsafe_arena_set_allocated_coord_set(
    ::TSCE::CellCoordSetArchive* coord_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_set_);
  }
  coord_set_ = coord_set;
  if (coord_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set)
}
inline ::TSCE::CellCoordSetArchive* InternalCellRefSetArchive_OwnerEntry::release_coord_set() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* InternalCellRefSetArchive_OwnerEntry::unsafe_arena_release_coord_set() {
  // @@protoc_insertion_point(field_release:TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* InternalCellRefSetArchive_OwnerEntry::_internal_mutable_coord_set() {
  _has_bits_[0] |= 0x00000001u;
  if (coord_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    coord_set_ = p;
  }
  return coord_set_;
}
inline ::TSCE::CellCoordSetArchive* InternalCellRefSetArchive_OwnerEntry::mutable_coord_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set)
  return _internal_mutable_coord_set();
}
inline void InternalCellRefSetArchive_OwnerEntry::set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coord_set_;
  }
  if (coord_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coord_set);
    if (message_arena != submessage_arena) {
      coord_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coord_set_ = coord_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set)
}

// -------------------------------------------------------------------

// InternalCellRefSetArchive

// repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
inline int InternalCellRefSetArchive::_internal_owner_entries_size() const {
  return owner_entries_.size();
}
inline int InternalCellRefSetArchive::owner_entries_size() const {
  return _internal_owner_entries_size();
}
inline void InternalCellRefSetArchive::clear_owner_entries() {
  owner_entries_.Clear();
}
inline ::TSCE::InternalCellRefSetArchive_OwnerEntry* InternalCellRefSetArchive::mutable_owner_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.InternalCellRefSetArchive.owner_entries)
  return owner_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellRefSetArchive_OwnerEntry >*
InternalCellRefSetArchive::mutable_owner_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.InternalCellRefSetArchive.owner_entries)
  return &owner_entries_;
}
inline const ::TSCE::InternalCellRefSetArchive_OwnerEntry& InternalCellRefSetArchive::_internal_owner_entries(int index) const {
  return owner_entries_.Get(index);
}
inline const ::TSCE::InternalCellRefSetArchive_OwnerEntry& InternalCellRefSetArchive::owner_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.InternalCellRefSetArchive.owner_entries)
  return _internal_owner_entries(index);
}
inline ::TSCE::InternalCellRefSetArchive_OwnerEntry* InternalCellRefSetArchive::_internal_add_owner_entries() {
  return owner_entries_.Add();
}
inline ::TSCE::InternalCellRefSetArchive_OwnerEntry* InternalCellRefSetArchive::add_owner_entries() {
  // @@protoc_insertion_point(field_add:TSCE.InternalCellRefSetArchive.owner_entries)
  return _internal_add_owner_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellRefSetArchive_OwnerEntry >&
InternalCellRefSetArchive::owner_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.InternalCellRefSetArchive.owner_entries)
  return owner_entries_;
}

// -------------------------------------------------------------------

// ColumnRowSize

// optional uint32 num_columns = 1 [default = 1];
inline bool ColumnRowSize::_internal_has_num_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnRowSize::has_num_columns() const {
  return _internal_has_num_columns();
}
inline void ColumnRowSize::clear_num_columns() {
  num_columns_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowSize::_internal_num_columns() const {
  return num_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowSize::num_columns() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnRowSize.num_columns)
  return _internal_num_columns();
}
inline void ColumnRowSize::_internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_columns_ = value;
}
inline void ColumnRowSize::set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:TSCE.ColumnRowSize.num_columns)
}

// optional uint32 num_rows = 2 [default = 1];
inline bool ColumnRowSize::_internal_has_num_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnRowSize::has_num_rows() const {
  return _internal_has_num_rows();
}
inline void ColumnRowSize::clear_num_rows() {
  num_rows_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowSize::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowSize::num_rows() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnRowSize.num_rows)
  return _internal_num_rows();
}
inline void ColumnRowSize::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_rows_ = value;
}
inline void ColumnRowSize::set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:TSCE.ColumnRowSize.num_rows)
}

// -------------------------------------------------------------------

// CellRectArchive

// required .TSCE.CellCoordinateArchive origin = 1;
inline bool CellRectArchive::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool CellRectArchive::has_origin() const {
  return _internal_has_origin();
}
inline void CellRectArchive::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& CellRectArchive::_internal_origin() const {
  const ::TSCE::CellCoordinateArchive* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CellRectArchive::origin() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRectArchive.origin)
  return _internal_origin();
}
inline void CellRectArchive::unsafe_arena_set_allocated_origin(
    ::TSCE::CellCoordinateArchive* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRectArchive.origin)
}
inline ::TSCE::CellCoordinateArchive* CellRectArchive::release_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellRectArchive::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:TSCE.CellRectArchive.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellRectArchive::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::TSCE::CellCoordinateArchive* CellRectArchive::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRectArchive.origin)
  return _internal_mutable_origin();
}
inline void CellRectArchive::set_allocated_origin(::TSCE::CellCoordinateArchive* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRectArchive.origin)
}

// required .TSCE.ColumnRowSize size = 2;
inline bool CellRectArchive::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool CellRectArchive::has_size() const {
  return _internal_has_size();
}
inline void CellRectArchive::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::ColumnRowSize& CellRectArchive::_internal_size() const {
  const ::TSCE::ColumnRowSize* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ColumnRowSize&>(
      ::TSCE::_ColumnRowSize_default_instance_);
}
inline const ::TSCE::ColumnRowSize& CellRectArchive::size() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRectArchive.size)
  return _internal_size();
}
inline void CellRectArchive::unsafe_arena_set_allocated_size(
    ::TSCE::ColumnRowSize* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRectArchive.size)
}
inline ::TSCE::ColumnRowSize* CellRectArchive::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::ColumnRowSize* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ColumnRowSize* CellRectArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:TSCE.CellRectArchive.size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::ColumnRowSize* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TSCE::ColumnRowSize* CellRectArchive::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ColumnRowSize>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::TSCE::ColumnRowSize* CellRectArchive::mutable_size() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRectArchive.size)
  return _internal_mutable_size();
}
inline void CellRectArchive::set_allocated_size(::TSCE::ColumnRowSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRectArchive.size)
}

// -------------------------------------------------------------------

// CellRefSetArchive_OwnerEntry

// required .TSP.UUID owner_uid = 1;
inline bool CellRefSetArchive_OwnerEntry::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool CellRefSetArchive_OwnerEntry::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& CellRefSetArchive_OwnerEntry::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CellRefSetArchive_OwnerEntry::owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRefSetArchive.OwnerEntry.owner_uid)
  return _internal_owner_uid();
}
inline void CellRefSetArchive_OwnerEntry::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRefSetArchive.OwnerEntry.owner_uid)
}
inline ::TSP::UUID* CellRefSetArchive_OwnerEntry::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CellRefSetArchive_OwnerEntry::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CellRefSetArchive.OwnerEntry.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CellRefSetArchive_OwnerEntry::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* CellRefSetArchive_OwnerEntry::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRefSetArchive.OwnerEntry.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void CellRefSetArchive_OwnerEntry::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRefSetArchive.OwnerEntry.owner_uid)
}

// required .TSCE.CellCoordSetArchive coord_set = 2;
inline bool CellRefSetArchive_OwnerEntry::_internal_has_coord_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || coord_set_ != nullptr);
  return value;
}
inline bool CellRefSetArchive_OwnerEntry::has_coord_set() const {
  return _internal_has_coord_set();
}
inline void CellRefSetArchive_OwnerEntry::clear_coord_set() {
  if (coord_set_ != nullptr) coord_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellCoordSetArchive& CellRefSetArchive_OwnerEntry::_internal_coord_set() const {
  const ::TSCE::CellCoordSetArchive* p = coord_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& CellRefSetArchive_OwnerEntry::coord_set() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRefSetArchive.OwnerEntry.coord_set)
  return _internal_coord_set();
}
inline void CellRefSetArchive_OwnerEntry::unsafe_arena_set_allocated_coord_set(
    ::TSCE::CellCoordSetArchive* coord_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_set_);
  }
  coord_set_ = coord_set;
  if (coord_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRefSetArchive.OwnerEntry.coord_set)
}
inline ::TSCE::CellCoordSetArchive* CellRefSetArchive_OwnerEntry::release_coord_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* CellRefSetArchive_OwnerEntry::unsafe_arena_release_coord_set() {
  // @@protoc_insertion_point(field_release:TSCE.CellRefSetArchive.OwnerEntry.coord_set)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* CellRefSetArchive_OwnerEntry::_internal_mutable_coord_set() {
  _has_bits_[0] |= 0x00000002u;
  if (coord_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    coord_set_ = p;
  }
  return coord_set_;
}
inline ::TSCE::CellCoordSetArchive* CellRefSetArchive_OwnerEntry::mutable_coord_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRefSetArchive.OwnerEntry.coord_set)
  return _internal_mutable_coord_set();
}
inline void CellRefSetArchive_OwnerEntry::set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coord_set_;
  }
  if (coord_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coord_set);
    if (message_arena != submessage_arena) {
      coord_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coord_set_ = coord_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRefSetArchive.OwnerEntry.coord_set)
}

// -------------------------------------------------------------------

// CellRefSetArchive

// repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
inline int CellRefSetArchive::_internal_owner_entries_size() const {
  return owner_entries_.size();
}
inline int CellRefSetArchive::owner_entries_size() const {
  return _internal_owner_entries_size();
}
inline void CellRefSetArchive::clear_owner_entries() {
  owner_entries_.Clear();
}
inline ::TSCE::CellRefSetArchive_OwnerEntry* CellRefSetArchive::mutable_owner_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRefSetArchive.owner_entries)
  return owner_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRefSetArchive_OwnerEntry >*
CellRefSetArchive::mutable_owner_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellRefSetArchive.owner_entries)
  return &owner_entries_;
}
inline const ::TSCE::CellRefSetArchive_OwnerEntry& CellRefSetArchive::_internal_owner_entries(int index) const {
  return owner_entries_.Get(index);
}
inline const ::TSCE::CellRefSetArchive_OwnerEntry& CellRefSetArchive::owner_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellRefSetArchive.owner_entries)
  return _internal_owner_entries(index);
}
inline ::TSCE::CellRefSetArchive_OwnerEntry* CellRefSetArchive::_internal_add_owner_entries() {
  return owner_entries_.Add();
}
inline ::TSCE::CellRefSetArchive_OwnerEntry* CellRefSetArchive::add_owner_entries() {
  // @@protoc_insertion_point(field_add:TSCE.CellRefSetArchive.owner_entries)
  return _internal_add_owner_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRefSetArchive_OwnerEntry >&
CellRefSetArchive::owner_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.CellRefSetArchive.owner_entries)
  return owner_entries_;
}

// -------------------------------------------------------------------

// UidCoordSetArchive_ColumnEntry

// required .TSP.UUID column = 1;
inline bool UidCoordSetArchive_ColumnEntry::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_ != nullptr);
  return value;
}
inline bool UidCoordSetArchive_ColumnEntry::has_column() const {
  return _internal_has_column();
}
inline const ::TSP::UUID& UidCoordSetArchive_ColumnEntry::_internal_column() const {
  const ::TSP::UUID* p = column_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UidCoordSetArchive_ColumnEntry::column() const {
  // @@protoc_insertion_point(field_get:TSCE.UidCoordSetArchive.ColumnEntry.column)
  return _internal_column();
}
inline void UidCoordSetArchive_ColumnEntry::unsafe_arena_set_allocated_column(
    ::TSP::UUID* column) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_);
  }
  column_ = column;
  if (column) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UidCoordSetArchive.ColumnEntry.column)
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::release_column() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_;
  column_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::unsafe_arena_release_column() {
  // @@protoc_insertion_point(field_release:TSCE.UidCoordSetArchive.ColumnEntry.column)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_;
  column_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::_internal_mutable_column() {
  _has_bits_[0] |= 0x00000001u;
  if (column_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_ = p;
  }
  return column_;
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::mutable_column() {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCoordSetArchive.ColumnEntry.column)
  return _internal_mutable_column();
}
inline void UidCoordSetArchive_ColumnEntry::set_allocated_column(::TSP::UUID* column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_);
  }
  if (column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column)->GetArena();
    if (message_arena != submessage_arena) {
      column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_ = column;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UidCoordSetArchive.ColumnEntry.column)
}

// repeated .TSP.UUID row_set = 2;
inline int UidCoordSetArchive_ColumnEntry::_internal_row_set_size() const {
  return row_set_.size();
}
inline int UidCoordSetArchive_ColumnEntry::row_set_size() const {
  return _internal_row_set_size();
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::mutable_row_set(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCoordSetArchive.ColumnEntry.row_set)
  return row_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UidCoordSetArchive_ColumnEntry::mutable_row_set() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UidCoordSetArchive.ColumnEntry.row_set)
  return &row_set_;
}
inline const ::TSP::UUID& UidCoordSetArchive_ColumnEntry::_internal_row_set(int index) const {
  return row_set_.Get(index);
}
inline const ::TSP::UUID& UidCoordSetArchive_ColumnEntry::row_set(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UidCoordSetArchive.ColumnEntry.row_set)
  return _internal_row_set(index);
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::_internal_add_row_set() {
  return row_set_.Add();
}
inline ::TSP::UUID* UidCoordSetArchive_ColumnEntry::add_row_set() {
  // @@protoc_insertion_point(field_add:TSCE.UidCoordSetArchive.ColumnEntry.row_set)
  return _internal_add_row_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UidCoordSetArchive_ColumnEntry::row_set() const {
  // @@protoc_insertion_point(field_list:TSCE.UidCoordSetArchive.ColumnEntry.row_set)
  return row_set_;
}

// -------------------------------------------------------------------

// UidCoordSetArchive

// repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
inline int UidCoordSetArchive::_internal_column_entries_size() const {
  return column_entries_.size();
}
inline int UidCoordSetArchive::column_entries_size() const {
  return _internal_column_entries_size();
}
inline void UidCoordSetArchive::clear_column_entries() {
  column_entries_.Clear();
}
inline ::TSCE::UidCoordSetArchive_ColumnEntry* UidCoordSetArchive::mutable_column_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCoordSetArchive.column_entries)
  return column_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCoordSetArchive_ColumnEntry >*
UidCoordSetArchive::mutable_column_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UidCoordSetArchive.column_entries)
  return &column_entries_;
}
inline const ::TSCE::UidCoordSetArchive_ColumnEntry& UidCoordSetArchive::_internal_column_entries(int index) const {
  return column_entries_.Get(index);
}
inline const ::TSCE::UidCoordSetArchive_ColumnEntry& UidCoordSetArchive::column_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UidCoordSetArchive.column_entries)
  return _internal_column_entries(index);
}
inline ::TSCE::UidCoordSetArchive_ColumnEntry* UidCoordSetArchive::_internal_add_column_entries() {
  return column_entries_.Add();
}
inline ::TSCE::UidCoordSetArchive_ColumnEntry* UidCoordSetArchive::add_column_entries() {
  // @@protoc_insertion_point(field_add:TSCE.UidCoordSetArchive.column_entries)
  return _internal_add_column_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCoordSetArchive_ColumnEntry >&
UidCoordSetArchive::column_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.UidCoordSetArchive.column_entries)
  return column_entries_;
}

// -------------------------------------------------------------------

// UidCellRefSetArchive_OwnerEntry

// required .TSP.UUID owner_uid = 1;
inline bool UidCellRefSetArchive_OwnerEntry::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool UidCellRefSetArchive_OwnerEntry::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& UidCellRefSetArchive_OwnerEntry::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UidCellRefSetArchive_OwnerEntry::owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid)
  return _internal_owner_uid();
}
inline void UidCellRefSetArchive_OwnerEntry::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid)
}
inline ::TSP::UUID* UidCellRefSetArchive_OwnerEntry::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UidCellRefSetArchive_OwnerEntry::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UidCellRefSetArchive_OwnerEntry::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* UidCellRefSetArchive_OwnerEntry::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void UidCellRefSetArchive_OwnerEntry::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid)
}

// required .TSCE.UidCoordSetArchive coord_set = 2;
inline bool UidCellRefSetArchive_OwnerEntry::_internal_has_coord_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || coord_set_ != nullptr);
  return value;
}
inline bool UidCellRefSetArchive_OwnerEntry::has_coord_set() const {
  return _internal_has_coord_set();
}
inline void UidCellRefSetArchive_OwnerEntry::clear_coord_set() {
  if (coord_set_ != nullptr) coord_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::UidCoordSetArchive& UidCellRefSetArchive_OwnerEntry::_internal_coord_set() const {
  const ::TSCE::UidCoordSetArchive* p = coord_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UidCoordSetArchive&>(
      ::TSCE::_UidCoordSetArchive_default_instance_);
}
inline const ::TSCE::UidCoordSetArchive& UidCellRefSetArchive_OwnerEntry::coord_set() const {
  // @@protoc_insertion_point(field_get:TSCE.UidCellRefSetArchive.OwnerEntry.coord_set)
  return _internal_coord_set();
}
inline void UidCellRefSetArchive_OwnerEntry::unsafe_arena_set_allocated_coord_set(
    ::TSCE::UidCoordSetArchive* coord_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_set_);
  }
  coord_set_ = coord_set;
  if (coord_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UidCellRefSetArchive.OwnerEntry.coord_set)
}
inline ::TSCE::UidCoordSetArchive* UidCellRefSetArchive_OwnerEntry::release_coord_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::UidCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UidCoordSetArchive* UidCellRefSetArchive_OwnerEntry::unsafe_arena_release_coord_set() {
  // @@protoc_insertion_point(field_release:TSCE.UidCellRefSetArchive.OwnerEntry.coord_set)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::UidCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  return temp;
}
inline ::TSCE::UidCoordSetArchive* UidCellRefSetArchive_OwnerEntry::_internal_mutable_coord_set() {
  _has_bits_[0] |= 0x00000002u;
  if (coord_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UidCoordSetArchive>(GetArena());
    coord_set_ = p;
  }
  return coord_set_;
}
inline ::TSCE::UidCoordSetArchive* UidCellRefSetArchive_OwnerEntry::mutable_coord_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCellRefSetArchive.OwnerEntry.coord_set)
  return _internal_mutable_coord_set();
}
inline void UidCellRefSetArchive_OwnerEntry::set_allocated_coord_set(::TSCE::UidCoordSetArchive* coord_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coord_set_;
  }
  if (coord_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coord_set);
    if (message_arena != submessage_arena) {
      coord_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coord_set_ = coord_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UidCellRefSetArchive.OwnerEntry.coord_set)
}

// -------------------------------------------------------------------

// UidCellRefSetArchive

// repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
inline int UidCellRefSetArchive::_internal_owner_entries_size() const {
  return owner_entries_.size();
}
inline int UidCellRefSetArchive::owner_entries_size() const {
  return _internal_owner_entries_size();
}
inline void UidCellRefSetArchive::clear_owner_entries() {
  owner_entries_.Clear();
}
inline ::TSCE::UidCellRefSetArchive_OwnerEntry* UidCellRefSetArchive::mutable_owner_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UidCellRefSetArchive.owner_entries)
  return owner_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCellRefSetArchive_OwnerEntry >*
UidCellRefSetArchive::mutable_owner_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UidCellRefSetArchive.owner_entries)
  return &owner_entries_;
}
inline const ::TSCE::UidCellRefSetArchive_OwnerEntry& UidCellRefSetArchive::_internal_owner_entries(int index) const {
  return owner_entries_.Get(index);
}
inline const ::TSCE::UidCellRefSetArchive_OwnerEntry& UidCellRefSetArchive::owner_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UidCellRefSetArchive.owner_entries)
  return _internal_owner_entries(index);
}
inline ::TSCE::UidCellRefSetArchive_OwnerEntry* UidCellRefSetArchive::_internal_add_owner_entries() {
  return owner_entries_.Add();
}
inline ::TSCE::UidCellRefSetArchive_OwnerEntry* UidCellRefSetArchive::add_owner_entries() {
  // @@protoc_insertion_point(field_add:TSCE.UidCellRefSetArchive.owner_entries)
  return _internal_add_owner_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UidCellRefSetArchive_OwnerEntry >&
UidCellRefSetArchive::owner_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.UidCellRefSetArchive.owner_entries)
  return owner_entries_;
}

// -------------------------------------------------------------------

// ReferencesToDirtyArchive

// optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
inline bool ReferencesToDirtyArchive::_internal_has_to_dirty_owner_ids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || to_dirty_owner_ids_ != nullptr);
  return value;
}
inline bool ReferencesToDirtyArchive::has_to_dirty_owner_ids() const {
  return _internal_has_to_dirty_owner_ids();
}
inline void ReferencesToDirtyArchive::clear_to_dirty_owner_ids() {
  if (to_dirty_owner_ids_ != nullptr) to_dirty_owner_ids_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::IndexSetArchive& ReferencesToDirtyArchive::_internal_to_dirty_owner_ids() const {
  const ::TSCE::IndexSetArchive* p = to_dirty_owner_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexSetArchive&>(
      ::TSCE::_IndexSetArchive_default_instance_);
}
inline const ::TSCE::IndexSetArchive& ReferencesToDirtyArchive::to_dirty_owner_ids() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids)
  return _internal_to_dirty_owner_ids();
}
inline void ReferencesToDirtyArchive::unsafe_arena_set_allocated_to_dirty_owner_ids(
    ::TSCE::IndexSetArchive* to_dirty_owner_ids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_dirty_owner_ids_);
  }
  to_dirty_owner_ids_ = to_dirty_owner_ids;
  if (to_dirty_owner_ids) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids)
}
inline ::TSCE::IndexSetArchive* ReferencesToDirtyArchive::release_to_dirty_owner_ids() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = to_dirty_owner_ids_;
  to_dirty_owner_ids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexSetArchive* ReferencesToDirtyArchive::unsafe_arena_release_to_dirty_owner_ids() {
  // @@protoc_insertion_point(field_release:TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = to_dirty_owner_ids_;
  to_dirty_owner_ids_ = nullptr;
  return temp;
}
inline ::TSCE::IndexSetArchive* ReferencesToDirtyArchive::_internal_mutable_to_dirty_owner_ids() {
  _has_bits_[0] |= 0x00000001u;
  if (to_dirty_owner_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexSetArchive>(GetArena());
    to_dirty_owner_ids_ = p;
  }
  return to_dirty_owner_ids_;
}
inline ::TSCE::IndexSetArchive* ReferencesToDirtyArchive::mutable_to_dirty_owner_ids() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids)
  return _internal_mutable_to_dirty_owner_ids();
}
inline void ReferencesToDirtyArchive::set_allocated_to_dirty_owner_ids(::TSCE::IndexSetArchive* to_dirty_owner_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_dirty_owner_ids_;
  }
  if (to_dirty_owner_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_dirty_owner_ids);
    if (message_arena != submessage_arena) {
      to_dirty_owner_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_dirty_owner_ids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  to_dirty_owner_ids_ = to_dirty_owner_ids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids)
}

// optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
inline bool ReferencesToDirtyArchive::_internal_has_to_dirty_cells() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || to_dirty_cells_ != nullptr);
  return value;
}
inline bool ReferencesToDirtyArchive::has_to_dirty_cells() const {
  return _internal_has_to_dirty_cells();
}
inline void ReferencesToDirtyArchive::clear_to_dirty_cells() {
  if (to_dirty_cells_ != nullptr) to_dirty_cells_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::_internal_to_dirty_cells() const {
  const ::TSCE::InternalCellRefSetArchive* p = to_dirty_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::to_dirty_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferencesToDirtyArchive.to_dirty_cells)
  return _internal_to_dirty_cells();
}
inline void ReferencesToDirtyArchive::unsafe_arena_set_allocated_to_dirty_cells(
    ::TSCE::InternalCellRefSetArchive* to_dirty_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_dirty_cells_);
  }
  to_dirty_cells_ = to_dirty_cells;
  if (to_dirty_cells) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_cells)
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::release_to_dirty_cells() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = to_dirty_cells_;
  to_dirty_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::unsafe_arena_release_to_dirty_cells() {
  // @@protoc_insertion_point(field_release:TSCE.ReferencesToDirtyArchive.to_dirty_cells)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = to_dirty_cells_;
  to_dirty_cells_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::_internal_mutable_to_dirty_cells() {
  _has_bits_[0] |= 0x00000002u;
  if (to_dirty_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    to_dirty_cells_ = p;
  }
  return to_dirty_cells_;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::mutable_to_dirty_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferencesToDirtyArchive.to_dirty_cells)
  return _internal_mutable_to_dirty_cells();
}
inline void ReferencesToDirtyArchive::set_allocated_to_dirty_cells(::TSCE::InternalCellRefSetArchive* to_dirty_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_dirty_cells_;
  }
  if (to_dirty_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_dirty_cells);
    if (message_arena != submessage_arena) {
      to_dirty_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_dirty_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_dirty_cells_ = to_dirty_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_cells)
}

// optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
inline bool ReferencesToDirtyArchive::_internal_has_to_dirty_cells_additional() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || to_dirty_cells_additional_ != nullptr);
  return value;
}
inline bool ReferencesToDirtyArchive::has_to_dirty_cells_additional() const {
  return _internal_has_to_dirty_cells_additional();
}
inline void ReferencesToDirtyArchive::clear_to_dirty_cells_additional() {
  if (to_dirty_cells_additional_ != nullptr) to_dirty_cells_additional_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::_internal_to_dirty_cells_additional() const {
  const ::TSCE::InternalCellRefSetArchive* p = to_dirty_cells_additional_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::to_dirty_cells_additional() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional)
  return _internal_to_dirty_cells_additional();
}
inline void ReferencesToDirtyArchive::unsafe_arena_set_allocated_to_dirty_cells_additional(
    ::TSCE::InternalCellRefSetArchive* to_dirty_cells_additional) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_dirty_cells_additional_);
  }
  to_dirty_cells_additional_ = to_dirty_cells_additional;
  if (to_dirty_cells_additional) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional)
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::release_to_dirty_cells_additional() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::InternalCellRefSetArchive* temp = to_dirty_cells_additional_;
  to_dirty_cells_additional_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::unsafe_arena_release_to_dirty_cells_additional() {
  // @@protoc_insertion_point(field_release:TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::InternalCellRefSetArchive* temp = to_dirty_cells_additional_;
  to_dirty_cells_additional_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::_internal_mutable_to_dirty_cells_additional() {
  _has_bits_[0] |= 0x00000004u;
  if (to_dirty_cells_additional_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    to_dirty_cells_additional_ = p;
  }
  return to_dirty_cells_additional_;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::mutable_to_dirty_cells_additional() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional)
  return _internal_mutable_to_dirty_cells_additional();
}
inline void ReferencesToDirtyArchive::set_allocated_to_dirty_cells_additional(::TSCE::InternalCellRefSetArchive* to_dirty_cells_additional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete to_dirty_cells_additional_;
  }
  if (to_dirty_cells_additional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(to_dirty_cells_additional);
    if (message_arena != submessage_arena) {
      to_dirty_cells_additional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_dirty_cells_additional, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  to_dirty_cells_additional_ = to_dirty_cells_additional;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional)
}

// repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
inline int ReferencesToDirtyArchive::_internal_to_dirty_range_refs_size() const {
  return to_dirty_range_refs_.size();
}
inline int ReferencesToDirtyArchive::to_dirty_range_refs_size() const {
  return _internal_to_dirty_range_refs_size();
}
inline void ReferencesToDirtyArchive::clear_to_dirty_range_refs() {
  to_dirty_range_refs_.Clear();
}
inline ::TSCE::InternalRangeReferenceArchive* ReferencesToDirtyArchive::mutable_to_dirty_range_refs(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferencesToDirtyArchive.to_dirty_range_refs)
  return to_dirty_range_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalRangeReferenceArchive >*
ReferencesToDirtyArchive::mutable_to_dirty_range_refs() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferencesToDirtyArchive.to_dirty_range_refs)
  return &to_dirty_range_refs_;
}
inline const ::TSCE::InternalRangeReferenceArchive& ReferencesToDirtyArchive::_internal_to_dirty_range_refs(int index) const {
  return to_dirty_range_refs_.Get(index);
}
inline const ::TSCE::InternalRangeReferenceArchive& ReferencesToDirtyArchive::to_dirty_range_refs(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferencesToDirtyArchive.to_dirty_range_refs)
  return _internal_to_dirty_range_refs(index);
}
inline ::TSCE::InternalRangeReferenceArchive* ReferencesToDirtyArchive::_internal_add_to_dirty_range_refs() {
  return to_dirty_range_refs_.Add();
}
inline ::TSCE::InternalRangeReferenceArchive* ReferencesToDirtyArchive::add_to_dirty_range_refs() {
  // @@protoc_insertion_point(field_add:TSCE.ReferencesToDirtyArchive.to_dirty_range_refs)
  return _internal_add_to_dirty_range_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalRangeReferenceArchive >&
ReferencesToDirtyArchive::to_dirty_range_refs() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferencesToDirtyArchive.to_dirty_range_refs)
  return to_dirty_range_refs_;
}

// optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
inline bool ReferencesToDirtyArchive::_internal_has_calc_in_progress_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || calc_in_progress_cells_ != nullptr);
  return value;
}
inline bool ReferencesToDirtyArchive::has_calc_in_progress_cells() const {
  return _internal_has_calc_in_progress_cells();
}
inline void ReferencesToDirtyArchive::clear_calc_in_progress_cells() {
  if (calc_in_progress_cells_ != nullptr) calc_in_progress_cells_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::_internal_calc_in_progress_cells() const {
  const ::TSCE::InternalCellRefSetArchive* p = calc_in_progress_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& ReferencesToDirtyArchive::calc_in_progress_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferencesToDirtyArchive.calc_in_progress_cells)
  return _internal_calc_in_progress_cells();
}
inline void ReferencesToDirtyArchive::unsafe_arena_set_allocated_calc_in_progress_cells(
    ::TSCE::InternalCellRefSetArchive* calc_in_progress_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calc_in_progress_cells_);
  }
  calc_in_progress_cells_ = calc_in_progress_cells;
  if (calc_in_progress_cells) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferencesToDirtyArchive.calc_in_progress_cells)
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::release_calc_in_progress_cells() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::InternalCellRefSetArchive* temp = calc_in_progress_cells_;
  calc_in_progress_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::unsafe_arena_release_calc_in_progress_cells() {
  // @@protoc_insertion_point(field_release:TSCE.ReferencesToDirtyArchive.calc_in_progress_cells)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::InternalCellRefSetArchive* temp = calc_in_progress_cells_;
  calc_in_progress_cells_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::_internal_mutable_calc_in_progress_cells() {
  _has_bits_[0] |= 0x00000008u;
  if (calc_in_progress_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    calc_in_progress_cells_ = p;
  }
  return calc_in_progress_cells_;
}
inline ::TSCE::InternalCellRefSetArchive* ReferencesToDirtyArchive::mutable_calc_in_progress_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferencesToDirtyArchive.calc_in_progress_cells)
  return _internal_mutable_calc_in_progress_cells();
}
inline void ReferencesToDirtyArchive::set_allocated_calc_in_progress_cells(::TSCE::InternalCellRefSetArchive* calc_in_progress_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete calc_in_progress_cells_;
  }
  if (calc_in_progress_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calc_in_progress_cells);
    if (message_arena != submessage_arena) {
      calc_in_progress_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calc_in_progress_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  calc_in_progress_cells_ = calc_in_progress_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferencesToDirtyArchive.calc_in_progress_cells)
}

// -------------------------------------------------------------------

// CoordMapperArchive_BaseToViewEntry

// required uint32 base_row = 1;
inline bool CoordMapperArchive_BaseToViewEntry::_internal_has_base_row() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CoordMapperArchive_BaseToViewEntry::has_base_row() const {
  return _internal_has_base_row();
}
inline void CoordMapperArchive_BaseToViewEntry::clear_base_row() {
  base_row_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CoordMapperArchive_BaseToViewEntry::_internal_base_row() const {
  return base_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CoordMapperArchive_BaseToViewEntry::base_row() const {
  // @@protoc_insertion_point(field_get:TSCE.CoordMapperArchive.BaseToViewEntry.base_row)
  return _internal_base_row();
}
inline void CoordMapperArchive_BaseToViewEntry::_internal_set_base_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  base_row_ = value;
}
inline void CoordMapperArchive_BaseToViewEntry::set_base_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CoordMapperArchive.BaseToViewEntry.base_row)
}

// required uint32 view_row = 2;
inline bool CoordMapperArchive_BaseToViewEntry::_internal_has_view_row() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CoordMapperArchive_BaseToViewEntry::has_view_row() const {
  return _internal_has_view_row();
}
inline void CoordMapperArchive_BaseToViewEntry::clear_view_row() {
  view_row_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CoordMapperArchive_BaseToViewEntry::_internal_view_row() const {
  return view_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CoordMapperArchive_BaseToViewEntry::view_row() const {
  // @@protoc_insertion_point(field_get:TSCE.CoordMapperArchive.BaseToViewEntry.view_row)
  return _internal_view_row();
}
inline void CoordMapperArchive_BaseToViewEntry::_internal_set_view_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  view_row_ = value;
}
inline void CoordMapperArchive_BaseToViewEntry::set_view_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_view_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CoordMapperArchive.BaseToViewEntry.view_row)
}

// -------------------------------------------------------------------

// CoordMapperArchive

// optional .TSCE.IndexSetArchive summary_and_label_rows_set = 1;
inline bool CoordMapperArchive::_internal_has_summary_and_label_rows_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_and_label_rows_set_ != nullptr);
  return value;
}
inline bool CoordMapperArchive::has_summary_and_label_rows_set() const {
  return _internal_has_summary_and_label_rows_set();
}
inline void CoordMapperArchive::clear_summary_and_label_rows_set() {
  if (summary_and_label_rows_set_ != nullptr) summary_and_label_rows_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::IndexSetArchive& CoordMapperArchive::_internal_summary_and_label_rows_set() const {
  const ::TSCE::IndexSetArchive* p = summary_and_label_rows_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexSetArchive&>(
      ::TSCE::_IndexSetArchive_default_instance_);
}
inline const ::TSCE::IndexSetArchive& CoordMapperArchive::summary_and_label_rows_set() const {
  // @@protoc_insertion_point(field_get:TSCE.CoordMapperArchive.summary_and_label_rows_set)
  return _internal_summary_and_label_rows_set();
}
inline void CoordMapperArchive::unsafe_arena_set_allocated_summary_and_label_rows_set(
    ::TSCE::IndexSetArchive* summary_and_label_rows_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_and_label_rows_set_);
  }
  summary_and_label_rows_set_ = summary_and_label_rows_set;
  if (summary_and_label_rows_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CoordMapperArchive.summary_and_label_rows_set)
}
inline ::TSCE::IndexSetArchive* CoordMapperArchive::release_summary_and_label_rows_set() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = summary_and_label_rows_set_;
  summary_and_label_rows_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexSetArchive* CoordMapperArchive::unsafe_arena_release_summary_and_label_rows_set() {
  // @@protoc_insertion_point(field_release:TSCE.CoordMapperArchive.summary_and_label_rows_set)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::IndexSetArchive* temp = summary_and_label_rows_set_;
  summary_and_label_rows_set_ = nullptr;
  return temp;
}
inline ::TSCE::IndexSetArchive* CoordMapperArchive::_internal_mutable_summary_and_label_rows_set() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_and_label_rows_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexSetArchive>(GetArena());
    summary_and_label_rows_set_ = p;
  }
  return summary_and_label_rows_set_;
}
inline ::TSCE::IndexSetArchive* CoordMapperArchive::mutable_summary_and_label_rows_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.CoordMapperArchive.summary_and_label_rows_set)
  return _internal_mutable_summary_and_label_rows_set();
}
inline void CoordMapperArchive::set_allocated_summary_and_label_rows_set(::TSCE::IndexSetArchive* summary_and_label_rows_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_and_label_rows_set_;
  }
  if (summary_and_label_rows_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary_and_label_rows_set);
    if (message_arena != submessage_arena) {
      summary_and_label_rows_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_and_label_rows_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_and_label_rows_set_ = summary_and_label_rows_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CoordMapperArchive.summary_and_label_rows_set)
}

// required .TSP.UUID table_uid = 2;
inline bool CoordMapperArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool CoordMapperArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& CoordMapperArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CoordMapperArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CoordMapperArchive.table_uid)
  return _internal_table_uid();
}
inline void CoordMapperArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CoordMapperArchive.table_uid)
}
inline ::TSP::UUID* CoordMapperArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CoordMapperArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CoordMapperArchive.table_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CoordMapperArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* CoordMapperArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CoordMapperArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void CoordMapperArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CoordMapperArchive.table_uid)
}

// repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_map = 3;
inline int CoordMapperArchive::_internal_base_to_view_map_size() const {
  return base_to_view_map_.size();
}
inline int CoordMapperArchive::base_to_view_map_size() const {
  return _internal_base_to_view_map_size();
}
inline void CoordMapperArchive::clear_base_to_view_map() {
  base_to_view_map_.Clear();
}
inline ::TSCE::CoordMapperArchive_BaseToViewEntry* CoordMapperArchive::mutable_base_to_view_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CoordMapperArchive.base_to_view_map)
  return base_to_view_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CoordMapperArchive_BaseToViewEntry >*
CoordMapperArchive::mutable_base_to_view_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CoordMapperArchive.base_to_view_map)
  return &base_to_view_map_;
}
inline const ::TSCE::CoordMapperArchive_BaseToViewEntry& CoordMapperArchive::_internal_base_to_view_map(int index) const {
  return base_to_view_map_.Get(index);
}
inline const ::TSCE::CoordMapperArchive_BaseToViewEntry& CoordMapperArchive::base_to_view_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CoordMapperArchive.base_to_view_map)
  return _internal_base_to_view_map(index);
}
inline ::TSCE::CoordMapperArchive_BaseToViewEntry* CoordMapperArchive::_internal_add_base_to_view_map() {
  return base_to_view_map_.Add();
}
inline ::TSCE::CoordMapperArchive_BaseToViewEntry* CoordMapperArchive::add_base_to_view_map() {
  // @@protoc_insertion_point(field_add:TSCE.CoordMapperArchive.base_to_view_map)
  return _internal_add_base_to_view_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CoordMapperArchive_BaseToViewEntry >&
CoordMapperArchive::base_to_view_map() const {
  // @@protoc_insertion_point(field_list:TSCE.CoordMapperArchive.base_to_view_map)
  return base_to_view_map_;
}

// -------------------------------------------------------------------

// ReferenceArchive

// required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
inline bool ReferenceArchive::_internal_has_reference_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceArchive::has_reference_type() const {
  return _internal_has_reference_type();
}
inline void ReferenceArchive::clear_reference_type() {
  reference_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSCE::ReferenceArchive_ReferenceType ReferenceArchive::_internal_reference_type() const {
  return static_cast< ::TSCE::ReferenceArchive_ReferenceType >(reference_type_);
}
inline ::TSCE::ReferenceArchive_ReferenceType ReferenceArchive::reference_type() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.reference_type)
  return _internal_reference_type();
}
inline void ReferenceArchive::_internal_set_reference_type(::TSCE::ReferenceArchive_ReferenceType value) {
  assert(::TSCE::ReferenceArchive_ReferenceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  reference_type_ = value;
}
inline void ReferenceArchive::set_reference_type(::TSCE::ReferenceArchive_ReferenceType value) {
  _internal_set_reference_type(value);
  // @@protoc_insertion_point(field_set:TSCE.ReferenceArchive.reference_type)
}

// optional .TSCE.CellReferenceArchive cell_reference = 2;
inline bool ReferenceArchive::_internal_has_cell_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_reference_ != nullptr);
  return value;
}
inline bool ReferenceArchive::has_cell_reference() const {
  return _internal_has_cell_reference();
}
inline void ReferenceArchive::clear_cell_reference() {
  if (cell_reference_ != nullptr) cell_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellReferenceArchive& ReferenceArchive::_internal_cell_reference() const {
  const ::TSCE::CellReferenceArchive* p = cell_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& ReferenceArchive::cell_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.cell_reference)
  return _internal_cell_reference();
}
inline void ReferenceArchive::unsafe_arena_set_allocated_cell_reference(
    ::TSCE::CellReferenceArchive* cell_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_reference_);
  }
  cell_reference_ = cell_reference;
  if (cell_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceArchive.cell_reference)
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::release_cell_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_reference_;
  cell_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::unsafe_arena_release_cell_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceArchive.cell_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_reference_;
  cell_reference_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::_internal_mutable_cell_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArena());
    cell_reference_ = p;
  }
  return cell_reference_;
}
inline ::TSCE::CellReferenceArchive* ReferenceArchive::mutable_cell_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceArchive.cell_reference)
  return _internal_mutable_cell_reference();
}
inline void ReferenceArchive::set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_reference_;
  }
  if (cell_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_reference);
    if (message_arena != submessage_arena) {
      cell_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_reference_ = cell_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceArchive.cell_reference)
}

// optional .TSCE.RangeReferenceArchive range_reference = 3;
inline bool ReferenceArchive::_internal_has_range_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || range_reference_ != nullptr);
  return value;
}
inline bool ReferenceArchive::has_range_reference() const {
  return _internal_has_range_reference();
}
inline void ReferenceArchive::clear_range_reference() {
  if (range_reference_ != nullptr) range_reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeReferenceArchive& ReferenceArchive::_internal_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& ReferenceArchive::range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceArchive.range_reference)
  return _internal_range_reference();
}
inline void ReferenceArchive::unsafe_arena_set_allocated_range_reference(
    ::TSCE::RangeReferenceArchive* range_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_reference_);
  }
  range_reference_ = range_reference;
  if (range_reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceArchive.range_reference)
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::release_range_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeReferenceArchive* temp = range_reference_;
  range_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::unsafe_arena_release_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceArchive.range_reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeReferenceArchive* temp = range_reference_;
  range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::_internal_mutable_range_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArena());
    range_reference_ = p;
  }
  return range_reference_;
}
inline ::TSCE::RangeReferenceArchive* ReferenceArchive::mutable_range_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceArchive.range_reference)
  return _internal_mutable_range_reference();
}
inline void ReferenceArchive::set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_reference_;
  }
  if (range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range_reference);
    if (message_arena != submessage_arena) {
      range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_reference_ = range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceArchive.range_reference)
}

// -------------------------------------------------------------------

// EdgeArchive

// required uint32 column = 1;
inline bool EdgeArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EdgeArchive::has_column() const {
  return _internal_has_column();
}
inline void EdgeArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.column)
  return _internal_column();
}
inline void EdgeArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void EdgeArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.column)
}

// required uint32 row = 2;
inline bool EdgeArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EdgeArchive::has_row() const {
  return _internal_has_row();
}
inline void EdgeArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.row)
  return _internal_row();
}
inline void EdgeArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void EdgeArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.row)
}

// required bool is_precedent = 3;
inline bool EdgeArchive::_internal_has_is_precedent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EdgeArchive::has_is_precedent() const {
  return _internal_has_is_precedent();
}
inline void EdgeArchive::clear_is_precedent() {
  is_precedent_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool EdgeArchive::_internal_is_precedent() const {
  return is_precedent_;
}
inline bool EdgeArchive::is_precedent() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.is_precedent)
  return _internal_is_precedent();
}
inline void EdgeArchive::_internal_set_is_precedent(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_precedent_ = value;
}
inline void EdgeArchive::set_is_precedent(bool value) {
  _internal_set_is_precedent(value);
  // @@protoc_insertion_point(field_set:TSCE.EdgeArchive.is_precedent)
}

// optional .TSP.CFUUIDArchive owner_id = 4;
inline bool EdgeArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_ != nullptr);
  return value;
}
inline bool EdgeArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline const ::TSP::CFUUIDArchive& EdgeArchive::_internal_owner_id() const {
  const ::TSP::CFUUIDArchive* p = owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& EdgeArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.EdgeArchive.owner_id)
  return _internal_owner_id();
}
inline void EdgeArchive::unsafe_arena_set_allocated_owner_id(
    ::TSP::CFUUIDArchive* owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  owner_id_ = owner_id;
  if (owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.EdgeArchive.owner_id)
}
inline ::TSP::CFUUIDArchive* EdgeArchive::release_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* EdgeArchive::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.EdgeArchive.owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* EdgeArchive::_internal_mutable_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    owner_id_ = p;
  }
  return owner_id_;
}
inline ::TSP::CFUUIDArchive* EdgeArchive::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.EdgeArchive.owner_id)
  return _internal_mutable_owner_id();
}
inline void EdgeArchive::set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.EdgeArchive.owner_id)
}

// -------------------------------------------------------------------

// EdgesArchive

// repeated uint32 packed_edge_without_owner = 9;
inline int EdgesArchive::_internal_packed_edge_without_owner_size() const {
  return packed_edge_without_owner_.size();
}
inline int EdgesArchive::packed_edge_without_owner_size() const {
  return _internal_packed_edge_without_owner_size();
}
inline void EdgesArchive::clear_packed_edge_without_owner() {
  packed_edge_without_owner_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::_internal_packed_edge_without_owner(int index) const {
  return packed_edge_without_owner_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::packed_edge_without_owner(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_packed_edge_without_owner(index);
}
inline void EdgesArchive::set_packed_edge_without_owner(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_edge_without_owner_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.packed_edge_without_owner)
}
inline void EdgesArchive::_internal_add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_edge_without_owner_.Add(value);
}
inline void EdgesArchive::add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_packed_edge_without_owner(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.packed_edge_without_owner)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::_internal_packed_edge_without_owner() const {
  return packed_edge_without_owner_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::packed_edge_without_owner() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_packed_edge_without_owner();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::_internal_mutable_packed_edge_without_owner() {
  return &packed_edge_without_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::mutable_packed_edge_without_owner() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.packed_edge_without_owner)
  return _internal_mutable_packed_edge_without_owner();
}

// repeated uint32 packed_edge_with_owner = 10;
inline int EdgesArchive::_internal_packed_edge_with_owner_size() const {
  return packed_edge_with_owner_.size();
}
inline int EdgesArchive::packed_edge_with_owner_size() const {
  return _internal_packed_edge_with_owner_size();
}
inline void EdgesArchive::clear_packed_edge_with_owner() {
  packed_edge_with_owner_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::_internal_packed_edge_with_owner(int index) const {
  return packed_edge_with_owner_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::packed_edge_with_owner(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_packed_edge_with_owner(index);
}
inline void EdgesArchive::set_packed_edge_with_owner(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_edge_with_owner_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.packed_edge_with_owner)
}
inline void EdgesArchive::_internal_add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_edge_with_owner_.Add(value);
}
inline void EdgesArchive::add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_packed_edge_with_owner(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.packed_edge_with_owner)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::_internal_packed_edge_with_owner() const {
  return packed_edge_with_owner_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::packed_edge_with_owner() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_packed_edge_with_owner();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::_internal_mutable_packed_edge_with_owner() {
  return &packed_edge_with_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::mutable_packed_edge_with_owner() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.packed_edge_with_owner)
  return _internal_mutable_packed_edge_with_owner();
}

// repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
inline int EdgesArchive::_internal_owner_id_for_edge_size() const {
  return owner_id_for_edge_.size();
}
inline int EdgesArchive::owner_id_for_edge_size() const {
  return _internal_owner_id_for_edge_size();
}
inline ::TSP::CFUUIDArchive* EdgesArchive::mutable_owner_id_for_edge(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.EdgesArchive.owner_id_for_edge)
  return owner_id_for_edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::CFUUIDArchive >*
EdgesArchive::mutable_owner_id_for_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.owner_id_for_edge)
  return &owner_id_for_edge_;
}
inline const ::TSP::CFUUIDArchive& EdgesArchive::_internal_owner_id_for_edge(int index) const {
  return owner_id_for_edge_.Get(index);
}
inline const ::TSP::CFUUIDArchive& EdgesArchive::owner_id_for_edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.owner_id_for_edge)
  return _internal_owner_id_for_edge(index);
}
inline ::TSP::CFUUIDArchive* EdgesArchive::_internal_add_owner_id_for_edge() {
  return owner_id_for_edge_.Add();
}
inline ::TSP::CFUUIDArchive* EdgesArchive::add_owner_id_for_edge() {
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.owner_id_for_edge)
  return _internal_add_owner_id_for_edge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::CFUUIDArchive >&
EdgesArchive::owner_id_for_edge() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.owner_id_for_edge)
  return owner_id_for_edge_;
}

// repeated uint32 internal_owner_id_for_edge = 12;
inline int EdgesArchive::_internal_internal_owner_id_for_edge_size() const {
  return internal_owner_id_for_edge_.size();
}
inline int EdgesArchive::internal_owner_id_for_edge_size() const {
  return _internal_internal_owner_id_for_edge_size();
}
inline void EdgesArchive::clear_internal_owner_id_for_edge() {
  internal_owner_id_for_edge_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::_internal_internal_owner_id_for_edge(int index) const {
  return internal_owner_id_for_edge_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesArchive::internal_owner_id_for_edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge(index);
}
inline void EdgesArchive::set_internal_owner_id_for_edge(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_owner_id_for_edge_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.EdgesArchive.internal_owner_id_for_edge)
}
inline void EdgesArchive::_internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_owner_id_for_edge_.Add(value);
}
inline void EdgesArchive::add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_internal_owner_id_for_edge(value);
  // @@protoc_insertion_point(field_add:TSCE.EdgesArchive.internal_owner_id_for_edge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::_internal_internal_owner_id_for_edge() const {
  return internal_owner_id_for_edge_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgesArchive::internal_owner_id_for_edge() const {
  // @@protoc_insertion_point(field_list:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::_internal_mutable_internal_owner_id_for_edge() {
  return &internal_owner_id_for_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgesArchive::mutable_internal_owner_id_for_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.EdgesArchive.internal_owner_id_for_edge)
  return _internal_mutable_internal_owner_id_for_edge();
}

// -------------------------------------------------------------------

// ExpandedEdgesArchive

// repeated uint32 edge_without_owner_rows = 1;
inline int ExpandedEdgesArchive::_internal_edge_without_owner_rows_size() const {
  return edge_without_owner_rows_.size();
}
inline int ExpandedEdgesArchive::edge_without_owner_rows_size() const {
  return _internal_edge_without_owner_rows_size();
}
inline void ExpandedEdgesArchive::clear_edge_without_owner_rows() {
  edge_without_owner_rows_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::_internal_edge_without_owner_rows(int index) const {
  return edge_without_owner_rows_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::edge_without_owner_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedEdgesArchive.edge_without_owner_rows)
  return _internal_edge_without_owner_rows(index);
}
inline void ExpandedEdgesArchive::set_edge_without_owner_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_without_owner_rows_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedEdgesArchive.edge_without_owner_rows)
}
inline void ExpandedEdgesArchive::_internal_add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_without_owner_rows_.Add(value);
}
inline void ExpandedEdgesArchive::add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_without_owner_rows(value);
  // @@protoc_insertion_point(field_add:TSCE.ExpandedEdgesArchive.edge_without_owner_rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::_internal_edge_without_owner_rows() const {
  return edge_without_owner_rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::edge_without_owner_rows() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedEdgesArchive.edge_without_owner_rows)
  return _internal_edge_without_owner_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::_internal_mutable_edge_without_owner_rows() {
  return &edge_without_owner_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::mutable_edge_without_owner_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedEdgesArchive.edge_without_owner_rows)
  return _internal_mutable_edge_without_owner_rows();
}

// repeated uint32 edge_without_owner_columns = 2;
inline int ExpandedEdgesArchive::_internal_edge_without_owner_columns_size() const {
  return edge_without_owner_columns_.size();
}
inline int ExpandedEdgesArchive::edge_without_owner_columns_size() const {
  return _internal_edge_without_owner_columns_size();
}
inline void ExpandedEdgesArchive::clear_edge_without_owner_columns() {
  edge_without_owner_columns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::_internal_edge_without_owner_columns(int index) const {
  return edge_without_owner_columns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::edge_without_owner_columns(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedEdgesArchive.edge_without_owner_columns)
  return _internal_edge_without_owner_columns(index);
}
inline void ExpandedEdgesArchive::set_edge_without_owner_columns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_without_owner_columns_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedEdgesArchive.edge_without_owner_columns)
}
inline void ExpandedEdgesArchive::_internal_add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_without_owner_columns_.Add(value);
}
inline void ExpandedEdgesArchive::add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_without_owner_columns(value);
  // @@protoc_insertion_point(field_add:TSCE.ExpandedEdgesArchive.edge_without_owner_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::_internal_edge_without_owner_columns() const {
  return edge_without_owner_columns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::edge_without_owner_columns() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedEdgesArchive.edge_without_owner_columns)
  return _internal_edge_without_owner_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::_internal_mutable_edge_without_owner_columns() {
  return &edge_without_owner_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::mutable_edge_without_owner_columns() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedEdgesArchive.edge_without_owner_columns)
  return _internal_mutable_edge_without_owner_columns();
}

// repeated uint32 edge_with_owner_rows = 3;
inline int ExpandedEdgesArchive::_internal_edge_with_owner_rows_size() const {
  return edge_with_owner_rows_.size();
}
inline int ExpandedEdgesArchive::edge_with_owner_rows_size() const {
  return _internal_edge_with_owner_rows_size();
}
inline void ExpandedEdgesArchive::clear_edge_with_owner_rows() {
  edge_with_owner_rows_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::_internal_edge_with_owner_rows(int index) const {
  return edge_with_owner_rows_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::edge_with_owner_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedEdgesArchive.edge_with_owner_rows)
  return _internal_edge_with_owner_rows(index);
}
inline void ExpandedEdgesArchive::set_edge_with_owner_rows(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_with_owner_rows_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedEdgesArchive.edge_with_owner_rows)
}
inline void ExpandedEdgesArchive::_internal_add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_with_owner_rows_.Add(value);
}
inline void ExpandedEdgesArchive::add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_with_owner_rows(value);
  // @@protoc_insertion_point(field_add:TSCE.ExpandedEdgesArchive.edge_with_owner_rows)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::_internal_edge_with_owner_rows() const {
  return edge_with_owner_rows_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::edge_with_owner_rows() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedEdgesArchive.edge_with_owner_rows)
  return _internal_edge_with_owner_rows();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::_internal_mutable_edge_with_owner_rows() {
  return &edge_with_owner_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::mutable_edge_with_owner_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedEdgesArchive.edge_with_owner_rows)
  return _internal_mutable_edge_with_owner_rows();
}

// repeated uint32 edge_with_owner_columns = 4;
inline int ExpandedEdgesArchive::_internal_edge_with_owner_columns_size() const {
  return edge_with_owner_columns_.size();
}
inline int ExpandedEdgesArchive::edge_with_owner_columns_size() const {
  return _internal_edge_with_owner_columns_size();
}
inline void ExpandedEdgesArchive::clear_edge_with_owner_columns() {
  edge_with_owner_columns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::_internal_edge_with_owner_columns(int index) const {
  return edge_with_owner_columns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::edge_with_owner_columns(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedEdgesArchive.edge_with_owner_columns)
  return _internal_edge_with_owner_columns(index);
}
inline void ExpandedEdgesArchive::set_edge_with_owner_columns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_with_owner_columns_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedEdgesArchive.edge_with_owner_columns)
}
inline void ExpandedEdgesArchive::_internal_add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_with_owner_columns_.Add(value);
}
inline void ExpandedEdgesArchive::add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_with_owner_columns(value);
  // @@protoc_insertion_point(field_add:TSCE.ExpandedEdgesArchive.edge_with_owner_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::_internal_edge_with_owner_columns() const {
  return edge_with_owner_columns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::edge_with_owner_columns() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedEdgesArchive.edge_with_owner_columns)
  return _internal_edge_with_owner_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::_internal_mutable_edge_with_owner_columns() {
  return &edge_with_owner_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::mutable_edge_with_owner_columns() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedEdgesArchive.edge_with_owner_columns)
  return _internal_mutable_edge_with_owner_columns();
}

// repeated uint32 internal_owner_id_for_edge = 5;
inline int ExpandedEdgesArchive::_internal_internal_owner_id_for_edge_size() const {
  return internal_owner_id_for_edge_.size();
}
inline int ExpandedEdgesArchive::internal_owner_id_for_edge_size() const {
  return _internal_internal_owner_id_for_edge_size();
}
inline void ExpandedEdgesArchive::clear_internal_owner_id_for_edge() {
  internal_owner_id_for_edge_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::_internal_internal_owner_id_for_edge(int index) const {
  return internal_owner_id_for_edge_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedEdgesArchive::internal_owner_id_for_edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedEdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge(index);
}
inline void ExpandedEdgesArchive::set_internal_owner_id_for_edge(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_owner_id_for_edge_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedEdgesArchive.internal_owner_id_for_edge)
}
inline void ExpandedEdgesArchive::_internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_owner_id_for_edge_.Add(value);
}
inline void ExpandedEdgesArchive::add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_internal_owner_id_for_edge(value);
  // @@protoc_insertion_point(field_add:TSCE.ExpandedEdgesArchive.internal_owner_id_for_edge)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::_internal_internal_owner_id_for_edge() const {
  return internal_owner_id_for_edge_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExpandedEdgesArchive::internal_owner_id_for_edge() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedEdgesArchive.internal_owner_id_for_edge)
  return _internal_internal_owner_id_for_edge();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::_internal_mutable_internal_owner_id_for_edge() {
  return &internal_owner_id_for_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExpandedEdgesArchive::mutable_internal_owner_id_for_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedEdgesArchive.internal_owner_id_for_edge)
  return _internal_mutable_internal_owner_id_for_edge();
}

// -------------------------------------------------------------------

// CellRecordArchive

// required uint32 column = 1;
inline bool CellRecordArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellRecordArchive::has_column() const {
  return _internal_has_column();
}
inline void CellRecordArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.column)
  return _internal_column();
}
inline void CellRecordArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void CellRecordArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.column)
}

// required uint32 row = 2;
inline bool CellRecordArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellRecordArchive::has_row() const {
  return _internal_has_row();
}
inline void CellRecordArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.row)
  return _internal_row();
}
inline void CellRecordArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void CellRecordArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.row)
}

// optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
inline bool CellRecordArchive::_internal_has_dirty_self_plus_precedents_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellRecordArchive::has_dirty_self_plus_precedents_count() const {
  return _internal_has_dirty_self_plus_precedents_count();
}
inline void CellRecordArchive::clear_dirty_self_plus_precedents_count() {
  dirty_self_plus_precedents_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellRecordArchive::_internal_dirty_self_plus_precedents_count() const {
  return dirty_self_plus_precedents_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellRecordArchive::dirty_self_plus_precedents_count() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.dirty_self_plus_precedents_count)
  return _internal_dirty_self_plus_precedents_count();
}
inline void CellRecordArchive::_internal_set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  dirty_self_plus_precedents_count_ = value;
}
inline void CellRecordArchive::set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dirty_self_plus_precedents_count(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.dirty_self_plus_precedents_count)
}

// optional bool is_in_a_cycle = 4 [default = false];
inline bool CellRecordArchive::_internal_has_is_in_a_cycle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellRecordArchive::has_is_in_a_cycle() const {
  return _internal_has_is_in_a_cycle();
}
inline void CellRecordArchive::clear_is_in_a_cycle() {
  is_in_a_cycle_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CellRecordArchive::_internal_is_in_a_cycle() const {
  return is_in_a_cycle_;
}
inline bool CellRecordArchive::is_in_a_cycle() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.is_in_a_cycle)
  return _internal_is_in_a_cycle();
}
inline void CellRecordArchive::_internal_set_is_in_a_cycle(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_in_a_cycle_ = value;
}
inline void CellRecordArchive::set_is_in_a_cycle(bool value) {
  _internal_set_is_in_a_cycle(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.is_in_a_cycle)
}

// repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
inline int CellRecordArchive::_internal_edge_size() const {
  return edge_.size();
}
inline int CellRecordArchive::edge_size() const {
  return _internal_edge_size();
}
inline void CellRecordArchive::clear_edge() {
  edge_.Clear();
}
inline ::TSCE::EdgeArchive* CellRecordArchive::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordArchive.edge)
  return edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >*
CellRecordArchive::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellRecordArchive.edge)
  return &edge_;
}
inline const ::TSCE::EdgeArchive& CellRecordArchive::_internal_edge(int index) const {
  return edge_.Get(index);
}
inline const ::TSCE::EdgeArchive& CellRecordArchive::edge(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.edge)
  return _internal_edge(index);
}
inline ::TSCE::EdgeArchive* CellRecordArchive::_internal_add_edge() {
  return edge_.Add();
}
inline ::TSCE::EdgeArchive* CellRecordArchive::add_edge() {
  // @@protoc_insertion_point(field_add:TSCE.CellRecordArchive.edge)
  return _internal_add_edge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::EdgeArchive >&
CellRecordArchive::edge() const {
  // @@protoc_insertion_point(field_list:TSCE.CellRecordArchive.edge)
  return edge_;
}

// optional bool contains_a_formula = 6 [default = true];
inline bool CellRecordArchive::_internal_has_contains_a_formula() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CellRecordArchive::has_contains_a_formula() const {
  return _internal_has_contains_a_formula();
}
inline void CellRecordArchive::clear_contains_a_formula() {
  contains_a_formula_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CellRecordArchive::_internal_contains_a_formula() const {
  return contains_a_formula_;
}
inline bool CellRecordArchive::contains_a_formula() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.contains_a_formula)
  return _internal_contains_a_formula();
}
inline void CellRecordArchive::_internal_set_contains_a_formula(bool value) {
  _has_bits_[0] |= 0x00000100u;
  contains_a_formula_ = value;
}
inline void CellRecordArchive::set_contains_a_formula(bool value) {
  _internal_set_contains_a_formula(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.contains_a_formula)
}

// optional bool has_calculated_precedents = 7 [default = false];
inline bool CellRecordArchive::_internal_has_has_calculated_precedents() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellRecordArchive::has_has_calculated_precedents() const {
  return _internal_has_has_calculated_precedents();
}
inline void CellRecordArchive::clear_has_calculated_precedents() {
  has_calculated_precedents_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CellRecordArchive::_internal_has_calculated_precedents() const {
  return has_calculated_precedents_;
}
inline bool CellRecordArchive::has_calculated_precedents() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.has_calculated_precedents)
  return _internal_has_calculated_precedents();
}
inline void CellRecordArchive::_internal_set_has_calculated_precedents(bool value) {
  _has_bits_[0] |= 0x00000020u;
  has_calculated_precedents_ = value;
}
inline void CellRecordArchive::set_has_calculated_precedents(bool value) {
  _internal_set_has_calculated_precedents(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.has_calculated_precedents)
}

// optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
inline bool CellRecordArchive::_internal_has_calculate_precedents_on_next_recalc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CellRecordArchive::has_calculate_precedents_on_next_recalc() const {
  return _internal_has_calculate_precedents_on_next_recalc();
}
inline void CellRecordArchive::clear_calculate_precedents_on_next_recalc() {
  calculate_precedents_on_next_recalc_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CellRecordArchive::_internal_calculate_precedents_on_next_recalc() const {
  return calculate_precedents_on_next_recalc_;
}
inline bool CellRecordArchive::calculate_precedents_on_next_recalc() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.calculate_precedents_on_next_recalc)
  return _internal_calculate_precedents_on_next_recalc();
}
inline void CellRecordArchive::_internal_set_calculate_precedents_on_next_recalc(bool value) {
  _has_bits_[0] |= 0x00000040u;
  calculate_precedents_on_next_recalc_ = value;
}
inline void CellRecordArchive::set_calculate_precedents_on_next_recalc(bool value) {
  _internal_set_calculate_precedents_on_next_recalc(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.calculate_precedents_on_next_recalc)
}

// optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
inline bool CellRecordArchive::_internal_has_translate_for_excel_import_on_next_recalc() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CellRecordArchive::has_translate_for_excel_import_on_next_recalc() const {
  return _internal_has_translate_for_excel_import_on_next_recalc();
}
inline void CellRecordArchive::clear_translate_for_excel_import_on_next_recalc() {
  translate_for_excel_import_on_next_recalc_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CellRecordArchive::_internal_translate_for_excel_import_on_next_recalc() const {
  return translate_for_excel_import_on_next_recalc_;
}
inline bool CellRecordArchive::translate_for_excel_import_on_next_recalc() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.translate_for_excel_import_on_next_recalc)
  return _internal_translate_for_excel_import_on_next_recalc();
}
inline void CellRecordArchive::_internal_set_translate_for_excel_import_on_next_recalc(bool value) {
  _has_bits_[0] |= 0x00000080u;
  translate_for_excel_import_on_next_recalc_ = value;
}
inline void CellRecordArchive::set_translate_for_excel_import_on_next_recalc(bool value) {
  _internal_set_translate_for_excel_import_on_next_recalc(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordArchive.translate_for_excel_import_on_next_recalc)
}

// optional .TSCE.EdgesArchive edges = 9;
inline bool CellRecordArchive::_internal_has_edges() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || edges_ != nullptr);
  return value;
}
inline bool CellRecordArchive::has_edges() const {
  return _internal_has_edges();
}
inline void CellRecordArchive::clear_edges() {
  if (edges_ != nullptr) edges_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::EdgesArchive& CellRecordArchive::_internal_edges() const {
  const ::TSCE::EdgesArchive* p = edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::EdgesArchive&>(
      ::TSCE::_EdgesArchive_default_instance_);
}
inline const ::TSCE::EdgesArchive& CellRecordArchive::edges() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordArchive.edges)
  return _internal_edges();
}
inline void CellRecordArchive::unsafe_arena_set_allocated_edges(
    ::TSCE::EdgesArchive* edges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  edges_ = edges;
  if (edges) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRecordArchive.edges)
}
inline ::TSCE::EdgesArchive* CellRecordArchive::release_edges() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::EdgesArchive* temp = edges_;
  edges_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::unsafe_arena_release_edges() {
  // @@protoc_insertion_point(field_release:TSCE.CellRecordArchive.edges)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::EdgesArchive* temp = edges_;
  edges_ = nullptr;
  return temp;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::_internal_mutable_edges() {
  _has_bits_[0] |= 0x00000001u;
  if (edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::EdgesArchive>(GetArena());
    edges_ = p;
  }
  return edges_;
}
inline ::TSCE::EdgesArchive* CellRecordArchive::mutable_edges() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordArchive.edges)
  return _internal_mutable_edges();
}
inline void CellRecordArchive::set_allocated_edges(::TSCE::EdgesArchive* edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete edges_;
  }
  if (edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edges);
    if (message_arena != submessage_arena) {
      edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edges, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  edges_ = edges;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRecordArchive.edges)
}

// -------------------------------------------------------------------

// CellDependenciesArchive

// repeated .TSCE.CellRecordArchive cell_record = 1;
inline int CellDependenciesArchive::_internal_cell_record_size() const {
  return cell_record_.size();
}
inline int CellDependenciesArchive::cell_record_size() const {
  return _internal_cell_record_size();
}
inline void CellDependenciesArchive::clear_cell_record() {
  cell_record_.Clear();
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::mutable_cell_record(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellDependenciesArchive.cell_record)
  return cell_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >*
CellDependenciesArchive::mutable_cell_record() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellDependenciesArchive.cell_record)
  return &cell_record_;
}
inline const ::TSCE::CellRecordArchive& CellDependenciesArchive::_internal_cell_record(int index) const {
  return cell_record_.Get(index);
}
inline const ::TSCE::CellRecordArchive& CellDependenciesArchive::cell_record(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesArchive.cell_record)
  return _internal_cell_record(index);
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::_internal_add_cell_record() {
  return cell_record_.Add();
}
inline ::TSCE::CellRecordArchive* CellDependenciesArchive::add_cell_record() {
  // @@protoc_insertion_point(field_add:TSCE.CellDependenciesArchive.cell_record)
  return _internal_add_cell_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordArchive >&
CellDependenciesArchive::cell_record() const {
  // @@protoc_insertion_point(field_list:TSCE.CellDependenciesArchive.cell_record)
  return cell_record_;
}

// optional uint32 num_dirty_cells = 2;
inline bool CellDependenciesArchive::_internal_has_num_dirty_cells() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellDependenciesArchive::has_num_dirty_cells() const {
  return _internal_has_num_dirty_cells();
}
inline void CellDependenciesArchive::clear_num_dirty_cells() {
  num_dirty_cells_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellDependenciesArchive::_internal_num_dirty_cells() const {
  return num_dirty_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellDependenciesArchive::num_dirty_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesArchive.num_dirty_cells)
  return _internal_num_dirty_cells();
}
inline void CellDependenciesArchive::_internal_set_num_dirty_cells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_dirty_cells_ = value;
}
inline void CellDependenciesArchive::set_num_dirty_cells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_dirty_cells(value);
  // @@protoc_insertion_point(field_set:TSCE.CellDependenciesArchive.num_dirty_cells)
}

// -------------------------------------------------------------------

// CellRecordExpandedArchive

// required uint32 column = 1;
inline bool CellRecordExpandedArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellRecordExpandedArchive::has_column() const {
  return _internal_has_column();
}
inline void CellRecordExpandedArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordExpandedArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordExpandedArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.column)
  return _internal_column();
}
inline void CellRecordExpandedArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void CellRecordExpandedArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordExpandedArchive.column)
}

// required uint32 row = 2;
inline bool CellRecordExpandedArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellRecordExpandedArchive::has_row() const {
  return _internal_has_row();
}
inline void CellRecordExpandedArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordExpandedArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordExpandedArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.row)
  return _internal_row();
}
inline void CellRecordExpandedArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void CellRecordExpandedArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordExpandedArchive.row)
}

// optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
inline bool CellRecordExpandedArchive::_internal_has_dirty_self_plus_precedents_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellRecordExpandedArchive::has_dirty_self_plus_precedents_count() const {
  return _internal_has_dirty_self_plus_precedents_count();
}
inline void CellRecordExpandedArchive::clear_dirty_self_plus_precedents_count() {
  dirty_self_plus_precedents_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellRecordExpandedArchive::_internal_dirty_self_plus_precedents_count() const {
  return dirty_self_plus_precedents_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellRecordExpandedArchive::dirty_self_plus_precedents_count() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.dirty_self_plus_precedents_count)
  return _internal_dirty_self_plus_precedents_count();
}
inline void CellRecordExpandedArchive::_internal_set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  dirty_self_plus_precedents_count_ = value;
}
inline void CellRecordExpandedArchive::set_dirty_self_plus_precedents_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dirty_self_plus_precedents_count(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordExpandedArchive.dirty_self_plus_precedents_count)
}

// optional bool is_in_a_cycle = 4 [default = false];
inline bool CellRecordExpandedArchive::_internal_has_is_in_a_cycle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellRecordExpandedArchive::has_is_in_a_cycle() const {
  return _internal_has_is_in_a_cycle();
}
inline void CellRecordExpandedArchive::clear_is_in_a_cycle() {
  is_in_a_cycle_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CellRecordExpandedArchive::_internal_is_in_a_cycle() const {
  return is_in_a_cycle_;
}
inline bool CellRecordExpandedArchive::is_in_a_cycle() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.is_in_a_cycle)
  return _internal_is_in_a_cycle();
}
inline void CellRecordExpandedArchive::_internal_set_is_in_a_cycle(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_in_a_cycle_ = value;
}
inline void CellRecordExpandedArchive::set_is_in_a_cycle(bool value) {
  _internal_set_is_in_a_cycle(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordExpandedArchive.is_in_a_cycle)
}

// optional bool has_calculated_precedents = 5 [default = false];
inline bool CellRecordExpandedArchive::_internal_has_has_calculated_precedents() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellRecordExpandedArchive::has_has_calculated_precedents() const {
  return _internal_has_has_calculated_precedents();
}
inline void CellRecordExpandedArchive::clear_has_calculated_precedents() {
  has_calculated_precedents_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CellRecordExpandedArchive::_internal_has_calculated_precedents() const {
  return has_calculated_precedents_;
}
inline bool CellRecordExpandedArchive::has_calculated_precedents() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.has_calculated_precedents)
  return _internal_has_calculated_precedents();
}
inline void CellRecordExpandedArchive::_internal_set_has_calculated_precedents(bool value) {
  _has_bits_[0] |= 0x00000020u;
  has_calculated_precedents_ = value;
}
inline void CellRecordExpandedArchive::set_has_calculated_precedents(bool value) {
  _internal_set_has_calculated_precedents(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordExpandedArchive.has_calculated_precedents)
}

// optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
inline bool CellRecordExpandedArchive::_internal_has_expanded_edges() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || expanded_edges_ != nullptr);
  return value;
}
inline bool CellRecordExpandedArchive::has_expanded_edges() const {
  return _internal_has_expanded_edges();
}
inline void CellRecordExpandedArchive::clear_expanded_edges() {
  if (expanded_edges_ != nullptr) expanded_edges_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ExpandedEdgesArchive& CellRecordExpandedArchive::_internal_expanded_edges() const {
  const ::TSCE::ExpandedEdgesArchive* p = expanded_edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ExpandedEdgesArchive&>(
      ::TSCE::_ExpandedEdgesArchive_default_instance_);
}
inline const ::TSCE::ExpandedEdgesArchive& CellRecordExpandedArchive::expanded_edges() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordExpandedArchive.expanded_edges)
  return _internal_expanded_edges();
}
inline void CellRecordExpandedArchive::unsafe_arena_set_allocated_expanded_edges(
    ::TSCE::ExpandedEdgesArchive* expanded_edges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expanded_edges_);
  }
  expanded_edges_ = expanded_edges;
  if (expanded_edges) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellRecordExpandedArchive.expanded_edges)
}
inline ::TSCE::ExpandedEdgesArchive* CellRecordExpandedArchive::release_expanded_edges() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ExpandedEdgesArchive* temp = expanded_edges_;
  expanded_edges_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ExpandedEdgesArchive* CellRecordExpandedArchive::unsafe_arena_release_expanded_edges() {
  // @@protoc_insertion_point(field_release:TSCE.CellRecordExpandedArchive.expanded_edges)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ExpandedEdgesArchive* temp = expanded_edges_;
  expanded_edges_ = nullptr;
  return temp;
}
inline ::TSCE::ExpandedEdgesArchive* CellRecordExpandedArchive::_internal_mutable_expanded_edges() {
  _has_bits_[0] |= 0x00000001u;
  if (expanded_edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ExpandedEdgesArchive>(GetArena());
    expanded_edges_ = p;
  }
  return expanded_edges_;
}
inline ::TSCE::ExpandedEdgesArchive* CellRecordExpandedArchive::mutable_expanded_edges() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordExpandedArchive.expanded_edges)
  return _internal_mutable_expanded_edges();
}
inline void CellRecordExpandedArchive::set_allocated_expanded_edges(::TSCE::ExpandedEdgesArchive* expanded_edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expanded_edges_;
  }
  if (expanded_edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expanded_edges);
    if (message_arena != submessage_arena) {
      expanded_edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expanded_edges, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  expanded_edges_ = expanded_edges;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellRecordExpandedArchive.expanded_edges)
}

// -------------------------------------------------------------------

// CellDependenciesExpandedArchive

// repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
inline int CellDependenciesExpandedArchive::_internal_cell_record_size() const {
  return cell_record_.size();
}
inline int CellDependenciesExpandedArchive::cell_record_size() const {
  return _internal_cell_record_size();
}
inline void CellDependenciesExpandedArchive::clear_cell_record() {
  cell_record_.Clear();
}
inline ::TSCE::CellRecordExpandedArchive* CellDependenciesExpandedArchive::mutable_cell_record(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellDependenciesExpandedArchive.cell_record)
  return cell_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >*
CellDependenciesExpandedArchive::mutable_cell_record() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellDependenciesExpandedArchive.cell_record)
  return &cell_record_;
}
inline const ::TSCE::CellRecordExpandedArchive& CellDependenciesExpandedArchive::_internal_cell_record(int index) const {
  return cell_record_.Get(index);
}
inline const ::TSCE::CellRecordExpandedArchive& CellDependenciesExpandedArchive::cell_record(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesExpandedArchive.cell_record)
  return _internal_cell_record(index);
}
inline ::TSCE::CellRecordExpandedArchive* CellDependenciesExpandedArchive::_internal_add_cell_record() {
  return cell_record_.Add();
}
inline ::TSCE::CellRecordExpandedArchive* CellDependenciesExpandedArchive::add_cell_record() {
  // @@protoc_insertion_point(field_add:TSCE.CellDependenciesExpandedArchive.cell_record)
  return _internal_add_cell_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >&
CellDependenciesExpandedArchive::cell_record() const {
  // @@protoc_insertion_point(field_list:TSCE.CellDependenciesExpandedArchive.cell_record)
  return cell_record_;
}

// -------------------------------------------------------------------

// CellRecordTileArchive

// required uint32 internal_owner_id = 1;
inline bool CellRecordTileArchive::_internal_has_internal_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellRecordTileArchive::has_internal_owner_id() const {
  return _internal_has_internal_owner_id();
}
inline void CellRecordTileArchive::clear_internal_owner_id() {
  internal_owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::_internal_internal_owner_id() const {
  return internal_owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::internal_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordTileArchive.internal_owner_id)
  return _internal_internal_owner_id();
}
inline void CellRecordTileArchive::_internal_set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  internal_owner_id_ = value;
}
inline void CellRecordTileArchive::set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_internal_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordTileArchive.internal_owner_id)
}

// required uint32 tile_column_begin = 2;
inline bool CellRecordTileArchive::_internal_has_tile_column_begin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellRecordTileArchive::has_tile_column_begin() const {
  return _internal_has_tile_column_begin();
}
inline void CellRecordTileArchive::clear_tile_column_begin() {
  tile_column_begin_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::_internal_tile_column_begin() const {
  return tile_column_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::tile_column_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordTileArchive.tile_column_begin)
  return _internal_tile_column_begin();
}
inline void CellRecordTileArchive::_internal_set_tile_column_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tile_column_begin_ = value;
}
inline void CellRecordTileArchive::set_tile_column_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tile_column_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordTileArchive.tile_column_begin)
}

// required uint32 tile_row_begin = 3;
inline bool CellRecordTileArchive::_internal_has_tile_row_begin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellRecordTileArchive::has_tile_row_begin() const {
  return _internal_has_tile_row_begin();
}
inline void CellRecordTileArchive::clear_tile_row_begin() {
  tile_row_begin_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::_internal_tile_row_begin() const {
  return tile_row_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellRecordTileArchive::tile_row_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordTileArchive.tile_row_begin)
  return _internal_tile_row_begin();
}
inline void CellRecordTileArchive::_internal_set_tile_row_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tile_row_begin_ = value;
}
inline void CellRecordTileArchive::set_tile_row_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tile_row_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.CellRecordTileArchive.tile_row_begin)
}

// repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
inline int CellRecordTileArchive::_internal_cell_records_size() const {
  return cell_records_.size();
}
inline int CellRecordTileArchive::cell_records_size() const {
  return _internal_cell_records_size();
}
inline void CellRecordTileArchive::clear_cell_records() {
  cell_records_.Clear();
}
inline ::TSCE::CellRecordExpandedArchive* CellRecordTileArchive::mutable_cell_records(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellRecordTileArchive.cell_records)
  return cell_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >*
CellRecordTileArchive::mutable_cell_records() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellRecordTileArchive.cell_records)
  return &cell_records_;
}
inline const ::TSCE::CellRecordExpandedArchive& CellRecordTileArchive::_internal_cell_records(int index) const {
  return cell_records_.Get(index);
}
inline const ::TSCE::CellRecordExpandedArchive& CellRecordTileArchive::cell_records(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellRecordTileArchive.cell_records)
  return _internal_cell_records(index);
}
inline ::TSCE::CellRecordExpandedArchive* CellRecordTileArchive::_internal_add_cell_records() {
  return cell_records_.Add();
}
inline ::TSCE::CellRecordExpandedArchive* CellRecordTileArchive::add_cell_records() {
  // @@protoc_insertion_point(field_add:TSCE.CellRecordTileArchive.cell_records)
  return _internal_add_cell_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellRecordExpandedArchive >&
CellRecordTileArchive::cell_records() const {
  // @@protoc_insertion_point(field_list:TSCE.CellRecordTileArchive.cell_records)
  return cell_records_;
}

// -------------------------------------------------------------------

// CellDependenciesTiledArchive

// repeated .TSP.Reference cell_record_tiles = 1;
inline int CellDependenciesTiledArchive::_internal_cell_record_tiles_size() const {
  return cell_record_tiles_.size();
}
inline int CellDependenciesTiledArchive::cell_record_tiles_size() const {
  return _internal_cell_record_tiles_size();
}
inline ::TSP::Reference* CellDependenciesTiledArchive::mutable_cell_record_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellDependenciesTiledArchive.cell_record_tiles)
  return cell_record_tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CellDependenciesTiledArchive::mutable_cell_record_tiles() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellDependenciesTiledArchive.cell_record_tiles)
  return &cell_record_tiles_;
}
inline const ::TSP::Reference& CellDependenciesTiledArchive::_internal_cell_record_tiles(int index) const {
  return cell_record_tiles_.Get(index);
}
inline const ::TSP::Reference& CellDependenciesTiledArchive::cell_record_tiles(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellDependenciesTiledArchive.cell_record_tiles)
  return _internal_cell_record_tiles(index);
}
inline ::TSP::Reference* CellDependenciesTiledArchive::_internal_add_cell_record_tiles() {
  return cell_record_tiles_.Add();
}
inline ::TSP::Reference* CellDependenciesTiledArchive::add_cell_record_tiles() {
  // @@protoc_insertion_point(field_add:TSCE.CellDependenciesTiledArchive.cell_record_tiles)
  return _internal_add_cell_record_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CellDependenciesTiledArchive::cell_record_tiles() const {
  // @@protoc_insertion_point(field_list:TSCE.CellDependenciesTiledArchive.cell_record_tiles)
  return cell_record_tiles_;
}

// -------------------------------------------------------------------

// VolatileDependenciesArchive

// repeated uint32 volatile_time_cell_column = 1;
inline int VolatileDependenciesArchive::_internal_volatile_time_cell_column_size() const {
  return volatile_time_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_time_cell_column_size() const {
  return _internal_volatile_time_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_time_cell_column() {
  volatile_time_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_time_cell_column(int index) const {
  return volatile_time_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_time_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_volatile_time_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_time_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_time_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_time_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_time_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_time_cell_column() const {
  return volatile_time_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_time_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_volatile_time_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_time_cell_column() {
  return &volatile_time_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_time_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_column)
  return _internal_mutable_volatile_time_cell_column();
}

// repeated uint32 volatile_time_cell_row = 2;
inline int VolatileDependenciesArchive::_internal_volatile_time_cell_row_size() const {
  return volatile_time_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_time_cell_row_size() const {
  return _internal_volatile_time_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_time_cell_row() {
  volatile_time_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_time_cell_row(int index) const {
  return volatile_time_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_time_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_volatile_time_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_time_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_time_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_time_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_time_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_time_cell_row() const {
  return volatile_time_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_time_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_volatile_time_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_time_cell_row() {
  return &volatile_time_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_time_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_time_cell_row)
  return _internal_mutable_volatile_time_cell_row();
}

// repeated uint32 volatile_random_cell_column = 3;
inline int VolatileDependenciesArchive::_internal_volatile_random_cell_column_size() const {
  return volatile_random_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_random_cell_column_size() const {
  return _internal_volatile_random_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_random_cell_column() {
  volatile_random_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_random_cell_column(int index) const {
  return volatile_random_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_random_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_volatile_random_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_random_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_random_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_random_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_random_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_random_cell_column() const {
  return volatile_random_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_random_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_volatile_random_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_random_cell_column() {
  return &volatile_random_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_random_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_column)
  return _internal_mutable_volatile_random_cell_column();
}

// repeated uint32 volatile_random_cell_row = 4;
inline int VolatileDependenciesArchive::_internal_volatile_random_cell_row_size() const {
  return volatile_random_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_random_cell_row_size() const {
  return _internal_volatile_random_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_random_cell_row() {
  volatile_random_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_random_cell_row(int index) const {
  return volatile_random_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_random_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_volatile_random_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_random_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_random_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_random_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_random_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_random_cell_row() const {
  return volatile_random_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_random_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_volatile_random_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_random_cell_row() {
  return &volatile_random_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_random_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_random_cell_row)
  return _internal_mutable_volatile_random_cell_row();
}

// repeated uint32 volatile_locale_cell_column = 15;
inline int VolatileDependenciesArchive::_internal_volatile_locale_cell_column_size() const {
  return volatile_locale_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_locale_cell_column_size() const {
  return _internal_volatile_locale_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_locale_cell_column() {
  volatile_locale_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_locale_cell_column(int index) const {
  return volatile_locale_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_locale_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_volatile_locale_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_locale_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_locale_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_locale_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_locale_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_locale_cell_column() const {
  return volatile_locale_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_locale_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_volatile_locale_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_locale_cell_column() {
  return &volatile_locale_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_locale_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_column)
  return _internal_mutable_volatile_locale_cell_column();
}

// repeated uint32 volatile_locale_cell_row = 16;
inline int VolatileDependenciesArchive::_internal_volatile_locale_cell_row_size() const {
  return volatile_locale_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_locale_cell_row_size() const {
  return _internal_volatile_locale_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_locale_cell_row() {
  volatile_locale_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_locale_cell_row(int index) const {
  return volatile_locale_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_locale_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_volatile_locale_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_locale_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_locale_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_locale_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_locale_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_locale_cell_row() const {
  return volatile_locale_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_locale_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_volatile_locale_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_locale_cell_row() {
  return &volatile_locale_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_locale_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_locale_cell_row)
  return _internal_mutable_volatile_locale_cell_row();
}

// repeated uint32 volatile_location_cell_column = 5;
inline int VolatileDependenciesArchive::_internal_volatile_location_cell_column_size() const {
  return volatile_location_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_location_cell_column_size() const {
  return _internal_volatile_location_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_location_cell_column() {
  volatile_location_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_location_cell_column(int index) const {
  return volatile_location_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_location_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_volatile_location_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_location_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_location_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_location_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_location_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_location_cell_column() const {
  return volatile_location_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_location_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_volatile_location_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_location_cell_column() {
  return &volatile_location_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_location_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_column)
  return _internal_mutable_volatile_location_cell_column();
}

// repeated uint32 volatile_location_cell_row = 6;
inline int VolatileDependenciesArchive::_internal_volatile_location_cell_row_size() const {
  return volatile_location_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_location_cell_row_size() const {
  return _internal_volatile_location_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_location_cell_row() {
  volatile_location_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_location_cell_row(int index) const {
  return volatile_location_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_location_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_volatile_location_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_location_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_location_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_location_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_location_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_location_cell_row() const {
  return volatile_location_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_location_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_volatile_location_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_location_cell_row() {
  return &volatile_location_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_location_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_location_cell_row)
  return _internal_mutable_volatile_location_cell_row();
}

// repeated uint32 volatile_compass_cell_column = 7;
inline int VolatileDependenciesArchive::_internal_volatile_compass_cell_column_size() const {
  return volatile_compass_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_compass_cell_column_size() const {
  return _internal_volatile_compass_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_compass_cell_column() {
  volatile_compass_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_compass_cell_column(int index) const {
  return volatile_compass_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_compass_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_volatile_compass_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_compass_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_compass_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_compass_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_compass_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_compass_cell_column() const {
  return volatile_compass_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_compass_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_volatile_compass_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_compass_cell_column() {
  return &volatile_compass_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_compass_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_column)
  return _internal_mutable_volatile_compass_cell_column();
}

// repeated uint32 volatile_compass_cell_row = 8;
inline int VolatileDependenciesArchive::_internal_volatile_compass_cell_row_size() const {
  return volatile_compass_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_compass_cell_row_size() const {
  return _internal_volatile_compass_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_compass_cell_row() {
  volatile_compass_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_compass_cell_row(int index) const {
  return volatile_compass_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_compass_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_volatile_compass_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_compass_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_compass_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_compass_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_compass_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_compass_cell_row() const {
  return volatile_compass_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_compass_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_volatile_compass_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_compass_cell_row() {
  return &volatile_compass_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_compass_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_compass_cell_row)
  return _internal_mutable_volatile_compass_cell_row();
}

// repeated uint32 volatile_remote_data_cell_column = 19;
inline int VolatileDependenciesArchive::_internal_volatile_remote_data_cell_column_size() const {
  return volatile_remote_data_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_remote_data_cell_column_size() const {
  return _internal_volatile_remote_data_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_remote_data_cell_column() {
  volatile_remote_data_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_remote_data_cell_column(int index) const {
  return volatile_remote_data_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_remote_data_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_column)
  return _internal_volatile_remote_data_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_remote_data_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_remote_data_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_remote_data_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_remote_data_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_remote_data_cell_column() const {
  return volatile_remote_data_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_remote_data_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_column)
  return _internal_volatile_remote_data_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_remote_data_cell_column() {
  return &volatile_remote_data_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_remote_data_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_column)
  return _internal_mutable_volatile_remote_data_cell_column();
}

// repeated uint32 volatile_remote_data_cell_row = 20;
inline int VolatileDependenciesArchive::_internal_volatile_remote_data_cell_row_size() const {
  return volatile_remote_data_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_remote_data_cell_row_size() const {
  return _internal_volatile_remote_data_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_remote_data_cell_row() {
  volatile_remote_data_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_remote_data_cell_row(int index) const {
  return volatile_remote_data_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_remote_data_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_row)
  return _internal_volatile_remote_data_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_remote_data_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_remote_data_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_remote_data_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_remote_data_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_remote_data_cell_row() const {
  return volatile_remote_data_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_remote_data_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_row)
  return _internal_volatile_remote_data_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_remote_data_cell_row() {
  return &volatile_remote_data_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_remote_data_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_remote_data_cell_row)
  return _internal_mutable_volatile_remote_data_cell_row();
}

// repeated uint32 volatile_sheet_table_name_cell_column = 17;
inline int VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_column_size() const {
  return volatile_sheet_table_name_cell_column_.size();
}
inline int VolatileDependenciesArchive::volatile_sheet_table_name_cell_column_size() const {
  return _internal_volatile_sheet_table_name_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_volatile_sheet_table_name_cell_column() {
  volatile_sheet_table_name_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_column(int index) const {
  return volatile_sheet_table_name_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_sheet_table_name_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_column)
  return _internal_volatile_sheet_table_name_cell_column(index);
}
inline void VolatileDependenciesArchive::set_volatile_sheet_table_name_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_sheet_table_name_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_sheet_table_name_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_sheet_table_name_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_column() const {
  return volatile_sheet_table_name_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_sheet_table_name_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_column)
  return _internal_volatile_sheet_table_name_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_sheet_table_name_cell_column() {
  return &volatile_sheet_table_name_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_sheet_table_name_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_column)
  return _internal_mutable_volatile_sheet_table_name_cell_column();
}

// repeated uint32 volatile_sheet_table_name_cell_row = 18;
inline int VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_row_size() const {
  return volatile_sheet_table_name_cell_row_.size();
}
inline int VolatileDependenciesArchive::volatile_sheet_table_name_cell_row_size() const {
  return _internal_volatile_sheet_table_name_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_volatile_sheet_table_name_cell_row() {
  volatile_sheet_table_name_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_row(int index) const {
  return volatile_sheet_table_name_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::volatile_sheet_table_name_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_row)
  return _internal_volatile_sheet_table_name_cell_row(index);
}
inline void VolatileDependenciesArchive::set_volatile_sheet_table_name_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_sheet_table_name_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  volatile_sheet_table_name_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_volatile_sheet_table_name_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_volatile_sheet_table_name_cell_row() const {
  return volatile_sheet_table_name_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::volatile_sheet_table_name_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_row)
  return _internal_volatile_sheet_table_name_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_volatile_sheet_table_name_cell_row() {
  return &volatile_sheet_table_name_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_volatile_sheet_table_name_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_sheet_table_name_cell_row)
  return _internal_mutable_volatile_sheet_table_name_cell_row();
}

// repeated uint32 calculated_dependency_cell_column = 9;
inline int VolatileDependenciesArchive::_internal_calculated_dependency_cell_column_size() const {
  return calculated_dependency_cell_column_.size();
}
inline int VolatileDependenciesArchive::calculated_dependency_cell_column_size() const {
  return _internal_calculated_dependency_cell_column_size();
}
inline void VolatileDependenciesArchive::clear_calculated_dependency_cell_column() {
  calculated_dependency_cell_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_calculated_dependency_cell_column(int index) const {
  return calculated_dependency_cell_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::calculated_dependency_cell_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_calculated_dependency_cell_column(index);
}
inline void VolatileDependenciesArchive::set_calculated_dependency_cell_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  calculated_dependency_cell_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
}
inline void VolatileDependenciesArchive::_internal_add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  calculated_dependency_cell_column_.Add(value);
}
inline void VolatileDependenciesArchive::add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_calculated_dependency_cell_column(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_calculated_dependency_cell_column() const {
  return calculated_dependency_cell_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::calculated_dependency_cell_column() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_calculated_dependency_cell_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_calculated_dependency_cell_column() {
  return &calculated_dependency_cell_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_calculated_dependency_cell_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_column)
  return _internal_mutable_calculated_dependency_cell_column();
}

// repeated uint32 calculated_dependency_cell_row = 10;
inline int VolatileDependenciesArchive::_internal_calculated_dependency_cell_row_size() const {
  return calculated_dependency_cell_row_.size();
}
inline int VolatileDependenciesArchive::calculated_dependency_cell_row_size() const {
  return _internal_calculated_dependency_cell_row_size();
}
inline void VolatileDependenciesArchive::clear_calculated_dependency_cell_row() {
  calculated_dependency_cell_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::_internal_calculated_dependency_cell_row(int index) const {
  return calculated_dependency_cell_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VolatileDependenciesArchive::calculated_dependency_cell_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_calculated_dependency_cell_row(index);
}
inline void VolatileDependenciesArchive::set_calculated_dependency_cell_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  calculated_dependency_cell_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
}
inline void VolatileDependenciesArchive::_internal_add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  calculated_dependency_cell_row_.Add(value);
}
inline void VolatileDependenciesArchive::add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_calculated_dependency_cell_row(value);
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::_internal_calculated_dependency_cell_row() const {
  return calculated_dependency_cell_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VolatileDependenciesArchive::calculated_dependency_cell_row() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_calculated_dependency_cell_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::_internal_mutable_calculated_dependency_cell_row() {
  return &calculated_dependency_cell_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VolatileDependenciesArchive::mutable_calculated_dependency_cell_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.calculated_dependency_cell_row)
  return _internal_mutable_calculated_dependency_cell_row();
}

// repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
inline int VolatileDependenciesArchive::_internal_volatile_geometry_cell_reference_size() const {
  return volatile_geometry_cell_reference_.size();
}
inline int VolatileDependenciesArchive::volatile_geometry_cell_reference_size() const {
  return _internal_volatile_geometry_cell_reference_size();
}
inline void VolatileDependenciesArchive::clear_volatile_geometry_cell_reference() {
  volatile_geometry_cell_reference_.Clear();
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::mutable_volatile_geometry_cell_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return volatile_geometry_cell_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
VolatileDependenciesArchive::mutable_volatile_geometry_cell_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return &volatile_geometry_cell_reference_;
}
inline const ::TSCE::CellReferenceArchive& VolatileDependenciesArchive::_internal_volatile_geometry_cell_reference(int index) const {
  return volatile_geometry_cell_reference_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& VolatileDependenciesArchive::volatile_geometry_cell_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _internal_volatile_geometry_cell_reference(index);
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::_internal_add_volatile_geometry_cell_reference() {
  return volatile_geometry_cell_reference_.Add();
}
inline ::TSCE::CellReferenceArchive* VolatileDependenciesArchive::add_volatile_geometry_cell_reference() {
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return _internal_add_volatile_geometry_cell_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
VolatileDependenciesArchive::volatile_geometry_cell_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference)
  return volatile_geometry_cell_reference_;
}

// repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
inline int VolatileDependenciesArchive::_internal_volatile_geometry_cell_size() const {
  return volatile_geometry_cell_.size();
}
inline int VolatileDependenciesArchive::volatile_geometry_cell_size() const {
  return _internal_volatile_geometry_cell_size();
}
inline void VolatileDependenciesArchive::clear_volatile_geometry_cell() {
  volatile_geometry_cell_.Clear();
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::mutable_volatile_geometry_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return volatile_geometry_cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
VolatileDependenciesArchive::mutable_volatile_geometry_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return &volatile_geometry_cell_;
}
inline const ::TSCE::CellCoordinateArchive& VolatileDependenciesArchive::_internal_volatile_geometry_cell(int index) const {
  return volatile_geometry_cell_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& VolatileDependenciesArchive::volatile_geometry_cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _internal_volatile_geometry_cell(index);
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::_internal_add_volatile_geometry_cell() {
  return volatile_geometry_cell_.Add();
}
inline ::TSCE::CellCoordinateArchive* VolatileDependenciesArchive::add_volatile_geometry_cell() {
  // @@protoc_insertion_point(field_add:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return _internal_add_volatile_geometry_cell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
VolatileDependenciesArchive::volatile_geometry_cell() const {
  // @@protoc_insertion_point(field_list:TSCE.VolatileDependenciesArchive.volatile_geometry_cell)
  return volatile_geometry_cell_;
}

// -------------------------------------------------------------------

// VolatileDependenciesExpandedArchive

// optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_time_cells() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || volatile_time_cells_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_time_cells() const {
  return _internal_has_volatile_time_cells();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_time_cells() {
  if (volatile_time_cells_ != nullptr) volatile_time_cells_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_time_cells() const {
  const ::TSCE::CellCoordSetArchive* p = volatile_time_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::volatile_time_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells)
  return _internal_volatile_time_cells();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_time_cells(
    ::TSCE::CellCoordSetArchive* volatile_time_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_time_cells_);
  }
  volatile_time_cells_ = volatile_time_cells;
  if (volatile_time_cells) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells)
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::release_volatile_time_cells() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordSetArchive* temp = volatile_time_cells_;
  volatile_time_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_time_cells() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordSetArchive* temp = volatile_time_cells_;
  volatile_time_cells_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_time_cells() {
  _has_bits_[0] |= 0x00000001u;
  if (volatile_time_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    volatile_time_cells_ = p;
  }
  return volatile_time_cells_;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_time_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells)
  return _internal_mutable_volatile_time_cells();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_time_cells(::TSCE::CellCoordSetArchive* volatile_time_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_time_cells_;
  }
  if (volatile_time_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_time_cells);
    if (message_arena != submessage_arena) {
      volatile_time_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_time_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  volatile_time_cells_ = volatile_time_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells)
}

// optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_random_cells() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || volatile_random_cells_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_random_cells() const {
  return _internal_has_volatile_random_cells();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_random_cells() {
  if (volatile_random_cells_ != nullptr) volatile_random_cells_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_random_cells() const {
  const ::TSCE::CellCoordSetArchive* p = volatile_random_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::volatile_random_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells)
  return _internal_volatile_random_cells();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_random_cells(
    ::TSCE::CellCoordSetArchive* volatile_random_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_random_cells_);
  }
  volatile_random_cells_ = volatile_random_cells;
  if (volatile_random_cells) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells)
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::release_volatile_random_cells() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = volatile_random_cells_;
  volatile_random_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_random_cells() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = volatile_random_cells_;
  volatile_random_cells_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_random_cells() {
  _has_bits_[0] |= 0x00000002u;
  if (volatile_random_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    volatile_random_cells_ = p;
  }
  return volatile_random_cells_;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_random_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells)
  return _internal_mutable_volatile_random_cells();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_random_cells(::TSCE::CellCoordSetArchive* volatile_random_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_random_cells_;
  }
  if (volatile_random_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_random_cells);
    if (message_arena != submessage_arena) {
      volatile_random_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_random_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  volatile_random_cells_ = volatile_random_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells)
}

// optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_locale_cells() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || volatile_locale_cells_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_locale_cells() const {
  return _internal_has_volatile_locale_cells();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_locale_cells() {
  if (volatile_locale_cells_ != nullptr) volatile_locale_cells_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_locale_cells() const {
  const ::TSCE::CellCoordSetArchive* p = volatile_locale_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::volatile_locale_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells)
  return _internal_volatile_locale_cells();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_locale_cells(
    ::TSCE::CellCoordSetArchive* volatile_locale_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_locale_cells_);
  }
  volatile_locale_cells_ = volatile_locale_cells;
  if (volatile_locale_cells) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells)
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::release_volatile_locale_cells() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordSetArchive* temp = volatile_locale_cells_;
  volatile_locale_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_locale_cells() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordSetArchive* temp = volatile_locale_cells_;
  volatile_locale_cells_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_locale_cells() {
  _has_bits_[0] |= 0x00000004u;
  if (volatile_locale_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    volatile_locale_cells_ = p;
  }
  return volatile_locale_cells_;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_locale_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells)
  return _internal_mutable_volatile_locale_cells();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_locale_cells(::TSCE::CellCoordSetArchive* volatile_locale_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_locale_cells_;
  }
  if (volatile_locale_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_locale_cells);
    if (message_arena != submessage_arena) {
      volatile_locale_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_locale_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  volatile_locale_cells_ = volatile_locale_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells)
}

// optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_sheet_table_name_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || volatile_sheet_table_name_cells_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_sheet_table_name_cells() const {
  return _internal_has_volatile_sheet_table_name_cells();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_sheet_table_name_cells() {
  if (volatile_sheet_table_name_cells_ != nullptr) volatile_sheet_table_name_cells_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_sheet_table_name_cells() const {
  const ::TSCE::CellCoordSetArchive* p = volatile_sheet_table_name_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::volatile_sheet_table_name_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells)
  return _internal_volatile_sheet_table_name_cells();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_sheet_table_name_cells(
    ::TSCE::CellCoordSetArchive* volatile_sheet_table_name_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_sheet_table_name_cells_);
  }
  volatile_sheet_table_name_cells_ = volatile_sheet_table_name_cells;
  if (volatile_sheet_table_name_cells) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells)
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::release_volatile_sheet_table_name_cells() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordSetArchive* temp = volatile_sheet_table_name_cells_;
  volatile_sheet_table_name_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_sheet_table_name_cells() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordSetArchive* temp = volatile_sheet_table_name_cells_;
  volatile_sheet_table_name_cells_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_sheet_table_name_cells() {
  _has_bits_[0] |= 0x00000008u;
  if (volatile_sheet_table_name_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    volatile_sheet_table_name_cells_ = p;
  }
  return volatile_sheet_table_name_cells_;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_sheet_table_name_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells)
  return _internal_mutable_volatile_sheet_table_name_cells();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_sheet_table_name_cells(::TSCE::CellCoordSetArchive* volatile_sheet_table_name_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_sheet_table_name_cells_;
  }
  if (volatile_sheet_table_name_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_sheet_table_name_cells);
    if (message_arena != submessage_arena) {
      volatile_sheet_table_name_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_sheet_table_name_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  volatile_sheet_table_name_cells_ = volatile_sheet_table_name_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells)
}

// optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_remote_data_cells() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || volatile_remote_data_cells_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_remote_data_cells() const {
  return _internal_has_volatile_remote_data_cells();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_remote_data_cells() {
  if (volatile_remote_data_cells_ != nullptr) volatile_remote_data_cells_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_remote_data_cells() const {
  const ::TSCE::CellCoordSetArchive* p = volatile_remote_data_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& VolatileDependenciesExpandedArchive::volatile_remote_data_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells)
  return _internal_volatile_remote_data_cells();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_remote_data_cells(
    ::TSCE::CellCoordSetArchive* volatile_remote_data_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_remote_data_cells_);
  }
  volatile_remote_data_cells_ = volatile_remote_data_cells;
  if (volatile_remote_data_cells) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells)
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::release_volatile_remote_data_cells() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordSetArchive* temp = volatile_remote_data_cells_;
  volatile_remote_data_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_remote_data_cells() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordSetArchive* temp = volatile_remote_data_cells_;
  volatile_remote_data_cells_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_remote_data_cells() {
  _has_bits_[0] |= 0x00000010u;
  if (volatile_remote_data_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    volatile_remote_data_cells_ = p;
  }
  return volatile_remote_data_cells_;
}
inline ::TSCE::CellCoordSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_remote_data_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells)
  return _internal_mutable_volatile_remote_data_cells();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_remote_data_cells(::TSCE::CellCoordSetArchive* volatile_remote_data_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_remote_data_cells_;
  }
  if (volatile_remote_data_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_remote_data_cells);
    if (message_arena != submessage_arena) {
      volatile_remote_data_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_remote_data_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  volatile_remote_data_cells_ = volatile_remote_data_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells)
}

// optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
inline bool VolatileDependenciesExpandedArchive::_internal_has_volatile_geometry_cell_refs() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || volatile_geometry_cell_refs_ != nullptr);
  return value;
}
inline bool VolatileDependenciesExpandedArchive::has_volatile_geometry_cell_refs() const {
  return _internal_has_volatile_geometry_cell_refs();
}
inline void VolatileDependenciesExpandedArchive::clear_volatile_geometry_cell_refs() {
  if (volatile_geometry_cell_refs_ != nullptr) volatile_geometry_cell_refs_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::InternalCellRefSetArchive& VolatileDependenciesExpandedArchive::_internal_volatile_geometry_cell_refs() const {
  const ::TSCE::InternalCellRefSetArchive* p = volatile_geometry_cell_refs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& VolatileDependenciesExpandedArchive::volatile_geometry_cell_refs() const {
  // @@protoc_insertion_point(field_get:TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs)
  return _internal_volatile_geometry_cell_refs();
}
inline void VolatileDependenciesExpandedArchive::unsafe_arena_set_allocated_volatile_geometry_cell_refs(
    ::TSCE::InternalCellRefSetArchive* volatile_geometry_cell_refs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_geometry_cell_refs_);
  }
  volatile_geometry_cell_refs_ = volatile_geometry_cell_refs;
  if (volatile_geometry_cell_refs) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs)
}
inline ::TSCE::InternalCellRefSetArchive* VolatileDependenciesExpandedArchive::release_volatile_geometry_cell_refs() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::InternalCellRefSetArchive* temp = volatile_geometry_cell_refs_;
  volatile_geometry_cell_refs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* VolatileDependenciesExpandedArchive::unsafe_arena_release_volatile_geometry_cell_refs() {
  // @@protoc_insertion_point(field_release:TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::InternalCellRefSetArchive* temp = volatile_geometry_cell_refs_;
  volatile_geometry_cell_refs_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* VolatileDependenciesExpandedArchive::_internal_mutable_volatile_geometry_cell_refs() {
  _has_bits_[0] |= 0x00000020u;
  if (volatile_geometry_cell_refs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    volatile_geometry_cell_refs_ = p;
  }
  return volatile_geometry_cell_refs_;
}
inline ::TSCE::InternalCellRefSetArchive* VolatileDependenciesExpandedArchive::mutable_volatile_geometry_cell_refs() {
  // @@protoc_insertion_point(field_mutable:TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs)
  return _internal_mutable_volatile_geometry_cell_refs();
}
inline void VolatileDependenciesExpandedArchive::set_allocated_volatile_geometry_cell_refs(::TSCE::InternalCellRefSetArchive* volatile_geometry_cell_refs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_geometry_cell_refs_;
  }
  if (volatile_geometry_cell_refs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_geometry_cell_refs);
    if (message_arena != submessage_arena) {
      volatile_geometry_cell_refs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_geometry_cell_refs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  volatile_geometry_cell_refs_ = volatile_geometry_cell_refs;
  // @@protoc_insertion_point(field_set_allocated:TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs)
}

// -------------------------------------------------------------------

// RTreeInternalNodeContentsArchive

// repeated uint32 min = 1;
inline int RTreeInternalNodeContentsArchive::_internal_min_size() const {
  return min_.size();
}
inline int RTreeInternalNodeContentsArchive::min_size() const {
  return _internal_min_size();
}
inline void RTreeInternalNodeContentsArchive::clear_min() {
  min_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeInternalNodeContentsArchive::_internal_min(int index) const {
  return min_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeInternalNodeContentsArchive::min(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_min(index);
}
inline void RTreeInternalNodeContentsArchive::set_min(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  min_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeInternalNodeContentsArchive.min)
}
inline void RTreeInternalNodeContentsArchive::_internal_add_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  min_.Add(value);
}
inline void RTreeInternalNodeContentsArchive::add_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_min(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeInternalNodeContentsArchive.min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeInternalNodeContentsArchive::_internal_min() const {
  return min_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeInternalNodeContentsArchive::min() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_min();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeInternalNodeContentsArchive::_internal_mutable_min() {
  return &min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeInternalNodeContentsArchive::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeInternalNodeContentsArchive.min)
  return _internal_mutable_min();
}

// repeated uint32 max = 2;
inline int RTreeInternalNodeContentsArchive::_internal_max_size() const {
  return max_.size();
}
inline int RTreeInternalNodeContentsArchive::max_size() const {
  return _internal_max_size();
}
inline void RTreeInternalNodeContentsArchive::clear_max() {
  max_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeInternalNodeContentsArchive::_internal_max(int index) const {
  return max_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeInternalNodeContentsArchive::max(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_max(index);
}
inline void RTreeInternalNodeContentsArchive::set_max(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeInternalNodeContentsArchive.max)
}
inline void RTreeInternalNodeContentsArchive::_internal_add_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_.Add(value);
}
inline void RTreeInternalNodeContentsArchive::add_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_max(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeInternalNodeContentsArchive.max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeInternalNodeContentsArchive::_internal_max() const {
  return max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeInternalNodeContentsArchive::max() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeInternalNodeContentsArchive::_internal_mutable_max() {
  return &max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeInternalNodeContentsArchive::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeInternalNodeContentsArchive.max)
  return _internal_mutable_max();
}

// required .TSCE.RTreeNodeArchive child = 3;
inline bool RTreeInternalNodeContentsArchive::_internal_has_child() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || child_ != nullptr);
  return value;
}
inline bool RTreeInternalNodeContentsArchive::has_child() const {
  return _internal_has_child();
}
inline void RTreeInternalNodeContentsArchive::clear_child() {
  if (child_ != nullptr) child_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RTreeNodeArchive& RTreeInternalNodeContentsArchive::_internal_child() const {
  const ::TSCE::RTreeNodeArchive* p = child_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RTreeNodeArchive&>(
      ::TSCE::_RTreeNodeArchive_default_instance_);
}
inline const ::TSCE::RTreeNodeArchive& RTreeInternalNodeContentsArchive::child() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeInternalNodeContentsArchive.child)
  return _internal_child();
}
inline void RTreeInternalNodeContentsArchive::unsafe_arena_set_allocated_child(
    ::TSCE::RTreeNodeArchive* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeInternalNodeContentsArchive.child)
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::release_child() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = child_;
  child_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeInternalNodeContentsArchive.child)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::_internal_mutable_child() {
  _has_bits_[0] |= 0x00000001u;
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RTreeNodeArchive>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::TSCE::RTreeNodeArchive* RTreeInternalNodeContentsArchive::mutable_child() {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeInternalNodeContentsArchive.child)
  return _internal_mutable_child();
}
inline void RTreeInternalNodeContentsArchive::set_allocated_child(::TSCE::RTreeNodeArchive* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeInternalNodeContentsArchive.child)
}

// -------------------------------------------------------------------

// RTreeLeafNodeContentsArchive

// repeated uint32 min = 1;
inline int RTreeLeafNodeContentsArchive::_internal_min_size() const {
  return min_.size();
}
inline int RTreeLeafNodeContentsArchive::min_size() const {
  return _internal_min_size();
}
inline void RTreeLeafNodeContentsArchive::clear_min() {
  min_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeLeafNodeContentsArchive::_internal_min(int index) const {
  return min_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeLeafNodeContentsArchive::min(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_min(index);
}
inline void RTreeLeafNodeContentsArchive::set_min(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  min_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeLeafNodeContentsArchive.min)
}
inline void RTreeLeafNodeContentsArchive::_internal_add_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  min_.Add(value);
}
inline void RTreeLeafNodeContentsArchive::add_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_min(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeLeafNodeContentsArchive.min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeLeafNodeContentsArchive::_internal_min() const {
  return min_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeLeafNodeContentsArchive::min() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_min();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeLeafNodeContentsArchive::_internal_mutable_min() {
  return &min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeLeafNodeContentsArchive::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeLeafNodeContentsArchive.min)
  return _internal_mutable_min();
}

// repeated uint32 max = 2;
inline int RTreeLeafNodeContentsArchive::_internal_max_size() const {
  return max_.size();
}
inline int RTreeLeafNodeContentsArchive::max_size() const {
  return _internal_max_size();
}
inline void RTreeLeafNodeContentsArchive::clear_max() {
  max_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeLeafNodeContentsArchive::_internal_max(int index) const {
  return max_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeLeafNodeContentsArchive::max(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_max(index);
}
inline void RTreeLeafNodeContentsArchive::set_max(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeLeafNodeContentsArchive.max)
}
inline void RTreeLeafNodeContentsArchive::_internal_add_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_.Add(value);
}
inline void RTreeLeafNodeContentsArchive::add_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_max(value);
  // @@protoc_insertion_point(field_add:TSCE.RTreeLeafNodeContentsArchive.max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeLeafNodeContentsArchive::_internal_max() const {
  return max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RTreeLeafNodeContentsArchive::max() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeLeafNodeContentsArchive::_internal_mutable_max() {
  return &max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RTreeLeafNodeContentsArchive::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeLeafNodeContentsArchive.max)
  return _internal_mutable_max();
}

// required .TSCE.CellReferenceArchive cell_reference = 3;
inline bool RTreeLeafNodeContentsArchive::_internal_has_cell_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_reference_ != nullptr);
  return value;
}
inline bool RTreeLeafNodeContentsArchive::has_cell_reference() const {
  return _internal_has_cell_reference();
}
inline void RTreeLeafNodeContentsArchive::clear_cell_reference() {
  if (cell_reference_ != nullptr) cell_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellReferenceArchive& RTreeLeafNodeContentsArchive::_internal_cell_reference() const {
  const ::TSCE::CellReferenceArchive* p = cell_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& RTreeLeafNodeContentsArchive::cell_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  return _internal_cell_reference();
}
inline void RTreeLeafNodeContentsArchive::unsafe_arena_set_allocated_cell_reference(
    ::TSCE::CellReferenceArchive* cell_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_reference_);
  }
  cell_reference_ = cell_reference;
  if (cell_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::release_cell_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_reference_;
  cell_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::unsafe_arena_release_cell_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_reference_;
  cell_reference_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::_internal_mutable_cell_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArena());
    cell_reference_ = p;
  }
  return cell_reference_;
}
inline ::TSCE::CellReferenceArchive* RTreeLeafNodeContentsArchive::mutable_cell_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
  return _internal_mutable_cell_reference();
}
inline void RTreeLeafNodeContentsArchive::set_allocated_cell_reference(::TSCE::CellReferenceArchive* cell_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_reference_;
  }
  if (cell_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_reference);
    if (message_arena != submessage_arena) {
      cell_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_reference_ = cell_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeLeafNodeContentsArchive.cell_reference)
}

// -------------------------------------------------------------------

// RTreeNodeArchive

// required uint32 level = 1;
inline bool RTreeNodeArchive::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RTreeNodeArchive::has_level() const {
  return _internal_has_level();
}
inline void RTreeNodeArchive::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeNodeArchive::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeNodeArchive::level() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.level)
  return _internal_level();
}
inline void RTreeNodeArchive::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void RTreeNodeArchive::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeNodeArchive.level)
}

// required uint32 count = 2;
inline bool RTreeNodeArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTreeNodeArchive::has_count() const {
  return _internal_has_count();
}
inline void RTreeNodeArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeNodeArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeNodeArchive::count() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.count)
  return _internal_count();
}
inline void RTreeNodeArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void RTreeNodeArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeNodeArchive.count)
}

// repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
inline int RTreeNodeArchive::_internal_internal_node_contents_size() const {
  return internal_node_contents_.size();
}
inline int RTreeNodeArchive::internal_node_contents_size() const {
  return _internal_internal_node_contents_size();
}
inline void RTreeNodeArchive::clear_internal_node_contents() {
  internal_node_contents_.Clear();
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::mutable_internal_node_contents(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeNodeArchive.internal_node_contents)
  return internal_node_contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >*
RTreeNodeArchive::mutable_internal_node_contents() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeNodeArchive.internal_node_contents)
  return &internal_node_contents_;
}
inline const ::TSCE::RTreeInternalNodeContentsArchive& RTreeNodeArchive::_internal_internal_node_contents(int index) const {
  return internal_node_contents_.Get(index);
}
inline const ::TSCE::RTreeInternalNodeContentsArchive& RTreeNodeArchive::internal_node_contents(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.internal_node_contents)
  return _internal_internal_node_contents(index);
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::_internal_add_internal_node_contents() {
  return internal_node_contents_.Add();
}
inline ::TSCE::RTreeInternalNodeContentsArchive* RTreeNodeArchive::add_internal_node_contents() {
  // @@protoc_insertion_point(field_add:TSCE.RTreeNodeArchive.internal_node_contents)
  return _internal_add_internal_node_contents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeInternalNodeContentsArchive >&
RTreeNodeArchive::internal_node_contents() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeNodeArchive.internal_node_contents)
  return internal_node_contents_;
}

// repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
inline int RTreeNodeArchive::_internal_leaf_node_contents_size() const {
  return leaf_node_contents_.size();
}
inline int RTreeNodeArchive::leaf_node_contents_size() const {
  return _internal_leaf_node_contents_size();
}
inline void RTreeNodeArchive::clear_leaf_node_contents() {
  leaf_node_contents_.Clear();
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::mutable_leaf_node_contents(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeNodeArchive.leaf_node_contents)
  return leaf_node_contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >*
RTreeNodeArchive::mutable_leaf_node_contents() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RTreeNodeArchive.leaf_node_contents)
  return &leaf_node_contents_;
}
inline const ::TSCE::RTreeLeafNodeContentsArchive& RTreeNodeArchive::_internal_leaf_node_contents(int index) const {
  return leaf_node_contents_.Get(index);
}
inline const ::TSCE::RTreeLeafNodeContentsArchive& RTreeNodeArchive::leaf_node_contents(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _internal_leaf_node_contents(index);
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::_internal_add_leaf_node_contents() {
  return leaf_node_contents_.Add();
}
inline ::TSCE::RTreeLeafNodeContentsArchive* RTreeNodeArchive::add_leaf_node_contents() {
  // @@protoc_insertion_point(field_add:TSCE.RTreeNodeArchive.leaf_node_contents)
  return _internal_add_leaf_node_contents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RTreeLeafNodeContentsArchive >&
RTreeNodeArchive::leaf_node_contents() const {
  // @@protoc_insertion_point(field_list:TSCE.RTreeNodeArchive.leaf_node_contents)
  return leaf_node_contents_;
}

// -------------------------------------------------------------------

// RTreeArchive

// required uint32 data_file_id = 1;
inline bool RTreeArchive::_internal_has_data_file_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_file_id() const {
  return _internal_has_data_file_id();
}
inline void RTreeArchive::clear_data_file_id() {
  data_file_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_file_id() const {
  return data_file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_file_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_file_id)
  return _internal_data_file_id();
}
inline void RTreeArchive::_internal_set_data_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  data_file_id_ = value;
}
inline void RTreeArchive::set_data_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_file_id(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_file_id)
}

// required uint32 data_size = 2;
inline bool RTreeArchive::_internal_has_data_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_size() const {
  return _internal_has_data_size();
}
inline void RTreeArchive::clear_data_size() {
  data_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_size)
  return _internal_data_size();
}
inline void RTreeArchive::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_size_ = value;
}
inline void RTreeArchive::set_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_size)
}

// required uint32 data_num_dims = 3;
inline bool RTreeArchive::_internal_has_data_num_dims() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_num_dims() const {
  return _internal_has_data_num_dims();
}
inline void RTreeArchive::clear_data_num_dims() {
  data_num_dims_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_num_dims() const {
  return data_num_dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_num_dims() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_num_dims)
  return _internal_data_num_dims();
}
inline void RTreeArchive::_internal_set_data_num_dims(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  data_num_dims_ = value;
}
inline void RTreeArchive::set_data_num_dims(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_num_dims(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_num_dims)
}

// required uint32 data_elem_size = 4;
inline bool RTreeArchive::_internal_has_data_elem_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_elem_size() const {
  return _internal_has_data_elem_size();
}
inline void RTreeArchive::clear_data_elem_size() {
  data_elem_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_elem_size() const {
  return data_elem_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_elem_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_elem_size)
  return _internal_data_elem_size();
}
inline void RTreeArchive::_internal_set_data_elem_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  data_elem_size_ = value;
}
inline void RTreeArchive::set_data_elem_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_elem_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_elem_size)
}

// required uint32 data_elem_real_size = 5;
inline bool RTreeArchive::_internal_has_data_elem_real_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_elem_real_size() const {
  return _internal_has_data_elem_real_size();
}
inline void RTreeArchive::clear_data_elem_real_size() {
  data_elem_real_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_elem_real_size() const {
  return data_elem_real_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_elem_real_size() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_elem_real_size)
  return _internal_data_elem_real_size();
}
inline void RTreeArchive::_internal_set_data_elem_real_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  data_elem_real_size_ = value;
}
inline void RTreeArchive::set_data_elem_real_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_elem_real_size(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_elem_real_size)
}

// required uint32 data_max_nodes = 6;
inline bool RTreeArchive::_internal_has_data_max_nodes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_max_nodes() const {
  return _internal_has_data_max_nodes();
}
inline void RTreeArchive::clear_data_max_nodes() {
  data_max_nodes_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_max_nodes() const {
  return data_max_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_max_nodes() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_max_nodes)
  return _internal_data_max_nodes();
}
inline void RTreeArchive::_internal_set_data_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  data_max_nodes_ = value;
}
inline void RTreeArchive::set_data_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_max_nodes(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_max_nodes)
}

// required uint32 data_min_nodes = 7;
inline bool RTreeArchive::_internal_has_data_min_nodes() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RTreeArchive::has_data_min_nodes() const {
  return _internal_has_data_min_nodes();
}
inline void RTreeArchive::clear_data_min_nodes() {
  data_min_nodes_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::_internal_data_min_nodes() const {
  return data_min_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RTreeArchive::data_min_nodes() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.data_min_nodes)
  return _internal_data_min_nodes();
}
inline void RTreeArchive::_internal_set_data_min_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  data_min_nodes_ = value;
}
inline void RTreeArchive::set_data_min_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_min_nodes(value);
  // @@protoc_insertion_point(field_set:TSCE.RTreeArchive.data_min_nodes)
}

// required .TSCE.RTreeNodeArchive root = 8;
inline bool RTreeArchive::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool RTreeArchive::has_root() const {
  return _internal_has_root();
}
inline void RTreeArchive::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RTreeNodeArchive& RTreeArchive::_internal_root() const {
  const ::TSCE::RTreeNodeArchive* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RTreeNodeArchive&>(
      ::TSCE::_RTreeNodeArchive_default_instance_);
}
inline const ::TSCE::RTreeNodeArchive& RTreeArchive::root() const {
  // @@protoc_insertion_point(field_get:TSCE.RTreeArchive.root)
  return _internal_root();
}
inline void RTreeArchive::unsafe_arena_set_allocated_root(
    ::TSCE::RTreeNodeArchive* root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RTreeArchive.root)
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::release_root() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = root_;
  root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:TSCE.RTreeArchive.root)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RTreeNodeArchive* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RTreeNodeArchive>(GetArena());
    root_ = p;
  }
  return root_;
}
inline ::TSCE::RTreeNodeArchive* RTreeArchive::mutable_root() {
  // @@protoc_insertion_point(field_mutable:TSCE.RTreeArchive.root)
  return _internal_mutable_root();
}
inline void RTreeArchive::set_allocated_root(::TSCE::RTreeNodeArchive* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RTreeArchive.root)
}

// -------------------------------------------------------------------

// RangeBackDependencyArchive

// required uint32 cell_coord_row = 1;
inline bool RangeBackDependencyArchive::_internal_has_cell_coord_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeBackDependencyArchive::has_cell_coord_row() const {
  return _internal_has_cell_coord_row();
}
inline void RangeBackDependencyArchive::clear_cell_coord_row() {
  cell_coord_row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeBackDependencyArchive::_internal_cell_coord_row() const {
  return cell_coord_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeBackDependencyArchive::cell_coord_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.cell_coord_row)
  return _internal_cell_coord_row();
}
inline void RangeBackDependencyArchive::_internal_set_cell_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cell_coord_row_ = value;
}
inline void RangeBackDependencyArchive::set_cell_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_coord_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeBackDependencyArchive.cell_coord_row)
}

// required uint32 cell_coord_column = 2;
inline bool RangeBackDependencyArchive::_internal_has_cell_coord_column() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeBackDependencyArchive::has_cell_coord_column() const {
  return _internal_has_cell_coord_column();
}
inline void RangeBackDependencyArchive::clear_cell_coord_column() {
  cell_coord_column_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeBackDependencyArchive::_internal_cell_coord_column() const {
  return cell_coord_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeBackDependencyArchive::cell_coord_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.cell_coord_column)
  return _internal_cell_coord_column();
}
inline void RangeBackDependencyArchive::_internal_set_cell_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  cell_coord_column_ = value;
}
inline void RangeBackDependencyArchive::set_cell_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_coord_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeBackDependencyArchive.cell_coord_column)
}

// optional .TSCE.RangeReferenceArchive range_reference = 3;
inline bool RangeBackDependencyArchive::_internal_has_range_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_reference_ != nullptr);
  return value;
}
inline bool RangeBackDependencyArchive::has_range_reference() const {
  return _internal_has_range_reference();
}
inline void RangeBackDependencyArchive::clear_range_reference() {
  if (range_reference_ != nullptr) range_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeReferenceArchive& RangeBackDependencyArchive::_internal_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& RangeBackDependencyArchive::range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.range_reference)
  return _internal_range_reference();
}
inline void RangeBackDependencyArchive::unsafe_arena_set_allocated_range_reference(
    ::TSCE::RangeReferenceArchive* range_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_reference_);
  }
  range_reference_ = range_reference;
  if (range_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeBackDependencyArchive.range_reference)
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::release_range_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = range_reference_;
  range_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::unsafe_arena_release_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeBackDependencyArchive.range_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = range_reference_;
  range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::_internal_mutable_range_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArena());
    range_reference_ = p;
  }
  return range_reference_;
}
inline ::TSCE::RangeReferenceArchive* RangeBackDependencyArchive::mutable_range_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeBackDependencyArchive.range_reference)
  return _internal_mutable_range_reference();
}
inline void RangeBackDependencyArchive::set_allocated_range_reference(::TSCE::RangeReferenceArchive* range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_reference_;
  }
  if (range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range_reference);
    if (message_arena != submessage_arena) {
      range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_reference_ = range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeBackDependencyArchive.range_reference)
}

// optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
inline bool RangeBackDependencyArchive::_internal_has_internal_range_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || internal_range_reference_ != nullptr);
  return value;
}
inline bool RangeBackDependencyArchive::has_internal_range_reference() const {
  return _internal_has_internal_range_reference();
}
inline void RangeBackDependencyArchive::clear_internal_range_reference() {
  if (internal_range_reference_ != nullptr) internal_range_reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalRangeReferenceArchive& RangeBackDependencyArchive::_internal_internal_range_reference() const {
  const ::TSCE::InternalRangeReferenceArchive* p = internal_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalRangeReferenceArchive&>(
      ::TSCE::_InternalRangeReferenceArchive_default_instance_);
}
inline const ::TSCE::InternalRangeReferenceArchive& RangeBackDependencyArchive::internal_range_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeBackDependencyArchive.internal_range_reference)
  return _internal_internal_range_reference();
}
inline void RangeBackDependencyArchive::unsafe_arena_set_allocated_internal_range_reference(
    ::TSCE::InternalRangeReferenceArchive* internal_range_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_range_reference_);
  }
  internal_range_reference_ = internal_range_reference;
  if (internal_range_reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangeBackDependencyArchive.internal_range_reference)
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::release_internal_range_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalRangeReferenceArchive* temp = internal_range_reference_;
  internal_range_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::unsafe_arena_release_internal_range_reference() {
  // @@protoc_insertion_point(field_release:TSCE.RangeBackDependencyArchive.internal_range_reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalRangeReferenceArchive* temp = internal_range_reference_;
  internal_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::_internal_mutable_internal_range_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (internal_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalRangeReferenceArchive>(GetArena());
    internal_range_reference_ = p;
  }
  return internal_range_reference_;
}
inline ::TSCE::InternalRangeReferenceArchive* RangeBackDependencyArchive::mutable_internal_range_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeBackDependencyArchive.internal_range_reference)
  return _internal_mutable_internal_range_reference();
}
inline void RangeBackDependencyArchive::set_allocated_internal_range_reference(::TSCE::InternalRangeReferenceArchive* internal_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete internal_range_reference_;
  }
  if (internal_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(internal_range_reference);
    if (message_arena != submessage_arena) {
      internal_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_range_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  internal_range_reference_ = internal_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangeBackDependencyArchive.internal_range_reference)
}

// -------------------------------------------------------------------

// RangeDependenciesArchive

// repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
inline int RangeDependenciesArchive::_internal_back_dependency_size() const {
  return back_dependency_.size();
}
inline int RangeDependenciesArchive::back_dependency_size() const {
  return _internal_back_dependency_size();
}
inline void RangeDependenciesArchive::clear_back_dependency() {
  back_dependency_.Clear();
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::mutable_back_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeDependenciesArchive.back_dependency)
  return back_dependency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >*
RangeDependenciesArchive::mutable_back_dependency() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RangeDependenciesArchive.back_dependency)
  return &back_dependency_;
}
inline const ::TSCE::RangeBackDependencyArchive& RangeDependenciesArchive::_internal_back_dependency(int index) const {
  return back_dependency_.Get(index);
}
inline const ::TSCE::RangeBackDependencyArchive& RangeDependenciesArchive::back_dependency(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RangeDependenciesArchive.back_dependency)
  return _internal_back_dependency(index);
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::_internal_add_back_dependency() {
  return back_dependency_.Add();
}
inline ::TSCE::RangeBackDependencyArchive* RangeDependenciesArchive::add_back_dependency() {
  // @@protoc_insertion_point(field_add:TSCE.RangeDependenciesArchive.back_dependency)
  return _internal_add_back_dependency();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangeBackDependencyArchive >&
RangeDependenciesArchive::back_dependency() const {
  // @@protoc_insertion_point(field_list:TSCE.RangeDependenciesArchive.back_dependency)
  return back_dependency_;
}

// -------------------------------------------------------------------

// RangePrecedentsTileArchive_FromToRangeArchive

// required .TSCE.CellCoordinateArchive from_coord = 1;
inline bool RangePrecedentsTileArchive_FromToRangeArchive::_internal_has_from_coord() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || from_coord_ != nullptr);
  return value;
}
inline bool RangePrecedentsTileArchive_FromToRangeArchive::has_from_coord() const {
  return _internal_has_from_coord();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::clear_from_coord() {
  if (from_coord_ != nullptr) from_coord_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& RangePrecedentsTileArchive_FromToRangeArchive::_internal_from_coord() const {
  const ::TSCE::CellCoordinateArchive* p = from_coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& RangePrecedentsTileArchive_FromToRangeArchive::from_coord() const {
  // @@protoc_insertion_point(field_get:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord)
  return _internal_from_coord();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::unsafe_arena_set_allocated_from_coord(
    ::TSCE::CellCoordinateArchive* from_coord) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_coord_);
  }
  from_coord_ = from_coord;
  if (from_coord) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord)
}
inline ::TSCE::CellCoordinateArchive* RangePrecedentsTileArchive_FromToRangeArchive::release_from_coord() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = from_coord_;
  from_coord_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* RangePrecedentsTileArchive_FromToRangeArchive::unsafe_arena_release_from_coord() {
  // @@protoc_insertion_point(field_release:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = from_coord_;
  from_coord_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* RangePrecedentsTileArchive_FromToRangeArchive::_internal_mutable_from_coord() {
  _has_bits_[0] |= 0x00000001u;
  if (from_coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    from_coord_ = p;
  }
  return from_coord_;
}
inline ::TSCE::CellCoordinateArchive* RangePrecedentsTileArchive_FromToRangeArchive::mutable_from_coord() {
  // @@protoc_insertion_point(field_mutable:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord)
  return _internal_mutable_from_coord();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::set_allocated_from_coord(::TSCE::CellCoordinateArchive* from_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_coord_;
  }
  if (from_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from_coord);
    if (message_arena != submessage_arena) {
      from_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_coord, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_coord_ = from_coord;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord)
}

// required .TSCE.CellRectArchive refers_to_rect = 2;
inline bool RangePrecedentsTileArchive_FromToRangeArchive::_internal_has_refers_to_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || refers_to_rect_ != nullptr);
  return value;
}
inline bool RangePrecedentsTileArchive_FromToRangeArchive::has_refers_to_rect() const {
  return _internal_has_refers_to_rect();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::clear_refers_to_rect() {
  if (refers_to_rect_ != nullptr) refers_to_rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellRectArchive& RangePrecedentsTileArchive_FromToRangeArchive::_internal_refers_to_rect() const {
  const ::TSCE::CellRectArchive* p = refers_to_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellRectArchive&>(
      ::TSCE::_CellRectArchive_default_instance_);
}
inline const ::TSCE::CellRectArchive& RangePrecedentsTileArchive_FromToRangeArchive::refers_to_rect() const {
  // @@protoc_insertion_point(field_get:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect)
  return _internal_refers_to_rect();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::unsafe_arena_set_allocated_refers_to_rect(
    ::TSCE::CellRectArchive* refers_to_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refers_to_rect_);
  }
  refers_to_rect_ = refers_to_rect;
  if (refers_to_rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect)
}
inline ::TSCE::CellRectArchive* RangePrecedentsTileArchive_FromToRangeArchive::release_refers_to_rect() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellRectArchive* temp = refers_to_rect_;
  refers_to_rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellRectArchive* RangePrecedentsTileArchive_FromToRangeArchive::unsafe_arena_release_refers_to_rect() {
  // @@protoc_insertion_point(field_release:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellRectArchive* temp = refers_to_rect_;
  refers_to_rect_ = nullptr;
  return temp;
}
inline ::TSCE::CellRectArchive* RangePrecedentsTileArchive_FromToRangeArchive::_internal_mutable_refers_to_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (refers_to_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellRectArchive>(GetArena());
    refers_to_rect_ = p;
  }
  return refers_to_rect_;
}
inline ::TSCE::CellRectArchive* RangePrecedentsTileArchive_FromToRangeArchive::mutable_refers_to_rect() {
  // @@protoc_insertion_point(field_mutable:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect)
  return _internal_mutable_refers_to_rect();
}
inline void RangePrecedentsTileArchive_FromToRangeArchive::set_allocated_refers_to_rect(::TSCE::CellRectArchive* refers_to_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete refers_to_rect_;
  }
  if (refers_to_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(refers_to_rect);
    if (message_arena != submessage_arena) {
      refers_to_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refers_to_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  refers_to_rect_ = refers_to_rect;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect)
}

// -------------------------------------------------------------------

// RangePrecedentsTileArchive

// required uint32 to_owner_id = 1;
inline bool RangePrecedentsTileArchive::_internal_has_to_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RangePrecedentsTileArchive::has_to_owner_id() const {
  return _internal_has_to_owner_id();
}
inline void RangePrecedentsTileArchive::clear_to_owner_id() {
  to_owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangePrecedentsTileArchive::_internal_to_owner_id() const {
  return to_owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangePrecedentsTileArchive::to_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.RangePrecedentsTileArchive.to_owner_id)
  return _internal_to_owner_id();
}
inline void RangePrecedentsTileArchive::_internal_set_to_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  to_owner_id_ = value;
}
inline void RangePrecedentsTileArchive::set_to_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.RangePrecedentsTileArchive.to_owner_id)
}

// repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
inline int RangePrecedentsTileArchive::_internal_from_to_range_size() const {
  return from_to_range_.size();
}
inline int RangePrecedentsTileArchive::from_to_range_size() const {
  return _internal_from_to_range_size();
}
inline void RangePrecedentsTileArchive::clear_from_to_range() {
  from_to_range_.Clear();
}
inline ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* RangePrecedentsTileArchive::mutable_from_to_range(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RangePrecedentsTileArchive.from_to_range)
  return from_to_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >*
RangePrecedentsTileArchive::mutable_from_to_range() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RangePrecedentsTileArchive.from_to_range)
  return &from_to_range_;
}
inline const ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive& RangePrecedentsTileArchive::_internal_from_to_range(int index) const {
  return from_to_range_.Get(index);
}
inline const ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive& RangePrecedentsTileArchive::from_to_range(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RangePrecedentsTileArchive.from_to_range)
  return _internal_from_to_range(index);
}
inline ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* RangePrecedentsTileArchive::_internal_add_from_to_range() {
  return from_to_range_.Add();
}
inline ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* RangePrecedentsTileArchive::add_from_to_range() {
  // @@protoc_insertion_point(field_add:TSCE.RangePrecedentsTileArchive.from_to_range)
  return _internal_add_from_to_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >&
RangePrecedentsTileArchive::from_to_range() const {
  // @@protoc_insertion_point(field_list:TSCE.RangePrecedentsTileArchive.from_to_range)
  return from_to_range_;
}

// -------------------------------------------------------------------

// RangeDependenciesTiledArchive

// repeated .TSP.Reference range_precedents_tile = 1;
inline int RangeDependenciesTiledArchive::_internal_range_precedents_tile_size() const {
  return range_precedents_tile_.size();
}
inline int RangeDependenciesTiledArchive::range_precedents_tile_size() const {
  return _internal_range_precedents_tile_size();
}
inline ::TSP::Reference* RangeDependenciesTiledArchive::mutable_range_precedents_tile(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RangeDependenciesTiledArchive.range_precedents_tile)
  return range_precedents_tile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
RangeDependenciesTiledArchive::mutable_range_precedents_tile() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RangeDependenciesTiledArchive.range_precedents_tile)
  return &range_precedents_tile_;
}
inline const ::TSP::Reference& RangeDependenciesTiledArchive::_internal_range_precedents_tile(int index) const {
  return range_precedents_tile_.Get(index);
}
inline const ::TSP::Reference& RangeDependenciesTiledArchive::range_precedents_tile(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RangeDependenciesTiledArchive.range_precedents_tile)
  return _internal_range_precedents_tile(index);
}
inline ::TSP::Reference* RangeDependenciesTiledArchive::_internal_add_range_precedents_tile() {
  return range_precedents_tile_.Add();
}
inline ::TSP::Reference* RangeDependenciesTiledArchive::add_range_precedents_tile() {
  // @@protoc_insertion_point(field_add:TSCE.RangeDependenciesTiledArchive.range_precedents_tile)
  return _internal_add_range_precedents_tile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
RangeDependenciesTiledArchive::range_precedents_tile() const {
  // @@protoc_insertion_point(field_list:TSCE.RangeDependenciesTiledArchive.range_precedents_tile)
  return range_precedents_tile_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive_ReferringColumnToLocalCells

// required uint32 column = 1;
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::has_column() const {
  return _internal_has_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive_ReferringColumnToLocalCells::column() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.column)
  return _internal_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  column_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.column)
}

// required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_has_range_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToLocalCells::has_range_context() const {
  return _internal_has_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_range_context() {
  range_context_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_range_context() const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(range_context_);
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToLocalCells::range_context() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.range_context)
  return _internal_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  range_context_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  _internal_set_range_context(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.range_context)
}

// repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
inline int SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_cell_coordinate_size() const {
  return cell_coordinate_.size();
}
inline int SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate_size() const {
  return _internal_cell_coordinate_size();
}
inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::clear_cell_coordinate() {
  cell_coordinate_.Clear();
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::mutable_cell_coordinate(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return cell_coordinate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
SpanningDependenciesArchive_ReferringColumnToLocalCells::mutable_cell_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return &cell_coordinate_;
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_cell_coordinate(int index) const {
  return cell_coordinate_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _internal_cell_coordinate(index);
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::_internal_add_cell_coordinate() {
  return cell_coordinate_.Add();
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesArchive_ReferringColumnToLocalCells::add_cell_coordinate() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return _internal_add_cell_coordinate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
SpanningDependenciesArchive_ReferringColumnToLocalCells::cell_coordinate() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate)
  return cell_coordinate_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive_ReferringColumnToRemoteCells

// required uint32 column = 1;
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::has_column() const {
  return _internal_has_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive_ReferringColumnToRemoteCells::column() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.column)
  return _internal_column();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  column_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.column)
}

// required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_has_range_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::has_range_context() const {
  return _internal_has_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_range_context() {
  range_context_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_range_context() const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(range_context_);
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive_ReferringColumnToRemoteCells::range_context() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.range_context)
  return _internal_range_context();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  range_context_ = value;
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::set_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  _internal_set_range_context(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.range_context)
}

// repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
inline int SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_internal_cell_reference_size() const {
  return internal_cell_reference_.size();
}
inline int SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference_size() const {
  return _internal_internal_cell_reference_size();
}
inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::clear_internal_cell_reference() {
  internal_cell_reference_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::mutable_internal_cell_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return internal_cell_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
SpanningDependenciesArchive_ReferringColumnToRemoteCells::mutable_internal_cell_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return &internal_cell_reference_;
}
inline const ::TSCE::InternalCellReferenceArchive& SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_internal_cell_reference(int index) const {
  return internal_cell_reference_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _internal_internal_cell_reference(index);
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_internal_add_internal_cell_reference() {
  return internal_cell_reference_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* SpanningDependenciesArchive_ReferringColumnToRemoteCells::add_internal_cell_reference() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return _internal_add_internal_cell_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
SpanningDependenciesArchive_ReferringColumnToRemoteCells::internal_cell_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference)
  return internal_cell_reference_;
}

// -------------------------------------------------------------------

// SpanningDependenciesArchive

// repeated uint32 column = 1;
inline int SpanningDependenciesArchive::_internal_column_size() const {
  return column_.size();
}
inline int SpanningDependenciesArchive::column_size() const {
  return _internal_column_size();
}
inline void SpanningDependenciesArchive::clear_column() {
  column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive::_internal_column(int index) const {
  return column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesArchive::column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.column)
  return _internal_column(index);
}
inline void SpanningDependenciesArchive::set_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.column)
}
inline void SpanningDependenciesArchive::_internal_add_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_.Add(value);
}
inline void SpanningDependenciesArchive::add_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_column(value);
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SpanningDependenciesArchive::_internal_column() const {
  return column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SpanningDependenciesArchive::column() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.column)
  return _internal_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SpanningDependenciesArchive::_internal_mutable_column() {
  return &column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SpanningDependenciesArchive::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.column)
  return _internal_mutable_column();
}

// repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
inline int SpanningDependenciesArchive::_internal_range_context_size() const {
  return range_context_.size();
}
inline int SpanningDependenciesArchive::range_context_size() const {
  return _internal_range_context_size();
}
inline void SpanningDependenciesArchive::clear_range_context() {
  range_context_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::_internal_range_context(int index) const {
  return static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(range_context_.Get(index));
}
inline ::TSCE::SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::range_context(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.range_context)
  return _internal_range_context(index);
}
inline void SpanningDependenciesArchive::set_range_context(int index, ::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  range_context_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesArchive.range_context)
}
inline void SpanningDependenciesArchive::_internal_add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value));
  range_context_.Add(value);
}
inline void SpanningDependenciesArchive::add_range_context(::TSCE::SpanningDependenciesArchive_RangeContext value) {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.range_context)
  _internal_add_range_context(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SpanningDependenciesArchive::range_context() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.range_context)
  return range_context_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SpanningDependenciesArchive::_internal_mutable_range_context() {
  return &range_context_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SpanningDependenciesArchive::mutable_range_context() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.range_context)
  return _internal_mutable_range_context();
}

// repeated .TSCE.CellReferenceArchive cell = 3;
inline int SpanningDependenciesArchive::_internal_cell_size() const {
  return cell_.size();
}
inline int SpanningDependenciesArchive::cell_size() const {
  return _internal_cell_size();
}
inline void SpanningDependenciesArchive::clear_cell() {
  cell_.Clear();
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::mutable_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.cell)
  return cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
SpanningDependenciesArchive::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.cell)
  return &cell_;
}
inline const ::TSCE::CellReferenceArchive& SpanningDependenciesArchive::_internal_cell(int index) const {
  return cell_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& SpanningDependenciesArchive::cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.cell)
  return _internal_cell(index);
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::_internal_add_cell() {
  return cell_.Add();
}
inline ::TSCE::CellReferenceArchive* SpanningDependenciesArchive::add_cell() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.cell)
  return _internal_add_cell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
SpanningDependenciesArchive::cell() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.cell)
  return cell_;
}

// optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
inline bool SpanningDependenciesArchive::_internal_has_total_range_for_deleted_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || total_range_for_deleted_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesArchive::has_total_range_for_deleted_table() const {
  return _internal_has_total_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::clear_total_range_for_deleted_table() {
  if (total_range_for_deleted_table_ != nullptr) total_range_for_deleted_table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::_internal_total_range_for_deleted_table() const {
  const ::TSCE::RangeCoordinateArchive* p = total_range_for_deleted_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::total_range_for_deleted_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  return _internal_total_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::unsafe_arena_set_allocated_total_range_for_deleted_table(
    ::TSCE::RangeCoordinateArchive* total_range_for_deleted_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_range_for_deleted_table_);
  }
  total_range_for_deleted_table_ = total_range_for_deleted_table;
  if (total_range_for_deleted_table) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::release_total_range_for_deleted_table() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = total_range_for_deleted_table_;
  total_range_for_deleted_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::unsafe_arena_release_total_range_for_deleted_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = total_range_for_deleted_table_;
  total_range_for_deleted_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::_internal_mutable_total_range_for_deleted_table() {
  _has_bits_[0] |= 0x00000001u;
  if (total_range_for_deleted_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    total_range_for_deleted_table_ = p;
  }
  return total_range_for_deleted_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::mutable_total_range_for_deleted_table() {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
  return _internal_mutable_total_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::set_allocated_total_range_for_deleted_table(::TSCE::RangeCoordinateArchive* total_range_for_deleted_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete total_range_for_deleted_table_;
  }
  if (total_range_for_deleted_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(total_range_for_deleted_table);
    if (message_arena != submessage_arena) {
      total_range_for_deleted_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_range_for_deleted_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_range_for_deleted_table_ = total_range_for_deleted_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesArchive.total_range_for_deleted_table)
}

// optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
inline bool SpanningDependenciesArchive::_internal_has_body_range_for_deleted_table() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || body_range_for_deleted_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesArchive::has_body_range_for_deleted_table() const {
  return _internal_has_body_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::clear_body_range_for_deleted_table() {
  if (body_range_for_deleted_table_ != nullptr) body_range_for_deleted_table_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::_internal_body_range_for_deleted_table() const {
  const ::TSCE::RangeCoordinateArchive* p = body_range_for_deleted_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesArchive::body_range_for_deleted_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  return _internal_body_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::unsafe_arena_set_allocated_body_range_for_deleted_table(
    ::TSCE::RangeCoordinateArchive* body_range_for_deleted_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_range_for_deleted_table_);
  }
  body_range_for_deleted_table_ = body_range_for_deleted_table;
  if (body_range_for_deleted_table) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::release_body_range_for_deleted_table() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_deleted_table_;
  body_range_for_deleted_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::unsafe_arena_release_body_range_for_deleted_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_deleted_table_;
  body_range_for_deleted_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::_internal_mutable_body_range_for_deleted_table() {
  _has_bits_[0] |= 0x00000002u;
  if (body_range_for_deleted_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    body_range_for_deleted_table_ = p;
  }
  return body_range_for_deleted_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesArchive::mutable_body_range_for_deleted_table() {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
  return _internal_mutable_body_range_for_deleted_table();
}
inline void SpanningDependenciesArchive::set_allocated_body_range_for_deleted_table(::TSCE::RangeCoordinateArchive* body_range_for_deleted_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_range_for_deleted_table_;
  }
  if (body_range_for_deleted_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body_range_for_deleted_table);
    if (message_arena != submessage_arena) {
      body_range_for_deleted_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_range_for_deleted_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_range_for_deleted_table_ = body_range_for_deleted_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesArchive.body_range_for_deleted_table)
}

// repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
inline int SpanningDependenciesArchive::_internal_referring_column_to_local_cells_size() const {
  return referring_column_to_local_cells_.size();
}
inline int SpanningDependenciesArchive::referring_column_to_local_cells_size() const {
  return _internal_referring_column_to_local_cells_size();
}
inline void SpanningDependenciesArchive::clear_referring_column_to_local_cells() {
  referring_column_to_local_cells_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::mutable_referring_column_to_local_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return referring_column_to_local_cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >*
SpanningDependenciesArchive::mutable_referring_column_to_local_cells() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return &referring_column_to_local_cells_;
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& SpanningDependenciesArchive::_internal_referring_column_to_local_cells(int index) const {
  return referring_column_to_local_cells_.Get(index);
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells& SpanningDependenciesArchive::referring_column_to_local_cells(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _internal_referring_column_to_local_cells(index);
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::_internal_add_referring_column_to_local_cells() {
  return referring_column_to_local_cells_.Add();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive::add_referring_column_to_local_cells() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return _internal_add_referring_column_to_local_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >&
SpanningDependenciesArchive::referring_column_to_local_cells() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.referring_column_to_local_cells)
  return referring_column_to_local_cells_;
}

// repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
inline int SpanningDependenciesArchive::_internal_referring_column_to_remote_cells_size() const {
  return referring_column_to_remote_cells_.size();
}
inline int SpanningDependenciesArchive::referring_column_to_remote_cells_size() const {
  return _internal_referring_column_to_remote_cells_size();
}
inline void SpanningDependenciesArchive::clear_referring_column_to_remote_cells() {
  referring_column_to_remote_cells_.Clear();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::mutable_referring_column_to_remote_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return referring_column_to_remote_cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >*
SpanningDependenciesArchive::mutable_referring_column_to_remote_cells() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return &referring_column_to_remote_cells_;
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& SpanningDependenciesArchive::_internal_referring_column_to_remote_cells(int index) const {
  return referring_column_to_remote_cells_.Get(index);
}
inline const ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells& SpanningDependenciesArchive::referring_column_to_remote_cells(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _internal_referring_column_to_remote_cells(index);
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::_internal_add_referring_column_to_remote_cells() {
  return referring_column_to_remote_cells_.Add();
}
inline ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive::add_referring_column_to_remote_cells() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return _internal_add_referring_column_to_remote_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >&
SpanningDependenciesArchive::referring_column_to_remote_cells() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells)
  return referring_column_to_remote_cells_;
}

// -------------------------------------------------------------------

// SpanningDependenciesExpandedArchive_ExtentRange

// required uint32 extent_begin = 1;
inline bool SpanningDependenciesExpandedArchive_ExtentRange::_internal_has_extent_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesExpandedArchive_ExtentRange::has_extent_begin() const {
  return _internal_has_extent_begin();
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::clear_extent_begin() {
  extent_begin_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRange::_internal_extent_begin() const {
  return extent_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRange::extent_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.ExtentRange.extent_begin)
  return _internal_extent_begin();
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::_internal_set_extent_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  extent_begin_ = value;
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::set_extent_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extent_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesExpandedArchive.ExtentRange.extent_begin)
}

// optional uint32 extent_end = 2;
inline bool SpanningDependenciesExpandedArchive_ExtentRange::_internal_has_extent_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesExpandedArchive_ExtentRange::has_extent_end() const {
  return _internal_has_extent_end();
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::clear_extent_end() {
  extent_end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRange::_internal_extent_end() const {
  return extent_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRange::extent_end() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.ExtentRange.extent_end)
  return _internal_extent_end();
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::_internal_set_extent_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  extent_end_ = value;
}
inline void SpanningDependenciesExpandedArchive_ExtentRange::set_extent_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extent_end(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesExpandedArchive.ExtentRange.extent_end)
}

// -------------------------------------------------------------------

// SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext

// required uint32 owner_id = 1;
inline bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::clear_owner_id() {
  owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.owner_id)
  return _internal_owner_id();
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_id_ = value;
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::set_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.owner_id)
}

// required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
inline bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_has_range_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::has_range_context() const {
  return _internal_has_range_context();
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::clear_range_context() {
  range_context_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSCE::SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_range_context() const {
  return static_cast< ::TSCE::SpanningDependenciesExpandedArchive_RangeContext >(range_context_);
}
inline ::TSCE::SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::range_context() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.range_context)
  return _internal_range_context();
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_set_range_context(::TSCE::SpanningDependenciesExpandedArchive_RangeContext value) {
  assert(::TSCE::SpanningDependenciesExpandedArchive_RangeContext_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  range_context_ = value;
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::set_range_context(::TSCE::SpanningDependenciesExpandedArchive_RangeContext value) {
  _internal_set_range_context(value);
  // @@protoc_insertion_point(field_set:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.range_context)
}

// repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
inline int SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_ranges_size() const {
  return ranges_.size();
}
inline int SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ranges_size() const {
  return _internal_ranges_size();
}
inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::clear_ranges() {
  ranges_.Clear();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >*
SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges)
  return &ranges_;
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange& SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange& SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ranges(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges)
  return _internal_ranges(index);
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::add_ranges() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >&
SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ranges() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// SpanningDependenciesExpandedArchive_CellCoordRefersToExtents

// required .TSCE.CellCoordinateArchive coordinate = 1;
inline bool SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_has_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coordinate_ != nullptr);
  return value;
}
inline bool SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::has_coordinate() const {
  return _internal_has_coordinate();
}
inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::clear_coordinate() {
  if (coordinate_ != nullptr) coordinate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_coordinate() const {
  const ::TSCE::CellCoordinateArchive* p = coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate)
  return _internal_coordinate();
}
inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::unsafe_arena_set_allocated_coordinate(
    ::TSCE::CellCoordinateArchive* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate)
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::release_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_mutable_coordinate() {
  _has_bits_[0] |= 0x00000001u;
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::TSCE::CellCoordinateArchive* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate)
  return _internal_mutable_coordinate();
}
inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinate_;
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinate);
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate)
}

// repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
inline int SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_ranges_by_table_context_size() const {
  return ranges_by_table_context_.size();
}
inline int SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ranges_by_table_context_size() const {
  return _internal_ranges_by_table_context_size();
}
inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::clear_ranges_by_table_context() {
  ranges_by_table_context_.Clear();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::mutable_ranges_by_table_context(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context)
  return ranges_by_table_context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >*
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::mutable_ranges_by_table_context() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context)
  return &ranges_by_table_context_;
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_ranges_by_table_context(int index) const {
  return ranges_by_table_context_.Get(index);
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ranges_by_table_context(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context)
  return _internal_ranges_by_table_context(index);
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_internal_add_ranges_by_table_context() {
  return ranges_by_table_context_.Add();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::add_ranges_by_table_context() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context)
  return _internal_add_ranges_by_table_context();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >&
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ranges_by_table_context() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context)
  return ranges_by_table_context_;
}

// -------------------------------------------------------------------

// SpanningDependenciesExpandedArchive

// repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
inline int SpanningDependenciesExpandedArchive::_internal_coord_refers_to_spans_size() const {
  return coord_refers_to_spans_.size();
}
inline int SpanningDependenciesExpandedArchive::coord_refers_to_spans_size() const {
  return _internal_coord_refers_to_spans_size();
}
inline void SpanningDependenciesExpandedArchive::clear_coord_refers_to_spans() {
  coord_refers_to_spans_.Clear();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* SpanningDependenciesExpandedArchive::mutable_coord_refers_to_spans(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans)
  return coord_refers_to_spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >*
SpanningDependenciesExpandedArchive::mutable_coord_refers_to_spans() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans)
  return &coord_refers_to_spans_;
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& SpanningDependenciesExpandedArchive::_internal_coord_refers_to_spans(int index) const {
  return coord_refers_to_spans_.Get(index);
}
inline const ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& SpanningDependenciesExpandedArchive::coord_refers_to_spans(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans)
  return _internal_coord_refers_to_spans(index);
}
inline ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* SpanningDependenciesExpandedArchive::_internal_add_coord_refers_to_spans() {
  return coord_refers_to_spans_.Add();
}
inline ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* SpanningDependenciesExpandedArchive::add_coord_refers_to_spans() {
  // @@protoc_insertion_point(field_add:TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans)
  return _internal_add_coord_refers_to_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >&
SpanningDependenciesExpandedArchive::coord_refers_to_spans() const {
  // @@protoc_insertion_point(field_list:TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans)
  return coord_refers_to_spans_;
}

// optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
inline bool SpanningDependenciesExpandedArchive::_internal_has_total_range_for_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || total_range_for_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesExpandedArchive::has_total_range_for_table() const {
  return _internal_has_total_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::clear_total_range_for_table() {
  if (total_range_for_table_ != nullptr) total_range_for_table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesExpandedArchive::_internal_total_range_for_table() const {
  const ::TSCE::RangeCoordinateArchive* p = total_range_for_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesExpandedArchive::total_range_for_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.total_range_for_table)
  return _internal_total_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::unsafe_arena_set_allocated_total_range_for_table(
    ::TSCE::RangeCoordinateArchive* total_range_for_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_range_for_table_);
  }
  total_range_for_table_ = total_range_for_table;
  if (total_range_for_table) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesExpandedArchive.total_range_for_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::release_total_range_for_table() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = total_range_for_table_;
  total_range_for_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::unsafe_arena_release_total_range_for_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesExpandedArchive.total_range_for_table)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = total_range_for_table_;
  total_range_for_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::_internal_mutable_total_range_for_table() {
  _has_bits_[0] |= 0x00000001u;
  if (total_range_for_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    total_range_for_table_ = p;
  }
  return total_range_for_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::mutable_total_range_for_table() {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.total_range_for_table)
  return _internal_mutable_total_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::set_allocated_total_range_for_table(::TSCE::RangeCoordinateArchive* total_range_for_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete total_range_for_table_;
  }
  if (total_range_for_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(total_range_for_table);
    if (message_arena != submessage_arena) {
      total_range_for_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_range_for_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_range_for_table_ = total_range_for_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesExpandedArchive.total_range_for_table)
}

// optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
inline bool SpanningDependenciesExpandedArchive::_internal_has_body_range_for_table() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || body_range_for_table_ != nullptr);
  return value;
}
inline bool SpanningDependenciesExpandedArchive::has_body_range_for_table() const {
  return _internal_has_body_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::clear_body_range_for_table() {
  if (body_range_for_table_ != nullptr) body_range_for_table_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesExpandedArchive::_internal_body_range_for_table() const {
  const ::TSCE::RangeCoordinateArchive* p = body_range_for_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& SpanningDependenciesExpandedArchive::body_range_for_table() const {
  // @@protoc_insertion_point(field_get:TSCE.SpanningDependenciesExpandedArchive.body_range_for_table)
  return _internal_body_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::unsafe_arena_set_allocated_body_range_for_table(
    ::TSCE::RangeCoordinateArchive* body_range_for_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_range_for_table_);
  }
  body_range_for_table_ = body_range_for_table;
  if (body_range_for_table) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SpanningDependenciesExpandedArchive.body_range_for_table)
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::release_body_range_for_table() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_table_;
  body_range_for_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::unsafe_arena_release_body_range_for_table() {
  // @@protoc_insertion_point(field_release:TSCE.SpanningDependenciesExpandedArchive.body_range_for_table)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_table_;
  body_range_for_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::_internal_mutable_body_range_for_table() {
  _has_bits_[0] |= 0x00000002u;
  if (body_range_for_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    body_range_for_table_ = p;
  }
  return body_range_for_table_;
}
inline ::TSCE::RangeCoordinateArchive* SpanningDependenciesExpandedArchive::mutable_body_range_for_table() {
  // @@protoc_insertion_point(field_mutable:TSCE.SpanningDependenciesExpandedArchive.body_range_for_table)
  return _internal_mutable_body_range_for_table();
}
inline void SpanningDependenciesExpandedArchive::set_allocated_body_range_for_table(::TSCE::RangeCoordinateArchive* body_range_for_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_range_for_table_;
  }
  if (body_range_for_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body_range_for_table);
    if (message_arena != submessage_arena) {
      body_range_for_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_range_for_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_range_for_table_ = body_range_for_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SpanningDependenciesExpandedArchive.body_range_for_table)
}

// -------------------------------------------------------------------

// WholeOwnerDependenciesArchive

// repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
inline int WholeOwnerDependenciesArchive::_internal_dependent_cell_size() const {
  return dependent_cell_.size();
}
inline int WholeOwnerDependenciesArchive::dependent_cell_size() const {
  return _internal_dependent_cell_size();
}
inline void WholeOwnerDependenciesArchive::clear_dependent_cell() {
  dependent_cell_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::mutable_dependent_cell(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return dependent_cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
WholeOwnerDependenciesArchive::mutable_dependent_cell() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return &dependent_cell_;
}
inline const ::TSCE::InternalCellReferenceArchive& WholeOwnerDependenciesArchive::_internal_dependent_cell(int index) const {
  return dependent_cell_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& WholeOwnerDependenciesArchive::dependent_cell(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _internal_dependent_cell(index);
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::_internal_add_dependent_cell() {
  return dependent_cell_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* WholeOwnerDependenciesArchive::add_dependent_cell() {
  // @@protoc_insertion_point(field_add:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return _internal_add_dependent_cell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
WholeOwnerDependenciesArchive::dependent_cell() const {
  // @@protoc_insertion_point(field_list:TSCE.WholeOwnerDependenciesArchive.dependent_cell)
  return dependent_cell_;
}

// -------------------------------------------------------------------

// WholeOwnerDependenciesExpandedArchive

// optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
inline bool WholeOwnerDependenciesExpandedArchive::_internal_has_dependent_cells() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dependent_cells_ != nullptr);
  return value;
}
inline bool WholeOwnerDependenciesExpandedArchive::has_dependent_cells() const {
  return _internal_has_dependent_cells();
}
inline void WholeOwnerDependenciesExpandedArchive::clear_dependent_cells() {
  if (dependent_cells_ != nullptr) dependent_cells_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::InternalCellRefSetArchive& WholeOwnerDependenciesExpandedArchive::_internal_dependent_cells() const {
  const ::TSCE::InternalCellRefSetArchive* p = dependent_cells_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& WholeOwnerDependenciesExpandedArchive::dependent_cells() const {
  // @@protoc_insertion_point(field_get:TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells)
  return _internal_dependent_cells();
}
inline void WholeOwnerDependenciesExpandedArchive::unsafe_arena_set_allocated_dependent_cells(
    ::TSCE::InternalCellRefSetArchive* dependent_cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dependent_cells_);
  }
  dependent_cells_ = dependent_cells;
  if (dependent_cells) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells)
}
inline ::TSCE::InternalCellRefSetArchive* WholeOwnerDependenciesExpandedArchive::release_dependent_cells() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::InternalCellRefSetArchive* temp = dependent_cells_;
  dependent_cells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* WholeOwnerDependenciesExpandedArchive::unsafe_arena_release_dependent_cells() {
  // @@protoc_insertion_point(field_release:TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::InternalCellRefSetArchive* temp = dependent_cells_;
  dependent_cells_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* WholeOwnerDependenciesExpandedArchive::_internal_mutable_dependent_cells() {
  _has_bits_[0] |= 0x00000001u;
  if (dependent_cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    dependent_cells_ = p;
  }
  return dependent_cells_;
}
inline ::TSCE::InternalCellRefSetArchive* WholeOwnerDependenciesExpandedArchive::mutable_dependent_cells() {
  // @@protoc_insertion_point(field_mutable:TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells)
  return _internal_mutable_dependent_cells();
}
inline void WholeOwnerDependenciesExpandedArchive::set_allocated_dependent_cells(::TSCE::InternalCellRefSetArchive* dependent_cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dependent_cells_;
  }
  if (dependent_cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dependent_cells);
    if (message_arena != submessage_arena) {
      dependent_cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependent_cells, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dependent_cells_ = dependent_cells;
  // @@protoc_insertion_point(field_set_allocated:TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells)
}

// -------------------------------------------------------------------

// CellErrorsArchive_ErrorForCell

// required .TSCE.CellCoordinateArchive coordinate = 1;
inline bool CellErrorsArchive_ErrorForCell::_internal_has_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coordinate_ != nullptr);
  return value;
}
inline bool CellErrorsArchive_ErrorForCell::has_coordinate() const {
  return _internal_has_coordinate();
}
inline void CellErrorsArchive_ErrorForCell::clear_coordinate() {
  if (coordinate_ != nullptr) coordinate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellCoordinateArchive& CellErrorsArchive_ErrorForCell::_internal_coordinate() const {
  const ::TSCE::CellCoordinateArchive* p = coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CellErrorsArchive_ErrorForCell::coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.CellErrorsArchive.ErrorForCell.coordinate)
  return _internal_coordinate();
}
inline void CellErrorsArchive_ErrorForCell::unsafe_arena_set_allocated_coordinate(
    ::TSCE::CellCoordinateArchive* coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellErrorsArchive.ErrorForCell.coordinate)
}
inline ::TSCE::CellCoordinateArchive* CellErrorsArchive_ErrorForCell::release_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellErrorsArchive_ErrorForCell::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.CellErrorsArchive.ErrorForCell.coordinate)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellErrorsArchive_ErrorForCell::_internal_mutable_coordinate() {
  _has_bits_[0] |= 0x00000001u;
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::TSCE::CellCoordinateArchive* CellErrorsArchive_ErrorForCell::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellErrorsArchive.ErrorForCell.coordinate)
  return _internal_mutable_coordinate();
}
inline void CellErrorsArchive_ErrorForCell::set_allocated_coordinate(::TSCE::CellCoordinateArchive* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinate_;
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinate);
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellErrorsArchive.ErrorForCell.coordinate)
}

// required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
inline bool CellErrorsArchive_ErrorForCell::_internal_has_error_flavor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellErrorsArchive_ErrorForCell::has_error_flavor() const {
  return _internal_has_error_flavor();
}
inline void CellErrorsArchive_ErrorForCell::clear_error_flavor() {
  error_flavor_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSCE::CellErrorsArchive_ErrorFlavor CellErrorsArchive_ErrorForCell::_internal_error_flavor() const {
  return static_cast< ::TSCE::CellErrorsArchive_ErrorFlavor >(error_flavor_);
}
inline ::TSCE::CellErrorsArchive_ErrorFlavor CellErrorsArchive_ErrorForCell::error_flavor() const {
  // @@protoc_insertion_point(field_get:TSCE.CellErrorsArchive.ErrorForCell.error_flavor)
  return _internal_error_flavor();
}
inline void CellErrorsArchive_ErrorForCell::_internal_set_error_flavor(::TSCE::CellErrorsArchive_ErrorFlavor value) {
  assert(::TSCE::CellErrorsArchive_ErrorFlavor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  error_flavor_ = value;
}
inline void CellErrorsArchive_ErrorForCell::set_error_flavor(::TSCE::CellErrorsArchive_ErrorFlavor value) {
  _internal_set_error_flavor(value);
  // @@protoc_insertion_point(field_set:TSCE.CellErrorsArchive.ErrorForCell.error_flavor)
}

// optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
inline bool CellErrorsArchive_ErrorForCell::_internal_has_err_due_to_cell() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || err_due_to_cell_ != nullptr);
  return value;
}
inline bool CellErrorsArchive_ErrorForCell::has_err_due_to_cell() const {
  return _internal_has_err_due_to_cell();
}
inline void CellErrorsArchive_ErrorForCell::clear_err_due_to_cell() {
  if (err_due_to_cell_ != nullptr) err_due_to_cell_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalCellReferenceArchive& CellErrorsArchive_ErrorForCell::_internal_err_due_to_cell() const {
  const ::TSCE::InternalCellReferenceArchive* p = err_due_to_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellReferenceArchive&>(
      ::TSCE::_InternalCellReferenceArchive_default_instance_);
}
inline const ::TSCE::InternalCellReferenceArchive& CellErrorsArchive_ErrorForCell::err_due_to_cell() const {
  // @@protoc_insertion_point(field_get:TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell)
  return _internal_err_due_to_cell();
}
inline void CellErrorsArchive_ErrorForCell::unsafe_arena_set_allocated_err_due_to_cell(
    ::TSCE::InternalCellReferenceArchive* err_due_to_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_due_to_cell_);
  }
  err_due_to_cell_ = err_due_to_cell;
  if (err_due_to_cell) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell)
}
inline ::TSCE::InternalCellReferenceArchive* CellErrorsArchive_ErrorForCell::release_err_due_to_cell() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellReferenceArchive* temp = err_due_to_cell_;
  err_due_to_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellReferenceArchive* CellErrorsArchive_ErrorForCell::unsafe_arena_release_err_due_to_cell() {
  // @@protoc_insertion_point(field_release:TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellReferenceArchive* temp = err_due_to_cell_;
  err_due_to_cell_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellReferenceArchive* CellErrorsArchive_ErrorForCell::_internal_mutable_err_due_to_cell() {
  _has_bits_[0] |= 0x00000002u;
  if (err_due_to_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellReferenceArchive>(GetArena());
    err_due_to_cell_ = p;
  }
  return err_due_to_cell_;
}
inline ::TSCE::InternalCellReferenceArchive* CellErrorsArchive_ErrorForCell::mutable_err_due_to_cell() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell)
  return _internal_mutable_err_due_to_cell();
}
inline void CellErrorsArchive_ErrorForCell::set_allocated_err_due_to_cell(::TSCE::InternalCellReferenceArchive* err_due_to_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete err_due_to_cell_;
  }
  if (err_due_to_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(err_due_to_cell);
    if (message_arena != submessage_arena) {
      err_due_to_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_due_to_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  err_due_to_cell_ = err_due_to_cell;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell)
}

// -------------------------------------------------------------------

// CellErrorsArchive

// repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
inline int CellErrorsArchive::_internal_errors_size() const {
  return errors_.size();
}
inline int CellErrorsArchive::errors_size() const {
  return _internal_errors_size();
}
inline void CellErrorsArchive::clear_errors() {
  errors_.Clear();
}
inline ::TSCE::CellErrorsArchive_ErrorForCell* CellErrorsArchive::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellErrorsArchive.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellErrorsArchive_ErrorForCell >*
CellErrorsArchive::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellErrorsArchive.errors)
  return &errors_;
}
inline const ::TSCE::CellErrorsArchive_ErrorForCell& CellErrorsArchive::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::TSCE::CellErrorsArchive_ErrorForCell& CellErrorsArchive::errors(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellErrorsArchive.errors)
  return _internal_errors(index);
}
inline ::TSCE::CellErrorsArchive_ErrorForCell* CellErrorsArchive::_internal_add_errors() {
  return errors_.Add();
}
inline ::TSCE::CellErrorsArchive_ErrorForCell* CellErrorsArchive::add_errors() {
  // @@protoc_insertion_point(field_add:TSCE.CellErrorsArchive.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellErrorsArchive_ErrorForCell >&
CellErrorsArchive::errors() const {
  // @@protoc_insertion_point(field_list:TSCE.CellErrorsArchive.errors)
  return errors_;
}

// -------------------------------------------------------------------

// UuidReferencesArchive_TableRef

// required .TSP.UUID owner_uuid = 1;
inline bool UuidReferencesArchive_TableRef::_internal_has_owner_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uuid_ != nullptr);
  return value;
}
inline bool UuidReferencesArchive_TableRef::has_owner_uuid() const {
  return _internal_has_owner_uuid();
}
inline const ::TSP::UUID& UuidReferencesArchive_TableRef::_internal_owner_uuid() const {
  const ::TSP::UUID* p = owner_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UuidReferencesArchive_TableRef::owner_uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.TableRef.owner_uuid)
  return _internal_owner_uuid();
}
inline void UuidReferencesArchive_TableRef::unsafe_arena_set_allocated_owner_uuid(
    ::TSP::UUID* owner_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid_);
  }
  owner_uuid_ = owner_uuid;
  if (owner_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferencesArchive.TableRef.owner_uuid)
}
inline ::TSP::UUID* UuidReferencesArchive_TableRef::release_owner_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uuid_;
  owner_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_TableRef::unsafe_arena_release_owner_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferencesArchive.TableRef.owner_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uuid_;
  owner_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_TableRef::_internal_mutable_owner_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uuid_ = p;
  }
  return owner_uuid_;
}
inline ::TSP::UUID* UuidReferencesArchive_TableRef::mutable_owner_uuid() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.TableRef.owner_uuid)
  return _internal_mutable_owner_uuid();
}
inline void UuidReferencesArchive_TableRef::set_allocated_owner_uuid(::TSP::UUID* owner_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid_);
  }
  if (owner_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uuid_ = owner_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferencesArchive.TableRef.owner_uuid)
}

// optional .TSCE.CellCoordSetArchive coord_set = 2;
inline bool UuidReferencesArchive_TableRef::_internal_has_coord_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || coord_set_ != nullptr);
  return value;
}
inline bool UuidReferencesArchive_TableRef::has_coord_set() const {
  return _internal_has_coord_set();
}
inline void UuidReferencesArchive_TableRef::clear_coord_set() {
  if (coord_set_ != nullptr) coord_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellCoordSetArchive& UuidReferencesArchive_TableRef::_internal_coord_set() const {
  const ::TSCE::CellCoordSetArchive* p = coord_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& UuidReferencesArchive_TableRef::coord_set() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.TableRef.coord_set)
  return _internal_coord_set();
}
inline void UuidReferencesArchive_TableRef::unsafe_arena_set_allocated_coord_set(
    ::TSCE::CellCoordSetArchive* coord_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_set_);
  }
  coord_set_ = coord_set;
  if (coord_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferencesArchive.TableRef.coord_set)
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_TableRef::release_coord_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_TableRef::unsafe_arena_release_coord_set() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferencesArchive.TableRef.coord_set)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_TableRef::_internal_mutable_coord_set() {
  _has_bits_[0] |= 0x00000002u;
  if (coord_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    coord_set_ = p;
  }
  return coord_set_;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_TableRef::mutable_coord_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.TableRef.coord_set)
  return _internal_mutable_coord_set();
}
inline void UuidReferencesArchive_TableRef::set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coord_set_;
  }
  if (coord_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coord_set);
    if (message_arena != submessage_arena) {
      coord_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coord_set_ = coord_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferencesArchive.TableRef.coord_set)
}

// -------------------------------------------------------------------

// UuidReferencesArchive_UuidRef

// required .TSP.UUID uuid = 1;
inline bool UuidReferencesArchive_UuidRef::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool UuidReferencesArchive_UuidRef::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& UuidReferencesArchive_UuidRef::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UuidReferencesArchive_UuidRef::uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.UuidRef.uuid)
  return _internal_uuid();
}
inline void UuidReferencesArchive_UuidRef::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferencesArchive.UuidRef.uuid)
}
inline ::TSP::UUID* UuidReferencesArchive_UuidRef::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_UuidRef::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferencesArchive.UuidRef.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_UuidRef::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* UuidReferencesArchive_UuidRef::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.UuidRef.uuid)
  return _internal_mutable_uuid();
}
inline void UuidReferencesArchive_UuidRef::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferencesArchive.UuidRef.uuid)
}

// optional .TSCE.CellCoordSetArchive coord_set = 2;
inline bool UuidReferencesArchive_UuidRef::_internal_has_coord_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || coord_set_ != nullptr);
  return value;
}
inline bool UuidReferencesArchive_UuidRef::has_coord_set() const {
  return _internal_has_coord_set();
}
inline void UuidReferencesArchive_UuidRef::clear_coord_set() {
  if (coord_set_ != nullptr) coord_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellCoordSetArchive& UuidReferencesArchive_UuidRef::_internal_coord_set() const {
  const ::TSCE::CellCoordSetArchive* p = coord_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordSetArchive&>(
      ::TSCE::_CellCoordSetArchive_default_instance_);
}
inline const ::TSCE::CellCoordSetArchive& UuidReferencesArchive_UuidRef::coord_set() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.UuidRef.coord_set)
  return _internal_coord_set();
}
inline void UuidReferencesArchive_UuidRef::unsafe_arena_set_allocated_coord_set(
    ::TSCE::CellCoordSetArchive* coord_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_set_);
  }
  coord_set_ = coord_set;
  if (coord_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferencesArchive.UuidRef.coord_set)
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_UuidRef::release_coord_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_UuidRef::unsafe_arena_release_coord_set() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferencesArchive.UuidRef.coord_set)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordSetArchive* temp = coord_set_;
  coord_set_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_UuidRef::_internal_mutable_coord_set() {
  _has_bits_[0] |= 0x00000002u;
  if (coord_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordSetArchive>(GetArena());
    coord_set_ = p;
  }
  return coord_set_;
}
inline ::TSCE::CellCoordSetArchive* UuidReferencesArchive_UuidRef::mutable_coord_set() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.UuidRef.coord_set)
  return _internal_mutable_coord_set();
}
inline void UuidReferencesArchive_UuidRef::set_allocated_coord_set(::TSCE::CellCoordSetArchive* coord_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coord_set_;
  }
  if (coord_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coord_set);
    if (message_arena != submessage_arena) {
      coord_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coord_set_ = coord_set;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferencesArchive.UuidRef.coord_set)
}

// -------------------------------------------------------------------

// UuidReferencesArchive_TableWithUuidRef

// required .TSP.UUID owner_uuid = 1;
inline bool UuidReferencesArchive_TableWithUuidRef::_internal_has_owner_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uuid_ != nullptr);
  return value;
}
inline bool UuidReferencesArchive_TableWithUuidRef::has_owner_uuid() const {
  return _internal_has_owner_uuid();
}
inline const ::TSP::UUID& UuidReferencesArchive_TableWithUuidRef::_internal_owner_uuid() const {
  const ::TSP::UUID* p = owner_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UuidReferencesArchive_TableWithUuidRef::owner_uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid)
  return _internal_owner_uuid();
}
inline void UuidReferencesArchive_TableWithUuidRef::unsafe_arena_set_allocated_owner_uuid(
    ::TSP::UUID* owner_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid_);
  }
  owner_uuid_ = owner_uuid;
  if (owner_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid)
}
inline ::TSP::UUID* UuidReferencesArchive_TableWithUuidRef::release_owner_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uuid_;
  owner_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_TableWithUuidRef::unsafe_arena_release_owner_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uuid_;
  owner_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UuidReferencesArchive_TableWithUuidRef::_internal_mutable_owner_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uuid_ = p;
  }
  return owner_uuid_;
}
inline ::TSP::UUID* UuidReferencesArchive_TableWithUuidRef::mutable_owner_uuid() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid)
  return _internal_mutable_owner_uuid();
}
inline void UuidReferencesArchive_TableWithUuidRef::set_allocated_owner_uuid(::TSP::UUID* owner_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid_);
  }
  if (owner_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uuid_ = owner_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid)
}

// repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
inline int UuidReferencesArchive_TableWithUuidRef::_internal_uuid_refs_size() const {
  return uuid_refs_.size();
}
inline int UuidReferencesArchive_TableWithUuidRef::uuid_refs_size() const {
  return _internal_uuid_refs_size();
}
inline void UuidReferencesArchive_TableWithUuidRef::clear_uuid_refs() {
  uuid_refs_.Clear();
}
inline ::TSCE::UuidReferencesArchive_UuidRef* UuidReferencesArchive_TableWithUuidRef::mutable_uuid_refs(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs)
  return uuid_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_UuidRef >*
UuidReferencesArchive_TableWithUuidRef::mutable_uuid_refs() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs)
  return &uuid_refs_;
}
inline const ::TSCE::UuidReferencesArchive_UuidRef& UuidReferencesArchive_TableWithUuidRef::_internal_uuid_refs(int index) const {
  return uuid_refs_.Get(index);
}
inline const ::TSCE::UuidReferencesArchive_UuidRef& UuidReferencesArchive_TableWithUuidRef::uuid_refs(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs)
  return _internal_uuid_refs(index);
}
inline ::TSCE::UuidReferencesArchive_UuidRef* UuidReferencesArchive_TableWithUuidRef::_internal_add_uuid_refs() {
  return uuid_refs_.Add();
}
inline ::TSCE::UuidReferencesArchive_UuidRef* UuidReferencesArchive_TableWithUuidRef::add_uuid_refs() {
  // @@protoc_insertion_point(field_add:TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs)
  return _internal_add_uuid_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_UuidRef >&
UuidReferencesArchive_TableWithUuidRef::uuid_refs() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs)
  return uuid_refs_;
}

// -------------------------------------------------------------------

// UuidReferencesArchive

// repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
inline int UuidReferencesArchive::_internal_table_refs_size() const {
  return table_refs_.size();
}
inline int UuidReferencesArchive::table_refs_size() const {
  return _internal_table_refs_size();
}
inline void UuidReferencesArchive::clear_table_refs() {
  table_refs_.Clear();
}
inline ::TSCE::UuidReferencesArchive_TableRef* UuidReferencesArchive::mutable_table_refs(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.table_refs)
  return table_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableRef >*
UuidReferencesArchive::mutable_table_refs() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidReferencesArchive.table_refs)
  return &table_refs_;
}
inline const ::TSCE::UuidReferencesArchive_TableRef& UuidReferencesArchive::_internal_table_refs(int index) const {
  return table_refs_.Get(index);
}
inline const ::TSCE::UuidReferencesArchive_TableRef& UuidReferencesArchive::table_refs(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.table_refs)
  return _internal_table_refs(index);
}
inline ::TSCE::UuidReferencesArchive_TableRef* UuidReferencesArchive::_internal_add_table_refs() {
  return table_refs_.Add();
}
inline ::TSCE::UuidReferencesArchive_TableRef* UuidReferencesArchive::add_table_refs() {
  // @@protoc_insertion_point(field_add:TSCE.UuidReferencesArchive.table_refs)
  return _internal_add_table_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableRef >&
UuidReferencesArchive::table_refs() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidReferencesArchive.table_refs)
  return table_refs_;
}

// repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
inline int UuidReferencesArchive::_internal_table_uuid_refs_size() const {
  return table_uuid_refs_.size();
}
inline int UuidReferencesArchive::table_uuid_refs_size() const {
  return _internal_table_uuid_refs_size();
}
inline void UuidReferencesArchive::clear_table_uuid_refs() {
  table_uuid_refs_.Clear();
}
inline ::TSCE::UuidReferencesArchive_TableWithUuidRef* UuidReferencesArchive::mutable_table_uuid_refs(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferencesArchive.table_uuid_refs)
  return table_uuid_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableWithUuidRef >*
UuidReferencesArchive::mutable_table_uuid_refs() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidReferencesArchive.table_uuid_refs)
  return &table_uuid_refs_;
}
inline const ::TSCE::UuidReferencesArchive_TableWithUuidRef& UuidReferencesArchive::_internal_table_uuid_refs(int index) const {
  return table_uuid_refs_.Get(index);
}
inline const ::TSCE::UuidReferencesArchive_TableWithUuidRef& UuidReferencesArchive::table_uuid_refs(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferencesArchive.table_uuid_refs)
  return _internal_table_uuid_refs(index);
}
inline ::TSCE::UuidReferencesArchive_TableWithUuidRef* UuidReferencesArchive::_internal_add_table_uuid_refs() {
  return table_uuid_refs_.Add();
}
inline ::TSCE::UuidReferencesArchive_TableWithUuidRef* UuidReferencesArchive::add_table_uuid_refs() {
  // @@protoc_insertion_point(field_add:TSCE.UuidReferencesArchive.table_uuid_refs)
  return _internal_add_table_uuid_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferencesArchive_TableWithUuidRef >&
UuidReferencesArchive::table_uuid_refs() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidReferencesArchive.table_uuid_refs)
  return table_uuid_refs_;
}

// -------------------------------------------------------------------

// FormulaOwnerDependenciesArchive

// required .TSP.UUID formula_owner_uid = 1;
inline bool FormulaOwnerDependenciesArchive::_internal_has_formula_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_owner_uid_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_formula_owner_uid() const {
  return _internal_has_formula_owner_uid();
}
inline const ::TSP::UUID& FormulaOwnerDependenciesArchive::_internal_formula_owner_uid() const {
  const ::TSP::UUID* p = formula_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaOwnerDependenciesArchive::formula_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid)
  return _internal_formula_owner_uid();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_formula_owner_uid(
    ::TSP::UUID* formula_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_uid_);
  }
  formula_owner_uid_ = formula_owner_uid;
  if (formula_owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid)
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::release_formula_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = formula_owner_uid_;
  formula_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::unsafe_arena_release_formula_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = formula_owner_uid_;
  formula_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::_internal_mutable_formula_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    formula_owner_uid_ = p;
  }
  return formula_owner_uid_;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::mutable_formula_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid)
  return _internal_mutable_formula_owner_uid();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_formula_owner_uid(::TSP::UUID* formula_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_uid_);
  }
  if (formula_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      formula_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_owner_uid_ = formula_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid)
}

// required uint32 internal_formula_owner_id = 2;
inline bool FormulaOwnerDependenciesArchive::_internal_has_internal_formula_owner_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_internal_formula_owner_id() const {
  return _internal_has_internal_formula_owner_id();
}
inline void FormulaOwnerDependenciesArchive::clear_internal_formula_owner_id() {
  internal_formula_owner_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaOwnerDependenciesArchive::_internal_internal_formula_owner_id() const {
  return internal_formula_owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaOwnerDependenciesArchive::internal_formula_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.internal_formula_owner_id)
  return _internal_internal_formula_owner_id();
}
inline void FormulaOwnerDependenciesArchive::_internal_set_internal_formula_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  internal_formula_owner_id_ = value;
}
inline void FormulaOwnerDependenciesArchive::set_internal_formula_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_internal_formula_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaOwnerDependenciesArchive.internal_formula_owner_id)
}

// optional uint32 owner_kind = 3;
inline bool FormulaOwnerDependenciesArchive::_internal_has_owner_kind() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_owner_kind() const {
  return _internal_has_owner_kind();
}
inline void FormulaOwnerDependenciesArchive::clear_owner_kind() {
  owner_kind_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaOwnerDependenciesArchive::_internal_owner_kind() const {
  return owner_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaOwnerDependenciesArchive::owner_kind() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.owner_kind)
  return _internal_owner_kind();
}
inline void FormulaOwnerDependenciesArchive::_internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  owner_kind_ = value;
}
inline void FormulaOwnerDependenciesArchive::set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_kind(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaOwnerDependenciesArchive.owner_kind)
}

// optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
inline bool FormulaOwnerDependenciesArchive::_internal_has_cell_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_cell_dependencies() const {
  return _internal_has_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_cell_dependencies() {
  if (cell_dependencies_ != nullptr) cell_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::_internal_cell_dependencies() const {
  const ::TSCE::CellDependenciesExpandedArchive* p = cell_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellDependenciesExpandedArchive&>(
      ::TSCE::_CellDependenciesExpandedArchive_default_instance_);
}
inline const ::TSCE::CellDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::cell_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.cell_dependencies)
  return _internal_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_cell_dependencies(
    ::TSCE::CellDependenciesExpandedArchive* cell_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_dependencies_);
  }
  cell_dependencies_ = cell_dependencies;
  if (cell_dependencies) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.cell_dependencies)
}
inline ::TSCE::CellDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::release_cell_dependencies() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesExpandedArchive* temp = cell_dependencies_;
  cell_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_cell_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.cell_dependencies)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesExpandedArchive* temp = cell_dependencies_;
  cell_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::CellDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::_internal_mutable_cell_dependencies() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellDependenciesExpandedArchive>(GetArena());
    cell_dependencies_ = p;
  }
  return cell_dependencies_;
}
inline ::TSCE::CellDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::mutable_cell_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.cell_dependencies)
  return _internal_mutable_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_cell_dependencies(::TSCE::CellDependenciesExpandedArchive* cell_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_dependencies_;
  }
  if (cell_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_dependencies);
    if (message_arena != submessage_arena) {
      cell_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_dependencies_ = cell_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.cell_dependencies)
}

// optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
inline bool FormulaOwnerDependenciesArchive::_internal_has_range_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_range_dependencies() const {
  return _internal_has_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_range_dependencies() {
  if (range_dependencies_ != nullptr) range_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerDependenciesArchive::_internal_range_dependencies() const {
  const ::TSCE::RangeDependenciesArchive* p = range_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeDependenciesArchive&>(
      ::TSCE::_RangeDependenciesArchive_default_instance_);
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerDependenciesArchive::range_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.range_dependencies)
  return _internal_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_range_dependencies(
    ::TSCE::RangeDependenciesArchive* range_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_dependencies_);
  }
  range_dependencies_ = range_dependencies;
  if (range_dependencies) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.range_dependencies)
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerDependenciesArchive::release_range_dependencies() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = range_dependencies_;
  range_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_range_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.range_dependencies)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = range_dependencies_;
  range_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerDependenciesArchive::_internal_mutable_range_dependencies() {
  _has_bits_[0] |= 0x00000004u;
  if (range_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeDependenciesArchive>(GetArena());
    range_dependencies_ = p;
  }
  return range_dependencies_;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerDependenciesArchive::mutable_range_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.range_dependencies)
  return _internal_mutable_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_dependencies_;
  }
  if (range_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range_dependencies);
    if (message_arena != submessage_arena) {
      range_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_dependencies_ = range_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.range_dependencies)
}

// optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
inline bool FormulaOwnerDependenciesArchive::_internal_has_volatile_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || volatile_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_volatile_dependencies() const {
  return _internal_has_volatile_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_volatile_dependencies() {
  if (volatile_dependencies_ != nullptr) volatile_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::VolatileDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::_internal_volatile_dependencies() const {
  const ::TSCE::VolatileDependenciesExpandedArchive* p = volatile_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::VolatileDependenciesExpandedArchive&>(
      ::TSCE::_VolatileDependenciesExpandedArchive_default_instance_);
}
inline const ::TSCE::VolatileDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::volatile_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies)
  return _internal_volatile_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_volatile_dependencies(
    ::TSCE::VolatileDependenciesExpandedArchive* volatile_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_dependencies_);
  }
  volatile_dependencies_ = volatile_dependencies;
  if (volatile_dependencies) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies)
}
inline ::TSCE::VolatileDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::release_volatile_dependencies() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesExpandedArchive* temp = volatile_dependencies_;
  volatile_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::VolatileDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_volatile_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesExpandedArchive* temp = volatile_dependencies_;
  volatile_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::VolatileDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::_internal_mutable_volatile_dependencies() {
  _has_bits_[0] |= 0x00000008u;
  if (volatile_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::VolatileDependenciesExpandedArchive>(GetArena());
    volatile_dependencies_ = p;
  }
  return volatile_dependencies_;
}
inline ::TSCE::VolatileDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::mutable_volatile_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies)
  return _internal_mutable_volatile_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesExpandedArchive* volatile_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_dependencies_;
  }
  if (volatile_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_dependencies);
    if (message_arena != submessage_arena) {
      volatile_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  volatile_dependencies_ = volatile_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies)
}

// optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
inline bool FormulaOwnerDependenciesArchive::_internal_has_spanning_column_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || spanning_column_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_spanning_column_dependencies() const {
  return _internal_has_spanning_column_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_spanning_column_dependencies() {
  if (spanning_column_dependencies_ != nullptr) spanning_column_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::SpanningDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::_internal_spanning_column_dependencies() const {
  const ::TSCE::SpanningDependenciesExpandedArchive* p = spanning_column_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesExpandedArchive&>(
      ::TSCE::_SpanningDependenciesExpandedArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::spanning_column_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies)
  return _internal_spanning_column_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_spanning_column_dependencies(
    ::TSCE::SpanningDependenciesExpandedArchive* spanning_column_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spanning_column_dependencies_);
  }
  spanning_column_dependencies_ = spanning_column_dependencies;
  if (spanning_column_dependencies) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies)
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::release_spanning_column_dependencies() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesExpandedArchive* temp = spanning_column_dependencies_;
  spanning_column_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_spanning_column_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesExpandedArchive* temp = spanning_column_dependencies_;
  spanning_column_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::_internal_mutable_spanning_column_dependencies() {
  _has_bits_[0] |= 0x00000010u;
  if (spanning_column_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive>(GetArena());
    spanning_column_dependencies_ = p;
  }
  return spanning_column_dependencies_;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::mutable_spanning_column_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies)
  return _internal_mutable_spanning_column_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesExpandedArchive* spanning_column_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spanning_column_dependencies_;
  }
  if (spanning_column_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spanning_column_dependencies);
    if (message_arena != submessage_arena) {
      spanning_column_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_column_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  spanning_column_dependencies_ = spanning_column_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies)
}

// optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
inline bool FormulaOwnerDependenciesArchive::_internal_has_spanning_row_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || spanning_row_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_spanning_row_dependencies() const {
  return _internal_has_spanning_row_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_spanning_row_dependencies() {
  if (spanning_row_dependencies_ != nullptr) spanning_row_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::SpanningDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::_internal_spanning_row_dependencies() const {
  const ::TSCE::SpanningDependenciesExpandedArchive* p = spanning_row_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesExpandedArchive&>(
      ::TSCE::_SpanningDependenciesExpandedArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::spanning_row_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies)
  return _internal_spanning_row_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_spanning_row_dependencies(
    ::TSCE::SpanningDependenciesExpandedArchive* spanning_row_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spanning_row_dependencies_);
  }
  spanning_row_dependencies_ = spanning_row_dependencies;
  if (spanning_row_dependencies) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies)
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::release_spanning_row_dependencies() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesExpandedArchive* temp = spanning_row_dependencies_;
  spanning_row_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_spanning_row_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesExpandedArchive* temp = spanning_row_dependencies_;
  spanning_row_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::_internal_mutable_spanning_row_dependencies() {
  _has_bits_[0] |= 0x00000020u;
  if (spanning_row_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesExpandedArchive>(GetArena());
    spanning_row_dependencies_ = p;
  }
  return spanning_row_dependencies_;
}
inline ::TSCE::SpanningDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::mutable_spanning_row_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies)
  return _internal_mutable_spanning_row_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesExpandedArchive* spanning_row_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spanning_row_dependencies_;
  }
  if (spanning_row_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spanning_row_dependencies);
    if (message_arena != submessage_arena) {
      spanning_row_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_row_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  spanning_row_dependencies_ = spanning_row_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies)
}

// optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
inline bool FormulaOwnerDependenciesArchive::_internal_has_whole_owner_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || whole_owner_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_whole_owner_dependencies() const {
  return _internal_has_whole_owner_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_whole_owner_dependencies() {
  if (whole_owner_dependencies_ != nullptr) whole_owner_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCE::WholeOwnerDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::_internal_whole_owner_dependencies() const {
  const ::TSCE::WholeOwnerDependenciesExpandedArchive* p = whole_owner_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::WholeOwnerDependenciesExpandedArchive&>(
      ::TSCE::_WholeOwnerDependenciesExpandedArchive_default_instance_);
}
inline const ::TSCE::WholeOwnerDependenciesExpandedArchive& FormulaOwnerDependenciesArchive::whole_owner_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies)
  return _internal_whole_owner_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_whole_owner_dependencies(
    ::TSCE::WholeOwnerDependenciesExpandedArchive* whole_owner_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whole_owner_dependencies_);
  }
  whole_owner_dependencies_ = whole_owner_dependencies;
  if (whole_owner_dependencies) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies)
}
inline ::TSCE::WholeOwnerDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::release_whole_owner_dependencies() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::WholeOwnerDependenciesExpandedArchive* temp = whole_owner_dependencies_;
  whole_owner_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_whole_owner_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::WholeOwnerDependenciesExpandedArchive* temp = whole_owner_dependencies_;
  whole_owner_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::_internal_mutable_whole_owner_dependencies() {
  _has_bits_[0] |= 0x00000040u;
  if (whole_owner_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::WholeOwnerDependenciesExpandedArchive>(GetArena());
    whole_owner_dependencies_ = p;
  }
  return whole_owner_dependencies_;
}
inline ::TSCE::WholeOwnerDependenciesExpandedArchive* FormulaOwnerDependenciesArchive::mutable_whole_owner_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies)
  return _internal_mutable_whole_owner_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesExpandedArchive* whole_owner_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete whole_owner_dependencies_;
  }
  if (whole_owner_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whole_owner_dependencies);
    if (message_arena != submessage_arena) {
      whole_owner_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whole_owner_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  whole_owner_dependencies_ = whole_owner_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies)
}

// optional .TSCE.CellErrorsArchive cell_errors = 10;
inline bool FormulaOwnerDependenciesArchive::_internal_has_cell_errors() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || cell_errors_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_cell_errors() const {
  return _internal_has_cell_errors();
}
inline void FormulaOwnerDependenciesArchive::clear_cell_errors() {
  if (cell_errors_ != nullptr) cell_errors_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::CellErrorsArchive& FormulaOwnerDependenciesArchive::_internal_cell_errors() const {
  const ::TSCE::CellErrorsArchive* p = cell_errors_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellErrorsArchive&>(
      ::TSCE::_CellErrorsArchive_default_instance_);
}
inline const ::TSCE::CellErrorsArchive& FormulaOwnerDependenciesArchive::cell_errors() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.cell_errors)
  return _internal_cell_errors();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_cell_errors(
    ::TSCE::CellErrorsArchive* cell_errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_errors_);
  }
  cell_errors_ = cell_errors;
  if (cell_errors) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.cell_errors)
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerDependenciesArchive::release_cell_errors() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::CellErrorsArchive* temp = cell_errors_;
  cell_errors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_cell_errors() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.cell_errors)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::CellErrorsArchive* temp = cell_errors_;
  cell_errors_ = nullptr;
  return temp;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerDependenciesArchive::_internal_mutable_cell_errors() {
  _has_bits_[0] |= 0x00000080u;
  if (cell_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellErrorsArchive>(GetArena());
    cell_errors_ = p;
  }
  return cell_errors_;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerDependenciesArchive::mutable_cell_errors() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.cell_errors)
  return _internal_mutable_cell_errors();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_cell_errors(::TSCE::CellErrorsArchive* cell_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_errors_;
  }
  if (cell_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_errors);
    if (message_arena != submessage_arena) {
      cell_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_errors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cell_errors_ = cell_errors;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.cell_errors)
}

// optional .TSP.Reference formula_owner = 11;
inline bool FormulaOwnerDependenciesArchive::_internal_has_formula_owner() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || formula_owner_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_formula_owner() const {
  return _internal_has_formula_owner();
}
inline const ::TSP::Reference& FormulaOwnerDependenciesArchive::_internal_formula_owner() const {
  const ::TSP::Reference* p = formula_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaOwnerDependenciesArchive::formula_owner() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.formula_owner)
  return _internal_formula_owner();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_formula_owner(
    ::TSP::Reference* formula_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_);
  }
  formula_owner_ = formula_owner;
  if (formula_owner) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.formula_owner)
}
inline ::TSP::Reference* FormulaOwnerDependenciesArchive::release_formula_owner() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = formula_owner_;
  formula_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FormulaOwnerDependenciesArchive::unsafe_arena_release_formula_owner() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.formula_owner)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = formula_owner_;
  formula_owner_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaOwnerDependenciesArchive::_internal_mutable_formula_owner() {
  _has_bits_[0] |= 0x00000100u;
  if (formula_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formula_owner_ = p;
  }
  return formula_owner_;
}
inline ::TSP::Reference* FormulaOwnerDependenciesArchive::mutable_formula_owner() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.formula_owner)
  return _internal_mutable_formula_owner();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_formula_owner(::TSP::Reference* formula_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_);
  }
  if (formula_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner)->GetArena();
    if (message_arena != submessage_arena) {
      formula_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  formula_owner_ = formula_owner;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.formula_owner)
}

// optional .TSP.UUID base_owner_uid = 12;
inline bool FormulaOwnerDependenciesArchive::_internal_has_base_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || base_owner_uid_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_base_owner_uid() const {
  return _internal_has_base_owner_uid();
}
inline const ::TSP::UUID& FormulaOwnerDependenciesArchive::_internal_base_owner_uid() const {
  const ::TSP::UUID* p = base_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaOwnerDependenciesArchive::base_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.base_owner_uid)
  return _internal_base_owner_uid();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_base_owner_uid(
    ::TSP::UUID* base_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid_);
  }
  base_owner_uid_ = base_owner_uid;
  if (base_owner_uid) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.base_owner_uid)
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::release_base_owner_uid() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::UUID* temp = base_owner_uid_;
  base_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::unsafe_arena_release_base_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.base_owner_uid)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::UUID* temp = base_owner_uid_;
  base_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::_internal_mutable_base_owner_uid() {
  _has_bits_[0] |= 0x00000200u;
  if (base_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    base_owner_uid_ = p;
  }
  return base_owner_uid_;
}
inline ::TSP::UUID* FormulaOwnerDependenciesArchive::mutable_base_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.base_owner_uid)
  return _internal_mutable_base_owner_uid();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_base_owner_uid(::TSP::UUID* base_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid_);
  }
  if (base_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      base_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  base_owner_uid_ = base_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.base_owner_uid)
}

// optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
inline bool FormulaOwnerDependenciesArchive::_internal_has_tiled_cell_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tiled_cell_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_tiled_cell_dependencies() const {
  return _internal_has_tiled_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_tiled_cell_dependencies() {
  if (tiled_cell_dependencies_ != nullptr) tiled_cell_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TSCE::CellDependenciesTiledArchive& FormulaOwnerDependenciesArchive::_internal_tiled_cell_dependencies() const {
  const ::TSCE::CellDependenciesTiledArchive* p = tiled_cell_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellDependenciesTiledArchive&>(
      ::TSCE::_CellDependenciesTiledArchive_default_instance_);
}
inline const ::TSCE::CellDependenciesTiledArchive& FormulaOwnerDependenciesArchive::tiled_cell_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies)
  return _internal_tiled_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_tiled_cell_dependencies(
    ::TSCE::CellDependenciesTiledArchive* tiled_cell_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiled_cell_dependencies_);
  }
  tiled_cell_dependencies_ = tiled_cell_dependencies;
  if (tiled_cell_dependencies) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies)
}
inline ::TSCE::CellDependenciesTiledArchive* FormulaOwnerDependenciesArchive::release_tiled_cell_dependencies() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::CellDependenciesTiledArchive* temp = tiled_cell_dependencies_;
  tiled_cell_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellDependenciesTiledArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_tiled_cell_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies)
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::CellDependenciesTiledArchive* temp = tiled_cell_dependencies_;
  tiled_cell_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::CellDependenciesTiledArchive* FormulaOwnerDependenciesArchive::_internal_mutable_tiled_cell_dependencies() {
  _has_bits_[0] |= 0x00000400u;
  if (tiled_cell_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellDependenciesTiledArchive>(GetArena());
    tiled_cell_dependencies_ = p;
  }
  return tiled_cell_dependencies_;
}
inline ::TSCE::CellDependenciesTiledArchive* FormulaOwnerDependenciesArchive::mutable_tiled_cell_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies)
  return _internal_mutable_tiled_cell_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_tiled_cell_dependencies(::TSCE::CellDependenciesTiledArchive* tiled_cell_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tiled_cell_dependencies_;
  }
  if (tiled_cell_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tiled_cell_dependencies);
    if (message_arena != submessage_arena) {
      tiled_cell_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiled_cell_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tiled_cell_dependencies_ = tiled_cell_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies)
}

// optional .TSCE.UuidReferencesArchive uuid_references = 14;
inline bool FormulaOwnerDependenciesArchive::_internal_has_uuid_references() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || uuid_references_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_uuid_references() const {
  return _internal_has_uuid_references();
}
inline void FormulaOwnerDependenciesArchive::clear_uuid_references() {
  if (uuid_references_ != nullptr) uuid_references_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TSCE::UuidReferencesArchive& FormulaOwnerDependenciesArchive::_internal_uuid_references() const {
  const ::TSCE::UuidReferencesArchive* p = uuid_references_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UuidReferencesArchive&>(
      ::TSCE::_UuidReferencesArchive_default_instance_);
}
inline const ::TSCE::UuidReferencesArchive& FormulaOwnerDependenciesArchive::uuid_references() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.uuid_references)
  return _internal_uuid_references();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_uuid_references(
    ::TSCE::UuidReferencesArchive* uuid_references) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_references_);
  }
  uuid_references_ = uuid_references;
  if (uuid_references) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.uuid_references)
}
inline ::TSCE::UuidReferencesArchive* FormulaOwnerDependenciesArchive::release_uuid_references() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::UuidReferencesArchive* temp = uuid_references_;
  uuid_references_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UuidReferencesArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_uuid_references() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.uuid_references)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::UuidReferencesArchive* temp = uuid_references_;
  uuid_references_ = nullptr;
  return temp;
}
inline ::TSCE::UuidReferencesArchive* FormulaOwnerDependenciesArchive::_internal_mutable_uuid_references() {
  _has_bits_[0] |= 0x00000800u;
  if (uuid_references_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UuidReferencesArchive>(GetArena());
    uuid_references_ = p;
  }
  return uuid_references_;
}
inline ::TSCE::UuidReferencesArchive* FormulaOwnerDependenciesArchive::mutable_uuid_references() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.uuid_references)
  return _internal_mutable_uuid_references();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_uuid_references(::TSCE::UuidReferencesArchive* uuid_references) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_references_;
  }
  if (uuid_references) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid_references);
    if (message_arena != submessage_arena) {
      uuid_references = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid_references, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  uuid_references_ = uuid_references;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.uuid_references)
}

// optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
inline bool FormulaOwnerDependenciesArchive::_internal_has_tiled_range_dependencies() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tiled_range_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerDependenciesArchive::has_tiled_range_dependencies() const {
  return _internal_has_tiled_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::clear_tiled_range_dependencies() {
  if (tiled_range_dependencies_ != nullptr) tiled_range_dependencies_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TSCE::RangeDependenciesTiledArchive& FormulaOwnerDependenciesArchive::_internal_tiled_range_dependencies() const {
  const ::TSCE::RangeDependenciesTiledArchive* p = tiled_range_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeDependenciesTiledArchive&>(
      ::TSCE::_RangeDependenciesTiledArchive_default_instance_);
}
inline const ::TSCE::RangeDependenciesTiledArchive& FormulaOwnerDependenciesArchive::tiled_range_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies)
  return _internal_tiled_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::unsafe_arena_set_allocated_tiled_range_dependencies(
    ::TSCE::RangeDependenciesTiledArchive* tiled_range_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiled_range_dependencies_);
  }
  tiled_range_dependencies_ = tiled_range_dependencies;
  if (tiled_range_dependencies) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies)
}
inline ::TSCE::RangeDependenciesTiledArchive* FormulaOwnerDependenciesArchive::release_tiled_range_dependencies() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::RangeDependenciesTiledArchive* temp = tiled_range_dependencies_;
  tiled_range_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeDependenciesTiledArchive* FormulaOwnerDependenciesArchive::unsafe_arena_release_tiled_range_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies)
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::RangeDependenciesTiledArchive* temp = tiled_range_dependencies_;
  tiled_range_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::RangeDependenciesTiledArchive* FormulaOwnerDependenciesArchive::_internal_mutable_tiled_range_dependencies() {
  _has_bits_[0] |= 0x00001000u;
  if (tiled_range_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeDependenciesTiledArchive>(GetArena());
    tiled_range_dependencies_ = p;
  }
  return tiled_range_dependencies_;
}
inline ::TSCE::RangeDependenciesTiledArchive* FormulaOwnerDependenciesArchive::mutable_tiled_range_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies)
  return _internal_mutable_tiled_range_dependencies();
}
inline void FormulaOwnerDependenciesArchive::set_allocated_tiled_range_dependencies(::TSCE::RangeDependenciesTiledArchive* tiled_range_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tiled_range_dependencies_;
  }
  if (tiled_range_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tiled_range_dependencies);
    if (message_arena != submessage_arena) {
      tiled_range_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiled_range_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tiled_range_dependencies_ = tiled_range_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies)
}

// -------------------------------------------------------------------

// FormulaOwnerInfoArchive

// required .TSP.CFUUIDArchive formula_owner_id = 1;
inline bool FormulaOwnerInfoArchive::_internal_has_formula_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_owner_id_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_formula_owner_id() const {
  return _internal_has_formula_owner_id();
}
inline const ::TSP::CFUUIDArchive& FormulaOwnerInfoArchive::_internal_formula_owner_id() const {
  const ::TSP::CFUUIDArchive* p = formula_owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& FormulaOwnerInfoArchive::formula_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  return _internal_formula_owner_id();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_formula_owner_id(
    ::TSP::CFUUIDArchive* formula_owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_id_);
  }
  formula_owner_id_ = formula_owner_id;
  if (formula_owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
}
inline ::TSP::CFUUIDArchive* FormulaOwnerInfoArchive::release_formula_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = formula_owner_id_;
  formula_owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* FormulaOwnerInfoArchive::unsafe_arena_release_formula_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = formula_owner_id_;
  formula_owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* FormulaOwnerInfoArchive::_internal_mutable_formula_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    formula_owner_id_ = p;
  }
  return formula_owner_id_;
}
inline ::TSP::CFUUIDArchive* FormulaOwnerInfoArchive::mutable_formula_owner_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
  return _internal_mutable_formula_owner_id();
}
inline void FormulaOwnerInfoArchive::set_allocated_formula_owner_id(::TSP::CFUUIDArchive* formula_owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_id_);
  }
  if (formula_owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      formula_owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_owner_id_ = formula_owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner_id)
}

// optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
inline bool FormulaOwnerInfoArchive::_internal_has_cell_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_cell_dependencies() const {
  return _internal_has_cell_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_cell_dependencies() {
  if (cell_dependencies_ != nullptr) cell_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellDependenciesArchive& FormulaOwnerInfoArchive::_internal_cell_dependencies() const {
  const ::TSCE::CellDependenciesArchive* p = cell_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellDependenciesArchive&>(
      ::TSCE::_CellDependenciesArchive_default_instance_);
}
inline const ::TSCE::CellDependenciesArchive& FormulaOwnerInfoArchive::cell_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  return _internal_cell_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_cell_dependencies(
    ::TSCE::CellDependenciesArchive* cell_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_dependencies_);
  }
  cell_dependencies_ = cell_dependencies;
  if (cell_dependencies) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::release_cell_dependencies() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesArchive* temp = cell_dependencies_;
  cell_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_cell_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellDependenciesArchive* temp = cell_dependencies_;
  cell_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_cell_dependencies() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellDependenciesArchive>(GetArena());
    cell_dependencies_ = p;
  }
  return cell_dependencies_;
}
inline ::TSCE::CellDependenciesArchive* FormulaOwnerInfoArchive::mutable_cell_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
  return _internal_mutable_cell_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_cell_dependencies(::TSCE::CellDependenciesArchive* cell_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_dependencies_;
  }
  if (cell_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_dependencies);
    if (message_arena != submessage_arena) {
      cell_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_dependencies_ = cell_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_dependencies)
}

// optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
inline bool FormulaOwnerInfoArchive::_internal_has_range_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_range_dependencies() const {
  return _internal_has_range_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_range_dependencies() {
  if (range_dependencies_ != nullptr) range_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerInfoArchive::_internal_range_dependencies() const {
  const ::TSCE::RangeDependenciesArchive* p = range_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeDependenciesArchive&>(
      ::TSCE::_RangeDependenciesArchive_default_instance_);
}
inline const ::TSCE::RangeDependenciesArchive& FormulaOwnerInfoArchive::range_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  return _internal_range_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_range_dependencies(
    ::TSCE::RangeDependenciesArchive* range_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_dependencies_);
  }
  range_dependencies_ = range_dependencies;
  if (range_dependencies) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.range_dependencies)
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::release_range_dependencies() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = range_dependencies_;
  range_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_range_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeDependenciesArchive* temp = range_dependencies_;
  range_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_range_dependencies() {
  _has_bits_[0] |= 0x00000004u;
  if (range_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeDependenciesArchive>(GetArena());
    range_dependencies_ = p;
  }
  return range_dependencies_;
}
inline ::TSCE::RangeDependenciesArchive* FormulaOwnerInfoArchive::mutable_range_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.range_dependencies)
  return _internal_mutable_range_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_range_dependencies(::TSCE::RangeDependenciesArchive* range_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_dependencies_;
  }
  if (range_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range_dependencies);
    if (message_arena != submessage_arena) {
      range_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_dependencies_ = range_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.range_dependencies)
}

// optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
inline bool FormulaOwnerInfoArchive::_internal_has_volatile_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || volatile_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_volatile_dependencies() const {
  return _internal_has_volatile_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_volatile_dependencies() {
  if (volatile_dependencies_ != nullptr) volatile_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::VolatileDependenciesArchive& FormulaOwnerInfoArchive::_internal_volatile_dependencies() const {
  const ::TSCE::VolatileDependenciesArchive* p = volatile_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::VolatileDependenciesArchive&>(
      ::TSCE::_VolatileDependenciesArchive_default_instance_);
}
inline const ::TSCE::VolatileDependenciesArchive& FormulaOwnerInfoArchive::volatile_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  return _internal_volatile_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_volatile_dependencies(
    ::TSCE::VolatileDependenciesArchive* volatile_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volatile_dependencies_);
  }
  volatile_dependencies_ = volatile_dependencies;
  if (volatile_dependencies) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::release_volatile_dependencies() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesArchive* temp = volatile_dependencies_;
  volatile_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_volatile_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::VolatileDependenciesArchive* temp = volatile_dependencies_;
  volatile_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_volatile_dependencies() {
  _has_bits_[0] |= 0x00000008u;
  if (volatile_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::VolatileDependenciesArchive>(GetArena());
    volatile_dependencies_ = p;
  }
  return volatile_dependencies_;
}
inline ::TSCE::VolatileDependenciesArchive* FormulaOwnerInfoArchive::mutable_volatile_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
  return _internal_mutable_volatile_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_volatile_dependencies(::TSCE::VolatileDependenciesArchive* volatile_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volatile_dependencies_;
  }
  if (volatile_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volatile_dependencies);
    if (message_arena != submessage_arena) {
      volatile_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volatile_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  volatile_dependencies_ = volatile_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.volatile_dependencies)
}

// optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
inline bool FormulaOwnerInfoArchive::_internal_has_spanning_column_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || spanning_column_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_spanning_column_dependencies() const {
  return _internal_has_spanning_column_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_spanning_column_dependencies() {
  if (spanning_column_dependencies_ != nullptr) spanning_column_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::_internal_spanning_column_dependencies() const {
  const ::TSCE::SpanningDependenciesArchive* p = spanning_column_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesArchive&>(
      ::TSCE::_SpanningDependenciesArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::spanning_column_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  return _internal_spanning_column_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_spanning_column_dependencies(
    ::TSCE::SpanningDependenciesArchive* spanning_column_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spanning_column_dependencies_);
  }
  spanning_column_dependencies_ = spanning_column_dependencies;
  if (spanning_column_dependencies) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::release_spanning_column_dependencies() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesArchive* temp = spanning_column_dependencies_;
  spanning_column_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_spanning_column_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::SpanningDependenciesArchive* temp = spanning_column_dependencies_;
  spanning_column_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_spanning_column_dependencies() {
  _has_bits_[0] |= 0x00000010u;
  if (spanning_column_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(GetArena());
    spanning_column_dependencies_ = p;
  }
  return spanning_column_dependencies_;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::mutable_spanning_column_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
  return _internal_mutable_spanning_column_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_spanning_column_dependencies(::TSCE::SpanningDependenciesArchive* spanning_column_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spanning_column_dependencies_;
  }
  if (spanning_column_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spanning_column_dependencies);
    if (message_arena != submessage_arena) {
      spanning_column_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_column_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  spanning_column_dependencies_ = spanning_column_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies)
}

// optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
inline bool FormulaOwnerInfoArchive::_internal_has_spanning_row_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || spanning_row_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_spanning_row_dependencies() const {
  return _internal_has_spanning_row_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_spanning_row_dependencies() {
  if (spanning_row_dependencies_ != nullptr) spanning_row_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::_internal_spanning_row_dependencies() const {
  const ::TSCE::SpanningDependenciesArchive* p = spanning_row_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SpanningDependenciesArchive&>(
      ::TSCE::_SpanningDependenciesArchive_default_instance_);
}
inline const ::TSCE::SpanningDependenciesArchive& FormulaOwnerInfoArchive::spanning_row_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  return _internal_spanning_row_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_spanning_row_dependencies(
    ::TSCE::SpanningDependenciesArchive* spanning_row_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spanning_row_dependencies_);
  }
  spanning_row_dependencies_ = spanning_row_dependencies;
  if (spanning_row_dependencies) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::release_spanning_row_dependencies() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesArchive* temp = spanning_row_dependencies_;
  spanning_row_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_spanning_row_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::SpanningDependenciesArchive* temp = spanning_row_dependencies_;
  spanning_row_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_spanning_row_dependencies() {
  _has_bits_[0] |= 0x00000020u;
  if (spanning_row_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SpanningDependenciesArchive>(GetArena());
    spanning_row_dependencies_ = p;
  }
  return spanning_row_dependencies_;
}
inline ::TSCE::SpanningDependenciesArchive* FormulaOwnerInfoArchive::mutable_spanning_row_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
  return _internal_mutable_spanning_row_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_spanning_row_dependencies(::TSCE::SpanningDependenciesArchive* spanning_row_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spanning_row_dependencies_;
  }
  if (spanning_row_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spanning_row_dependencies);
    if (message_arena != submessage_arena) {
      spanning_row_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spanning_row_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  spanning_row_dependencies_ = spanning_row_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies)
}

// optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
inline bool FormulaOwnerInfoArchive::_internal_has_whole_owner_dependencies() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || whole_owner_dependencies_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_whole_owner_dependencies() const {
  return _internal_has_whole_owner_dependencies();
}
inline void FormulaOwnerInfoArchive::clear_whole_owner_dependencies() {
  if (whole_owner_dependencies_ != nullptr) whole_owner_dependencies_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::WholeOwnerDependenciesArchive& FormulaOwnerInfoArchive::_internal_whole_owner_dependencies() const {
  const ::TSCE::WholeOwnerDependenciesArchive* p = whole_owner_dependencies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::WholeOwnerDependenciesArchive&>(
      ::TSCE::_WholeOwnerDependenciesArchive_default_instance_);
}
inline const ::TSCE::WholeOwnerDependenciesArchive& FormulaOwnerInfoArchive::whole_owner_dependencies() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  return _internal_whole_owner_dependencies();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_whole_owner_dependencies(
    ::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whole_owner_dependencies_);
  }
  whole_owner_dependencies_ = whole_owner_dependencies;
  if (whole_owner_dependencies) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::release_whole_owner_dependencies() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::WholeOwnerDependenciesArchive* temp = whole_owner_dependencies_;
  whole_owner_dependencies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::unsafe_arena_release_whole_owner_dependencies() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::WholeOwnerDependenciesArchive* temp = whole_owner_dependencies_;
  whole_owner_dependencies_ = nullptr;
  return temp;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::_internal_mutable_whole_owner_dependencies() {
  _has_bits_[0] |= 0x00000080u;
  if (whole_owner_dependencies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::WholeOwnerDependenciesArchive>(GetArena());
    whole_owner_dependencies_ = p;
  }
  return whole_owner_dependencies_;
}
inline ::TSCE::WholeOwnerDependenciesArchive* FormulaOwnerInfoArchive::mutable_whole_owner_dependencies() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
  return _internal_mutable_whole_owner_dependencies();
}
inline void FormulaOwnerInfoArchive::set_allocated_whole_owner_dependencies(::TSCE::WholeOwnerDependenciesArchive* whole_owner_dependencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete whole_owner_dependencies_;
  }
  if (whole_owner_dependencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whole_owner_dependencies);
    if (message_arena != submessage_arena) {
      whole_owner_dependencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whole_owner_dependencies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  whole_owner_dependencies_ = whole_owner_dependencies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies)
}

// optional .TSCE.CellErrorsArchive cell_errors = 9;
inline bool FormulaOwnerInfoArchive::_internal_has_cell_errors() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cell_errors_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_cell_errors() const {
  return _internal_has_cell_errors();
}
inline void FormulaOwnerInfoArchive::clear_cell_errors() {
  if (cell_errors_ != nullptr) cell_errors_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSCE::CellErrorsArchive& FormulaOwnerInfoArchive::_internal_cell_errors() const {
  const ::TSCE::CellErrorsArchive* p = cell_errors_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellErrorsArchive&>(
      ::TSCE::_CellErrorsArchive_default_instance_);
}
inline const ::TSCE::CellErrorsArchive& FormulaOwnerInfoArchive::cell_errors() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.cell_errors)
  return _internal_cell_errors();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_cell_errors(
    ::TSCE::CellErrorsArchive* cell_errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_errors_);
  }
  cell_errors_ = cell_errors;
  if (cell_errors) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_errors)
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerInfoArchive::release_cell_errors() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellErrorsArchive* temp = cell_errors_;
  cell_errors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerInfoArchive::unsafe_arena_release_cell_errors() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.cell_errors)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellErrorsArchive* temp = cell_errors_;
  cell_errors_ = nullptr;
  return temp;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerInfoArchive::_internal_mutable_cell_errors() {
  _has_bits_[0] |= 0x00000100u;
  if (cell_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellErrorsArchive>(GetArena());
    cell_errors_ = p;
  }
  return cell_errors_;
}
inline ::TSCE::CellErrorsArchive* FormulaOwnerInfoArchive::mutable_cell_errors() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.cell_errors)
  return _internal_mutable_cell_errors();
}
inline void FormulaOwnerInfoArchive::set_allocated_cell_errors(::TSCE::CellErrorsArchive* cell_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_errors_;
  }
  if (cell_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_errors);
    if (message_arena != submessage_arena) {
      cell_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_errors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cell_errors_ = cell_errors;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.cell_errors)
}

// optional .TSP.Reference formula_owner = 7;
inline bool FormulaOwnerInfoArchive::_internal_has_formula_owner() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || formula_owner_ != nullptr);
  return value;
}
inline bool FormulaOwnerInfoArchive::has_formula_owner() const {
  return _internal_has_formula_owner();
}
inline const ::TSP::Reference& FormulaOwnerInfoArchive::_internal_formula_owner() const {
  const ::TSP::Reference* p = formula_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaOwnerInfoArchive::formula_owner() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaOwnerInfoArchive.formula_owner)
  return _internal_formula_owner();
}
inline void FormulaOwnerInfoArchive::unsafe_arena_set_allocated_formula_owner(
    ::TSP::Reference* formula_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_);
  }
  formula_owner_ = formula_owner;
  if (formula_owner) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner)
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::release_formula_owner() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = formula_owner_;
  formula_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::unsafe_arena_release_formula_owner() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaOwnerInfoArchive.formula_owner)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = formula_owner_;
  formula_owner_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::_internal_mutable_formula_owner() {
  _has_bits_[0] |= 0x00000040u;
  if (formula_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formula_owner_ = p;
  }
  return formula_owner_;
}
inline ::TSP::Reference* FormulaOwnerInfoArchive::mutable_formula_owner() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaOwnerInfoArchive.formula_owner)
  return _internal_mutable_formula_owner();
}
inline void FormulaOwnerInfoArchive::set_allocated_formula_owner(::TSP::Reference* formula_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner_);
  }
  if (formula_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_owner)->GetArena();
    if (message_arena != submessage_arena) {
      formula_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  formula_owner_ = formula_owner;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaOwnerInfoArchive.formula_owner)
}

// -------------------------------------------------------------------

// SubFormulaOwnerIDArchive

// required .TSP.UUID base_owner_uid = 1;
inline bool SubFormulaOwnerIDArchive::_internal_has_base_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_owner_uid_ != nullptr);
  return value;
}
inline bool SubFormulaOwnerIDArchive::has_base_owner_uid() const {
  return _internal_has_base_owner_uid();
}
inline const ::TSP::UUID& SubFormulaOwnerIDArchive::_internal_base_owner_uid() const {
  const ::TSP::UUID* p = base_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SubFormulaOwnerIDArchive::base_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.SubFormulaOwnerIDArchive.base_owner_uid)
  return _internal_base_owner_uid();
}
inline void SubFormulaOwnerIDArchive::unsafe_arena_set_allocated_base_owner_uid(
    ::TSP::UUID* base_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid_);
  }
  base_owner_uid_ = base_owner_uid;
  if (base_owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.SubFormulaOwnerIDArchive.base_owner_uid)
}
inline ::TSP::UUID* SubFormulaOwnerIDArchive::release_base_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = base_owner_uid_;
  base_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SubFormulaOwnerIDArchive::unsafe_arena_release_base_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.SubFormulaOwnerIDArchive.base_owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = base_owner_uid_;
  base_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SubFormulaOwnerIDArchive::_internal_mutable_base_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (base_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    base_owner_uid_ = p;
  }
  return base_owner_uid_;
}
inline ::TSP::UUID* SubFormulaOwnerIDArchive::mutable_base_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.SubFormulaOwnerIDArchive.base_owner_uid)
  return _internal_mutable_base_owner_uid();
}
inline void SubFormulaOwnerIDArchive::set_allocated_base_owner_uid(::TSP::UUID* base_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid_);
  }
  if (base_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      base_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_owner_uid_ = base_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.SubFormulaOwnerIDArchive.base_owner_uid)
}

// optional uint32 owner_kind = 2;
inline bool SubFormulaOwnerIDArchive::_internal_has_owner_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubFormulaOwnerIDArchive::has_owner_kind() const {
  return _internal_has_owner_kind();
}
inline void SubFormulaOwnerIDArchive::clear_owner_kind() {
  owner_kind_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubFormulaOwnerIDArchive::_internal_owner_kind() const {
  return owner_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubFormulaOwnerIDArchive::owner_kind() const {
  // @@protoc_insertion_point(field_get:TSCE.SubFormulaOwnerIDArchive.owner_kind)
  return _internal_owner_kind();
}
inline void SubFormulaOwnerIDArchive::_internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_kind_ = value;
}
inline void SubFormulaOwnerIDArchive::set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_kind(value);
  // @@protoc_insertion_point(field_set:TSCE.SubFormulaOwnerIDArchive.owner_kind)
}

// -------------------------------------------------------------------

// OwnerIDMapArchive_OwnerIDMapArchiveEntry

// required uint32 internal_owner_id = 1;
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_has_internal_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::has_internal_owner_id() const {
  return _internal_has_internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_internal_owner_id() {
  internal_owner_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_internal_owner_id() const {
  return internal_owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OwnerIDMapArchive_OwnerIDMapArchiveEntry::internal_owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.internal_owner_id)
  return _internal_internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  internal_owner_id_ = value;
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::set_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_internal_owner_id(value);
  // @@protoc_insertion_point(field_set:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.internal_owner_id)
}

// required .TSP.CFUUIDArchive owner_id = 2;
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_ != nullptr);
  return value;
}
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::has_owner_id() const {
  return _internal_has_owner_id();
}
inline const ::TSP::CFUUIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_owner_id() const {
  const ::TSP::CFUUIDArchive* p = owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::owner_id() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  return _internal_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_set_allocated_owner_id(
    ::TSP::CFUUIDArchive* owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  owner_id_ = owner_id;
  if (owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
}
inline ::TSP::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::release_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_mutable_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    owner_id_ = p;
  }
  return owner_id_;
}
inline ::TSP::CFUUIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
  return _internal_mutable_owner_id();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id)
}

// optional .TSCE.SubFormulaOwnerIDArchive sub_formula_owner_uid = 3;
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_has_sub_formula_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sub_formula_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::has_sub_formula_owner_uid() const {
  return _internal_has_sub_formula_owner_uid();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_sub_formula_owner_uid() {
  if (sub_formula_owner_uid_ != nullptr) sub_formula_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::SubFormulaOwnerIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_sub_formula_owner_uid() const {
  const ::TSCE::SubFormulaOwnerIDArchive* p = sub_formula_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::SubFormulaOwnerIDArchive&>(
      ::TSCE::_SubFormulaOwnerIDArchive_default_instance_);
}
inline const ::TSCE::SubFormulaOwnerIDArchive& OwnerIDMapArchive_OwnerIDMapArchiveEntry::sub_formula_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.sub_formula_owner_uid)
  return _internal_sub_formula_owner_uid();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_set_allocated_sub_formula_owner_uid(
    ::TSCE::SubFormulaOwnerIDArchive* sub_formula_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_formula_owner_uid_);
  }
  sub_formula_owner_uid_ = sub_formula_owner_uid;
  if (sub_formula_owner_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.sub_formula_owner_uid)
}
inline ::TSCE::SubFormulaOwnerIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::release_sub_formula_owner_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::SubFormulaOwnerIDArchive* temp = sub_formula_owner_uid_;
  sub_formula_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::SubFormulaOwnerIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::unsafe_arena_release_sub_formula_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.sub_formula_owner_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::SubFormulaOwnerIDArchive* temp = sub_formula_owner_uid_;
  sub_formula_owner_uid_ = nullptr;
  return temp;
}
inline ::TSCE::SubFormulaOwnerIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_internal_mutable_sub_formula_owner_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (sub_formula_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::SubFormulaOwnerIDArchive>(GetArena());
    sub_formula_owner_uid_ = p;
  }
  return sub_formula_owner_uid_;
}
inline ::TSCE::SubFormulaOwnerIDArchive* OwnerIDMapArchive_OwnerIDMapArchiveEntry::mutable_sub_formula_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.sub_formula_owner_uid)
  return _internal_mutable_sub_formula_owner_uid();
}
inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::set_allocated_sub_formula_owner_uid(::TSCE::SubFormulaOwnerIDArchive* sub_formula_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_formula_owner_uid_;
  }
  if (sub_formula_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_formula_owner_uid);
    if (message_arena != submessage_arena) {
      sub_formula_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_formula_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sub_formula_owner_uid_ = sub_formula_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.sub_formula_owner_uid)
}

// -------------------------------------------------------------------

// OwnerIDMapArchive

// repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
inline int OwnerIDMapArchive::_internal_map_entry_size() const {
  return map_entry_.size();
}
inline int OwnerIDMapArchive::map_entry_size() const {
  return _internal_map_entry_size();
}
inline void OwnerIDMapArchive::clear_map_entry() {
  map_entry_.Clear();
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::mutable_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerIDMapArchive.map_entry)
  return map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >*
OwnerIDMapArchive::mutable_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.OwnerIDMapArchive.map_entry)
  return &map_entry_;
}
inline const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& OwnerIDMapArchive::_internal_map_entry(int index) const {
  return map_entry_.Get(index);
}
inline const ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry& OwnerIDMapArchive::map_entry(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.map_entry)
  return _internal_map_entry(index);
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::_internal_add_map_entry() {
  return map_entry_.Add();
}
inline ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive::add_map_entry() {
  // @@protoc_insertion_point(field_add:TSCE.OwnerIDMapArchive.map_entry)
  return _internal_add_map_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >&
OwnerIDMapArchive::map_entry() const {
  // @@protoc_insertion_point(field_list:TSCE.OwnerIDMapArchive.map_entry)
  return map_entry_;
}

// repeated uint32 unregistered_internal_owner_id = 2;
inline int OwnerIDMapArchive::_internal_unregistered_internal_owner_id_size() const {
  return unregistered_internal_owner_id_.size();
}
inline int OwnerIDMapArchive::unregistered_internal_owner_id_size() const {
  return _internal_unregistered_internal_owner_id_size();
}
inline void OwnerIDMapArchive::clear_unregistered_internal_owner_id() {
  unregistered_internal_owner_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OwnerIDMapArchive::_internal_unregistered_internal_owner_id(int index) const {
  return unregistered_internal_owner_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OwnerIDMapArchive::unregistered_internal_owner_id(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerIDMapArchive.unregistered_internal_owner_id)
  return _internal_unregistered_internal_owner_id(index);
}
inline void OwnerIDMapArchive::set_unregistered_internal_owner_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unregistered_internal_owner_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.OwnerIDMapArchive.unregistered_internal_owner_id)
}
inline void OwnerIDMapArchive::_internal_add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  unregistered_internal_owner_id_.Add(value);
}
inline void OwnerIDMapArchive::add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_unregistered_internal_owner_id(value);
  // @@protoc_insertion_point(field_add:TSCE.OwnerIDMapArchive.unregistered_internal_owner_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OwnerIDMapArchive::_internal_unregistered_internal_owner_id() const {
  return unregistered_internal_owner_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OwnerIDMapArchive::unregistered_internal_owner_id() const {
  // @@protoc_insertion_point(field_list:TSCE.OwnerIDMapArchive.unregistered_internal_owner_id)
  return _internal_unregistered_internal_owner_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OwnerIDMapArchive::_internal_mutable_unregistered_internal_owner_id() {
  return &unregistered_internal_owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OwnerIDMapArchive::mutable_unregistered_internal_owner_id() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.OwnerIDMapArchive.unregistered_internal_owner_id)
  return _internal_mutable_unregistered_internal_owner_id();
}

// -------------------------------------------------------------------

// UidLookupListArchive

// repeated .TSP.UUID uuids = 1;
inline int UidLookupListArchive::_internal_uuids_size() const {
  return uuids_.size();
}
inline int UidLookupListArchive::uuids_size() const {
  return _internal_uuids_size();
}
inline ::TSP::UUID* UidLookupListArchive::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UidLookupListArchive.uuids)
  return uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UidLookupListArchive::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UidLookupListArchive.uuids)
  return &uuids_;
}
inline const ::TSP::UUID& UidLookupListArchive::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const ::TSP::UUID& UidLookupListArchive::uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UidLookupListArchive.uuids)
  return _internal_uuids(index);
}
inline ::TSP::UUID* UidLookupListArchive::_internal_add_uuids() {
  return uuids_.Add();
}
inline ::TSP::UUID* UidLookupListArchive::add_uuids() {
  // @@protoc_insertion_point(field_add:TSCE.UidLookupListArchive.uuids)
  return _internal_add_uuids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UidLookupListArchive::uuids() const {
  // @@protoc_insertion_point(field_list:TSCE.UidLookupListArchive.uuids)
  return uuids_;
}

// -------------------------------------------------------------------

// DependencyTrackerArchive

// repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
inline int DependencyTrackerArchive::_internal_formula_owner_info_size() const {
  return formula_owner_info_.size();
}
inline int DependencyTrackerArchive::formula_owner_info_size() const {
  return _internal_formula_owner_info_size();
}
inline void DependencyTrackerArchive::clear_formula_owner_info() {
  formula_owner_info_.Clear();
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::mutable_formula_owner_info(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.formula_owner_info)
  return formula_owner_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >*
DependencyTrackerArchive::mutable_formula_owner_info() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.formula_owner_info)
  return &formula_owner_info_;
}
inline const ::TSCE::FormulaOwnerInfoArchive& DependencyTrackerArchive::_internal_formula_owner_info(int index) const {
  return formula_owner_info_.Get(index);
}
inline const ::TSCE::FormulaOwnerInfoArchive& DependencyTrackerArchive::formula_owner_info(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _internal_formula_owner_info(index);
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::_internal_add_formula_owner_info() {
  return formula_owner_info_.Add();
}
inline ::TSCE::FormulaOwnerInfoArchive* DependencyTrackerArchive::add_formula_owner_info() {
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.formula_owner_info)
  return _internal_add_formula_owner_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaOwnerInfoArchive >&
DependencyTrackerArchive::formula_owner_info() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.formula_owner_info)
  return formula_owner_info_;
}

// repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
inline int DependencyTrackerArchive::_internal_dirty_leaf_size() const {
  return dirty_leaf_.size();
}
inline int DependencyTrackerArchive::dirty_leaf_size() const {
  return _internal_dirty_leaf_size();
}
inline void DependencyTrackerArchive::clear_dirty_leaf() {
  dirty_leaf_.Clear();
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::mutable_dirty_leaf(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.dirty_leaf)
  return dirty_leaf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >*
DependencyTrackerArchive::mutable_dirty_leaf() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.dirty_leaf)
  return &dirty_leaf_;
}
inline const ::TSCE::CellReferenceArchive& DependencyTrackerArchive::_internal_dirty_leaf(int index) const {
  return dirty_leaf_.Get(index);
}
inline const ::TSCE::CellReferenceArchive& DependencyTrackerArchive::dirty_leaf(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _internal_dirty_leaf(index);
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::_internal_add_dirty_leaf() {
  return dirty_leaf_.Add();
}
inline ::TSCE::CellReferenceArchive* DependencyTrackerArchive::add_dirty_leaf() {
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.dirty_leaf)
  return _internal_add_dirty_leaf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellReferenceArchive >&
DependencyTrackerArchive::dirty_leaf() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.dirty_leaf)
  return dirty_leaf_;
}

// optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
inline bool DependencyTrackerArchive::_internal_has_owner_id_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_map_ != nullptr);
  return value;
}
inline bool DependencyTrackerArchive::has_owner_id_map() const {
  return _internal_has_owner_id_map();
}
inline void DependencyTrackerArchive::clear_owner_id_map() {
  if (owner_id_map_ != nullptr) owner_id_map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::OwnerIDMapArchive& DependencyTrackerArchive::_internal_owner_id_map() const {
  const ::TSCE::OwnerIDMapArchive* p = owner_id_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerIDMapArchive&>(
      ::TSCE::_OwnerIDMapArchive_default_instance_);
}
inline const ::TSCE::OwnerIDMapArchive& DependencyTrackerArchive::owner_id_map() const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.owner_id_map)
  return _internal_owner_id_map();
}
inline void DependencyTrackerArchive::unsafe_arena_set_allocated_owner_id_map(
    ::TSCE::OwnerIDMapArchive* owner_id_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_map_);
  }
  owner_id_map_ = owner_id_map;
  if (owner_id_map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.DependencyTrackerArchive.owner_id_map)
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::release_owner_id_map() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::OwnerIDMapArchive* temp = owner_id_map_;
  owner_id_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::unsafe_arena_release_owner_id_map() {
  // @@protoc_insertion_point(field_release:TSCE.DependencyTrackerArchive.owner_id_map)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::OwnerIDMapArchive* temp = owner_id_map_;
  owner_id_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::_internal_mutable_owner_id_map() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerIDMapArchive>(GetArena());
    owner_id_map_ = p;
  }
  return owner_id_map_;
}
inline ::TSCE::OwnerIDMapArchive* DependencyTrackerArchive::mutable_owner_id_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.owner_id_map)
  return _internal_mutable_owner_id_map();
}
inline void DependencyTrackerArchive::set_allocated_owner_id_map(::TSCE::OwnerIDMapArchive* owner_id_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_id_map_;
  }
  if (owner_id_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner_id_map);
    if (message_arena != submessage_arena) {
      owner_id_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_map_ = owner_id_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.DependencyTrackerArchive.owner_id_map)
}

// repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
inline int DependencyTrackerArchive::_internal_internal_dirty_leaf_size() const {
  return internal_dirty_leaf_.size();
}
inline int DependencyTrackerArchive::internal_dirty_leaf_size() const {
  return _internal_internal_dirty_leaf_size();
}
inline void DependencyTrackerArchive::clear_internal_dirty_leaf() {
  internal_dirty_leaf_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::mutable_internal_dirty_leaf(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return internal_dirty_leaf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
DependencyTrackerArchive::mutable_internal_dirty_leaf() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return &internal_dirty_leaf_;
}
inline const ::TSCE::InternalCellReferenceArchive& DependencyTrackerArchive::_internal_internal_dirty_leaf(int index) const {
  return internal_dirty_leaf_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& DependencyTrackerArchive::internal_dirty_leaf(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _internal_internal_dirty_leaf(index);
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::_internal_add_internal_dirty_leaf() {
  return internal_dirty_leaf_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* DependencyTrackerArchive::add_internal_dirty_leaf() {
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return _internal_add_internal_dirty_leaf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
DependencyTrackerArchive::internal_dirty_leaf() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.internal_dirty_leaf)
  return internal_dirty_leaf_;
}

// optional uint64 number_of_formulas = 5;
inline bool DependencyTrackerArchive::_internal_has_number_of_formulas() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DependencyTrackerArchive::has_number_of_formulas() const {
  return _internal_has_number_of_formulas();
}
inline void DependencyTrackerArchive::clear_number_of_formulas() {
  number_of_formulas_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DependencyTrackerArchive::_internal_number_of_formulas() const {
  return number_of_formulas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DependencyTrackerArchive::number_of_formulas() const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.number_of_formulas)
  return _internal_number_of_formulas();
}
inline void DependencyTrackerArchive::_internal_set_number_of_formulas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_formulas_ = value;
}
inline void DependencyTrackerArchive::set_number_of_formulas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number_of_formulas(value);
  // @@protoc_insertion_point(field_set:TSCE.DependencyTrackerArchive.number_of_formulas)
}

// repeated .TSP.Reference formula_owner_dependencies = 6;
inline int DependencyTrackerArchive::_internal_formula_owner_dependencies_size() const {
  return formula_owner_dependencies_.size();
}
inline int DependencyTrackerArchive::formula_owner_dependencies_size() const {
  return _internal_formula_owner_dependencies_size();
}
inline ::TSP::Reference* DependencyTrackerArchive::mutable_formula_owner_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.DependencyTrackerArchive.formula_owner_dependencies)
  return formula_owner_dependencies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DependencyTrackerArchive::mutable_formula_owner_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.DependencyTrackerArchive.formula_owner_dependencies)
  return &formula_owner_dependencies_;
}
inline const ::TSP::Reference& DependencyTrackerArchive::_internal_formula_owner_dependencies(int index) const {
  return formula_owner_dependencies_.Get(index);
}
inline const ::TSP::Reference& DependencyTrackerArchive::formula_owner_dependencies(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.DependencyTrackerArchive.formula_owner_dependencies)
  return _internal_formula_owner_dependencies(index);
}
inline ::TSP::Reference* DependencyTrackerArchive::_internal_add_formula_owner_dependencies() {
  return formula_owner_dependencies_.Add();
}
inline ::TSP::Reference* DependencyTrackerArchive::add_formula_owner_dependencies() {
  // @@protoc_insertion_point(field_add:TSCE.DependencyTrackerArchive.formula_owner_dependencies)
  return _internal_add_formula_owner_dependencies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DependencyTrackerArchive::formula_owner_dependencies() const {
  // @@protoc_insertion_point(field_list:TSCE.DependencyTrackerArchive.formula_owner_dependencies)
  return formula_owner_dependencies_;
}

// -------------------------------------------------------------------

// RemoteDataSpecifierArchive

// required uint32 function_index = 1;
inline bool RemoteDataSpecifierArchive::_internal_has_function_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoteDataSpecifierArchive::has_function_index() const {
  return _internal_has_function_index();
}
inline void RemoteDataSpecifierArchive::clear_function_index() {
  function_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteDataSpecifierArchive::_internal_function_index() const {
  return function_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteDataSpecifierArchive::function_index() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataSpecifierArchive.function_index)
  return _internal_function_index();
}
inline void RemoteDataSpecifierArchive::_internal_set_function_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  function_index_ = value;
}
inline void RemoteDataSpecifierArchive::set_function_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_index(value);
  // @@protoc_insertion_point(field_set:TSCE.RemoteDataSpecifierArchive.function_index)
}

// required string symbol = 2;
inline bool RemoteDataSpecifierArchive::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoteDataSpecifierArchive::has_symbol() const {
  return _internal_has_symbol();
}
inline void RemoteDataSpecifierArchive::clear_symbol() {
  symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RemoteDataSpecifierArchive::symbol() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataSpecifierArchive.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void RemoteDataSpecifierArchive::set_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.RemoteDataSpecifierArchive.symbol)
}
inline std::string* RemoteDataSpecifierArchive::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataSpecifierArchive.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& RemoteDataSpecifierArchive::_internal_symbol() const {
  return symbol_.Get();
}
inline void RemoteDataSpecifierArchive::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* RemoteDataSpecifierArchive::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoteDataSpecifierArchive::release_symbol() {
  // @@protoc_insertion_point(field_release:TSCE.RemoteDataSpecifierArchive.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteDataSpecifierArchive::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.RemoteDataSpecifierArchive.symbol)
}

// required uint32 attribute = 3;
inline bool RemoteDataSpecifierArchive::_internal_has_attribute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoteDataSpecifierArchive::has_attribute() const {
  return _internal_has_attribute();
}
inline void RemoteDataSpecifierArchive::clear_attribute() {
  attribute_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteDataSpecifierArchive::_internal_attribute() const {
  return attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoteDataSpecifierArchive::attribute() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataSpecifierArchive.attribute)
  return _internal_attribute();
}
inline void RemoteDataSpecifierArchive::_internal_set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  attribute_ = value;
}
inline void RemoteDataSpecifierArchive::set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:TSCE.RemoteDataSpecifierArchive.attribute)
}

// optional double date = 4;
inline bool RemoteDataSpecifierArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoteDataSpecifierArchive::has_date() const {
  return _internal_has_date();
}
inline void RemoteDataSpecifierArchive::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RemoteDataSpecifierArchive::_internal_date() const {
  return date_;
}
inline double RemoteDataSpecifierArchive::date() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataSpecifierArchive.date)
  return _internal_date();
}
inline void RemoteDataSpecifierArchive::_internal_set_date(double value) {
  _has_bits_[0] |= 0x00000008u;
  date_ = value;
}
inline void RemoteDataSpecifierArchive::set_date(double value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:TSCE.RemoteDataSpecifierArchive.date)
}

// -------------------------------------------------------------------

// RemoteDataValueMapArchive_RemoteDataMapEntry

// required .TSCE.RemoteDataSpecifierArchive specifier = 1;
inline bool RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_has_specifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || specifier_ != nullptr);
  return value;
}
inline bool RemoteDataValueMapArchive_RemoteDataMapEntry::has_specifier() const {
  return _internal_has_specifier();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::clear_specifier() {
  if (specifier_ != nullptr) specifier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RemoteDataSpecifierArchive& RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_specifier() const {
  const ::TSCE::RemoteDataSpecifierArchive* p = specifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RemoteDataSpecifierArchive&>(
      ::TSCE::_RemoteDataSpecifierArchive_default_instance_);
}
inline const ::TSCE::RemoteDataSpecifierArchive& RemoteDataValueMapArchive_RemoteDataMapEntry::specifier() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier)
  return _internal_specifier();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::unsafe_arena_set_allocated_specifier(
    ::TSCE::RemoteDataSpecifierArchive* specifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specifier_);
  }
  specifier_ = specifier;
  if (specifier) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier)
}
inline ::TSCE::RemoteDataSpecifierArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::release_specifier() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RemoteDataSpecifierArchive* temp = specifier_;
  specifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RemoteDataSpecifierArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::unsafe_arena_release_specifier() {
  // @@protoc_insertion_point(field_release:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RemoteDataSpecifierArchive* temp = specifier_;
  specifier_ = nullptr;
  return temp;
}
inline ::TSCE::RemoteDataSpecifierArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_mutable_specifier() {
  _has_bits_[0] |= 0x00000001u;
  if (specifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RemoteDataSpecifierArchive>(GetArena());
    specifier_ = p;
  }
  return specifier_;
}
inline ::TSCE::RemoteDataSpecifierArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::mutable_specifier() {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier)
  return _internal_mutable_specifier();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::set_allocated_specifier(::TSCE::RemoteDataSpecifierArchive* specifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete specifier_;
  }
  if (specifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specifier);
    if (message_arena != submessage_arena) {
      specifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  specifier_ = specifier;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier)
}

// required .TSCE.CellValueArchive value = 2;
inline bool RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool RemoteDataValueMapArchive_RemoteDataMapEntry::has_value() const {
  return _internal_has_value();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::CellValueArchive& RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_value() const {
  const ::TSCE::CellValueArchive* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& RemoteDataValueMapArchive_RemoteDataMapEntry::value() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value)
  return _internal_value();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::unsafe_arena_set_allocated_value(
    ::TSCE::CellValueArchive* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value)
}
inline ::TSCE::CellValueArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellValueArchive* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellValueArchive* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::TSCE::CellValueArchive* RemoteDataValueMapArchive_RemoteDataMapEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value)
  return _internal_mutable_value();
}
inline void RemoteDataValueMapArchive_RemoteDataMapEntry::set_allocated_value(::TSCE::CellValueArchive* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value)
}

// -------------------------------------------------------------------

// RemoteDataValueMapArchive

// repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
inline int RemoteDataValueMapArchive::_internal_entry_size() const {
  return entry_.size();
}
inline int RemoteDataValueMapArchive::entry_size() const {
  return _internal_entry_size();
}
inline void RemoteDataValueMapArchive::clear_entry() {
  entry_.Clear();
}
inline ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* RemoteDataValueMapArchive::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataValueMapArchive.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >*
RemoteDataValueMapArchive::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RemoteDataValueMapArchive.entry)
  return &entry_;
}
inline const ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry& RemoteDataValueMapArchive::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry& RemoteDataValueMapArchive::entry(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataValueMapArchive.entry)
  return _internal_entry(index);
}
inline ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* RemoteDataValueMapArchive::_internal_add_entry() {
  return entry_.Add();
}
inline ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* RemoteDataValueMapArchive::add_entry() {
  // @@protoc_insertion_point(field_add:TSCE.RemoteDataValueMapArchive.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >&
RemoteDataValueMapArchive::entry() const {
  // @@protoc_insertion_point(field_list:TSCE.RemoteDataValueMapArchive.entry)
  return entry_;
}

// -------------------------------------------------------------------

// StockArchive_AttributeEntry

// required uint32 attribute = 1;
inline bool StockArchive_AttributeEntry::_internal_has_attribute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StockArchive_AttributeEntry::has_attribute() const {
  return _internal_has_attribute();
}
inline void StockArchive_AttributeEntry::clear_attribute() {
  attribute_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockArchive_AttributeEntry::_internal_attribute() const {
  return attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockArchive_AttributeEntry::attribute() const {
  // @@protoc_insertion_point(field_get:TSCE.StockArchive.AttributeEntry.attribute)
  return _internal_attribute();
}
inline void StockArchive_AttributeEntry::_internal_set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  attribute_ = value;
}
inline void StockArchive_AttributeEntry::set_attribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:TSCE.StockArchive.AttributeEntry.attribute)
}

// required string value = 2;
inline bool StockArchive_AttributeEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StockArchive_AttributeEntry::has_value() const {
  return _internal_has_value();
}
inline void StockArchive_AttributeEntry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StockArchive_AttributeEntry::value() const {
  // @@protoc_insertion_point(field_get:TSCE.StockArchive.AttributeEntry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StockArchive_AttributeEntry::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.StockArchive.AttributeEntry.value)
}
inline std::string* StockArchive_AttributeEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.StockArchive.AttributeEntry.value)
  return _internal_mutable_value();
}
inline const std::string& StockArchive_AttributeEntry::_internal_value() const {
  return value_.Get();
}
inline void StockArchive_AttributeEntry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StockArchive_AttributeEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StockArchive_AttributeEntry::release_value() {
  // @@protoc_insertion_point(field_release:TSCE.StockArchive.AttributeEntry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StockArchive_AttributeEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.StockArchive.AttributeEntry.value)
}

// -------------------------------------------------------------------

// StockArchive

// required string symbol = 1;
inline bool StockArchive::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StockArchive::has_symbol() const {
  return _internal_has_symbol();
}
inline void StockArchive::clear_symbol() {
  symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StockArchive::symbol() const {
  // @@protoc_insertion_point(field_get:TSCE.StockArchive.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StockArchive::set_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.StockArchive.symbol)
}
inline std::string* StockArchive::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TSCE.StockArchive.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& StockArchive::_internal_symbol() const {
  return symbol_.Get();
}
inline void StockArchive::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StockArchive::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000001u;
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StockArchive::release_symbol() {
  // @@protoc_insertion_point(field_release:TSCE.StockArchive.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StockArchive::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.StockArchive.symbol)
}

// optional double date = 2;
inline bool StockArchive::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StockArchive::has_date() const {
  return _internal_has_date();
}
inline void StockArchive::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double StockArchive::_internal_date() const {
  return date_;
}
inline double StockArchive::date() const {
  // @@protoc_insertion_point(field_get:TSCE.StockArchive.date)
  return _internal_date();
}
inline void StockArchive::_internal_set_date(double value) {
  _has_bits_[0] |= 0x00000002u;
  date_ = value;
}
inline void StockArchive::set_date(double value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:TSCE.StockArchive.date)
}

// repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
inline int StockArchive::_internal_attribute_size() const {
  return attribute_.size();
}
inline int StockArchive::attribute_size() const {
  return _internal_attribute_size();
}
inline void StockArchive::clear_attribute() {
  attribute_.Clear();
}
inline ::TSCE::StockArchive_AttributeEntry* StockArchive::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.StockArchive.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive_AttributeEntry >*
StockArchive::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.StockArchive.attribute)
  return &attribute_;
}
inline const ::TSCE::StockArchive_AttributeEntry& StockArchive::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::TSCE::StockArchive_AttributeEntry& StockArchive::attribute(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.StockArchive.attribute)
  return _internal_attribute(index);
}
inline ::TSCE::StockArchive_AttributeEntry* StockArchive::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::TSCE::StockArchive_AttributeEntry* StockArchive::add_attribute() {
  // @@protoc_insertion_point(field_add:TSCE.StockArchive.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive_AttributeEntry >&
StockArchive::attribute() const {
  // @@protoc_insertion_point(field_list:TSCE.StockArchive.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// RemoteDataStoreArchive

// required .TSCE.RemoteDataValueMapArchive value_map = 1;
inline bool RemoteDataStoreArchive::_internal_has_value_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_map_ != nullptr);
  return value;
}
inline bool RemoteDataStoreArchive::has_value_map() const {
  return _internal_has_value_map();
}
inline void RemoteDataStoreArchive::clear_value_map() {
  if (value_map_ != nullptr) value_map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RemoteDataValueMapArchive& RemoteDataStoreArchive::_internal_value_map() const {
  const ::TSCE::RemoteDataValueMapArchive* p = value_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RemoteDataValueMapArchive&>(
      ::TSCE::_RemoteDataValueMapArchive_default_instance_);
}
inline const ::TSCE::RemoteDataValueMapArchive& RemoteDataStoreArchive::value_map() const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataStoreArchive.value_map)
  return _internal_value_map();
}
inline void RemoteDataStoreArchive::unsafe_arena_set_allocated_value_map(
    ::TSCE::RemoteDataValueMapArchive* value_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_map_);
  }
  value_map_ = value_map;
  if (value_map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RemoteDataStoreArchive.value_map)
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataStoreArchive::release_value_map() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RemoteDataValueMapArchive* temp = value_map_;
  value_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataStoreArchive::unsafe_arena_release_value_map() {
  // @@protoc_insertion_point(field_release:TSCE.RemoteDataStoreArchive.value_map)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RemoteDataValueMapArchive* temp = value_map_;
  value_map_ = nullptr;
  return temp;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataStoreArchive::_internal_mutable_value_map() {
  _has_bits_[0] |= 0x00000001u;
  if (value_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RemoteDataValueMapArchive>(GetArena());
    value_map_ = p;
  }
  return value_map_;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataStoreArchive::mutable_value_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataStoreArchive.value_map)
  return _internal_mutable_value_map();
}
inline void RemoteDataStoreArchive::set_allocated_value_map(::TSCE::RemoteDataValueMapArchive* value_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_map_;
  }
  if (value_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_map);
    if (message_arena != submessage_arena) {
      value_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_map_ = value_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RemoteDataStoreArchive.value_map)
}

// repeated .TSCE.StockArchive stocks = 2;
inline int RemoteDataStoreArchive::_internal_stocks_size() const {
  return stocks_.size();
}
inline int RemoteDataStoreArchive::stocks_size() const {
  return _internal_stocks_size();
}
inline void RemoteDataStoreArchive::clear_stocks() {
  stocks_.Clear();
}
inline ::TSCE::StockArchive* RemoteDataStoreArchive::mutable_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RemoteDataStoreArchive.stocks)
  return stocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >*
RemoteDataStoreArchive::mutable_stocks() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RemoteDataStoreArchive.stocks)
  return &stocks_;
}
inline const ::TSCE::StockArchive& RemoteDataStoreArchive::_internal_stocks(int index) const {
  return stocks_.Get(index);
}
inline const ::TSCE::StockArchive& RemoteDataStoreArchive::stocks(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RemoteDataStoreArchive.stocks)
  return _internal_stocks(index);
}
inline ::TSCE::StockArchive* RemoteDataStoreArchive::_internal_add_stocks() {
  return stocks_.Add();
}
inline ::TSCE::StockArchive* RemoteDataStoreArchive::add_stocks() {
  // @@protoc_insertion_point(field_add:TSCE.RemoteDataStoreArchive.stocks)
  return _internal_add_stocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >&
RemoteDataStoreArchive::stocks() const {
  // @@protoc_insertion_point(field_list:TSCE.RemoteDataStoreArchive.stocks)
  return stocks_;
}

// -------------------------------------------------------------------

// NameTrackedReferencePair

// required string name = 1;
inline bool NameTrackedReferencePair::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NameTrackedReferencePair::has_name() const {
  return _internal_has_name();
}
inline void NameTrackedReferencePair::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NameTrackedReferencePair::name() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NameTrackedReferencePair::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.NameTrackedReferencePair.name)
}
inline std::string* NameTrackedReferencePair::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.NameTrackedReferencePair.name)
  return _internal_mutable_name();
}
inline const std::string& NameTrackedReferencePair::_internal_name() const {
  return name_.Get();
}
inline void NameTrackedReferencePair::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NameTrackedReferencePair::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NameTrackedReferencePair::release_name() {
  // @@protoc_insertion_point(field_release:TSCE.NameTrackedReferencePair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NameTrackedReferencePair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.NameTrackedReferencePair.name)
}

// optional .TSP.Reference tracked_reference = 2;
inline bool NameTrackedReferencePair::_internal_has_tracked_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tracked_reference_ != nullptr);
  return value;
}
inline bool NameTrackedReferencePair::has_tracked_reference() const {
  return _internal_has_tracked_reference();
}
inline const ::TSP::Reference& NameTrackedReferencePair::_internal_tracked_reference() const {
  const ::TSP::Reference* p = tracked_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NameTrackedReferencePair::tracked_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.tracked_reference)
  return _internal_tracked_reference();
}
inline void NameTrackedReferencePair::unsafe_arena_set_allocated_tracked_reference(
    ::TSP::Reference* tracked_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference_);
  }
  tracked_reference_ = tracked_reference;
  if (tracked_reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NameTrackedReferencePair.tracked_reference)
}
inline ::TSP::Reference* NameTrackedReferencePair::release_tracked_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tracked_reference_;
  tracked_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* NameTrackedReferencePair::unsafe_arena_release_tracked_reference() {
  // @@protoc_insertion_point(field_release:TSCE.NameTrackedReferencePair.tracked_reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tracked_reference_;
  tracked_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NameTrackedReferencePair::_internal_mutable_tracked_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (tracked_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tracked_reference_ = p;
  }
  return tracked_reference_;
}
inline ::TSP::Reference* NameTrackedReferencePair::mutable_tracked_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.NameTrackedReferencePair.tracked_reference)
  return _internal_mutable_tracked_reference();
}
inline void NameTrackedReferencePair::set_allocated_tracked_reference(::TSP::Reference* tracked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference_);
  }
  if (tracked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference)->GetArena();
    if (message_arena != submessage_arena) {
      tracked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tracked_reference_ = tracked_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NameTrackedReferencePair.tracked_reference)
}

// optional uint32 tracked_reference_id = 3;
inline bool NameTrackedReferencePair::_internal_has_tracked_reference_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NameTrackedReferencePair::has_tracked_reference_id() const {
  return _internal_has_tracked_reference_id();
}
inline void NameTrackedReferencePair::clear_tracked_reference_id() {
  tracked_reference_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameTrackedReferencePair::_internal_tracked_reference_id() const {
  return tracked_reference_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NameTrackedReferencePair::tracked_reference_id() const {
  // @@protoc_insertion_point(field_get:TSCE.NameTrackedReferencePair.tracked_reference_id)
  return _internal_tracked_reference_id();
}
inline void NameTrackedReferencePair::_internal_set_tracked_reference_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tracked_reference_id_ = value;
}
inline void NameTrackedReferencePair::set_tracked_reference_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tracked_reference_id(value);
  // @@protoc_insertion_point(field_set:TSCE.NameTrackedReferencePair.tracked_reference_id)
}

// -------------------------------------------------------------------

// NamesByTrackedReferenceArchive

// required .TSP.CFUUIDArchive table_id = 1;
inline bool NamesByTrackedReferenceArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool NamesByTrackedReferenceArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& NamesByTrackedReferenceArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& NamesByTrackedReferenceArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.NamesByTrackedReferenceArchive.table_id)
  return _internal_table_id();
}
inline void NamesByTrackedReferenceArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NamesByTrackedReferenceArchive.table_id)
}
inline ::TSP::CFUUIDArchive* NamesByTrackedReferenceArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* NamesByTrackedReferenceArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.NamesByTrackedReferenceArchive.table_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* NamesByTrackedReferenceArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000001u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* NamesByTrackedReferenceArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.NamesByTrackedReferenceArchive.table_id)
  return _internal_mutable_table_id();
}
inline void NamesByTrackedReferenceArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NamesByTrackedReferenceArchive.table_id)
}

// repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
inline int NamesByTrackedReferenceArchive::_internal_name_tracked_reference_pair_size() const {
  return name_tracked_reference_pair_.size();
}
inline int NamesByTrackedReferenceArchive::name_tracked_reference_pair_size() const {
  return _internal_name_tracked_reference_pair_size();
}
inline void NamesByTrackedReferenceArchive::clear_name_tracked_reference_pair() {
  name_tracked_reference_pair_.Clear();
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::mutable_name_tracked_reference_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return name_tracked_reference_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >*
NamesByTrackedReferenceArchive::mutable_name_tracked_reference_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return &name_tracked_reference_pair_;
}
inline const ::TSCE::NameTrackedReferencePair& NamesByTrackedReferenceArchive::_internal_name_tracked_reference_pair(int index) const {
  return name_tracked_reference_pair_.Get(index);
}
inline const ::TSCE::NameTrackedReferencePair& NamesByTrackedReferenceArchive::name_tracked_reference_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _internal_name_tracked_reference_pair(index);
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::_internal_add_name_tracked_reference_pair() {
  return name_tracked_reference_pair_.Add();
}
inline ::TSCE::NameTrackedReferencePair* NamesByTrackedReferenceArchive::add_name_tracked_reference_pair() {
  // @@protoc_insertion_point(field_add:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return _internal_add_name_tracked_reference_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NameTrackedReferencePair >&
NamesByTrackedReferenceArchive::name_tracked_reference_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair)
  return name_tracked_reference_pair_;
}

// -------------------------------------------------------------------

// NamedReferenceManagerArchive

// required .TSP.Reference reference_tracker = 1;
inline bool NamedReferenceManagerArchive::_internal_has_reference_tracker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reference_tracker_ != nullptr);
  return value;
}
inline bool NamedReferenceManagerArchive::has_reference_tracker() const {
  return _internal_has_reference_tracker();
}
inline const ::TSP::Reference& NamedReferenceManagerArchive::_internal_reference_tracker() const {
  const ::TSP::Reference* p = reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NamedReferenceManagerArchive::reference_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.NamedReferenceManagerArchive.reference_tracker)
  return _internal_reference_tracker();
}
inline void NamedReferenceManagerArchive::unsafe_arena_set_allocated_reference_tracker(
    ::TSP::Reference* reference_tracker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker_);
  }
  reference_tracker_ = reference_tracker;
  if (reference_tracker) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NamedReferenceManagerArchive.reference_tracker)
}
inline ::TSP::Reference* NamedReferenceManagerArchive::release_reference_tracker() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_tracker_;
  reference_tracker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::unsafe_arena_release_reference_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.NamedReferenceManagerArchive.reference_tracker)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_tracker_;
  reference_tracker_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::_internal_mutable_reference_tracker() {
  _has_bits_[0] |= 0x00000001u;
  if (reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    reference_tracker_ = p;
  }
  return reference_tracker_;
}
inline ::TSP::Reference* NamedReferenceManagerArchive::mutable_reference_tracker() {
  // @@protoc_insertion_point(field_mutable:TSCE.NamedReferenceManagerArchive.reference_tracker)
  return _internal_mutable_reference_tracker();
}
inline void NamedReferenceManagerArchive::set_allocated_reference_tracker(::TSP::Reference* reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker_);
  }
  if (reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker)->GetArena();
    if (message_arena != submessage_arena) {
      reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reference_tracker_ = reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NamedReferenceManagerArchive.reference_tracker)
}

// repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
inline int NamedReferenceManagerArchive::_internal_names_by_tracked_reference_by_table_size() const {
  return names_by_tracked_reference_by_table_.size();
}
inline int NamedReferenceManagerArchive::names_by_tracked_reference_by_table_size() const {
  return _internal_names_by_tracked_reference_by_table_size();
}
inline void NamedReferenceManagerArchive::clear_names_by_tracked_reference_by_table() {
  names_by_tracked_reference_by_table_.Clear();
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::mutable_names_by_tracked_reference_by_table(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return names_by_tracked_reference_by_table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >*
NamedReferenceManagerArchive::mutable_names_by_tracked_reference_by_table() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return &names_by_tracked_reference_by_table_;
}
inline const ::TSCE::NamesByTrackedReferenceArchive& NamedReferenceManagerArchive::_internal_names_by_tracked_reference_by_table(int index) const {
  return names_by_tracked_reference_by_table_.Get(index);
}
inline const ::TSCE::NamesByTrackedReferenceArchive& NamedReferenceManagerArchive::names_by_tracked_reference_by_table(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _internal_names_by_tracked_reference_by_table(index);
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::_internal_add_names_by_tracked_reference_by_table() {
  return names_by_tracked_reference_by_table_.Add();
}
inline ::TSCE::NamesByTrackedReferenceArchive* NamedReferenceManagerArchive::add_names_by_tracked_reference_by_table() {
  // @@protoc_insertion_point(field_add:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return _internal_add_names_by_tracked_reference_by_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NamesByTrackedReferenceArchive >&
NamedReferenceManagerArchive::names_by_tracked_reference_by_table() const {
  // @@protoc_insertion_point(field_list:TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table)
  return names_by_tracked_reference_by_table_;
}

// -------------------------------------------------------------------

// UuidSetStoreArchive_UuidSet

// repeated .TSP.UUID uuid = 1;
inline int UuidSetStoreArchive_UuidSet::_internal_uuid_size() const {
  return uuid_.size();
}
inline int UuidSetStoreArchive_UuidSet::uuid_size() const {
  return _internal_uuid_size();
}
inline ::TSP::UUID* UuidSetStoreArchive_UuidSet::mutable_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidSetStoreArchive.UuidSet.uuid)
  return uuid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UuidSetStoreArchive_UuidSet::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidSetStoreArchive.UuidSet.uuid)
  return &uuid_;
}
inline const ::TSP::UUID& UuidSetStoreArchive_UuidSet::_internal_uuid(int index) const {
  return uuid_.Get(index);
}
inline const ::TSP::UUID& UuidSetStoreArchive_UuidSet::uuid(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidSetStoreArchive.UuidSet.uuid)
  return _internal_uuid(index);
}
inline ::TSP::UUID* UuidSetStoreArchive_UuidSet::_internal_add_uuid() {
  return uuid_.Add();
}
inline ::TSP::UUID* UuidSetStoreArchive_UuidSet::add_uuid() {
  // @@protoc_insertion_point(field_add:TSCE.UuidSetStoreArchive.UuidSet.uuid)
  return _internal_add_uuid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UuidSetStoreArchive_UuidSet::uuid() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidSetStoreArchive.UuidSet.uuid)
  return uuid_;
}

// required uint32 index_of_set = 2;
inline bool UuidSetStoreArchive_UuidSet::_internal_has_index_of_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UuidSetStoreArchive_UuidSet::has_index_of_set() const {
  return _internal_has_index_of_set();
}
inline void UuidSetStoreArchive_UuidSet::clear_index_of_set() {
  index_of_set_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UuidSetStoreArchive_UuidSet::_internal_index_of_set() const {
  return index_of_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UuidSetStoreArchive_UuidSet::index_of_set() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidSetStoreArchive.UuidSet.index_of_set)
  return _internal_index_of_set();
}
inline void UuidSetStoreArchive_UuidSet::_internal_set_index_of_set(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_of_set_ = value;
}
inline void UuidSetStoreArchive_UuidSet::set_index_of_set(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index_of_set(value);
  // @@protoc_insertion_point(field_set:TSCE.UuidSetStoreArchive.UuidSet.index_of_set)
}

// -------------------------------------------------------------------

// UuidSetStoreArchive

// repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
inline int UuidSetStoreArchive::_internal_uuidset_size() const {
  return uuidset_.size();
}
inline int UuidSetStoreArchive::uuidset_size() const {
  return _internal_uuidset_size();
}
inline void UuidSetStoreArchive::clear_uuidset() {
  uuidset_.Clear();
}
inline ::TSCE::UuidSetStoreArchive_UuidSet* UuidSetStoreArchive::mutable_uuidset(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidSetStoreArchive.uuidSet)
  return uuidset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidSetStoreArchive_UuidSet >*
UuidSetStoreArchive::mutable_uuidset() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidSetStoreArchive.uuidSet)
  return &uuidset_;
}
inline const ::TSCE::UuidSetStoreArchive_UuidSet& UuidSetStoreArchive::_internal_uuidset(int index) const {
  return uuidset_.Get(index);
}
inline const ::TSCE::UuidSetStoreArchive_UuidSet& UuidSetStoreArchive::uuidset(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidSetStoreArchive.uuidSet)
  return _internal_uuidset(index);
}
inline ::TSCE::UuidSetStoreArchive_UuidSet* UuidSetStoreArchive::_internal_add_uuidset() {
  return uuidset_.Add();
}
inline ::TSCE::UuidSetStoreArchive_UuidSet* UuidSetStoreArchive::add_uuidset() {
  // @@protoc_insertion_point(field_add:TSCE.UuidSetStoreArchive.uuidSet)
  return _internal_add_uuidset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidSetStoreArchive_UuidSet >&
UuidSetStoreArchive::uuidset() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidSetStoreArchive.uuidSet)
  return uuidset_;
}

// -------------------------------------------------------------------

// UuidReferenceMapArchive_CellRefsForUuid

// required .TSP.UUID uuid = 1;
inline bool UuidReferenceMapArchive_CellRefsForUuid::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool UuidReferenceMapArchive_CellRefsForUuid::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& UuidReferenceMapArchive_CellRefsForUuid::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UuidReferenceMapArchive_CellRefsForUuid::uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid)
  return _internal_uuid();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid)
}
inline ::TSP::UUID* UuidReferenceMapArchive_CellRefsForUuid::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UuidReferenceMapArchive_CellRefsForUuid::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UuidReferenceMapArchive_CellRefsForUuid::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* UuidReferenceMapArchive_CellRefsForUuid::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid)
  return _internal_mutable_uuid();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid)
}

// repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
inline int UuidReferenceMapArchive_CellRefsForUuid::_internal_cell_ref_size() const {
  return cell_ref_.size();
}
inline int UuidReferenceMapArchive_CellRefsForUuid::cell_ref_size() const {
  return _internal_cell_ref_size();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::clear_cell_ref() {
  cell_ref_.Clear();
}
inline ::TSCE::InternalCellReferenceArchive* UuidReferenceMapArchive_CellRefsForUuid::mutable_cell_ref(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref)
  return cell_ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >*
UuidReferenceMapArchive_CellRefsForUuid::mutable_cell_ref() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref)
  return &cell_ref_;
}
inline const ::TSCE::InternalCellReferenceArchive& UuidReferenceMapArchive_CellRefsForUuid::_internal_cell_ref(int index) const {
  return cell_ref_.Get(index);
}
inline const ::TSCE::InternalCellReferenceArchive& UuidReferenceMapArchive_CellRefsForUuid::cell_ref(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref)
  return _internal_cell_ref(index);
}
inline ::TSCE::InternalCellReferenceArchive* UuidReferenceMapArchive_CellRefsForUuid::_internal_add_cell_ref() {
  return cell_ref_.Add();
}
inline ::TSCE::InternalCellReferenceArchive* UuidReferenceMapArchive_CellRefsForUuid::add_cell_ref() {
  // @@protoc_insertion_point(field_add:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref)
  return _internal_add_cell_ref();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::InternalCellReferenceArchive >&
UuidReferenceMapArchive_CellRefsForUuid::cell_ref() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref)
  return cell_ref_;
}

// optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
inline bool UuidReferenceMapArchive_CellRefsForUuid::_internal_has_cell_refs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_refs_ != nullptr);
  return value;
}
inline bool UuidReferenceMapArchive_CellRefsForUuid::has_cell_refs() const {
  return _internal_has_cell_refs();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::clear_cell_refs() {
  if (cell_refs_ != nullptr) cell_refs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalCellRefSetArchive& UuidReferenceMapArchive_CellRefsForUuid::_internal_cell_refs() const {
  const ::TSCE::InternalCellRefSetArchive* p = cell_refs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& UuidReferenceMapArchive_CellRefsForUuid::cell_refs() const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs)
  return _internal_cell_refs();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::unsafe_arena_set_allocated_cell_refs(
    ::TSCE::InternalCellRefSetArchive* cell_refs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_refs_);
  }
  cell_refs_ = cell_refs;
  if (cell_refs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs)
}
inline ::TSCE::InternalCellRefSetArchive* UuidReferenceMapArchive_CellRefsForUuid::release_cell_refs() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = cell_refs_;
  cell_refs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* UuidReferenceMapArchive_CellRefsForUuid::unsafe_arena_release_cell_refs() {
  // @@protoc_insertion_point(field_release:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = cell_refs_;
  cell_refs_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* UuidReferenceMapArchive_CellRefsForUuid::_internal_mutable_cell_refs() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_refs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    cell_refs_ = p;
  }
  return cell_refs_;
}
inline ::TSCE::InternalCellRefSetArchive* UuidReferenceMapArchive_CellRefsForUuid::mutable_cell_refs() {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs)
  return _internal_mutable_cell_refs();
}
inline void UuidReferenceMapArchive_CellRefsForUuid::set_allocated_cell_refs(::TSCE::InternalCellRefSetArchive* cell_refs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_refs_;
  }
  if (cell_refs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_refs);
    if (message_arena != submessage_arena) {
      cell_refs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_refs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_refs_ = cell_refs;
  // @@protoc_insertion_point(field_set_allocated:TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs)
}

// -------------------------------------------------------------------

// UuidReferenceMapArchive

// repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
inline int UuidReferenceMapArchive::_internal_cell_refs_for_uuid_size() const {
  return cell_refs_for_uuid_.size();
}
inline int UuidReferenceMapArchive::cell_refs_for_uuid_size() const {
  return _internal_cell_refs_for_uuid_size();
}
inline void UuidReferenceMapArchive::clear_cell_refs_for_uuid() {
  cell_refs_for_uuid_.Clear();
}
inline ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* UuidReferenceMapArchive::mutable_cell_refs_for_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.UuidReferenceMapArchive.cell_refs_for_uuid)
  return cell_refs_for_uuid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >*
UuidReferenceMapArchive::mutable_cell_refs_for_uuid() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.UuidReferenceMapArchive.cell_refs_for_uuid)
  return &cell_refs_for_uuid_;
}
inline const ::TSCE::UuidReferenceMapArchive_CellRefsForUuid& UuidReferenceMapArchive::_internal_cell_refs_for_uuid(int index) const {
  return cell_refs_for_uuid_.Get(index);
}
inline const ::TSCE::UuidReferenceMapArchive_CellRefsForUuid& UuidReferenceMapArchive::cell_refs_for_uuid(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.UuidReferenceMapArchive.cell_refs_for_uuid)
  return _internal_cell_refs_for_uuid(index);
}
inline ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* UuidReferenceMapArchive::_internal_add_cell_refs_for_uuid() {
  return cell_refs_for_uuid_.Add();
}
inline ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* UuidReferenceMapArchive::add_cell_refs_for_uuid() {
  // @@protoc_insertion_point(field_add:TSCE.UuidReferenceMapArchive.cell_refs_for_uuid)
  return _internal_add_cell_refs_for_uuid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >&
UuidReferenceMapArchive::cell_refs_for_uuid() const {
  // @@protoc_insertion_point(field_list:TSCE.UuidReferenceMapArchive.cell_refs_for_uuid)
  return cell_refs_for_uuid_;
}

// -------------------------------------------------------------------

// GroupByNodeMapArchive_CellRefsForGroupNode

// required .TSP.UUID group_node_uid = 1;
inline bool GroupByNodeMapArchive_CellRefsForGroupNode::_internal_has_group_node_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_node_uid_ != nullptr);
  return value;
}
inline bool GroupByNodeMapArchive_CellRefsForGroupNode::has_group_node_uid() const {
  return _internal_has_group_node_uid();
}
inline const ::TSP::UUID& GroupByNodeMapArchive_CellRefsForGroupNode::_internal_group_node_uid() const {
  const ::TSP::UUID* p = group_node_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& GroupByNodeMapArchive_CellRefsForGroupNode::group_node_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid)
  return _internal_group_node_uid();
}
inline void GroupByNodeMapArchive_CellRefsForGroupNode::unsafe_arena_set_allocated_group_node_uid(
    ::TSP::UUID* group_node_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid_);
  }
  group_node_uid_ = group_node_uid;
  if (group_node_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid)
}
inline ::TSP::UUID* GroupByNodeMapArchive_CellRefsForGroupNode::release_group_node_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_node_uid_;
  group_node_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* GroupByNodeMapArchive_CellRefsForGroupNode::unsafe_arena_release_group_node_uid() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_node_uid_;
  group_node_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* GroupByNodeMapArchive_CellRefsForGroupNode::_internal_mutable_group_node_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_node_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_node_uid_ = p;
  }
  return group_node_uid_;
}
inline ::TSP::UUID* GroupByNodeMapArchive_CellRefsForGroupNode::mutable_group_node_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid)
  return _internal_mutable_group_node_uid();
}
inline void GroupByNodeMapArchive_CellRefsForGroupNode::set_allocated_group_node_uid(::TSP::UUID* group_node_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid_);
  }
  if (group_node_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_node_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_node_uid_ = group_node_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid)
}

// optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
inline bool GroupByNodeMapArchive_CellRefsForGroupNode::_internal_has_cell_refs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_refs_ != nullptr);
  return value;
}
inline bool GroupByNodeMapArchive_CellRefsForGroupNode::has_cell_refs() const {
  return _internal_has_cell_refs();
}
inline void GroupByNodeMapArchive_CellRefsForGroupNode::clear_cell_refs() {
  if (cell_refs_ != nullptr) cell_refs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::InternalCellRefSetArchive& GroupByNodeMapArchive_CellRefsForGroupNode::_internal_cell_refs() const {
  const ::TSCE::InternalCellRefSetArchive* p = cell_refs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::InternalCellRefSetArchive&>(
      ::TSCE::_InternalCellRefSetArchive_default_instance_);
}
inline const ::TSCE::InternalCellRefSetArchive& GroupByNodeMapArchive_CellRefsForGroupNode::cell_refs() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs)
  return _internal_cell_refs();
}
inline void GroupByNodeMapArchive_CellRefsForGroupNode::unsafe_arena_set_allocated_cell_refs(
    ::TSCE::InternalCellRefSetArchive* cell_refs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_refs_);
  }
  cell_refs_ = cell_refs;
  if (cell_refs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs)
}
inline ::TSCE::InternalCellRefSetArchive* GroupByNodeMapArchive_CellRefsForGroupNode::release_cell_refs() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = cell_refs_;
  cell_refs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* GroupByNodeMapArchive_CellRefsForGroupNode::unsafe_arena_release_cell_refs() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::InternalCellRefSetArchive* temp = cell_refs_;
  cell_refs_ = nullptr;
  return temp;
}
inline ::TSCE::InternalCellRefSetArchive* GroupByNodeMapArchive_CellRefsForGroupNode::_internal_mutable_cell_refs() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_refs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::InternalCellRefSetArchive>(GetArena());
    cell_refs_ = p;
  }
  return cell_refs_;
}
inline ::TSCE::InternalCellRefSetArchive* GroupByNodeMapArchive_CellRefsForGroupNode::mutable_cell_refs() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs)
  return _internal_mutable_cell_refs();
}
inline void GroupByNodeMapArchive_CellRefsForGroupNode::set_allocated_cell_refs(::TSCE::InternalCellRefSetArchive* cell_refs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_refs_;
  }
  if (cell_refs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_refs);
    if (message_arena != submessage_arena) {
      cell_refs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_refs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_refs_ = cell_refs;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs)
}

// -------------------------------------------------------------------

// GroupByNodeMapArchive_GroupNodesForGroupBy

// required .TSP.UUID group_by_uid = 1;
inline bool GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool GroupByNodeMapArchive_GroupNodesForGroupBy::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& GroupByNodeMapArchive_GroupNodesForGroupBy::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid)
  return _internal_group_by_uid();
}
inline void GroupByNodeMapArchive_GroupNodesForGroupBy::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid)
}
inline ::TSP::UUID* GroupByNodeMapArchive_GroupNodesForGroupBy::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* GroupByNodeMapArchive_GroupNodesForGroupBy::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* GroupByNodeMapArchive_GroupNodesForGroupBy::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void GroupByNodeMapArchive_GroupNodesForGroupBy::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid)
}

// repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
inline int GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_refs_for_group_node_size() const {
  return refs_for_group_node_.size();
}
inline int GroupByNodeMapArchive_GroupNodesForGroupBy::refs_for_group_node_size() const {
  return _internal_refs_for_group_node_size();
}
inline void GroupByNodeMapArchive_GroupNodesForGroupBy::clear_refs_for_group_node() {
  refs_for_group_node_.Clear();
}
inline ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* GroupByNodeMapArchive_GroupNodesForGroupBy::mutable_refs_for_group_node(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node)
  return refs_for_group_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >*
GroupByNodeMapArchive_GroupNodesForGroupBy::mutable_refs_for_group_node() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node)
  return &refs_for_group_node_;
}
inline const ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode& GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_refs_for_group_node(int index) const {
  return refs_for_group_node_.Get(index);
}
inline const ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode& GroupByNodeMapArchive_GroupNodesForGroupBy::refs_for_group_node(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node)
  return _internal_refs_for_group_node(index);
}
inline ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* GroupByNodeMapArchive_GroupNodesForGroupBy::_internal_add_refs_for_group_node() {
  return refs_for_group_node_.Add();
}
inline ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* GroupByNodeMapArchive_GroupNodesForGroupBy::add_refs_for_group_node() {
  // @@protoc_insertion_point(field_add:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node)
  return _internal_add_refs_for_group_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >&
GroupByNodeMapArchive_GroupNodesForGroupBy::refs_for_group_node() const {
  // @@protoc_insertion_point(field_list:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node)
  return refs_for_group_node_;
}

// -------------------------------------------------------------------

// GroupByNodeMapArchive

// repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
inline int GroupByNodeMapArchive::_internal_refs_for_group_by_size() const {
  return refs_for_group_by_.size();
}
inline int GroupByNodeMapArchive::refs_for_group_by_size() const {
  return _internal_refs_for_group_by_size();
}
inline void GroupByNodeMapArchive::clear_refs_for_group_by() {
  refs_for_group_by_.Clear();
}
inline ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* GroupByNodeMapArchive::mutable_refs_for_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByNodeMapArchive.refs_for_group_by)
  return refs_for_group_by_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >*
GroupByNodeMapArchive::mutable_refs_for_group_by() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.GroupByNodeMapArchive.refs_for_group_by)
  return &refs_for_group_by_;
}
inline const ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy& GroupByNodeMapArchive::_internal_refs_for_group_by(int index) const {
  return refs_for_group_by_.Get(index);
}
inline const ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy& GroupByNodeMapArchive::refs_for_group_by(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByNodeMapArchive.refs_for_group_by)
  return _internal_refs_for_group_by(index);
}
inline ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* GroupByNodeMapArchive::_internal_add_refs_for_group_by() {
  return refs_for_group_by_.Add();
}
inline ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* GroupByNodeMapArchive::add_refs_for_group_by() {
  // @@protoc_insertion_point(field_add:TSCE.GroupByNodeMapArchive.refs_for_group_by)
  return _internal_add_refs_for_group_by();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >&
GroupByNodeMapArchive::refs_for_group_by() const {
  // @@protoc_insertion_point(field_list:TSCE.GroupByNodeMapArchive.refs_for_group_by)
  return refs_for_group_by_;
}

// -------------------------------------------------------------------

// CalculationEngineArchive

// optional bool base_date_1904 = 1;
inline bool CalculationEngineArchive::_internal_has_base_date_1904() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_base_date_1904() const {
  return _internal_has_base_date_1904();
}
inline void CalculationEngineArchive::clear_base_date_1904() {
  base_date_1904_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CalculationEngineArchive::_internal_base_date_1904() const {
  return base_date_1904_;
}
inline bool CalculationEngineArchive::base_date_1904() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.base_date_1904)
  return _internal_base_date_1904();
}
inline void CalculationEngineArchive::_internal_set_base_date_1904(bool value) {
  _has_bits_[0] |= 0x00002000u;
  base_date_1904_ = value;
}
inline void CalculationEngineArchive::set_base_date_1904(bool value) {
  _internal_set_base_date_1904(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.base_date_1904)
}

// required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
inline bool CalculationEngineArchive::_internal_has_dependency_tracker() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || dependency_tracker_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_dependency_tracker() const {
  return _internal_has_dependency_tracker();
}
inline void CalculationEngineArchive::clear_dependency_tracker() {
  if (dependency_tracker_ != nullptr) dependency_tracker_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::DependencyTrackerArchive& CalculationEngineArchive::_internal_dependency_tracker() const {
  const ::TSCE::DependencyTrackerArchive* p = dependency_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::DependencyTrackerArchive&>(
      ::TSCE::_DependencyTrackerArchive_default_instance_);
}
inline const ::TSCE::DependencyTrackerArchive& CalculationEngineArchive::dependency_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.dependency_tracker)
  return _internal_dependency_tracker();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_dependency_tracker(
    ::TSCE::DependencyTrackerArchive* dependency_tracker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dependency_tracker_);
  }
  dependency_tracker_ = dependency_tracker;
  if (dependency_tracker) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.dependency_tracker)
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::release_dependency_tracker() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::DependencyTrackerArchive* temp = dependency_tracker_;
  dependency_tracker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::unsafe_arena_release_dependency_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.dependency_tracker)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::DependencyTrackerArchive* temp = dependency_tracker_;
  dependency_tracker_ = nullptr;
  return temp;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::_internal_mutable_dependency_tracker() {
  _has_bits_[0] |= 0x00000008u;
  if (dependency_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::DependencyTrackerArchive>(GetArena());
    dependency_tracker_ = p;
  }
  return dependency_tracker_;
}
inline ::TSCE::DependencyTrackerArchive* CalculationEngineArchive::mutable_dependency_tracker() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.dependency_tracker)
  return _internal_mutable_dependency_tracker();
}
inline void CalculationEngineArchive::set_allocated_dependency_tracker(::TSCE::DependencyTrackerArchive* dependency_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dependency_tracker_;
  }
  if (dependency_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dependency_tracker);
    if (message_arena != submessage_arena) {
      dependency_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependency_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dependency_tracker_ = dependency_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.dependency_tracker)
}

// optional .TSP.Reference named_reference_manager = 3;
inline bool CalculationEngineArchive::_internal_has_named_reference_manager() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || named_reference_manager_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_named_reference_manager() const {
  return _internal_has_named_reference_manager();
}
inline const ::TSP::Reference& CalculationEngineArchive::_internal_named_reference_manager() const {
  const ::TSP::Reference* p = named_reference_manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CalculationEngineArchive::named_reference_manager() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.named_reference_manager)
  return _internal_named_reference_manager();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_named_reference_manager(
    ::TSP::Reference* named_reference_manager) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(named_reference_manager_);
  }
  named_reference_manager_ = named_reference_manager;
  if (named_reference_manager) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.named_reference_manager)
}
inline ::TSP::Reference* CalculationEngineArchive::release_named_reference_manager() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = named_reference_manager_;
  named_reference_manager_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::unsafe_arena_release_named_reference_manager() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.named_reference_manager)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = named_reference_manager_;
  named_reference_manager_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::_internal_mutable_named_reference_manager() {
  _has_bits_[0] |= 0x00000010u;
  if (named_reference_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    named_reference_manager_ = p;
  }
  return named_reference_manager_;
}
inline ::TSP::Reference* CalculationEngineArchive::mutable_named_reference_manager() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.named_reference_manager)
  return _internal_mutable_named_reference_manager();
}
inline void CalculationEngineArchive::set_allocated_named_reference_manager(::TSP::Reference* named_reference_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(named_reference_manager_);
  }
  if (named_reference_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(named_reference_manager)->GetArena();
    if (message_arena != submessage_arena) {
      named_reference_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_reference_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  named_reference_manager_ = named_reference_manager;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.named_reference_manager)
}

// optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
inline bool CalculationEngineArchive::_internal_has_excel_import_date_mode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_excel_import_date_mode() const {
  return _internal_has_excel_import_date_mode();
}
inline void CalculationEngineArchive::clear_excel_import_date_mode() {
  excel_import_date_mode_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::TSCE::CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::_internal_excel_import_date_mode() const {
  return static_cast< ::TSCE::CalculationEngineArchive_ExcelImportDateMode >(excel_import_date_mode_);
}
inline ::TSCE::CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::excel_import_date_mode() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.excel_import_date_mode)
  return _internal_excel_import_date_mode();
}
inline void CalculationEngineArchive::_internal_set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value) {
  assert(::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  excel_import_date_mode_ = value;
}
inline void CalculationEngineArchive::set_excel_import_date_mode(::TSCE::CalculationEngineArchive_ExcelImportDateMode value) {
  _internal_set_excel_import_date_mode(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.excel_import_date_mode)
}

// optional string saved_locale_identifier_for_4_2 = 5;
inline bool CalculationEngineArchive::_internal_has_saved_locale_identifier_for_4_2() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_saved_locale_identifier_for_4_2() const {
  return _internal_has_saved_locale_identifier_for_4_2();
}
inline void CalculationEngineArchive::clear_saved_locale_identifier_for_4_2() {
  saved_locale_identifier_for_4_2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CalculationEngineArchive::saved_locale_identifier_for_4_2() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2)
  return _internal_saved_locale_identifier_for_4_2();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CalculationEngineArchive::set_saved_locale_identifier_for_4_2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 saved_locale_identifier_for_4_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2)
}
inline std::string* CalculationEngineArchive::mutable_saved_locale_identifier_for_4_2() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2)
  return _internal_mutable_saved_locale_identifier_for_4_2();
}
inline const std::string& CalculationEngineArchive::_internal_saved_locale_identifier_for_4_2() const {
  return saved_locale_identifier_for_4_2_.Get();
}
inline void CalculationEngineArchive::_internal_set_saved_locale_identifier_for_4_2(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  saved_locale_identifier_for_4_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CalculationEngineArchive::_internal_mutable_saved_locale_identifier_for_4_2() {
  _has_bits_[0] |= 0x00000001u;
  return saved_locale_identifier_for_4_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CalculationEngineArchive::release_saved_locale_identifier_for_4_2() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2)
  if (!_internal_has_saved_locale_identifier_for_4_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return saved_locale_identifier_for_4_2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CalculationEngineArchive::set_allocated_saved_locale_identifier_for_4_2(std::string* saved_locale_identifier_for_4_2) {
  if (saved_locale_identifier_for_4_2 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  saved_locale_identifier_for_4_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), saved_locale_identifier_for_4_2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2)
}

// optional uint64 document_random_seed = 6;
inline bool CalculationEngineArchive::_internal_has_document_random_seed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_document_random_seed() const {
  return _internal_has_document_random_seed();
}
inline void CalculationEngineArchive::clear_document_random_seed() {
  document_random_seed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalculationEngineArchive::_internal_document_random_seed() const {
  return document_random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalculationEngineArchive::document_random_seed() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.document_random_seed)
  return _internal_document_random_seed();
}
inline void CalculationEngineArchive::_internal_set_document_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  document_random_seed_ = value;
}
inline void CalculationEngineArchive::set_document_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_document_random_seed(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.document_random_seed)
}

// optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
inline bool CalculationEngineArchive::_internal_has_uuid_reference_map() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || uuid_reference_map_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_uuid_reference_map() const {
  return _internal_has_uuid_reference_map();
}
inline void CalculationEngineArchive::clear_uuid_reference_map() {
  if (uuid_reference_map_ != nullptr) uuid_reference_map_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::UuidReferenceMapArchive& CalculationEngineArchive::_internal_uuid_reference_map() const {
  const ::TSCE::UuidReferenceMapArchive* p = uuid_reference_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UuidReferenceMapArchive&>(
      ::TSCE::_UuidReferenceMapArchive_default_instance_);
}
inline const ::TSCE::UuidReferenceMapArchive& CalculationEngineArchive::uuid_reference_map() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.uuid_reference_map)
  return _internal_uuid_reference_map();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_uuid_reference_map(
    ::TSCE::UuidReferenceMapArchive* uuid_reference_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_reference_map_);
  }
  uuid_reference_map_ = uuid_reference_map;
  if (uuid_reference_map) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.uuid_reference_map)
}
inline ::TSCE::UuidReferenceMapArchive* CalculationEngineArchive::release_uuid_reference_map() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::UuidReferenceMapArchive* temp = uuid_reference_map_;
  uuid_reference_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UuidReferenceMapArchive* CalculationEngineArchive::unsafe_arena_release_uuid_reference_map() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.uuid_reference_map)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::UuidReferenceMapArchive* temp = uuid_reference_map_;
  uuid_reference_map_ = nullptr;
  return temp;
}
inline ::TSCE::UuidReferenceMapArchive* CalculationEngineArchive::_internal_mutable_uuid_reference_map() {
  _has_bits_[0] |= 0x00000020u;
  if (uuid_reference_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UuidReferenceMapArchive>(GetArena());
    uuid_reference_map_ = p;
  }
  return uuid_reference_map_;
}
inline ::TSCE::UuidReferenceMapArchive* CalculationEngineArchive::mutable_uuid_reference_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.uuid_reference_map)
  return _internal_mutable_uuid_reference_map();
}
inline void CalculationEngineArchive::set_allocated_uuid_reference_map(::TSCE::UuidReferenceMapArchive* uuid_reference_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_reference_map_;
  }
  if (uuid_reference_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid_reference_map);
    if (message_arena != submessage_arena) {
      uuid_reference_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid_reference_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uuid_reference_map_ = uuid_reference_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.uuid_reference_map)
}

// optional double document_timestamp = 9;
inline bool CalculationEngineArchive::_internal_has_document_timestamp() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_document_timestamp() const {
  return _internal_has_document_timestamp();
}
inline void CalculationEngineArchive::clear_document_timestamp() {
  document_timestamp_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double CalculationEngineArchive::_internal_document_timestamp() const {
  return document_timestamp_;
}
inline double CalculationEngineArchive::document_timestamp() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.document_timestamp)
  return _internal_document_timestamp();
}
inline void CalculationEngineArchive::_internal_set_document_timestamp(double value) {
  _has_bits_[0] |= 0x00001000u;
  document_timestamp_ = value;
}
inline void CalculationEngineArchive::set_document_timestamp(double value) {
  _internal_set_document_timestamp(value);
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.document_timestamp)
}

// optional string document_timezone = 10;
inline bool CalculationEngineArchive::_internal_has_document_timezone() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_document_timezone() const {
  return _internal_has_document_timezone();
}
inline void CalculationEngineArchive::clear_document_timezone() {
  document_timezone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CalculationEngineArchive::document_timezone() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.document_timezone)
  return _internal_document_timezone();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CalculationEngineArchive::set_document_timezone(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 document_timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.document_timezone)
}
inline std::string* CalculationEngineArchive::mutable_document_timezone() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.document_timezone)
  return _internal_mutable_document_timezone();
}
inline const std::string& CalculationEngineArchive::_internal_document_timezone() const {
  return document_timezone_.Get();
}
inline void CalculationEngineArchive::_internal_set_document_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  document_timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CalculationEngineArchive::_internal_mutable_document_timezone() {
  _has_bits_[0] |= 0x00000002u;
  return document_timezone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CalculationEngineArchive::release_document_timezone() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.document_timezone)
  if (!_internal_has_document_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return document_timezone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CalculationEngineArchive::set_allocated_document_timezone(std::string* document_timezone) {
  if (document_timezone != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  document_timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.document_timezone)
}

// optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
inline bool CalculationEngineArchive::_internal_has_table_uid_history() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_history_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_table_uid_history() const {
  return _internal_has_table_uid_history();
}
inline void CalculationEngineArchive::clear_table_uid_history() {
  if (table_uid_history_ != nullptr) table_uid_history_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCE::RewriteTableUIDInfoArchive& CalculationEngineArchive::_internal_table_uid_history() const {
  const ::TSCE::RewriteTableUIDInfoArchive* p = table_uid_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteTableUIDInfoArchive&>(
      ::TSCE::_RewriteTableUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteTableUIDInfoArchive& CalculationEngineArchive::table_uid_history() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.table_uid_history)
  return _internal_table_uid_history();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_table_uid_history(
    ::TSCE::RewriteTableUIDInfoArchive* table_uid_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_history_);
  }
  table_uid_history_ = table_uid_history;
  if (table_uid_history) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.table_uid_history)
}
inline ::TSCE::RewriteTableUIDInfoArchive* CalculationEngineArchive::release_table_uid_history() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = table_uid_history_;
  table_uid_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CalculationEngineArchive::unsafe_arena_release_table_uid_history() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.table_uid_history)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = table_uid_history_;
  table_uid_history_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CalculationEngineArchive::_internal_mutable_table_uid_history() {
  _has_bits_[0] |= 0x00000040u;
  if (table_uid_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(GetArena());
    table_uid_history_ = p;
  }
  return table_uid_history_;
}
inline ::TSCE::RewriteTableUIDInfoArchive* CalculationEngineArchive::mutable_table_uid_history() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.table_uid_history)
  return _internal_mutable_table_uid_history();
}
inline void CalculationEngineArchive::set_allocated_table_uid_history(::TSCE::RewriteTableUIDInfoArchive* table_uid_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_uid_history_;
  }
  if (table_uid_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_uid_history);
    if (message_arena != submessage_arena) {
      table_uid_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  table_uid_history_ = table_uid_history;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.table_uid_history)
}

// optional .TSP.Reference remote_data_store = 12;
inline bool CalculationEngineArchive::_internal_has_remote_data_store() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || remote_data_store_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_remote_data_store() const {
  return _internal_has_remote_data_store();
}
inline const ::TSP::Reference& CalculationEngineArchive::_internal_remote_data_store() const {
  const ::TSP::Reference* p = remote_data_store_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CalculationEngineArchive::remote_data_store() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.remote_data_store)
  return _internal_remote_data_store();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_remote_data_store(
    ::TSP::Reference* remote_data_store) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_data_store_);
  }
  remote_data_store_ = remote_data_store;
  if (remote_data_store) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.remote_data_store)
}
inline ::TSP::Reference* CalculationEngineArchive::release_remote_data_store() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = remote_data_store_;
  remote_data_store_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::unsafe_arena_release_remote_data_store() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.remote_data_store)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = remote_data_store_;
  remote_data_store_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::_internal_mutable_remote_data_store() {
  _has_bits_[0] |= 0x00000080u;
  if (remote_data_store_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    remote_data_store_ = p;
  }
  return remote_data_store_;
}
inline ::TSP::Reference* CalculationEngineArchive::mutable_remote_data_store() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.remote_data_store)
  return _internal_mutable_remote_data_store();
}
inline void CalculationEngineArchive::set_allocated_remote_data_store(::TSP::Reference* remote_data_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_data_store_);
  }
  if (remote_data_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_data_store)->GetArena();
    if (message_arena != submessage_arena) {
      remote_data_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_data_store, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  remote_data_store_ = remote_data_store;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.remote_data_store)
}

// optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
inline bool CalculationEngineArchive::_internal_has_group_node_map() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || group_node_map_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_group_node_map() const {
  return _internal_has_group_node_map();
}
inline void CalculationEngineArchive::clear_group_node_map() {
  if (group_node_map_ != nullptr) group_node_map_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSCE::GroupByNodeMapArchive& CalculationEngineArchive::_internal_group_node_map() const {
  const ::TSCE::GroupByNodeMapArchive* p = group_node_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::GroupByNodeMapArchive&>(
      ::TSCE::_GroupByNodeMapArchive_default_instance_);
}
inline const ::TSCE::GroupByNodeMapArchive& CalculationEngineArchive::group_node_map() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.group_node_map)
  return _internal_group_node_map();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_group_node_map(
    ::TSCE::GroupByNodeMapArchive* group_node_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_map_);
  }
  group_node_map_ = group_node_map;
  if (group_node_map) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.group_node_map)
}
inline ::TSCE::GroupByNodeMapArchive* CalculationEngineArchive::release_group_node_map() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::GroupByNodeMapArchive* temp = group_node_map_;
  group_node_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::GroupByNodeMapArchive* CalculationEngineArchive::unsafe_arena_release_group_node_map() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.group_node_map)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::GroupByNodeMapArchive* temp = group_node_map_;
  group_node_map_ = nullptr;
  return temp;
}
inline ::TSCE::GroupByNodeMapArchive* CalculationEngineArchive::_internal_mutable_group_node_map() {
  _has_bits_[0] |= 0x00000100u;
  if (group_node_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::GroupByNodeMapArchive>(GetArena());
    group_node_map_ = p;
  }
  return group_node_map_;
}
inline ::TSCE::GroupByNodeMapArchive* CalculationEngineArchive::mutable_group_node_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.group_node_map)
  return _internal_mutable_group_node_map();
}
inline void CalculationEngineArchive::set_allocated_group_node_map(::TSCE::GroupByNodeMapArchive* group_node_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_node_map_;
  }
  if (group_node_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_node_map);
    if (message_arena != submessage_arena) {
      group_node_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  group_node_map_ = group_node_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.group_node_map)
}

// optional .TSP.Reference header_name_manager = 14;
inline bool CalculationEngineArchive::_internal_has_header_name_manager() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || header_name_manager_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_header_name_manager() const {
  return _internal_has_header_name_manager();
}
inline const ::TSP::Reference& CalculationEngineArchive::_internal_header_name_manager() const {
  const ::TSP::Reference* p = header_name_manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CalculationEngineArchive::header_name_manager() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.header_name_manager)
  return _internal_header_name_manager();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_header_name_manager(
    ::TSP::Reference* header_name_manager) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_name_manager_);
  }
  header_name_manager_ = header_name_manager;
  if (header_name_manager) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.header_name_manager)
}
inline ::TSP::Reference* CalculationEngineArchive::release_header_name_manager() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = header_name_manager_;
  header_name_manager_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::unsafe_arena_release_header_name_manager() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.header_name_manager)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = header_name_manager_;
  header_name_manager_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::_internal_mutable_header_name_manager() {
  _has_bits_[0] |= 0x00000200u;
  if (header_name_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_name_manager_ = p;
  }
  return header_name_manager_;
}
inline ::TSP::Reference* CalculationEngineArchive::mutable_header_name_manager() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.header_name_manager)
  return _internal_mutable_header_name_manager();
}
inline void CalculationEngineArchive::set_allocated_header_name_manager(::TSP::Reference* header_name_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_name_manager_);
  }
  if (header_name_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_name_manager)->GetArena();
    if (message_arena != submessage_arena) {
      header_name_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_name_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  header_name_manager_ = header_name_manager;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.header_name_manager)
}

// optional .TSP.Reference refs_to_dirty = 15;
inline bool CalculationEngineArchive::_internal_has_refs_to_dirty() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || refs_to_dirty_ != nullptr);
  return value;
}
inline bool CalculationEngineArchive::has_refs_to_dirty() const {
  return _internal_has_refs_to_dirty();
}
inline const ::TSP::Reference& CalculationEngineArchive::_internal_refs_to_dirty() const {
  const ::TSP::Reference* p = refs_to_dirty_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CalculationEngineArchive::refs_to_dirty() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.refs_to_dirty)
  return _internal_refs_to_dirty();
}
inline void CalculationEngineArchive::unsafe_arena_set_allocated_refs_to_dirty(
    ::TSP::Reference* refs_to_dirty) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refs_to_dirty_);
  }
  refs_to_dirty_ = refs_to_dirty;
  if (refs_to_dirty) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CalculationEngineArchive.refs_to_dirty)
}
inline ::TSP::Reference* CalculationEngineArchive::release_refs_to_dirty() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = refs_to_dirty_;
  refs_to_dirty_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::unsafe_arena_release_refs_to_dirty() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.refs_to_dirty)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = refs_to_dirty_;
  refs_to_dirty_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CalculationEngineArchive::_internal_mutable_refs_to_dirty() {
  _has_bits_[0] |= 0x00000400u;
  if (refs_to_dirty_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    refs_to_dirty_ = p;
  }
  return refs_to_dirty_;
}
inline ::TSP::Reference* CalculationEngineArchive::mutable_refs_to_dirty() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.refs_to_dirty)
  return _internal_mutable_refs_to_dirty();
}
inline void CalculationEngineArchive::set_allocated_refs_to_dirty(::TSP::Reference* refs_to_dirty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(refs_to_dirty_);
  }
  if (refs_to_dirty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refs_to_dirty)->GetArena();
    if (message_arena != submessage_arena) {
      refs_to_dirty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refs_to_dirty, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  refs_to_dirty_ = refs_to_dirty;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.refs_to_dirty)
}

// optional string saved_locale_identifier = 16;
inline bool CalculationEngineArchive::_internal_has_saved_locale_identifier() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CalculationEngineArchive::has_saved_locale_identifier() const {
  return _internal_has_saved_locale_identifier();
}
inline void CalculationEngineArchive::clear_saved_locale_identifier() {
  saved_locale_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CalculationEngineArchive::saved_locale_identifier() const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.saved_locale_identifier)
  return _internal_saved_locale_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CalculationEngineArchive::set_saved_locale_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 saved_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.CalculationEngineArchive.saved_locale_identifier)
}
inline std::string* CalculationEngineArchive::mutable_saved_locale_identifier() {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.saved_locale_identifier)
  return _internal_mutable_saved_locale_identifier();
}
inline const std::string& CalculationEngineArchive::_internal_saved_locale_identifier() const {
  return saved_locale_identifier_.Get();
}
inline void CalculationEngineArchive::_internal_set_saved_locale_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  saved_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CalculationEngineArchive::_internal_mutable_saved_locale_identifier() {
  _has_bits_[0] |= 0x00000004u;
  return saved_locale_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CalculationEngineArchive::release_saved_locale_identifier() {
  // @@protoc_insertion_point(field_release:TSCE.CalculationEngineArchive.saved_locale_identifier)
  if (!_internal_has_saved_locale_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return saved_locale_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CalculationEngineArchive::set_allocated_saved_locale_identifier(std::string* saved_locale_identifier) {
  if (saved_locale_identifier != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  saved_locale_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), saved_locale_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.CalculationEngineArchive.saved_locale_identifier)
}

// repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
inline int CalculationEngineArchive::_internal_begin_tracking_names_legacy_nrm_size() const {
  return begin_tracking_names_legacy_nrm_.size();
}
inline int CalculationEngineArchive::begin_tracking_names_legacy_nrm_size() const {
  return _internal_begin_tracking_names_legacy_nrm_size();
}
inline ::TSP::UUID* CalculationEngineArchive::mutable_begin_tracking_names_legacy_nrm(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm)
  return begin_tracking_names_legacy_nrm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CalculationEngineArchive::mutable_begin_tracking_names_legacy_nrm() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm)
  return &begin_tracking_names_legacy_nrm_;
}
inline const ::TSP::UUID& CalculationEngineArchive::_internal_begin_tracking_names_legacy_nrm(int index) const {
  return begin_tracking_names_legacy_nrm_.Get(index);
}
inline const ::TSP::UUID& CalculationEngineArchive::begin_tracking_names_legacy_nrm(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm)
  return _internal_begin_tracking_names_legacy_nrm(index);
}
inline ::TSP::UUID* CalculationEngineArchive::_internal_add_begin_tracking_names_legacy_nrm() {
  return begin_tracking_names_legacy_nrm_.Add();
}
inline ::TSP::UUID* CalculationEngineArchive::add_begin_tracking_names_legacy_nrm() {
  // @@protoc_insertion_point(field_add:TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm)
  return _internal_add_begin_tracking_names_legacy_nrm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CalculationEngineArchive::begin_tracking_names_legacy_nrm() const {
  // @@protoc_insertion_point(field_list:TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm)
  return begin_tracking_names_legacy_nrm_;
}

// repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
inline int CalculationEngineArchive::_internal_end_tracking_names_legacy_nrm_size() const {
  return end_tracking_names_legacy_nrm_.size();
}
inline int CalculationEngineArchive::end_tracking_names_legacy_nrm_size() const {
  return _internal_end_tracking_names_legacy_nrm_size();
}
inline ::TSP::UUID* CalculationEngineArchive::mutable_end_tracking_names_legacy_nrm(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm)
  return end_tracking_names_legacy_nrm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CalculationEngineArchive::mutable_end_tracking_names_legacy_nrm() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm)
  return &end_tracking_names_legacy_nrm_;
}
inline const ::TSP::UUID& CalculationEngineArchive::_internal_end_tracking_names_legacy_nrm(int index) const {
  return end_tracking_names_legacy_nrm_.Get(index);
}
inline const ::TSP::UUID& CalculationEngineArchive::end_tracking_names_legacy_nrm(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm)
  return _internal_end_tracking_names_legacy_nrm(index);
}
inline ::TSP::UUID* CalculationEngineArchive::_internal_add_end_tracking_names_legacy_nrm() {
  return end_tracking_names_legacy_nrm_.Add();
}
inline ::TSP::UUID* CalculationEngineArchive::add_end_tracking_names_legacy_nrm() {
  // @@protoc_insertion_point(field_add:TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm)
  return _internal_add_end_tracking_names_legacy_nrm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CalculationEngineArchive::end_tracking_names_legacy_nrm() const {
  // @@protoc_insertion_point(field_list:TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm)
  return end_tracking_names_legacy_nrm_;
}

// -------------------------------------------------------------------

// PreserveColumnRowFlagsArchive

// required bool begin_row_is_absolute = 1;
inline bool PreserveColumnRowFlagsArchive::_internal_has_begin_row_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreserveColumnRowFlagsArchive::has_begin_row_is_absolute() const {
  return _internal_has_begin_row_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::clear_begin_row_is_absolute() {
  begin_row_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PreserveColumnRowFlagsArchive::_internal_begin_row_is_absolute() const {
  return begin_row_is_absolute_;
}
inline bool PreserveColumnRowFlagsArchive::begin_row_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.PreserveColumnRowFlagsArchive.begin_row_is_absolute)
  return _internal_begin_row_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::_internal_set_begin_row_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000001u;
  begin_row_is_absolute_ = value;
}
inline void PreserveColumnRowFlagsArchive::set_begin_row_is_absolute(bool value) {
  _internal_set_begin_row_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.PreserveColumnRowFlagsArchive.begin_row_is_absolute)
}

// required bool begin_column_is_absolute = 2;
inline bool PreserveColumnRowFlagsArchive::_internal_has_begin_column_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PreserveColumnRowFlagsArchive::has_begin_column_is_absolute() const {
  return _internal_has_begin_column_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::clear_begin_column_is_absolute() {
  begin_column_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PreserveColumnRowFlagsArchive::_internal_begin_column_is_absolute() const {
  return begin_column_is_absolute_;
}
inline bool PreserveColumnRowFlagsArchive::begin_column_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.PreserveColumnRowFlagsArchive.begin_column_is_absolute)
  return _internal_begin_column_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::_internal_set_begin_column_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000002u;
  begin_column_is_absolute_ = value;
}
inline void PreserveColumnRowFlagsArchive::set_begin_column_is_absolute(bool value) {
  _internal_set_begin_column_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.PreserveColumnRowFlagsArchive.begin_column_is_absolute)
}

// optional bool end_row_is_absolute = 3;
inline bool PreserveColumnRowFlagsArchive::_internal_has_end_row_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PreserveColumnRowFlagsArchive::has_end_row_is_absolute() const {
  return _internal_has_end_row_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::clear_end_row_is_absolute() {
  end_row_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PreserveColumnRowFlagsArchive::_internal_end_row_is_absolute() const {
  return end_row_is_absolute_;
}
inline bool PreserveColumnRowFlagsArchive::end_row_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.PreserveColumnRowFlagsArchive.end_row_is_absolute)
  return _internal_end_row_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::_internal_set_end_row_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000004u;
  end_row_is_absolute_ = value;
}
inline void PreserveColumnRowFlagsArchive::set_end_row_is_absolute(bool value) {
  _internal_set_end_row_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.PreserveColumnRowFlagsArchive.end_row_is_absolute)
}

// optional bool end_column_is_absolute = 4;
inline bool PreserveColumnRowFlagsArchive::_internal_has_end_column_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PreserveColumnRowFlagsArchive::has_end_column_is_absolute() const {
  return _internal_has_end_column_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::clear_end_column_is_absolute() {
  end_column_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PreserveColumnRowFlagsArchive::_internal_end_column_is_absolute() const {
  return end_column_is_absolute_;
}
inline bool PreserveColumnRowFlagsArchive::end_column_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.PreserveColumnRowFlagsArchive.end_column_is_absolute)
  return _internal_end_column_is_absolute();
}
inline void PreserveColumnRowFlagsArchive::_internal_set_end_column_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000008u;
  end_column_is_absolute_ = value;
}
inline void PreserveColumnRowFlagsArchive::set_end_column_is_absolute(bool value) {
  _internal_set_end_column_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.PreserveColumnRowFlagsArchive.end_column_is_absolute)
}

// -------------------------------------------------------------------

// CategoryReferenceArchive_CatRefUidList

// repeated .TSP.UUID uid = 1;
inline int CategoryReferenceArchive_CatRefUidList::_internal_uid_size() const {
  return uid_.size();
}
inline int CategoryReferenceArchive_CatRefUidList::uid_size() const {
  return _internal_uid_size();
}
inline ::TSP::UUID* CategoryReferenceArchive_CatRefUidList::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.CatRefUidList.uid)
  return uid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CategoryReferenceArchive_CatRefUidList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CategoryReferenceArchive.CatRefUidList.uid)
  return &uid_;
}
inline const ::TSP::UUID& CategoryReferenceArchive_CatRefUidList::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline const ::TSP::UUID& CategoryReferenceArchive_CatRefUidList::uid(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.CatRefUidList.uid)
  return _internal_uid(index);
}
inline ::TSP::UUID* CategoryReferenceArchive_CatRefUidList::_internal_add_uid() {
  return uid_.Add();
}
inline ::TSP::UUID* CategoryReferenceArchive_CatRefUidList::add_uid() {
  // @@protoc_insertion_point(field_add:TSCE.CategoryReferenceArchive.CatRefUidList.uid)
  return _internal_add_uid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CategoryReferenceArchive_CatRefUidList::uid() const {
  // @@protoc_insertion_point(field_list:TSCE.CategoryReferenceArchive.CatRefUidList.uid)
  return uid_;
}

// -------------------------------------------------------------------

// CategoryReferenceArchive

// required .TSP.UUID group_by_uid = 1;
inline bool CategoryReferenceArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& CategoryReferenceArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryReferenceArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.group_by_uid)
}
inline ::TSP::UUID* CategoryReferenceArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* CategoryReferenceArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void CategoryReferenceArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.group_by_uid)
}

// required .TSP.UUID column_uid = 2;
inline bool CategoryReferenceArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& CategoryReferenceArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryReferenceArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.column_uid)
  return _internal_column_uid();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.column_uid)
}
inline ::TSP::UUID* CategoryReferenceArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.column_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* CategoryReferenceArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void CategoryReferenceArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.column_uid)
}

// required .TSCE.CategoryAggType aggregate_type = 3;
inline bool CategoryReferenceArchive::_internal_has_aggregate_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CategoryReferenceArchive::has_aggregate_type() const {
  return _internal_has_aggregate_type();
}
inline void CategoryReferenceArchive::clear_aggregate_type() {
  aggregate_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSCE::CategoryAggType CategoryReferenceArchive::_internal_aggregate_type() const {
  return static_cast< ::TSCE::CategoryAggType >(aggregate_type_);
}
inline ::TSCE::CategoryAggType CategoryReferenceArchive::aggregate_type() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.aggregate_type)
  return _internal_aggregate_type();
}
inline void CategoryReferenceArchive::_internal_set_aggregate_type(::TSCE::CategoryAggType value) {
  assert(::TSCE::CategoryAggType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  aggregate_type_ = value;
}
inline void CategoryReferenceArchive::set_aggregate_type(::TSCE::CategoryAggType value) {
  _internal_set_aggregate_type(value);
  // @@protoc_insertion_point(field_set:TSCE.CategoryReferenceArchive.aggregate_type)
}

// required sint32 group_level = 4;
inline bool CategoryReferenceArchive::_internal_has_group_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CategoryReferenceArchive::has_group_level() const {
  return _internal_has_group_level();
}
inline void CategoryReferenceArchive::clear_group_level() {
  group_level_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryReferenceArchive::_internal_group_level() const {
  return group_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryReferenceArchive::group_level() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.group_level)
  return _internal_group_level();
}
inline void CategoryReferenceArchive::_internal_set_group_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  group_level_ = value;
}
inline void CategoryReferenceArchive::set_group_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_level(value);
  // @@protoc_insertion_point(field_set:TSCE.CategoryReferenceArchive.group_level)
}

// optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
inline bool CategoryReferenceArchive::_internal_has_group_uids() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || group_uids_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_group_uids() const {
  return _internal_has_group_uids();
}
inline void CategoryReferenceArchive::clear_group_uids() {
  if (group_uids_ != nullptr) group_uids_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::CategoryReferenceArchive_CatRefUidList& CategoryReferenceArchive::_internal_group_uids() const {
  const ::TSCE::CategoryReferenceArchive_CatRefUidList* p = group_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CategoryReferenceArchive_CatRefUidList&>(
      ::TSCE::_CategoryReferenceArchive_CatRefUidList_default_instance_);
}
inline const ::TSCE::CategoryReferenceArchive_CatRefUidList& CategoryReferenceArchive::group_uids() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.group_uids)
  return _internal_group_uids();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_group_uids(
    ::TSCE::CategoryReferenceArchive_CatRefUidList* group_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_uids_);
  }
  group_uids_ = group_uids;
  if (group_uids) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.group_uids)
}
inline ::TSCE::CategoryReferenceArchive_CatRefUidList* CategoryReferenceArchive::release_group_uids() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CategoryReferenceArchive_CatRefUidList* temp = group_uids_;
  group_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CategoryReferenceArchive_CatRefUidList* CategoryReferenceArchive::unsafe_arena_release_group_uids() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.group_uids)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CategoryReferenceArchive_CatRefUidList* temp = group_uids_;
  group_uids_ = nullptr;
  return temp;
}
inline ::TSCE::CategoryReferenceArchive_CatRefUidList* CategoryReferenceArchive::_internal_mutable_group_uids() {
  _has_bits_[0] |= 0x00000004u;
  if (group_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CategoryReferenceArchive_CatRefUidList>(GetArena());
    group_uids_ = p;
  }
  return group_uids_;
}
inline ::TSCE::CategoryReferenceArchive_CatRefUidList* CategoryReferenceArchive::mutable_group_uids() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.group_uids)
  return _internal_mutable_group_uids();
}
inline void CategoryReferenceArchive::set_allocated_group_uids(::TSCE::CategoryReferenceArchive_CatRefUidList* group_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_uids_;
  }
  if (group_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_uids);
    if (message_arena != submessage_arena) {
      group_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  group_uids_ = group_uids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.group_uids)
}

// optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
inline bool CategoryReferenceArchive::_internal_has_preserve_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || preserve_flags_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_preserve_flags() const {
  return _internal_has_preserve_flags();
}
inline void CategoryReferenceArchive::clear_preserve_flags() {
  if (preserve_flags_ != nullptr) preserve_flags_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::PreserveColumnRowFlagsArchive& CategoryReferenceArchive::_internal_preserve_flags() const {
  const ::TSCE::PreserveColumnRowFlagsArchive* p = preserve_flags_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::PreserveColumnRowFlagsArchive&>(
      ::TSCE::_PreserveColumnRowFlagsArchive_default_instance_);
}
inline const ::TSCE::PreserveColumnRowFlagsArchive& CategoryReferenceArchive::preserve_flags() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.preserve_flags)
  return _internal_preserve_flags();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_preserve_flags(
    ::TSCE::PreserveColumnRowFlagsArchive* preserve_flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preserve_flags_);
  }
  preserve_flags_ = preserve_flags;
  if (preserve_flags) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.preserve_flags)
}
inline ::TSCE::PreserveColumnRowFlagsArchive* CategoryReferenceArchive::release_preserve_flags() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::PreserveColumnRowFlagsArchive* temp = preserve_flags_;
  preserve_flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::PreserveColumnRowFlagsArchive* CategoryReferenceArchive::unsafe_arena_release_preserve_flags() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.preserve_flags)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::PreserveColumnRowFlagsArchive* temp = preserve_flags_;
  preserve_flags_ = nullptr;
  return temp;
}
inline ::TSCE::PreserveColumnRowFlagsArchive* CategoryReferenceArchive::_internal_mutable_preserve_flags() {
  _has_bits_[0] |= 0x00000008u;
  if (preserve_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::PreserveColumnRowFlagsArchive>(GetArena());
    preserve_flags_ = p;
  }
  return preserve_flags_;
}
inline ::TSCE::PreserveColumnRowFlagsArchive* CategoryReferenceArchive::mutable_preserve_flags() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.preserve_flags)
  return _internal_mutable_preserve_flags();
}
inline void CategoryReferenceArchive::set_allocated_preserve_flags(::TSCE::PreserveColumnRowFlagsArchive* preserve_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete preserve_flags_;
  }
  if (preserve_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(preserve_flags);
    if (message_arena != submessage_arena) {
      preserve_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preserve_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preserve_flags_ = preserve_flags;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.preserve_flags)
}

// optional int32 relative_column = 8;
inline bool CategoryReferenceArchive::_internal_has_relative_column() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CategoryReferenceArchive::has_relative_column() const {
  return _internal_has_relative_column();
}
inline void CategoryReferenceArchive::clear_relative_column() {
  relative_column_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryReferenceArchive::_internal_relative_column() const {
  return relative_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CategoryReferenceArchive::relative_column() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.relative_column)
  return _internal_relative_column();
}
inline void CategoryReferenceArchive::_internal_set_relative_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  relative_column_ = value;
}
inline void CategoryReferenceArchive::set_relative_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relative_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CategoryReferenceArchive.relative_column)
}

// optional .TSP.UUID relative_group_uid = 9;
inline bool CategoryReferenceArchive::_internal_has_relative_group_uid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || relative_group_uid_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_relative_group_uid() const {
  return _internal_has_relative_group_uid();
}
inline const ::TSP::UUID& CategoryReferenceArchive::_internal_relative_group_uid() const {
  const ::TSP::UUID* p = relative_group_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryReferenceArchive::relative_group_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.relative_group_uid)
  return _internal_relative_group_uid();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_relative_group_uid(
    ::TSP::UUID* relative_group_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_group_uid_);
  }
  relative_group_uid_ = relative_group_uid;
  if (relative_group_uid) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.relative_group_uid)
}
inline ::TSP::UUID* CategoryReferenceArchive::release_relative_group_uid() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = relative_group_uid_;
  relative_group_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::unsafe_arena_release_relative_group_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.relative_group_uid)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = relative_group_uid_;
  relative_group_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::_internal_mutable_relative_group_uid() {
  _has_bits_[0] |= 0x00000010u;
  if (relative_group_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    relative_group_uid_ = p;
  }
  return relative_group_uid_;
}
inline ::TSP::UUID* CategoryReferenceArchive::mutable_relative_group_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.relative_group_uid)
  return _internal_mutable_relative_group_uid();
}
inline void CategoryReferenceArchive::set_allocated_relative_group_uid(::TSP::UUID* relative_group_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_group_uid_);
  }
  if (relative_group_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_group_uid)->GetArena();
    if (message_arena != submessage_arena) {
      relative_group_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_group_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  relative_group_uid_ = relative_group_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.relative_group_uid)
}

// optional .TSP.UUID absolute_group_uid = 10;
inline bool CategoryReferenceArchive::_internal_has_absolute_group_uid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || absolute_group_uid_ != nullptr);
  return value;
}
inline bool CategoryReferenceArchive::has_absolute_group_uid() const {
  return _internal_has_absolute_group_uid();
}
inline const ::TSP::UUID& CategoryReferenceArchive::_internal_absolute_group_uid() const {
  const ::TSP::UUID* p = absolute_group_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryReferenceArchive::absolute_group_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.CategoryReferenceArchive.absolute_group_uid)
  return _internal_absolute_group_uid();
}
inline void CategoryReferenceArchive::unsafe_arena_set_allocated_absolute_group_uid(
    ::TSP::UUID* absolute_group_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_group_uid_);
  }
  absolute_group_uid_ = absolute_group_uid;
  if (absolute_group_uid) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CategoryReferenceArchive.absolute_group_uid)
}
inline ::TSP::UUID* CategoryReferenceArchive::release_absolute_group_uid() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = absolute_group_uid_;
  absolute_group_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::unsafe_arena_release_absolute_group_uid() {
  // @@protoc_insertion_point(field_release:TSCE.CategoryReferenceArchive.absolute_group_uid)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = absolute_group_uid_;
  absolute_group_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryReferenceArchive::_internal_mutable_absolute_group_uid() {
  _has_bits_[0] |= 0x00000020u;
  if (absolute_group_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    absolute_group_uid_ = p;
  }
  return absolute_group_uid_;
}
inline ::TSP::UUID* CategoryReferenceArchive::mutable_absolute_group_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.CategoryReferenceArchive.absolute_group_uid)
  return _internal_mutable_absolute_group_uid();
}
inline void CategoryReferenceArchive::set_allocated_absolute_group_uid(::TSP::UUID* absolute_group_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_group_uid_);
  }
  if (absolute_group_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_group_uid)->GetArena();
    if (message_arena != submessage_arena) {
      absolute_group_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_group_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  absolute_group_uid_ = absolute_group_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CategoryReferenceArchive.absolute_group_uid)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive

// required uint32 row_handle = 1;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_row_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_row_handle() const {
  return _internal_has_row_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_row_handle() {
  row_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_row_handle() const {
  return row_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::row_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_handle)
  return _internal_row_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  row_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_handle)
}

// required uint32 column_handle = 2;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_column_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_column_handle() const {
  return _internal_has_column_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_column_handle() {
  column_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_column_handle() const {
  return column_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::column_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_handle)
  return _internal_column_handle();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_handle)
}

// required uint32 row_is_sticky = 3;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_row_is_sticky() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_row_is_sticky() const {
  return _internal_has_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_row_is_sticky() {
  row_is_sticky_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_row_is_sticky() const {
  return row_is_sticky_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::row_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_is_sticky)
  return _internal_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.row_is_sticky)
}

// required uint32 column_is_sticky = 4;
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_has_column_is_sticky() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::has_column_is_sticky() const {
  return _internal_has_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::clear_column_is_sticky() {
  column_is_sticky_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_column_is_sticky() const {
  return column_is_sticky_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::column_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_is_sticky)
  return _internal_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_internal_set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  column_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive.column_is_sticky)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive

// required uint32 row_handle = 1;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_row_handle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_row_handle() const {
  return _internal_has_row_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_row_handle() {
  row_handle_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_row_handle() const {
  return row_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::row_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_handle)
  return _internal_row_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  row_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_row_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_handle)
}

// required uint32 column_handle = 2;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_column_handle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_column_handle() const {
  return _internal_has_column_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_column_handle() {
  column_handle_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_column_handle() const {
  return column_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::column_handle() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_handle)
  return _internal_column_handle();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  column_handle_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_column_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_handle(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_handle)
}

// required uint32 row_is_sticky = 3;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_row_is_sticky() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_row_is_sticky() const {
  return _internal_has_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_row_is_sticky() {
  row_is_sticky_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_row_is_sticky() const {
  return row_is_sticky_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::row_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_is_sticky)
  return _internal_row_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  row_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_row_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.row_is_sticky)
}

// required uint32 column_is_sticky = 4;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_column_is_sticky() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_column_is_sticky() const {
  return _internal_has_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_column_is_sticky() {
  column_is_sticky_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_column_is_sticky() const {
  return column_is_sticky_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::column_is_sticky() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_is_sticky)
  return _internal_column_is_sticky();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  column_is_sticky_ = value;
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_column_is_sticky(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_is_sticky(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.column_is_sticky)
}

// required .TSP.CFUUIDArchive table_id = 5;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  return _internal_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000010u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
  return _internal_mutable_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id)
}

// optional string AST_reference_whitespace_after_sheet_name = 6;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_after_sheet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_after_sheet_name() const {
  return _internal_has_ast_reference_whitespace_after_sheet_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_after_sheet_name() {
  ast_reference_whitespace_after_sheet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_after_sheet_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_ast_reference_whitespace_after_sheet_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_mutable_ast_reference_whitespace_after_sheet_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_after_sheet_name() const {
  return ast_reference_whitespace_after_sheet_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_after_sheet_name() {
  _has_bits_[0] |= 0x00000001u;
  return ast_reference_whitespace_after_sheet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
  if (!_internal_has_ast_reference_whitespace_after_sheet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ast_reference_whitespace_after_sheet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name) {
  if (ast_reference_whitespace_after_sheet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_reference_whitespace_after_sheet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_after_sheet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name)
}

// optional string AST_reference_whitespace_before_table_name = 7;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_before_table_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_before_table_name() const {
  return _internal_has_ast_reference_whitespace_before_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_before_table_name() {
  ast_reference_whitespace_before_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_before_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  return _internal_ast_reference_whitespace_before_table_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  return _internal_mutable_ast_reference_whitespace_before_table_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_before_table_name() const {
  return ast_reference_whitespace_before_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_before_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_before_table_name() {
  _has_bits_[0] |= 0x00000002u;
  return ast_reference_whitespace_before_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
  if (!_internal_has_ast_reference_whitespace_before_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ast_reference_whitespace_before_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name) {
  if (ast_reference_whitespace_before_table_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ast_reference_whitespace_before_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_before_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name)
}

// optional string AST_reference_whitespace_after_table_name = 8;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_after_table_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_after_table_name() const {
  return _internal_has_ast_reference_whitespace_after_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_after_table_name() {
  ast_reference_whitespace_after_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_after_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  return _internal_ast_reference_whitespace_after_table_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  return _internal_mutable_ast_reference_whitespace_after_table_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_after_table_name() const {
  return ast_reference_whitespace_after_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_after_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_after_table_name() {
  _has_bits_[0] |= 0x00000004u;
  return ast_reference_whitespace_after_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
  if (!_internal_has_ast_reference_whitespace_after_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ast_reference_whitespace_after_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name) {
  if (ast_reference_whitespace_after_table_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ast_reference_whitespace_after_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_after_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name)
}

// optional string AST_reference_whitespace_before_cell_address = 9;
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_has_ast_reference_whitespace_before_cell_address() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::has_ast_reference_whitespace_before_cell_address() const {
  return _internal_has_ast_reference_whitespace_before_cell_address();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_ast_reference_whitespace_before_cell_address() {
  ast_reference_whitespace_before_cell_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ast_reference_whitespace_before_cell_address() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  return _internal_ast_reference_whitespace_before_cell_address();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::mutable_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  return _internal_mutable_ast_reference_whitespace_before_cell_address();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_ast_reference_whitespace_before_cell_address() const {
  return ast_reference_whitespace_before_cell_address_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_set_ast_reference_whitespace_before_cell_address(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_internal_mutable_ast_reference_whitespace_before_cell_address() {
  _has_bits_[0] |= 0x00000008u;
  return ast_reference_whitespace_before_cell_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::release_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
  if (!_internal_has_ast_reference_whitespace_before_cell_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ast_reference_whitespace_before_cell_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address) {
  if (ast_reference_whitespace_before_cell_address != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ast_reference_whitespace_before_cell_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_before_cell_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTColumnCoordinateArchive

// required sint32 column = 1;
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::has_column() const {
  return _internal_has_column();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::clear_column() {
  column_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColumnCoordinateArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.column)
  return _internal_column();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  column_ = value;
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.column)
}

// optional bool absolute = 2 [default = false];
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_has_absolute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::has_absolute() const {
  return _internal_has_absolute();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::clear_absolute() {
  absolute_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_absolute() const {
  return absolute_;
}
inline bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.absolute)
  return _internal_absolute();
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::_internal_set_absolute(bool value) {
  _has_bits_[0] |= 0x00000002u;
  absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::set_absolute(bool value) {
  _internal_set_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive.absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTRowCoordinateArchive

// required sint32 row = 1;
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::has_row() const {
  return _internal_has_row();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::clear_row() {
  row_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTRowCoordinateArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.row)
  return _internal_row();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  row_ = value;
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.row)
}

// optional bool absolute = 2 [default = false];
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_has_absolute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::has_absolute() const {
  return _internal_has_absolute();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::clear_absolute() {
  absolute_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_absolute() const {
  return absolute_;
}
inline bool ASTNodeArrayArchive_ASTRowCoordinateArchive::absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.absolute)
  return _internal_absolute();
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::_internal_set_absolute(bool value) {
  _has_bits_[0] |= 0x00000002u;
  absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::set_absolute(bool value) {
  _internal_set_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive.absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTUidList

// repeated .TSP.UUID uid = 1;
inline int ASTNodeArrayArchive_ASTUidList::_internal_uid_size() const {
  return uid_.size();
}
inline int ASTNodeArrayArchive_ASTUidList::uid_size() const {
  return _internal_uid_size();
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidList::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidList.uid)
  return uid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ASTNodeArrayArchive_ASTUidList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTUidList.uid)
  return &uid_;
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidList::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidList::uid(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidList.uid)
  return _internal_uid(index);
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidList::_internal_add_uid() {
  return uid_.Add();
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidList::add_uid() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTUidList.uid)
  return _internal_add_uid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ASTNodeArrayArchive_ASTUidList::uid() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTUidList.uid)
  return uid_;
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTUidTract

// required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_has_columnuids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || columnuids_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTract::has_columnuids() const {
  return _internal_has_columnuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::clear_columnuids() {
  if (columnuids_ != nullptr) columnuids_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidList& ASTNodeArrayArchive_ASTUidTract::_internal_columnuids() const {
  const ::TSCE::ASTNodeArrayArchive_ASTUidList* p = columnuids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTUidList&>(
      ::TSCE::_ASTNodeArrayArchive_ASTUidList_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidList& ASTNodeArrayArchive_ASTUidTract::columnuids() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids)
  return _internal_columnuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::unsafe_arena_set_allocated_columnuids(
    ::TSCE::ASTNodeArrayArchive_ASTUidList* columnuids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnuids_);
  }
  columnuids_ = columnuids;
  if (columnuids) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids)
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::release_columnuids() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* temp = columnuids_;
  columnuids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::unsafe_arena_release_columnuids() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* temp = columnuids_;
  columnuids_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::_internal_mutable_columnuids() {
  _has_bits_[0] |= 0x00000001u;
  if (columnuids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidList>(GetArena());
    columnuids_ = p;
  }
  return columnuids_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::mutable_columnuids() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids)
  return _internal_mutable_columnuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::set_allocated_columnuids(::TSCE::ASTNodeArrayArchive_ASTUidList* columnuids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete columnuids_;
  }
  if (columnuids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(columnuids);
    if (message_arena != submessage_arena) {
      columnuids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columnuids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  columnuids_ = columnuids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids)
}

// required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_has_rowuids() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rowuids_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTract::has_rowuids() const {
  return _internal_has_rowuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::clear_rowuids() {
  if (rowuids_ != nullptr) rowuids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidList& ASTNodeArrayArchive_ASTUidTract::_internal_rowuids() const {
  const ::TSCE::ASTNodeArrayArchive_ASTUidList* p = rowuids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTUidList&>(
      ::TSCE::_ASTNodeArrayArchive_ASTUidList_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidList& ASTNodeArrayArchive_ASTUidTract::rowuids() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids)
  return _internal_rowuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::unsafe_arena_set_allocated_rowuids(
    ::TSCE::ASTNodeArrayArchive_ASTUidList* rowuids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowuids_);
  }
  rowuids_ = rowuids;
  if (rowuids) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids)
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::release_rowuids() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* temp = rowuids_;
  rowuids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::unsafe_arena_release_rowuids() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::ASTNodeArrayArchive_ASTUidList* temp = rowuids_;
  rowuids_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::_internal_mutable_rowuids() {
  _has_bits_[0] |= 0x00000002u;
  if (rowuids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidList>(GetArena());
    rowuids_ = p;
  }
  return rowuids_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidList* ASTNodeArrayArchive_ASTUidTract::mutable_rowuids() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids)
  return _internal_mutable_rowuids();
}
inline void ASTNodeArrayArchive_ASTUidTract::set_allocated_rowuids(::TSCE::ASTNodeArrayArchive_ASTUidList* rowuids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rowuids_;
  }
  if (rowuids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rowuids);
    if (message_arena != submessage_arena) {
      rowuids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowuids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rowuids_ = rowuids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids)
}

// optional bool is_range_ref = 3;
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_has_is_range_ref() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTract::has_is_range_ref() const {
  return _internal_has_is_range_ref();
}
inline void ASTNodeArrayArchive_ASTUidTract::clear_is_range_ref() {
  is_range_ref_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_is_range_ref() const {
  return is_range_ref_;
}
inline bool ASTNodeArrayArchive_ASTUidTract::is_range_ref() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTract.is_range_ref)
  return _internal_is_range_ref();
}
inline void ASTNodeArrayArchive_ASTUidTract::_internal_set_is_range_ref(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_range_ref_ = value;
}
inline void ASTNodeArrayArchive_ASTUidTract::set_is_range_ref(bool value) {
  _internal_set_is_range_ref(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTUidTract.is_range_ref)
}

// optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_has_purpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTract::has_purpose() const {
  return _internal_has_purpose();
}
inline void ASTNodeArrayArchive_ASTUidTract::clear_purpose() {
  purpose_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive_ASTUidTract::_internal_purpose() const {
  return static_cast< ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose >(purpose_);
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive_ASTUidTract::purpose() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTract.purpose)
  return _internal_purpose();
}
inline void ASTNodeArrayArchive_ASTUidTract::_internal_set_purpose(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose value) {
  assert(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  purpose_ = value;
}
inline void ASTNodeArrayArchive_ASTUidTract::set_purpose(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTUidTract.purpose)
}

// optional bool preserve_rectangular = 5 [default = true];
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_has_preserve_rectangular() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTract::has_preserve_rectangular() const {
  return _internal_has_preserve_rectangular();
}
inline void ASTNodeArrayArchive_ASTUidTract::clear_preserve_rectangular() {
  preserve_rectangular_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ASTNodeArrayArchive_ASTUidTract::_internal_preserve_rectangular() const {
  return preserve_rectangular_;
}
inline bool ASTNodeArrayArchive_ASTUidTract::preserve_rectangular() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTract.preserve_rectangular)
  return _internal_preserve_rectangular();
}
inline void ASTNodeArrayArchive_ASTUidTract::_internal_set_preserve_rectangular(bool value) {
  _has_bits_[0] |= 0x00000010u;
  preserve_rectangular_ = value;
}
inline void ASTNodeArrayArchive_ASTUidTract::set_preserve_rectangular(bool value) {
  _internal_set_preserve_rectangular(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTUidTract.preserve_rectangular)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTStickyBits

// required bool begin_row_is_absolute = 1;
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_has_begin_row_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::has_begin_row_is_absolute() const {
  return _internal_has_begin_row_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::clear_begin_row_is_absolute() {
  begin_row_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_begin_row_is_absolute() const {
  return begin_row_is_absolute_;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::begin_row_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTStickyBits.begin_row_is_absolute)
  return _internal_begin_row_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::_internal_set_begin_row_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000001u;
  begin_row_is_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTStickyBits::set_begin_row_is_absolute(bool value) {
  _internal_set_begin_row_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTStickyBits.begin_row_is_absolute)
}

// required bool begin_column_is_absolute = 2;
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_has_begin_column_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::has_begin_column_is_absolute() const {
  return _internal_has_begin_column_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::clear_begin_column_is_absolute() {
  begin_column_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_begin_column_is_absolute() const {
  return begin_column_is_absolute_;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::begin_column_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTStickyBits.begin_column_is_absolute)
  return _internal_begin_column_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::_internal_set_begin_column_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000002u;
  begin_column_is_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTStickyBits::set_begin_column_is_absolute(bool value) {
  _internal_set_begin_column_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTStickyBits.begin_column_is_absolute)
}

// required bool end_row_is_absolute = 3;
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_has_end_row_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::has_end_row_is_absolute() const {
  return _internal_has_end_row_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::clear_end_row_is_absolute() {
  end_row_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_end_row_is_absolute() const {
  return end_row_is_absolute_;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::end_row_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTStickyBits.end_row_is_absolute)
  return _internal_end_row_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::_internal_set_end_row_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000004u;
  end_row_is_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTStickyBits::set_end_row_is_absolute(bool value) {
  _internal_set_end_row_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTStickyBits.end_row_is_absolute)
}

// required bool end_column_is_absolute = 4;
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_has_end_column_is_absolute() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::has_end_column_is_absolute() const {
  return _internal_has_end_column_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::clear_end_column_is_absolute() {
  end_column_is_absolute_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::_internal_end_column_is_absolute() const {
  return end_column_is_absolute_;
}
inline bool ASTNodeArrayArchive_ASTStickyBits::end_column_is_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTStickyBits.end_column_is_absolute)
  return _internal_end_column_is_absolute();
}
inline void ASTNodeArrayArchive_ASTStickyBits::_internal_set_end_column_is_absolute(bool value) {
  _has_bits_[0] |= 0x00000008u;
  end_column_is_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTStickyBits::set_end_column_is_absolute(bool value) {
  _internal_set_end_column_is_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTStickyBits.end_column_is_absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTUidTractList

// repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
inline int ASTNodeArrayArchive_ASTUidTractList::_internal_tract_size() const {
  return tract_.size();
}
inline int ASTNodeArrayArchive_ASTUidTractList::tract_size() const {
  return _internal_tract_size();
}
inline void ASTNodeArrayArchive_ASTUidTractList::clear_tract() {
  tract_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTract* ASTNodeArrayArchive_ASTUidTractList::mutable_tract(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidTractList.tract)
  return tract_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTUidTract >*
ASTNodeArrayArchive_ASTUidTractList::mutable_tract() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTUidTractList.tract)
  return &tract_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidTract& ASTNodeArrayArchive_ASTUidTractList::_internal_tract(int index) const {
  return tract_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidTract& ASTNodeArrayArchive_ASTUidTractList::tract(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTractList.tract)
  return _internal_tract(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTract* ASTNodeArrayArchive_ASTUidTractList::_internal_add_tract() {
  return tract_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTract* ASTNodeArrayArchive_ASTUidTractList::add_tract() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTUidTractList.tract)
  return _internal_add_tract();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTUidTract >&
ASTNodeArrayArchive_ASTUidTractList::tract() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTUidTractList.tract)
  return tract_;
}

// required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
inline bool ASTNodeArrayArchive_ASTUidTractList::_internal_has_sticky_bits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sticky_bits_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidTractList::has_sticky_bits() const {
  return _internal_has_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTUidTractList::clear_sticky_bits() {
  if (sticky_bits_ != nullptr) sticky_bits_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTUidTractList::_internal_sticky_bits() const {
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits* p = sticky_bits_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&>(
      ::TSCE::_ASTNodeArrayArchive_ASTStickyBits_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTUidTractList::sticky_bits() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits)
  return _internal_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTUidTractList::unsafe_arena_set_allocated_sticky_bits(
    ::TSCE::ASTNodeArrayArchive_ASTStickyBits* sticky_bits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticky_bits_);
  }
  sticky_bits_ = sticky_bits;
  if (sticky_bits) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits)
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTUidTractList::release_sticky_bits() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = sticky_bits_;
  sticky_bits_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTUidTractList::unsafe_arena_release_sticky_bits() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = sticky_bits_;
  sticky_bits_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTUidTractList::_internal_mutable_sticky_bits() {
  _has_bits_[0] |= 0x00000001u;
  if (sticky_bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTStickyBits>(GetArena());
    sticky_bits_ = p;
  }
  return sticky_bits_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTUidTractList::mutable_sticky_bits() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits)
  return _internal_mutable_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTUidTractList::set_allocated_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* sticky_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sticky_bits_;
  }
  if (sticky_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sticky_bits);
    if (message_arena != submessage_arena) {
      sticky_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticky_bits, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sticky_bits_ = sticky_bits;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTUidCoordinateArchive

// required .TSP.UUID column_uid = 1;
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidCoordinateArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid)
  return _internal_column_uid();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid)
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid)
}

// required .TSP.UUID row_uid = 2;
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_has_row_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || row_uid_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::has_row_uid() const {
  return _internal_has_row_uid();
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_row_uid() const {
  const ::TSP::UUID* p = row_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ASTNodeArrayArchive_ASTUidCoordinateArchive::row_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid)
  return _internal_row_uid();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::unsafe_arena_set_allocated_row_uid(
    ::TSP::UUID* row_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uid_);
  }
  row_uid_ = row_uid;
  if (row_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid)
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::release_row_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = row_uid_;
  row_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::unsafe_arena_release_row_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = row_uid_;
  row_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_mutable_row_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (row_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    row_uid_ = p;
  }
  return row_uid_;
}
inline ::TSP::UUID* ASTNodeArrayArchive_ASTUidCoordinateArchive::mutable_row_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid)
  return _internal_mutable_row_uid();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::set_allocated_row_uid(::TSP::UUID* row_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uid_);
  }
  if (row_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uid)->GetArena();
    if (message_arena != submessage_arena) {
      row_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  row_uid_ = row_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid)
}

// required bool column_absolute = 3;
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_has_column_absolute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::has_column_absolute() const {
  return _internal_has_column_absolute();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_column_absolute() {
  column_absolute_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_column_absolute() const {
  return column_absolute_;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::column_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_absolute)
  return _internal_column_absolute();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_set_column_absolute(bool value) {
  _has_bits_[0] |= 0x00000004u;
  column_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::set_column_absolute(bool value) {
  _internal_set_column_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_absolute)
}

// required bool row_absolute = 4;
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_has_row_absolute() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::has_row_absolute() const {
  return _internal_has_row_absolute();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_row_absolute() {
  row_absolute_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_row_absolute() const {
  return row_absolute_;
}
inline bool ASTNodeArrayArchive_ASTUidCoordinateArchive::row_absolute() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_absolute)
  return _internal_row_absolute();
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::_internal_set_row_absolute(bool value) {
  _has_bits_[0] |= 0x00000008u;
  row_absolute_ = value;
}
inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::set_row_absolute(bool value) {
  _internal_set_row_absolute(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_absolute)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTCategoryReferenceArchive

// required .TSCE.CategoryReferenceArchive category_ref = 1;
inline bool ASTNodeArrayArchive_ASTCategoryReferenceArchive::_internal_has_category_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || category_ref_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTCategoryReferenceArchive::has_category_ref() const {
  return _internal_has_category_ref();
}
inline void ASTNodeArrayArchive_ASTCategoryReferenceArchive::clear_category_ref() {
  if (category_ref_ != nullptr) category_ref_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CategoryReferenceArchive& ASTNodeArrayArchive_ASTCategoryReferenceArchive::_internal_category_ref() const {
  const ::TSCE::CategoryReferenceArchive* p = category_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CategoryReferenceArchive&>(
      ::TSCE::_CategoryReferenceArchive_default_instance_);
}
inline const ::TSCE::CategoryReferenceArchive& ASTNodeArrayArchive_ASTCategoryReferenceArchive::category_ref() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref)
  return _internal_category_ref();
}
inline void ASTNodeArrayArchive_ASTCategoryReferenceArchive::unsafe_arena_set_allocated_category_ref(
    ::TSCE::CategoryReferenceArchive* category_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_ref_);
  }
  category_ref_ = category_ref;
  if (category_ref) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref)
}
inline ::TSCE::CategoryReferenceArchive* ASTNodeArrayArchive_ASTCategoryReferenceArchive::release_category_ref() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CategoryReferenceArchive* temp = category_ref_;
  category_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CategoryReferenceArchive* ASTNodeArrayArchive_ASTCategoryReferenceArchive::unsafe_arena_release_category_ref() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CategoryReferenceArchive* temp = category_ref_;
  category_ref_ = nullptr;
  return temp;
}
inline ::TSCE::CategoryReferenceArchive* ASTNodeArrayArchive_ASTCategoryReferenceArchive::_internal_mutable_category_ref() {
  _has_bits_[0] |= 0x00000001u;
  if (category_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CategoryReferenceArchive>(GetArena());
    category_ref_ = p;
  }
  return category_ref_;
}
inline ::TSCE::CategoryReferenceArchive* ASTNodeArrayArchive_ASTCategoryReferenceArchive::mutable_category_ref() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref)
  return _internal_mutable_category_ref();
}
inline void ASTNodeArrayArchive_ASTCategoryReferenceArchive::set_allocated_category_ref(::TSCE::CategoryReferenceArchive* category_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_ref_;
  }
  if (category_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category_ref);
    if (message_arena != submessage_arena) {
      category_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_ref_ = category_ref;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive

// required int32 range_begin = 1;
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_has_range_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::has_range_begin() const {
  return _internal_has_range_begin();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::clear_range_begin() {
  range_begin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_range_begin() const {
  return range_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::range_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive.range_begin)
  return _internal_range_begin();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  range_begin_ = value;
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::set_range_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive.range_begin)
}

// optional int32 range_end = 2;
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_has_range_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::has_range_end() const {
  return _internal_has_range_end();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::clear_range_end() {
  range_end_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_range_end() const {
  return range_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::range_end() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive.range_end)
  return _internal_range_end();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_internal_set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  range_end_ = value;
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::set_range_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive.range_end)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive

// required uint32 range_begin = 1;
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_has_range_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::has_range_begin() const {
  return _internal_has_range_begin();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::clear_range_begin() {
  range_begin_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_range_begin() const {
  return range_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::range_begin() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive.range_begin)
  return _internal_range_begin();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_set_range_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  range_begin_ = value;
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::set_range_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_range_begin(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive.range_begin)
}

// optional uint32 range_end = 2;
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_has_range_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::has_range_end() const {
  return _internal_has_range_end();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::clear_range_end() {
  range_end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_range_end() const {
  return range_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::range_end() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive.range_end)
  return _internal_range_end();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_internal_set_range_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  range_end_ = value;
}
inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::set_range_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive.range_end)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTColonTractArchive

// repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
inline int ASTNodeArrayArchive_ASTColonTractArchive::_internal_relative_column_size() const {
  return relative_column_.size();
}
inline int ASTNodeArrayArchive_ASTColonTractArchive::relative_column_size() const {
  return _internal_relative_column_size();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::clear_relative_column() {
  relative_column_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::mutable_relative_column(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column)
  return relative_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >*
ASTNodeArrayArchive_ASTColonTractArchive::mutable_relative_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column)
  return &relative_column_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::_internal_relative_column(int index) const {
  return relative_column_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::relative_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column)
  return _internal_relative_column(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::_internal_add_relative_column() {
  return relative_column_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::add_relative_column() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column)
  return _internal_add_relative_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >&
ASTNodeArrayArchive_ASTColonTractArchive::relative_column() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column)
  return relative_column_;
}

// repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
inline int ASTNodeArrayArchive_ASTColonTractArchive::_internal_relative_row_size() const {
  return relative_row_.size();
}
inline int ASTNodeArrayArchive_ASTColonTractArchive::relative_row_size() const {
  return _internal_relative_row_size();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::clear_relative_row() {
  relative_row_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::mutable_relative_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row)
  return relative_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >*
ASTNodeArrayArchive_ASTColonTractArchive::mutable_relative_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row)
  return &relative_row_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::_internal_relative_row(int index) const {
  return relative_row_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::relative_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row)
  return _internal_relative_row(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::_internal_add_relative_row() {
  return relative_row_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::add_relative_row() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row)
  return _internal_add_relative_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >&
ASTNodeArrayArchive_ASTColonTractArchive::relative_row() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row)
  return relative_row_;
}

// repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
inline int ASTNodeArrayArchive_ASTColonTractArchive::_internal_absolute_column_size() const {
  return absolute_column_.size();
}
inline int ASTNodeArrayArchive_ASTColonTractArchive::absolute_column_size() const {
  return _internal_absolute_column_size();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::clear_absolute_column() {
  absolute_column_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::mutable_absolute_column(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column)
  return absolute_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >*
ASTNodeArrayArchive_ASTColonTractArchive::mutable_absolute_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column)
  return &absolute_column_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::_internal_absolute_column(int index) const {
  return absolute_column_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::absolute_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column)
  return _internal_absolute_column(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::_internal_add_absolute_column() {
  return absolute_column_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::add_absolute_column() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column)
  return _internal_add_absolute_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >&
ASTNodeArrayArchive_ASTColonTractArchive::absolute_column() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column)
  return absolute_column_;
}

// repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
inline int ASTNodeArrayArchive_ASTColonTractArchive::_internal_absolute_row_size() const {
  return absolute_row_.size();
}
inline int ASTNodeArrayArchive_ASTColonTractArchive::absolute_row_size() const {
  return _internal_absolute_row_size();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::clear_absolute_row() {
  absolute_row_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::mutable_absolute_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row)
  return absolute_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >*
ASTNodeArrayArchive_ASTColonTractArchive::mutable_absolute_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row)
  return &absolute_row_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::_internal_absolute_row(int index) const {
  return absolute_row_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& ASTNodeArrayArchive_ASTColonTractArchive::absolute_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row)
  return _internal_absolute_row(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::_internal_add_absolute_row() {
  return absolute_row_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* ASTNodeArrayArchive_ASTColonTractArchive::add_absolute_row() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row)
  return _internal_add_absolute_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >&
ASTNodeArrayArchive_ASTColonTractArchive::absolute_row() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row)
  return absolute_row_;
}

// optional bool preserve_rectangular = 5 [default = true];
inline bool ASTNodeArrayArchive_ASTColonTractArchive::_internal_has_preserve_rectangular() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive::has_preserve_rectangular() const {
  return _internal_has_preserve_rectangular();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::clear_preserve_rectangular() {
  preserve_rectangular_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive::_internal_preserve_rectangular() const {
  return preserve_rectangular_;
}
inline bool ASTNodeArrayArchive_ASTColonTractArchive::preserve_rectangular() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.preserve_rectangular)
  return _internal_preserve_rectangular();
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::_internal_set_preserve_rectangular(bool value) {
  _has_bits_[0] |= 0x00000001u;
  preserve_rectangular_ = value;
}
inline void ASTNodeArrayArchive_ASTColonTractArchive::set_preserve_rectangular(bool value) {
  _internal_set_preserve_rectangular(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.preserve_rectangular)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive

// required .TSP.CFUUIDArchive table_id = 1;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  return _internal_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000010u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
  return _internal_mutable_table_id();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id)
}

// optional string AST_reference_whitespace_after_sheet_name = 2;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_after_sheet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_after_sheet_name() const {
  return _internal_has_ast_reference_whitespace_after_sheet_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_after_sheet_name() {
  ast_reference_whitespace_after_sheet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_after_sheet_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_ast_reference_whitespace_after_sheet_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_after_sheet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  return _internal_mutable_ast_reference_whitespace_after_sheet_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_after_sheet_name() const {
  return ast_reference_whitespace_after_sheet_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_after_sheet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_after_sheet_name() {
  _has_bits_[0] |= 0x00000001u;
  return ast_reference_whitespace_after_sheet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_after_sheet_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
  if (!_internal_has_ast_reference_whitespace_after_sheet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ast_reference_whitespace_after_sheet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_after_sheet_name(std::string* ast_reference_whitespace_after_sheet_name) {
  if (ast_reference_whitespace_after_sheet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_reference_whitespace_after_sheet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_after_sheet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name)
}

// optional string AST_reference_whitespace_before_table_name = 3;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_before_table_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_before_table_name() const {
  return _internal_has_ast_reference_whitespace_before_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_before_table_name() {
  ast_reference_whitespace_before_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_before_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  return _internal_ast_reference_whitespace_before_table_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_before_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  return _internal_mutable_ast_reference_whitespace_before_table_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_before_table_name() const {
  return ast_reference_whitespace_before_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_before_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_before_table_name() {
  _has_bits_[0] |= 0x00000002u;
  return ast_reference_whitespace_before_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_before_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
  if (!_internal_has_ast_reference_whitespace_before_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ast_reference_whitespace_before_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_before_table_name(std::string* ast_reference_whitespace_before_table_name) {
  if (ast_reference_whitespace_before_table_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ast_reference_whitespace_before_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_before_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name)
}

// optional string AST_reference_whitespace_after_table_name = 4;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_after_table_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_after_table_name() const {
  return _internal_has_ast_reference_whitespace_after_table_name();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_after_table_name() {
  ast_reference_whitespace_after_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_after_table_name() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  return _internal_ast_reference_whitespace_after_table_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_after_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  return _internal_mutable_ast_reference_whitespace_after_table_name();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_after_table_name() const {
  return ast_reference_whitespace_after_table_name_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_after_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_after_table_name() {
  _has_bits_[0] |= 0x00000004u;
  return ast_reference_whitespace_after_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_after_table_name() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
  if (!_internal_has_ast_reference_whitespace_after_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ast_reference_whitespace_after_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_after_table_name(std::string* ast_reference_whitespace_after_table_name) {
  if (ast_reference_whitespace_after_table_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ast_reference_whitespace_after_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_after_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name)
}

// optional string AST_reference_whitespace_before_cell_address = 5;
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_has_ast_reference_whitespace_before_cell_address() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::has_ast_reference_whitespace_before_cell_address() const {
  return _internal_has_ast_reference_whitespace_before_cell_address();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_ast_reference_whitespace_before_cell_address() {
  ast_reference_whitespace_before_cell_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ast_reference_whitespace_before_cell_address() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  return _internal_ast_reference_whitespace_before_cell_address();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_ast_reference_whitespace_before_cell_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::mutable_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  return _internal_mutable_ast_reference_whitespace_before_cell_address();
}
inline const std::string& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_ast_reference_whitespace_before_cell_address() const {
  return ast_reference_whitespace_before_cell_address_.Get();
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_set_ast_reference_whitespace_before_cell_address(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_internal_mutable_ast_reference_whitespace_before_cell_address() {
  _has_bits_[0] |= 0x00000008u;
  return ast_reference_whitespace_before_cell_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::release_ast_reference_whitespace_before_cell_address() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
  if (!_internal_has_ast_reference_whitespace_before_cell_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ast_reference_whitespace_before_cell_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::set_allocated_ast_reference_whitespace_before_cell_address(std::string* ast_reference_whitespace_before_cell_address) {
  if (ast_reference_whitespace_before_cell_address != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ast_reference_whitespace_before_cell_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_reference_whitespace_before_cell_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTLetNodeWhitespace

// optional string AST_let_whitespace_after_let = 1;
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_has_ast_let_whitespace_after_let() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::has_ast_let_whitespace_after_let() const {
  return _internal_has_ast_let_whitespace_after_let();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::clear_ast_let_whitespace_after_let() {
  ast_let_whitespace_after_let_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::ast_let_whitespace_after_let() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let)
  return _internal_ast_let_whitespace_after_let();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_ast_let_whitespace_after_let(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ast_let_whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let)
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::mutable_ast_let_whitespace_after_let() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let)
  return _internal_mutable_ast_let_whitespace_after_let();
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_ast_let_whitespace_after_let() const {
  return ast_let_whitespace_after_let_.Get();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_set_ast_let_whitespace_after_let(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ast_let_whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_mutable_ast_let_whitespace_after_let() {
  _has_bits_[0] |= 0x00000001u;
  return ast_let_whitespace_after_let_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::release_ast_let_whitespace_after_let() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let)
  if (!_internal_has_ast_let_whitespace_after_let()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ast_let_whitespace_after_let_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_allocated_ast_let_whitespace_after_let(std::string* ast_let_whitespace_after_let) {
  if (ast_let_whitespace_after_let != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_let_whitespace_after_let_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_let_whitespace_after_let,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let)
}

// optional string AST_let_whitespace_after_identifier = 2;
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_has_ast_let_whitespace_after_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::has_ast_let_whitespace_after_identifier() const {
  return _internal_has_ast_let_whitespace_after_identifier();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::clear_ast_let_whitespace_after_identifier() {
  ast_let_whitespace_after_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::ast_let_whitespace_after_identifier() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier)
  return _internal_ast_let_whitespace_after_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_ast_let_whitespace_after_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ast_let_whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier)
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::mutable_ast_let_whitespace_after_identifier() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier)
  return _internal_mutable_ast_let_whitespace_after_identifier();
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_ast_let_whitespace_after_identifier() const {
  return ast_let_whitespace_after_identifier_.Get();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_set_ast_let_whitespace_after_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ast_let_whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_mutable_ast_let_whitespace_after_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return ast_let_whitespace_after_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::release_ast_let_whitespace_after_identifier() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier)
  if (!_internal_has_ast_let_whitespace_after_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ast_let_whitespace_after_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_allocated_ast_let_whitespace_after_identifier(std::string* ast_let_whitespace_after_identifier) {
  if (ast_let_whitespace_after_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ast_let_whitespace_after_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_let_whitespace_after_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier)
}

// optional string AST_let_whitespace_after_equals = 3;
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_has_ast_let_whitespace_after_equals() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::has_ast_let_whitespace_after_equals() const {
  return _internal_has_ast_let_whitespace_after_equals();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::clear_ast_let_whitespace_after_equals() {
  ast_let_whitespace_after_equals_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::ast_let_whitespace_after_equals() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals)
  return _internal_ast_let_whitespace_after_equals();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_ast_let_whitespace_after_equals(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ast_let_whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals)
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::mutable_ast_let_whitespace_after_equals() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals)
  return _internal_mutable_ast_let_whitespace_after_equals();
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_ast_let_whitespace_after_equals() const {
  return ast_let_whitespace_after_equals_.Get();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_set_ast_let_whitespace_after_equals(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ast_let_whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_mutable_ast_let_whitespace_after_equals() {
  _has_bits_[0] |= 0x00000004u;
  return ast_let_whitespace_after_equals_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::release_ast_let_whitespace_after_equals() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals)
  if (!_internal_has_ast_let_whitespace_after_equals()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ast_let_whitespace_after_equals_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_allocated_ast_let_whitespace_after_equals(std::string* ast_let_whitespace_after_equals) {
  if (ast_let_whitespace_after_equals != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ast_let_whitespace_after_equals_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_let_whitespace_after_equals,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals)
}

// optional string AST_let_whitespace_after_delimiter = 4;
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_has_ast_let_whitespace_after_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTLetNodeWhitespace::has_ast_let_whitespace_after_delimiter() const {
  return _internal_has_ast_let_whitespace_after_delimiter();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::clear_ast_let_whitespace_after_delimiter() {
  ast_let_whitespace_after_delimiter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::ast_let_whitespace_after_delimiter() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter)
  return _internal_ast_let_whitespace_after_delimiter();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_ast_let_whitespace_after_delimiter(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ast_let_whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter)
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::mutable_ast_let_whitespace_after_delimiter() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter)
  return _internal_mutable_ast_let_whitespace_after_delimiter();
}
inline const std::string& ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_ast_let_whitespace_after_delimiter() const {
  return ast_let_whitespace_after_delimiter_.Get();
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_set_ast_let_whitespace_after_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ast_let_whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::_internal_mutable_ast_let_whitespace_after_delimiter() {
  _has_bits_[0] |= 0x00000008u;
  return ast_let_whitespace_after_delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTLetNodeWhitespace::release_ast_let_whitespace_after_delimiter() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter)
  if (!_internal_has_ast_let_whitespace_after_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ast_let_whitespace_after_delimiter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::set_allocated_ast_let_whitespace_after_delimiter(std::string* ast_let_whitespace_after_delimiter) {
  if (ast_let_whitespace_after_delimiter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ast_let_whitespace_after_delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_let_whitespace_after_delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive_ASTNodeArchive

// required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_node_type() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_node_type() const {
  return _internal_has_ast_node_type();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_node_type() {
  ast_node_type_ = 1;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_node_type() const {
  return static_cast< ::TSCE::ASTNodeArrayArchive_ASTNodeType >(ast_node_type_);
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive_ASTNodeArchive::ast_node_type() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_node_type)
  return _internal_ast_node_type();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value) {
  assert(::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  ast_node_type_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_node_type(::TSCE::ASTNodeArrayArchive_ASTNodeType value) {
  _internal_set_ast_node_type(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_node_type)
}

// optional uint32 AST_function_node_index = 2;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_function_node_index() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_function_node_index() const {
  return _internal_has_ast_function_node_index();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_function_node_index() {
  ast_function_node_index_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_function_node_index() const {
  return ast_function_node_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_function_node_index() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_index)
  return _internal_ast_function_node_index();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_function_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ast_function_node_index_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_function_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_function_node_index(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_index)
}

// optional uint32 AST_function_node_numArgs = 3;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_function_node_numargs() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_function_node_numargs() const {
  return _internal_has_ast_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_function_node_numargs() {
  ast_function_node_numargs_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_function_node_numargs() const {
  return ast_function_node_numargs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_function_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_numArgs)
  return _internal_ast_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  ast_function_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_function_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_function_node_numArgs)
}

// optional double AST_number_node_number = 4;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_number_node_number() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_number_node_number() const {
  return _internal_has_ast_number_node_number();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_number_node_number() {
  ast_number_node_number_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_number_node_number() const {
  return ast_number_node_number_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_number_node_number() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_number)
  return _internal_ast_number_node_number();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_number_node_number(double value) {
  _has_bits_[0] |= 0x00200000u;
  ast_number_node_number_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_number_node_number(double value) {
  _internal_set_ast_number_node_number(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_number)
}

// optional bool AST_boolean_node_boolean = 5;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_boolean_node_boolean() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_boolean_node_boolean() const {
  return _internal_has_ast_boolean_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_boolean_node_boolean() {
  ast_boolean_node_boolean_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_boolean_node_boolean() const {
  return ast_boolean_node_boolean_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_boolean_node_boolean() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_boolean_node_boolean)
  return _internal_ast_boolean_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_boolean_node_boolean(bool value) {
  _has_bits_[0] |= 0x40000000u;
  ast_boolean_node_boolean_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_boolean_node_boolean(bool value) {
  _internal_set_ast_boolean_node_boolean(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_boolean_node_boolean)
}

// optional string AST_string_node_string = 6;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_string_node_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_string_node_string() const {
  return _internal_has_ast_string_node_string();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_string_node_string() {
  ast_string_node_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_string_node_string() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  return _internal_ast_string_node_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_string_node_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ast_string_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_string_node_string() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  return _internal_mutable_ast_string_node_string();
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_string_node_string() const {
  return ast_string_node_string_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_string_node_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ast_string_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_string_node_string() {
  _has_bits_[0] |= 0x00000001u;
  return ast_string_node_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_string_node_string() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
  if (!_internal_has_ast_string_node_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ast_string_node_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_string_node_string(std::string* ast_string_node_string) {
  if (ast_string_node_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_string_node_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_string_node_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string)
}

// optional double AST_date_node_dateNum = 7;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_datenum() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_datenum() const {
  return _internal_has_ast_date_node_datenum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_datenum() {
  ast_date_node_datenum_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_datenum() const {
  return ast_date_node_datenum_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_datenum() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_dateNum)
  return _internal_ast_date_node_datenum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_datenum(double value) {
  _has_bits_[0] |= 0x00400000u;
  ast_date_node_datenum_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_datenum(double value) {
  _internal_set_ast_date_node_datenum(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_dateNum)
}

// optional bool AST_date_node_suppress_date_format = 19;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_suppress_date_format() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_suppress_date_format() const {
  return _internal_has_ast_date_node_suppress_date_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_suppress_date_format() {
  ast_date_node_suppress_date_format_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_suppress_date_format() const {
  return ast_date_node_suppress_date_format_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_suppress_date_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_date_format)
  return _internal_ast_date_node_suppress_date_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_suppress_date_format(bool value) {
  _has_bits_[0] |= 0x80000000u;
  ast_date_node_suppress_date_format_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_suppress_date_format(bool value) {
  _internal_set_ast_date_node_suppress_date_format(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_date_format)
}

// optional bool AST_date_node_suppress_time_format = 20;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_suppress_time_format() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_suppress_time_format() const {
  return _internal_has_ast_date_node_suppress_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_suppress_time_format() {
  ast_date_node_suppress_time_format_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_suppress_time_format() const {
  return ast_date_node_suppress_time_format_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_suppress_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_time_format)
  return _internal_ast_date_node_suppress_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_suppress_time_format(bool value) {
  _has_bits_[1] |= 0x00000001u;
  ast_date_node_suppress_time_format_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_suppress_time_format(bool value) {
  _internal_set_ast_date_node_suppress_time_format(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_suppress_time_format)
}

// optional string AST_date_node_date_time_format = 21;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_date_node_date_time_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_date_node_date_time_format() const {
  return _internal_has_ast_date_node_date_time_format();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_date_node_date_time_format() {
  ast_date_node_date_time_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_date_node_date_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  return _internal_ast_date_node_date_time_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_date_node_date_time_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 ast_date_node_date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_date_node_date_time_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  return _internal_mutable_ast_date_node_date_time_format();
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_date_node_date_time_format() const {
  return ast_date_node_date_time_format_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_date_node_date_time_format(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ast_date_node_date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_date_node_date_time_format() {
  _has_bits_[0] |= 0x00000004u;
  return ast_date_node_date_time_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_date_node_date_time_format() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
  if (!_internal_has_ast_date_node_date_time_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ast_date_node_date_time_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_date_node_date_time_format(std::string* ast_date_node_date_time_format) {
  if (ast_date_node_date_time_format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ast_date_node_date_time_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_date_node_date_time_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format)
}

// optional double AST_duration_node_unitNum = 8;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_unitnum() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_unitnum() const {
  return _internal_has_ast_duration_node_unitnum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_unitnum() {
  ast_duration_node_unitnum_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_unitnum() const {
  return ast_duration_node_unitnum_;
}
inline double ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_unitnum() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unitNum)
  return _internal_ast_duration_node_unitnum();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_unitnum(double value) {
  _has_bits_[0] |= 0x00800000u;
  ast_duration_node_unitnum_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_unitnum(double value) {
  _internal_set_ast_duration_node_unitnum(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unitNum)
}

// optional int32 AST_duration_node_unit = 9;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_unit() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_unit() const {
  return _internal_has_ast_duration_node_unit();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_unit() {
  ast_duration_node_unit_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_unit() const {
  return ast_duration_node_unit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_unit() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unit)
  return _internal_ast_duration_node_unit();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_unit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  ast_duration_node_unit_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_unit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ast_duration_node_unit(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_unit)
}

// optional uint32 AST_duration_node_style = 22;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_style() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_style() const {
  return _internal_has_ast_duration_node_style();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_style() {
  ast_duration_node_style_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_style() const {
  return ast_duration_node_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_style() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_style)
  return _internal_ast_duration_node_style();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  ast_duration_node_style_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_duration_node_style(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_style)
}

// optional uint32 AST_duration_node_duration_unit_largest = 23;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_duration_unit_largest() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_duration_unit_largest() const {
  return _internal_has_ast_duration_node_duration_unit_largest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_duration_unit_largest() {
  ast_duration_node_duration_unit_largest_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_duration_unit_largest() const {
  return ast_duration_node_duration_unit_largest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_duration_unit_largest() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_largest)
  return _internal_ast_duration_node_duration_unit_largest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  ast_duration_node_duration_unit_largest_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_duration_node_duration_unit_largest(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_largest)
}

// optional uint32 AST_duration_node_duration_unit_smallest = 24;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_duration_unit_smallest() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_duration_unit_smallest() const {
  return _internal_has_ast_duration_node_duration_unit_smallest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_duration_unit_smallest() {
  ast_duration_node_duration_unit_smallest_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_duration_unit_smallest() const {
  return ast_duration_node_duration_unit_smallest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_duration_unit_smallest() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_smallest)
  return _internal_ast_duration_node_duration_unit_smallest();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  ast_duration_node_duration_unit_smallest_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_duration_node_duration_unit_smallest(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_duration_unit_smallest)
}

// optional bool AST_duration_node_use_automatic_units = 29;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_duration_node_use_automatic_units() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_duration_node_use_automatic_units() const {
  return _internal_has_ast_duration_node_use_automatic_units();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_duration_node_use_automatic_units() {
  ast_duration_node_use_automatic_units_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_duration_node_use_automatic_units() const {
  return ast_duration_node_use_automatic_units_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_duration_node_use_automatic_units() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_use_automatic_units)
  return _internal_ast_duration_node_use_automatic_units();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_duration_node_use_automatic_units(bool value) {
  _has_bits_[1] |= 0x00000002u;
  ast_duration_node_use_automatic_units_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_duration_node_use_automatic_units(bool value) {
  _internal_set_ast_duration_node_use_automatic_units(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_duration_node_use_automatic_units)
}

// optional bool AST_token_node_boolean = 10;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_token_node_boolean() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_token_node_boolean() const {
  return _internal_has_ast_token_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_token_node_boolean() {
  ast_token_node_boolean_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_token_node_boolean() const {
  return ast_token_node_boolean_;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::ast_token_node_boolean() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_token_node_boolean)
  return _internal_ast_token_node_boolean();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_token_node_boolean(bool value) {
  _has_bits_[0] |= 0x02000000u;
  ast_token_node_boolean_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_token_node_boolean(bool value) {
  _internal_set_ast_token_node_boolean(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_token_node_boolean)
}

// optional uint32 AST_array_node_numCol = 11;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_array_node_numcol() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_array_node_numcol() const {
  return _internal_has_ast_array_node_numcol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_array_node_numcol() {
  ast_array_node_numcol_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_array_node_numcol() const {
  return ast_array_node_numcol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_array_node_numcol() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numCol)
  return _internal_ast_array_node_numcol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_array_node_numcol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  ast_array_node_numcol_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_array_node_numcol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_array_node_numcol(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numCol)
}

// optional uint32 AST_array_node_numRow = 12;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_array_node_numrow() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_array_node_numrow() const {
  return _internal_has_ast_array_node_numrow();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_array_node_numrow() {
  ast_array_node_numrow_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_array_node_numrow() const {
  return ast_array_node_numrow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_array_node_numrow() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numRow)
  return _internal_ast_array_node_numrow();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_array_node_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  ast_array_node_numrow_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_array_node_numrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_array_node_numrow(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_array_node_numRow)
}

// optional uint32 AST_list_node_numArgs = 13;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_list_node_numargs() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_list_node_numargs() const {
  return _internal_has_ast_list_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_list_node_numargs() {
  ast_list_node_numargs_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_list_node_numargs() const {
  return ast_list_node_numargs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_list_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_list_node_numArgs)
  return _internal_ast_list_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_list_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  ast_list_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_list_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_list_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_list_node_numArgs)
}

// optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_thunk_node_array() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || ast_thunk_node_array_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_thunk_node_array() const {
  return _internal_has_ast_thunk_node_array();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_thunk_node_array() {
  if (ast_thunk_node_array_ != nullptr) ast_thunk_node_array_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_thunk_node_array() const {
  const ::TSCE::ASTNodeArrayArchive* p = ast_thunk_node_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_thunk_node_array() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  return _internal_ast_thunk_node_array();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_thunk_node_array(
    ::TSCE::ASTNodeArrayArchive* ast_thunk_node_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_thunk_node_array_);
  }
  ast_thunk_node_array_ = ast_thunk_node_array;
  if (ast_thunk_node_array) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_thunk_node_array() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_thunk_node_array_;
  ast_thunk_node_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_thunk_node_array() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_thunk_node_array_;
  ast_thunk_node_array_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_thunk_node_array() {
  _has_bits_[0] |= 0x00000020u;
  if (ast_thunk_node_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArena());
    ast_thunk_node_array_ = p;
  }
  return ast_thunk_node_array_;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_thunk_node_array() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
  return _internal_mutable_ast_thunk_node_array();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_thunk_node_array(::TSCE::ASTNodeArrayArchive* ast_thunk_node_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_thunk_node_array_;
  }
  if (ast_thunk_node_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_thunk_node_array);
    if (message_arena != submessage_arena) {
      ast_thunk_node_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_thunk_node_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ast_thunk_node_array_ = ast_thunk_node_array;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array)
}

// optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_local_cell_reference_node_reference() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || ast_local_cell_reference_node_reference_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_local_cell_reference_node_reference() const {
  return _internal_has_ast_local_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_local_cell_reference_node_reference() {
  if (ast_local_cell_reference_node_reference_ != nullptr) ast_local_cell_reference_node_reference_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_local_cell_reference_node_reference() const {
  const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* p = ast_local_cell_reference_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_local_cell_reference_node_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  return _internal_ast_local_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_local_cell_reference_node_reference(
    ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_local_cell_reference_node_reference_);
  }
  ast_local_cell_reference_node_reference_ = ast_local_cell_reference_node_reference;
  if (ast_local_cell_reference_node_reference) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_local_cell_reference_node_reference() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* temp = ast_local_cell_reference_node_reference_;
  ast_local_cell_reference_node_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_local_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* temp = ast_local_cell_reference_node_reference_;
  ast_local_cell_reference_node_reference_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_local_cell_reference_node_reference() {
  _has_bits_[0] |= 0x00000040u;
  if (ast_local_cell_reference_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(GetArena());
    ast_local_cell_reference_node_reference_ = p;
  }
  return ast_local_cell_reference_node_reference_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_local_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
  return _internal_mutable_ast_local_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_local_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ast_local_cell_reference_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_local_cell_reference_node_reference_;
  }
  if (ast_local_cell_reference_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_local_cell_reference_node_reference);
    if (message_arena != submessage_arena) {
      ast_local_cell_reference_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_local_cell_reference_node_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  ast_local_cell_reference_node_reference_ = ast_local_cell_reference_node_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference)
}

// optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_cross_table_cell_reference_node_reference() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || ast_cross_table_cell_reference_node_reference_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_cross_table_cell_reference_node_reference() const {
  return _internal_has_ast_cross_table_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_cross_table_cell_reference_node_reference() {
  if (ast_cross_table_cell_reference_node_reference_ != nullptr) ast_cross_table_cell_reference_node_reference_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_cross_table_cell_reference_node_reference() const {
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* p = ast_cross_table_cell_reference_node_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_cross_table_cell_reference_node_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  return _internal_ast_cross_table_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_cross_table_cell_reference_node_reference(
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_cross_table_cell_reference_node_reference_);
  }
  ast_cross_table_cell_reference_node_reference_ = ast_cross_table_cell_reference_node_reference;
  if (ast_cross_table_cell_reference_node_reference) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_cross_table_cell_reference_node_reference() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* temp = ast_cross_table_cell_reference_node_reference_;
  ast_cross_table_cell_reference_node_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_cross_table_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* temp = ast_cross_table_cell_reference_node_reference_;
  ast_cross_table_cell_reference_node_reference_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_cross_table_cell_reference_node_reference() {
  _has_bits_[0] |= 0x00000080u;
  if (ast_cross_table_cell_reference_node_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(GetArena());
    ast_cross_table_cell_reference_node_reference_ = p;
  }
  return ast_cross_table_cell_reference_node_reference_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_cross_table_cell_reference_node_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
  return _internal_mutable_ast_cross_table_cell_reference_node_reference();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_cross_table_cell_reference_node_reference(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ast_cross_table_cell_reference_node_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_cross_table_cell_reference_node_reference_;
  }
  if (ast_cross_table_cell_reference_node_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_cross_table_cell_reference_node_reference);
    if (message_arena != submessage_arena) {
      ast_cross_table_cell_reference_node_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_cross_table_cell_reference_node_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ast_cross_table_cell_reference_node_reference_ = ast_cross_table_cell_reference_node_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference)
}

// optional string AST_unknown_function_node_string = 17;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_unknown_function_node_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_unknown_function_node_string() const {
  return _internal_has_ast_unknown_function_node_string();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_unknown_function_node_string() {
  ast_unknown_function_node_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_unknown_function_node_string() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  return _internal_ast_unknown_function_node_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_unknown_function_node_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ast_unknown_function_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_unknown_function_node_string() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  return _internal_mutable_ast_unknown_function_node_string();
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_unknown_function_node_string() const {
  return ast_unknown_function_node_string_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_unknown_function_node_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ast_unknown_function_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_unknown_function_node_string() {
  _has_bits_[0] |= 0x00000002u;
  return ast_unknown_function_node_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_unknown_function_node_string() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
  if (!_internal_has_ast_unknown_function_node_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ast_unknown_function_node_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_unknown_function_node_string(std::string* ast_unknown_function_node_string) {
  if (ast_unknown_function_node_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ast_unknown_function_node_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_unknown_function_node_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string)
}

// optional uint32 AST_unknown_function_node_numArgs = 18;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_unknown_function_node_numargs() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_unknown_function_node_numargs() const {
  return _internal_has_ast_unknown_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_unknown_function_node_numargs() {
  ast_unknown_function_node_numargs_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_unknown_function_node_numargs() const {
  return ast_unknown_function_node_numargs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_unknown_function_node_numargs() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_numArgs)
  return _internal_ast_unknown_function_node_numargs();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_unknown_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  ast_unknown_function_node_numargs_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_unknown_function_node_numargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_unknown_function_node_numargs(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_numArgs)
}

// optional string AST_whitespace = 25;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_whitespace() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_whitespace() const {
  return _internal_has_ast_whitespace();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_whitespace() {
  ast_whitespace_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_whitespace() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  return _internal_ast_whitespace();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_whitespace(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ast_whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_whitespace() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  return _internal_mutable_ast_whitespace();
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_whitespace() const {
  return ast_whitespace_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_whitespace(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ast_whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_whitespace() {
  _has_bits_[0] |= 0x00000008u;
  return ast_whitespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_whitespace() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
  if (!_internal_has_ast_whitespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ast_whitespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_whitespace(std::string* ast_whitespace) {
  if (ast_whitespace != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ast_whitespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_whitespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace)
}

// optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_column() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || ast_column_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_column() const {
  return _internal_has_ast_column();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_column() {
  if (ast_column_ != nullptr) ast_column_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_column() const {
  const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* p = ast_column_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_column() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  return _internal_ast_column();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_column(
    ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_column_);
  }
  ast_column_ = ast_column;
  if (ast_column) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_column() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* temp = ast_column_;
  ast_column_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_column() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* temp = ast_column_;
  ast_column_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_column() {
  _has_bits_[0] |= 0x00000100u;
  if (ast_column_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive>(GetArena());
    ast_column_ = p;
  }
  return ast_column_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_column() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
  return _internal_mutable_ast_column();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_column(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* ast_column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_column_;
  }
  if (ast_column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_column);
    if (message_arena != submessage_arena) {
      ast_column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_column, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ast_column_ = ast_column;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column)
}

// optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_row() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || ast_row_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_row() const {
  return _internal_has_ast_row();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_row() {
  if (ast_row_ != nullptr) ast_row_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_row() const {
  const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* p = ast_row_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_row() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  return _internal_ast_row();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_row(
    ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_row_);
  }
  ast_row_ = ast_row;
  if (ast_row) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_row() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* temp = ast_row_;
  ast_row_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_row() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  _has_bits_[0] &= ~0x00000200u;
  ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* temp = ast_row_;
  ast_row_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_row() {
  _has_bits_[0] |= 0x00000200u;
  if (ast_row_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive>(GetArena());
    ast_row_ = p;
  }
  return ast_row_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_row() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
  return _internal_mutable_ast_row();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_row(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* ast_row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_row_;
  }
  if (ast_row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_row);
    if (message_arena != submessage_arena) {
      ast_row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_row, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  ast_row_ = ast_row;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row)
}

// optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_cross_table_reference_extra_info() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || ast_cross_table_reference_extra_info_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_cross_table_reference_extra_info() const {
  return _internal_has_ast_cross_table_reference_extra_info();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_cross_table_reference_extra_info() {
  if (ast_cross_table_reference_extra_info_ != nullptr) ast_cross_table_reference_extra_info_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_cross_table_reference_extra_info() const {
  const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* p = ast_cross_table_reference_extra_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_cross_table_reference_extra_info() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  return _internal_ast_cross_table_reference_extra_info();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_cross_table_reference_extra_info(
    ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_cross_table_reference_extra_info_);
  }
  ast_cross_table_reference_extra_info_ = ast_cross_table_reference_extra_info;
  if (ast_cross_table_reference_extra_info) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_cross_table_reference_extra_info() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* temp = ast_cross_table_reference_extra_info_;
  ast_cross_table_reference_extra_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_cross_table_reference_extra_info() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* temp = ast_cross_table_reference_extra_info_;
  ast_cross_table_reference_extra_info_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_cross_table_reference_extra_info() {
  _has_bits_[0] |= 0x00000400u;
  if (ast_cross_table_reference_extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(GetArena());
    ast_cross_table_reference_extra_info_ = p;
  }
  return ast_cross_table_reference_extra_info_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_cross_table_reference_extra_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
  return _internal_mutable_ast_cross_table_reference_extra_info();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_cross_table_reference_extra_info(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ast_cross_table_reference_extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_cross_table_reference_extra_info_;
  }
  if (ast_cross_table_reference_extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_cross_table_reference_extra_info);
    if (message_arena != submessage_arena) {
      ast_cross_table_reference_extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_cross_table_reference_extra_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ast_cross_table_reference_extra_info_ = ast_cross_table_reference_extra_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info)
}

// optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_uid_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || ast_uid_coordinate_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_uid_coordinate() const {
  return _internal_has_ast_uid_coordinate();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_uid_coordinate() {
  if (ast_uid_coordinate_ != nullptr) ast_uid_coordinate_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_uid_coordinate() const {
  const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* p = ast_uid_coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_uid_coordinate() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate)
  return _internal_ast_uid_coordinate();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_uid_coordinate(
    ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ast_uid_coordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_uid_coordinate_);
  }
  ast_uid_coordinate_ = ast_uid_coordinate;
  if (ast_uid_coordinate) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate)
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_uid_coordinate() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* temp = ast_uid_coordinate_;
  ast_uid_coordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_uid_coordinate() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* temp = ast_uid_coordinate_;
  ast_uid_coordinate_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_uid_coordinate() {
  _has_bits_[0] |= 0x00000800u;
  if (ast_uid_coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive>(GetArena());
    ast_uid_coordinate_ = p;
  }
  return ast_uid_coordinate_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_uid_coordinate() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate)
  return _internal_mutable_ast_uid_coordinate();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_uid_coordinate(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* ast_uid_coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_uid_coordinate_;
  }
  if (ast_uid_coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_uid_coordinate);
    if (message_arena != submessage_arena) {
      ast_uid_coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_uid_coordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  ast_uid_coordinate_ = ast_uid_coordinate;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate)
}

// optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_sticky_bits() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || ast_sticky_bits_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_sticky_bits() const {
  return _internal_has_ast_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_sticky_bits() {
  if (ast_sticky_bits_ != nullptr) ast_sticky_bits_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_sticky_bits() const {
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits* p = ast_sticky_bits_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&>(
      ::TSCE::_ASTNodeArrayArchive_ASTStickyBits_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTNodeArchive::ast_sticky_bits() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits)
  return _internal_ast_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_sticky_bits(
    ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_sticky_bits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_sticky_bits_);
  }
  ast_sticky_bits_ = ast_sticky_bits;
  if (ast_sticky_bits) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits)
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::release_ast_sticky_bits() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = ast_sticky_bits_;
  ast_sticky_bits_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_sticky_bits() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits)
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = ast_sticky_bits_;
  ast_sticky_bits_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_sticky_bits() {
  _has_bits_[0] |= 0x00001000u;
  if (ast_sticky_bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTStickyBits>(GetArena());
    ast_sticky_bits_ = p;
  }
  return ast_sticky_bits_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_sticky_bits() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits)
  return _internal_mutable_ast_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_sticky_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_sticky_bits_;
  }
  if (ast_sticky_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_sticky_bits);
    if (message_arena != submessage_arena) {
      ast_sticky_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_sticky_bits, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ast_sticky_bits_ = ast_sticky_bits;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits)
}

// optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_frozen_sticky_bits() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || ast_frozen_sticky_bits_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_frozen_sticky_bits() const {
  return _internal_has_ast_frozen_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_frozen_sticky_bits() {
  if (ast_frozen_sticky_bits_ != nullptr) ast_frozen_sticky_bits_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_frozen_sticky_bits() const {
  const ::TSCE::ASTNodeArrayArchive_ASTStickyBits* p = ast_frozen_sticky_bits_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&>(
      ::TSCE::_ASTNodeArrayArchive_ASTStickyBits_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ASTNodeArrayArchive_ASTNodeArchive::ast_frozen_sticky_bits() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits)
  return _internal_ast_frozen_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_frozen_sticky_bits(
    ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_frozen_sticky_bits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_frozen_sticky_bits_);
  }
  ast_frozen_sticky_bits_ = ast_frozen_sticky_bits;
  if (ast_frozen_sticky_bits) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits)
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::release_ast_frozen_sticky_bits() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = ast_frozen_sticky_bits_;
  ast_frozen_sticky_bits_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_frozen_sticky_bits() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits)
  _has_bits_[0] &= ~0x00040000u;
  ::TSCE::ASTNodeArrayArchive_ASTStickyBits* temp = ast_frozen_sticky_bits_;
  ast_frozen_sticky_bits_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_frozen_sticky_bits() {
  _has_bits_[0] |= 0x00040000u;
  if (ast_frozen_sticky_bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTStickyBits>(GetArena());
    ast_frozen_sticky_bits_ = p;
  }
  return ast_frozen_sticky_bits_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTStickyBits* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_frozen_sticky_bits() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits)
  return _internal_mutable_ast_frozen_sticky_bits();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_frozen_sticky_bits(::TSCE::ASTNodeArrayArchive_ASTStickyBits* ast_frozen_sticky_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_frozen_sticky_bits_;
  }
  if (ast_frozen_sticky_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_frozen_sticky_bits);
    if (message_arena != submessage_arena) {
      ast_frozen_sticky_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_frozen_sticky_bits, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  ast_frozen_sticky_bits_ = ast_frozen_sticky_bits;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits)
}

// optional string AST_let_identifier = 34;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_let_identifier() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_let_identifier() const {
  return _internal_has_ast_let_identifier();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_let_identifier() {
  ast_let_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::ast_let_identifier() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier)
  return _internal_ast_let_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_let_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 ast_let_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier)
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_let_identifier() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier)
  return _internal_mutable_ast_let_identifier();
}
inline const std::string& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_let_identifier() const {
  return ast_let_identifier_.Get();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_let_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ast_let_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_let_identifier() {
  _has_bits_[0] |= 0x00000010u;
  return ast_let_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ASTNodeArrayArchive_ASTNodeArchive::release_ast_let_identifier() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier)
  if (!_internal_has_ast_let_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ast_let_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_let_identifier(std::string* ast_let_identifier) {
  if (ast_let_identifier != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ast_let_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ast_let_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier)
}

// optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_let_e2() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || ast_let_e2_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_let_e2() const {
  return _internal_has_ast_let_e2();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_let_e2() {
  if (ast_let_e2_ != nullptr) ast_let_e2_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_let_e2() const {
  const ::TSCE::ASTNodeArrayArchive* p = ast_let_e2_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_let_e2() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2)
  return _internal_ast_let_e2();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_let_e2(
    ::TSCE::ASTNodeArrayArchive* ast_let_e2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_let_e2_);
  }
  ast_let_e2_ = ast_let_e2;
  if (ast_let_e2) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2)
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_let_e2() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_let_e2_;
  ast_let_e2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_let_e2() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2)
  _has_bits_[0] &= ~0x00002000u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_let_e2_;
  ast_let_e2_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_let_e2() {
  _has_bits_[0] |= 0x00002000u;
  if (ast_let_e2_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArena());
    ast_let_e2_ = p;
  }
  return ast_let_e2_;
}
inline ::TSCE::ASTNodeArrayArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_let_e2() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2)
  return _internal_mutable_ast_let_e2();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_let_e2(::TSCE::ASTNodeArrayArchive* ast_let_e2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_let_e2_;
  }
  if (ast_let_e2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_let_e2);
    if (message_arena != submessage_arena) {
      ast_let_e2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_let_e2, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  ast_let_e2_ = ast_let_e2;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2)
}

// optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_let_whitespace() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || ast_let_whitespace_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_let_whitespace() const {
  return _internal_has_ast_let_whitespace();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_let_whitespace() {
  if (ast_let_whitespace_ != nullptr) ast_let_whitespace_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_let_whitespace() const {
  const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* p = ast_let_whitespace_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace&>(
      ::TSCE::_ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& ASTNodeArrayArchive_ASTNodeArchive::ast_let_whitespace() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace)
  return _internal_ast_let_whitespace();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_let_whitespace(
    ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ast_let_whitespace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_let_whitespace_);
  }
  ast_let_whitespace_ = ast_let_whitespace;
  if (ast_let_whitespace) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace)
}
inline ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ASTNodeArrayArchive_ASTNodeArchive::release_ast_let_whitespace() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* temp = ast_let_whitespace_;
  ast_let_whitespace_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_let_whitespace() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace)
  _has_bits_[0] &= ~0x00004000u;
  ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* temp = ast_let_whitespace_;
  ast_let_whitespace_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_let_whitespace() {
  _has_bits_[0] |= 0x00004000u;
  if (ast_let_whitespace_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace>(GetArena());
    ast_let_whitespace_ = p;
  }
  return ast_let_whitespace_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_let_whitespace() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace)
  return _internal_mutable_ast_let_whitespace();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_let_whitespace(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* ast_let_whitespace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_let_whitespace_;
  }
  if (ast_let_whitespace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_let_whitespace);
    if (message_arena != submessage_arena) {
      ast_let_whitespace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_let_whitespace, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  ast_let_whitespace_ = ast_let_whitespace;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace)
}

// optional uint32 AST_symbol = 37;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_symbol() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_symbol() const {
  return _internal_has_ast_symbol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_symbol() {
  ast_symbol_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_symbol() const {
  return ast_symbol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASTNodeArrayArchive_ASTNodeArchive::ast_symbol() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_symbol)
  return _internal_ast_symbol();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  ast_symbol_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ast_symbol(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_symbol)
}

// optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_tract_list() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || ast_tract_list_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_tract_list() const {
  return _internal_has_ast_tract_list();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_tract_list() {
  if (ast_tract_list_ != nullptr) ast_tract_list_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_tract_list() const {
  const ::TSCE::ASTNodeArrayArchive_ASTUidTractList* p = ast_tract_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTUidTractList&>(
      ::TSCE::_ASTNodeArrayArchive_ASTUidTractList_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& ASTNodeArrayArchive_ASTNodeArchive::ast_tract_list() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list)
  return _internal_ast_tract_list();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_tract_list(
    ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ast_tract_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_tract_list_);
  }
  ast_tract_list_ = ast_tract_list;
  if (ast_tract_list) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list)
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ASTNodeArrayArchive_ASTNodeArchive::release_ast_tract_list() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* temp = ast_tract_list_;
  ast_tract_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_tract_list() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list)
  _has_bits_[0] &= ~0x00008000u;
  ::TSCE::ASTNodeArrayArchive_ASTUidTractList* temp = ast_tract_list_;
  ast_tract_list_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_tract_list() {
  _has_bits_[0] |= 0x00008000u;
  if (ast_tract_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTUidTractList>(GetArena());
    ast_tract_list_ = p;
  }
  return ast_tract_list_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTUidTractList* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_tract_list() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list)
  return _internal_mutable_ast_tract_list();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_tract_list(::TSCE::ASTNodeArrayArchive_ASTUidTractList* ast_tract_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_tract_list_;
  }
  if (ast_tract_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_tract_list);
    if (message_arena != submessage_arena) {
      ast_tract_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_tract_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  ast_tract_list_ = ast_tract_list;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list)
}

// optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_category_ref() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || ast_category_ref_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_category_ref() const {
  return _internal_has_ast_category_ref();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_category_ref() {
  if (ast_category_ref_ != nullptr) ast_category_ref_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_category_ref() const {
  const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* p = ast_category_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_category_ref() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref)
  return _internal_ast_category_ref();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_category_ref(
    ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ast_category_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_category_ref_);
  }
  ast_category_ref_ = ast_category_ref;
  if (ast_category_ref) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref)
}
inline ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_category_ref() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* temp = ast_category_ref_;
  ast_category_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_category_ref() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref)
  _has_bits_[0] &= ~0x00010000u;
  ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* temp = ast_category_ref_;
  ast_category_ref_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_category_ref() {
  _has_bits_[0] |= 0x00010000u;
  if (ast_category_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive>(GetArena());
    ast_category_ref_ = p;
  }
  return ast_category_ref_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_category_ref() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref)
  return _internal_mutable_ast_category_ref();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_category_ref(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* ast_category_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_category_ref_;
  }
  if (ast_category_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_category_ref);
    if (message_arena != submessage_arena) {
      ast_category_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_category_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  ast_category_ref_ = ast_category_ref;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref)
}

// optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_colon_tract() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || ast_colon_tract_ != nullptr);
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_colon_tract() const {
  return _internal_has_ast_colon_tract();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_colon_tract() {
  if (ast_colon_tract_ != nullptr) ast_colon_tract_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_colon_tract() const {
  const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* p = ast_colon_tract_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive&>(
      ::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& ASTNodeArrayArchive_ASTNodeArchive::ast_colon_tract() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract)
  return _internal_ast_colon_tract();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_set_allocated_ast_colon_tract(
    ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ast_colon_tract) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_colon_tract_);
  }
  ast_colon_tract_ = ast_colon_tract;
  if (ast_colon_tract) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract)
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ASTNodeArrayArchive_ASTNodeArchive::release_ast_colon_tract() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* temp = ast_colon_tract_;
  ast_colon_tract_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ASTNodeArrayArchive_ASTNodeArchive::unsafe_arena_release_ast_colon_tract() {
  // @@protoc_insertion_point(field_release:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract)
  _has_bits_[0] &= ~0x00020000u;
  ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* temp = ast_colon_tract_;
  ast_colon_tract_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ASTNodeArrayArchive_ASTNodeArchive::_internal_mutable_ast_colon_tract() {
  _has_bits_[0] |= 0x00020000u;
  if (ast_colon_tract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive_ASTColonTractArchive>(GetArena());
    ast_colon_tract_ = p;
  }
  return ast_colon_tract_;
}
inline ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ASTNodeArrayArchive_ASTNodeArchive::mutable_ast_colon_tract() {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract)
  return _internal_mutable_ast_colon_tract();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_allocated_ast_colon_tract(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* ast_colon_tract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_colon_tract_;
  }
  if (ast_colon_tract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_colon_tract);
    if (message_arena != submessage_arena) {
      ast_colon_tract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_colon_tract, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  ast_colon_tract_ = ast_colon_tract;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract)
}

// optional uint64 AST_number_node_decimal_low = 42;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_number_node_decimal_low() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_number_node_decimal_low() const {
  return _internal_has_ast_number_node_decimal_low();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_number_node_decimal_low() {
  ast_number_node_decimal_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_number_node_decimal_low() const {
  return ast_number_node_decimal_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ASTNodeArrayArchive_ASTNodeArchive::ast_number_node_decimal_low() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_decimal_low)
  return _internal_ast_number_node_decimal_low();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_number_node_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000020u;
  ast_number_node_decimal_low_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_number_node_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ast_number_node_decimal_low(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_decimal_low)
}

// optional uint64 AST_number_node_decimal_high = 43;
inline bool ASTNodeArrayArchive_ASTNodeArchive::_internal_has_ast_number_node_decimal_high() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ASTNodeArrayArchive_ASTNodeArchive::has_ast_number_node_decimal_high() const {
  return _internal_has_ast_number_node_decimal_high();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::clear_ast_number_node_decimal_high() {
  ast_number_node_decimal_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ASTNodeArrayArchive_ASTNodeArchive::_internal_ast_number_node_decimal_high() const {
  return ast_number_node_decimal_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ASTNodeArrayArchive_ASTNodeArchive::ast_number_node_decimal_high() const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_decimal_high)
  return _internal_ast_number_node_decimal_high();
}
inline void ASTNodeArrayArchive_ASTNodeArchive::_internal_set_ast_number_node_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000080u;
  ast_number_node_decimal_high_ = value;
}
inline void ASTNodeArrayArchive_ASTNodeArchive::set_ast_number_node_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ast_number_node_decimal_high(value);
  // @@protoc_insertion_point(field_set:TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_number_node_decimal_high)
}

// -------------------------------------------------------------------

// ASTNodeArrayArchive

// repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
inline int ASTNodeArrayArchive::_internal_ast_node_size() const {
  return ast_node_.size();
}
inline int ASTNodeArrayArchive::ast_node_size() const {
  return _internal_ast_node_size();
}
inline void ASTNodeArrayArchive::clear_ast_node() {
  ast_node_.Clear();
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::mutable_ast_node(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ASTNodeArrayArchive.AST_node)
  return ast_node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >*
ASTNodeArrayArchive::mutable_ast_node() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ASTNodeArrayArchive.AST_node)
  return &ast_node_;
}
inline const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ASTNodeArrayArchive::_internal_ast_node(int index) const {
  return ast_node_.Get(index);
}
inline const ::TSCE::ASTNodeArrayArchive_ASTNodeArchive& ASTNodeArrayArchive::ast_node(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ASTNodeArrayArchive.AST_node)
  return _internal_ast_node(index);
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::_internal_add_ast_node() {
  return ast_node_.Add();
}
inline ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive::add_ast_node() {
  // @@protoc_insertion_point(field_add:TSCE.ASTNodeArrayArchive.AST_node)
  return _internal_add_ast_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >&
ASTNodeArrayArchive::ast_node() const {
  // @@protoc_insertion_point(field_list:TSCE.ASTNodeArrayArchive.AST_node)
  return ast_node_;
}

// -------------------------------------------------------------------

// FormulaTranslationFlagsArchive

// optional bool excel_import_translation = 1 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_excel_import_translation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_excel_import_translation() const {
  return _internal_has_excel_import_translation();
}
inline void FormulaTranslationFlagsArchive::clear_excel_import_translation() {
  excel_import_translation_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FormulaTranslationFlagsArchive::_internal_excel_import_translation() const {
  return excel_import_translation_;
}
inline bool FormulaTranslationFlagsArchive::excel_import_translation() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.excel_import_translation)
  return _internal_excel_import_translation();
}
inline void FormulaTranslationFlagsArchive::_internal_set_excel_import_translation(bool value) {
  _has_bits_[0] |= 0x00000001u;
  excel_import_translation_ = value;
}
inline void FormulaTranslationFlagsArchive::set_excel_import_translation(bool value) {
  _internal_set_excel_import_translation(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.excel_import_translation)
}

// optional bool number_to_date_coercion_removal_translation = 2 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_number_to_date_coercion_removal_translation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_number_to_date_coercion_removal_translation() const {
  return _internal_has_number_to_date_coercion_removal_translation();
}
inline void FormulaTranslationFlagsArchive::clear_number_to_date_coercion_removal_translation() {
  number_to_date_coercion_removal_translation_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FormulaTranslationFlagsArchive::_internal_number_to_date_coercion_removal_translation() const {
  return number_to_date_coercion_removal_translation_;
}
inline bool FormulaTranslationFlagsArchive::number_to_date_coercion_removal_translation() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.number_to_date_coercion_removal_translation)
  return _internal_number_to_date_coercion_removal_translation();
}
inline void FormulaTranslationFlagsArchive::_internal_set_number_to_date_coercion_removal_translation(bool value) {
  _has_bits_[0] |= 0x00000002u;
  number_to_date_coercion_removal_translation_ = value;
}
inline void FormulaTranslationFlagsArchive::set_number_to_date_coercion_removal_translation(bool value) {
  _internal_set_number_to_date_coercion_removal_translation(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.number_to_date_coercion_removal_translation)
}

// optional bool contains_uid_form_references = 3 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_contains_uid_form_references() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_contains_uid_form_references() const {
  return _internal_has_contains_uid_form_references();
}
inline void FormulaTranslationFlagsArchive::clear_contains_uid_form_references() {
  contains_uid_form_references_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FormulaTranslationFlagsArchive::_internal_contains_uid_form_references() const {
  return contains_uid_form_references_;
}
inline bool FormulaTranslationFlagsArchive::contains_uid_form_references() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.contains_uid_form_references)
  return _internal_contains_uid_form_references();
}
inline void FormulaTranslationFlagsArchive::_internal_set_contains_uid_form_references(bool value) {
  _has_bits_[0] |= 0x00000004u;
  contains_uid_form_references_ = value;
}
inline void FormulaTranslationFlagsArchive::set_contains_uid_form_references(bool value) {
  _internal_set_contains_uid_form_references(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.contains_uid_form_references)
}

// optional bool contains_frozen_references = 4 [default = false];
inline bool FormulaTranslationFlagsArchive::_internal_has_contains_frozen_references() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaTranslationFlagsArchive::has_contains_frozen_references() const {
  return _internal_has_contains_frozen_references();
}
inline void FormulaTranslationFlagsArchive::clear_contains_frozen_references() {
  contains_frozen_references_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FormulaTranslationFlagsArchive::_internal_contains_frozen_references() const {
  return contains_frozen_references_;
}
inline bool FormulaTranslationFlagsArchive::contains_frozen_references() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaTranslationFlagsArchive.contains_frozen_references)
  return _internal_contains_frozen_references();
}
inline void FormulaTranslationFlagsArchive::_internal_set_contains_frozen_references(bool value) {
  _has_bits_[0] |= 0x00000008u;
  contains_frozen_references_ = value;
}
inline void FormulaTranslationFlagsArchive::set_contains_frozen_references(bool value) {
  _internal_set_contains_frozen_references(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaTranslationFlagsArchive.contains_frozen_references)
}

// -------------------------------------------------------------------

// FormulaArchive

// required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
inline bool FormulaArchive::_internal_has_ast_node_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ast_node_array_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_ast_node_array() const {
  return _internal_has_ast_node_array();
}
inline void FormulaArchive::clear_ast_node_array() {
  if (ast_node_array_ != nullptr) ast_node_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive& FormulaArchive::_internal_ast_node_array() const {
  const ::TSCE::ASTNodeArrayArchive* p = ast_node_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& FormulaArchive::ast_node_array() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.AST_node_array)
  return _internal_ast_node_array();
}
inline void FormulaArchive::unsafe_arena_set_allocated_ast_node_array(
    ::TSCE::ASTNodeArrayArchive* ast_node_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_node_array_);
  }
  ast_node_array_ = ast_node_array;
  if (ast_node_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.AST_node_array)
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::release_ast_node_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_node_array_;
  ast_node_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::unsafe_arena_release_ast_node_array() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.AST_node_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_node_array_;
  ast_node_array_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::_internal_mutable_ast_node_array() {
  _has_bits_[0] |= 0x00000001u;
  if (ast_node_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArena());
    ast_node_array_ = p;
  }
  return ast_node_array_;
}
inline ::TSCE::ASTNodeArrayArchive* FormulaArchive::mutable_ast_node_array() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.AST_node_array)
  return _internal_mutable_ast_node_array();
}
inline void FormulaArchive::set_allocated_ast_node_array(::TSCE::ASTNodeArrayArchive* ast_node_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_node_array_;
  }
  if (ast_node_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast_node_array);
    if (message_arena != submessage_arena) {
      ast_node_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_node_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_node_array_ = ast_node_array;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.AST_node_array)
}

// optional uint32 host_column = 2;
inline bool FormulaArchive::_internal_has_host_column() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_column() const {
  return _internal_has_host_column();
}
inline void FormulaArchive::clear_host_column() {
  host_column_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaArchive::_internal_host_column() const {
  return host_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaArchive::host_column() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_column)
  return _internal_host_column();
}
inline void FormulaArchive::_internal_set_host_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  host_column_ = value;
}
inline void FormulaArchive::set_host_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_column(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_column)
}

// optional uint32 host_row = 3;
inline bool FormulaArchive::_internal_has_host_row() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_row() const {
  return _internal_has_host_row();
}
inline void FormulaArchive::clear_host_row() {
  host_row_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaArchive::_internal_host_row() const {
  return host_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaArchive::host_row() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_row)
  return _internal_host_row();
}
inline void FormulaArchive::_internal_set_host_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  host_row_ = value;
}
inline void FormulaArchive::set_host_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_row(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_row)
}

// optional bool host_column_is_negative = 4 [default = false];
inline bool FormulaArchive::_internal_has_host_column_is_negative() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_column_is_negative() const {
  return _internal_has_host_column_is_negative();
}
inline void FormulaArchive::clear_host_column_is_negative() {
  host_column_is_negative_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FormulaArchive::_internal_host_column_is_negative() const {
  return host_column_is_negative_;
}
inline bool FormulaArchive::host_column_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_column_is_negative)
  return _internal_host_column_is_negative();
}
inline void FormulaArchive::_internal_set_host_column_is_negative(bool value) {
  _has_bits_[0] |= 0x00000080u;
  host_column_is_negative_ = value;
}
inline void FormulaArchive::set_host_column_is_negative(bool value) {
  _internal_set_host_column_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_column_is_negative)
}

// optional bool host_row_is_negative = 5 [default = false];
inline bool FormulaArchive::_internal_has_host_row_is_negative() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormulaArchive::has_host_row_is_negative() const {
  return _internal_has_host_row_is_negative();
}
inline void FormulaArchive::clear_host_row_is_negative() {
  host_row_is_negative_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FormulaArchive::_internal_host_row_is_negative() const {
  return host_row_is_negative_;
}
inline bool FormulaArchive::host_row_is_negative() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_row_is_negative)
  return _internal_host_row_is_negative();
}
inline void FormulaArchive::_internal_set_host_row_is_negative(bool value) {
  _has_bits_[0] |= 0x00000100u;
  host_row_is_negative_ = value;
}
inline void FormulaArchive::set_host_row_is_negative(bool value) {
  _internal_set_host_row_is_negative(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaArchive.host_row_is_negative)
}

// optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
inline bool FormulaArchive::_internal_has_translation_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || translation_flags_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_translation_flags() const {
  return _internal_has_translation_flags();
}
inline void FormulaArchive::clear_translation_flags() {
  if (translation_flags_ != nullptr) translation_flags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::FormulaTranslationFlagsArchive& FormulaArchive::_internal_translation_flags() const {
  const ::TSCE::FormulaTranslationFlagsArchive* p = translation_flags_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaTranslationFlagsArchive&>(
      ::TSCE::_FormulaTranslationFlagsArchive_default_instance_);
}
inline const ::TSCE::FormulaTranslationFlagsArchive& FormulaArchive::translation_flags() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.translation_flags)
  return _internal_translation_flags();
}
inline void FormulaArchive::unsafe_arena_set_allocated_translation_flags(
    ::TSCE::FormulaTranslationFlagsArchive* translation_flags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_flags_);
  }
  translation_flags_ = translation_flags;
  if (translation_flags) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.translation_flags)
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::release_translation_flags() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaTranslationFlagsArchive* temp = translation_flags_;
  translation_flags_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::unsafe_arena_release_translation_flags() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.translation_flags)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaTranslationFlagsArchive* temp = translation_flags_;
  translation_flags_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::_internal_mutable_translation_flags() {
  _has_bits_[0] |= 0x00000002u;
  if (translation_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaTranslationFlagsArchive>(GetArena());
    translation_flags_ = p;
  }
  return translation_flags_;
}
inline ::TSCE::FormulaTranslationFlagsArchive* FormulaArchive::mutable_translation_flags() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.translation_flags)
  return _internal_mutable_translation_flags();
}
inline void FormulaArchive::set_allocated_translation_flags(::TSCE::FormulaTranslationFlagsArchive* translation_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_flags_;
  }
  if (translation_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation_flags);
    if (message_arena != submessage_arena) {
      translation_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  translation_flags_ = translation_flags;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.translation_flags)
}

// optional .TSP.UUID host_table_uid = 7;
inline bool FormulaArchive::_internal_has_host_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || host_table_uid_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_host_table_uid() const {
  return _internal_has_host_table_uid();
}
inline const ::TSP::UUID& FormulaArchive::_internal_host_table_uid() const {
  const ::TSP::UUID* p = host_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaArchive::host_table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_table_uid)
  return _internal_host_table_uid();
}
inline void FormulaArchive::unsafe_arena_set_allocated_host_table_uid(
    ::TSP::UUID* host_table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_table_uid_);
  }
  host_table_uid_ = host_table_uid;
  if (host_table_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.host_table_uid)
}
inline ::TSP::UUID* FormulaArchive::release_host_table_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = host_table_uid_;
  host_table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaArchive::unsafe_arena_release_host_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.host_table_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = host_table_uid_;
  host_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaArchive::_internal_mutable_host_table_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (host_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    host_table_uid_ = p;
  }
  return host_table_uid_;
}
inline ::TSP::UUID* FormulaArchive::mutable_host_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.host_table_uid)
  return _internal_mutable_host_table_uid();
}
inline void FormulaArchive::set_allocated_host_table_uid(::TSP::UUID* host_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_table_uid_);
  }
  if (host_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      host_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  host_table_uid_ = host_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.host_table_uid)
}

// optional .TSP.UUID host_column_uid = 8;
inline bool FormulaArchive::_internal_has_host_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || host_column_uid_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_host_column_uid() const {
  return _internal_has_host_column_uid();
}
inline const ::TSP::UUID& FormulaArchive::_internal_host_column_uid() const {
  const ::TSP::UUID* p = host_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaArchive::host_column_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_column_uid)
  return _internal_host_column_uid();
}
inline void FormulaArchive::unsafe_arena_set_allocated_host_column_uid(
    ::TSP::UUID* host_column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_column_uid_);
  }
  host_column_uid_ = host_column_uid;
  if (host_column_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.host_column_uid)
}
inline ::TSP::UUID* FormulaArchive::release_host_column_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = host_column_uid_;
  host_column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaArchive::unsafe_arena_release_host_column_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.host_column_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = host_column_uid_;
  host_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaArchive::_internal_mutable_host_column_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (host_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    host_column_uid_ = p;
  }
  return host_column_uid_;
}
inline ::TSP::UUID* FormulaArchive::mutable_host_column_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.host_column_uid)
  return _internal_mutable_host_column_uid();
}
inline void FormulaArchive::set_allocated_host_column_uid(::TSP::UUID* host_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_column_uid_);
  }
  if (host_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      host_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  host_column_uid_ = host_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.host_column_uid)
}

// optional .TSP.UUID host_row_uid = 9;
inline bool FormulaArchive::_internal_has_host_row_uid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || host_row_uid_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_host_row_uid() const {
  return _internal_has_host_row_uid();
}
inline const ::TSP::UUID& FormulaArchive::_internal_host_row_uid() const {
  const ::TSP::UUID* p = host_row_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaArchive::host_row_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaArchive.host_row_uid)
  return _internal_host_row_uid();
}
inline void FormulaArchive::unsafe_arena_set_allocated_host_row_uid(
    ::TSP::UUID* host_row_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_row_uid_);
  }
  host_row_uid_ = host_row_uid;
  if (host_row_uid) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaArchive.host_row_uid)
}
inline ::TSP::UUID* FormulaArchive::release_host_row_uid() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = host_row_uid_;
  host_row_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaArchive::unsafe_arena_release_host_row_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaArchive.host_row_uid)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = host_row_uid_;
  host_row_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaArchive::_internal_mutable_host_row_uid() {
  _has_bits_[0] |= 0x00000010u;
  if (host_row_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    host_row_uid_ = p;
  }
  return host_row_uid_;
}
inline ::TSP::UUID* FormulaArchive::mutable_host_row_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaArchive.host_row_uid)
  return _internal_mutable_host_row_uid();
}
inline void FormulaArchive::set_allocated_host_row_uid(::TSP::UUID* host_row_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_row_uid_);
  }
  if (host_row_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_row_uid)->GetArena();
    if (message_arena != submessage_arena) {
      host_row_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_row_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  host_row_uid_ = host_row_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaArchive.host_row_uid)
}

// -------------------------------------------------------------------

// FunctorArchive

// required .TSCE.FormulaArchive formula = 1;
inline bool FunctorArchive::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool FunctorArchive::has_formula() const {
  return _internal_has_formula();
}
inline void FunctorArchive::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::FormulaArchive& FunctorArchive::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& FunctorArchive::formula() const {
  // @@protoc_insertion_point(field_get:TSCE.FunctorArchive.formula)
  return _internal_formula();
}
inline void FunctorArchive::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FunctorArchive.formula)
}
inline ::TSCE::FormulaArchive* FunctorArchive::release_formula() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* FunctorArchive::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TSCE.FunctorArchive.formula)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* FunctorArchive::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* FunctorArchive::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TSCE.FunctorArchive.formula)
  return _internal_mutable_formula();
}
inline void FunctorArchive::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formula_;
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formula);
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FunctorArchive.formula)
}

// required uint32 num_args = 2;
inline bool FunctorArchive::_internal_has_num_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctorArchive::has_num_args() const {
  return _internal_has_num_args();
}
inline void FunctorArchive::clear_num_args() {
  num_args_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FunctorArchive::_internal_num_args() const {
  return num_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FunctorArchive::num_args() const {
  // @@protoc_insertion_point(field_get:TSCE.FunctorArchive.num_args)
  return _internal_num_args();
}
inline void FunctorArchive::_internal_set_num_args(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_args_ = value;
}
inline void FunctorArchive::set_num_args(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_args(value);
  // @@protoc_insertion_point(field_set:TSCE.FunctorArchive.num_args)
}

// -------------------------------------------------------------------

// FormatStructArchive

// required uint32 format_type = 1;
inline bool FormatStructArchive::_internal_has_format_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormatStructArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void FormatStructArchive::clear_format_type() {
  format_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_format_type() const {
  return format_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.format_type)
  return _internal_format_type();
}
inline void FormatStructArchive::_internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  format_type_ = value;
}
inline void FormatStructArchive::set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.format_type)
}

// optional uint32 decimal_places = 2;
inline bool FormatStructArchive::_internal_has_decimal_places() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormatStructArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void FormatStructArchive::clear_decimal_places() {
  decimal_places_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_decimal_places() const {
  return decimal_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.decimal_places)
  return _internal_decimal_places();
}
inline void FormatStructArchive::_internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  decimal_places_ = value;
}
inline void FormatStructArchive::set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.decimal_places)
}

// optional string currency_code = 3;
inline bool FormatStructArchive::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormatStructArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void FormatStructArchive::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormatStructArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.currency_code)
}
inline std::string* FormatStructArchive::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormatStructArchive.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& FormatStructArchive::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void FormatStructArchive::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000001u;
  return currency_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSCE.FormatStructArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currency_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormatStructArchive.currency_code)
}

// optional uint32 negative_style = 4;
inline bool FormatStructArchive::_internal_has_negative_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormatStructArchive::has_negative_style() const {
  return _internal_has_negative_style();
}
inline void FormatStructArchive::clear_negative_style() {
  negative_style_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_negative_style() const {
  return negative_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::negative_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.negative_style)
  return _internal_negative_style();
}
inline void FormatStructArchive::_internal_set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  negative_style_ = value;
}
inline void FormatStructArchive::set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_negative_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.negative_style)
}

// optional bool show_thousands_separator = 5;
inline bool FormatStructArchive::_internal_has_show_thousands_separator() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormatStructArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void FormatStructArchive::clear_show_thousands_separator() {
  show_thousands_separator_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FormatStructArchive::_internal_show_thousands_separator() const {
  return show_thousands_separator_;
}
inline bool FormatStructArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void FormatStructArchive::_internal_set_show_thousands_separator(bool value) {
  _has_bits_[0] |= 0x00000080u;
  show_thousands_separator_ = value;
}
inline void FormatStructArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.show_thousands_separator)
}

// optional bool use_accounting_style = 6;
inline bool FormatStructArchive::_internal_has_use_accounting_style() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormatStructArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void FormatStructArchive::clear_use_accounting_style() {
  use_accounting_style_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FormatStructArchive::_internal_use_accounting_style() const {
  return use_accounting_style_;
}
inline bool FormatStructArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void FormatStructArchive::_internal_set_use_accounting_style(bool value) {
  _has_bits_[0] |= 0x00000100u;
  use_accounting_style_ = value;
}
inline void FormatStructArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.use_accounting_style)
}

// optional uint32 duration_style = 7;
inline bool FormatStructArchive::_internal_has_duration_style() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_style() const {
  return _internal_has_duration_style();
}
inline void FormatStructArchive::clear_duration_style() {
  duration_style_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_style() const {
  return duration_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_style() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_style)
  return _internal_duration_style();
}
inline void FormatStructArchive::_internal_set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  duration_style_ = value;
}
inline void FormatStructArchive::set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_style(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_style)
}

// optional uint32 base = 8;
inline bool FormatStructArchive::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base() const {
  return _internal_has_base();
}
inline void FormatStructArchive::clear_base() {
  base_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::base() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base)
  return _internal_base();
}
inline void FormatStructArchive::_internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  base_ = value;
}
inline void FormatStructArchive::set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base)
}

// optional uint32 base_places = 9;
inline bool FormatStructArchive::_internal_has_base_places() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void FormatStructArchive::clear_base_places() {
  base_places_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_base_places() const {
  return base_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base_places)
  return _internal_base_places();
}
inline void FormatStructArchive::_internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  base_places_ = value;
}
inline void FormatStructArchive::set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base_places)
}

// optional bool base_use_minus_sign = 10;
inline bool FormatStructArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void FormatStructArchive::clear_base_use_minus_sign() {
  base_use_minus_sign_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool FormatStructArchive::_internal_base_use_minus_sign() const {
  return base_use_minus_sign_;
}
inline bool FormatStructArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void FormatStructArchive::_internal_set_base_use_minus_sign(bool value) {
  _has_bits_[0] |= 0x00000200u;
  base_use_minus_sign_ = value;
}
inline void FormatStructArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.base_use_minus_sign)
}

// optional uint32 fraction_accuracy = 11;
inline bool FormatStructArchive::_internal_has_fraction_accuracy() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void FormatStructArchive::clear_fraction_accuracy() {
  fraction_accuracy_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_fraction_accuracy() const {
  return fraction_accuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void FormatStructArchive::_internal_set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  fraction_accuracy_ = value;
}
inline void FormatStructArchive::set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.fraction_accuracy)
}

// optional bool suppress_date_format = 12;
inline bool FormatStructArchive::_internal_has_suppress_date_format() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_date_format() const {
  return _internal_has_suppress_date_format();
}
inline void FormatStructArchive::clear_suppress_date_format() {
  suppress_date_format_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool FormatStructArchive::_internal_suppress_date_format() const {
  return suppress_date_format_;
}
inline bool FormatStructArchive::suppress_date_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.suppress_date_format)
  return _internal_suppress_date_format();
}
inline void FormatStructArchive::_internal_set_suppress_date_format(bool value) {
  _has_bits_[0] |= 0x00000400u;
  suppress_date_format_ = value;
}
inline void FormatStructArchive::set_suppress_date_format(bool value) {
  _internal_set_suppress_date_format(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.suppress_date_format)
}

// optional bool suppress_time_format = 13;
inline bool FormatStructArchive::_internal_has_suppress_time_format() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_time_format() const {
  return _internal_has_suppress_time_format();
}
inline void FormatStructArchive::clear_suppress_time_format() {
  suppress_time_format_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool FormatStructArchive::_internal_suppress_time_format() const {
  return suppress_time_format_;
}
inline bool FormatStructArchive::suppress_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.suppress_time_format)
  return _internal_suppress_time_format();
}
inline void FormatStructArchive::_internal_set_suppress_time_format(bool value) {
  _has_bits_[0] |= 0x00002000u;
  suppress_time_format_ = value;
}
inline void FormatStructArchive::set_suppress_time_format(bool value) {
  _internal_set_suppress_time_format(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.suppress_time_format)
}

// optional string date_time_format = 14;
inline bool FormatStructArchive::_internal_has_date_time_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormatStructArchive::has_date_time_format() const {
  return _internal_has_date_time_format();
}
inline void FormatStructArchive::clear_date_time_format() {
  date_time_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormatStructArchive::date_time_format() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.date_time_format)
  return _internal_date_time_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_date_time_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.date_time_format)
}
inline std::string* FormatStructArchive::mutable_date_time_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormatStructArchive.date_time_format)
  return _internal_mutable_date_time_format();
}
inline const std::string& FormatStructArchive::_internal_date_time_format() const {
  return date_time_format_.Get();
}
inline void FormatStructArchive::_internal_set_date_time_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_date_time_format() {
  _has_bits_[0] |= 0x00000002u;
  return date_time_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_date_time_format() {
  // @@protoc_insertion_point(field_release:TSCE.FormatStructArchive.date_time_format)
  if (!_internal_has_date_time_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return date_time_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_date_time_format(std::string* date_time_format) {
  if (date_time_format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_time_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormatStructArchive.date_time_format)
}

// optional uint32 duration_unit_largest = 15;
inline bool FormatStructArchive::_internal_has_duration_unit_largest() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_largest() const {
  return _internal_has_duration_unit_largest();
}
inline void FormatStructArchive::clear_duration_unit_largest() {
  duration_unit_largest_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_unit_largest() const {
  return duration_unit_largest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_unit_largest() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_unit_largest)
  return _internal_duration_unit_largest();
}
inline void FormatStructArchive::_internal_set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  duration_unit_largest_ = value;
}
inline void FormatStructArchive::set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_unit_largest(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_unit_largest)
}

// optional uint32 duration_unit_smallest = 16;
inline bool FormatStructArchive::_internal_has_duration_unit_smallest() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_smallest() const {
  return _internal_has_duration_unit_smallest();
}
inline void FormatStructArchive::clear_duration_unit_smallest() {
  duration_unit_smallest_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_unit_smallest() const {
  return duration_unit_smallest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_unit_smallest() const {
  // @@protoc_insertion_point(field_get:TSCE.FormatStructArchive.duration_unit_smallest)
  return _internal_duration_unit_smallest();
}
inline void FormatStructArchive::_internal_set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  duration_unit_smallest_ = value;
}
inline void FormatStructArchive::set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_unit_smallest(value);
  // @@protoc_insertion_point(field_set:TSCE.FormatStructArchive.duration_unit_smallest)
}

// -------------------------------------------------------------------

// RangeCoordinateArchive

// required uint32 top_left_column = 1;
inline bool RangeCoordinateArchive::_internal_has_top_left_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_top_left_column() const {
  return _internal_has_top_left_column();
}
inline void RangeCoordinateArchive::clear_top_left_column() {
  top_left_column_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::_internal_top_left_column() const {
  return top_left_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::top_left_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.top_left_column)
  return _internal_top_left_column();
}
inline void RangeCoordinateArchive::_internal_set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_left_column_ = value;
}
inline void RangeCoordinateArchive::set_top_left_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_left_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.top_left_column)
}

// required uint32 top_left_row = 2;
inline bool RangeCoordinateArchive::_internal_has_top_left_row() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_top_left_row() const {
  return _internal_has_top_left_row();
}
inline void RangeCoordinateArchive::clear_top_left_row() {
  top_left_row_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::_internal_top_left_row() const {
  return top_left_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::top_left_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.top_left_row)
  return _internal_top_left_row();
}
inline void RangeCoordinateArchive::_internal_set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_left_row_ = value;
}
inline void RangeCoordinateArchive::set_top_left_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_left_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.top_left_row)
}

// required uint32 bottom_right_column = 3;
inline bool RangeCoordinateArchive::_internal_has_bottom_right_column() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_bottom_right_column() const {
  return _internal_has_bottom_right_column();
}
inline void RangeCoordinateArchive::clear_bottom_right_column() {
  bottom_right_column_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::_internal_bottom_right_column() const {
  return bottom_right_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::bottom_right_column() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.bottom_right_column)
  return _internal_bottom_right_column();
}
inline void RangeCoordinateArchive::_internal_set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bottom_right_column_ = value;
}
inline void RangeCoordinateArchive::set_bottom_right_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bottom_right_column(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.bottom_right_column)
}

// required uint32 bottom_right_row = 4;
inline bool RangeCoordinateArchive::_internal_has_bottom_right_row() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RangeCoordinateArchive::has_bottom_right_row() const {
  return _internal_has_bottom_right_row();
}
inline void RangeCoordinateArchive::clear_bottom_right_row() {
  bottom_right_row_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::_internal_bottom_right_row() const {
  return bottom_right_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeCoordinateArchive::bottom_right_row() const {
  // @@protoc_insertion_point(field_get:TSCE.RangeCoordinateArchive.bottom_right_row)
  return _internal_bottom_right_row();
}
inline void RangeCoordinateArchive::_internal_set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_right_row_ = value;
}
inline void RangeCoordinateArchive::set_bottom_right_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bottom_right_row(value);
  // @@protoc_insertion_point(field_set:TSCE.RangeCoordinateArchive.bottom_right_row)
}

// -------------------------------------------------------------------

// TableTransposeInfoArchive

// required uint32 number_of_footer_rows = 3;
inline bool TableTransposeInfoArchive::_internal_has_number_of_footer_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableTransposeInfoArchive::has_number_of_footer_rows() const {
  return _internal_has_number_of_footer_rows();
}
inline void TableTransposeInfoArchive::clear_number_of_footer_rows() {
  number_of_footer_rows_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableTransposeInfoArchive::_internal_number_of_footer_rows() const {
  return number_of_footer_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableTransposeInfoArchive::number_of_footer_rows() const {
  // @@protoc_insertion_point(field_get:TSCE.TableTransposeInfoArchive.number_of_footer_rows)
  return _internal_number_of_footer_rows();
}
inline void TableTransposeInfoArchive::_internal_set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_footer_rows_ = value;
}
inline void TableTransposeInfoArchive::set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_footer_rows(value);
  // @@protoc_insertion_point(field_set:TSCE.TableTransposeInfoArchive.number_of_footer_rows)
}

// required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
inline bool TableTransposeInfoArchive::_internal_has_body_range_for_transposed_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || body_range_for_transposed_table_ != nullptr);
  return value;
}
inline bool TableTransposeInfoArchive::has_body_range_for_transposed_table() const {
  return _internal_has_body_range_for_transposed_table();
}
inline void TableTransposeInfoArchive::clear_body_range_for_transposed_table() {
  if (body_range_for_transposed_table_ != nullptr) body_range_for_transposed_table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RangeCoordinateArchive& TableTransposeInfoArchive::_internal_body_range_for_transposed_table() const {
  const ::TSCE::RangeCoordinateArchive* p = body_range_for_transposed_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& TableTransposeInfoArchive::body_range_for_transposed_table() const {
  // @@protoc_insertion_point(field_get:TSCE.TableTransposeInfoArchive.body_range_for_transposed_table)
  return _internal_body_range_for_transposed_table();
}
inline void TableTransposeInfoArchive::unsafe_arena_set_allocated_body_range_for_transposed_table(
    ::TSCE::RangeCoordinateArchive* body_range_for_transposed_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_range_for_transposed_table_);
  }
  body_range_for_transposed_table_ = body_range_for_transposed_table;
  if (body_range_for_transposed_table) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TableTransposeInfoArchive.body_range_for_transposed_table)
}
inline ::TSCE::RangeCoordinateArchive* TableTransposeInfoArchive::release_body_range_for_transposed_table() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_transposed_table_;
  body_range_for_transposed_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableTransposeInfoArchive::unsafe_arena_release_body_range_for_transposed_table() {
  // @@protoc_insertion_point(field_release:TSCE.TableTransposeInfoArchive.body_range_for_transposed_table)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeCoordinateArchive* temp = body_range_for_transposed_table_;
  body_range_for_transposed_table_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* TableTransposeInfoArchive::_internal_mutable_body_range_for_transposed_table() {
  _has_bits_[0] |= 0x00000001u;
  if (body_range_for_transposed_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    body_range_for_transposed_table_ = p;
  }
  return body_range_for_transposed_table_;
}
inline ::TSCE::RangeCoordinateArchive* TableTransposeInfoArchive::mutable_body_range_for_transposed_table() {
  // @@protoc_insertion_point(field_mutable:TSCE.TableTransposeInfoArchive.body_range_for_transposed_table)
  return _internal_mutable_body_range_for_transposed_table();
}
inline void TableTransposeInfoArchive::set_allocated_body_range_for_transposed_table(::TSCE::RangeCoordinateArchive* body_range_for_transposed_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_range_for_transposed_table_;
  }
  if (body_range_for_transposed_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body_range_for_transposed_table);
    if (message_arena != submessage_arena) {
      body_range_for_transposed_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_range_for_transposed_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_range_for_transposed_table_ = body_range_for_transposed_table;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TableTransposeInfoArchive.body_range_for_transposed_table)
}

// -------------------------------------------------------------------

// MergeOriginMovedArchive

// repeated uint32 src_column = 1;
inline int MergeOriginMovedArchive::_internal_src_column_size() const {
  return src_column_.size();
}
inline int MergeOriginMovedArchive::src_column_size() const {
  return _internal_src_column_size();
}
inline void MergeOriginMovedArchive::clear_src_column() {
  src_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::_internal_src_column(int index) const {
  return src_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::src_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.MergeOriginMovedArchive.src_column)
  return _internal_src_column(index);
}
inline void MergeOriginMovedArchive::set_src_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.MergeOriginMovedArchive.src_column)
}
inline void MergeOriginMovedArchive::_internal_add_src_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_column_.Add(value);
}
inline void MergeOriginMovedArchive::add_src_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_src_column(value);
  // @@protoc_insertion_point(field_add:TSCE.MergeOriginMovedArchive.src_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::_internal_src_column() const {
  return src_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::src_column() const {
  // @@protoc_insertion_point(field_list:TSCE.MergeOriginMovedArchive.src_column)
  return _internal_src_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::_internal_mutable_src_column() {
  return &src_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::mutable_src_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.MergeOriginMovedArchive.src_column)
  return _internal_mutable_src_column();
}

// repeated uint32 src_row = 2;
inline int MergeOriginMovedArchive::_internal_src_row_size() const {
  return src_row_.size();
}
inline int MergeOriginMovedArchive::src_row_size() const {
  return _internal_src_row_size();
}
inline void MergeOriginMovedArchive::clear_src_row() {
  src_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::_internal_src_row(int index) const {
  return src_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::src_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.MergeOriginMovedArchive.src_row)
  return _internal_src_row(index);
}
inline void MergeOriginMovedArchive::set_src_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.MergeOriginMovedArchive.src_row)
}
inline void MergeOriginMovedArchive::_internal_add_src_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_row_.Add(value);
}
inline void MergeOriginMovedArchive::add_src_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_src_row(value);
  // @@protoc_insertion_point(field_add:TSCE.MergeOriginMovedArchive.src_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::_internal_src_row() const {
  return src_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::src_row() const {
  // @@protoc_insertion_point(field_list:TSCE.MergeOriginMovedArchive.src_row)
  return _internal_src_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::_internal_mutable_src_row() {
  return &src_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::mutable_src_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.MergeOriginMovedArchive.src_row)
  return _internal_mutable_src_row();
}

// repeated uint32 dst_column = 3;
inline int MergeOriginMovedArchive::_internal_dst_column_size() const {
  return dst_column_.size();
}
inline int MergeOriginMovedArchive::dst_column_size() const {
  return _internal_dst_column_size();
}
inline void MergeOriginMovedArchive::clear_dst_column() {
  dst_column_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::_internal_dst_column(int index) const {
  return dst_column_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::dst_column(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.MergeOriginMovedArchive.dst_column)
  return _internal_dst_column(index);
}
inline void MergeOriginMovedArchive::set_dst_column(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dst_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.MergeOriginMovedArchive.dst_column)
}
inline void MergeOriginMovedArchive::_internal_add_dst_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dst_column_.Add(value);
}
inline void MergeOriginMovedArchive::add_dst_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dst_column(value);
  // @@protoc_insertion_point(field_add:TSCE.MergeOriginMovedArchive.dst_column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::_internal_dst_column() const {
  return dst_column_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::dst_column() const {
  // @@protoc_insertion_point(field_list:TSCE.MergeOriginMovedArchive.dst_column)
  return _internal_dst_column();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::_internal_mutable_dst_column() {
  return &dst_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::mutable_dst_column() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.MergeOriginMovedArchive.dst_column)
  return _internal_mutable_dst_column();
}

// repeated uint32 dst_row = 4;
inline int MergeOriginMovedArchive::_internal_dst_row_size() const {
  return dst_row_.size();
}
inline int MergeOriginMovedArchive::dst_row_size() const {
  return _internal_dst_row_size();
}
inline void MergeOriginMovedArchive::clear_dst_row() {
  dst_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::_internal_dst_row(int index) const {
  return dst_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOriginMovedArchive::dst_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.MergeOriginMovedArchive.dst_row)
  return _internal_dst_row(index);
}
inline void MergeOriginMovedArchive::set_dst_row(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dst_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCE.MergeOriginMovedArchive.dst_row)
}
inline void MergeOriginMovedArchive::_internal_add_dst_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dst_row_.Add(value);
}
inline void MergeOriginMovedArchive::add_dst_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dst_row(value);
  // @@protoc_insertion_point(field_add:TSCE.MergeOriginMovedArchive.dst_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::_internal_dst_row() const {
  return dst_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOriginMovedArchive::dst_row() const {
  // @@protoc_insertion_point(field_list:TSCE.MergeOriginMovedArchive.dst_row)
  return _internal_dst_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::_internal_mutable_dst_row() {
  return &dst_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOriginMovedArchive::mutable_dst_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.MergeOriginMovedArchive.dst_row)
  return _internal_mutable_dst_row();
}

// -------------------------------------------------------------------

// OwnerUIDMapperArchive

// required .TSP.UUID table_uid = 1;
inline bool OwnerUIDMapperArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.table_uid)
  return _internal_table_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.table_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.table_uid)
}

// required .TSP.UUID next_table_uid = 2;
inline bool OwnerUIDMapperArchive::_internal_has_next_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || next_table_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_table_uid() const {
  return _internal_has_next_table_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_table_uid() const {
  const ::TSP::UUID* p = next_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_table_uid)
  return _internal_next_table_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_table_uid(
    ::TSP::UUID* next_table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_table_uid_);
  }
  next_table_uid_ = next_table_uid;
  if (next_table_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_table_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_table_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = next_table_uid_;
  next_table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_table_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = next_table_uid_;
  next_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_table_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (next_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_table_uid_ = p;
  }
  return next_table_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_table_uid)
  return _internal_mutable_next_table_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_table_uid(::TSP::UUID* next_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_table_uid_);
  }
  if (next_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_table_uid_ = next_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_table_uid)
}

// required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
inline bool OwnerUIDMapperArchive::_internal_has_hidden_state_for_rows_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || hidden_state_for_rows_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_hidden_state_for_rows_owner_uid() const {
  return _internal_has_hidden_state_for_rows_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_hidden_state_for_rows_owner_uid() const {
  const ::TSP::UUID* p = hidden_state_for_rows_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::hidden_state_for_rows_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid)
  return _internal_hidden_state_for_rows_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_hidden_state_for_rows_owner_uid(
    ::TSP::UUID* hidden_state_for_rows_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_rows_owner_uid_);
  }
  hidden_state_for_rows_owner_uid_ = hidden_state_for_rows_owner_uid;
  if (hidden_state_for_rows_owner_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_hidden_state_for_rows_owner_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = hidden_state_for_rows_owner_uid_;
  hidden_state_for_rows_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_hidden_state_for_rows_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = hidden_state_for_rows_owner_uid_;
  hidden_state_for_rows_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_hidden_state_for_rows_owner_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (hidden_state_for_rows_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    hidden_state_for_rows_owner_uid_ = p;
  }
  return hidden_state_for_rows_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_hidden_state_for_rows_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid)
  return _internal_mutable_hidden_state_for_rows_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_hidden_state_for_rows_owner_uid(::TSP::UUID* hidden_state_for_rows_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_rows_owner_uid_);
  }
  if (hidden_state_for_rows_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_rows_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_state_for_rows_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_state_for_rows_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hidden_state_for_rows_owner_uid_ = hidden_state_for_rows_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid)
}

// required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
inline bool OwnerUIDMapperArchive::_internal_has_next_hidden_state_for_rows_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || next_hidden_state_for_rows_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_hidden_state_for_rows_owner_uid() const {
  return _internal_has_next_hidden_state_for_rows_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_hidden_state_for_rows_owner_uid() const {
  const ::TSP::UUID* p = next_hidden_state_for_rows_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_hidden_state_for_rows_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid)
  return _internal_next_hidden_state_for_rows_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_hidden_state_for_rows_owner_uid(
    ::TSP::UUID* next_hidden_state_for_rows_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_rows_owner_uid_);
  }
  next_hidden_state_for_rows_owner_uid_ = next_hidden_state_for_rows_owner_uid;
  if (next_hidden_state_for_rows_owner_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_hidden_state_for_rows_owner_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = next_hidden_state_for_rows_owner_uid_;
  next_hidden_state_for_rows_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_hidden_state_for_rows_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = next_hidden_state_for_rows_owner_uid_;
  next_hidden_state_for_rows_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_hidden_state_for_rows_owner_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (next_hidden_state_for_rows_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_hidden_state_for_rows_owner_uid_ = p;
  }
  return next_hidden_state_for_rows_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_hidden_state_for_rows_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid)
  return _internal_mutable_next_hidden_state_for_rows_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_hidden_state_for_rows_owner_uid(::TSP::UUID* next_hidden_state_for_rows_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_rows_owner_uid_);
  }
  if (next_hidden_state_for_rows_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_rows_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_hidden_state_for_rows_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hidden_state_for_rows_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  next_hidden_state_for_rows_owner_uid_ = next_hidden_state_for_rows_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid)
}

// required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
inline bool OwnerUIDMapperArchive::_internal_has_hidden_state_for_columns_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || hidden_state_for_columns_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_hidden_state_for_columns_owner_uid() const {
  return _internal_has_hidden_state_for_columns_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_hidden_state_for_columns_owner_uid() const {
  const ::TSP::UUID* p = hidden_state_for_columns_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::hidden_state_for_columns_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid)
  return _internal_hidden_state_for_columns_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_hidden_state_for_columns_owner_uid(
    ::TSP::UUID* hidden_state_for_columns_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_columns_owner_uid_);
  }
  hidden_state_for_columns_owner_uid_ = hidden_state_for_columns_owner_uid;
  if (hidden_state_for_columns_owner_uid) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_hidden_state_for_columns_owner_uid() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = hidden_state_for_columns_owner_uid_;
  hidden_state_for_columns_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_hidden_state_for_columns_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = hidden_state_for_columns_owner_uid_;
  hidden_state_for_columns_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_hidden_state_for_columns_owner_uid() {
  _has_bits_[0] |= 0x00000010u;
  if (hidden_state_for_columns_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    hidden_state_for_columns_owner_uid_ = p;
  }
  return hidden_state_for_columns_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_hidden_state_for_columns_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid)
  return _internal_mutable_hidden_state_for_columns_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_hidden_state_for_columns_owner_uid(::TSP::UUID* hidden_state_for_columns_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_columns_owner_uid_);
  }
  if (hidden_state_for_columns_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_for_columns_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_state_for_columns_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_state_for_columns_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hidden_state_for_columns_owner_uid_ = hidden_state_for_columns_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid)
}

// required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
inline bool OwnerUIDMapperArchive::_internal_has_next_hidden_state_for_columns_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || next_hidden_state_for_columns_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_hidden_state_for_columns_owner_uid() const {
  return _internal_has_next_hidden_state_for_columns_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_hidden_state_for_columns_owner_uid() const {
  const ::TSP::UUID* p = next_hidden_state_for_columns_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_hidden_state_for_columns_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid)
  return _internal_next_hidden_state_for_columns_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_hidden_state_for_columns_owner_uid(
    ::TSP::UUID* next_hidden_state_for_columns_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_columns_owner_uid_);
  }
  next_hidden_state_for_columns_owner_uid_ = next_hidden_state_for_columns_owner_uid;
  if (next_hidden_state_for_columns_owner_uid) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_hidden_state_for_columns_owner_uid() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = next_hidden_state_for_columns_owner_uid_;
  next_hidden_state_for_columns_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_hidden_state_for_columns_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = next_hidden_state_for_columns_owner_uid_;
  next_hidden_state_for_columns_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_hidden_state_for_columns_owner_uid() {
  _has_bits_[0] |= 0x00000020u;
  if (next_hidden_state_for_columns_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_hidden_state_for_columns_owner_uid_ = p;
  }
  return next_hidden_state_for_columns_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_hidden_state_for_columns_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid)
  return _internal_mutable_next_hidden_state_for_columns_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_hidden_state_for_columns_owner_uid(::TSP::UUID* next_hidden_state_for_columns_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_columns_owner_uid_);
  }
  if (next_hidden_state_for_columns_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hidden_state_for_columns_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_hidden_state_for_columns_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hidden_state_for_columns_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  next_hidden_state_for_columns_owner_uid_ = next_hidden_state_for_columns_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid)
}

// required .TSP.UUID conditional_style_owner_uid = 7;
inline bool OwnerUIDMapperArchive::_internal_has_conditional_style_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || conditional_style_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_conditional_style_owner_uid() const {
  return _internal_has_conditional_style_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_conditional_style_owner_uid() const {
  const ::TSP::UUID* p = conditional_style_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::conditional_style_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid)
  return _internal_conditional_style_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_conditional_style_owner_uid(
    ::TSP::UUID* conditional_style_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_owner_uid_);
  }
  conditional_style_owner_uid_ = conditional_style_owner_uid;
  if (conditional_style_owner_uid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_conditional_style_owner_uid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = conditional_style_owner_uid_;
  conditional_style_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_conditional_style_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = conditional_style_owner_uid_;
  conditional_style_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_conditional_style_owner_uid() {
  _has_bits_[0] |= 0x00000040u;
  if (conditional_style_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    conditional_style_owner_uid_ = p;
  }
  return conditional_style_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_conditional_style_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid)
  return _internal_mutable_conditional_style_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_conditional_style_owner_uid(::TSP::UUID* conditional_style_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_owner_uid_);
  }
  if (conditional_style_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      conditional_style_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  conditional_style_owner_uid_ = conditional_style_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid)
}

// required .TSP.UUID next_conditional_style_owner_uid = 8;
inline bool OwnerUIDMapperArchive::_internal_has_next_conditional_style_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || next_conditional_style_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_conditional_style_owner_uid() const {
  return _internal_has_next_conditional_style_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_conditional_style_owner_uid() const {
  const ::TSP::UUID* p = next_conditional_style_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_conditional_style_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid)
  return _internal_next_conditional_style_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_conditional_style_owner_uid(
    ::TSP::UUID* next_conditional_style_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_conditional_style_owner_uid_);
  }
  next_conditional_style_owner_uid_ = next_conditional_style_owner_uid;
  if (next_conditional_style_owner_uid) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_conditional_style_owner_uid() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUID* temp = next_conditional_style_owner_uid_;
  next_conditional_style_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_conditional_style_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUID* temp = next_conditional_style_owner_uid_;
  next_conditional_style_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_conditional_style_owner_uid() {
  _has_bits_[0] |= 0x00000080u;
  if (next_conditional_style_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_conditional_style_owner_uid_ = p;
  }
  return next_conditional_style_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_conditional_style_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid)
  return _internal_mutable_next_conditional_style_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_conditional_style_owner_uid(::TSP::UUID* next_conditional_style_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_conditional_style_owner_uid_);
  }
  if (next_conditional_style_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_conditional_style_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_conditional_style_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_conditional_style_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  next_conditional_style_owner_uid_ = next_conditional_style_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid)
}

// required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
inline bool OwnerUIDMapperArchive::_internal_has_sort_rule_reference_tracker_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sort_rule_reference_tracker_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_sort_rule_reference_tracker_owner_uid() const {
  return _internal_has_sort_rule_reference_tracker_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_sort_rule_reference_tracker_owner_uid() const {
  const ::TSP::UUID* p = sort_rule_reference_tracker_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::sort_rule_reference_tracker_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid)
  return _internal_sort_rule_reference_tracker_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_sort_rule_reference_tracker_owner_uid(
    ::TSP::UUID* sort_rule_reference_tracker_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_rule_reference_tracker_owner_uid_);
  }
  sort_rule_reference_tracker_owner_uid_ = sort_rule_reference_tracker_owner_uid;
  if (sort_rule_reference_tracker_owner_uid) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_sort_rule_reference_tracker_owner_uid() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::UUID* temp = sort_rule_reference_tracker_owner_uid_;
  sort_rule_reference_tracker_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_sort_rule_reference_tracker_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::UUID* temp = sort_rule_reference_tracker_owner_uid_;
  sort_rule_reference_tracker_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_sort_rule_reference_tracker_owner_uid() {
  _has_bits_[0] |= 0x00000100u;
  if (sort_rule_reference_tracker_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sort_rule_reference_tracker_owner_uid_ = p;
  }
  return sort_rule_reference_tracker_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_sort_rule_reference_tracker_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid)
  return _internal_mutable_sort_rule_reference_tracker_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_sort_rule_reference_tracker_owner_uid(::TSP::UUID* sort_rule_reference_tracker_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_rule_reference_tracker_owner_uid_);
  }
  if (sort_rule_reference_tracker_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_rule_reference_tracker_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sort_rule_reference_tracker_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_rule_reference_tracker_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sort_rule_reference_tracker_owner_uid_ = sort_rule_reference_tracker_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid)
}

// required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
inline bool OwnerUIDMapperArchive::_internal_has_next_sort_rule_reference_tracker_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || next_sort_rule_reference_tracker_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_sort_rule_reference_tracker_owner_uid() const {
  return _internal_has_next_sort_rule_reference_tracker_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_sort_rule_reference_tracker_owner_uid() const {
  const ::TSP::UUID* p = next_sort_rule_reference_tracker_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_sort_rule_reference_tracker_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid)
  return _internal_next_sort_rule_reference_tracker_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_sort_rule_reference_tracker_owner_uid(
    ::TSP::UUID* next_sort_rule_reference_tracker_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_sort_rule_reference_tracker_owner_uid_);
  }
  next_sort_rule_reference_tracker_owner_uid_ = next_sort_rule_reference_tracker_owner_uid;
  if (next_sort_rule_reference_tracker_owner_uid) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_sort_rule_reference_tracker_owner_uid() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::UUID* temp = next_sort_rule_reference_tracker_owner_uid_;
  next_sort_rule_reference_tracker_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_sort_rule_reference_tracker_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::UUID* temp = next_sort_rule_reference_tracker_owner_uid_;
  next_sort_rule_reference_tracker_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_sort_rule_reference_tracker_owner_uid() {
  _has_bits_[0] |= 0x00000200u;
  if (next_sort_rule_reference_tracker_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_sort_rule_reference_tracker_owner_uid_ = p;
  }
  return next_sort_rule_reference_tracker_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_sort_rule_reference_tracker_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid)
  return _internal_mutable_next_sort_rule_reference_tracker_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_sort_rule_reference_tracker_owner_uid(::TSP::UUID* next_sort_rule_reference_tracker_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_sort_rule_reference_tracker_owner_uid_);
  }
  if (next_sort_rule_reference_tracker_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_sort_rule_reference_tracker_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_sort_rule_reference_tracker_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_sort_rule_reference_tracker_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  next_sort_rule_reference_tracker_owner_uid_ = next_sort_rule_reference_tracker_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid)
}

// required .TSP.UUID merge_owner_uid = 11;
inline bool OwnerUIDMapperArchive::_internal_has_merge_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || merge_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_merge_owner_uid() const {
  return _internal_has_merge_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_merge_owner_uid() const {
  const ::TSP::UUID* p = merge_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::merge_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.merge_owner_uid)
  return _internal_merge_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_merge_owner_uid(
    ::TSP::UUID* merge_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_owner_uid_);
  }
  merge_owner_uid_ = merge_owner_uid;
  if (merge_owner_uid) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.merge_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_merge_owner_uid() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::UUID* temp = merge_owner_uid_;
  merge_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_merge_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.merge_owner_uid)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::UUID* temp = merge_owner_uid_;
  merge_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_merge_owner_uid() {
  _has_bits_[0] |= 0x00000400u;
  if (merge_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    merge_owner_uid_ = p;
  }
  return merge_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_merge_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.merge_owner_uid)
  return _internal_mutable_merge_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_merge_owner_uid(::TSP::UUID* merge_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_owner_uid_);
  }
  if (merge_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      merge_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  merge_owner_uid_ = merge_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.merge_owner_uid)
}

// required .TSP.UUID next_merge_owner_uid = 12;
inline bool OwnerUIDMapperArchive::_internal_has_next_merge_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || next_merge_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_merge_owner_uid() const {
  return _internal_has_next_merge_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_merge_owner_uid() const {
  const ::TSP::UUID* p = next_merge_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_merge_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_merge_owner_uid)
  return _internal_next_merge_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_merge_owner_uid(
    ::TSP::UUID* next_merge_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_merge_owner_uid_);
  }
  next_merge_owner_uid_ = next_merge_owner_uid;
  if (next_merge_owner_uid) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_merge_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_merge_owner_uid() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::UUID* temp = next_merge_owner_uid_;
  next_merge_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_merge_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_merge_owner_uid)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::UUID* temp = next_merge_owner_uid_;
  next_merge_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_merge_owner_uid() {
  _has_bits_[0] |= 0x00000800u;
  if (next_merge_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_merge_owner_uid_ = p;
  }
  return next_merge_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_merge_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_merge_owner_uid)
  return _internal_mutable_next_merge_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_merge_owner_uid(::TSP::UUID* next_merge_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_merge_owner_uid_);
  }
  if (next_merge_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_merge_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_merge_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_merge_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  next_merge_owner_uid_ = next_merge_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_merge_owner_uid)
}

// required .TSP.UUID category_owner_uid = 13;
inline bool OwnerUIDMapperArchive::_internal_has_category_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || category_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_category_owner_uid() const {
  return _internal_has_category_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_category_owner_uid() const {
  const ::TSP::UUID* p = category_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::category_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.category_owner_uid)
  return _internal_category_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_category_owner_uid(
    ::TSP::UUID* category_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_owner_uid_);
  }
  category_owner_uid_ = category_owner_uid;
  if (category_owner_uid) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.category_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_category_owner_uid() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::UUID* temp = category_owner_uid_;
  category_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_category_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.category_owner_uid)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::UUID* temp = category_owner_uid_;
  category_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_category_owner_uid() {
  _has_bits_[0] |= 0x00001000u;
  if (category_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    category_owner_uid_ = p;
  }
  return category_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_category_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.category_owner_uid)
  return _internal_mutable_category_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_category_owner_uid(::TSP::UUID* category_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_owner_uid_);
  }
  if (category_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      category_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  category_owner_uid_ = category_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.category_owner_uid)
}

// required .TSP.UUID next_category_owner_uid = 14;
inline bool OwnerUIDMapperArchive::_internal_has_next_category_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || next_category_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_category_owner_uid() const {
  return _internal_has_next_category_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_category_owner_uid() const {
  const ::TSP::UUID* p = next_category_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_category_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_category_owner_uid)
  return _internal_next_category_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_category_owner_uid(
    ::TSP::UUID* next_category_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_owner_uid_);
  }
  next_category_owner_uid_ = next_category_owner_uid;
  if (next_category_owner_uid) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_category_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_category_owner_uid() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::UUID* temp = next_category_owner_uid_;
  next_category_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_category_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_category_owner_uid)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::UUID* temp = next_category_owner_uid_;
  next_category_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_category_owner_uid() {
  _has_bits_[0] |= 0x00002000u;
  if (next_category_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_category_owner_uid_ = p;
  }
  return next_category_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_category_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_category_owner_uid)
  return _internal_mutable_next_category_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_category_owner_uid(::TSP::UUID* next_category_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_owner_uid_);
  }
  if (next_category_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_category_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_category_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  next_category_owner_uid_ = next_category_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_category_owner_uid)
}

// required .TSP.UUID category_aggregates_owner_uid = 15;
inline bool OwnerUIDMapperArchive::_internal_has_category_aggregates_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || category_aggregates_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_category_aggregates_owner_uid() const {
  return _internal_has_category_aggregates_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_category_aggregates_owner_uid() const {
  const ::TSP::UUID* p = category_aggregates_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::category_aggregates_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid)
  return _internal_category_aggregates_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_category_aggregates_owner_uid(
    ::TSP::UUID* category_aggregates_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_aggregates_owner_uid_);
  }
  category_aggregates_owner_uid_ = category_aggregates_owner_uid;
  if (category_aggregates_owner_uid) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_category_aggregates_owner_uid() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::UUID* temp = category_aggregates_owner_uid_;
  category_aggregates_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_category_aggregates_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::UUID* temp = category_aggregates_owner_uid_;
  category_aggregates_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_category_aggregates_owner_uid() {
  _has_bits_[0] |= 0x00004000u;
  if (category_aggregates_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    category_aggregates_owner_uid_ = p;
  }
  return category_aggregates_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_category_aggregates_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid)
  return _internal_mutable_category_aggregates_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_category_aggregates_owner_uid(::TSP::UUID* category_aggregates_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_aggregates_owner_uid_);
  }
  if (category_aggregates_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_aggregates_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      category_aggregates_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_aggregates_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  category_aggregates_owner_uid_ = category_aggregates_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid)
}

// required .TSP.UUID next_category_aggregates_owner_uid = 16;
inline bool OwnerUIDMapperArchive::_internal_has_next_category_aggregates_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || next_category_aggregates_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_category_aggregates_owner_uid() const {
  return _internal_has_next_category_aggregates_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_category_aggregates_owner_uid() const {
  const ::TSP::UUID* p = next_category_aggregates_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_category_aggregates_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid)
  return _internal_next_category_aggregates_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_category_aggregates_owner_uid(
    ::TSP::UUID* next_category_aggregates_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_aggregates_owner_uid_);
  }
  next_category_aggregates_owner_uid_ = next_category_aggregates_owner_uid;
  if (next_category_aggregates_owner_uid) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_category_aggregates_owner_uid() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::UUID* temp = next_category_aggregates_owner_uid_;
  next_category_aggregates_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_category_aggregates_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::UUID* temp = next_category_aggregates_owner_uid_;
  next_category_aggregates_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_category_aggregates_owner_uid() {
  _has_bits_[0] |= 0x00008000u;
  if (next_category_aggregates_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_category_aggregates_owner_uid_ = p;
  }
  return next_category_aggregates_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_category_aggregates_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid)
  return _internal_mutable_next_category_aggregates_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_category_aggregates_owner_uid(::TSP::UUID* next_category_aggregates_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_aggregates_owner_uid_);
  }
  if (next_category_aggregates_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_category_aggregates_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_category_aggregates_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_category_aggregates_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  next_category_aggregates_owner_uid_ = next_category_aggregates_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid)
}

// required .TSP.UUID group_by_uid = 17;
inline bool OwnerUIDMapperArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.group_by_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.group_by_uid)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00010000u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.group_by_uid)
}

// required .TSP.UUID next_group_by_uid = 18;
inline bool OwnerUIDMapperArchive::_internal_has_next_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || next_group_by_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_group_by_uid() const {
  return _internal_has_next_group_by_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_group_by_uid() const {
  const ::TSP::UUID* p = next_group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_group_by_uid)
  return _internal_next_group_by_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_group_by_uid(
    ::TSP::UUID* next_group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_group_by_uid_);
  }
  next_group_by_uid_ = next_group_by_uid;
  if (next_group_by_uid) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_group_by_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_group_by_uid() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::UUID* temp = next_group_by_uid_;
  next_group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_group_by_uid)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::UUID* temp = next_group_by_uid_;
  next_group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_group_by_uid() {
  _has_bits_[0] |= 0x00020000u;
  if (next_group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_group_by_uid_ = p;
  }
  return next_group_by_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_group_by_uid)
  return _internal_mutable_next_group_by_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_group_by_uid(::TSP::UUID* next_group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_group_by_uid_);
  }
  if (next_group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  next_group_by_uid_ = next_group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_group_by_uid)
}

// required .TSP.UUID pencil_annotation_owner_uid = 19;
inline bool OwnerUIDMapperArchive::_internal_has_pencil_annotation_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_pencil_annotation_owner_uid() const {
  return _internal_has_pencil_annotation_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_pencil_annotation_owner_uid() const {
  const ::TSP::UUID* p = pencil_annotation_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::pencil_annotation_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid)
  return _internal_pencil_annotation_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_pencil_annotation_owner_uid(
    ::TSP::UUID* pencil_annotation_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_owner_uid_);
  }
  pencil_annotation_owner_uid_ = pencil_annotation_owner_uid;
  if (pencil_annotation_owner_uid) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_pencil_annotation_owner_uid() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::UUID* temp = pencil_annotation_owner_uid_;
  pencil_annotation_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_pencil_annotation_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::UUID* temp = pencil_annotation_owner_uid_;
  pencil_annotation_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_pencil_annotation_owner_uid() {
  _has_bits_[0] |= 0x00040000u;
  if (pencil_annotation_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    pencil_annotation_owner_uid_ = p;
  }
  return pencil_annotation_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_pencil_annotation_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid)
  return _internal_mutable_pencil_annotation_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_pencil_annotation_owner_uid(::TSP::UUID* pencil_annotation_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_owner_uid_);
  }
  if (pencil_annotation_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  pencil_annotation_owner_uid_ = pencil_annotation_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid)
}

// required .TSP.UUID next_pencil_annotation_owner_uid = 20;
inline bool OwnerUIDMapperArchive::_internal_has_next_pencil_annotation_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || next_pencil_annotation_owner_uid_ != nullptr);
  return value;
}
inline bool OwnerUIDMapperArchive::has_next_pencil_annotation_owner_uid() const {
  return _internal_has_next_pencil_annotation_owner_uid();
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::_internal_next_pencil_annotation_owner_uid() const {
  const ::TSP::UUID* p = next_pencil_annotation_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OwnerUIDMapperArchive::next_pencil_annotation_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid)
  return _internal_next_pencil_annotation_owner_uid();
}
inline void OwnerUIDMapperArchive::unsafe_arena_set_allocated_next_pencil_annotation_owner_uid(
    ::TSP::UUID* next_pencil_annotation_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_pencil_annotation_owner_uid_);
  }
  next_pencil_annotation_owner_uid_ = next_pencil_annotation_owner_uid;
  if (next_pencil_annotation_owner_uid) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid)
}
inline ::TSP::UUID* OwnerUIDMapperArchive::release_next_pencil_annotation_owner_uid() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::UUID* temp = next_pencil_annotation_owner_uid_;
  next_pencil_annotation_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::unsafe_arena_release_next_pencil_annotation_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::UUID* temp = next_pencil_annotation_owner_uid_;
  next_pencil_annotation_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::_internal_mutable_next_pencil_annotation_owner_uid() {
  _has_bits_[0] |= 0x00080000u;
  if (next_pencil_annotation_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    next_pencil_annotation_owner_uid_ = p;
  }
  return next_pencil_annotation_owner_uid_;
}
inline ::TSP::UUID* OwnerUIDMapperArchive::mutable_next_pencil_annotation_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid)
  return _internal_mutable_next_pencil_annotation_owner_uid();
}
inline void OwnerUIDMapperArchive::set_allocated_next_pencil_annotation_owner_uid(::TSP::UUID* next_pencil_annotation_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_pencil_annotation_owner_uid_);
  }
  if (next_pencil_annotation_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_pencil_annotation_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      next_pencil_annotation_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_pencil_annotation_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  next_pencil_annotation_owner_uid_ = next_pencil_annotation_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid)
}

// -------------------------------------------------------------------

// RewriteTableUIDInfoArchive_TableUIDMapEntryArchive

// required .TSP.UUID prev_table_uid = 1;
inline bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_has_prev_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || prev_table_uid_ != nullptr);
  return value;
}
inline bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::has_prev_table_uid() const {
  return _internal_has_prev_table_uid();
}
inline const ::TSP::UUID& RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_prev_table_uid() const {
  const ::TSP::UUID* p = prev_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::prev_table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid)
  return _internal_prev_table_uid();
}
inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::unsafe_arena_set_allocated_prev_table_uid(
    ::TSP::UUID* prev_table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_table_uid_);
  }
  prev_table_uid_ = prev_table_uid;
  if (prev_table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid)
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::release_prev_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = prev_table_uid_;
  prev_table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::unsafe_arena_release_prev_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = prev_table_uid_;
  prev_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_mutable_prev_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (prev_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    prev_table_uid_ = p;
  }
  return prev_table_uid_;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::mutable_prev_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid)
  return _internal_mutable_prev_table_uid();
}
inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::set_allocated_prev_table_uid(::TSP::UUID* prev_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_table_uid_);
  }
  if (prev_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      prev_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prev_table_uid_ = prev_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid)
}

// required .TSP.UUID new_table_uid = 2;
inline bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_has_new_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_table_uid_ != nullptr);
  return value;
}
inline bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::has_new_table_uid() const {
  return _internal_has_new_table_uid();
}
inline const ::TSP::UUID& RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_new_table_uid() const {
  const ::TSP::UUID* p = new_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::new_table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid)
  return _internal_new_table_uid();
}
inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::unsafe_arena_set_allocated_new_table_uid(
    ::TSP::UUID* new_table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_uid_);
  }
  new_table_uid_ = new_table_uid;
  if (new_table_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid)
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::release_new_table_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = new_table_uid_;
  new_table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::unsafe_arena_release_new_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = new_table_uid_;
  new_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_internal_mutable_new_table_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (new_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    new_table_uid_ = p;
  }
  return new_table_uid_;
}
inline ::TSP::UUID* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::mutable_new_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid)
  return _internal_mutable_new_table_uid();
}
inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::set_allocated_new_table_uid(::TSP::UUID* new_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_uid_);
  }
  if (new_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      new_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_table_uid_ = new_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid)
}

// -------------------------------------------------------------------

// RewriteTableUIDInfoArchive

// repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
inline int RewriteTableUIDInfoArchive::_internal_table_uid_map_size() const {
  return table_uid_map_.size();
}
inline int RewriteTableUIDInfoArchive::table_uid_map_size() const {
  return _internal_table_uid_map_size();
}
inline void RewriteTableUIDInfoArchive::clear_table_uid_map() {
  table_uid_map_.Clear();
}
inline ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* RewriteTableUIDInfoArchive::mutable_table_uid_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteTableUIDInfoArchive.table_uid_map)
  return table_uid_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >*
RewriteTableUIDInfoArchive::mutable_table_uid_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RewriteTableUIDInfoArchive.table_uid_map)
  return &table_uid_map_;
}
inline const ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& RewriteTableUIDInfoArchive::_internal_table_uid_map(int index) const {
  return table_uid_map_.Get(index);
}
inline const ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& RewriteTableUIDInfoArchive::table_uid_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteTableUIDInfoArchive.table_uid_map)
  return _internal_table_uid_map(index);
}
inline ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* RewriteTableUIDInfoArchive::_internal_add_table_uid_map() {
  return table_uid_map_.Add();
}
inline ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* RewriteTableUIDInfoArchive::add_table_uid_map() {
  // @@protoc_insertion_point(field_add:TSCE.RewriteTableUIDInfoArchive.table_uid_map)
  return _internal_add_table_uid_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >&
RewriteTableUIDInfoArchive::table_uid_map() const {
  // @@protoc_insertion_point(field_list:TSCE.RewriteTableUIDInfoArchive.table_uid_map)
  return table_uid_map_;
}

// -------------------------------------------------------------------

// GroupByChangeArchive_GroupingColumnChangeArchive

// required uint32 old_level = 1;
inline bool GroupByChangeArchive_GroupingColumnChangeArchive::_internal_has_old_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupByChangeArchive_GroupingColumnChangeArchive::has_old_level() const {
  return _internal_has_old_level();
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::clear_old_level() {
  old_level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive_GroupingColumnChangeArchive::_internal_old_level() const {
  return old_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive_GroupingColumnChangeArchive::old_level() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive.old_level)
  return _internal_old_level();
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::_internal_set_old_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  old_level_ = value;
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::set_old_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_level(value);
  // @@protoc_insertion_point(field_set:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive.old_level)
}

// required uint32 new_level = 2;
inline bool GroupByChangeArchive_GroupingColumnChangeArchive::_internal_has_new_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupByChangeArchive_GroupingColumnChangeArchive::has_new_level() const {
  return _internal_has_new_level();
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::clear_new_level() {
  new_level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive_GroupingColumnChangeArchive::_internal_new_level() const {
  return new_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive_GroupingColumnChangeArchive::new_level() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive.new_level)
  return _internal_new_level();
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::_internal_set_new_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  new_level_ = value;
}
inline void GroupByChangeArchive_GroupingColumnChangeArchive::set_new_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_level(value);
  // @@protoc_insertion_point(field_set:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive.new_level)
}

// -------------------------------------------------------------------

// GroupByChangeArchive

// required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
inline bool GroupByChangeArchive::_internal_has_change_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupByChangeArchive::has_change_type() const {
  return _internal_has_change_type();
}
inline void GroupByChangeArchive::clear_change_type() {
  change_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCE::GroupByChangeArchive_ChangeType GroupByChangeArchive::_internal_change_type() const {
  return static_cast< ::TSCE::GroupByChangeArchive_ChangeType >(change_type_);
}
inline ::TSCE::GroupByChangeArchive_ChangeType GroupByChangeArchive::change_type() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.change_type)
  return _internal_change_type();
}
inline void GroupByChangeArchive::_internal_set_change_type(::TSCE::GroupByChangeArchive_ChangeType value) {
  assert(::TSCE::GroupByChangeArchive_ChangeType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  change_type_ = value;
}
inline void GroupByChangeArchive::set_change_type(::TSCE::GroupByChangeArchive_ChangeType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:TSCE.GroupByChangeArchive.change_type)
}

// required .TSP.UUID group_by_uid = 2;
inline bool GroupByChangeArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool GroupByChangeArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& GroupByChangeArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& GroupByChangeArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void GroupByChangeArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByChangeArchive.group_by_uid)
}
inline ::TSP::UUID* GroupByChangeArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* GroupByChangeArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByChangeArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* GroupByChangeArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* GroupByChangeArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByChangeArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void GroupByChangeArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByChangeArchive.group_by_uid)
}

// optional uint32 previous_level = 3;
inline bool GroupByChangeArchive::_internal_has_previous_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupByChangeArchive::has_previous_level() const {
  return _internal_has_previous_level();
}
inline void GroupByChangeArchive::clear_previous_level() {
  previous_level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive::_internal_previous_level() const {
  return previous_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive::previous_level() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.previous_level)
  return _internal_previous_level();
}
inline void GroupByChangeArchive::_internal_set_previous_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  previous_level_ = value;
}
inline void GroupByChangeArchive::set_previous_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_previous_level(value);
  // @@protoc_insertion_point(field_set:TSCE.GroupByChangeArchive.previous_level)
}

// optional uint32 updated_level = 4;
inline bool GroupByChangeArchive::_internal_has_updated_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GroupByChangeArchive::has_updated_level() const {
  return _internal_has_updated_level();
}
inline void GroupByChangeArchive::clear_updated_level() {
  updated_level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive::_internal_updated_level() const {
  return updated_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupByChangeArchive::updated_level() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.updated_level)
  return _internal_updated_level();
}
inline void GroupByChangeArchive::_internal_set_updated_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  updated_level_ = value;
}
inline void GroupByChangeArchive::set_updated_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updated_level(value);
  // @@protoc_insertion_point(field_set:TSCE.GroupByChangeArchive.updated_level)
}

// optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
inline bool GroupByChangeArchive::_internal_has_previous_to_updated_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || previous_to_updated_map_ != nullptr);
  return value;
}
inline bool GroupByChangeArchive::has_previous_to_updated_map() const {
  return _internal_has_previous_to_updated_map();
}
inline const ::TSP::UUIDMapArchive& GroupByChangeArchive::_internal_previous_to_updated_map() const {
  const ::TSP::UUIDMapArchive* p = previous_to_updated_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDMapArchive&>(
      ::TSP::_UUIDMapArchive_default_instance_);
}
inline const ::TSP::UUIDMapArchive& GroupByChangeArchive::previous_to_updated_map() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.previous_to_updated_map)
  return _internal_previous_to_updated_map();
}
inline void GroupByChangeArchive::unsafe_arena_set_allocated_previous_to_updated_map(
    ::TSP::UUIDMapArchive* previous_to_updated_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_to_updated_map_);
  }
  previous_to_updated_map_ = previous_to_updated_map;
  if (previous_to_updated_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByChangeArchive.previous_to_updated_map)
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::release_previous_to_updated_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDMapArchive* temp = previous_to_updated_map_;
  previous_to_updated_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::unsafe_arena_release_previous_to_updated_map() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByChangeArchive.previous_to_updated_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDMapArchive* temp = previous_to_updated_map_;
  previous_to_updated_map_ = nullptr;
  return temp;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::_internal_mutable_previous_to_updated_map() {
  _has_bits_[0] |= 0x00000002u;
  if (previous_to_updated_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDMapArchive>(GetArena());
    previous_to_updated_map_ = p;
  }
  return previous_to_updated_map_;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::mutable_previous_to_updated_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByChangeArchive.previous_to_updated_map)
  return _internal_mutable_previous_to_updated_map();
}
inline void GroupByChangeArchive::set_allocated_previous_to_updated_map(::TSP::UUIDMapArchive* previous_to_updated_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_to_updated_map_);
  }
  if (previous_to_updated_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_to_updated_map)->GetArena();
    if (message_arena != submessage_arena) {
      previous_to_updated_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_to_updated_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_to_updated_map_ = previous_to_updated_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByChangeArchive.previous_to_updated_map)
}

// optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
inline bool GroupByChangeArchive::_internal_has_updated_to_previous_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || updated_to_previous_map_ != nullptr);
  return value;
}
inline bool GroupByChangeArchive::has_updated_to_previous_map() const {
  return _internal_has_updated_to_previous_map();
}
inline const ::TSP::UUIDMapArchive& GroupByChangeArchive::_internal_updated_to_previous_map() const {
  const ::TSP::UUIDMapArchive* p = updated_to_previous_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDMapArchive&>(
      ::TSP::_UUIDMapArchive_default_instance_);
}
inline const ::TSP::UUIDMapArchive& GroupByChangeArchive::updated_to_previous_map() const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.updated_to_previous_map)
  return _internal_updated_to_previous_map();
}
inline void GroupByChangeArchive::unsafe_arena_set_allocated_updated_to_previous_map(
    ::TSP::UUIDMapArchive* updated_to_previous_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_to_previous_map_);
  }
  updated_to_previous_map_ = updated_to_previous_map;
  if (updated_to_previous_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.GroupByChangeArchive.updated_to_previous_map)
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::release_updated_to_previous_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDMapArchive* temp = updated_to_previous_map_;
  updated_to_previous_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::unsafe_arena_release_updated_to_previous_map() {
  // @@protoc_insertion_point(field_release:TSCE.GroupByChangeArchive.updated_to_previous_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDMapArchive* temp = updated_to_previous_map_;
  updated_to_previous_map_ = nullptr;
  return temp;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::_internal_mutable_updated_to_previous_map() {
  _has_bits_[0] |= 0x00000004u;
  if (updated_to_previous_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDMapArchive>(GetArena());
    updated_to_previous_map_ = p;
  }
  return updated_to_previous_map_;
}
inline ::TSP::UUIDMapArchive* GroupByChangeArchive::mutable_updated_to_previous_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByChangeArchive.updated_to_previous_map)
  return _internal_mutable_updated_to_previous_map();
}
inline void GroupByChangeArchive::set_allocated_updated_to_previous_map(::TSP::UUIDMapArchive* updated_to_previous_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_to_previous_map_);
  }
  if (updated_to_previous_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_to_previous_map)->GetArena();
    if (message_arena != submessage_arena) {
      updated_to_previous_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_to_previous_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  updated_to_previous_map_ = updated_to_previous_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.GroupByChangeArchive.updated_to_previous_map)
}

// repeated .TSP.UUID removed_group_uids = 7;
inline int GroupByChangeArchive::_internal_removed_group_uids_size() const {
  return removed_group_uids_.size();
}
inline int GroupByChangeArchive::removed_group_uids_size() const {
  return _internal_removed_group_uids_size();
}
inline ::TSP::UUID* GroupByChangeArchive::mutable_removed_group_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByChangeArchive.removed_group_uids)
  return removed_group_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
GroupByChangeArchive::mutable_removed_group_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.GroupByChangeArchive.removed_group_uids)
  return &removed_group_uids_;
}
inline const ::TSP::UUID& GroupByChangeArchive::_internal_removed_group_uids(int index) const {
  return removed_group_uids_.Get(index);
}
inline const ::TSP::UUID& GroupByChangeArchive::removed_group_uids(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.removed_group_uids)
  return _internal_removed_group_uids(index);
}
inline ::TSP::UUID* GroupByChangeArchive::_internal_add_removed_group_uids() {
  return removed_group_uids_.Add();
}
inline ::TSP::UUID* GroupByChangeArchive::add_removed_group_uids() {
  // @@protoc_insertion_point(field_add:TSCE.GroupByChangeArchive.removed_group_uids)
  return _internal_add_removed_group_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
GroupByChangeArchive::removed_group_uids() const {
  // @@protoc_insertion_point(field_list:TSCE.GroupByChangeArchive.removed_group_uids)
  return removed_group_uids_;
}

// repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
inline int GroupByChangeArchive::_internal_grouping_column_changes_size() const {
  return grouping_column_changes_.size();
}
inline int GroupByChangeArchive::grouping_column_changes_size() const {
  return _internal_grouping_column_changes_size();
}
inline void GroupByChangeArchive::clear_grouping_column_changes() {
  grouping_column_changes_.Clear();
}
inline ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* GroupByChangeArchive::mutable_grouping_column_changes(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.GroupByChangeArchive.grouping_column_changes)
  return grouping_column_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >*
GroupByChangeArchive::mutable_grouping_column_changes() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.GroupByChangeArchive.grouping_column_changes)
  return &grouping_column_changes_;
}
inline const ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive& GroupByChangeArchive::_internal_grouping_column_changes(int index) const {
  return grouping_column_changes_.Get(index);
}
inline const ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive& GroupByChangeArchive::grouping_column_changes(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.GroupByChangeArchive.grouping_column_changes)
  return _internal_grouping_column_changes(index);
}
inline ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* GroupByChangeArchive::_internal_add_grouping_column_changes() {
  return grouping_column_changes_.Add();
}
inline ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* GroupByChangeArchive::add_grouping_column_changes() {
  // @@protoc_insertion_point(field_add:TSCE.GroupByChangeArchive.grouping_column_changes)
  return _internal_add_grouping_column_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >&
GroupByChangeArchive::grouping_column_changes() const {
  // @@protoc_insertion_point(field_list:TSCE.GroupByChangeArchive.grouping_column_changes)
  return grouping_column_changes_;
}

// -------------------------------------------------------------------

// RewriteGroupNodeUIDInfoArchive

// optional .TSP.UUID group_by_uid = 1;
inline bool RewriteGroupNodeUIDInfoArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool RewriteGroupNodeUIDInfoArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& RewriteGroupNodeUIDInfoArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RewriteGroupNodeUIDInfoArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void RewriteGroupNodeUIDInfoArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid)
}
inline ::TSP::UUID* RewriteGroupNodeUIDInfoArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RewriteGroupNodeUIDInfoArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RewriteGroupNodeUIDInfoArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* RewriteGroupNodeUIDInfoArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void RewriteGroupNodeUIDInfoArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid)
}

// required .TSP.UUIDMapArchive group_node_uid_map = 2;
inline bool RewriteGroupNodeUIDInfoArchive::_internal_has_group_node_uid_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || group_node_uid_map_ != nullptr);
  return value;
}
inline bool RewriteGroupNodeUIDInfoArchive::has_group_node_uid_map() const {
  return _internal_has_group_node_uid_map();
}
inline const ::TSP::UUIDMapArchive& RewriteGroupNodeUIDInfoArchive::_internal_group_node_uid_map() const {
  const ::TSP::UUIDMapArchive* p = group_node_uid_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDMapArchive&>(
      ::TSP::_UUIDMapArchive_default_instance_);
}
inline const ::TSP::UUIDMapArchive& RewriteGroupNodeUIDInfoArchive::group_node_uid_map() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map)
  return _internal_group_node_uid_map();
}
inline void RewriteGroupNodeUIDInfoArchive::unsafe_arena_set_allocated_group_node_uid_map(
    ::TSP::UUIDMapArchive* group_node_uid_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid_map_);
  }
  group_node_uid_map_ = group_node_uid_map;
  if (group_node_uid_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map)
}
inline ::TSP::UUIDMapArchive* RewriteGroupNodeUIDInfoArchive::release_group_node_uid_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDMapArchive* temp = group_node_uid_map_;
  group_node_uid_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDMapArchive* RewriteGroupNodeUIDInfoArchive::unsafe_arena_release_group_node_uid_map() {
  // @@protoc_insertion_point(field_release:TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDMapArchive* temp = group_node_uid_map_;
  group_node_uid_map_ = nullptr;
  return temp;
}
inline ::TSP::UUIDMapArchive* RewriteGroupNodeUIDInfoArchive::_internal_mutable_group_node_uid_map() {
  _has_bits_[0] |= 0x00000002u;
  if (group_node_uid_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDMapArchive>(GetArena());
    group_node_uid_map_ = p;
  }
  return group_node_uid_map_;
}
inline ::TSP::UUIDMapArchive* RewriteGroupNodeUIDInfoArchive::mutable_group_node_uid_map() {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map)
  return _internal_mutable_group_node_uid_map();
}
inline void RewriteGroupNodeUIDInfoArchive::set_allocated_group_node_uid_map(::TSP::UUIDMapArchive* group_node_uid_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid_map_);
  }
  if (group_node_uid_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_uid_map)->GetArena();
    if (message_arena != submessage_arena) {
      group_node_uid_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_uid_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_node_uid_map_ = group_node_uid_map;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map)
}

// -------------------------------------------------------------------

// IndexedUidsArchive_IndexedUid

// required .TSP.UUID uid_for_index = 1;
inline bool IndexedUidsArchive_IndexedUid::_internal_has_uid_for_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uid_for_index_ != nullptr);
  return value;
}
inline bool IndexedUidsArchive_IndexedUid::has_uid_for_index() const {
  return _internal_has_uid_for_index();
}
inline const ::TSP::UUID& IndexedUidsArchive_IndexedUid::_internal_uid_for_index() const {
  const ::TSP::UUID* p = uid_for_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& IndexedUidsArchive_IndexedUid::uid_for_index() const {
  // @@protoc_insertion_point(field_get:TSCE.IndexedUidsArchive.IndexedUid.uid_for_index)
  return _internal_uid_for_index();
}
inline void IndexedUidsArchive_IndexedUid::unsafe_arena_set_allocated_uid_for_index(
    ::TSP::UUID* uid_for_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_for_index_);
  }
  uid_for_index_ = uid_for_index;
  if (uid_for_index) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.IndexedUidsArchive.IndexedUid.uid_for_index)
}
inline ::TSP::UUID* IndexedUidsArchive_IndexedUid::release_uid_for_index() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uid_for_index_;
  uid_for_index_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* IndexedUidsArchive_IndexedUid::unsafe_arena_release_uid_for_index() {
  // @@protoc_insertion_point(field_release:TSCE.IndexedUidsArchive.IndexedUid.uid_for_index)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uid_for_index_;
  uid_for_index_ = nullptr;
  return temp;
}
inline ::TSP::UUID* IndexedUidsArchive_IndexedUid::_internal_mutable_uid_for_index() {
  _has_bits_[0] |= 0x00000001u;
  if (uid_for_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    uid_for_index_ = p;
  }
  return uid_for_index_;
}
inline ::TSP::UUID* IndexedUidsArchive_IndexedUid::mutable_uid_for_index() {
  // @@protoc_insertion_point(field_mutable:TSCE.IndexedUidsArchive.IndexedUid.uid_for_index)
  return _internal_mutable_uid_for_index();
}
inline void IndexedUidsArchive_IndexedUid::set_allocated_uid_for_index(::TSP::UUID* uid_for_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_for_index_);
  }
  if (uid_for_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_for_index)->GetArena();
    if (message_arena != submessage_arena) {
      uid_for_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_for_index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_for_index_ = uid_for_index;
  // @@protoc_insertion_point(field_set_allocated:TSCE.IndexedUidsArchive.IndexedUid.uid_for_index)
}

// required uint32 index_for_uid = 2;
inline bool IndexedUidsArchive_IndexedUid::_internal_has_index_for_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IndexedUidsArchive_IndexedUid::has_index_for_uid() const {
  return _internal_has_index_for_uid();
}
inline void IndexedUidsArchive_IndexedUid::clear_index_for_uid() {
  index_for_uid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexedUidsArchive_IndexedUid::_internal_index_for_uid() const {
  return index_for_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexedUidsArchive_IndexedUid::index_for_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.IndexedUidsArchive.IndexedUid.index_for_uid)
  return _internal_index_for_uid();
}
inline void IndexedUidsArchive_IndexedUid::_internal_set_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_for_uid_ = value;
}
inline void IndexedUidsArchive_IndexedUid::set_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index_for_uid(value);
  // @@protoc_insertion_point(field_set:TSCE.IndexedUidsArchive.IndexedUid.index_for_uid)
}

// -------------------------------------------------------------------

// IndexedUidsArchive

// repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
inline int IndexedUidsArchive::_internal_uids_size() const {
  return uids_.size();
}
inline int IndexedUidsArchive::uids_size() const {
  return _internal_uids_size();
}
inline void IndexedUidsArchive::clear_uids() {
  uids_.Clear();
}
inline ::TSCE::IndexedUidsArchive_IndexedUid* IndexedUidsArchive::mutable_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.IndexedUidsArchive.uids)
  return uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexedUidsArchive_IndexedUid >*
IndexedUidsArchive::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.IndexedUidsArchive.uids)
  return &uids_;
}
inline const ::TSCE::IndexedUidsArchive_IndexedUid& IndexedUidsArchive::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline const ::TSCE::IndexedUidsArchive_IndexedUid& IndexedUidsArchive::uids(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.IndexedUidsArchive.uids)
  return _internal_uids(index);
}
inline ::TSCE::IndexedUidsArchive_IndexedUid* IndexedUidsArchive::_internal_add_uids() {
  return uids_.Add();
}
inline ::TSCE::IndexedUidsArchive_IndexedUid* IndexedUidsArchive::add_uids() {
  // @@protoc_insertion_point(field_add:TSCE.IndexedUidsArchive.uids)
  return _internal_add_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::IndexedUidsArchive_IndexedUid >&
IndexedUidsArchive::uids() const {
  // @@protoc_insertion_point(field_list:TSCE.IndexedUidsArchive.uids)
  return uids_;
}

// -------------------------------------------------------------------

// RewriteRangeEntryArchive

// required uint32 range_location = 1;
inline bool RewriteRangeEntryArchive::_internal_has_range_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RewriteRangeEntryArchive::has_range_location() const {
  return _internal_has_range_location();
}
inline void RewriteRangeEntryArchive::clear_range_location() {
  range_location_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::_internal_range_location() const {
  return range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::range_location() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteRangeEntryArchive.range_location)
  return _internal_range_location();
}
inline void RewriteRangeEntryArchive::_internal_set_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  range_location_ = value;
}
inline void RewriteRangeEntryArchive::set_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_range_location(value);
  // @@protoc_insertion_point(field_set:TSCE.RewriteRangeEntryArchive.range_location)
}

// required uint32 range_length = 2;
inline bool RewriteRangeEntryArchive::_internal_has_range_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RewriteRangeEntryArchive::has_range_length() const {
  return _internal_has_range_length();
}
inline void RewriteRangeEntryArchive::clear_range_length() {
  range_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::_internal_range_length() const {
  return range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::range_length() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteRangeEntryArchive.range_length)
  return _internal_range_length();
}
inline void RewriteRangeEntryArchive::_internal_set_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  range_length_ = value;
}
inline void RewriteRangeEntryArchive::set_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_range_length(value);
  // @@protoc_insertion_point(field_set:TSCE.RewriteRangeEntryArchive.range_length)
}

// repeated .TSP.UUID range_uids = 3;
inline int RewriteRangeEntryArchive::_internal_range_uids_size() const {
  return range_uids_.size();
}
inline int RewriteRangeEntryArchive::range_uids_size() const {
  return _internal_range_uids_size();
}
inline ::TSP::UUID* RewriteRangeEntryArchive::mutable_range_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.RewriteRangeEntryArchive.range_uids)
  return range_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
RewriteRangeEntryArchive::mutable_range_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.RewriteRangeEntryArchive.range_uids)
  return &range_uids_;
}
inline const ::TSP::UUID& RewriteRangeEntryArchive::_internal_range_uids(int index) const {
  return range_uids_.Get(index);
}
inline const ::TSP::UUID& RewriteRangeEntryArchive::range_uids(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteRangeEntryArchive.range_uids)
  return _internal_range_uids(index);
}
inline ::TSP::UUID* RewriteRangeEntryArchive::_internal_add_range_uids() {
  return range_uids_.Add();
}
inline ::TSP::UUID* RewriteRangeEntryArchive::add_range_uids() {
  // @@protoc_insertion_point(field_add:TSCE.RewriteRangeEntryArchive.range_uids)
  return _internal_add_range_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
RewriteRangeEntryArchive::range_uids() const {
  // @@protoc_insertion_point(field_list:TSCE.RewriteRangeEntryArchive.range_uids)
  return range_uids_;
}

// required uint32 offset = 4;
inline bool RewriteRangeEntryArchive::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RewriteRangeEntryArchive::has_offset() const {
  return _internal_has_offset();
}
inline void RewriteRangeEntryArchive::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewriteRangeEntryArchive::offset() const {
  // @@protoc_insertion_point(field_get:TSCE.RewriteRangeEntryArchive.offset)
  return _internal_offset();
}
inline void RewriteRangeEntryArchive::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_ = value;
}
inline void RewriteRangeEntryArchive::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:TSCE.RewriteRangeEntryArchive.offset)
}

// -------------------------------------------------------------------

// ColumnOrRowUuidsInfoArchive

// required bool is_rows = 1;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_is_rows() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_is_rows() const {
  return _internal_has_is_rows();
}
inline void ColumnOrRowUuidsInfoArchive::clear_is_rows() {
  is_rows_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ColumnOrRowUuidsInfoArchive::_internal_is_rows() const {
  return is_rows_;
}
inline bool ColumnOrRowUuidsInfoArchive::is_rows() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.is_rows)
  return _internal_is_rows();
}
inline void ColumnOrRowUuidsInfoArchive::_internal_set_is_rows(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_rows_ = value;
}
inline void ColumnOrRowUuidsInfoArchive::set_is_rows(bool value) {
  _internal_set_is_rows(value);
  // @@protoc_insertion_point(field_set:TSCE.ColumnOrRowUuidsInfoArchive.is_rows)
}

// required .TSP.UUID table_uid = 2;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.table_uid)
  return _internal_table_uid();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.table_uid)
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.table_uid)
}

// required .TSP.UUID cond_style_owner_uid = 3;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_cond_style_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cond_style_owner_uid_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_cond_style_owner_uid() const {
  return _internal_has_cond_style_owner_uid();
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::_internal_cond_style_owner_uid() const {
  const ::TSP::UUID* p = cond_style_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::cond_style_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid)
  return _internal_cond_style_owner_uid();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_cond_style_owner_uid(
    ::TSP::UUID* cond_style_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid_);
  }
  cond_style_owner_uid_ = cond_style_owner_uid;
  if (cond_style_owner_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid)
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::release_cond_style_owner_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = cond_style_owner_uid_;
  cond_style_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_cond_style_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = cond_style_owner_uid_;
  cond_style_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::_internal_mutable_cond_style_owner_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (cond_style_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    cond_style_owner_uid_ = p;
  }
  return cond_style_owner_uid_;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::mutable_cond_style_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid)
  return _internal_mutable_cond_style_owner_uid();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid_);
  }
  if (cond_style_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      cond_style_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond_style_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cond_style_owner_uid_ = cond_style_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid)
}

// required .TSP.UUID group_by_uid = 4;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid)
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid)
}

// required .TSCE.IndexedUidsArchive uids = 5;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_uids() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || uids_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_uids() const {
  return _internal_has_uids();
}
inline void ColumnOrRowUuidsInfoArchive::clear_uids() {
  if (uids_ != nullptr) uids_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::IndexedUidsArchive& ColumnOrRowUuidsInfoArchive::_internal_uids() const {
  const ::TSCE::IndexedUidsArchive* p = uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexedUidsArchive&>(
      ::TSCE::_IndexedUidsArchive_default_instance_);
}
inline const ::TSCE::IndexedUidsArchive& ColumnOrRowUuidsInfoArchive::uids() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.uids)
  return _internal_uids();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_uids(
    ::TSCE::IndexedUidsArchive* uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uids_);
  }
  uids_ = uids;
  if (uids) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.uids)
}
inline ::TSCE::IndexedUidsArchive* ColumnOrRowUuidsInfoArchive::release_uids() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::IndexedUidsArchive* temp = uids_;
  uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexedUidsArchive* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_uids() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.uids)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::IndexedUidsArchive* temp = uids_;
  uids_ = nullptr;
  return temp;
}
inline ::TSCE::IndexedUidsArchive* ColumnOrRowUuidsInfoArchive::_internal_mutable_uids() {
  _has_bits_[0] |= 0x00000008u;
  if (uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexedUidsArchive>(GetArena());
    uids_ = p;
  }
  return uids_;
}
inline ::TSCE::IndexedUidsArchive* ColumnOrRowUuidsInfoArchive::mutable_uids() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.uids)
  return _internal_mutable_uids();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_uids(::TSCE::IndexedUidsArchive* uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uids_;
  }
  if (uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uids);
    if (message_arena != submessage_arena) {
      uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uids_ = uids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.uids)
}

// repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
inline int ColumnOrRowUuidsInfoArchive::_internal_range_entries_size() const {
  return range_entries_.size();
}
inline int ColumnOrRowUuidsInfoArchive::range_entries_size() const {
  return _internal_range_entries_size();
}
inline void ColumnOrRowUuidsInfoArchive::clear_range_entries() {
  range_entries_.Clear();
}
inline ::TSCE::RewriteRangeEntryArchive* ColumnOrRowUuidsInfoArchive::mutable_range_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.range_entries)
  return range_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteRangeEntryArchive >*
ColumnOrRowUuidsInfoArchive::mutable_range_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ColumnOrRowUuidsInfoArchive.range_entries)
  return &range_entries_;
}
inline const ::TSCE::RewriteRangeEntryArchive& ColumnOrRowUuidsInfoArchive::_internal_range_entries(int index) const {
  return range_entries_.Get(index);
}
inline const ::TSCE::RewriteRangeEntryArchive& ColumnOrRowUuidsInfoArchive::range_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.range_entries)
  return _internal_range_entries(index);
}
inline ::TSCE::RewriteRangeEntryArchive* ColumnOrRowUuidsInfoArchive::_internal_add_range_entries() {
  return range_entries_.Add();
}
inline ::TSCE::RewriteRangeEntryArchive* ColumnOrRowUuidsInfoArchive::add_range_entries() {
  // @@protoc_insertion_point(field_add:TSCE.ColumnOrRowUuidsInfoArchive.range_entries)
  return _internal_add_range_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::RewriteRangeEntryArchive >&
ColumnOrRowUuidsInfoArchive::range_entries() const {
  // @@protoc_insertion_point(field_list:TSCE.ColumnOrRowUuidsInfoArchive.range_entries)
  return range_entries_;
}

// required .TSCE.RangeCoordinateArchive table_range = 7;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_table_range() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || table_range_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_table_range() const {
  return _internal_has_table_range();
}
inline void ColumnOrRowUuidsInfoArchive::clear_table_range() {
  if (table_range_ != nullptr) table_range_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::RangeCoordinateArchive& ColumnOrRowUuidsInfoArchive::_internal_table_range() const {
  const ::TSCE::RangeCoordinateArchive* p = table_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& ColumnOrRowUuidsInfoArchive::table_range() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.table_range)
  return _internal_table_range();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_table_range(
    ::TSCE::RangeCoordinateArchive* table_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_range_);
  }
  table_range_ = table_range;
  if (table_range) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.table_range)
}
inline ::TSCE::RangeCoordinateArchive* ColumnOrRowUuidsInfoArchive::release_table_range() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeCoordinateArchive* temp = table_range_;
  table_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_table_range() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.table_range)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeCoordinateArchive* temp = table_range_;
  table_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* ColumnOrRowUuidsInfoArchive::_internal_mutable_table_range() {
  _has_bits_[0] |= 0x00000010u;
  if (table_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArena());
    table_range_ = p;
  }
  return table_range_;
}
inline ::TSCE::RangeCoordinateArchive* ColumnOrRowUuidsInfoArchive::mutable_table_range() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.table_range)
  return _internal_mutable_table_range();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_table_range(::TSCE::RangeCoordinateArchive* table_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_range_;
  }
  if (table_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_range);
    if (message_arena != submessage_arena) {
      table_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  table_range_ = table_range;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.table_range)
}

// optional .TSP.UUID insert_at_uid = 8;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_insert_at_uid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || insert_at_uid_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_insert_at_uid() const {
  return _internal_has_insert_at_uid();
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::_internal_insert_at_uid() const {
  const ::TSP::UUID* p = insert_at_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::insert_at_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid)
  return _internal_insert_at_uid();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_insert_at_uid(
    ::TSP::UUID* insert_at_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_at_uid_);
  }
  insert_at_uid_ = insert_at_uid;
  if (insert_at_uid) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid)
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::release_insert_at_uid() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = insert_at_uid_;
  insert_at_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_insert_at_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = insert_at_uid_;
  insert_at_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::_internal_mutable_insert_at_uid() {
  _has_bits_[0] |= 0x00000020u;
  if (insert_at_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    insert_at_uid_ = p;
  }
  return insert_at_uid_;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::mutable_insert_at_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid)
  return _internal_mutable_insert_at_uid();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_insert_at_uid(::TSP::UUID* insert_at_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_at_uid_);
  }
  if (insert_at_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_at_uid)->GetArena();
    if (message_arena != submessage_arena) {
      insert_at_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_at_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  insert_at_uid_ = insert_at_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid)
}

// optional .TSP.UUID insert_opposite_uid = 9;
inline bool ColumnOrRowUuidsInfoArchive::_internal_has_insert_opposite_uid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || insert_opposite_uid_ != nullptr);
  return value;
}
inline bool ColumnOrRowUuidsInfoArchive::has_insert_opposite_uid() const {
  return _internal_has_insert_opposite_uid();
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::_internal_insert_opposite_uid() const {
  const ::TSP::UUID* p = insert_opposite_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnOrRowUuidsInfoArchive::insert_opposite_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid)
  return _internal_insert_opposite_uid();
}
inline void ColumnOrRowUuidsInfoArchive::unsafe_arena_set_allocated_insert_opposite_uid(
    ::TSP::UUID* insert_opposite_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_opposite_uid_);
  }
  insert_opposite_uid_ = insert_opposite_uid;
  if (insert_opposite_uid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid)
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::release_insert_opposite_uid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = insert_opposite_uid_;
  insert_opposite_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::unsafe_arena_release_insert_opposite_uid() {
  // @@protoc_insertion_point(field_release:TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = insert_opposite_uid_;
  insert_opposite_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::_internal_mutable_insert_opposite_uid() {
  _has_bits_[0] |= 0x00000040u;
  if (insert_opposite_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    insert_opposite_uid_ = p;
  }
  return insert_opposite_uid_;
}
inline ::TSP::UUID* ColumnOrRowUuidsInfoArchive::mutable_insert_opposite_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid)
  return _internal_mutable_insert_opposite_uid();
}
inline void ColumnOrRowUuidsInfoArchive::set_allocated_insert_opposite_uid(::TSP::UUID* insert_opposite_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_opposite_uid_);
  }
  if (insert_opposite_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_opposite_uid)->GetArena();
    if (message_arena != submessage_arena) {
      insert_opposite_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_opposite_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  insert_opposite_uid_ = insert_opposite_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid)
}

// -------------------------------------------------------------------

// RegionInfoArchive

// required .TSP.UUID table_uid = 1;
inline bool RegionInfoArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool RegionInfoArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& RegionInfoArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RegionInfoArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionInfoArchive.table_uid)
  return _internal_table_uid();
}
inline void RegionInfoArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionInfoArchive.table_uid)
}
inline ::TSP::UUID* RegionInfoArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RegionInfoArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.RegionInfoArchive.table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RegionInfoArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* RegionInfoArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionInfoArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void RegionInfoArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionInfoArchive.table_uid)
}

// required .TSCE.IndexedUidsArchive column_uids = 2;
inline bool RegionInfoArchive::_internal_has_column_uids() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_uids_ != nullptr);
  return value;
}
inline bool RegionInfoArchive::has_column_uids() const {
  return _internal_has_column_uids();
}
inline void RegionInfoArchive::clear_column_uids() {
  if (column_uids_ != nullptr) column_uids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::IndexedUidsArchive& RegionInfoArchive::_internal_column_uids() const {
  const ::TSCE::IndexedUidsArchive* p = column_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexedUidsArchive&>(
      ::TSCE::_IndexedUidsArchive_default_instance_);
}
inline const ::TSCE::IndexedUidsArchive& RegionInfoArchive::column_uids() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionInfoArchive.column_uids)
  return _internal_column_uids();
}
inline void RegionInfoArchive::unsafe_arena_set_allocated_column_uids(
    ::TSCE::IndexedUidsArchive* column_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uids_);
  }
  column_uids_ = column_uids;
  if (column_uids) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionInfoArchive.column_uids)
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::release_column_uids() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::IndexedUidsArchive* temp = column_uids_;
  column_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::unsafe_arena_release_column_uids() {
  // @@protoc_insertion_point(field_release:TSCE.RegionInfoArchive.column_uids)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::IndexedUidsArchive* temp = column_uids_;
  column_uids_ = nullptr;
  return temp;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::_internal_mutable_column_uids() {
  _has_bits_[0] |= 0x00000002u;
  if (column_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexedUidsArchive>(GetArena());
    column_uids_ = p;
  }
  return column_uids_;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::mutable_column_uids() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionInfoArchive.column_uids)
  return _internal_mutable_column_uids();
}
inline void RegionInfoArchive::set_allocated_column_uids(::TSCE::IndexedUidsArchive* column_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete column_uids_;
  }
  if (column_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(column_uids);
    if (message_arena != submessage_arena) {
      column_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_uids_ = column_uids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionInfoArchive.column_uids)
}

// required .TSCE.IndexedUidsArchive row_uids = 3;
inline bool RegionInfoArchive::_internal_has_row_uids() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || row_uids_ != nullptr);
  return value;
}
inline bool RegionInfoArchive::has_row_uids() const {
  return _internal_has_row_uids();
}
inline void RegionInfoArchive::clear_row_uids() {
  if (row_uids_ != nullptr) row_uids_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::IndexedUidsArchive& RegionInfoArchive::_internal_row_uids() const {
  const ::TSCE::IndexedUidsArchive* p = row_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::IndexedUidsArchive&>(
      ::TSCE::_IndexedUidsArchive_default_instance_);
}
inline const ::TSCE::IndexedUidsArchive& RegionInfoArchive::row_uids() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionInfoArchive.row_uids)
  return _internal_row_uids();
}
inline void RegionInfoArchive::unsafe_arena_set_allocated_row_uids(
    ::TSCE::IndexedUidsArchive* row_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uids_);
  }
  row_uids_ = row_uids;
  if (row_uids) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionInfoArchive.row_uids)
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::release_row_uids() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::IndexedUidsArchive* temp = row_uids_;
  row_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::unsafe_arena_release_row_uids() {
  // @@protoc_insertion_point(field_release:TSCE.RegionInfoArchive.row_uids)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::IndexedUidsArchive* temp = row_uids_;
  row_uids_ = nullptr;
  return temp;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::_internal_mutable_row_uids() {
  _has_bits_[0] |= 0x00000004u;
  if (row_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::IndexedUidsArchive>(GetArena());
    row_uids_ = p;
  }
  return row_uids_;
}
inline ::TSCE::IndexedUidsArchive* RegionInfoArchive::mutable_row_uids() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionInfoArchive.row_uids)
  return _internal_mutable_row_uids();
}
inline void RegionInfoArchive::set_allocated_row_uids(::TSCE::IndexedUidsArchive* row_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row_uids_;
  }
  if (row_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row_uids);
    if (message_arena != submessage_arena) {
      row_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  row_uids_ = row_uids;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionInfoArchive.row_uids)
}

// -------------------------------------------------------------------

// RegionMovedInfoArchive

// required .TSCE.RegionInfoArchive src_region = 1;
inline bool RegionMovedInfoArchive::_internal_has_src_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || src_region_ != nullptr);
  return value;
}
inline bool RegionMovedInfoArchive::has_src_region() const {
  return _internal_has_src_region();
}
inline void RegionMovedInfoArchive::clear_src_region() {
  if (src_region_ != nullptr) src_region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::_internal_src_region() const {
  const ::TSCE::RegionInfoArchive* p = src_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionInfoArchive&>(
      ::TSCE::_RegionInfoArchive_default_instance_);
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::src_region() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.src_region)
  return _internal_src_region();
}
inline void RegionMovedInfoArchive::unsafe_arena_set_allocated_src_region(
    ::TSCE::RegionInfoArchive* src_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_region_);
  }
  src_region_ = src_region;
  if (src_region) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionMovedInfoArchive.src_region)
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::release_src_region() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RegionInfoArchive* temp = src_region_;
  src_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::unsafe_arena_release_src_region() {
  // @@protoc_insertion_point(field_release:TSCE.RegionMovedInfoArchive.src_region)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RegionInfoArchive* temp = src_region_;
  src_region_ = nullptr;
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::_internal_mutable_src_region() {
  _has_bits_[0] |= 0x00000001u;
  if (src_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionInfoArchive>(GetArena());
    src_region_ = p;
  }
  return src_region_;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::mutable_src_region() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionMovedInfoArchive.src_region)
  return _internal_mutable_src_region();
}
inline void RegionMovedInfoArchive::set_allocated_src_region(::TSCE::RegionInfoArchive* src_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete src_region_;
  }
  if (src_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(src_region);
    if (message_arena != submessage_arena) {
      src_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_region_ = src_region;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionMovedInfoArchive.src_region)
}

// required .TSCE.RegionInfoArchive dst_region = 2;
inline bool RegionMovedInfoArchive::_internal_has_dst_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dst_region_ != nullptr);
  return value;
}
inline bool RegionMovedInfoArchive::has_dst_region() const {
  return _internal_has_dst_region();
}
inline void RegionMovedInfoArchive::clear_dst_region() {
  if (dst_region_ != nullptr) dst_region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::_internal_dst_region() const {
  const ::TSCE::RegionInfoArchive* p = dst_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionInfoArchive&>(
      ::TSCE::_RegionInfoArchive_default_instance_);
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::dst_region() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.dst_region)
  return _internal_dst_region();
}
inline void RegionMovedInfoArchive::unsafe_arena_set_allocated_dst_region(
    ::TSCE::RegionInfoArchive* dst_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_region_);
  }
  dst_region_ = dst_region;
  if (dst_region) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionMovedInfoArchive.dst_region)
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::release_dst_region() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RegionInfoArchive* temp = dst_region_;
  dst_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::unsafe_arena_release_dst_region() {
  // @@protoc_insertion_point(field_release:TSCE.RegionMovedInfoArchive.dst_region)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::RegionInfoArchive* temp = dst_region_;
  dst_region_ = nullptr;
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::_internal_mutable_dst_region() {
  _has_bits_[0] |= 0x00000002u;
  if (dst_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionInfoArchive>(GetArena());
    dst_region_ = p;
  }
  return dst_region_;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::mutable_dst_region() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionMovedInfoArchive.dst_region)
  return _internal_mutable_dst_region();
}
inline void RegionMovedInfoArchive::set_allocated_dst_region(::TSCE::RegionInfoArchive* dst_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dst_region_;
  }
  if (dst_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dst_region);
    if (message_arena != submessage_arena) {
      dst_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_region_ = dst_region;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionMovedInfoArchive.dst_region)
}

// optional bool span_rows = 3;
inline bool RegionMovedInfoArchive::_internal_has_span_rows() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionMovedInfoArchive::has_span_rows() const {
  return _internal_has_span_rows();
}
inline void RegionMovedInfoArchive::clear_span_rows() {
  span_rows_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RegionMovedInfoArchive::_internal_span_rows() const {
  return span_rows_;
}
inline bool RegionMovedInfoArchive::span_rows() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.span_rows)
  return _internal_span_rows();
}
inline void RegionMovedInfoArchive::_internal_set_span_rows(bool value) {
  _has_bits_[0] |= 0x00000010u;
  span_rows_ = value;
}
inline void RegionMovedInfoArchive::set_span_rows(bool value) {
  _internal_set_span_rows(value);
  // @@protoc_insertion_point(field_set:TSCE.RegionMovedInfoArchive.span_rows)
}

// optional bool span_columns = 4;
inline bool RegionMovedInfoArchive::_internal_has_span_columns() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionMovedInfoArchive::has_span_columns() const {
  return _internal_has_span_columns();
}
inline void RegionMovedInfoArchive::clear_span_columns() {
  span_columns_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RegionMovedInfoArchive::_internal_span_columns() const {
  return span_columns_;
}
inline bool RegionMovedInfoArchive::span_columns() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.span_columns)
  return _internal_span_columns();
}
inline void RegionMovedInfoArchive::_internal_set_span_columns(bool value) {
  _has_bits_[0] |= 0x00000020u;
  span_columns_ = value;
}
inline void RegionMovedInfoArchive::set_span_columns(bool value) {
  _internal_set_span_columns(value);
  // @@protoc_insertion_point(field_set:TSCE.RegionMovedInfoArchive.span_columns)
}

// optional .TSCE.RegionInfoArchive original_src_region = 5;
inline bool RegionMovedInfoArchive::_internal_has_original_src_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || original_src_region_ != nullptr);
  return value;
}
inline bool RegionMovedInfoArchive::has_original_src_region() const {
  return _internal_has_original_src_region();
}
inline void RegionMovedInfoArchive::clear_original_src_region() {
  if (original_src_region_ != nullptr) original_src_region_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::_internal_original_src_region() const {
  const ::TSCE::RegionInfoArchive* p = original_src_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionInfoArchive&>(
      ::TSCE::_RegionInfoArchive_default_instance_);
}
inline const ::TSCE::RegionInfoArchive& RegionMovedInfoArchive::original_src_region() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.original_src_region)
  return _internal_original_src_region();
}
inline void RegionMovedInfoArchive::unsafe_arena_set_allocated_original_src_region(
    ::TSCE::RegionInfoArchive* original_src_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_src_region_);
  }
  original_src_region_ = original_src_region;
  if (original_src_region) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionMovedInfoArchive.original_src_region)
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::release_original_src_region() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RegionInfoArchive* temp = original_src_region_;
  original_src_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::unsafe_arena_release_original_src_region() {
  // @@protoc_insertion_point(field_release:TSCE.RegionMovedInfoArchive.original_src_region)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RegionInfoArchive* temp = original_src_region_;
  original_src_region_ = nullptr;
  return temp;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::_internal_mutable_original_src_region() {
  _has_bits_[0] |= 0x00000004u;
  if (original_src_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionInfoArchive>(GetArena());
    original_src_region_ = p;
  }
  return original_src_region_;
}
inline ::TSCE::RegionInfoArchive* RegionMovedInfoArchive::mutable_original_src_region() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionMovedInfoArchive.original_src_region)
  return _internal_mutable_original_src_region();
}
inline void RegionMovedInfoArchive::set_allocated_original_src_region(::TSCE::RegionInfoArchive* original_src_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_src_region_;
  }
  if (original_src_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_src_region);
    if (message_arena != submessage_arena) {
      original_src_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_src_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  original_src_region_ = original_src_region;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionMovedInfoArchive.original_src_region)
}

// optional .TSP.UUID final_dest_table_uid = 6;
inline bool RegionMovedInfoArchive::_internal_has_final_dest_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || final_dest_table_uid_ != nullptr);
  return value;
}
inline bool RegionMovedInfoArchive::has_final_dest_table_uid() const {
  return _internal_has_final_dest_table_uid();
}
inline const ::TSP::UUID& RegionMovedInfoArchive::_internal_final_dest_table_uid() const {
  const ::TSP::UUID* p = final_dest_table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RegionMovedInfoArchive::final_dest_table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.RegionMovedInfoArchive.final_dest_table_uid)
  return _internal_final_dest_table_uid();
}
inline void RegionMovedInfoArchive::unsafe_arena_set_allocated_final_dest_table_uid(
    ::TSP::UUID* final_dest_table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_dest_table_uid_);
  }
  final_dest_table_uid_ = final_dest_table_uid;
  if (final_dest_table_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.RegionMovedInfoArchive.final_dest_table_uid)
}
inline ::TSP::UUID* RegionMovedInfoArchive::release_final_dest_table_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = final_dest_table_uid_;
  final_dest_table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RegionMovedInfoArchive::unsafe_arena_release_final_dest_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.RegionMovedInfoArchive.final_dest_table_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = final_dest_table_uid_;
  final_dest_table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RegionMovedInfoArchive::_internal_mutable_final_dest_table_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (final_dest_table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    final_dest_table_uid_ = p;
  }
  return final_dest_table_uid_;
}
inline ::TSP::UUID* RegionMovedInfoArchive::mutable_final_dest_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.RegionMovedInfoArchive.final_dest_table_uid)
  return _internal_mutable_final_dest_table_uid();
}
inline void RegionMovedInfoArchive::set_allocated_final_dest_table_uid(::TSP::UUID* final_dest_table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_dest_table_uid_);
  }
  if (final_dest_table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_dest_table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      final_dest_table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_dest_table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  final_dest_table_uid_ = final_dest_table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.RegionMovedInfoArchive.final_dest_table_uid)
}

// -------------------------------------------------------------------

// MergeSourceArchive

// required uint32 coord_column = 1;
inline bool MergeSourceArchive::_internal_has_coord_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MergeSourceArchive::has_coord_column() const {
  return _internal_has_coord_column();
}
inline void MergeSourceArchive::clear_coord_column() {
  coord_column_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeSourceArchive::_internal_coord_column() const {
  return coord_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeSourceArchive::coord_column() const {
  // @@protoc_insertion_point(field_get:TSCE.MergeSourceArchive.coord_column)
  return _internal_coord_column();
}
inline void MergeSourceArchive::_internal_set_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  coord_column_ = value;
}
inline void MergeSourceArchive::set_coord_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coord_column(value);
  // @@protoc_insertion_point(field_set:TSCE.MergeSourceArchive.coord_column)
}

// required uint32 coord_row = 2;
inline bool MergeSourceArchive::_internal_has_coord_row() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MergeSourceArchive::has_coord_row() const {
  return _internal_has_coord_row();
}
inline void MergeSourceArchive::clear_coord_row() {
  coord_row_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeSourceArchive::_internal_coord_row() const {
  return coord_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeSourceArchive::coord_row() const {
  // @@protoc_insertion_point(field_get:TSCE.MergeSourceArchive.coord_row)
  return _internal_coord_row();
}
inline void MergeSourceArchive::_internal_set_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  coord_row_ = value;
}
inline void MergeSourceArchive::set_coord_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coord_row(value);
  // @@protoc_insertion_point(field_set:TSCE.MergeSourceArchive.coord_row)
}

// -------------------------------------------------------------------

// FormulaRewriteSpecArchive

// required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
inline bool FormulaRewriteSpecArchive::_internal_has_rewrite_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormulaRewriteSpecArchive::has_rewrite_type() const {
  return _internal_has_rewrite_type();
}
inline void FormulaRewriteSpecArchive::clear_rewrite_type() {
  rewrite_type_ = 4;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::TSCE::FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::_internal_rewrite_type() const {
  return static_cast< ::TSCE::FormulaRewriteSpecArchive_RewriteType >(rewrite_type_);
}
inline ::TSCE::FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::rewrite_type() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.rewrite_type)
  return _internal_rewrite_type();
}
inline void FormulaRewriteSpecArchive::_internal_set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value) {
  assert(::TSCE::FormulaRewriteSpecArchive_RewriteType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  rewrite_type_ = value;
}
inline void FormulaRewriteSpecArchive::set_rewrite_type(::TSCE::FormulaRewriteSpecArchive_RewriteType value) {
  _internal_set_rewrite_type(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaRewriteSpecArchive.rewrite_type)
}

// optional .TSP.UUID table_uid = 2;
inline bool FormulaRewriteSpecArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.table_uid)
  return _internal_table_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.table_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void FormulaRewriteSpecArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.table_uid)
}

// optional .TSP.UUID cond_style_owner_uid = 3;
inline bool FormulaRewriteSpecArchive::_internal_has_cond_style_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cond_style_owner_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_cond_style_owner_uid() const {
  return _internal_has_cond_style_owner_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_cond_style_owner_uid() const {
  const ::TSP::UUID* p = cond_style_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::cond_style_owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.cond_style_owner_uid)
  return _internal_cond_style_owner_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_cond_style_owner_uid(
    ::TSP::UUID* cond_style_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid_);
  }
  cond_style_owner_uid_ = cond_style_owner_uid;
  if (cond_style_owner_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.cond_style_owner_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_cond_style_owner_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = cond_style_owner_uid_;
  cond_style_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_cond_style_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.cond_style_owner_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = cond_style_owner_uid_;
  cond_style_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_cond_style_owner_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (cond_style_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    cond_style_owner_uid_ = p;
  }
  return cond_style_owner_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_cond_style_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.cond_style_owner_uid)
  return _internal_mutable_cond_style_owner_uid();
}
inline void FormulaRewriteSpecArchive::set_allocated_cond_style_owner_uid(::TSP::UUID* cond_style_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid_);
  }
  if (cond_style_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cond_style_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      cond_style_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond_style_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cond_style_owner_uid_ = cond_style_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.cond_style_owner_uid)
}

// optional .TSP.UUID group_by_uid = 4;
inline bool FormulaRewriteSpecArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaRewriteSpecArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.group_by_uid)
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* FormulaRewriteSpecArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void FormulaRewriteSpecArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.group_by_uid)
}

// optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 5;
inline bool FormulaRewriteSpecArchive::_internal_has_column_or_row_uuids_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || column_or_row_uuids_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_column_or_row_uuids_info() const {
  return _internal_has_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::clear_column_or_row_uuids_info() {
  if (column_or_row_uuids_info_ != nullptr) column_or_row_uuids_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::_internal_column_or_row_uuids_info() const {
  const ::TSCE::ColumnOrRowUuidsInfoArchive* p = column_or_row_uuids_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ColumnOrRowUuidsInfoArchive&>(
      ::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_);
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::column_or_row_uuids_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  return _internal_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_column_or_row_uuids_info(
    ::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_or_row_uuids_info_);
  }
  column_or_row_uuids_info_ = column_or_row_uuids_info;
  if (column_or_row_uuids_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.column_or_row_uuids_info)
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::release_column_or_row_uuids_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = column_or_row_uuids_info_;
  column_or_row_uuids_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = column_or_row_uuids_info_;
  column_or_row_uuids_info_ = nullptr;
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_column_or_row_uuids_info() {
  _has_bits_[0] |= 0x00000008u;
  if (column_or_row_uuids_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ColumnOrRowUuidsInfoArchive>(GetArena());
    column_or_row_uuids_info_ = p;
  }
  return column_or_row_uuids_info_;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::mutable_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.column_or_row_uuids_info)
  return _internal_mutable_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* column_or_row_uuids_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete column_or_row_uuids_info_;
  }
  if (column_or_row_uuids_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(column_or_row_uuids_info);
    if (message_arena != submessage_arena) {
      column_or_row_uuids_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_or_row_uuids_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  column_or_row_uuids_info_ = column_or_row_uuids_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.column_or_row_uuids_info)
}

// optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 6;
inline bool FormulaRewriteSpecArchive::_internal_has_aux_column_or_row_uuids_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || aux_column_or_row_uuids_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_aux_column_or_row_uuids_info() const {
  return _internal_has_aux_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::clear_aux_column_or_row_uuids_info() {
  if (aux_column_or_row_uuids_info_ != nullptr) aux_column_or_row_uuids_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::_internal_aux_column_or_row_uuids_info() const {
  const ::TSCE::ColumnOrRowUuidsInfoArchive* p = aux_column_or_row_uuids_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ColumnOrRowUuidsInfoArchive&>(
      ::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_);
}
inline const ::TSCE::ColumnOrRowUuidsInfoArchive& FormulaRewriteSpecArchive::aux_column_or_row_uuids_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  return _internal_aux_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_aux_column_or_row_uuids_info(
    ::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux_column_or_row_uuids_info_);
  }
  aux_column_or_row_uuids_info_ = aux_column_or_row_uuids_info;
  if (aux_column_or_row_uuids_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::release_aux_column_or_row_uuids_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = aux_column_or_row_uuids_info_;
  aux_column_or_row_uuids_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_aux_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::ColumnOrRowUuidsInfoArchive* temp = aux_column_or_row_uuids_info_;
  aux_column_or_row_uuids_info_ = nullptr;
  return temp;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_aux_column_or_row_uuids_info() {
  _has_bits_[0] |= 0x00000010u;
  if (aux_column_or_row_uuids_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ColumnOrRowUuidsInfoArchive>(GetArena());
    aux_column_or_row_uuids_info_ = p;
  }
  return aux_column_or_row_uuids_info_;
}
inline ::TSCE::ColumnOrRowUuidsInfoArchive* FormulaRewriteSpecArchive::mutable_aux_column_or_row_uuids_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
  return _internal_mutable_aux_column_or_row_uuids_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_aux_column_or_row_uuids_info(::TSCE::ColumnOrRowUuidsInfoArchive* aux_column_or_row_uuids_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aux_column_or_row_uuids_info_;
  }
  if (aux_column_or_row_uuids_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aux_column_or_row_uuids_info);
    if (message_arena != submessage_arena) {
      aux_column_or_row_uuids_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aux_column_or_row_uuids_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  aux_column_or_row_uuids_info_ = aux_column_or_row_uuids_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info)
}

// optional .TSCE.RegionMovedInfoArchive region_moved_info = 7;
inline bool FormulaRewriteSpecArchive::_internal_has_region_moved_info() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || region_moved_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_region_moved_info() const {
  return _internal_has_region_moved_info();
}
inline void FormulaRewriteSpecArchive::clear_region_moved_info() {
  if (region_moved_info_ != nullptr) region_moved_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCE::RegionMovedInfoArchive& FormulaRewriteSpecArchive::_internal_region_moved_info() const {
  const ::TSCE::RegionMovedInfoArchive* p = region_moved_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionMovedInfoArchive&>(
      ::TSCE::_RegionMovedInfoArchive_default_instance_);
}
inline const ::TSCE::RegionMovedInfoArchive& FormulaRewriteSpecArchive::region_moved_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.region_moved_info)
  return _internal_region_moved_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_region_moved_info(
    ::TSCE::RegionMovedInfoArchive* region_moved_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_moved_info_);
  }
  region_moved_info_ = region_moved_info;
  if (region_moved_info) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.region_moved_info)
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::release_region_moved_info() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::RegionMovedInfoArchive* temp = region_moved_info_;
  region_moved_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_region_moved_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.region_moved_info)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::RegionMovedInfoArchive* temp = region_moved_info_;
  region_moved_info_ = nullptr;
  return temp;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_region_moved_info() {
  _has_bits_[0] |= 0x00000020u;
  if (region_moved_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionMovedInfoArchive>(GetArena());
    region_moved_info_ = p;
  }
  return region_moved_info_;
}
inline ::TSCE::RegionMovedInfoArchive* FormulaRewriteSpecArchive::mutable_region_moved_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.region_moved_info)
  return _internal_mutable_region_moved_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_region_moved_info(::TSCE::RegionMovedInfoArchive* region_moved_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_moved_info_;
  }
  if (region_moved_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_moved_info);
    if (message_arena != submessage_arena) {
      region_moved_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_moved_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  region_moved_info_ = region_moved_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.region_moved_info)
}

// optional .TSCE.RegionInfoArchive region_info = 8;
inline bool FormulaRewriteSpecArchive::_internal_has_region_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || region_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_region_info() const {
  return _internal_has_region_info();
}
inline void FormulaRewriteSpecArchive::clear_region_info() {
  if (region_info_ != nullptr) region_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TSCE::RegionInfoArchive& FormulaRewriteSpecArchive::_internal_region_info() const {
  const ::TSCE::RegionInfoArchive* p = region_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RegionInfoArchive&>(
      ::TSCE::_RegionInfoArchive_default_instance_);
}
inline const ::TSCE::RegionInfoArchive& FormulaRewriteSpecArchive::region_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.region_info)
  return _internal_region_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_region_info(
    ::TSCE::RegionInfoArchive* region_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_info_);
  }
  region_info_ = region_info;
  if (region_info) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.region_info)
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::release_region_info() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::RegionInfoArchive* temp = region_info_;
  region_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_region_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.region_info)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::RegionInfoArchive* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_region_info() {
  _has_bits_[0] |= 0x00000040u;
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RegionInfoArchive>(GetArena());
    region_info_ = p;
  }
  return region_info_;
}
inline ::TSCE::RegionInfoArchive* FormulaRewriteSpecArchive::mutable_region_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.region_info)
  return _internal_mutable_region_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_region_info(::TSCE::RegionInfoArchive* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_info_;
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region_info);
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.region_info)
}

// optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 9;
inline bool FormulaRewriteSpecArchive::_internal_has_rewrite_table_id_info() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || rewrite_table_id_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_rewrite_table_id_info() const {
  return _internal_has_rewrite_table_id_info();
}
inline void FormulaRewriteSpecArchive::clear_rewrite_table_id_info() {
  if (rewrite_table_id_info_ != nullptr) rewrite_table_id_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSCE::RewriteTableUIDInfoArchive& FormulaRewriteSpecArchive::_internal_rewrite_table_id_info() const {
  const ::TSCE::RewriteTableUIDInfoArchive* p = rewrite_table_id_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteTableUIDInfoArchive&>(
      ::TSCE::_RewriteTableUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteTableUIDInfoArchive& FormulaRewriteSpecArchive::rewrite_table_id_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.rewrite_table_id_info)
  return _internal_rewrite_table_id_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_rewrite_table_id_info(
    ::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewrite_table_id_info_);
  }
  rewrite_table_id_info_ = rewrite_table_id_info;
  if (rewrite_table_id_info) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.rewrite_table_id_info)
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::release_rewrite_table_id_info() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = rewrite_table_id_info_;
  rewrite_table_id_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_rewrite_table_id_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.rewrite_table_id_info)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = rewrite_table_id_info_;
  rewrite_table_id_info_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_rewrite_table_id_info() {
  _has_bits_[0] |= 0x00000080u;
  if (rewrite_table_id_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(GetArena());
    rewrite_table_id_info_ = p;
  }
  return rewrite_table_id_info_;
}
inline ::TSCE::RewriteTableUIDInfoArchive* FormulaRewriteSpecArchive::mutable_rewrite_table_id_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.rewrite_table_id_info)
  return _internal_mutable_rewrite_table_id_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_rewrite_table_id_info(::TSCE::RewriteTableUIDInfoArchive* rewrite_table_id_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewrite_table_id_info_;
  }
  if (rewrite_table_id_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewrite_table_id_info);
    if (message_arena != submessage_arena) {
      rewrite_table_id_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_table_id_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  rewrite_table_id_info_ = rewrite_table_id_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.rewrite_table_id_info)
}

// optional .TSCE.TableTransposeInfoArchive transposed_table_info = 10;
inline bool FormulaRewriteSpecArchive::_internal_has_transposed_table_info() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || transposed_table_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_transposed_table_info() const {
  return _internal_has_transposed_table_info();
}
inline void FormulaRewriteSpecArchive::clear_transposed_table_info() {
  if (transposed_table_info_ != nullptr) transposed_table_info_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TSCE::TableTransposeInfoArchive& FormulaRewriteSpecArchive::_internal_transposed_table_info() const {
  const ::TSCE::TableTransposeInfoArchive* p = transposed_table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TableTransposeInfoArchive&>(
      ::TSCE::_TableTransposeInfoArchive_default_instance_);
}
inline const ::TSCE::TableTransposeInfoArchive& FormulaRewriteSpecArchive::transposed_table_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.transposed_table_info)
  return _internal_transposed_table_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_transposed_table_info(
    ::TSCE::TableTransposeInfoArchive* transposed_table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transposed_table_info_);
  }
  transposed_table_info_ = transposed_table_info;
  if (transposed_table_info) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.transposed_table_info)
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::release_transposed_table_info() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::TableTransposeInfoArchive* temp = transposed_table_info_;
  transposed_table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_transposed_table_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.transposed_table_info)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::TableTransposeInfoArchive* temp = transposed_table_info_;
  transposed_table_info_ = nullptr;
  return temp;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_transposed_table_info() {
  _has_bits_[0] |= 0x00000100u;
  if (transposed_table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TableTransposeInfoArchive>(GetArena());
    transposed_table_info_ = p;
  }
  return transposed_table_info_;
}
inline ::TSCE::TableTransposeInfoArchive* FormulaRewriteSpecArchive::mutable_transposed_table_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.transposed_table_info)
  return _internal_mutable_transposed_table_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_transposed_table_info(::TSCE::TableTransposeInfoArchive* transposed_table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transposed_table_info_;
  }
  if (transposed_table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transposed_table_info);
    if (message_arena != submessage_arena) {
      transposed_table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transposed_table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  transposed_table_info_ = transposed_table_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.transposed_table_info)
}

// optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 11;
inline bool FormulaRewriteSpecArchive::_internal_has_merge_origin_moved_info() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || merge_origin_moved_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_merge_origin_moved_info() const {
  return _internal_has_merge_origin_moved_info();
}
inline void FormulaRewriteSpecArchive::clear_merge_origin_moved_info() {
  if (merge_origin_moved_info_ != nullptr) merge_origin_moved_info_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TSCE::MergeOriginMovedArchive& FormulaRewriteSpecArchive::_internal_merge_origin_moved_info() const {
  const ::TSCE::MergeOriginMovedArchive* p = merge_origin_moved_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::MergeOriginMovedArchive&>(
      ::TSCE::_MergeOriginMovedArchive_default_instance_);
}
inline const ::TSCE::MergeOriginMovedArchive& FormulaRewriteSpecArchive::merge_origin_moved_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.merge_origin_moved_info)
  return _internal_merge_origin_moved_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_merge_origin_moved_info(
    ::TSCE::MergeOriginMovedArchive* merge_origin_moved_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_origin_moved_info_);
  }
  merge_origin_moved_info_ = merge_origin_moved_info;
  if (merge_origin_moved_info) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.merge_origin_moved_info)
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::release_merge_origin_moved_info() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSCE::MergeOriginMovedArchive* temp = merge_origin_moved_info_;
  merge_origin_moved_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::unsafe_arena_release_merge_origin_moved_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.merge_origin_moved_info)
  _has_bits_[0] &= ~0x00000200u;
  ::TSCE::MergeOriginMovedArchive* temp = merge_origin_moved_info_;
  merge_origin_moved_info_ = nullptr;
  return temp;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::_internal_mutable_merge_origin_moved_info() {
  _has_bits_[0] |= 0x00000200u;
  if (merge_origin_moved_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::MergeOriginMovedArchive>(GetArena());
    merge_origin_moved_info_ = p;
  }
  return merge_origin_moved_info_;
}
inline ::TSCE::MergeOriginMovedArchive* FormulaRewriteSpecArchive::mutable_merge_origin_moved_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.merge_origin_moved_info)
  return _internal_mutable_merge_origin_moved_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_merge_origin_moved_info(::TSCE::MergeOriginMovedArchive* merge_origin_moved_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete merge_origin_moved_info_;
  }
  if (merge_origin_moved_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(merge_origin_moved_info);
    if (message_arena != submessage_arena) {
      merge_origin_moved_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_origin_moved_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  merge_origin_moved_info_ = merge_origin_moved_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.merge_origin_moved_info)
}

// optional .TSCE.MergeSourceArchive merge_source = 12;
inline bool FormulaRewriteSpecArchive::_internal_has_merge_source() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || merge_source_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_merge_source() const {
  return _internal_has_merge_source();
}
inline void FormulaRewriteSpecArchive::clear_merge_source() {
  if (merge_source_ != nullptr) merge_source_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TSCE::MergeSourceArchive& FormulaRewriteSpecArchive::_internal_merge_source() const {
  const ::TSCE::MergeSourceArchive* p = merge_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::MergeSourceArchive&>(
      ::TSCE::_MergeSourceArchive_default_instance_);
}
inline const ::TSCE::MergeSourceArchive& FormulaRewriteSpecArchive::merge_source() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.merge_source)
  return _internal_merge_source();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_merge_source(
    ::TSCE::MergeSourceArchive* merge_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_source_);
  }
  merge_source_ = merge_source;
  if (merge_source) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.merge_source)
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::release_merge_source() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::MergeSourceArchive* temp = merge_source_;
  merge_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::unsafe_arena_release_merge_source() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.merge_source)
  _has_bits_[0] &= ~0x00000400u;
  ::TSCE::MergeSourceArchive* temp = merge_source_;
  merge_source_ = nullptr;
  return temp;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::_internal_mutable_merge_source() {
  _has_bits_[0] |= 0x00000400u;
  if (merge_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::MergeSourceArchive>(GetArena());
    merge_source_ = p;
  }
  return merge_source_;
}
inline ::TSCE::MergeSourceArchive* FormulaRewriteSpecArchive::mutable_merge_source() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.merge_source)
  return _internal_mutable_merge_source();
}
inline void FormulaRewriteSpecArchive::set_allocated_merge_source(::TSCE::MergeSourceArchive* merge_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete merge_source_;
  }
  if (merge_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(merge_source);
    if (message_arena != submessage_arena) {
      merge_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  merge_source_ = merge_source;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.merge_source)
}

// optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 13;
inline bool FormulaRewriteSpecArchive::_internal_has_group_node_info() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || group_node_info_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_group_node_info() const {
  return _internal_has_group_node_info();
}
inline void FormulaRewriteSpecArchive::clear_group_node_info() {
  if (group_node_info_ != nullptr) group_node_info_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TSCE::RewriteGroupNodeUIDInfoArchive& FormulaRewriteSpecArchive::_internal_group_node_info() const {
  const ::TSCE::RewriteGroupNodeUIDInfoArchive* p = group_node_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteGroupNodeUIDInfoArchive&>(
      ::TSCE::_RewriteGroupNodeUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteGroupNodeUIDInfoArchive& FormulaRewriteSpecArchive::group_node_info() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.group_node_info)
  return _internal_group_node_info();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_group_node_info(
    ::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_info_);
  }
  group_node_info_ = group_node_info;
  if (group_node_info) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.group_node_info)
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::release_group_node_info() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* temp = group_node_info_;
  group_node_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::unsafe_arena_release_group_node_info() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.group_node_info)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCE::RewriteGroupNodeUIDInfoArchive* temp = group_node_info_;
  group_node_info_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::_internal_mutable_group_node_info() {
  _has_bits_[0] |= 0x00000800u;
  if (group_node_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteGroupNodeUIDInfoArchive>(GetArena());
    group_node_info_ = p;
  }
  return group_node_info_;
}
inline ::TSCE::RewriteGroupNodeUIDInfoArchive* FormulaRewriteSpecArchive::mutable_group_node_info() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.group_node_info)
  return _internal_mutable_group_node_info();
}
inline void FormulaRewriteSpecArchive::set_allocated_group_node_info(::TSCE::RewriteGroupNodeUIDInfoArchive* group_node_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_node_info_;
  }
  if (group_node_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_node_info);
    if (message_arena != submessage_arena) {
      group_node_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  group_node_info_ = group_node_info;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.group_node_info)
}

// optional .TSCE.GroupByChangeArchive groupby_change = 14;
inline bool FormulaRewriteSpecArchive::_internal_has_groupby_change() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || groupby_change_ != nullptr);
  return value;
}
inline bool FormulaRewriteSpecArchive::has_groupby_change() const {
  return _internal_has_groupby_change();
}
inline void FormulaRewriteSpecArchive::clear_groupby_change() {
  if (groupby_change_ != nullptr) groupby_change_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TSCE::GroupByChangeArchive& FormulaRewriteSpecArchive::_internal_groupby_change() const {
  const ::TSCE::GroupByChangeArchive* p = groupby_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::GroupByChangeArchive&>(
      ::TSCE::_GroupByChangeArchive_default_instance_);
}
inline const ::TSCE::GroupByChangeArchive& FormulaRewriteSpecArchive::groupby_change() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.groupby_change)
  return _internal_groupby_change();
}
inline void FormulaRewriteSpecArchive::unsafe_arena_set_allocated_groupby_change(
    ::TSCE::GroupByChangeArchive* groupby_change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupby_change_);
  }
  groupby_change_ = groupby_change;
  if (groupby_change) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteSpecArchive.groupby_change)
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::release_groupby_change() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::GroupByChangeArchive* temp = groupby_change_;
  groupby_change_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::unsafe_arena_release_groupby_change() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteSpecArchive.groupby_change)
  _has_bits_[0] &= ~0x00001000u;
  ::TSCE::GroupByChangeArchive* temp = groupby_change_;
  groupby_change_ = nullptr;
  return temp;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::_internal_mutable_groupby_change() {
  _has_bits_[0] |= 0x00001000u;
  if (groupby_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::GroupByChangeArchive>(GetArena());
    groupby_change_ = p;
  }
  return groupby_change_;
}
inline ::TSCE::GroupByChangeArchive* FormulaRewriteSpecArchive::mutable_groupby_change() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteSpecArchive.groupby_change)
  return _internal_mutable_groupby_change();
}
inline void FormulaRewriteSpecArchive::set_allocated_groupby_change(::TSCE::GroupByChangeArchive* groupby_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupby_change_;
  }
  if (groupby_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupby_change);
    if (message_arena != submessage_arena) {
      groupby_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupby_change, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  groupby_change_ = groupby_change;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteSpecArchive.groupby_change)
}

// optional bool is_inverse = 15;
inline bool FormulaRewriteSpecArchive::_internal_has_is_inverse() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormulaRewriteSpecArchive::has_is_inverse() const {
  return _internal_has_is_inverse();
}
inline void FormulaRewriteSpecArchive::clear_is_inverse() {
  is_inverse_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool FormulaRewriteSpecArchive::_internal_is_inverse() const {
  return is_inverse_;
}
inline bool FormulaRewriteSpecArchive::is_inverse() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteSpecArchive.is_inverse)
  return _internal_is_inverse();
}
inline void FormulaRewriteSpecArchive::_internal_set_is_inverse(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_inverse_ = value;
}
inline void FormulaRewriteSpecArchive::set_is_inverse(bool value) {
  _internal_set_is_inverse(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaRewriteSpecArchive.is_inverse)
}

// -------------------------------------------------------------------

// HauntedOwnerArchive

// required .TSP.UUID owner_uid = 1;
inline bool HauntedOwnerArchive::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool HauntedOwnerArchive::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& HauntedOwnerArchive::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HauntedOwnerArchive::owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.HauntedOwnerArchive.owner_uid)
  return _internal_owner_uid();
}
inline void HauntedOwnerArchive::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.HauntedOwnerArchive.owner_uid)
}
inline ::TSP::UUID* HauntedOwnerArchive::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HauntedOwnerArchive::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.HauntedOwnerArchive.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HauntedOwnerArchive::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* HauntedOwnerArchive::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.HauntedOwnerArchive.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void HauntedOwnerArchive::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.HauntedOwnerArchive.owner_uid)
}

// -------------------------------------------------------------------

// CellCoordinateArchive

// optional fixed32 packedData = 1;
inline bool CellCoordinateArchive::_internal_has_packeddata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_packeddata() const {
  return _internal_has_packeddata();
}
inline void CellCoordinateArchive::clear_packeddata() {
  packeddata_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::_internal_packeddata() const {
  return packeddata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::packeddata() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.packedData)
  return _internal_packeddata();
}
inline void CellCoordinateArchive::_internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  packeddata_ = value;
}
inline void CellCoordinateArchive::set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packeddata(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.packedData)
}

// optional uint32 column = 2;
inline bool CellCoordinateArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_column() const {
  return _internal_has_column();
}
inline void CellCoordinateArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.column)
  return _internal_column();
}
inline void CellCoordinateArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void CellCoordinateArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.column)
}

// optional uint32 row = 3;
inline bool CellCoordinateArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellCoordinateArchive::has_row() const {
  return _internal_has_row();
}
inline void CellCoordinateArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellCoordinateArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateArchive.row)
  return _internal_row();
}
inline void CellCoordinateArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void CellCoordinateArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.CellCoordinateArchive.row)
}

// -------------------------------------------------------------------

// CellCoordinateVectorArchive

// repeated .TSCE.CellCoordinateArchive cell_coord = 1;
inline int CellCoordinateVectorArchive::_internal_cell_coord_size() const {
  return cell_coord_.size();
}
inline int CellCoordinateVectorArchive::cell_coord_size() const {
  return _internal_cell_coord_size();
}
inline void CellCoordinateVectorArchive::clear_cell_coord() {
  cell_coord_.Clear();
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::mutable_cell_coord(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.CellCoordinateVectorArchive.cell_coord)
  return cell_coord_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
CellCoordinateVectorArchive::mutable_cell_coord() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.CellCoordinateVectorArchive.cell_coord)
  return &cell_coord_;
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateVectorArchive::_internal_cell_coord(int index) const {
  return cell_coord_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& CellCoordinateVectorArchive::cell_coord(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.CellCoordinateVectorArchive.cell_coord)
  return _internal_cell_coord(index);
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::_internal_add_cell_coord() {
  return cell_coord_.Add();
}
inline ::TSCE::CellCoordinateArchive* CellCoordinateVectorArchive::add_cell_coord() {
  // @@protoc_insertion_point(field_add:TSCE.CellCoordinateVectorArchive.cell_coord)
  return _internal_add_cell_coord();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
CellCoordinateVectorArchive::cell_coord() const {
  // @@protoc_insertion_point(field_list:TSCE.CellCoordinateVectorArchive.cell_coord)
  return cell_coord_;
}

// -------------------------------------------------------------------

// ExpandedCellRefObjectPairArchive

// required .TSCE.CellReferenceArchive cell_ref = 1;
inline bool ExpandedCellRefObjectPairArchive::_internal_has_cell_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_ref_ != nullptr);
  return value;
}
inline bool ExpandedCellRefObjectPairArchive::has_cell_ref() const {
  return _internal_has_cell_ref();
}
inline void ExpandedCellRefObjectPairArchive::clear_cell_ref() {
  if (cell_ref_ != nullptr) cell_ref_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::CellReferenceArchive& ExpandedCellRefObjectPairArchive::_internal_cell_ref() const {
  const ::TSCE::CellReferenceArchive* p = cell_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& ExpandedCellRefObjectPairArchive::cell_ref() const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedCellRefObjectPairArchive.cell_ref)
  return _internal_cell_ref();
}
inline void ExpandedCellRefObjectPairArchive::unsafe_arena_set_allocated_cell_ref(
    ::TSCE::CellReferenceArchive* cell_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_ref_);
  }
  cell_ref_ = cell_ref;
  if (cell_ref) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExpandedCellRefObjectPairArchive.cell_ref)
}
inline ::TSCE::CellReferenceArchive* ExpandedCellRefObjectPairArchive::release_cell_ref() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_ref_;
  cell_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellReferenceArchive* ExpandedCellRefObjectPairArchive::unsafe_arena_release_cell_ref() {
  // @@protoc_insertion_point(field_release:TSCE.ExpandedCellRefObjectPairArchive.cell_ref)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_ref_;
  cell_ref_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* ExpandedCellRefObjectPairArchive::_internal_mutable_cell_ref() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArena());
    cell_ref_ = p;
  }
  return cell_ref_;
}
inline ::TSCE::CellReferenceArchive* ExpandedCellRefObjectPairArchive::mutable_cell_ref() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExpandedCellRefObjectPairArchive.cell_ref)
  return _internal_mutable_cell_ref();
}
inline void ExpandedCellRefObjectPairArchive::set_allocated_cell_ref(::TSCE::CellReferenceArchive* cell_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_ref_;
  }
  if (cell_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_ref);
    if (message_arena != submessage_arena) {
      cell_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_ref_ = cell_ref;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExpandedCellRefObjectPairArchive.cell_ref)
}

// required .TSP.Reference object = 2;
inline bool ExpandedCellRefObjectPairArchive::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool ExpandedCellRefObjectPairArchive::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& ExpandedCellRefObjectPairArchive::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ExpandedCellRefObjectPairArchive::object() const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedCellRefObjectPairArchive.object)
  return _internal_object();
}
inline void ExpandedCellRefObjectPairArchive::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExpandedCellRefObjectPairArchive.object)
}
inline ::TSP::Reference* ExpandedCellRefObjectPairArchive::release_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ExpandedCellRefObjectPairArchive::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSCE.ExpandedCellRefObjectPairArchive.object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ExpandedCellRefObjectPairArchive::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* ExpandedCellRefObjectPairArchive::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExpandedCellRefObjectPairArchive.object)
  return _internal_mutable_object();
}
inline void ExpandedCellRefObjectPairArchive::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExpandedCellRefObjectPairArchive.object)
}

// -------------------------------------------------------------------

// ExpandedCellRefObjectMapArchive

// repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
inline int ExpandedCellRefObjectMapArchive::_internal_cell_ref_object_pair_size() const {
  return cell_ref_object_pair_.size();
}
inline int ExpandedCellRefObjectMapArchive::cell_ref_object_pair_size() const {
  return _internal_cell_ref_object_pair_size();
}
inline void ExpandedCellRefObjectMapArchive::clear_cell_ref_object_pair() {
  cell_ref_object_pair_.Clear();
}
inline ::TSCE::ExpandedCellRefObjectPairArchive* ExpandedCellRefObjectMapArchive::mutable_cell_ref_object_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair)
  return cell_ref_object_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedCellRefObjectPairArchive >*
ExpandedCellRefObjectMapArchive::mutable_cell_ref_object_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair)
  return &cell_ref_object_pair_;
}
inline const ::TSCE::ExpandedCellRefObjectPairArchive& ExpandedCellRefObjectMapArchive::_internal_cell_ref_object_pair(int index) const {
  return cell_ref_object_pair_.Get(index);
}
inline const ::TSCE::ExpandedCellRefObjectPairArchive& ExpandedCellRefObjectMapArchive::cell_ref_object_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair)
  return _internal_cell_ref_object_pair(index);
}
inline ::TSCE::ExpandedCellRefObjectPairArchive* ExpandedCellRefObjectMapArchive::_internal_add_cell_ref_object_pair() {
  return cell_ref_object_pair_.Add();
}
inline ::TSCE::ExpandedCellRefObjectPairArchive* ExpandedCellRefObjectMapArchive::add_cell_ref_object_pair() {
  // @@protoc_insertion_point(field_add:TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair)
  return _internal_add_cell_ref_object_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedCellRefObjectPairArchive >&
ExpandedCellRefObjectMapArchive::cell_ref_object_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair)
  return cell_ref_object_pair_;
}

// -------------------------------------------------------------------

// FormulaAtCoordArchive

// required uint32 column = 1;
inline bool FormulaAtCoordArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaAtCoordArchive::has_column() const {
  return _internal_has_column();
}
inline void FormulaAtCoordArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaAtCoordArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaAtCoordArchive::column() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaAtCoordArchive.column)
  return _internal_column();
}
inline void FormulaAtCoordArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void FormulaAtCoordArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaAtCoordArchive.column)
}

// required uint32 row = 2;
inline bool FormulaAtCoordArchive::_internal_has_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaAtCoordArchive::has_row() const {
  return _internal_has_row();
}
inline void FormulaAtCoordArchive::clear_row() {
  row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaAtCoordArchive::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaAtCoordArchive::row() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaAtCoordArchive.row)
  return _internal_row();
}
inline void FormulaAtCoordArchive::_internal_set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_ = value;
}
inline void FormulaAtCoordArchive::set_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaAtCoordArchive.row)
}

// optional .TSCE.FormulaArchive formula = 3;
inline bool FormulaAtCoordArchive::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool FormulaAtCoordArchive::has_formula() const {
  return _internal_has_formula();
}
inline void FormulaAtCoordArchive::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::FormulaArchive& FormulaAtCoordArchive::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& FormulaAtCoordArchive::formula() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaAtCoordArchive.formula)
  return _internal_formula();
}
inline void FormulaAtCoordArchive::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaAtCoordArchive.formula)
}
inline ::TSCE::FormulaArchive* FormulaAtCoordArchive::release_formula() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaAtCoordArchive::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaAtCoordArchive.formula)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaAtCoordArchive::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* FormulaAtCoordArchive::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaAtCoordArchive.formula)
  return _internal_mutable_formula();
}
inline void FormulaAtCoordArchive::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formula_;
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formula);
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaAtCoordArchive.formula)
}

// optional bool repeat_previous_formula = 4 [default = false];
inline bool FormulaAtCoordArchive::_internal_has_repeat_previous_formula() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaAtCoordArchive::has_repeat_previous_formula() const {
  return _internal_has_repeat_previous_formula();
}
inline void FormulaAtCoordArchive::clear_repeat_previous_formula() {
  repeat_previous_formula_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FormulaAtCoordArchive::_internal_repeat_previous_formula() const {
  return repeat_previous_formula_;
}
inline bool FormulaAtCoordArchive::repeat_previous_formula() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaAtCoordArchive.repeat_previous_formula)
  return _internal_repeat_previous_formula();
}
inline void FormulaAtCoordArchive::_internal_set_repeat_previous_formula(bool value) {
  _has_bits_[0] |= 0x00000008u;
  repeat_previous_formula_ = value;
}
inline void FormulaAtCoordArchive::set_repeat_previous_formula(bool value) {
  _internal_set_repeat_previous_formula(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaAtCoordArchive.repeat_previous_formula)
}

// -------------------------------------------------------------------

// FormulaCoordPairsByOwnerArchive

// required uint32 owner_kind = 1;
inline bool FormulaCoordPairsByOwnerArchive::_internal_has_owner_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaCoordPairsByOwnerArchive::has_owner_kind() const {
  return _internal_has_owner_kind();
}
inline void FormulaCoordPairsByOwnerArchive::clear_owner_kind() {
  owner_kind_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaCoordPairsByOwnerArchive::_internal_owner_kind() const {
  return owner_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaCoordPairsByOwnerArchive::owner_kind() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaCoordPairsByOwnerArchive.owner_kind)
  return _internal_owner_kind();
}
inline void FormulaCoordPairsByOwnerArchive::_internal_set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_kind_ = value;
}
inline void FormulaCoordPairsByOwnerArchive::set_owner_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_kind(value);
  // @@protoc_insertion_point(field_set:TSCE.FormulaCoordPairsByOwnerArchive.owner_kind)
}

// optional .TSP.UUID owner_uid = 2;
inline bool FormulaCoordPairsByOwnerArchive::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool FormulaCoordPairsByOwnerArchive::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& FormulaCoordPairsByOwnerArchive::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormulaCoordPairsByOwnerArchive::owner_uid() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaCoordPairsByOwnerArchive.owner_uid)
  return _internal_owner_uid();
}
inline void FormulaCoordPairsByOwnerArchive::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaCoordPairsByOwnerArchive.owner_uid)
}
inline ::TSP::UUID* FormulaCoordPairsByOwnerArchive::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormulaCoordPairsByOwnerArchive::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaCoordPairsByOwnerArchive.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormulaCoordPairsByOwnerArchive::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* FormulaCoordPairsByOwnerArchive::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaCoordPairsByOwnerArchive.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void FormulaCoordPairsByOwnerArchive::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaCoordPairsByOwnerArchive.owner_uid)
}

// repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
inline int FormulaCoordPairsByOwnerArchive::_internal_formula_at_coords_size() const {
  return formula_at_coords_.size();
}
inline int FormulaCoordPairsByOwnerArchive::formula_at_coords_size() const {
  return _internal_formula_at_coords_size();
}
inline void FormulaCoordPairsByOwnerArchive::clear_formula_at_coords() {
  formula_at_coords_.Clear();
}
inline ::TSCE::FormulaAtCoordArchive* FormulaCoordPairsByOwnerArchive::mutable_formula_at_coords(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords)
  return formula_at_coords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaAtCoordArchive >*
FormulaCoordPairsByOwnerArchive::mutable_formula_at_coords() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords)
  return &formula_at_coords_;
}
inline const ::TSCE::FormulaAtCoordArchive& FormulaCoordPairsByOwnerArchive::_internal_formula_at_coords(int index) const {
  return formula_at_coords_.Get(index);
}
inline const ::TSCE::FormulaAtCoordArchive& FormulaCoordPairsByOwnerArchive::formula_at_coords(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords)
  return _internal_formula_at_coords(index);
}
inline ::TSCE::FormulaAtCoordArchive* FormulaCoordPairsByOwnerArchive::_internal_add_formula_at_coords() {
  return formula_at_coords_.Add();
}
inline ::TSCE::FormulaAtCoordArchive* FormulaCoordPairsByOwnerArchive::add_formula_at_coords() {
  // @@protoc_insertion_point(field_add:TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords)
  return _internal_add_formula_at_coords();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaAtCoordArchive >&
FormulaCoordPairsByOwnerArchive::formula_at_coords() const {
  // @@protoc_insertion_point(field_list:TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords)
  return formula_at_coords_;
}

// -------------------------------------------------------------------

// FormulasForUndoArchive

// repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
inline int FormulasForUndoArchive::_internal_formulas_for_owner_size() const {
  return formulas_for_owner_.size();
}
inline int FormulasForUndoArchive::formulas_for_owner_size() const {
  return _internal_formulas_for_owner_size();
}
inline void FormulasForUndoArchive::clear_formulas_for_owner() {
  formulas_for_owner_.Clear();
}
inline ::TSCE::FormulaCoordPairsByOwnerArchive* FormulasForUndoArchive::mutable_formulas_for_owner(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulasForUndoArchive.formulas_for_owner)
  return formulas_for_owner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaCoordPairsByOwnerArchive >*
FormulasForUndoArchive::mutable_formulas_for_owner() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.FormulasForUndoArchive.formulas_for_owner)
  return &formulas_for_owner_;
}
inline const ::TSCE::FormulaCoordPairsByOwnerArchive& FormulasForUndoArchive::_internal_formulas_for_owner(int index) const {
  return formulas_for_owner_.Get(index);
}
inline const ::TSCE::FormulaCoordPairsByOwnerArchive& FormulasForUndoArchive::formulas_for_owner(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.FormulasForUndoArchive.formulas_for_owner)
  return _internal_formulas_for_owner(index);
}
inline ::TSCE::FormulaCoordPairsByOwnerArchive* FormulasForUndoArchive::_internal_add_formulas_for_owner() {
  return formulas_for_owner_.Add();
}
inline ::TSCE::FormulaCoordPairsByOwnerArchive* FormulasForUndoArchive::add_formulas_for_owner() {
  // @@protoc_insertion_point(field_add:TSCE.FormulasForUndoArchive.formulas_for_owner)
  return _internal_add_formulas_for_owner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaCoordPairsByOwnerArchive >&
FormulasForUndoArchive::formulas_for_owner() const {
  // @@protoc_insertion_point(field_list:TSCE.FormulasForUndoArchive.formulas_for_owner)
  return formulas_for_owner_;
}

// -------------------------------------------------------------------

// FormulaRewriteCommandArchive

// optional .TSP.Reference table_rewrite_command = 1;
inline bool FormulaRewriteCommandArchive::_internal_has_table_rewrite_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_rewrite_command_ != nullptr);
  return value;
}
inline bool FormulaRewriteCommandArchive::has_table_rewrite_command() const {
  return _internal_has_table_rewrite_command();
}
inline const ::TSP::Reference& FormulaRewriteCommandArchive::_internal_table_rewrite_command() const {
  const ::TSP::Reference* p = table_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaRewriteCommandArchive::table_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  return _internal_table_rewrite_command();
}
inline void FormulaRewriteCommandArchive::unsafe_arena_set_allocated_table_rewrite_command(
    ::TSP::Reference* table_rewrite_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_rewrite_command_);
  }
  table_rewrite_command_ = table_rewrite_command;
  if (table_rewrite_command) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::release_table_rewrite_command() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_rewrite_command_;
  table_rewrite_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::unsafe_arena_release_table_rewrite_command() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_rewrite_command_;
  table_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::_internal_mutable_table_rewrite_command() {
  _has_bits_[0] |= 0x00000001u;
  if (table_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_rewrite_command_ = p;
  }
  return table_rewrite_command_;
}
inline ::TSP::Reference* FormulaRewriteCommandArchive::mutable_table_rewrite_command() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
  return _internal_mutable_table_rewrite_command();
}
inline void FormulaRewriteCommandArchive::set_allocated_table_rewrite_command(::TSP::Reference* table_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_rewrite_command_);
  }
  if (table_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_rewrite_command)->GetArena();
    if (message_arena != submessage_arena) {
      table_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_rewrite_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_rewrite_command_ = table_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteCommandArchive.table_rewrite_command)
}

// optional .TSK.CommandArchive super = 2;
inline bool FormulaRewriteCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FormulaRewriteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& FormulaRewriteCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& FormulaRewriteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCE.FormulaRewriteCommandArchive.super)
  return _internal_super();
}
inline void FormulaRewriteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.FormulaRewriteCommandArchive.super)
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCE.FormulaRewriteCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* FormulaRewriteCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCE.FormulaRewriteCommandArchive.super)
  return _internal_mutable_super();
}
inline void FormulaRewriteCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCE.FormulaRewriteCommandArchive.super)
}

// -------------------------------------------------------------------

// ExtendTableIDHistoryCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ExtendTableIDHistoryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ExtendTableIDHistoryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ExtendTableIDHistoryCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ExtendTableIDHistoryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCE.ExtendTableIDHistoryCommandArchive.super)
  return _internal_super();
}
inline void ExtendTableIDHistoryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.super)
}
inline ::TSK::CommandArchive* ExtendTableIDHistoryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ExtendTableIDHistoryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCE.ExtendTableIDHistoryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ExtendTableIDHistoryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ExtendTableIDHistoryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExtendTableIDHistoryCommandArchive.super)
  return _internal_mutable_super();
}
inline void ExtendTableIDHistoryCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.super)
}

// required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
inline bool ExtendTableIDHistoryCommandArchive::_internal_has_rewrite_spec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rewrite_spec_ != nullptr);
  return value;
}
inline bool ExtendTableIDHistoryCommandArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void ExtendTableIDHistoryCommandArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::FormulaRewriteSpecArchive& ExtendTableIDHistoryCommandArchive::_internal_rewrite_spec() const {
  const ::TSCE::FormulaRewriteSpecArchive* p = rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaRewriteSpecArchive&>(
      ::TSCE::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TSCE::FormulaRewriteSpecArchive& ExtendTableIDHistoryCommandArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TSCE.ExtendTableIDHistoryCommandArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void ExtendTableIDHistoryCommandArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewrite_spec_);
  }
  rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.rewrite_spec)
}
inline ::TSCE::FormulaRewriteSpecArchive* ExtendTableIDHistoryCommandArchive::release_rewrite_spec() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaRewriteSpecArchive* temp = rewrite_spec_;
  rewrite_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* ExtendTableIDHistoryCommandArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TSCE.ExtendTableIDHistoryCommandArchive.rewrite_spec)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FormulaRewriteSpecArchive* temp = rewrite_spec_;
  rewrite_spec_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* ExtendTableIDHistoryCommandArchive::_internal_mutable_rewrite_spec() {
  _has_bits_[0] |= 0x00000002u;
  if (rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaRewriteSpecArchive>(GetArena());
    rewrite_spec_ = p;
  }
  return rewrite_spec_;
}
inline ::TSCE::FormulaRewriteSpecArchive* ExtendTableIDHistoryCommandArchive::mutable_rewrite_spec() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExtendTableIDHistoryCommandArchive.rewrite_spec)
  return _internal_mutable_rewrite_spec();
}
inline void ExtendTableIDHistoryCommandArchive::set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.rewrite_spec)
}

// optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
inline bool ExtendTableIDHistoryCommandArchive::_internal_has_table_uid_history_rollback() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_history_rollback_ != nullptr);
  return value;
}
inline bool ExtendTableIDHistoryCommandArchive::has_table_uid_history_rollback() const {
  return _internal_has_table_uid_history_rollback();
}
inline void ExtendTableIDHistoryCommandArchive::clear_table_uid_history_rollback() {
  if (table_uid_history_rollback_ != nullptr) table_uid_history_rollback_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::RewriteTableUIDInfoArchive& ExtendTableIDHistoryCommandArchive::_internal_table_uid_history_rollback() const {
  const ::TSCE::RewriteTableUIDInfoArchive* p = table_uid_history_rollback_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RewriteTableUIDInfoArchive&>(
      ::TSCE::_RewriteTableUIDInfoArchive_default_instance_);
}
inline const ::TSCE::RewriteTableUIDInfoArchive& ExtendTableIDHistoryCommandArchive::table_uid_history_rollback() const {
  // @@protoc_insertion_point(field_get:TSCE.ExtendTableIDHistoryCommandArchive.table_uid_history_rollback)
  return _internal_table_uid_history_rollback();
}
inline void ExtendTableIDHistoryCommandArchive::unsafe_arena_set_allocated_table_uid_history_rollback(
    ::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_history_rollback_);
  }
  table_uid_history_rollback_ = table_uid_history_rollback;
  if (table_uid_history_rollback) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.table_uid_history_rollback)
}
inline ::TSCE::RewriteTableUIDInfoArchive* ExtendTableIDHistoryCommandArchive::release_table_uid_history_rollback() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = table_uid_history_rollback_;
  table_uid_history_rollback_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* ExtendTableIDHistoryCommandArchive::unsafe_arena_release_table_uid_history_rollback() {
  // @@protoc_insertion_point(field_release:TSCE.ExtendTableIDHistoryCommandArchive.table_uid_history_rollback)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RewriteTableUIDInfoArchive* temp = table_uid_history_rollback_;
  table_uid_history_rollback_ = nullptr;
  return temp;
}
inline ::TSCE::RewriteTableUIDInfoArchive* ExtendTableIDHistoryCommandArchive::_internal_mutable_table_uid_history_rollback() {
  _has_bits_[0] |= 0x00000004u;
  if (table_uid_history_rollback_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RewriteTableUIDInfoArchive>(GetArena());
    table_uid_history_rollback_ = p;
  }
  return table_uid_history_rollback_;
}
inline ::TSCE::RewriteTableUIDInfoArchive* ExtendTableIDHistoryCommandArchive::mutable_table_uid_history_rollback() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExtendTableIDHistoryCommandArchive.table_uid_history_rollback)
  return _internal_mutable_table_uid_history_rollback();
}
inline void ExtendTableIDHistoryCommandArchive::set_allocated_table_uid_history_rollback(::TSCE::RewriteTableUIDInfoArchive* table_uid_history_rollback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_uid_history_rollback_;
  }
  if (table_uid_history_rollback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_uid_history_rollback);
    if (message_arena != submessage_arena) {
      table_uid_history_rollback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid_history_rollback, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_uid_history_rollback_ = table_uid_history_rollback;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExtendTableIDHistoryCommandArchive.table_uid_history_rollback)
}

// -------------------------------------------------------------------

// NumberTrackedReferencePairArchive

// required uint32 number = 1;
inline bool NumberTrackedReferencePairArchive::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberTrackedReferencePairArchive::has_number() const {
  return _internal_has_number();
}
inline void NumberTrackedReferencePairArchive::clear_number() {
  number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberTrackedReferencePairArchive::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberTrackedReferencePairArchive::number() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberTrackedReferencePairArchive.number)
  return _internal_number();
}
inline void NumberTrackedReferencePairArchive::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_ = value;
}
inline void NumberTrackedReferencePairArchive::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberTrackedReferencePairArchive.number)
}

// optional .TSP.Reference tracked_reference = 2;
inline bool NumberTrackedReferencePairArchive::_internal_has_tracked_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tracked_reference_ != nullptr);
  return value;
}
inline bool NumberTrackedReferencePairArchive::has_tracked_reference() const {
  return _internal_has_tracked_reference();
}
inline const ::TSP::Reference& NumberTrackedReferencePairArchive::_internal_tracked_reference() const {
  const ::TSP::Reference* p = tracked_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& NumberTrackedReferencePairArchive::tracked_reference() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  return _internal_tracked_reference();
}
inline void NumberTrackedReferencePairArchive::unsafe_arena_set_allocated_tracked_reference(
    ::TSP::Reference* tracked_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference_);
  }
  tracked_reference_ = tracked_reference;
  if (tracked_reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::release_tracked_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tracked_reference_;
  tracked_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::unsafe_arena_release_tracked_reference() {
  // @@protoc_insertion_point(field_release:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tracked_reference_;
  tracked_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::_internal_mutable_tracked_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (tracked_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tracked_reference_ = p;
  }
  return tracked_reference_;
}
inline ::TSP::Reference* NumberTrackedReferencePairArchive::mutable_tracked_reference() {
  // @@protoc_insertion_point(field_mutable:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
  return _internal_mutable_tracked_reference();
}
inline void NumberTrackedReferencePairArchive::set_allocated_tracked_reference(::TSP::Reference* tracked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference_);
  }
  if (tracked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_reference)->GetArena();
    if (message_arena != submessage_arena) {
      tracked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracked_reference_ = tracked_reference;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NumberTrackedReferencePairArchive.tracked_reference)
}

// -------------------------------------------------------------------

// NumberToTrackedReferenceMapArchive

// repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
inline int NumberToTrackedReferenceMapArchive::_internal_number_tracked_reference_pair_size() const {
  return number_tracked_reference_pair_.size();
}
inline int NumberToTrackedReferenceMapArchive::number_tracked_reference_pair_size() const {
  return _internal_number_tracked_reference_pair_size();
}
inline void NumberToTrackedReferenceMapArchive::clear_number_tracked_reference_pair() {
  number_tracked_reference_pair_.Clear();
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::mutable_number_tracked_reference_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return number_tracked_reference_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >*
NumberToTrackedReferenceMapArchive::mutable_number_tracked_reference_pair() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return &number_tracked_reference_pair_;
}
inline const ::TSCE::NumberTrackedReferencePairArchive& NumberToTrackedReferenceMapArchive::_internal_number_tracked_reference_pair(int index) const {
  return number_tracked_reference_pair_.Get(index);
}
inline const ::TSCE::NumberTrackedReferencePairArchive& NumberToTrackedReferenceMapArchive::number_tracked_reference_pair(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _internal_number_tracked_reference_pair(index);
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::_internal_add_number_tracked_reference_pair() {
  return number_tracked_reference_pair_.Add();
}
inline ::TSCE::NumberTrackedReferencePairArchive* NumberToTrackedReferenceMapArchive::add_number_tracked_reference_pair() {
  // @@protoc_insertion_point(field_add:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return _internal_add_number_tracked_reference_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::NumberTrackedReferencePairArchive >&
NumberToTrackedReferenceMapArchive::number_tracked_reference_pair() const {
  // @@protoc_insertion_point(field_list:TSCE.NumberToTrackedReferenceMapArchive.number_tracked_reference_pair)
  return number_tracked_reference_pair_;
}

// -------------------------------------------------------------------

// TrackedReferencesRewriteCommandArchive

// optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_references_in_reference_tracker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || references_in_reference_tracker_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_references_in_reference_tracker() const {
  return _internal_has_references_in_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::clear_references_in_reference_tracker() {
  if (references_in_reference_tracker_ != nullptr) references_in_reference_tracker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::_internal_references_in_reference_tracker() const {
  const ::TSCE::NumberToTrackedReferenceMapArchive* p = references_in_reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberToTrackedReferenceMapArchive&>(
      ::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_);
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::references_in_reference_tracker() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  return _internal_references_in_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_references_in_reference_tracker(
    ::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(references_in_reference_tracker_);
  }
  references_in_reference_tracker_ = references_in_reference_tracker;
  if (references_in_reference_tracker) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::release_references_in_reference_tracker() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = references_in_reference_tracker_;
  references_in_reference_tracker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_references_in_reference_tracker() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = references_in_reference_tracker_;
  references_in_reference_tracker_ = nullptr;
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_references_in_reference_tracker() {
  _has_bits_[0] |= 0x00000001u;
  if (references_in_reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(GetArena());
    references_in_reference_tracker_ = p;
  }
  return references_in_reference_tracker_;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::mutable_references_in_reference_tracker() {
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
  return _internal_mutable_references_in_reference_tracker();
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_references_in_reference_tracker(::TSCE::NumberToTrackedReferenceMapArchive* references_in_reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete references_in_reference_tracker_;
  }
  if (references_in_reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(references_in_reference_tracker);
    if (message_arena != submessage_arena) {
      references_in_reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, references_in_reference_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  references_in_reference_tracker_ = references_in_reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.references_in_reference_tracker)
}

// optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_original_tracked_reference_copies() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || original_tracked_reference_copies_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_original_tracked_reference_copies() const {
  return _internal_has_original_tracked_reference_copies();
}
inline void TrackedReferencesRewriteCommandArchive::clear_original_tracked_reference_copies() {
  if (original_tracked_reference_copies_ != nullptr) original_tracked_reference_copies_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::_internal_original_tracked_reference_copies() const {
  const ::TSCE::NumberToTrackedReferenceMapArchive* p = original_tracked_reference_copies_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberToTrackedReferenceMapArchive&>(
      ::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_);
}
inline const ::TSCE::NumberToTrackedReferenceMapArchive& TrackedReferencesRewriteCommandArchive::original_tracked_reference_copies() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  return _internal_original_tracked_reference_copies();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_original_tracked_reference_copies(
    ::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_tracked_reference_copies_);
  }
  original_tracked_reference_copies_ = original_tracked_reference_copies;
  if (original_tracked_reference_copies) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::release_original_tracked_reference_copies() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = original_tracked_reference_copies_;
  original_tracked_reference_copies_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_original_tracked_reference_copies() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::NumberToTrackedReferenceMapArchive* temp = original_tracked_reference_copies_;
  original_tracked_reference_copies_ = nullptr;
  return temp;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_original_tracked_reference_copies() {
  _has_bits_[0] |= 0x00000002u;
  if (original_tracked_reference_copies_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberToTrackedReferenceMapArchive>(GetArena());
    original_tracked_reference_copies_ = p;
  }
  return original_tracked_reference_copies_;
}
inline ::TSCE::NumberToTrackedReferenceMapArchive* TrackedReferencesRewriteCommandArchive::mutable_original_tracked_reference_copies() {
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
  return _internal_mutable_original_tracked_reference_copies();
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_original_tracked_reference_copies(::TSCE::NumberToTrackedReferenceMapArchive* original_tracked_reference_copies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_tracked_reference_copies_;
  }
  if (original_tracked_reference_copies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_tracked_reference_copies);
    if (message_arena != submessage_arena) {
      original_tracked_reference_copies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_tracked_reference_copies, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_tracked_reference_copies_ = original_tracked_reference_copies;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.original_tracked_reference_copies)
}

// optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_rewrite_spec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rewrite_spec_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_rewrite_spec() const {
  return _internal_has_rewrite_spec();
}
inline void TrackedReferencesRewriteCommandArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::FormulaRewriteSpecArchive& TrackedReferencesRewriteCommandArchive::_internal_rewrite_spec() const {
  const ::TSCE::FormulaRewriteSpecArchive* p = rewrite_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaRewriteSpecArchive&>(
      ::TSCE::_FormulaRewriteSpecArchive_default_instance_);
}
inline const ::TSCE::FormulaRewriteSpecArchive& TrackedReferencesRewriteCommandArchive::rewrite_spec() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  return _internal_rewrite_spec();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_rewrite_spec(
    ::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewrite_spec_);
  }
  rewrite_spec_ = rewrite_spec;
  if (rewrite_spec) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::release_rewrite_spec() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaRewriteSpecArchive* temp = rewrite_spec_;
  rewrite_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_rewrite_spec() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaRewriteSpecArchive* temp = rewrite_spec_;
  rewrite_spec_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_rewrite_spec() {
  _has_bits_[0] |= 0x00000004u;
  if (rewrite_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaRewriteSpecArchive>(GetArena());
    rewrite_spec_ = p;
  }
  return rewrite_spec_;
}
inline ::TSCE::FormulaRewriteSpecArchive* TrackedReferencesRewriteCommandArchive::mutable_rewrite_spec() {
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
  return _internal_mutable_rewrite_spec();
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_rewrite_spec(::TSCE::FormulaRewriteSpecArchive* rewrite_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rewrite_spec_;
  }
  if (rewrite_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rewrite_spec);
    if (message_arena != submessage_arena) {
      rewrite_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewrite_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rewrite_spec_ = rewrite_spec;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.rewrite_spec)
}

// required .TSK.CommandArchive super = 4;
inline bool TrackedReferencesRewriteCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TrackedReferencesRewriteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TrackedReferencesRewriteCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TrackedReferencesRewriteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferencesRewriteCommandArchive.super)
  return _internal_super();
}
inline void TrackedReferencesRewriteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.super)
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferencesRewriteCommandArchive.super)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000008u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* TrackedReferencesRewriteCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferencesRewriteCommandArchive.super)
  return _internal_mutable_super();
}
inline void TrackedReferencesRewriteCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferencesRewriteCommandArchive.super)
}

// -------------------------------------------------------------------

// TrackedReferenceArchive

// required .TSCE.ASTNodeArrayArchive ast = 1;
inline bool TrackedReferenceArchive::_internal_has_ast() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ast_ != nullptr);
  return value;
}
inline bool TrackedReferenceArchive::has_ast() const {
  return _internal_has_ast();
}
inline void TrackedReferenceArchive::clear_ast() {
  if (ast_ != nullptr) ast_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive& TrackedReferenceArchive::_internal_ast() const {
  const ::TSCE::ASTNodeArrayArchive* p = ast_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& TrackedReferenceArchive::ast() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferenceArchive.ast)
  return _internal_ast();
}
inline void TrackedReferenceArchive::unsafe_arena_set_allocated_ast(
    ::TSCE::ASTNodeArrayArchive* ast) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_);
  }
  ast_ = ast;
  if (ast) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.TrackedReferenceArchive.ast)
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::release_ast() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_;
  ast_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::unsafe_arena_release_ast() {
  // @@protoc_insertion_point(field_release:TSCE.TrackedReferenceArchive.ast)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_;
  ast_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::_internal_mutable_ast() {
  _has_bits_[0] |= 0x00000001u;
  if (ast_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArena());
    ast_ = p;
  }
  return ast_;
}
inline ::TSCE::ASTNodeArrayArchive* TrackedReferenceArchive::mutable_ast() {
  // @@protoc_insertion_point(field_mutable:TSCE.TrackedReferenceArchive.ast)
  return _internal_mutable_ast();
}
inline void TrackedReferenceArchive::set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_;
  }
  if (ast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast);
    if (message_arena != submessage_arena) {
      ast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_ = ast;
  // @@protoc_insertion_point(field_set_allocated:TSCE.TrackedReferenceArchive.ast)
}

// required uint32 formula_id = 2;
inline bool TrackedReferenceArchive::_internal_has_formula_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackedReferenceArchive::has_formula_id() const {
  return _internal_has_formula_id();
}
inline void TrackedReferenceArchive::clear_formula_id() {
  formula_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackedReferenceArchive::_internal_formula_id() const {
  return formula_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackedReferenceArchive::formula_id() const {
  // @@protoc_insertion_point(field_get:TSCE.TrackedReferenceArchive.formula_id)
  return _internal_formula_id();
}
inline void TrackedReferenceArchive::_internal_set_formula_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  formula_id_ = value;
}
inline void TrackedReferenceArchive::set_formula_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_id(value);
  // @@protoc_insertion_point(field_set:TSCE.TrackedReferenceArchive.formula_id)
}

// -------------------------------------------------------------------

// ExpandedTrackedReferenceArchive

// required .TSCE.ASTNodeArrayArchive ast = 1;
inline bool ExpandedTrackedReferenceArchive::_internal_has_ast() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ast_ != nullptr);
  return value;
}
inline bool ExpandedTrackedReferenceArchive::has_ast() const {
  return _internal_has_ast();
}
inline void ExpandedTrackedReferenceArchive::clear_ast() {
  if (ast_ != nullptr) ast_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::ASTNodeArrayArchive& ExpandedTrackedReferenceArchive::_internal_ast() const {
  const ::TSCE::ASTNodeArrayArchive* p = ast_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ASTNodeArrayArchive&>(
      ::TSCE::_ASTNodeArrayArchive_default_instance_);
}
inline const ::TSCE::ASTNodeArrayArchive& ExpandedTrackedReferenceArchive::ast() const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedTrackedReferenceArchive.ast)
  return _internal_ast();
}
inline void ExpandedTrackedReferenceArchive::unsafe_arena_set_allocated_ast(
    ::TSCE::ASTNodeArrayArchive* ast) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_);
  }
  ast_ = ast;
  if (ast) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ExpandedTrackedReferenceArchive.ast)
}
inline ::TSCE::ASTNodeArrayArchive* ExpandedTrackedReferenceArchive::release_ast() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_;
  ast_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ExpandedTrackedReferenceArchive::unsafe_arena_release_ast() {
  // @@protoc_insertion_point(field_release:TSCE.ExpandedTrackedReferenceArchive.ast)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::ASTNodeArrayArchive* temp = ast_;
  ast_ = nullptr;
  return temp;
}
inline ::TSCE::ASTNodeArrayArchive* ExpandedTrackedReferenceArchive::_internal_mutable_ast() {
  _has_bits_[0] |= 0x00000001u;
  if (ast_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ASTNodeArrayArchive>(GetArena());
    ast_ = p;
  }
  return ast_;
}
inline ::TSCE::ASTNodeArrayArchive* ExpandedTrackedReferenceArchive::mutable_ast() {
  // @@protoc_insertion_point(field_mutable:TSCE.ExpandedTrackedReferenceArchive.ast)
  return _internal_mutable_ast();
}
inline void ExpandedTrackedReferenceArchive::set_allocated_ast(::TSCE::ASTNodeArrayArchive* ast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ast_;
  }
  if (ast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ast);
    if (message_arena != submessage_arena) {
      ast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ast_ = ast;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ExpandedTrackedReferenceArchive.ast)
}

// required uint32 formula_column = 2;
inline bool ExpandedTrackedReferenceArchive::_internal_has_formula_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpandedTrackedReferenceArchive::has_formula_column() const {
  return _internal_has_formula_column();
}
inline void ExpandedTrackedReferenceArchive::clear_formula_column() {
  formula_column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTrackedReferenceArchive::_internal_formula_column() const {
  return formula_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTrackedReferenceArchive::formula_column() const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedTrackedReferenceArchive.formula_column)
  return _internal_formula_column();
}
inline void ExpandedTrackedReferenceArchive::_internal_set_formula_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  formula_column_ = value;
}
inline void ExpandedTrackedReferenceArchive::set_formula_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_column(value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedTrackedReferenceArchive.formula_column)
}

// required uint32 formula_row = 3;
inline bool ExpandedTrackedReferenceArchive::_internal_has_formula_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExpandedTrackedReferenceArchive::has_formula_row() const {
  return _internal_has_formula_row();
}
inline void ExpandedTrackedReferenceArchive::clear_formula_row() {
  formula_row_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTrackedReferenceArchive::_internal_formula_row() const {
  return formula_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTrackedReferenceArchive::formula_row() const {
  // @@protoc_insertion_point(field_get:TSCE.ExpandedTrackedReferenceArchive.formula_row)
  return _internal_formula_row();
}
inline void ExpandedTrackedReferenceArchive::_internal_set_formula_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  formula_row_ = value;
}
inline void ExpandedTrackedReferenceArchive::set_formula_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_row(value);
  // @@protoc_insertion_point(field_set:TSCE.ExpandedTrackedReferenceArchive.formula_row)
}

// -------------------------------------------------------------------

// ReferenceTrackerArchive

// required .TSP.CFUUIDArchive uuid = 1;
inline bool ReferenceTrackerArchive::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool ReferenceTrackerArchive::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::CFUUIDArchive& ReferenceTrackerArchive::_internal_uuid() const {
  const ::TSP::CFUUIDArchive* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& ReferenceTrackerArchive::uuid() const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.uuid)
  return _internal_uuid();
}
inline void ReferenceTrackerArchive::unsafe_arena_set_allocated_uuid(
    ::TSP::CFUUIDArchive* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.ReferenceTrackerArchive.uuid)
}
inline ::TSP::CFUUIDArchive* ReferenceTrackerArchive::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* ReferenceTrackerArchive::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCE.ReferenceTrackerArchive.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* ReferenceTrackerArchive::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::CFUUIDArchive* ReferenceTrackerArchive::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.uuid)
  return _internal_mutable_uuid();
}
inline void ReferenceTrackerArchive::set_allocated_uuid(::TSP::CFUUIDArchive* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCE.ReferenceTrackerArchive.uuid)
}

// repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
inline int ReferenceTrackerArchive::_internal_tracked_reference_size() const {
  return tracked_reference_.size();
}
inline int ReferenceTrackerArchive::tracked_reference_size() const {
  return _internal_tracked_reference_size();
}
inline ::TSP::Reference* ReferenceTrackerArchive::mutable_tracked_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.tracked_reference)
  return tracked_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ReferenceTrackerArchive::mutable_tracked_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferenceTrackerArchive.tracked_reference)
  return &tracked_reference_;
}
inline const ::TSP::Reference& ReferenceTrackerArchive::_internal_tracked_reference(int index) const {
  return tracked_reference_.Get(index);
}
inline const ::TSP::Reference& ReferenceTrackerArchive::tracked_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _internal_tracked_reference(index);
}
inline ::TSP::Reference* ReferenceTrackerArchive::_internal_add_tracked_reference() {
  return tracked_reference_.Add();
}
inline ::TSP::Reference* ReferenceTrackerArchive::add_tracked_reference() {
  // @@protoc_insertion_point(field_add:TSCE.ReferenceTrackerArchive.tracked_reference)
  return _internal_add_tracked_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ReferenceTrackerArchive::tracked_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferenceTrackerArchive.tracked_reference)
  return tracked_reference_;
}

// repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
inline int ReferenceTrackerArchive::_internal_contained_tracked_reference_size() const {
  return contained_tracked_reference_.size();
}
inline int ReferenceTrackerArchive::contained_tracked_reference_size() const {
  return _internal_contained_tracked_reference_size();
}
inline void ReferenceTrackerArchive::clear_contained_tracked_reference() {
  contained_tracked_reference_.Clear();
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::mutable_contained_tracked_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return contained_tracked_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >*
ReferenceTrackerArchive::mutable_contained_tracked_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return &contained_tracked_reference_;
}
inline const ::TSCE::TrackedReferenceArchive& ReferenceTrackerArchive::_internal_contained_tracked_reference(int index) const {
  return contained_tracked_reference_.Get(index);
}
inline const ::TSCE::TrackedReferenceArchive& ReferenceTrackerArchive::contained_tracked_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _internal_contained_tracked_reference(index);
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::_internal_add_contained_tracked_reference() {
  return contained_tracked_reference_.Add();
}
inline ::TSCE::TrackedReferenceArchive* ReferenceTrackerArchive::add_contained_tracked_reference() {
  // @@protoc_insertion_point(field_add:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return _internal_add_contained_tracked_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::TrackedReferenceArchive >&
ReferenceTrackerArchive::contained_tracked_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferenceTrackerArchive.contained_tracked_reference)
  return contained_tracked_reference_;
}

// repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
inline int ReferenceTrackerArchive::_internal_contained_expanded_tracked_reference_size() const {
  return contained_expanded_tracked_reference_.size();
}
inline int ReferenceTrackerArchive::contained_expanded_tracked_reference_size() const {
  return _internal_contained_expanded_tracked_reference_size();
}
inline void ReferenceTrackerArchive::clear_contained_expanded_tracked_reference() {
  contained_expanded_tracked_reference_.Clear();
}
inline ::TSCE::ExpandedTrackedReferenceArchive* ReferenceTrackerArchive::mutable_contained_expanded_tracked_reference(int index) {
  // @@protoc_insertion_point(field_mutable:TSCE.ReferenceTrackerArchive.contained_expanded_tracked_reference)
  return contained_expanded_tracked_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedTrackedReferenceArchive >*
ReferenceTrackerArchive::mutable_contained_expanded_tracked_reference() {
  // @@protoc_insertion_point(field_mutable_list:TSCE.ReferenceTrackerArchive.contained_expanded_tracked_reference)
  return &contained_expanded_tracked_reference_;
}
inline const ::TSCE::ExpandedTrackedReferenceArchive& ReferenceTrackerArchive::_internal_contained_expanded_tracked_reference(int index) const {
  return contained_expanded_tracked_reference_.Get(index);
}
inline const ::TSCE::ExpandedTrackedReferenceArchive& ReferenceTrackerArchive::contained_expanded_tracked_reference(int index) const {
  // @@protoc_insertion_point(field_get:TSCE.ReferenceTrackerArchive.contained_expanded_tracked_reference)
  return _internal_contained_expanded_tracked_reference(index);
}
inline ::TSCE::ExpandedTrackedReferenceArchive* ReferenceTrackerArchive::_internal_add_contained_expanded_tracked_reference() {
  return contained_expanded_tracked_reference_.Add();
}
inline ::TSCE::ExpandedTrackedReferenceArchive* ReferenceTrackerArchive::add_contained_expanded_tracked_reference() {
  // @@protoc_insertion_point(field_add:TSCE.ReferenceTrackerArchive.contained_expanded_tracked_reference)
  return _internal_add_contained_expanded_tracked_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::ExpandedTrackedReferenceArchive >&
ReferenceTrackerArchive::contained_expanded_tracked_reference() const {
  // @@protoc_insertion_point(field_list:TSCE.ReferenceTrackerArchive.contained_expanded_tracked_reference)
  return contained_expanded_tracked_reference_;
}

// -------------------------------------------------------------------

// BooleanCellValueArchive

// required bool value = 1;
inline bool BooleanCellValueArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BooleanCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void BooleanCellValueArchive::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BooleanCellValueArchive::_internal_value() const {
  return value_;
}
inline bool BooleanCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.BooleanCellValueArchive.value)
  return _internal_value();
}
inline void BooleanCellValueArchive::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void BooleanCellValueArchive::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.BooleanCellValueArchive.value)
}

// optional .TSK.FormatStructArchive format = 2;
inline bool BooleanCellValueArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool BooleanCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& BooleanCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& BooleanCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.BooleanCellValueArchive.format)
  return _internal_format();
}
inline void BooleanCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.BooleanCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* BooleanCellValueArchive::release_format() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* BooleanCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.BooleanCellValueArchive.format)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* BooleanCellValueArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000001u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::TSK::FormatStructArchive* BooleanCellValueArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.BooleanCellValueArchive.format)
  return _internal_mutable_format();
}
inline void BooleanCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.BooleanCellValueArchive.format)
}

// optional bool format_is_explicit = 3 [default = false];
inline bool BooleanCellValueArchive::_internal_has_format_is_explicit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BooleanCellValueArchive::has_format_is_explicit() const {
  return _internal_has_format_is_explicit();
}
inline void BooleanCellValueArchive::clear_format_is_explicit() {
  format_is_explicit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BooleanCellValueArchive::_internal_format_is_explicit() const {
  return format_is_explicit_;
}
inline bool BooleanCellValueArchive::format_is_explicit() const {
  // @@protoc_insertion_point(field_get:TSCE.BooleanCellValueArchive.format_is_explicit)
  return _internal_format_is_explicit();
}
inline void BooleanCellValueArchive::_internal_set_format_is_explicit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  format_is_explicit_ = value;
}
inline void BooleanCellValueArchive::set_format_is_explicit(bool value) {
  _internal_set_format_is_explicit(value);
  // @@protoc_insertion_point(field_set:TSCE.BooleanCellValueArchive.format_is_explicit)
}

// -------------------------------------------------------------------

// DateCellValueArchive

// required double value = 1;
inline bool DateCellValueArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DateCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void DateCellValueArchive::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DateCellValueArchive::_internal_value() const {
  return value_;
}
inline double DateCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.value)
  return _internal_value();
}
inline void DateCellValueArchive::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void DateCellValueArchive::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.DateCellValueArchive.value)
}

// required .TSK.FormatStructArchive format = 2;
inline bool DateCellValueArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool DateCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& DateCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& DateCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.format)
  return _internal_format();
}
inline void DateCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.DateCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::release_format() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.DateCellValueArchive.format)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000001u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::TSK::FormatStructArchive* DateCellValueArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.DateCellValueArchive.format)
  return _internal_mutable_format();
}
inline void DateCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.DateCellValueArchive.format)
}

// optional bool format_is_implicit = 3 [deprecated = true];
inline bool DateCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DateCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void DateCellValueArchive::clear_format_is_implicit() {
  format_is_implicit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DateCellValueArchive::_internal_format_is_implicit() const {
  return format_is_implicit_;
}
inline bool DateCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void DateCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  format_is_implicit_ = value;
}
inline void DateCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.DateCellValueArchive.format_is_implicit)
}

// optional bool format_is_explicit = 4 [default = false];
inline bool DateCellValueArchive::_internal_has_format_is_explicit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DateCellValueArchive::has_format_is_explicit() const {
  return _internal_has_format_is_explicit();
}
inline void DateCellValueArchive::clear_format_is_explicit() {
  format_is_explicit_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DateCellValueArchive::_internal_format_is_explicit() const {
  return format_is_explicit_;
}
inline bool DateCellValueArchive::format_is_explicit() const {
  // @@protoc_insertion_point(field_get:TSCE.DateCellValueArchive.format_is_explicit)
  return _internal_format_is_explicit();
}
inline void DateCellValueArchive::_internal_set_format_is_explicit(bool value) {
  _has_bits_[0] |= 0x00000008u;
  format_is_explicit_ = value;
}
inline void DateCellValueArchive::set_format_is_explicit(bool value) {
  _internal_set_format_is_explicit(value);
  // @@protoc_insertion_point(field_set:TSCE.DateCellValueArchive.format_is_explicit)
}

// -------------------------------------------------------------------

// NumberCellValueArchive

// optional double value = 1;
inline bool NumberCellValueArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void NumberCellValueArchive::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double NumberCellValueArchive::_internal_value() const {
  return value_;
}
inline double NumberCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.value)
  return _internal_value();
}
inline void NumberCellValueArchive::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void NumberCellValueArchive::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.value)
}

// optional int32 unit_index = 2;
inline bool NumberCellValueArchive::_internal_has_unit_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_unit_index() const {
  return _internal_has_unit_index();
}
inline void NumberCellValueArchive::clear_unit_index() {
  unit_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NumberCellValueArchive::_internal_unit_index() const {
  return unit_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NumberCellValueArchive::unit_index() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.unit_index)
  return _internal_unit_index();
}
inline void NumberCellValueArchive::_internal_set_unit_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  unit_index_ = value;
}
inline void NumberCellValueArchive::set_unit_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_index(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.unit_index)
}

// optional string currency_code = 5;
inline bool NumberCellValueArchive::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void NumberCellValueArchive::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NumberCellValueArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NumberCellValueArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.currency_code)
}
inline std::string* NumberCellValueArchive::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:TSCE.NumberCellValueArchive.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& NumberCellValueArchive::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void NumberCellValueArchive::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NumberCellValueArchive::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000001u;
  return currency_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NumberCellValueArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSCE.NumberCellValueArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currency_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NumberCellValueArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.NumberCellValueArchive.currency_code)
}

// required .TSK.FormatStructArchive format = 3;
inline bool NumberCellValueArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool NumberCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& NumberCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& NumberCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.format)
  return _internal_format();
}
inline void NumberCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.NumberCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::release_format() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.NumberCellValueArchive.format)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000002u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::TSK::FormatStructArchive* NumberCellValueArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.NumberCellValueArchive.format)
  return _internal_mutable_format();
}
inline void NumberCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.NumberCellValueArchive.format)
}

// optional bool format_is_implicit = 4 [deprecated = true];
inline bool NumberCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void NumberCellValueArchive::clear_format_is_implicit() {
  format_is_implicit_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NumberCellValueArchive::_internal_format_is_implicit() const {
  return format_is_implicit_;
}
inline bool NumberCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void NumberCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _has_bits_[0] |= 0x00000010u;
  format_is_implicit_ = value;
}
inline void NumberCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.format_is_implicit)
}

// optional bool format_is_explicit = 6 [default = false];
inline bool NumberCellValueArchive::_internal_has_format_is_explicit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_format_is_explicit() const {
  return _internal_has_format_is_explicit();
}
inline void NumberCellValueArchive::clear_format_is_explicit() {
  format_is_explicit_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool NumberCellValueArchive::_internal_format_is_explicit() const {
  return format_is_explicit_;
}
inline bool NumberCellValueArchive::format_is_explicit() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.format_is_explicit)
  return _internal_format_is_explicit();
}
inline void NumberCellValueArchive::_internal_set_format_is_explicit(bool value) {
  _has_bits_[0] |= 0x00000020u;
  format_is_explicit_ = value;
}
inline void NumberCellValueArchive::set_format_is_explicit(bool value) {
  _internal_set_format_is_explicit(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.format_is_explicit)
}

// optional uint64 decimal_low = 7;
inline bool NumberCellValueArchive::_internal_has_decimal_low() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_decimal_low() const {
  return _internal_has_decimal_low();
}
inline void NumberCellValueArchive::clear_decimal_low() {
  decimal_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberCellValueArchive::_internal_decimal_low() const {
  return decimal_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberCellValueArchive::decimal_low() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.decimal_low)
  return _internal_decimal_low();
}
inline void NumberCellValueArchive::_internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  decimal_low_ = value;
}
inline void NumberCellValueArchive::set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_low(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.decimal_low)
}

// optional uint64 decimal_high = 8;
inline bool NumberCellValueArchive::_internal_has_decimal_high() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NumberCellValueArchive::has_decimal_high() const {
  return _internal_has_decimal_high();
}
inline void NumberCellValueArchive::clear_decimal_high() {
  decimal_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberCellValueArchive::_internal_decimal_high() const {
  return decimal_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberCellValueArchive::decimal_high() const {
  // @@protoc_insertion_point(field_get:TSCE.NumberCellValueArchive.decimal_high)
  return _internal_decimal_high();
}
inline void NumberCellValueArchive::_internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  decimal_high_ = value;
}
inline void NumberCellValueArchive::set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_high(value);
  // @@protoc_insertion_point(field_set:TSCE.NumberCellValueArchive.decimal_high)
}

// -------------------------------------------------------------------

// StringCellValueArchive

// required string value = 1;
inline bool StringCellValueArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_value() const {
  return _internal_has_value();
}
inline void StringCellValueArchive::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringCellValueArchive::value() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StringCellValueArchive::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.value)
}
inline std::string* StringCellValueArchive::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.StringCellValueArchive.value)
  return _internal_mutable_value();
}
inline const std::string& StringCellValueArchive::_internal_value() const {
  return value_.Get();
}
inline void StringCellValueArchive::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StringCellValueArchive::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringCellValueArchive::release_value() {
  // @@protoc_insertion_point(field_release:TSCE.StringCellValueArchive.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringCellValueArchive::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.StringCellValueArchive.value)
}

// required .TSK.FormatStructArchive format = 2;
inline bool StringCellValueArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool StringCellValueArchive::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& StringCellValueArchive::_internal_format() const {
  const ::TSK::FormatStructArchive* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& StringCellValueArchive::format() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.format)
  return _internal_format();
}
inline void StringCellValueArchive::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.StringCellValueArchive.format)
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::release_format() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TSCE.StringCellValueArchive.format)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000002u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::TSK::FormatStructArchive* StringCellValueArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TSCE.StringCellValueArchive.format)
  return _internal_mutable_format();
}
inline void StringCellValueArchive::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TSCE.StringCellValueArchive.format)
}

// optional bool format_is_implicit = 3 [deprecated = true];
inline bool StringCellValueArchive::_internal_has_format_is_implicit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_format_is_implicit() const {
  return _internal_has_format_is_implicit();
}
inline void StringCellValueArchive::clear_format_is_implicit() {
  format_is_implicit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StringCellValueArchive::_internal_format_is_implicit() const {
  return format_is_implicit_;
}
inline bool StringCellValueArchive::format_is_implicit() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.format_is_implicit)
  return _internal_format_is_implicit();
}
inline void StringCellValueArchive::_internal_set_format_is_implicit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  format_is_implicit_ = value;
}
inline void StringCellValueArchive::set_format_is_implicit(bool value) {
  _internal_set_format_is_implicit(value);
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.format_is_implicit)
}

// optional bool format_is_explicit = 4 [default = false];
inline bool StringCellValueArchive::_internal_has_format_is_explicit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_format_is_explicit() const {
  return _internal_has_format_is_explicit();
}
inline void StringCellValueArchive::clear_format_is_explicit() {
  format_is_explicit_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool StringCellValueArchive::_internal_format_is_explicit() const {
  return format_is_explicit_;
}
inline bool StringCellValueArchive::format_is_explicit() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.format_is_explicit)
  return _internal_format_is_explicit();
}
inline void StringCellValueArchive::_internal_set_format_is_explicit(bool value) {
  _has_bits_[0] |= 0x00000008u;
  format_is_explicit_ = value;
}
inline void StringCellValueArchive::set_format_is_explicit(bool value) {
  _internal_set_format_is_explicit(value);
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.format_is_explicit)
}

// optional bool is_regex = 5 [default = false];
inline bool StringCellValueArchive::_internal_has_is_regex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_is_regex() const {
  return _internal_has_is_regex();
}
inline void StringCellValueArchive::clear_is_regex() {
  is_regex_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool StringCellValueArchive::_internal_is_regex() const {
  return is_regex_;
}
inline bool StringCellValueArchive::is_regex() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.is_regex)
  return _internal_is_regex();
}
inline void StringCellValueArchive::_internal_set_is_regex(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_regex_ = value;
}
inline void StringCellValueArchive::set_is_regex(bool value) {
  _internal_set_is_regex(value);
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.is_regex)
}

// optional bool is_case_sensitive_regex = 6 [default = false];
inline bool StringCellValueArchive::_internal_has_is_case_sensitive_regex() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StringCellValueArchive::has_is_case_sensitive_regex() const {
  return _internal_has_is_case_sensitive_regex();
}
inline void StringCellValueArchive::clear_is_case_sensitive_regex() {
  is_case_sensitive_regex_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StringCellValueArchive::_internal_is_case_sensitive_regex() const {
  return is_case_sensitive_regex_;
}
inline bool StringCellValueArchive::is_case_sensitive_regex() const {
  // @@protoc_insertion_point(field_get:TSCE.StringCellValueArchive.is_case_sensitive_regex)
  return _internal_is_case_sensitive_regex();
}
inline void StringCellValueArchive::_internal_set_is_case_sensitive_regex(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_case_sensitive_regex_ = value;
}
inline void StringCellValueArchive::set_is_case_sensitive_regex(bool value) {
  _internal_set_is_case_sensitive_regex(value);
  // @@protoc_insertion_point(field_set:TSCE.StringCellValueArchive.is_case_sensitive_regex)
}

// -------------------------------------------------------------------

// ErrorCellValueArchive

// required .TSCE.ErrorCellValueArchive.ErrorType error_type = 1;
inline bool ErrorCellValueArchive::_internal_has_error_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ErrorCellValueArchive::has_error_type() const {
  return _internal_has_error_type();
}
inline void ErrorCellValueArchive::clear_error_type() {
  error_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSCE::ErrorCellValueArchive_ErrorType ErrorCellValueArchive::_internal_error_type() const {
  return static_cast< ::TSCE::ErrorCellValueArchive_ErrorType >(error_type_);
}
inline ::TSCE::ErrorCellValueArchive_ErrorType ErrorCellValueArchive::error_type() const {
  // @@protoc_insertion_point(field_get:TSCE.ErrorCellValueArchive.error_type)
  return _internal_error_type();
}
inline void ErrorCellValueArchive::_internal_set_error_type(::TSCE::ErrorCellValueArchive_ErrorType value) {
  assert(::TSCE::ErrorCellValueArchive_ErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  error_type_ = value;
}
inline void ErrorCellValueArchive::set_error_type(::TSCE::ErrorCellValueArchive_ErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:TSCE.ErrorCellValueArchive.error_type)
}

// optional int32 extra_info_int = 3;
inline bool ErrorCellValueArchive::_internal_has_extra_info_int() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorCellValueArchive::has_extra_info_int() const {
  return _internal_has_extra_info_int();
}
inline void ErrorCellValueArchive::clear_extra_info_int() {
  extra_info_int_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorCellValueArchive::_internal_extra_info_int() const {
  return extra_info_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorCellValueArchive::extra_info_int() const {
  // @@protoc_insertion_point(field_get:TSCE.ErrorCellValueArchive.extra_info_int)
  return _internal_extra_info_int();
}
inline void ErrorCellValueArchive::_internal_set_extra_info_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  extra_info_int_ = value;
}
inline void ErrorCellValueArchive::set_extra_info_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_info_int(value);
  // @@protoc_insertion_point(field_set:TSCE.ErrorCellValueArchive.extra_info_int)
}

// optional string extra_info_string = 4;
inline bool ErrorCellValueArchive::_internal_has_extra_info_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorCellValueArchive::has_extra_info_string() const {
  return _internal_has_extra_info_string();
}
inline void ErrorCellValueArchive::clear_extra_info_string() {
  extra_info_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorCellValueArchive::extra_info_string() const {
  // @@protoc_insertion_point(field_get:TSCE.ErrorCellValueArchive.extra_info_string)
  return _internal_extra_info_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ErrorCellValueArchive::set_extra_info_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 extra_info_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCE.ErrorCellValueArchive.extra_info_string)
}
inline std::string* ErrorCellValueArchive::mutable_extra_info_string() {
  // @@protoc_insertion_point(field_mutable:TSCE.ErrorCellValueArchive.extra_info_string)
  return _internal_mutable_extra_info_string();
}
inline const std::string& ErrorCellValueArchive::_internal_extra_info_string() const {
  return extra_info_string_.Get();
}
inline void ErrorCellValueArchive::_internal_set_extra_info_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extra_info_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ErrorCellValueArchive::_internal_mutable_extra_info_string() {
  _has_bits_[0] |= 0x00000001u;
  return extra_info_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorCellValueArchive::release_extra_info_string() {
  // @@protoc_insertion_point(field_release:TSCE.ErrorCellValueArchive.extra_info_string)
  if (!_internal_has_extra_info_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extra_info_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorCellValueArchive::set_allocated_extra_info_string(std::string* extra_info_string) {
  if (extra_info_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extra_info_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_info_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCE.ErrorCellValueArchive.extra_info_string)
}

// optional double extra_info_double = 5;
inline bool ErrorCellValueArchive::_internal_has_extra_info_double() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorCellValueArchive::has_extra_info_double() const {
  return _internal_has_extra_info_double();
}
inline void ErrorCellValueArchive::clear_extra_info_double() {
  extra_info_double_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ErrorCellValueArchive::_internal_extra_info_double() const {
  return extra_info_double_;
}
inline double ErrorCellValueArchive::extra_info_double() const {
  // @@protoc_insertion_point(field_get:TSCE.ErrorCellValueArchive.extra_info_double)
  return _internal_extra_info_double();
}
inline void ErrorCellValueArchive::_internal_set_extra_info_double(double value) {
  _has_bits_[0] |= 0x00000002u;
  extra_info_double_ = value;
}
inline void ErrorCellValueArchive::set_extra_info_double(double value) {
  _internal_set_extra_info_double(value);
  // @@protoc_insertion_point(field_set:TSCE.ErrorCellValueArchive.extra_info_double)
}

// -------------------------------------------------------------------

// CellValueArchive

// required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
inline bool CellValueArchive::_internal_has_cell_value_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellValueArchive::has_cell_value_type() const {
  return _internal_has_cell_value_type();
}
inline void CellValueArchive::clear_cell_value_type() {
  cell_value_type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSCE::CellValueArchive_CellValueType CellValueArchive::_internal_cell_value_type() const {
  return static_cast< ::TSCE::CellValueArchive_CellValueType >(cell_value_type_);
}
inline ::TSCE::CellValueArchive_CellValueType CellValueArchive::cell_value_type() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.cell_value_type)
  return _internal_cell_value_type();
}
inline void CellValueArchive::_internal_set_cell_value_type(::TSCE::CellValueArchive_CellValueType value) {
  assert(::TSCE::CellValueArchive_CellValueType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cell_value_type_ = value;
}
inline void CellValueArchive::set_cell_value_type(::TSCE::CellValueArchive_CellValueType value) {
  _internal_set_cell_value_type(value);
  // @@protoc_insertion_point(field_set:TSCE.CellValueArchive.cell_value_type)
}

// optional .TSCE.BooleanCellValueArchive boolean_value = 2;
inline bool CellValueArchive::_internal_has_boolean_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || boolean_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline void CellValueArchive::clear_boolean_value() {
  if (boolean_value_ != nullptr) boolean_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCE::BooleanCellValueArchive& CellValueArchive::_internal_boolean_value() const {
  const ::TSCE::BooleanCellValueArchive* p = boolean_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::BooleanCellValueArchive&>(
      ::TSCE::_BooleanCellValueArchive_default_instance_);
}
inline const ::TSCE::BooleanCellValueArchive& CellValueArchive::boolean_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.boolean_value)
  return _internal_boolean_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_boolean_value(
    ::TSCE::BooleanCellValueArchive* boolean_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_value_);
  }
  boolean_value_ = boolean_value;
  if (boolean_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.boolean_value)
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::release_boolean_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = boolean_value_;
  boolean_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::unsafe_arena_release_boolean_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.boolean_value)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = boolean_value_;
  boolean_value_ = nullptr;
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::_internal_mutable_boolean_value() {
  _has_bits_[0] |= 0x00000001u;
  if (boolean_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::BooleanCellValueArchive>(GetArena());
    boolean_value_ = p;
  }
  return boolean_value_;
}
inline ::TSCE::BooleanCellValueArchive* CellValueArchive::mutable_boolean_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.boolean_value)
  return _internal_mutable_boolean_value();
}
inline void CellValueArchive::set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boolean_value_;
  }
  if (boolean_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boolean_value);
    if (message_arena != submessage_arena) {
      boolean_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  boolean_value_ = boolean_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.boolean_value)
}

// optional .TSCE.DateCellValueArchive date_value = 3;
inline bool CellValueArchive::_internal_has_date_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || date_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_date_value() const {
  return _internal_has_date_value();
}
inline void CellValueArchive::clear_date_value() {
  if (date_value_ != nullptr) date_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCE::DateCellValueArchive& CellValueArchive::_internal_date_value() const {
  const ::TSCE::DateCellValueArchive* p = date_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::DateCellValueArchive&>(
      ::TSCE::_DateCellValueArchive_default_instance_);
}
inline const ::TSCE::DateCellValueArchive& CellValueArchive::date_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.date_value)
  return _internal_date_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_date_value(
    ::TSCE::DateCellValueArchive* date_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_value_);
  }
  date_value_ = date_value;
  if (date_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.date_value)
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::release_date_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = date_value_;
  date_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::unsafe_arena_release_date_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.date_value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = date_value_;
  date_value_ = nullptr;
  return temp;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::_internal_mutable_date_value() {
  _has_bits_[0] |= 0x00000002u;
  if (date_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::DateCellValueArchive>(GetArena());
    date_value_ = p;
  }
  return date_value_;
}
inline ::TSCE::DateCellValueArchive* CellValueArchive::mutable_date_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.date_value)
  return _internal_mutable_date_value();
}
inline void CellValueArchive::set_allocated_date_value(::TSCE::DateCellValueArchive* date_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete date_value_;
  }
  if (date_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date_value);
    if (message_arena != submessage_arena) {
      date_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_value_ = date_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.date_value)
}

// optional .TSCE.NumberCellValueArchive number_value = 4;
inline bool CellValueArchive::_internal_has_number_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || number_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_number_value() const {
  return _internal_has_number_value();
}
inline void CellValueArchive::clear_number_value() {
  if (number_value_ != nullptr) number_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCE::NumberCellValueArchive& CellValueArchive::_internal_number_value() const {
  const ::TSCE::NumberCellValueArchive* p = number_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberCellValueArchive&>(
      ::TSCE::_NumberCellValueArchive_default_instance_);
}
inline const ::TSCE::NumberCellValueArchive& CellValueArchive::number_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.number_value)
  return _internal_number_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_number_value(
    ::TSCE::NumberCellValueArchive* number_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_value_);
  }
  number_value_ = number_value;
  if (number_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.number_value)
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::release_number_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = number_value_;
  number_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::unsafe_arena_release_number_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.number_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = number_value_;
  number_value_ = nullptr;
  return temp;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::_internal_mutable_number_value() {
  _has_bits_[0] |= 0x00000004u;
  if (number_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberCellValueArchive>(GetArena());
    number_value_ = p;
  }
  return number_value_;
}
inline ::TSCE::NumberCellValueArchive* CellValueArchive::mutable_number_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.number_value)
  return _internal_mutable_number_value();
}
inline void CellValueArchive::set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete number_value_;
  }
  if (number_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(number_value);
    if (message_arena != submessage_arena) {
      number_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  number_value_ = number_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.number_value)
}

// optional .TSCE.StringCellValueArchive string_value = 5;
inline bool CellValueArchive::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || string_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void CellValueArchive::clear_string_value() {
  if (string_value_ != nullptr) string_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCE::StringCellValueArchive& CellValueArchive::_internal_string_value() const {
  const ::TSCE::StringCellValueArchive* p = string_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::StringCellValueArchive&>(
      ::TSCE::_StringCellValueArchive_default_instance_);
}
inline const ::TSCE::StringCellValueArchive& CellValueArchive::string_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.string_value)
  return _internal_string_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_string_value(
    ::TSCE::StringCellValueArchive* string_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_value_);
  }
  string_value_ = string_value;
  if (string_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.string_value)
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::release_string_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = string_value_;
  string_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.string_value)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = string_value_;
  string_value_ = nullptr;
  return temp;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000008u;
  if (string_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::StringCellValueArchive>(GetArena());
    string_value_ = p;
  }
  return string_value_;
}
inline ::TSCE::StringCellValueArchive* CellValueArchive::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.string_value)
  return _internal_mutable_string_value();
}
inline void CellValueArchive::set_allocated_string_value(::TSCE::StringCellValueArchive* string_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete string_value_;
  }
  if (string_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_value);
    if (message_arena != submessage_arena) {
      string_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  string_value_ = string_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.string_value)
}

// optional .TSCE.ErrorCellValueArchive error_value = 6;
inline bool CellValueArchive::_internal_has_error_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || error_value_ != nullptr);
  return value;
}
inline bool CellValueArchive::has_error_value() const {
  return _internal_has_error_value();
}
inline void CellValueArchive::clear_error_value() {
  if (error_value_ != nullptr) error_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCE::ErrorCellValueArchive& CellValueArchive::_internal_error_value() const {
  const ::TSCE::ErrorCellValueArchive* p = error_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::ErrorCellValueArchive&>(
      ::TSCE::_ErrorCellValueArchive_default_instance_);
}
inline const ::TSCE::ErrorCellValueArchive& CellValueArchive::error_value() const {
  // @@protoc_insertion_point(field_get:TSCE.CellValueArchive.error_value)
  return _internal_error_value();
}
inline void CellValueArchive::unsafe_arena_set_allocated_error_value(
    ::TSCE::ErrorCellValueArchive* error_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_value_);
  }
  error_value_ = error_value;
  if (error_value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCE.CellValueArchive.error_value)
}
inline ::TSCE::ErrorCellValueArchive* CellValueArchive::release_error_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::ErrorCellValueArchive* temp = error_value_;
  error_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::ErrorCellValueArchive* CellValueArchive::unsafe_arena_release_error_value() {
  // @@protoc_insertion_point(field_release:TSCE.CellValueArchive.error_value)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::ErrorCellValueArchive* temp = error_value_;
  error_value_ = nullptr;
  return temp;
}
inline ::TSCE::ErrorCellValueArchive* CellValueArchive::_internal_mutable_error_value() {
  _has_bits_[0] |= 0x00000010u;
  if (error_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::ErrorCellValueArchive>(GetArena());
    error_value_ = p;
  }
  return error_value_;
}
inline ::TSCE::ErrorCellValueArchive* CellValueArchive::mutable_error_value() {
  // @@protoc_insertion_point(field_mutable:TSCE.CellValueArchive.error_value)
  return _internal_mutable_error_value();
}
inline void CellValueArchive::set_allocated_error_value(::TSCE::ErrorCellValueArchive* error_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_value_;
  }
  if (error_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error_value);
    if (message_arena != submessage_arena) {
      error_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  error_value_ = error_value;
  // @@protoc_insertion_point(field_set_allocated:TSCE.CellValueArchive.error_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCE

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSCE::ReferenceArchive_ReferenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ReferenceArchive_ReferenceType>() {
  return ::TSCE::ReferenceArchive_ReferenceType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::SpanningDependenciesArchive_RangeContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::SpanningDependenciesArchive_RangeContext>() {
  return ::TSCE::SpanningDependenciesArchive_RangeContext_descriptor();
}
template <> struct is_proto_enum< ::TSCE::SpanningDependenciesExpandedArchive_RangeContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::SpanningDependenciesExpandedArchive_RangeContext>() {
  return ::TSCE::SpanningDependenciesExpandedArchive_RangeContext_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CellErrorsArchive_ErrorFlavor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CellErrorsArchive_ErrorFlavor>() {
  return ::TSCE::CellErrorsArchive_ErrorFlavor_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CalculationEngineArchive_ExcelImportDateMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CalculationEngineArchive_ExcelImportDateMode>() {
  return ::TSCE::CalculationEngineArchive_ExcelImportDateMode_descriptor();
}
template <> struct is_proto_enum< ::TSCE::ASTNodeArrayArchive_ASTNodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ASTNodeArrayArchive_ASTNodeType>() {
  return ::TSCE::ASTNodeArrayArchive_ASTNodeType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose>() {
  return ::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose_descriptor();
}
template <> struct is_proto_enum< ::TSCE::GroupByChangeArchive_ChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::GroupByChangeArchive_ChangeType>() {
  return ::TSCE::GroupByChangeArchive_ChangeType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::FormulaRewriteSpecArchive_RewriteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::FormulaRewriteSpecArchive_RewriteType>() {
  return ::TSCE::FormulaRewriteSpecArchive_RewriteType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::ErrorCellValueArchive_ErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::ErrorCellValueArchive_ErrorType>() {
  return ::TSCE::ErrorCellValueArchive_ErrorType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CellValueArchive_CellValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CellValueArchive_CellValueType>() {
  return ::TSCE::CellValueArchive_CellValueType_descriptor();
}
template <> struct is_proto_enum< ::TSCE::CategoryAggType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCE::CategoryAggType>() {
  return ::TSCE::CategoryAggType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCEArchives_2eproto
