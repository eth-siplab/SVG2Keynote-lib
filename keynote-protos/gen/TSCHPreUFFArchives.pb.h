// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHPreUFFArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHPreUFFArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHPreUFFArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCH3DArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHPreUFFArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHPreUFFArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHPreUFFArchives_2eproto;
namespace TSCH {
namespace PreUFF {
class ChartAxisNonStyleArchive;
struct ChartAxisNonStyleArchiveDefaultTypeInternal;
extern ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
class ChartAxisStyleArchive;
struct ChartAxisStyleArchiveDefaultTypeInternal;
extern ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
class ChartGridArchive;
struct ChartGridArchiveDefaultTypeInternal;
extern ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
class ChartGridArchive_ValueRow;
struct ChartGridArchive_ValueRowDefaultTypeInternal;
extern ChartGridArchive_ValueRowDefaultTypeInternal _ChartGridArchive_ValueRow_default_instance_;
class ChartInfoArchive;
struct ChartInfoArchiveDefaultTypeInternal;
extern ChartInfoArchiveDefaultTypeInternal _ChartInfoArchive_default_instance_;
class ChartModelArchive;
struct ChartModelArchiveDefaultTypeInternal;
extern ChartModelArchiveDefaultTypeInternal _ChartModelArchive_default_instance_;
class ChartNonStyleArchive;
struct ChartNonStyleArchiveDefaultTypeInternal;
extern ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
class ChartSeriesNonStyleArchive;
struct ChartSeriesNonStyleArchiveDefaultTypeInternal;
extern ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
class ChartSeriesStyleArchive;
struct ChartSeriesStyleArchiveDefaultTypeInternal;
extern ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
class ChartStyleArchive;
struct ChartStyleArchiveDefaultTypeInternal;
extern ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
class ChartsNumberFormatArchive;
struct ChartsNumberFormatArchiveDefaultTypeInternal;
extern ChartsNumberFormatArchiveDefaultTypeInternal _ChartsNumberFormatArchive_default_instance_;
class LegendModelArchive;
struct LegendModelArchiveDefaultTypeInternal;
extern LegendModelArchiveDefaultTypeInternal _LegendModelArchive_default_instance_;
class LegendNonStyleArchive;
struct LegendNonStyleArchiveDefaultTypeInternal;
extern LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
class LegendStyleArchive;
struct LegendStyleArchiveDefaultTypeInternal;
extern LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
}  // namespace PreUFF
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::PreUFF::ChartAxisNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartAxisNonStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartAxisStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartAxisStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartGridArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartGridArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartGridArchive_ValueRow* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartGridArchive_ValueRow>(Arena*);
template<> ::TSCH::PreUFF::ChartInfoArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartInfoArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartModelArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartModelArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartNonStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartSeriesNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartSeriesNonStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartSeriesStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartSeriesStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::ChartsNumberFormatArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::ChartsNumberFormatArchive>(Arena*);
template<> ::TSCH::PreUFF::LegendModelArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::LegendModelArchive>(Arena*);
template<> ::TSCH::PreUFF::LegendNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::LegendNonStyleArchive>(Arena*);
template<> ::TSCH::PreUFF::LegendStyleArchive* Arena::CreateMaybeMessage<::TSCH::PreUFF::LegendStyleArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {
namespace PreUFF {

// ===================================================================

class ChartInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartInfoArchive) */ {
 public:
  inline ChartInfoArchive() : ChartInfoArchive(nullptr) {}
  ~ChartInfoArchive() override;
  explicit constexpr ChartInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartInfoArchive(const ChartInfoArchive& from);
  ChartInfoArchive(ChartInfoArchive&& from) noexcept
    : ChartInfoArchive() {
    *this = ::std::move(from);
  }

  inline ChartInfoArchive& operator=(const ChartInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartInfoArchive& operator=(ChartInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartInfoArchive* internal_default_instance() {
    return reinterpret_cast<const ChartInfoArchive*>(
               &_ChartInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartInfoArchive& a, ChartInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartInfoArchive* New() const final {
    return CreateMaybeMessage<ChartInfoArchive>(nullptr);
  }

  ChartInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartInfoArchive& from);
  void MergeFrom(const ChartInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartInfoArchive";
  }
  protected:
  explicit ChartInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueAxisStylesFieldNumber = 7,
    kCategoryAxisStylesFieldNumber = 8,
    kValueAxisNonstylesFieldNumber = 9,
    kCategoryAxisNonstylesFieldNumber = 10,
    kSeriesThemeStylesFieldNumber = 11,
    kParagraphStylesFieldNumber = 18,
    kSuperFieldNumber = 1,
    kChartModelFieldNumber = 2,
    kStyleFieldNumber = 3,
    kLegendModelFieldNumber = 5,
    kInnerChartFrameFieldNumber = 6,
    kSeriesPrivateStylesFieldNumber = 12,
    kSeriesNonStylesFieldNumber = 13,
    kNonStyleFieldNumber = 14,
    kMediatorFieldNumber = 15,
    kCdePreviewOriginFieldNumber = 16,
    kChartStylePresetFieldNumber = 17,
    kChartTypeFieldNumber = 4,
    kLastRowSectedInTheCdeFieldNumber = 19,
    kLastColumnSectedInTheCdeFieldNumber = 20,
    kChartStylePresetIndexFieldNumber = 21,
    kNeedsCalcEngineDeferredImportActionFieldNumber = 22,
  };
  // repeated .TSP.Reference value_axis_styles = 7;
  int value_axis_styles_size() const;
  private:
  int _internal_value_axis_styles_size() const;
  public:
  void clear_value_axis_styles();
  ::TSP::Reference* mutable_value_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();
  private:
  const ::TSP::Reference& _internal_value_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_styles();
  public:
  const ::TSP::Reference& value_axis_styles(int index) const;
  ::TSP::Reference* add_value_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;

  // repeated .TSP.Reference category_axis_styles = 8;
  int category_axis_styles_size() const;
  private:
  int _internal_category_axis_styles_size() const;
  public:
  void clear_category_axis_styles();
  ::TSP::Reference* mutable_category_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();
  private:
  const ::TSP::Reference& _internal_category_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_styles();
  public:
  const ::TSP::Reference& category_axis_styles(int index) const;
  ::TSP::Reference* add_category_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  int value_axis_nonstyles_size() const;
  private:
  int _internal_value_axis_nonstyles_size() const;
  public:
  void clear_value_axis_nonstyles();
  ::TSP::Reference* mutable_value_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_value_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_nonstyles();
  public:
  const ::TSP::Reference& value_axis_nonstyles(int index) const;
  ::TSP::Reference* add_value_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_nonstyles() const;

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  int category_axis_nonstyles_size() const;
  private:
  int _internal_category_axis_nonstyles_size() const;
  public:
  void clear_category_axis_nonstyles();
  ::TSP::Reference* mutable_category_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_category_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_nonstyles();
  public:
  const ::TSP::Reference& category_axis_nonstyles(int index) const;
  ::TSP::Reference* add_category_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_nonstyles() const;

  // repeated .TSP.Reference series_theme_styles = 11;
  int series_theme_styles_size() const;
  private:
  int _internal_series_theme_styles_size() const;
  public:
  void clear_series_theme_styles();
  ::TSP::Reference* mutable_series_theme_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_theme_styles();
  private:
  const ::TSP::Reference& _internal_series_theme_styles(int index) const;
  ::TSP::Reference* _internal_add_series_theme_styles();
  public:
  const ::TSP::Reference& series_theme_styles(int index) const;
  ::TSP::Reference* add_series_theme_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_theme_styles() const;

  // repeated .TSP.Reference paragraph_styles = 18;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // required .TSD.DrawableArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableArchive* release_super();
  ::TSD::DrawableArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableArchive* super);
  private:
  const ::TSD::DrawableArchive& _internal_super() const;
  ::TSD::DrawableArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableArchive* super);
  ::TSD::DrawableArchive* unsafe_arena_release_super();

  // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
  bool has_chart_model() const;
  private:
  bool _internal_has_chart_model() const;
  public:
  void clear_chart_model();
  const ::TSCH::PreUFF::ChartModelArchive& chart_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartModelArchive* release_chart_model();
  ::TSCH::PreUFF::ChartModelArchive* mutable_chart_model();
  void set_allocated_chart_model(::TSCH::PreUFF::ChartModelArchive* chart_model);
  private:
  const ::TSCH::PreUFF::ChartModelArchive& _internal_chart_model() const;
  ::TSCH::PreUFF::ChartModelArchive* _internal_mutable_chart_model();
  public:
  void unsafe_arena_set_allocated_chart_model(
      ::TSCH::PreUFF::ChartModelArchive* chart_model);
  ::TSCH::PreUFF::ChartModelArchive* unsafe_arena_release_chart_model();

  // optional .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
  bool has_legend_model() const;
  private:
  bool _internal_has_legend_model() const;
  public:
  void clear_legend_model();
  const ::TSCH::PreUFF::LegendModelArchive& legend_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::LegendModelArchive* release_legend_model();
  ::TSCH::PreUFF::LegendModelArchive* mutable_legend_model();
  void set_allocated_legend_model(::TSCH::PreUFF::LegendModelArchive* legend_model);
  private:
  const ::TSCH::PreUFF::LegendModelArchive& _internal_legend_model() const;
  ::TSCH::PreUFF::LegendModelArchive* _internal_mutable_legend_model();
  public:
  void unsafe_arena_set_allocated_legend_model(
      ::TSCH::PreUFF::LegendModelArchive* legend_model);
  ::TSCH::PreUFF::LegendModelArchive* unsafe_arena_release_legend_model();

  // required .TSCH.RectArchive inner_chart_frame = 6;
  bool has_inner_chart_frame() const;
  private:
  bool _internal_has_inner_chart_frame() const;
  public:
  void clear_inner_chart_frame();
  const ::TSCH::RectArchive& inner_chart_frame() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::RectArchive* release_inner_chart_frame();
  ::TSCH::RectArchive* mutable_inner_chart_frame();
  void set_allocated_inner_chart_frame(::TSCH::RectArchive* inner_chart_frame);
  private:
  const ::TSCH::RectArchive& _internal_inner_chart_frame() const;
  ::TSCH::RectArchive* _internal_mutable_inner_chart_frame();
  public:
  void unsafe_arena_set_allocated_inner_chart_frame(
      ::TSCH::RectArchive* inner_chart_frame);
  ::TSCH::RectArchive* unsafe_arena_release_inner_chart_frame();

  // optional .TSP.SparseReferenceArray series_private_styles = 12;
  bool has_series_private_styles() const;
  private:
  bool _internal_has_series_private_styles() const;
  public:
  void clear_series_private_styles();
  const ::TSP::SparseReferenceArray& series_private_styles() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::SparseReferenceArray* release_series_private_styles();
  ::TSP::SparseReferenceArray* mutable_series_private_styles();
  void set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_private_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_private_styles();
  public:
  void unsafe_arena_set_allocated_series_private_styles(
      ::TSP::SparseReferenceArray* series_private_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_private_styles();

  // optional .TSP.SparseReferenceArray series_non_styles = 13;
  bool has_series_non_styles() const;
  private:
  bool _internal_has_series_non_styles() const;
  public:
  void clear_series_non_styles();
  const ::TSP::SparseReferenceArray& series_non_styles() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::SparseReferenceArray* release_series_non_styles();
  ::TSP::SparseReferenceArray* mutable_series_non_styles();
  void set_allocated_series_non_styles(::TSP::SparseReferenceArray* series_non_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_non_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_non_styles();
  public:
  void unsafe_arena_set_allocated_series_non_styles(
      ::TSP::SparseReferenceArray* series_non_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_non_styles();

  // optional .TSP.Reference non_style = 14;
  bool has_non_style() const;
  private:
  bool _internal_has_non_style() const;
  public:
  void clear_non_style();
  const ::TSP::Reference& non_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_non_style();
  ::TSP::Reference* mutable_non_style();
  void set_allocated_non_style(::TSP::Reference* non_style);
  private:
  const ::TSP::Reference& _internal_non_style() const;
  ::TSP::Reference* _internal_mutable_non_style();
  public:
  void unsafe_arena_set_allocated_non_style(
      ::TSP::Reference* non_style);
  ::TSP::Reference* unsafe_arena_release_non_style();

  // optional .TSP.Reference mediator = 15;
  bool has_mediator() const;
  private:
  bool _internal_has_mediator() const;
  public:
  void clear_mediator();
  const ::TSP::Reference& mediator() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_mediator();
  ::TSP::Reference* mutable_mediator();
  void set_allocated_mediator(::TSP::Reference* mediator);
  private:
  const ::TSP::Reference& _internal_mediator() const;
  ::TSP::Reference* _internal_mutable_mediator();
  public:
  void unsafe_arena_set_allocated_mediator(
      ::TSP::Reference* mediator);
  ::TSP::Reference* unsafe_arena_release_mediator();

  // optional .TSP.Point cde_preview_origin = 16;
  bool has_cde_preview_origin() const;
  private:
  bool _internal_has_cde_preview_origin() const;
  public:
  void clear_cde_preview_origin();
  const ::TSP::Point& cde_preview_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_cde_preview_origin();
  ::TSP::Point* mutable_cde_preview_origin();
  void set_allocated_cde_preview_origin(::TSP::Point* cde_preview_origin);
  private:
  const ::TSP::Point& _internal_cde_preview_origin() const;
  ::TSP::Point* _internal_mutable_cde_preview_origin();
  public:
  void unsafe_arena_set_allocated_cde_preview_origin(
      ::TSP::Point* cde_preview_origin);
  ::TSP::Point* unsafe_arena_release_cde_preview_origin();

  // optional .TSP.Reference chart_style_preset = 17;
  bool has_chart_style_preset() const;
  private:
  bool _internal_has_chart_style_preset() const;
  public:
  void clear_chart_style_preset();
  const ::TSP::Reference& chart_style_preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_chart_style_preset();
  ::TSP::Reference* mutable_chart_style_preset();
  void set_allocated_chart_style_preset(::TSP::Reference* chart_style_preset);
  private:
  const ::TSP::Reference& _internal_chart_style_preset() const;
  ::TSP::Reference* _internal_mutable_chart_style_preset();
  public:
  void unsafe_arena_set_allocated_chart_style_preset(
      ::TSP::Reference* chart_style_preset);
  ::TSP::Reference* unsafe_arena_release_chart_style_preset();

  // required .TSCH.ChartType chart_type = 4;
  bool has_chart_type() const;
  private:
  bool _internal_has_chart_type() const;
  public:
  void clear_chart_type();
  ::TSCH::ChartType chart_type() const;
  void set_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_chart_type() const;
  void _internal_set_chart_type(::TSCH::ChartType value);
  public:

  // optional int32 last_row_sected_in_the_cde = 19;
  bool has_last_row_sected_in_the_cde() const;
  private:
  bool _internal_has_last_row_sected_in_the_cde() const;
  public:
  void clear_last_row_sected_in_the_cde();
  ::PROTOBUF_NAMESPACE_ID::int32 last_row_sected_in_the_cde() const;
  void set_last_row_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_row_sected_in_the_cde() const;
  void _internal_set_last_row_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 last_column_sected_in_the_cde = 20;
  bool has_last_column_sected_in_the_cde() const;
  private:
  bool _internal_has_last_column_sected_in_the_cde() const;
  public:
  void clear_last_column_sected_in_the_cde();
  ::PROTOBUF_NAMESPACE_ID::int32 last_column_sected_in_the_cde() const;
  void set_last_column_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_column_sected_in_the_cde() const;
  void _internal_set_last_column_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 chart_style_preset_index = 21;
  bool has_chart_style_preset_index() const;
  private:
  bool _internal_has_chart_style_preset_index() const;
  public:
  void clear_chart_style_preset_index();
  ::PROTOBUF_NAMESPACE_ID::int32 chart_style_preset_index() const;
  void set_chart_style_preset_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chart_style_preset_index() const;
  void _internal_set_chart_style_preset_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool needs_calc_engine_deferred_import_action = 22;
  bool has_needs_calc_engine_deferred_import_action() const;
  private:
  bool _internal_has_needs_calc_engine_deferred_import_action() const;
  public:
  void clear_needs_calc_engine_deferred_import_action();
  bool needs_calc_engine_deferred_import_action() const;
  void set_needs_calc_engine_deferred_import_action(bool value);
  private:
  bool _internal_needs_calc_engine_deferred_import_action() const;
  void _internal_set_needs_calc_engine_deferred_import_action(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_nonstyles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_nonstyles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_theme_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
  ::TSD::DrawableArchive* super_;
  ::TSCH::PreUFF::ChartModelArchive* chart_model_;
  ::TSP::Reference* style_;
  ::TSCH::PreUFF::LegendModelArchive* legend_model_;
  ::TSCH::RectArchive* inner_chart_frame_;
  ::TSP::SparseReferenceArray* series_private_styles_;
  ::TSP::SparseReferenceArray* series_non_styles_;
  ::TSP::Reference* non_style_;
  ::TSP::Reference* mediator_;
  ::TSP::Point* cde_preview_origin_;
  ::TSP::Reference* chart_style_preset_;
  int chart_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_row_sected_in_the_cde_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_column_sected_in_the_cde_;
  ::PROTOBUF_NAMESPACE_ID::int32 chart_style_preset_index_;
  bool needs_calc_engine_deferred_import_action_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class LegendModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.LegendModelArchive) */ {
 public:
  inline LegendModelArchive() : LegendModelArchive(nullptr) {}
  ~LegendModelArchive() override;
  explicit constexpr LegendModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendModelArchive(const LegendModelArchive& from);
  LegendModelArchive(LegendModelArchive&& from) noexcept
    : LegendModelArchive() {
    *this = ::std::move(from);
  }

  inline LegendModelArchive& operator=(const LegendModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendModelArchive& operator=(LegendModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendModelArchive* internal_default_instance() {
    return reinterpret_cast<const LegendModelArchive*>(
               &_LegendModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LegendModelArchive& a, LegendModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendModelArchive* New() const final {
    return CreateMaybeMessage<LegendModelArchive>(nullptr);
  }

  LegendModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LegendModelArchive& from);
  void MergeFrom(const LegendModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.LegendModelArchive";
  }
  protected:
  explicit LegendModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kFrameFieldNumber = 2,
    kStyleFieldNumber = 3,
    kNonStyleFieldNumber = 4,
  };
  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // required .TSCH.RectArchive frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::TSCH::RectArchive& frame() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::RectArchive* release_frame();
  ::TSCH::RectArchive* mutable_frame();
  void set_allocated_frame(::TSCH::RectArchive* frame);
  private:
  const ::TSCH::RectArchive& _internal_frame() const;
  ::TSCH::RectArchive* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::TSCH::RectArchive* frame);
  ::TSCH::RectArchive* unsafe_arena_release_frame();

  // required .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // required .TSP.Reference non_style = 4;
  bool has_non_style() const;
  private:
  bool _internal_has_non_style() const;
  public:
  void clear_non_style();
  const ::TSP::Reference& non_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_non_style();
  ::TSP::Reference* mutable_non_style();
  void set_allocated_non_style(::TSP::Reference* non_style);
  private:
  const ::TSP::Reference& _internal_non_style() const;
  ::TSP::Reference* _internal_mutable_non_style();
  public:
  void unsafe_arena_set_allocated_non_style(
      ::TSP::Reference* non_style);
  ::TSP::Reference* unsafe_arena_release_non_style();

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.LegendModelArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* info_;
  ::TSCH::RectArchive* frame_;
  ::TSP::Reference* style_;
  ::TSP::Reference* non_style_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartModelArchive) */ {
 public:
  inline ChartModelArchive() : ChartModelArchive(nullptr) {}
  ~ChartModelArchive() override;
  explicit constexpr ChartModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartModelArchive(const ChartModelArchive& from);
  ChartModelArchive(ChartModelArchive&& from) noexcept
    : ChartModelArchive() {
    *this = ::std::move(from);
  }

  inline ChartModelArchive& operator=(const ChartModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartModelArchive& operator=(ChartModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartModelArchive* internal_default_instance() {
    return reinterpret_cast<const ChartModelArchive*>(
               &_ChartModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChartModelArchive& a, ChartModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartModelArchive* New() const final {
    return CreateMaybeMessage<ChartModelArchive>(nullptr);
  }

  ChartModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartModelArchive& from);
  void MergeFrom(const ChartModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartModelArchive";
  }
  protected:
  explicit ChartModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesTypesFieldNumber = 3,
    kInfoFieldNumber = 1,
    kGridFieldNumber = 2,
    kInlineGridFieldNumber = 5,
    kScatterFormatFieldNumber = 4,
    kMultidatasetIndexFieldNumber = 6,
  };
  // repeated uint32 series_types = 3;
  int series_types_size() const;
  private:
  int _internal_series_types_size() const;
  public:
  void clear_series_types();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_series_types() const;
  void _internal_add_series_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_series_types();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 series_types(int index) const;
  void set_series_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_series_types(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      series_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_series_types();

  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // required .TSP.Reference grid = 2;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::TSP::Reference& grid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_grid();
  ::TSP::Reference* mutable_grid();
  void set_allocated_grid(::TSP::Reference* grid);
  private:
  const ::TSP::Reference& _internal_grid() const;
  ::TSP::Reference* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::TSP::Reference* grid);
  ::TSP::Reference* unsafe_arena_release_grid();

  // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
  bool has_inline_grid() const;
  private:
  bool _internal_has_inline_grid() const;
  public:
  void clear_inline_grid();
  const ::TSCH::PreUFF::ChartGridArchive& inline_grid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartGridArchive* release_inline_grid();
  ::TSCH::PreUFF::ChartGridArchive* mutable_inline_grid();
  void set_allocated_inline_grid(::TSCH::PreUFF::ChartGridArchive* inline_grid);
  private:
  const ::TSCH::PreUFF::ChartGridArchive& _internal_inline_grid() const;
  ::TSCH::PreUFF::ChartGridArchive* _internal_mutable_inline_grid();
  public:
  void unsafe_arena_set_allocated_inline_grid(
      ::TSCH::PreUFF::ChartGridArchive* inline_grid);
  ::TSCH::PreUFF::ChartGridArchive* unsafe_arena_release_inline_grid();

  // optional uint32 scatter_format = 4;
  bool has_scatter_format() const;
  private:
  bool _internal_has_scatter_format() const;
  public:
  void clear_scatter_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 scatter_format() const;
  void set_scatter_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scatter_format() const;
  void _internal_set_scatter_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multidataset_index = 6;
  bool has_multidataset_index() const;
  private:
  bool _internal_has_multidataset_index() const;
  public:
  void clear_multidataset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 multidataset_index() const;
  void set_multidataset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multidataset_index() const;
  void _internal_set_multidataset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartModelArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > series_types_;
  ::TSP::Reference* info_;
  ::TSP::Reference* grid_;
  ::TSCH::PreUFF::ChartGridArchive* inline_grid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scatter_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multidataset_index_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive_ValueRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartGridArchive.ValueRow) */ {
 public:
  inline ChartGridArchive_ValueRow() : ChartGridArchive_ValueRow(nullptr) {}
  ~ChartGridArchive_ValueRow() override;
  explicit constexpr ChartGridArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive_ValueRow(const ChartGridArchive_ValueRow& from);
  ChartGridArchive_ValueRow(ChartGridArchive_ValueRow&& from) noexcept
    : ChartGridArchive_ValueRow() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive_ValueRow& operator=(const ChartGridArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive_ValueRow& operator=(ChartGridArchive_ValueRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive_ValueRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive_ValueRow* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive_ValueRow*>(
               &_ChartGridArchive_ValueRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChartGridArchive_ValueRow& a, ChartGridArchive_ValueRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive_ValueRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive_ValueRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartGridArchive_ValueRow* New() const final {
    return CreateMaybeMessage<ChartGridArchive_ValueRow>(nullptr);
  }

  ChartGridArchive_ValueRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartGridArchive_ValueRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartGridArchive_ValueRow& from);
  void MergeFrom(const ChartGridArchive_ValueRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive_ValueRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartGridArchive.ValueRow";
  }
  protected:
  explicit ChartGridArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartGridArchive.ValueRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartGridArchive) */ {
 public:
  inline ChartGridArchive() : ChartGridArchive(nullptr) {}
  ~ChartGridArchive() override;
  explicit constexpr ChartGridArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive(const ChartGridArchive& from);
  ChartGridArchive(ChartGridArchive&& from) noexcept
    : ChartGridArchive() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive& operator=(const ChartGridArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive& operator=(ChartGridArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive*>(
               &_ChartGridArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChartGridArchive& a, ChartGridArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartGridArchive* New() const final {
    return CreateMaybeMessage<ChartGridArchive>(nullptr);
  }

  ChartGridArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartGridArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartGridArchive& from);
  void MergeFrom(const ChartGridArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartGridArchive";
  }
  protected:
  explicit ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  enum : int {
    kRowNameFieldNumber = 2,
    kColumnNameFieldNumber = 3,
    kValueRowFieldNumber = 4,
    kDirectionFieldNumber = 1,
    kDirtyFieldNumber = 6,
  };
  // repeated string row_name = 2;
  int row_name_size() const;
  private:
  int _internal_row_name_size() const;
  public:
  void clear_row_name();
  const std::string& row_name(int index) const;
  std::string* mutable_row_name(int index);
  void set_row_name(int index, const std::string& value);
  void set_row_name(int index, std::string&& value);
  void set_row_name(int index, const char* value);
  void set_row_name(int index, const char* value, size_t size);
  std::string* add_row_name();
  void add_row_name(const std::string& value);
  void add_row_name(std::string&& value);
  void add_row_name(const char* value);
  void add_row_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_name();
  private:
  const std::string& _internal_row_name(int index) const;
  std::string* _internal_add_row_name();
  public:

  // repeated string column_name = 3;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  int value_row_size() const;
  private:
  int _internal_value_row_size() const;
  public:
  void clear_value_row();
  ::TSCH::PreUFF::ChartGridArchive_ValueRow* mutable_value_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::PreUFF::ChartGridArchive_ValueRow >*
      mutable_value_row();
  private:
  const ::TSCH::PreUFF::ChartGridArchive_ValueRow& _internal_value_row(int index) const;
  ::TSCH::PreUFF::ChartGridArchive_ValueRow* _internal_add_value_row();
  public:
  const ::TSCH::PreUFF::ChartGridArchive_ValueRow& value_row(int index) const;
  ::TSCH::PreUFF::ChartGridArchive_ValueRow* add_value_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::PreUFF::ChartGridArchive_ValueRow >&
      value_row() const;

  // required int32 direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool dirty = 6;
  bool has_dirty() const;
  private:
  bool _internal_has_dirty() const;
  public:
  void clear_dirty();
  bool dirty() const;
  void set_dirty(bool value);
  private:
  bool _internal_dirty() const;
  void _internal_set_dirty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartGridArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::PreUFF::ChartGridArchive_ValueRow > value_row_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  bool dirty_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartsNumberFormatArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartsNumberFormatArchive) */ {
 public:
  inline ChartsNumberFormatArchive() : ChartsNumberFormatArchive(nullptr) {}
  ~ChartsNumberFormatArchive() override;
  explicit constexpr ChartsNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartsNumberFormatArchive(const ChartsNumberFormatArchive& from);
  ChartsNumberFormatArchive(ChartsNumberFormatArchive&& from) noexcept
    : ChartsNumberFormatArchive() {
    *this = ::std::move(from);
  }

  inline ChartsNumberFormatArchive& operator=(const ChartsNumberFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartsNumberFormatArchive& operator=(ChartsNumberFormatArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartsNumberFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartsNumberFormatArchive* internal_default_instance() {
    return reinterpret_cast<const ChartsNumberFormatArchive*>(
               &_ChartsNumberFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChartsNumberFormatArchive& a, ChartsNumberFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartsNumberFormatArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartsNumberFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartsNumberFormatArchive* New() const final {
    return CreateMaybeMessage<ChartsNumberFormatArchive>(nullptr);
  }

  ChartsNumberFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartsNumberFormatArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartsNumberFormatArchive& from);
  void MergeFrom(const ChartsNumberFormatArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartsNumberFormatArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartsNumberFormatArchive";
  }
  protected:
  explicit ChartsNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterstitialStringsFieldNumber = 15,
    kFormatStringFieldNumber = 2,
    kCurrencyCodeFieldNumber = 4,
    kSuffixStringFieldNumber = 8,
    kFormatNameFieldNumber = 23,
    kPrefixStringFieldNumber = 24,
    kInterstitialStringInsertionIndexesFieldNumber = 16,
    kValueTypeFieldNumber = 1,
    kDecimalPlacesFieldNumber = 3,
    kNegativeStyleFieldNumber = 5,
    kFractionAccuracyFieldNumber = 7,
    kBaseFieldNumber = 9,
    kBasePlacesFieldNumber = 10,
    kShowThousandsSeparatorFieldNumber = 6,
    kBaseUseMinusSignFieldNumber = 11,
    kUseAccountingStyleFieldNumber = 12,
    kIsCustomFieldNumber = 13,
    kIndexFromRightOfLastDigitPlaceholderFieldNumber = 17,
    kScaleFactorFieldNumber = 14,
    kIsTextFormatFieldNumber = 18,
    kMinimumIntegerWidthFieldNumber = 19,
    kDecimalWidthFieldNumber = 20,
    kNumberOfNonSpaceIntegerPlaceholderDigitsFieldNumber = 21,
    kNumberOfNonSpaceDecimalPlaceholderDigitsFieldNumber = 22,
  };
  // repeated string interstitial_strings = 15;
  int interstitial_strings_size() const;
  private:
  int _internal_interstitial_strings_size() const;
  public:
  void clear_interstitial_strings();
  const std::string& interstitial_strings(int index) const;
  std::string* mutable_interstitial_strings(int index);
  void set_interstitial_strings(int index, const std::string& value);
  void set_interstitial_strings(int index, std::string&& value);
  void set_interstitial_strings(int index, const char* value);
  void set_interstitial_strings(int index, const char* value, size_t size);
  std::string* add_interstitial_strings();
  void add_interstitial_strings(const std::string& value);
  void add_interstitial_strings(std::string&& value);
  void add_interstitial_strings(const char* value);
  void add_interstitial_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& interstitial_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_interstitial_strings();
  private:
  const std::string& _internal_interstitial_strings(int index) const;
  std::string* _internal_add_interstitial_strings();
  public:

  // optional string format_string = 2;
  bool has_format_string() const;
  private:
  bool _internal_has_format_string() const;
  public:
  void clear_format_string();
  const std::string& format_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format_string();
  std::string* release_format_string();
  void set_allocated_format_string(std::string* format_string);
  private:
  const std::string& _internal_format_string() const;
  void _internal_set_format_string(const std::string& value);
  std::string* _internal_mutable_format_string();
  public:

  // optional string currency_code = 4;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional string suffix_string = 8;
  bool has_suffix_string() const;
  private:
  bool _internal_has_suffix_string() const;
  public:
  void clear_suffix_string();
  const std::string& suffix_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix_string();
  std::string* release_suffix_string();
  void set_allocated_suffix_string(std::string* suffix_string);
  private:
  const std::string& _internal_suffix_string() const;
  void _internal_set_suffix_string(const std::string& value);
  std::string* _internal_mutable_suffix_string();
  public:

  // optional string format_name = 23;
  bool has_format_name() const;
  private:
  bool _internal_has_format_name() const;
  public:
  void clear_format_name();
  const std::string& format_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format_name();
  std::string* release_format_name();
  void set_allocated_format_name(std::string* format_name);
  private:
  const std::string& _internal_format_name() const;
  void _internal_set_format_name(const std::string& value);
  std::string* _internal_mutable_format_name();
  public:

  // optional string prefix_string = 24;
  bool has_prefix_string() const;
  private:
  bool _internal_has_prefix_string() const;
  public:
  void clear_prefix_string();
  const std::string& prefix_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix_string();
  std::string* release_prefix_string();
  void set_allocated_prefix_string(std::string* prefix_string);
  private:
  const std::string& _internal_prefix_string() const;
  void _internal_set_prefix_string(const std::string& value);
  std::string* _internal_mutable_prefix_string();
  public:

  // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
  bool has_interstitial_string_insertion_indexes() const;
  private:
  bool _internal_has_interstitial_string_insertion_indexes() const;
  public:
  void clear_interstitial_string_insertion_indexes();
  const ::TSP::IndexSet& interstitial_string_insertion_indexes() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_interstitial_string_insertion_indexes();
  ::TSP::IndexSet* mutable_interstitial_string_insertion_indexes();
  void set_allocated_interstitial_string_insertion_indexes(::TSP::IndexSet* interstitial_string_insertion_indexes);
  private:
  const ::TSP::IndexSet& _internal_interstitial_string_insertion_indexes() const;
  ::TSP::IndexSet* _internal_mutable_interstitial_string_insertion_indexes();
  public:
  void unsafe_arena_set_allocated_interstitial_string_insertion_indexes(
      ::TSP::IndexSet* interstitial_string_insertion_indexes);
  ::TSP::IndexSet* unsafe_arena_release_interstitial_string_insertion_indexes();

  // required .TSCH.NumberValueType value_type = 1;
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  ::TSCH::NumberValueType value_type() const;
  void set_value_type(::TSCH::NumberValueType value);
  private:
  ::TSCH::NumberValueType _internal_value_type() const;
  void _internal_set_value_type(::TSCH::NumberValueType value);
  public:

  // required uint32 decimal_places = 3;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places() const;
  void set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimal_places() const;
  void _internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TSCH.NegativeNumberStyle negative_style = 5;
  bool has_negative_style() const;
  private:
  bool _internal_has_negative_style() const;
  public:
  void clear_negative_style();
  ::TSCH::NegativeNumberStyle negative_style() const;
  void set_negative_style(::TSCH::NegativeNumberStyle value);
  private:
  ::TSCH::NegativeNumberStyle _internal_negative_style() const;
  void _internal_set_negative_style(::TSCH::NegativeNumberStyle value);
  public:

  // required .TSCH.FractionAccuracy fraction_accuracy = 7;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  ::TSCH::FractionAccuracy fraction_accuracy() const;
  void set_fraction_accuracy(::TSCH::FractionAccuracy value);
  private:
  ::TSCH::FractionAccuracy _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(::TSCH::FractionAccuracy value);
  public:

  // required uint32 base = 9;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::uint32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 base_places = 10;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places() const;
  void set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_places() const;
  void _internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool show_thousands_separator = 6;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // required bool base_use_minus_sign = 11;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // required bool use_accounting_style = 12;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // required bool is_custom = 13;
  bool has_is_custom() const;
  private:
  bool _internal_has_is_custom() const;
  public:
  void clear_is_custom();
  bool is_custom() const;
  void set_is_custom(bool value);
  private:
  bool _internal_is_custom() const;
  void _internal_set_is_custom(bool value);
  public:

  // required uint32 index_from_right_of_last_digit_placeholder = 17;
  bool has_index_from_right_of_last_digit_placeholder() const;
  private:
  bool _internal_has_index_from_right_of_last_digit_placeholder() const;
  public:
  void clear_index_from_right_of_last_digit_placeholder();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_from_right_of_last_digit_placeholder() const;
  void set_index_from_right_of_last_digit_placeholder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_from_right_of_last_digit_placeholder() const;
  void _internal_set_index_from_right_of_last_digit_placeholder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double scale_factor = 14;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  double scale_factor() const;
  void set_scale_factor(double value);
  private:
  double _internal_scale_factor() const;
  void _internal_set_scale_factor(double value);
  public:

  // required bool is_text_format = 18;
  bool has_is_text_format() const;
  private:
  bool _internal_has_is_text_format() const;
  public:
  void clear_is_text_format();
  bool is_text_format() const;
  void set_is_text_format(bool value);
  private:
  bool _internal_is_text_format() const;
  void _internal_set_is_text_format(bool value);
  public:

  // required uint32 minimum_integer_width = 19;
  bool has_minimum_integer_width() const;
  private:
  bool _internal_has_minimum_integer_width() const;
  public:
  void clear_minimum_integer_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 minimum_integer_width() const;
  void set_minimum_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minimum_integer_width() const;
  void _internal_set_minimum_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 decimal_width = 20;
  bool has_decimal_width() const;
  private:
  bool _internal_has_decimal_width() const;
  public:
  void clear_decimal_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_width() const;
  void set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimal_width() const;
  void _internal_set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 number_of_non_space_integer_placeholder_digits = 21;
  bool has_number_of_non_space_integer_placeholder_digits() const;
  private:
  bool _internal_has_number_of_non_space_integer_placeholder_digits() const;
  public:
  void clear_number_of_non_space_integer_placeholder_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_non_space_integer_placeholder_digits() const;
  void set_number_of_non_space_integer_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_non_space_integer_placeholder_digits() const;
  void _internal_set_number_of_non_space_integer_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
  bool has_number_of_non_space_decimal_placeholder_digits() const;
  private:
  bool _internal_has_number_of_non_space_decimal_placeholder_digits() const;
  public:
  void clear_number_of_non_space_decimal_placeholder_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_non_space_decimal_placeholder_digits() const;
  void set_number_of_non_space_decimal_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_non_space_decimal_placeholder_digits() const;
  void _internal_set_number_of_non_space_decimal_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartsNumberFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> interstitial_strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_string_;
  ::TSP::IndexSet* interstitial_string_insertion_indexes_;
  int value_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places_;
  int negative_style_;
  int fraction_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places_;
  bool show_thousands_separator_;
  bool base_use_minus_sign_;
  bool use_accounting_style_;
  bool is_custom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_from_right_of_last_digit_placeholder_;
  double scale_factor_;
  bool is_text_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minimum_integer_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_non_space_integer_placeholder_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_non_space_decimal_placeholder_digits_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartStyleArchive) */ {
 public:
  inline ChartStyleArchive() : ChartStyleArchive(nullptr) {}
  ~ChartStyleArchive() override;
  explicit constexpr ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStyleArchive(const ChartStyleArchive& from);
  ChartStyleArchive(ChartStyleArchive&& from) noexcept
    : ChartStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartStyleArchive& operator=(const ChartStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStyleArchive& operator=(ChartStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartStyleArchive*>(
               &_ChartStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChartStyleArchive& a, ChartStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartStyleArchive* New() const final {
    return CreateMaybeMessage<ChartStyleArchive>(nullptr);
  }

  ChartStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartStyleArchive& from);
  void MergeFrom(const ChartStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartStyleArchive";
  }
  protected:
  explicit ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfodefaultdeprecatedmainfontfamilyFieldNumber = 24,
    kSuperFieldNumber = 1,
    kTschchartinfodefaultbackgroundfillFieldNumber = 10,
    kTschchartinfodefaultbackgroundstrokeFieldNumber = 11,
    kTschchartinfodefaultgridbackgroundfillFieldNumber = 12,
    kTschchartinfodefaultborderstrokeFieldNumber = 16,
    kTschchartinfodefaulttitlecolorFieldNumber = 18,
    kTschchartinfodefaultbordershadowFieldNumber = 21,
    kTschchartinfodefaultdeprecatedtrendlineequationshadowFieldNumber = 32,
    kTschchartinfodefaultdeprecatedtrendlinersquaredshadowFieldNumber = 33,
    kTschchartinfobardeprecated3DshadowFieldNumber = 308,
    kTschchartinfocolumndeprecated3DshadowFieldNumber = 309,
    kTschchartinfolinedeprecated3DshadowFieldNumber = 310,
    kTschchartinfoareadeprecated3DshadowFieldNumber = 311,
    kTschchartinfopiedeprecated3DshadowFieldNumber = 312,
    kTschchartinfodefault3DlightingpackageFieldNumber = 313,
    kTschchartinfocolumn3DlightingpackageFieldNumber = 314,
    kTschchartinfobar3DlightingpackageFieldNumber = 315,
    kTschchartinfoline3DlightingpackageFieldNumber = 316,
    kTschchartinfoarea3DlightingpackageFieldNumber = 317,
    kTschchartinfopie3DlightingpackageFieldNumber = 318,
    kTschchartinfodefaultintersetgapFieldNumber = 13,
    kTschchartinfodefaultinterbargapFieldNumber = 14,
    kTschchartinfodefaultgridbackgroundopacityFieldNumber = 19,
    kTschchartinfodefaultborderopacityFieldNumber = 22,
    kTschchartinfodefaulttitleparagraphstyleindexFieldNumber = 23,
    kTschchartinfodefaultdeprecatedmainfontnamedsizeFieldNumber = 25,
    kTschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindexFieldNumber = 30,
    kTschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindexFieldNumber = 31,
    kTschchartinfodefaultdeprecatedtrendlineequationopacityFieldNumber = 34,
    kTschchartinfodefaultdeprecatedtrendlinersquaredopacityFieldNumber = 35,
    kTschchartinfodefaultshowborderFieldNumber = 15,
    kTschchartinfodefaultcombinelayersFieldNumber = 20,
    kTschchartinfodefaultdeprecated3DbeveledgesFieldNumber = 326,
    kTschchartinfopiedeprecated3DbeveledgesFieldNumber = 327,
    kTschchartinfobardeprecated3DbeveledgesFieldNumber = 328,
    kTschchartinfocolumndeprecated3DbeveledgesFieldNumber = 329,
    kTschchartinfodefaultdeprecated3DbarshapeFieldNumber = 330,
    kTschchartinfodefault3DchartopacityFieldNumber = 335,
  };
  // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
  bool has_tschchartinfodefaultdeprecatedmainfontfamily() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedmainfontfamily() const;
  public:
  void clear_tschchartinfodefaultdeprecatedmainfontfamily();
  const std::string& tschchartinfodefaultdeprecatedmainfontfamily() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartinfodefaultdeprecatedmainfontfamily(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartinfodefaultdeprecatedmainfontfamily();
  std::string* release_tschchartinfodefaultdeprecatedmainfontfamily();
  void set_allocated_tschchartinfodefaultdeprecatedmainfontfamily(std::string* tschchartinfodefaultdeprecatedmainfontfamily);
  private:
  const std::string& _internal_tschchartinfodefaultdeprecatedmainfontfamily() const;
  void _internal_set_tschchartinfodefaultdeprecatedmainfontfamily(const std::string& value);
  std::string* _internal_mutable_tschchartinfodefaultdeprecatedmainfontfamily();
  public:

  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
  bool has_tschchartinfodefaultbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfodefaultbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultbackgroundfill();
  void set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultbackgroundfill();

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
  bool has_tschchartinfodefaultbackgroundstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundstroke() const;
  public:
  void clear_tschchartinfodefaultbackgroundstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfodefaultbackgroundstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultbackgroundstroke();
  void set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultbackgroundstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultbackgroundstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultbackgroundstroke();

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
  bool has_tschchartinfodefaultgridbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfodefaultgridbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultgridbackgroundfill();
  void set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultgridbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultgridbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultgridbackgroundfill();

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
  bool has_tschchartinfodefaultborderstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultborderstroke() const;
  public:
  void clear_tschchartinfodefaultborderstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfodefaultborderstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultborderstroke();
  void set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultborderstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultborderstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultborderstroke();

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
  bool has_tschchartinfodefaulttitlecolor() const;
  private:
  bool _internal_has_tschchartinfodefaulttitlecolor() const;
  public:
  void clear_tschchartinfodefaulttitlecolor();
  const ::TSP::Color& tschchartinfodefaulttitlecolor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_tschchartinfodefaulttitlecolor();
  ::TSP::Color* mutable_tschchartinfodefaulttitlecolor();
  void set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor);
  private:
  const ::TSP::Color& _internal_tschchartinfodefaulttitlecolor() const;
  ::TSP::Color* _internal_mutable_tschchartinfodefaulttitlecolor();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
      ::TSP::Color* tschchartinfodefaulttitlecolor);
  ::TSP::Color* unsafe_arena_release_tschchartinfodefaulttitlecolor();

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
  bool has_tschchartinfodefaultbordershadow() const;
  private:
  bool _internal_has_tschchartinfodefaultbordershadow() const;
  public:
  void clear_tschchartinfodefaultbordershadow();
  const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfodefaultbordershadow();
  ::TSD::ShadowArchive* mutable_tschchartinfodefaultbordershadow();
  void set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfodefaultbordershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfodefaultbordershadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
      ::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfodefaultbordershadow();

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
  bool has_tschchartinfodefaultdeprecatedtrendlineequationshadow() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlineequationshadow();
  const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlineequationshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfodefaultdeprecatedtrendlineequationshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow();
  void set_allocated_tschchartinfodefaultdeprecatedtrendlineequationshadow(::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlineequationshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfodefaultdeprecatedtrendlineequationshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultdeprecatedtrendlineequationshadow(
      ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlineequationshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfodefaultdeprecatedtrendlineequationshadow();

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
  bool has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
  const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
  void set_allocated_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlinersquaredshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(
      ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlinersquaredshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();

  // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
  bool has_tschchartinfobardeprecated3dshadow() const;
  private:
  bool _internal_has_tschchartinfobardeprecated3dshadow() const;
  public:
  void clear_tschchartinfobardeprecated3dshadow();
  const ::TSD::ShadowArchive& tschchartinfobardeprecated3dshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfobardeprecated3dshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfobardeprecated3dshadow();
  void set_allocated_tschchartinfobardeprecated3dshadow(::TSD::ShadowArchive* tschchartinfobardeprecated3dshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfobardeprecated3dshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfobardeprecated3dshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfobardeprecated3dshadow(
      ::TSD::ShadowArchive* tschchartinfobardeprecated3dshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfobardeprecated3dshadow();

  // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
  bool has_tschchartinfocolumndeprecated3dshadow() const;
  private:
  bool _internal_has_tschchartinfocolumndeprecated3dshadow() const;
  public:
  void clear_tschchartinfocolumndeprecated3dshadow();
  const ::TSD::ShadowArchive& tschchartinfocolumndeprecated3dshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfocolumndeprecated3dshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfocolumndeprecated3dshadow();
  void set_allocated_tschchartinfocolumndeprecated3dshadow(::TSD::ShadowArchive* tschchartinfocolumndeprecated3dshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfocolumndeprecated3dshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfocolumndeprecated3dshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumndeprecated3dshadow(
      ::TSD::ShadowArchive* tschchartinfocolumndeprecated3dshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfocolumndeprecated3dshadow();

  // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
  bool has_tschchartinfolinedeprecated3dshadow() const;
  private:
  bool _internal_has_tschchartinfolinedeprecated3dshadow() const;
  public:
  void clear_tschchartinfolinedeprecated3dshadow();
  const ::TSD::ShadowArchive& tschchartinfolinedeprecated3dshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfolinedeprecated3dshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfolinedeprecated3dshadow();
  void set_allocated_tschchartinfolinedeprecated3dshadow(::TSD::ShadowArchive* tschchartinfolinedeprecated3dshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfolinedeprecated3dshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfolinedeprecated3dshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfolinedeprecated3dshadow(
      ::TSD::ShadowArchive* tschchartinfolinedeprecated3dshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfolinedeprecated3dshadow();

  // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
  bool has_tschchartinfoareadeprecated3dshadow() const;
  private:
  bool _internal_has_tschchartinfoareadeprecated3dshadow() const;
  public:
  void clear_tschchartinfoareadeprecated3dshadow();
  const ::TSD::ShadowArchive& tschchartinfoareadeprecated3dshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfoareadeprecated3dshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfoareadeprecated3dshadow();
  void set_allocated_tschchartinfoareadeprecated3dshadow(::TSD::ShadowArchive* tschchartinfoareadeprecated3dshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfoareadeprecated3dshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfoareadeprecated3dshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfoareadeprecated3dshadow(
      ::TSD::ShadowArchive* tschchartinfoareadeprecated3dshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfoareadeprecated3dshadow();

  // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
  bool has_tschchartinfopiedeprecated3dshadow() const;
  private:
  bool _internal_has_tschchartinfopiedeprecated3dshadow() const;
  public:
  void clear_tschchartinfopiedeprecated3dshadow();
  const ::TSD::ShadowArchive& tschchartinfopiedeprecated3dshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfopiedeprecated3dshadow();
  ::TSD::ShadowArchive* mutable_tschchartinfopiedeprecated3dshadow();
  void set_allocated_tschchartinfopiedeprecated3dshadow(::TSD::ShadowArchive* tschchartinfopiedeprecated3dshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfopiedeprecated3dshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfopiedeprecated3dshadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfopiedeprecated3dshadow(
      ::TSD::ShadowArchive* tschchartinfopiedeprecated3dshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfopiedeprecated3dshadow();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
  bool has_tschchartinfodefault3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfodefault3dlightingpackage() const;
  public:
  void clear_tschchartinfodefault3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfodefault3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfodefault3dlightingpackage();
  void set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfodefault3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfodefault3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfodefault3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
  bool has_tschchartinfocolumn3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfocolumn3dlightingpackage() const;
  public:
  void clear_tschchartinfocolumn3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfocolumn3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfocolumn3dlightingpackage();
  void set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfocolumn3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfocolumn3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfocolumn3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
  bool has_tschchartinfobar3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfobar3dlightingpackage() const;
  public:
  void clear_tschchartinfobar3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfobar3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfobar3dlightingpackage();
  void set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfobar3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfobar3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfobar3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
  bool has_tschchartinfoline3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoline3dlightingpackage() const;
  public:
  void clear_tschchartinfoline3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoline3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoline3dlightingpackage();
  void set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoline3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoline3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoline3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
  bool has_tschchartinfoarea3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoarea3dlightingpackage() const;
  public:
  void clear_tschchartinfoarea3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoarea3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoarea3dlightingpackage();
  void set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoarea3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoarea3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoarea3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
  bool has_tschchartinfopie3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfopie3dlightingpackage() const;
  public:
  void clear_tschchartinfopie3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfopie3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfopie3dlightingpackage();
  void set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfopie3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfopie3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfopie3dlightingpackage();

  // optional float tschchartinfodefaultintersetgap = 13;
  bool has_tschchartinfodefaultintersetgap() const;
  private:
  bool _internal_has_tschchartinfodefaultintersetgap() const;
  public:
  void clear_tschchartinfodefaultintersetgap();
  float tschchartinfodefaultintersetgap() const;
  void set_tschchartinfodefaultintersetgap(float value);
  private:
  float _internal_tschchartinfodefaultintersetgap() const;
  void _internal_set_tschchartinfodefaultintersetgap(float value);
  public:

  // optional float tschchartinfodefaultinterbargap = 14;
  bool has_tschchartinfodefaultinterbargap() const;
  private:
  bool _internal_has_tschchartinfodefaultinterbargap() const;
  public:
  void clear_tschchartinfodefaultinterbargap();
  float tschchartinfodefaultinterbargap() const;
  void set_tschchartinfodefaultinterbargap(float value);
  private:
  float _internal_tschchartinfodefaultinterbargap() const;
  void _internal_set_tschchartinfodefaultinterbargap(float value);
  public:

  // optional float tschchartinfodefaultgridbackgroundopacity = 19;
  bool has_tschchartinfodefaultgridbackgroundopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundopacity() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundopacity();
  float tschchartinfodefaultgridbackgroundopacity() const;
  void set_tschchartinfodefaultgridbackgroundopacity(float value);
  private:
  float _internal_tschchartinfodefaultgridbackgroundopacity() const;
  void _internal_set_tschchartinfodefaultgridbackgroundopacity(float value);
  public:

  // optional float tschchartinfodefaultborderopacity = 22;
  bool has_tschchartinfodefaultborderopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultborderopacity() const;
  public:
  void clear_tschchartinfodefaultborderopacity();
  float tschchartinfodefaultborderopacity() const;
  void set_tschchartinfodefaultborderopacity(float value);
  private:
  float _internal_tschchartinfodefaultborderopacity() const;
  void _internal_set_tschchartinfodefaultborderopacity(float value);
  public:

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
  bool has_tschchartinfodefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaulttitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaulttitleparagraphstyleindex() const;
  void set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
  bool has_tschchartinfodefaultdeprecatedmainfontnamedsize() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedmainfontnamedsize() const;
  public:
  void clear_tschchartinfodefaultdeprecatedmainfontnamedsize();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedmainfontnamedsize() const;
  void set_tschchartinfodefaultdeprecatedmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdeprecatedmainfontnamedsize() const;
  void _internal_set_tschchartinfodefaultdeprecatedmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
  bool has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const;
  void set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
  bool has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const;
  void set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
  bool has_tschchartinfodefaultdeprecatedtrendlineequationopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlineequationopacity() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlineequationopacity();
  float tschchartinfodefaultdeprecatedtrendlineequationopacity() const;
  void set_tschchartinfodefaultdeprecatedtrendlineequationopacity(float value);
  private:
  float _internal_tschchartinfodefaultdeprecatedtrendlineequationopacity() const;
  void _internal_set_tschchartinfodefaultdeprecatedtrendlineequationopacity(float value);
  public:

  // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
  bool has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const;
  public:
  void clear_tschchartinfodefaultdeprecatedtrendlinersquaredopacity();
  float tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const;
  void set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(float value);
  private:
  float _internal_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const;
  void _internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(float value);
  public:

  // optional bool tschchartinfodefaultshowborder = 15;
  bool has_tschchartinfodefaultshowborder() const;
  private:
  bool _internal_has_tschchartinfodefaultshowborder() const;
  public:
  void clear_tschchartinfodefaultshowborder();
  bool tschchartinfodefaultshowborder() const;
  void set_tschchartinfodefaultshowborder(bool value);
  private:
  bool _internal_tschchartinfodefaultshowborder() const;
  void _internal_set_tschchartinfodefaultshowborder(bool value);
  public:

  // optional bool tschchartinfodefaultcombinelayers = 20;
  bool has_tschchartinfodefaultcombinelayers() const;
  private:
  bool _internal_has_tschchartinfodefaultcombinelayers() const;
  public:
  void clear_tschchartinfodefaultcombinelayers();
  bool tschchartinfodefaultcombinelayers() const;
  void set_tschchartinfodefaultcombinelayers(bool value);
  private:
  bool _internal_tschchartinfodefaultcombinelayers() const;
  void _internal_set_tschchartinfodefaultcombinelayers(bool value);
  public:

  // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
  bool has_tschchartinfodefaultdeprecated3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecated3dbeveledges() const;
  public:
  void clear_tschchartinfodefaultdeprecated3dbeveledges();
  bool tschchartinfodefaultdeprecated3dbeveledges() const;
  void set_tschchartinfodefaultdeprecated3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfodefaultdeprecated3dbeveledges() const;
  void _internal_set_tschchartinfodefaultdeprecated3dbeveledges(bool value);
  public:

  // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
  bool has_tschchartinfopiedeprecated3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfopiedeprecated3dbeveledges() const;
  public:
  void clear_tschchartinfopiedeprecated3dbeveledges();
  bool tschchartinfopiedeprecated3dbeveledges() const;
  void set_tschchartinfopiedeprecated3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfopiedeprecated3dbeveledges() const;
  void _internal_set_tschchartinfopiedeprecated3dbeveledges(bool value);
  public:

  // optional bool tschchartinfobardeprecated3dbeveledges = 328;
  bool has_tschchartinfobardeprecated3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfobardeprecated3dbeveledges() const;
  public:
  void clear_tschchartinfobardeprecated3dbeveledges();
  bool tschchartinfobardeprecated3dbeveledges() const;
  void set_tschchartinfobardeprecated3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfobardeprecated3dbeveledges() const;
  void _internal_set_tschchartinfobardeprecated3dbeveledges(bool value);
  public:

  // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
  bool has_tschchartinfocolumndeprecated3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfocolumndeprecated3dbeveledges() const;
  public:
  void clear_tschchartinfocolumndeprecated3dbeveledges();
  bool tschchartinfocolumndeprecated3dbeveledges() const;
  void set_tschchartinfocolumndeprecated3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfocolumndeprecated3dbeveledges() const;
  void _internal_set_tschchartinfocolumndeprecated3dbeveledges(bool value);
  public:

  // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
  bool has_tschchartinfodefaultdeprecated3dbarshape() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecated3dbarshape() const;
  public:
  void clear_tschchartinfodefaultdeprecated3dbarshape();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecated3dbarshape() const;
  void set_tschchartinfodefaultdeprecated3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdeprecated3dbarshape() const;
  void _internal_set_tschchartinfodefaultdeprecated3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefault3dchartopacity = 335;
  bool has_tschchartinfodefault3dchartopacity() const;
  private:
  bool _internal_has_tschchartinfodefault3dchartopacity() const;
  public:
  void clear_tschchartinfodefault3dchartopacity();
  float tschchartinfodefault3dchartopacity() const;
  void set_tschchartinfodefault3dchartopacity(float value);
  private:
  float _internal_tschchartinfodefault3dchartopacity() const;
  void _internal_set_tschchartinfodefault3dchartopacity(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartinfodefaultdeprecatedmainfontfamily_;
  ::TSS::StyleArchive* super_;
  ::TSD::FillArchive* tschchartinfodefaultbackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke_;
  ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfodefaultborderstroke_;
  ::TSP::Color* tschchartinfodefaulttitlecolor_;
  ::TSD::ShadowArchive* tschchartinfodefaultbordershadow_;
  ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  ::TSD::ShadowArchive* tschchartinfobardeprecated3dshadow_;
  ::TSD::ShadowArchive* tschchartinfocolumndeprecated3dshadow_;
  ::TSD::ShadowArchive* tschchartinfolinedeprecated3dshadow_;
  ::TSD::ShadowArchive* tschchartinfoareadeprecated3dshadow_;
  ::TSD::ShadowArchive* tschchartinfopiedeprecated3dshadow_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage_;
  float tschchartinfodefaultintersetgap_;
  float tschchartinfodefaultinterbargap_;
  float tschchartinfodefaultgridbackgroundopacity_;
  float tschchartinfodefaultborderopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaulttitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedmainfontnamedsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_;
  float tschchartinfodefaultdeprecatedtrendlineequationopacity_;
  float tschchartinfodefaultdeprecatedtrendlinersquaredopacity_;
  bool tschchartinfodefaultshowborder_;
  bool tschchartinfodefaultcombinelayers_;
  bool tschchartinfodefaultdeprecated3dbeveledges_;
  bool tschchartinfopiedeprecated3dbeveledges_;
  bool tschchartinfobardeprecated3dbeveledges_;
  bool tschchartinfocolumndeprecated3dbeveledges_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecated3dbarshape_;
  float tschchartinfodefault3dchartopacity_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartNonStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartNonStyleArchive) */ {
 public:
  inline ChartNonStyleArchive() : ChartNonStyleArchive(nullptr) {}
  ~ChartNonStyleArchive() override;
  explicit constexpr ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartNonStyleArchive(const ChartNonStyleArchive& from);
  ChartNonStyleArchive(ChartNonStyleArchive&& from) noexcept
    : ChartNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartNonStyleArchive& operator=(const ChartNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartNonStyleArchive& operator=(ChartNonStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartNonStyleArchive*>(
               &_ChartNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChartNonStyleArchive& a, ChartNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartNonStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartNonStyleArchive* New() const final {
    return CreateMaybeMessage<ChartNonStyleArchive>(nullptr);
  }

  ChartNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartNonStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartNonStyleArchive& from);
  void MergeFrom(const ChartNonStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartNonStyleArchive";
  }
  protected:
  explicit ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfodefaulttitleFieldNumber = 10,
    kSuperFieldNumber = 1,
    kTschchartinfodefault3DrotationFieldNumber = 300,
    kTschchartinfodefault3DscaleFieldNumber = 301,
    kTschchartinfocolumn3DscaleFieldNumber = 302,
    kTschchartinfobar3DscaleFieldNumber = 303,
    kTschchartinfoline3DscaleFieldNumber = 304,
    kTschchartinfoarea3DscaleFieldNumber = 305,
    kTschchartinfopie3DscaleFieldNumber = 306,
    kTschchartinfodefault3DviewportFieldNumber = 313,
    kTschchartinfodefaultdeprecated3DlightingpackageFieldNumber = 320,
    kTschchartinfocolumndeprecated3DlightingpackageFieldNumber = 321,
    kTschchartinfobardeprecated3DlightingpackageFieldNumber = 322,
    kTschchartinfolinedeprecated3DlightingpackageFieldNumber = 323,
    kTschchartinfoareadeprecated3DlightingpackageFieldNumber = 324,
    kTschchartinfopiedeprecated3DlightingpackageFieldNumber = 325,
    kTschchartinfodefaultpiestartangleFieldNumber = 12,
    kTschchartinfodefaultdeprecatedagainmainfontnamedsizeFieldNumber = 25,
    kTschchartinfodefault3DbarshapeFieldNumber = 336,
    kTschchartinfodefaultshowlegendFieldNumber = 11,
    kTschchartinfodefaultshowtitleFieldNumber = 13,
    kTschchartinfodefaultskiphiddendataFieldNumber = 326,
    kTschchartinfodefault3DbeveledgesFieldNumber = 327,
    kTschchartinfodefault3DintersetdepthgapFieldNumber = 331,
  };
  // optional string tschchartinfodefaulttitle = 10;
  bool has_tschchartinfodefaulttitle() const;
  private:
  bool _internal_has_tschchartinfodefaulttitle() const;
  public:
  void clear_tschchartinfodefaulttitle();
  const std::string& tschchartinfodefaulttitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartinfodefaulttitle();
  std::string* release_tschchartinfodefaulttitle();
  void set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle);
  private:
  const std::string& _internal_tschchartinfodefaulttitle() const;
  void _internal_set_tschchartinfodefaulttitle(const std::string& value);
  std::string* _internal_mutable_tschchartinfodefaulttitle();
  public:

  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
  bool has_tschchartinfodefault3drotation() const;
  private:
  bool _internal_has_tschchartinfodefault3drotation() const;
  public:
  void clear_tschchartinfodefault3drotation();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3drotation();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3drotation();
  void set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3drotation() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3drotation();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3drotation(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3drotation();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
  bool has_tschchartinfodefault3dscale() const;
  private:
  bool _internal_has_tschchartinfodefault3dscale() const;
  public:
  void clear_tschchartinfodefault3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dscale();
  void set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
  bool has_tschchartinfocolumn3dscale() const;
  private:
  bool _internal_has_tschchartinfocolumn3dscale() const;
  public:
  void clear_tschchartinfocolumn3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfocolumn3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfocolumn3dscale();
  void set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfocolumn3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfocolumn3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfocolumn3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
  bool has_tschchartinfobar3dscale() const;
  private:
  bool _internal_has_tschchartinfobar3dscale() const;
  public:
  void clear_tschchartinfobar3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfobar3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfobar3dscale();
  void set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfobar3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfobar3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfobar3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
  bool has_tschchartinfoline3dscale() const;
  private:
  bool _internal_has_tschchartinfoline3dscale() const;
  public:
  void clear_tschchartinfoline3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfoline3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoline3dscale();
  void set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoline3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoline3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoline3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
  bool has_tschchartinfoarea3dscale() const;
  private:
  bool _internal_has_tschchartinfoarea3dscale() const;
  public:
  void clear_tschchartinfoarea3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfoarea3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoarea3dscale();
  void set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoarea3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoarea3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoarea3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
  bool has_tschchartinfopie3dscale() const;
  private:
  bool _internal_has_tschchartinfopie3dscale() const;
  public:
  void clear_tschchartinfopie3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfopie3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfopie3dscale();
  void set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfopie3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfopie3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfopie3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
  bool has_tschchartinfodefault3dviewport() const;
  private:
  bool _internal_has_tschchartinfodefault3dviewport() const;
  public:
  void clear_tschchartinfodefault3dviewport();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dviewport();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dviewport();
  void set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dviewport() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dviewport();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dviewport();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
  bool has_tschchartinfodefaultdeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfodefaultdeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefaultdeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfodefaultdeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfodefaultdeprecated3dlightingpackage();
  void set_allocated_tschchartinfodefaultdeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefaultdeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfodefaultdeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultdeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefaultdeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfodefaultdeprecated3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
  bool has_tschchartinfocolumndeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfocolumndeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfocolumndeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumndeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfocolumndeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfocolumndeprecated3dlightingpackage();
  void set_allocated_tschchartinfocolumndeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumndeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfocolumndeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfocolumndeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumndeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumndeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfocolumndeprecated3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
  bool has_tschchartinfobardeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfobardeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfobardeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobardeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfobardeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfobardeprecated3dlightingpackage();
  void set_allocated_tschchartinfobardeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobardeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfobardeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfobardeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfobardeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfobardeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfobardeprecated3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
  bool has_tschchartinfolinedeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfolinedeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfolinedeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfolinedeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfolinedeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfolinedeprecated3dlightingpackage();
  void set_allocated_tschchartinfolinedeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfolinedeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfolinedeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfolinedeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfolinedeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfolinedeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfolinedeprecated3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
  bool has_tschchartinfoareadeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoareadeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfoareadeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoareadeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoareadeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoareadeprecated3dlightingpackage();
  void set_allocated_tschchartinfoareadeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoareadeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoareadeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoareadeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoareadeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoareadeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoareadeprecated3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
  bool has_tschchartinfopiedeprecated3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfopiedeprecated3dlightingpackage() const;
  public:
  void clear_tschchartinfopiedeprecated3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopiedeprecated3dlightingpackage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfopiedeprecated3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfopiedeprecated3dlightingpackage();
  void set_allocated_tschchartinfopiedeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopiedeprecated3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfopiedeprecated3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfopiedeprecated3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfopiedeprecated3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfopiedeprecated3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfopiedeprecated3dlightingpackage();

  // optional float tschchartinfodefaultpiestartangle = 12;
  bool has_tschchartinfodefaultpiestartangle() const;
  private:
  bool _internal_has_tschchartinfodefaultpiestartangle() const;
  public:
  void clear_tschchartinfodefaultpiestartangle();
  float tschchartinfodefaultpiestartangle() const;
  void set_tschchartinfodefaultpiestartangle(float value);
  private:
  float _internal_tschchartinfodefaultpiestartangle() const;
  void _internal_set_tschchartinfodefaultpiestartangle(float value);
  public:

  // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
  bool has_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const;
  public:
  void clear_tschchartinfodefaultdeprecatedagainmainfontnamedsize();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize() const;
  void set_tschchartinfodefaultdeprecatedagainmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const;
  void _internal_set_tschchartinfodefaultdeprecatedagainmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefault3dbarshape = 336;
  bool has_tschchartinfodefault3dbarshape() const;
  private:
  bool _internal_has_tschchartinfodefault3dbarshape() const;
  public:
  void clear_tschchartinfodefault3dbarshape();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefault3dbarshape() const;
  void set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefault3dbarshape() const;
  void _internal_set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartinfodefaultshowlegend = 11;
  bool has_tschchartinfodefaultshowlegend() const;
  private:
  bool _internal_has_tschchartinfodefaultshowlegend() const;
  public:
  void clear_tschchartinfodefaultshowlegend();
  bool tschchartinfodefaultshowlegend() const;
  void set_tschchartinfodefaultshowlegend(bool value);
  private:
  bool _internal_tschchartinfodefaultshowlegend() const;
  void _internal_set_tschchartinfodefaultshowlegend(bool value);
  public:

  // optional bool tschchartinfodefaultshowtitle = 13;
  bool has_tschchartinfodefaultshowtitle() const;
  private:
  bool _internal_has_tschchartinfodefaultshowtitle() const;
  public:
  void clear_tschchartinfodefaultshowtitle();
  bool tschchartinfodefaultshowtitle() const;
  void set_tschchartinfodefaultshowtitle(bool value);
  private:
  bool _internal_tschchartinfodefaultshowtitle() const;
  void _internal_set_tschchartinfodefaultshowtitle(bool value);
  public:

  // optional bool tschchartinfodefaultskiphiddendata = 326;
  bool has_tschchartinfodefaultskiphiddendata() const;
  private:
  bool _internal_has_tschchartinfodefaultskiphiddendata() const;
  public:
  void clear_tschchartinfodefaultskiphiddendata();
  bool tschchartinfodefaultskiphiddendata() const;
  void set_tschchartinfodefaultskiphiddendata(bool value);
  private:
  bool _internal_tschchartinfodefaultskiphiddendata() const;
  void _internal_set_tschchartinfodefaultskiphiddendata(bool value);
  public:

  // optional bool tschchartinfodefault3dbeveledges = 327;
  bool has_tschchartinfodefault3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfodefault3dbeveledges() const;
  public:
  void clear_tschchartinfodefault3dbeveledges();
  bool tschchartinfodefault3dbeveledges() const;
  void set_tschchartinfodefault3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfodefault3dbeveledges() const;
  void _internal_set_tschchartinfodefault3dbeveledges(bool value);
  public:

  // optional float tschchartinfodefault3dintersetdepthgap = 331;
  bool has_tschchartinfodefault3dintersetdepthgap() const;
  private:
  bool _internal_has_tschchartinfodefault3dintersetdepthgap() const;
  public:
  void clear_tschchartinfodefault3dintersetdepthgap();
  float tschchartinfodefault3dintersetdepthgap() const;
  void set_tschchartinfodefault3dintersetdepthgap(float value);
  private:
  float _internal_tschchartinfodefault3dintersetdepthgap() const;
  void _internal_set_tschchartinfodefault3dintersetdepthgap(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartinfodefaulttitle_;
  ::TSS::StyleArchive* super_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefaultdeprecated3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumndeprecated3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfobardeprecated3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfolinedeprecated3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoareadeprecated3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfopiedeprecated3dlightingpackage_;
  float tschchartinfodefaultpiestartangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefault3dbarshape_;
  bool tschchartinfodefaultshowlegend_;
  bool tschchartinfodefaultshowtitle_;
  bool tschchartinfodefaultskiphiddendata_;
  bool tschchartinfodefault3dbeveledges_;
  float tschchartinfodefault3dintersetdepthgap_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class LegendStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.LegendStyleArchive) */ {
 public:
  inline LegendStyleArchive() : LegendStyleArchive(nullptr) {}
  ~LegendStyleArchive() override;
  explicit constexpr LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendStyleArchive(const LegendStyleArchive& from);
  LegendStyleArchive(LegendStyleArchive&& from) noexcept
    : LegendStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendStyleArchive& operator=(const LegendStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendStyleArchive& operator=(LegendStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendStyleArchive*>(
               &_LegendStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LegendStyleArchive& a, LegendStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendStyleArchive* New() const final {
    return CreateMaybeMessage<LegendStyleArchive>(nullptr);
  }

  LegendStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LegendStyleArchive& from);
  void MergeFrom(const LegendStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.LegendStyleArchive";
  }
  protected:
  explicit LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTschlegendmodeldefaultfillFieldNumber = 10,
    kTschlegendmodeldefaultstrokeFieldNumber = 11,
    kTschlegendmodeldefaultshadowFieldNumber = 14,
    kTschlegendmodeldefaultopacityFieldNumber = 15,
    kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber = 16,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
  bool has_tschlegendmodeldefaultfill() const;
  private:
  bool _internal_has_tschlegendmodeldefaultfill() const;
  public:
  void clear_tschlegendmodeldefaultfill();
  const ::TSD::FillArchive& tschlegendmodeldefaultfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschlegendmodeldefaultfill();
  ::TSD::FillArchive* mutable_tschlegendmodeldefaultfill();
  void set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschlegendmodeldefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschlegendmodeldefaultfill();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
      ::TSD::FillArchive* tschlegendmodeldefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschlegendmodeldefaultfill();

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
  bool has_tschlegendmodeldefaultstroke() const;
  private:
  bool _internal_has_tschlegendmodeldefaultstroke() const;
  public:
  void clear_tschlegendmodeldefaultstroke();
  const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschlegendmodeldefaultstroke();
  ::TSD::StrokeArchive* mutable_tschlegendmodeldefaultstroke();
  void set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschlegendmodeldefaultstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschlegendmodeldefaultstroke();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
      ::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschlegendmodeldefaultstroke();

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
  bool has_tschlegendmodeldefaultshadow() const;
  private:
  bool _internal_has_tschlegendmodeldefaultshadow() const;
  public:
  void clear_tschlegendmodeldefaultshadow();
  const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschlegendmodeldefaultshadow();
  ::TSD::ShadowArchive* mutable_tschlegendmodeldefaultshadow();
  void set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschlegendmodeldefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschlegendmodeldefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
      ::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschlegendmodeldefaultshadow();

  // optional float tschlegendmodeldefaultopacity = 15;
  bool has_tschlegendmodeldefaultopacity() const;
  private:
  bool _internal_has_tschlegendmodeldefaultopacity() const;
  public:
  void clear_tschlegendmodeldefaultopacity();
  float tschlegendmodeldefaultopacity() const;
  void set_tschlegendmodeldefaultopacity(float value);
  private:
  float _internal_tschlegendmodeldefaultopacity() const;
  void _internal_set_tschlegendmodeldefaultopacity(float value);
  public:

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
  bool has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschlegendmodeldefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.LegendStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSD::FillArchive* tschlegendmodeldefaultfill_;
  ::TSD::StrokeArchive* tschlegendmodeldefaultstroke_;
  ::TSD::ShadowArchive* tschlegendmodeldefaultshadow_;
  float tschlegendmodeldefaultopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodeldefaultlabelparagraphstyleindex_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class LegendNonStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.LegendNonStyleArchive) */ {
 public:
  inline LegendNonStyleArchive() : LegendNonStyleArchive(nullptr) {}
  ~LegendNonStyleArchive() override;
  explicit constexpr LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendNonStyleArchive(const LegendNonStyleArchive& from);
  LegendNonStyleArchive(LegendNonStyleArchive&& from) noexcept
    : LegendNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendNonStyleArchive& operator=(const LegendNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendNonStyleArchive& operator=(LegendNonStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendNonStyleArchive*>(
               &_LegendNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LegendNonStyleArchive& a, LegendNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendNonStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendNonStyleArchive* New() const final {
    return CreateMaybeMessage<LegendNonStyleArchive>(nullptr);
  }

  LegendNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendNonStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LegendNonStyleArchive& from);
  void MergeFrom(const LegendNonStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.LegendNonStyleArchive";
  }
  protected:
  explicit LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.LegendNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartAxisStyleArchive) */ {
 public:
  inline ChartAxisStyleArchive() : ChartAxisStyleArchive(nullptr) {}
  ~ChartAxisStyleArchive() override;
  explicit constexpr ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisStyleArchive(const ChartAxisStyleArchive& from);
  ChartAxisStyleArchive(ChartAxisStyleArchive&& from) noexcept
    : ChartAxisStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisStyleArchive& operator=(const ChartAxisStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisStyleArchive& operator=(ChartAxisStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisStyleArchive*>(
               &_ChartAxisStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChartAxisStyleArchive& a, ChartAxisStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartAxisStyleArchive* New() const final {
    return CreateMaybeMessage<ChartAxisStyleArchive>(nullptr);
  }

  ChartAxisStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartAxisStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartAxisStyleArchive& from);
  void MergeFrom(const ChartAxisStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartAxisStyleArchive";
  }
  protected:
  explicit ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTschchartaxisvaluemajorgridlinestrokeFieldNumber = 12,
    kTschchartaxisvalueminorgridlinestrokeFieldNumber = 13,
    kTschchartaxisvaluemajorgridlineshadowFieldNumber = 21,
    kTschchartaxisvalueminorgridlineshadowFieldNumber = 22,
    kTschchartaxiscategorymajorgridlinestrokeFieldNumber = 52,
    kTschchartaxiscategoryminorgridlinestrokeFieldNumber = 53,
    kTschchartaxiscategorymajorgridlineshadowFieldNumber = 63,
    kTschchartaxiscategoryminorgridlineshadowFieldNumber = 64,
    kTschchartaxisvalue3DgridlinestrokeFieldNumber = 331,
    kTschchartaxiscategory3DgridlinestrokeFieldNumber = 332,
    kTschchartaxisvalueshowmajorgridlinesFieldNumber = 10,
    kTschchartaxisvalueshowminorgridlinesFieldNumber = 11,
    kTschchartaxisvalueshowmajortickmarksFieldNumber = 15,
    kTschchartaxisvalueshowminortickmarksFieldNumber = 16,
    kTschchartaxisvaluetickmarklocationFieldNumber = 14,
    kTschchartaxisvaluelabelsorientationFieldNumber = 17,
    kTschchartaxisvaluemajorgridlineopacityFieldNumber = 23,
    kTschchartaxisvalueminorgridlineopacityFieldNumber = 24,
    kTschchartaxisvalueshowminimumlabelFieldNumber = 18,
    kTschchartaxisvalueshowaxisFieldNumber = 25,
    kTschchartaxiscategoryshowmajorgridlinesFieldNumber = 50,
    kTschchartaxiscategoryshowminorgridlinesFieldNumber = 51,
    kTschchartaxiscategorytickmarklocationFieldNumber = 54,
    kTschchartaxiscategorylabelsorientationFieldNumber = 57,
    kTschchartaxiscategoryhorizontalspacingFieldNumber = 58,
    kTschchartaxiscategoryverticalspacingFieldNumber = 59,
    kTschchartaxiscategoryshowmajortickmarksFieldNumber = 55,
    kTschchartaxiscategoryshowminortickmarksFieldNumber = 56,
    kTschchartaxiscategoryshowlastlabelFieldNumber = 60,
    kTschchartaxiscategoryshowaxisFieldNumber = 67,
    kTschchartaxiscategorymajorgridlineopacityFieldNumber = 65,
    kTschchartaxiscategoryminorgridlineopacityFieldNumber = 66,
    kTschchartaxisdefaultlabelsorientationFieldNumber = 102,
    kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber = 110,
    kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber = 111,
    kTschchartaxisvaluetitleparagraphstyleindexFieldNumber = 112,
    kTschchartaxisvaluelabelparagraphstyleindexFieldNumber = 113,
    kTschchartaxiscategorytitleparagraphstyleindexFieldNumber = 114,
    kTschchartaxiscategorylabelparagraphstyleindexFieldNumber = 115,
    kTschchartaxisvalue3DgridlineopacityFieldNumber = 333,
    kTschchartaxiscategory3DgridlineopacityFieldNumber = 334,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
  bool has_tschchartaxisvaluemajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlinestroke() const;
  public:
  void clear_tschchartaxisvaluemajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvaluemajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvaluemajorgridlinestroke();
  void set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvaluemajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
  bool has_tschchartaxisvalueminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlinestroke() const;
  public:
  void clear_tschchartaxisvalueminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvalueminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalueminorgridlinestroke();
  void set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalueminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalueminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalueminorgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
  bool has_tschchartaxisvaluemajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineshadow() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxisvaluemajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvaluemajorgridlineshadow();
  void set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvaluemajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
  bool has_tschchartaxisvalueminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineshadow() const;
  public:
  void clear_tschchartaxisvalueminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxisvalueminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvalueminorgridlineshadow();
  void set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvalueminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvalueminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvalueminorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
  bool has_tschchartaxiscategorymajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategorymajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategorymajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategorymajorgridlinestroke();
  void set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategorymajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
  bool has_tschchartaxiscategoryminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategoryminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategoryminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategoryminorgridlinestroke();
  void set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategoryminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
  bool has_tschchartaxiscategorymajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxiscategorymajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategorymajorgridlineshadow();
  void set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategorymajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
  bool has_tschchartaxiscategoryminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxiscategoryminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategoryminorgridlineshadow();
  void set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategoryminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
  bool has_tschchartaxisvalue3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlinestroke() const;
  public:
  void clear_tschchartaxisvalue3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvalue3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalue3dgridlinestroke();
  void set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalue3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalue3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalue3dgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
  bool has_tschchartaxiscategory3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlinestroke() const;
  public:
  void clear_tschchartaxiscategory3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategory3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategory3dgridlinestroke();
  void set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategory3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategory3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategory3dgridlinestroke();

  // optional bool tschchartaxisvalueshowmajorgridlines = 10;
  bool has_tschchartaxisvalueshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowmajorgridlines();
  bool tschchartaxisvalueshowmajorgridlines() const;
  void set_tschchartaxisvalueshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajorgridlines() const;
  void _internal_set_tschchartaxisvalueshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowminorgridlines = 11;
  bool has_tschchartaxisvalueshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowminorgridlines();
  bool tschchartaxisvalueshowminorgridlines() const;
  void set_tschchartaxisvalueshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminorgridlines() const;
  void _internal_set_tschchartaxisvalueshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowmajortickmarks = 15;
  bool has_tschchartaxisvalueshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowmajortickmarks();
  bool tschchartaxisvalueshowmajortickmarks() const;
  void set_tschchartaxisvalueshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajortickmarks() const;
  void _internal_set_tschchartaxisvalueshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowminortickmarks = 16;
  bool has_tschchartaxisvalueshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowminortickmarks();
  bool tschchartaxisvalueshowminortickmarks() const;
  void set_tschchartaxisvalueshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminortickmarks() const;
  void _internal_set_tschchartaxisvalueshowminortickmarks(bool value);
  public:

  // optional int32 tschchartaxisvaluetickmarklocation = 14;
  bool has_tschchartaxisvaluetickmarklocation() const;
  private:
  bool _internal_has_tschchartaxisvaluetickmarklocation() const;
  public:
  void clear_tschchartaxisvaluetickmarklocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetickmarklocation() const;
  void set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluetickmarklocation() const;
  void _internal_set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartaxisvaluelabelsorientation = 17;
  bool has_tschchartaxisvaluelabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelsorientation() const;
  public:
  void clear_tschchartaxisvaluelabelsorientation();
  float tschchartaxisvaluelabelsorientation() const;
  void set_tschchartaxisvaluelabelsorientation(float value);
  private:
  float _internal_tschchartaxisvaluelabelsorientation() const;
  void _internal_set_tschchartaxisvaluelabelsorientation(float value);
  public:

  // optional float tschchartaxisvaluemajorgridlineopacity = 23;
  bool has_tschchartaxisvaluemajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineopacity() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineopacity();
  float tschchartaxisvaluemajorgridlineopacity() const;
  void set_tschchartaxisvaluemajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvaluemajorgridlineopacity() const;
  void _internal_set_tschchartaxisvaluemajorgridlineopacity(float value);
  public:

  // optional float tschchartaxisvalueminorgridlineopacity = 24;
  bool has_tschchartaxisvalueminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineopacity() const;
  public:
  void clear_tschchartaxisvalueminorgridlineopacity();
  float tschchartaxisvalueminorgridlineopacity() const;
  void set_tschchartaxisvalueminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalueminorgridlineopacity() const;
  void _internal_set_tschchartaxisvalueminorgridlineopacity(float value);
  public:

  // optional bool tschchartaxisvalueshowminimumlabel = 18;
  bool has_tschchartaxisvalueshowminimumlabel() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminimumlabel() const;
  public:
  void clear_tschchartaxisvalueshowminimumlabel();
  bool tschchartaxisvalueshowminimumlabel() const;
  void set_tschchartaxisvalueshowminimumlabel(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminimumlabel() const;
  void _internal_set_tschchartaxisvalueshowminimumlabel(bool value);
  public:

  // optional bool tschchartaxisvalueshowaxis = 25;
  bool has_tschchartaxisvalueshowaxis() const;
  private:
  bool _internal_has_tschchartaxisvalueshowaxis() const;
  public:
  void clear_tschchartaxisvalueshowaxis();
  bool tschchartaxisvalueshowaxis() const;
  void set_tschchartaxisvalueshowaxis(bool value);
  private:
  bool _internal_tschchartaxisvalueshowaxis() const;
  void _internal_set_tschchartaxisvalueshowaxis(bool value);
  public:

  // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
  bool has_tschchartaxiscategoryshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowmajorgridlines();
  bool tschchartaxiscategoryshowmajorgridlines() const;
  void set_tschchartaxiscategoryshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminorgridlines = 51;
  bool has_tschchartaxiscategoryshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowminorgridlines();
  bool tschchartaxiscategoryshowminorgridlines() const;
  void set_tschchartaxiscategoryshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowminorgridlines(bool value);
  public:

  // optional int32 tschchartaxiscategorytickmarklocation = 54;
  bool has_tschchartaxiscategorytickmarklocation() const;
  private:
  bool _internal_has_tschchartaxiscategorytickmarklocation() const;
  public:
  void clear_tschchartaxiscategorytickmarklocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytickmarklocation() const;
  void set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorytickmarklocation() const;
  void _internal_set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartaxiscategorylabelsorientation = 57;
  bool has_tschchartaxiscategorylabelsorientation() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelsorientation() const;
  public:
  void clear_tschchartaxiscategorylabelsorientation();
  float tschchartaxiscategorylabelsorientation() const;
  void set_tschchartaxiscategorylabelsorientation(float value);
  private:
  float _internal_tschchartaxiscategorylabelsorientation() const;
  void _internal_set_tschchartaxiscategorylabelsorientation(float value);
  public:

  // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
  bool has_tschchartaxiscategoryhorizontalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryhorizontalspacing() const;
  public:
  void clear_tschchartaxiscategoryhorizontalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryhorizontalspacing() const;
  void set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategoryhorizontalspacing() const;
  void _internal_set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategoryverticalspacing = 59;
  bool has_tschchartaxiscategoryverticalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryverticalspacing() const;
  public:
  void clear_tschchartaxiscategoryverticalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryverticalspacing() const;
  void set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategoryverticalspacing() const;
  void _internal_set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
  bool has_tschchartaxiscategoryshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowmajortickmarks();
  bool tschchartaxiscategoryshowmajortickmarks() const;
  void set_tschchartaxiscategoryshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminortickmarks = 56;
  bool has_tschchartaxiscategoryshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowminortickmarks();
  bool tschchartaxiscategoryshowminortickmarks() const;
  void set_tschchartaxiscategoryshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowminortickmarks(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlastlabel = 60;
  bool has_tschchartaxiscategoryshowlastlabel() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlastlabel() const;
  public:
  void clear_tschchartaxiscategoryshowlastlabel();
  bool tschchartaxiscategoryshowlastlabel() const;
  void set_tschchartaxiscategoryshowlastlabel(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlastlabel() const;
  void _internal_set_tschchartaxiscategoryshowlastlabel(bool value);
  public:

  // optional bool tschchartaxiscategoryshowaxis = 67;
  bool has_tschchartaxiscategoryshowaxis() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowaxis() const;
  public:
  void clear_tschchartaxiscategoryshowaxis();
  bool tschchartaxiscategoryshowaxis() const;
  void set_tschchartaxiscategoryshowaxis(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowaxis() const;
  void _internal_set_tschchartaxiscategoryshowaxis(bool value);
  public:

  // optional float tschchartaxiscategorymajorgridlineopacity = 65;
  bool has_tschchartaxiscategorymajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineopacity();
  float tschchartaxiscategorymajorgridlineopacity() const;
  void set_tschchartaxiscategorymajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategorymajorgridlineopacity() const;
  void _internal_set_tschchartaxiscategorymajorgridlineopacity(float value);
  public:

  // optional float tschchartaxiscategoryminorgridlineopacity = 66;
  bool has_tschchartaxiscategoryminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineopacity();
  float tschchartaxiscategoryminorgridlineopacity() const;
  void set_tschchartaxiscategoryminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategoryminorgridlineopacity() const;
  void _internal_set_tschchartaxiscategoryminorgridlineopacity(float value);
  public:

  // optional float tschchartaxisdefaultlabelsorientation = 102;
  bool has_tschchartaxisdefaultlabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelsorientation() const;
  public:
  void clear_tschchartaxisdefaultlabelsorientation();
  float tschchartaxisdefaultlabelsorientation() const;
  void set_tschchartaxisdefaultlabelsorientation(float value);
  private:
  float _internal_tschchartaxisdefaultlabelsorientation() const;
  void _internal_set_tschchartaxisdefaultlabelsorientation(float value);
  public:

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
  bool has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaulttitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaulttitleparagraphstyleindex() const;
  void set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
  bool has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultlabelparagraphstyleindex() const;
  void set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
  bool has_tschchartaxisvaluetitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluetitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluetitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetitleparagraphstyleindex() const;
  void set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluetitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
  bool has_tschchartaxisvaluelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluelabelparagraphstyleindex() const;
  void set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluelabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
  bool has_tschchartaxiscategorytitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorytitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorytitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytitleparagraphstyleindex() const;
  void set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorytitleparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
  bool has_tschchartaxiscategorylabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorylabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorylabelparagraphstyleindex() const;
  void set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorylabelparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartaxisvalue3dgridlineopacity = 333;
  bool has_tschchartaxisvalue3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlineopacity() const;
  public:
  void clear_tschchartaxisvalue3dgridlineopacity();
  float tschchartaxisvalue3dgridlineopacity() const;
  void set_tschchartaxisvalue3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalue3dgridlineopacity() const;
  void _internal_set_tschchartaxisvalue3dgridlineopacity(float value);
  public:

  // optional float tschchartaxiscategory3dgridlineopacity = 334;
  bool has_tschchartaxiscategory3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlineopacity() const;
  public:
  void clear_tschchartaxiscategory3dgridlineopacity();
  float tschchartaxiscategory3dgridlineopacity() const;
  void set_tschchartaxiscategory3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategory3dgridlineopacity() const;
  void _internal_set_tschchartaxiscategory3dgridlineopacity(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartAxisStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke_;
  bool tschchartaxisvalueshowmajorgridlines_;
  bool tschchartaxisvalueshowminorgridlines_;
  bool tschchartaxisvalueshowmajortickmarks_;
  bool tschchartaxisvalueshowminortickmarks_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetickmarklocation_;
  float tschchartaxisvaluelabelsorientation_;
  float tschchartaxisvaluemajorgridlineopacity_;
  float tschchartaxisvalueminorgridlineopacity_;
  bool tschchartaxisvalueshowminimumlabel_;
  bool tschchartaxisvalueshowaxis_;
  bool tschchartaxiscategoryshowmajorgridlines_;
  bool tschchartaxiscategoryshowminorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytickmarklocation_;
  float tschchartaxiscategorylabelsorientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryhorizontalspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryverticalspacing_;
  bool tschchartaxiscategoryshowmajortickmarks_;
  bool tschchartaxiscategoryshowminortickmarks_;
  bool tschchartaxiscategoryshowlastlabel_;
  bool tschchartaxiscategoryshowaxis_;
  float tschchartaxiscategorymajorgridlineopacity_;
  float tschchartaxiscategoryminorgridlineopacity_;
  float tschchartaxisdefaultlabelsorientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaulttitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorylabelparagraphstyleindex_;
  float tschchartaxisvalue3dgridlineopacity_;
  float tschchartaxiscategory3dgridlineopacity_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisNonStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartAxisNonStyleArchive) */ {
 public:
  inline ChartAxisNonStyleArchive() : ChartAxisNonStyleArchive(nullptr) {}
  ~ChartAxisNonStyleArchive() override;
  explicit constexpr ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from);
  ChartAxisNonStyleArchive(ChartAxisNonStyleArchive&& from) noexcept
    : ChartAxisNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisNonStyleArchive& operator=(const ChartAxisNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisNonStyleArchive& operator=(ChartAxisNonStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisNonStyleArchive*>(
               &_ChartAxisNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChartAxisNonStyleArchive& a, ChartAxisNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartAxisNonStyleArchive* New() const final {
    return CreateMaybeMessage<ChartAxisNonStyleArchive>(nullptr);
  }

  ChartAxisNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartAxisNonStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartAxisNonStyleArchive& from);
  void MergeFrom(const ChartAxisNonStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartAxisNonStyleArchive";
  }
  protected:
  explicit ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxisvaluetitleFieldNumber = 56,
    kTschchartaxiscategorytitleFieldNumber = 103,
    kSuperFieldNumber = 1,
    kTschchartaxisdefaultuserminFieldNumber = 11,
    kTschchartaxisdefaultusermaxFieldNumber = 12,
    kTschchartaxisdefaultnumberformatFieldNumber = 13,
    kTschchartaxisvaluenumberofminorgridlinesFieldNumber = 50,
    kTschchartaxisvaluescaleFieldNumber = 51,
    kTschchartaxisvaluenumberofdecadesFieldNumber = 52,
    kTschchartaxisvaluenumberofmajorgridlinesFieldNumber = 55,
    kTschchartaxisdefaultshowlabelsFieldNumber = 14,
    kTschchartaxisvalueshowlabelsFieldNumber = 53,
    kTschchartaxisvalueshowtitleFieldNumber = 54,
    kTschchartaxiscategoryshowlabelsFieldNumber = 100,
    kTschchartaxiscategoryshowserieslabelsFieldNumber = 101,
    kTschchartaxiscategoryshowtitleFieldNumber = 102,
    kTschchartaxiscategoryplottoedgesFieldNumber = 116,
    kTschchartaxisdefaultnumberformattypeFieldNumber = 120,
    kTschchartaxisdefault3DlabelpositionFieldNumber = 336,
  };
  // optional string tschchartaxisvaluetitle = 56;
  bool has_tschchartaxisvaluetitle() const;
  private:
  bool _internal_has_tschchartaxisvaluetitle() const;
  public:
  void clear_tschchartaxisvaluetitle();
  const std::string& tschchartaxisvaluetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxisvaluetitle();
  std::string* release_tschchartaxisvaluetitle();
  void set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle);
  private:
  const std::string& _internal_tschchartaxisvaluetitle() const;
  void _internal_set_tschchartaxisvaluetitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxisvaluetitle();
  public:

  // optional string tschchartaxiscategorytitle = 103;
  bool has_tschchartaxiscategorytitle() const;
  private:
  bool _internal_has_tschchartaxiscategorytitle() const;
  public:
  void clear_tschchartaxiscategorytitle();
  const std::string& tschchartaxiscategorytitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxiscategorytitle();
  std::string* release_tschchartaxiscategorytitle();
  void set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle);
  private:
  const std::string& _internal_tschchartaxiscategorytitle() const;
  void _internal_set_tschchartaxiscategorytitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxiscategorytitle();
  public:

  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
  bool has_tschchartaxisdefaultusermin() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermin() const;
  public:
  void clear_tschchartaxisdefaultusermin();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermin();
  void set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermin() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermin();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermin();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
  bool has_tschchartaxisdefaultusermax() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermax() const;
  public:
  void clear_tschchartaxisdefaultusermax();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermax();
  void set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermax() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermax();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermax();

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
  bool has_tschchartaxisdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformat() const;
  public:
  void clear_tschchartaxisdefaultnumberformat();
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartaxisdefaultnumberformat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartsNumberFormatArchive* release_tschchartaxisdefaultnumberformat();
  ::TSCH::PreUFF::ChartsNumberFormatArchive* mutable_tschchartaxisdefaultnumberformat();
  void set_allocated_tschchartaxisdefaultnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartaxisdefaultnumberformat);
  private:
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& _internal_tschchartaxisdefaultnumberformat() const;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* _internal_mutable_tschchartaxisdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
      ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartaxisdefaultnumberformat);
  ::TSCH::PreUFF::ChartsNumberFormatArchive* unsafe_arena_release_tschchartaxisdefaultnumberformat();

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
  bool has_tschchartaxisvaluenumberofminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofminorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofminorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofminorgridlines() const;
  void set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofminorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluescale = 51;
  bool has_tschchartaxisvaluescale() const;
  private:
  bool _internal_has_tschchartaxisvaluescale() const;
  public:
  void clear_tschchartaxisvaluescale();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluescale() const;
  void set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluescale() const;
  void _internal_set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluenumberofdecades = 52;
  bool has_tschchartaxisvaluenumberofdecades() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofdecades() const;
  public:
  void clear_tschchartaxisvaluenumberofdecades();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofdecades() const;
  void set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofdecades() const;
  void _internal_set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
  bool has_tschchartaxisvaluenumberofmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofmajorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofmajorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofmajorgridlines() const;
  void set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofmajorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartaxisdefaultshowlabels = 14;
  bool has_tschchartaxisdefaultshowlabels() const;
  private:
  bool _internal_has_tschchartaxisdefaultshowlabels() const;
  public:
  void clear_tschchartaxisdefaultshowlabels();
  bool tschchartaxisdefaultshowlabels() const;
  void set_tschchartaxisdefaultshowlabels(bool value);
  private:
  bool _internal_tschchartaxisdefaultshowlabels() const;
  void _internal_set_tschchartaxisdefaultshowlabels(bool value);
  public:

  // optional bool tschchartaxisvalueshowlabels = 53;
  bool has_tschchartaxisvalueshowlabels() const;
  private:
  bool _internal_has_tschchartaxisvalueshowlabels() const;
  public:
  void clear_tschchartaxisvalueshowlabels();
  bool tschchartaxisvalueshowlabels() const;
  void set_tschchartaxisvalueshowlabels(bool value);
  private:
  bool _internal_tschchartaxisvalueshowlabels() const;
  void _internal_set_tschchartaxisvalueshowlabels(bool value);
  public:

  // optional bool tschchartaxisvalueshowtitle = 54;
  bool has_tschchartaxisvalueshowtitle() const;
  private:
  bool _internal_has_tschchartaxisvalueshowtitle() const;
  public:
  void clear_tschchartaxisvalueshowtitle();
  bool tschchartaxisvalueshowtitle() const;
  void set_tschchartaxisvalueshowtitle(bool value);
  private:
  bool _internal_tschchartaxisvalueshowtitle() const;
  void _internal_set_tschchartaxisvalueshowtitle(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlabels = 100;
  bool has_tschchartaxiscategoryshowlabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlabels() const;
  public:
  void clear_tschchartaxiscategoryshowlabels();
  bool tschchartaxiscategoryshowlabels() const;
  void set_tschchartaxiscategoryshowlabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlabels() const;
  void _internal_set_tschchartaxiscategoryshowlabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowserieslabels = 101;
  bool has_tschchartaxiscategoryshowserieslabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowserieslabels() const;
  public:
  void clear_tschchartaxiscategoryshowserieslabels();
  bool tschchartaxiscategoryshowserieslabels() const;
  void set_tschchartaxiscategoryshowserieslabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowserieslabels() const;
  void _internal_set_tschchartaxiscategoryshowserieslabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowtitle = 102;
  bool has_tschchartaxiscategoryshowtitle() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowtitle() const;
  public:
  void clear_tschchartaxiscategoryshowtitle();
  bool tschchartaxiscategoryshowtitle() const;
  void set_tschchartaxiscategoryshowtitle(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowtitle() const;
  void _internal_set_tschchartaxiscategoryshowtitle(bool value);
  public:

  // optional bool tschchartaxiscategoryplottoedges = 116;
  bool has_tschchartaxiscategoryplottoedges() const;
  private:
  bool _internal_has_tschchartaxiscategoryplottoedges() const;
  public:
  void clear_tschchartaxiscategoryplottoedges();
  bool tschchartaxiscategoryplottoedges() const;
  void set_tschchartaxiscategoryplottoedges(bool value);
  private:
  bool _internal_tschchartaxiscategoryplottoedges() const;
  void _internal_set_tschchartaxiscategoryplottoedges(bool value);
  public:

  // optional int32 tschchartaxisdefaultnumberformattype = 120;
  bool has_tschchartaxisdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformattype() const;
  public:
  void clear_tschchartaxisdefaultnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultnumberformattype() const;
  void set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaultnumberformattype() const;
  void _internal_set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisdefault3dlabelposition = 336;
  bool has_tschchartaxisdefault3dlabelposition() const;
  private:
  bool _internal_has_tschchartaxisdefault3dlabelposition() const;
  public:
  void clear_tschchartaxisdefault3dlabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefault3dlabelposition() const;
  void set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefault3dlabelposition() const;
  void _internal_set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartAxisNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxisvaluetitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxiscategorytitle_;
  ::TSS::StyleArchive* super_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax_;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartaxisdefaultnumberformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofminorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluescale_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofdecades_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofmajorgridlines_;
  bool tschchartaxisdefaultshowlabels_;
  bool tschchartaxisvalueshowlabels_;
  bool tschchartaxisvalueshowtitle_;
  bool tschchartaxiscategoryshowlabels_;
  bool tschchartaxiscategoryshowserieslabels_;
  bool tschchartaxiscategoryshowtitle_;
  bool tschchartaxiscategoryplottoedges_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultnumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefault3dlabelposition_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartSeriesStyleArchive) */ {
 public:
  inline ChartSeriesStyleArchive() : ChartSeriesStyleArchive(nullptr) {}
  ~ChartSeriesStyleArchive() override;
  explicit constexpr ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from);
  ChartSeriesStyleArchive(ChartSeriesStyleArchive&& from) noexcept
    : ChartSeriesStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesStyleArchive& operator=(const ChartSeriesStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesStyleArchive& operator=(ChartSeriesStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesStyleArchive*>(
               &_ChartSeriesStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChartSeriesStyleArchive& a, ChartSeriesStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSeriesStyleArchive* New() const final {
    return CreateMaybeMessage<ChartSeriesStyleArchive>(nullptr);
  }

  ChartSeriesStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSeriesStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartSeriesStyleArchive& from);
  void MergeFrom(const ChartSeriesStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartSeriesStyleArchive";
  }
  protected:
  explicit ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTschchartseriesbarfillFieldNumber = 10,
    kTschchartseriesbarstrokeFieldNumber = 11,
    kTschchartserieslinestrokeFieldNumber = 16,
    kTschchartserieslinesymbolfillFieldNumber = 17,
    kTschchartserieslinesymbolstrokeFieldNumber = 18,
    kTschchartseriesareafillFieldNumber = 25,
    kTschchartseriesareastrokeFieldNumber = 26,
    kTschchartseriesareasymbolfillFieldNumber = 29,
    kTschchartseriesareasymbolstrokeFieldNumber = 30,
    kTschchartseriespiefillFieldNumber = 35,
    kTschchartseriespiestrokeFieldNumber = 36,
    kTschchartseriesscatterstrokeFieldNumber = 40,
    kTschchartseriesscattersymbolfillFieldNumber = 41,
    kTschchartseriesscattersymbolstrokeFieldNumber = 42,
    kTschchartseriesdefaultfillFieldNumber = 50,
    kTschchartseriescolumnfillFieldNumber = 62,
    kTschchartseriespieshadowFieldNumber = 100,
    kTschchartseriesbarshadowFieldNumber = 101,
    kTschchartseriesareashadowFieldNumber = 102,
    kTschchartseriesscattershadowFieldNumber = 103,
    kTschchartseriesmixedlineshadowFieldNumber = 104,
    kTschchartseriesmixedareashadowFieldNumber = 105,
    kTschchartseriesmixedcolumnshadowFieldNumber = 106,
    kTschchartserieslineshadowFieldNumber = 107,
    kTschchartseriesdefaultshadowFieldNumber = 108,
    kTschchartseriesmixedcolumnfillFieldNumber = 130,
    kTschchartseriesmixedareafillFieldNumber = 131,
    kTschchartseriesmixedcolumnstrokeFieldNumber = 132,
    kTschchartseriesmixedlinestrokeFieldNumber = 133,
    kTschchartseriesmixedareastrokeFieldNumber = 134,
    kTschchartseriesmixedlinesymbolfillFieldNumber = 137,
    kTschchartseriesmixedareasymbolfillFieldNumber = 138,
    kTschchartseriesmixedlinesymbolstrokeFieldNumber = 139,
    kTschchartseriesmixedareasymbolstrokeFieldNumber = 140,
    kTschchartseriesdefaulttrendlinestrokeFieldNumber = 167,
    kTschchartseriesdefaulttrendlineshadowFieldNumber = 168,
    kTschchartseriesdefaulterrorbarshadowFieldNumber = 180,
    kTschchartseriesdefaulterrorbarstrokeFieldNumber = 181,
    kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber = 182,
    kTschchartseriesdefaulterrorbarlineendFieldNumber = 183,
    kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber = 184,
    kTschchartseriesbubblesymbolfillFieldNumber = 207,
    kTschchartseriesbubblestrokeFieldNumber = 211,
    kTschchartseriesbubblesymbolstrokeFieldNumber = 212,
    kTschchartseriesbubbleshadowFieldNumber = 214,
    kTschchartseriesdefaultdeprecated3DfillFieldNumber = 300,
    kTschchartseriesbardeprecated3DfillFieldNumber = 301,
    kTschchartseriescolumndeprecated3DfillFieldNumber = 302,
    kTschchartserieslinedeprecated3DfillFieldNumber = 303,
    kTschchartseriesareadeprecated3DfillFieldNumber = 304,
    kTschchartseriespiedeprecated3DfillFieldNumber = 305,
    kTschchartseries3DbarshadowFieldNumber = 306,
    kTschchartseries3DcolumnshadowFieldNumber = 307,
    kTschchartseries3DlineshadowFieldNumber = 308,
    kTschchartseries3DareashadowFieldNumber = 309,
    kTschchartseries3DpieshadowFieldNumber = 310,
    kTschchartseries3DbarfillFieldNumber = 320,
    kTschchartseries3DcolumnfillFieldNumber = 321,
    kTschchartseries3DlinefillFieldNumber = 322,
    kTschchartseries3DareafillFieldNumber = 323,
    kTschchartseries3DpiefillFieldNumber = 324,
    kTschchartseriesbarvaluelabelpositionFieldNumber = 13,
    kTschchartserieslinesymbolsizeFieldNumber = 20,
    kTschchartserieslinevaluelabelpositionFieldNumber = 22,
    kTschchartseriesareavaluelabelpositionFieldNumber = 28,
    kTschchartseriesareasymbolsizeFieldNumber = 32,
    kTschchartseriesscattersymbolsizeFieldNumber = 44,
    kTschchartseriesscattervaluelabelpositionFieldNumber = 46,
    kTschchartseriesdefaultvaluelabelpositionFieldNumber = 52,
    kTschchartseriesbubblevaluelabelpositionFieldNumber = 213,
    kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber = 110,
    kTschchartseriesbarlabelparagraphstyleindexFieldNumber = 111,
    kTschchartserieslinelabelparagraphstyleindexFieldNumber = 112,
    kTschchartseriesarealabelparagraphstyleindexFieldNumber = 113,
    kTschchartseriespielabelparagraphstyleindexFieldNumber = 114,
    kTschchartseriesmixedlabelparagraphstyleindexFieldNumber = 115,
    kTschchartseriesdefaultopacityFieldNumber = 116,
    kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber = 119,
    kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber = 120,
    kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber = 121,
    kTschchartserieslinesymbolfilluseseriesfillFieldNumber = 122,
    kTschchartseriesareasymbolfilluseseriesfillFieldNumber = 123,
    kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber = 124,
    kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber = 125,
    kTschchartseriespiedeprecatedserieslabelsonFieldNumber = 60,
    kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber = 215,
    kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber = 117,
    kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber = 118,
    kTschchartseriesmixedlinesymbolsizeFieldNumber = 135,
    kTschchartseriesmixedareasymbolsizeFieldNumber = 136,
    kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber = 141,
    kTschchartseriesmixedlinevaluelabelpositionFieldNumber = 142,
    kTschchartseriesmixedareavaluelabelpositionFieldNumber = 143,
    kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber = 150,
    kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber = 151,
    kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber = 153,
    kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber = 154,
    kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber = 155,
    kTschchartseriesstackedbarvaluelabelpositionFieldNumber = 156,
    kTschchartseriesstackedareavaluelabelpositionFieldNumber = 157,
    kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber = 201,
    kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber = 202,
    kTschchartseriesdefaulttrendlineequationopacityFieldNumber = 205,
    kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber = 206,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSD.FillArchive tschchartseriesbarfill = 10;
  bool has_tschchartseriesbarfill() const;
  private:
  bool _internal_has_tschchartseriesbarfill() const;
  public:
  void clear_tschchartseriesbarfill();
  const ::TSD::FillArchive& tschchartseriesbarfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesbarfill();
  ::TSD::FillArchive* mutable_tschchartseriesbarfill();
  void set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarfill(
      ::TSD::FillArchive* tschchartseriesbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbarfill();

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
  bool has_tschchartseriesbarstroke() const;
  private:
  bool _internal_has_tschchartseriesbarstroke() const;
  public:
  void clear_tschchartseriesbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesbarstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbarstroke();
  void set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarstroke(
      ::TSD::StrokeArchive* tschchartseriesbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbarstroke();

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
  bool has_tschchartserieslinestroke() const;
  private:
  bool _internal_has_tschchartserieslinestroke() const;
  public:
  void clear_tschchartserieslinestroke();
  const ::TSD::StrokeArchive& tschchartserieslinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieslinestroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinestroke();
  void set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinestroke(
      ::TSD::StrokeArchive* tschchartserieslinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinestroke();

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
  bool has_tschchartserieslinesymbolfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfill() const;
  public:
  void clear_tschchartserieslinesymbolfill();
  const ::TSD::FillArchive& tschchartserieslinesymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartserieslinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartserieslinesymbolfill();
  void set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartserieslinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartserieslinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
      ::TSD::FillArchive* tschchartserieslinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartserieslinesymbolfill();

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
  bool has_tschchartserieslinesymbolstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolstroke() const;
  public:
  void clear_tschchartserieslinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieslinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinesymbolstroke();
  void set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
      ::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinesymbolstroke();

  // optional .TSD.FillArchive tschchartseriesareafill = 25;
  bool has_tschchartseriesareafill() const;
  private:
  bool _internal_has_tschchartseriesareafill() const;
  public:
  void clear_tschchartseriesareafill();
  const ::TSD::FillArchive& tschchartseriesareafill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesareafill();
  ::TSD::FillArchive* mutable_tschchartseriesareafill();
  void set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareafill(
      ::TSD::FillArchive* tschchartseriesareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareafill();

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
  bool has_tschchartseriesareastroke() const;
  private:
  bool _internal_has_tschchartseriesareastroke() const;
  public:
  void clear_tschchartseriesareastroke();
  const ::TSD::StrokeArchive& tschchartseriesareastroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareastroke();
  void set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareastroke(
      ::TSD::StrokeArchive* tschchartseriesareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareastroke();

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
  bool has_tschchartseriesareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfill() const;
  public:
  void clear_tschchartseriesareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesareasymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesareasymbolfill();
  void set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
      ::TSD::FillArchive* tschchartseriesareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareasymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
  bool has_tschchartseriesareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolstroke() const;
  public:
  void clear_tschchartseriesareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareasymbolstroke();
  void set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareasymbolstroke();

  // optional .TSD.FillArchive tschchartseriespiefill = 35;
  bool has_tschchartseriespiefill() const;
  private:
  bool _internal_has_tschchartseriespiefill() const;
  public:
  void clear_tschchartseriespiefill();
  const ::TSD::FillArchive& tschchartseriespiefill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriespiefill();
  ::TSD::FillArchive* mutable_tschchartseriespiefill();
  void set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriespiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriespiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiefill(
      ::TSD::FillArchive* tschchartseriespiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriespiefill();

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
  bool has_tschchartseriespiestroke() const;
  private:
  bool _internal_has_tschchartseriespiestroke() const;
  public:
  void clear_tschchartseriespiestroke();
  const ::TSD::StrokeArchive& tschchartseriespiestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriespiestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriespiestroke();
  void set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriespiestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriespiestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiestroke(
      ::TSD::StrokeArchive* tschchartseriespiestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriespiestroke();

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
  bool has_tschchartseriesscatterstroke() const;
  private:
  bool _internal_has_tschchartseriesscatterstroke() const;
  public:
  void clear_tschchartseriesscatterstroke();
  const ::TSD::StrokeArchive& tschchartseriesscatterstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesscatterstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscatterstroke();
  void set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscatterstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscatterstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscatterstroke(
      ::TSD::StrokeArchive* tschchartseriesscatterstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscatterstroke();

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
  bool has_tschchartseriesscattersymbolfill() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfill() const;
  public:
  void clear_tschchartseriesscattersymbolfill();
  const ::TSD::FillArchive& tschchartseriesscattersymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesscattersymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesscattersymbolfill();
  void set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesscattersymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesscattersymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
      ::TSD::FillArchive* tschchartseriesscattersymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesscattersymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
  bool has_tschchartseriesscattersymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolstroke() const;
  public:
  void clear_tschchartseriesscattersymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesscattersymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscattersymbolstroke();
  void set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscattersymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscattersymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscattersymbolstroke();

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
  bool has_tschchartseriesdefaultfill() const;
  private:
  bool _internal_has_tschchartseriesdefaultfill() const;
  public:
  void clear_tschchartseriesdefaultfill();
  const ::TSD::FillArchive& tschchartseriesdefaultfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesdefaultfill();
  ::TSD::FillArchive* mutable_tschchartseriesdefaultfill();
  void set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesdefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesdefaultfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultfill(
      ::TSD::FillArchive* tschchartseriesdefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesdefaultfill();

  // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
  bool has_tschchartseriescolumnfill() const;
  private:
  bool _internal_has_tschchartseriescolumnfill() const;
  public:
  void clear_tschchartseriescolumnfill();
  const ::TSD::FillArchive& tschchartseriescolumnfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriescolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriescolumnfill();
  void set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriescolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriescolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriescolumnfill(
      ::TSD::FillArchive* tschchartseriescolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriescolumnfill();

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
  bool has_tschchartseriespieshadow() const;
  private:
  bool _internal_has_tschchartseriespieshadow() const;
  public:
  void clear_tschchartseriespieshadow();
  const ::TSD::ShadowArchive& tschchartseriespieshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriespieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriespieshadow();
  void set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriespieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriespieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriespieshadow(
      ::TSD::ShadowArchive* tschchartseriespieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriespieshadow();

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
  bool has_tschchartseriesbarshadow() const;
  private:
  bool _internal_has_tschchartseriesbarshadow() const;
  public:
  void clear_tschchartseriesbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesbarshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbarshadow();
  void set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarshadow(
      ::TSD::ShadowArchive* tschchartseriesbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbarshadow();

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
  bool has_tschchartseriesareashadow() const;
  private:
  bool _internal_has_tschchartseriesareashadow() const;
  public:
  void clear_tschchartseriesareashadow();
  const ::TSD::ShadowArchive& tschchartseriesareashadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesareashadow();
  void set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareashadow(
      ::TSD::ShadowArchive* tschchartseriesareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesareashadow();

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
  bool has_tschchartseriesscattershadow() const;
  private:
  bool _internal_has_tschchartseriesscattershadow() const;
  public:
  void clear_tschchartseriesscattershadow();
  const ::TSD::ShadowArchive& tschchartseriesscattershadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesscattershadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesscattershadow();
  void set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesscattershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesscattershadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattershadow(
      ::TSD::ShadowArchive* tschchartseriesscattershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesscattershadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
  bool has_tschchartseriesmixedlineshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshadow() const;
  public:
  void clear_tschchartseriesmixedlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedlineshadow();
  void set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedlineshadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
  bool has_tschchartseriesmixedareashadow() const;
  private:
  bool _internal_has_tschchartseriesmixedareashadow() const;
  public:
  void clear_tschchartseriesmixedareashadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedareashadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedareashadow();
  void set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
      ::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedareashadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
  bool has_tschchartseriesmixedcolumnshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnshadow() const;
  public:
  void clear_tschchartseriesmixedcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedcolumnshadow();
  void set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedcolumnshadow();

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
  bool has_tschchartserieslineshadow() const;
  private:
  bool _internal_has_tschchartserieslineshadow() const;
  public:
  void clear_tschchartserieslineshadow();
  const ::TSD::ShadowArchive& tschchartserieslineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartserieslineshadow();
  ::TSD::ShadowArchive* mutable_tschchartserieslineshadow();
  void set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartserieslineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartserieslineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartserieslineshadow(
      ::TSD::ShadowArchive* tschchartserieslineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartserieslineshadow();

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
  bool has_tschchartseriesdefaultshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaultshadow() const;
  public:
  void clear_tschchartseriesdefaultshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaultshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaultshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaultshadow();
  void set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaultshadow();

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
  bool has_tschchartseriesmixedcolumnfill() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnfill() const;
  public:
  void clear_tschchartseriesmixedcolumnfill();
  const ::TSD::FillArchive& tschchartseriesmixedcolumnfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedcolumnfill();
  void set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
      ::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedcolumnfill();

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
  bool has_tschchartseriesmixedareafill() const;
  private:
  bool _internal_has_tschchartseriesmixedareafill() const;
  public:
  void clear_tschchartseriesmixedareafill();
  const ::TSD::FillArchive& tschchartseriesmixedareafill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedareafill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareafill();
  void set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareafill(
      ::TSD::FillArchive* tschchartseriesmixedareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareafill();

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
  bool has_tschchartseriesmixedcolumnstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnstroke() const;
  public:
  void clear_tschchartseriesmixedcolumnstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedcolumnstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedcolumnstroke();
  void set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedcolumnstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedcolumnstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedcolumnstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
  bool has_tschchartseriesmixedlinestroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinestroke() const;
  public:
  void clear_tschchartseriesmixedlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinestroke();
  void set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinestroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
  bool has_tschchartseriesmixedareastroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareastroke() const;
  public:
  void clear_tschchartseriesmixedareastroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareastroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareastroke();
  void set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareastroke();

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
  bool has_tschchartseriesmixedlinesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedlinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedlinesymbolfill();
  void set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedlinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedlinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolfill();

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
  bool has_tschchartseriesmixedareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareasymbolfill();
  void set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareasymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
  bool has_tschchartseriesmixedlinesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedlinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinesymbolstroke();
  void set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
  bool has_tschchartseriesmixedareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareasymbolstroke();
  void set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareasymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
  bool has_tschchartseriesdefaulttrendlinestroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinestroke() const;
  public:
  void clear_tschchartseriesdefaulttrendlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulttrendlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulttrendlinestroke();
  void set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulttrendlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulttrendlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulttrendlinestroke();

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
  bool has_tschchartseriesdefaulttrendlineshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshadow() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaulttrendlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulttrendlineshadow();
  void set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulttrendlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulttrendlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulttrendlineshadow();

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
  bool has_tschchartseriesdefaulterrorbarshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarshadow() const;
  public:
  void clear_tschchartseriesdefaulterrorbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaulterrorbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulterrorbarshadow();
  void set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulterrorbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulterrorbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarshadow();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
  bool has_tschchartseriesdefaulterrorbarstroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstroke() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstroke();
  void set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstroke();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
  bool has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstrokescatterx();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstrokescatterx();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  void set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstrokescatterx() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx();

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
  bool has_tschchartseriesdefaulterrorbarlineend() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineend() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineend();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineend();
  void set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineend();

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
  bool has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineendscatterx();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineendscatterx();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  void set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineendscatterx() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx();

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
  bool has_tschchartseriesbubblesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfill() const;
  public:
  void clear_tschchartseriesbubblesymbolfill();
  const ::TSD::FillArchive& tschchartseriesbubblesymbolfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesbubblesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesbubblesymbolfill();
  void set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbubblesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbubblesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
      ::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbubblesymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
  bool has_tschchartseriesbubblestroke() const;
  private:
  bool _internal_has_tschchartseriesbubblestroke() const;
  public:
  void clear_tschchartseriesbubblestroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblestroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbubblestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblestroke();
  void set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblestroke(
      ::TSD::StrokeArchive* tschchartseriesbubblestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblestroke();

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
  bool has_tschchartseriesbubblesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbubblesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblesymbolstroke();
  void set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblesymbolstroke();

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
  bool has_tschchartseriesbubbleshadow() const;
  private:
  bool _internal_has_tschchartseriesbubbleshadow() const;
  public:
  void clear_tschchartseriesbubbleshadow();
  const ::TSD::ShadowArchive& tschchartseriesbubbleshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesbubbleshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbubbleshadow();
  void set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbubbleshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbubbleshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
      ::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbubbleshadow();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
  bool has_tschchartseriesdefaultdeprecated3dfill() const;
  private:
  bool _internal_has_tschchartseriesdefaultdeprecated3dfill() const;
  public:
  void clear_tschchartseriesdefaultdeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesdefaultdeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartseriesdefaultdeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartseriesdefaultdeprecated3dfill();
  void set_allocated_tschchartseriesdefaultdeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesdefaultdeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartseriesdefaultdeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartseriesdefaultdeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultdeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesdefaultdeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartseriesdefaultdeprecated3dfill();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
  bool has_tschchartseriesbardeprecated3dfill() const;
  private:
  bool _internal_has_tschchartseriesbardeprecated3dfill() const;
  public:
  void clear_tschchartseriesbardeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesbardeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartseriesbardeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartseriesbardeprecated3dfill();
  void set_allocated_tschchartseriesbardeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesbardeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartseriesbardeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartseriesbardeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbardeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesbardeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartseriesbardeprecated3dfill();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
  bool has_tschchartseriescolumndeprecated3dfill() const;
  private:
  bool _internal_has_tschchartseriescolumndeprecated3dfill() const;
  public:
  void clear_tschchartseriescolumndeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriescolumndeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartseriescolumndeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartseriescolumndeprecated3dfill();
  void set_allocated_tschchartseriescolumndeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriescolumndeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartseriescolumndeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartseriescolumndeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriescolumndeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriescolumndeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartseriescolumndeprecated3dfill();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
  bool has_tschchartserieslinedeprecated3dfill() const;
  private:
  bool _internal_has_tschchartserieslinedeprecated3dfill() const;
  public:
  void clear_tschchartserieslinedeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartserieslinedeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartserieslinedeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartserieslinedeprecated3dfill();
  void set_allocated_tschchartserieslinedeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartserieslinedeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartserieslinedeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartserieslinedeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinedeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartserieslinedeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartserieslinedeprecated3dfill();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
  bool has_tschchartseriesareadeprecated3dfill() const;
  private:
  bool _internal_has_tschchartseriesareadeprecated3dfill() const;
  public:
  void clear_tschchartseriesareadeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesareadeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartseriesareadeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartseriesareadeprecated3dfill();
  void set_allocated_tschchartseriesareadeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesareadeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartseriesareadeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartseriesareadeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareadeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesareadeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartseriesareadeprecated3dfill();

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
  bool has_tschchartseriespiedeprecated3dfill() const;
  private:
  bool _internal_has_tschchartseriespiedeprecated3dfill() const;
  public:
  void clear_tschchartseriespiedeprecated3dfill();
  const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriespiedeprecated3dfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::DEPRECATEDChart3DFillArchive* release_tschchartseriespiedeprecated3dfill();
  ::TSCH::DEPRECATEDChart3DFillArchive* mutable_tschchartseriespiedeprecated3dfill();
  void set_allocated_tschchartseriespiedeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriespiedeprecated3dfill);
  private:
  const ::TSCH::DEPRECATEDChart3DFillArchive& _internal_tschchartseriespiedeprecated3dfill() const;
  ::TSCH::DEPRECATEDChart3DFillArchive* _internal_mutable_tschchartseriespiedeprecated3dfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiedeprecated3dfill(
      ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriespiedeprecated3dfill);
  ::TSCH::DEPRECATEDChart3DFillArchive* unsafe_arena_release_tschchartseriespiedeprecated3dfill();

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
  bool has_tschchartseries3dbarshadow() const;
  private:
  bool _internal_has_tschchartseries3dbarshadow() const;
  public:
  void clear_tschchartseries3dbarshadow();
  const ::TSD::ShadowArchive& tschchartseries3dbarshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dbarshadow();
  void set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarshadow(
      ::TSD::ShadowArchive* tschchartseries3dbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dbarshadow();

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
  bool has_tschchartseries3dcolumnshadow() const;
  private:
  bool _internal_has_tschchartseries3dcolumnshadow() const;
  public:
  void clear_tschchartseries3dcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dcolumnshadow();
  void set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
      ::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dcolumnshadow();

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
  bool has_tschchartseries3dlineshadow() const;
  private:
  bool _internal_has_tschchartseries3dlineshadow() const;
  public:
  void clear_tschchartseries3dlineshadow();
  const ::TSD::ShadowArchive& tschchartseries3dlineshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dlineshadow();
  void set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlineshadow(
      ::TSD::ShadowArchive* tschchartseries3dlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dlineshadow();

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
  bool has_tschchartseries3dareashadow() const;
  private:
  bool _internal_has_tschchartseries3dareashadow() const;
  public:
  void clear_tschchartseries3dareashadow();
  const ::TSD::ShadowArchive& tschchartseries3dareashadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dareashadow();
  void set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareashadow(
      ::TSD::ShadowArchive* tschchartseries3dareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dareashadow();

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
  bool has_tschchartseries3dpieshadow() const;
  private:
  bool _internal_has_tschchartseries3dpieshadow() const;
  public:
  void clear_tschchartseries3dpieshadow();
  const ::TSD::ShadowArchive& tschchartseries3dpieshadow() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dpieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dpieshadow();
  void set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dpieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dpieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpieshadow(
      ::TSD::ShadowArchive* tschchartseries3dpieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dpieshadow();

  // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
  bool has_tschchartseries3dbarfill() const;
  private:
  bool _internal_has_tschchartseries3dbarfill() const;
  public:
  void clear_tschchartseries3dbarfill();
  const ::TSD::FillArchive& tschchartseries3dbarfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dbarfill();
  ::TSD::FillArchive* mutable_tschchartseries3dbarfill();
  void set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarfill(
      ::TSD::FillArchive* tschchartseries3dbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dbarfill();

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
  bool has_tschchartseries3dcolumnfill() const;
  private:
  bool _internal_has_tschchartseries3dcolumnfill() const;
  public:
  void clear_tschchartseries3dcolumnfill();
  const ::TSD::FillArchive& tschchartseries3dcolumnfill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseries3dcolumnfill();
  void set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
      ::TSD::FillArchive* tschchartseries3dcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dcolumnfill();

  // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
  bool has_tschchartseries3dlinefill() const;
  private:
  bool _internal_has_tschchartseries3dlinefill() const;
  public:
  void clear_tschchartseries3dlinefill();
  const ::TSD::FillArchive& tschchartseries3dlinefill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dlinefill();
  ::TSD::FillArchive* mutable_tschchartseries3dlinefill();
  void set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dlinefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dlinefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlinefill(
      ::TSD::FillArchive* tschchartseries3dlinefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dlinefill();

  // optional .TSD.FillArchive tschchartseries3dareafill = 323;
  bool has_tschchartseries3dareafill() const;
  private:
  bool _internal_has_tschchartseries3dareafill() const;
  public:
  void clear_tschchartseries3dareafill();
  const ::TSD::FillArchive& tschchartseries3dareafill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dareafill();
  ::TSD::FillArchive* mutable_tschchartseries3dareafill();
  void set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareafill(
      ::TSD::FillArchive* tschchartseries3dareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dareafill();

  // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
  bool has_tschchartseries3dpiefill() const;
  private:
  bool _internal_has_tschchartseries3dpiefill() const;
  public:
  void clear_tschchartseries3dpiefill();
  const ::TSD::FillArchive& tschchartseries3dpiefill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dpiefill();
  ::TSD::FillArchive* mutable_tschchartseries3dpiefill();
  void set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dpiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dpiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpiefill(
      ::TSD::FillArchive* tschchartseries3dpiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dpiefill();

  // optional int32 tschchartseriesbarvaluelabelposition = 13;
  bool has_tschchartseriesbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesbarvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarvaluelabelposition() const;
  void set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbarvaluelabelposition() const;
  void _internal_set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartserieslinesymbolsize = 20;
  bool has_tschchartserieslinesymbolsize() const;
  private:
  bool _internal_has_tschchartserieslinesymbolsize() const;
  public:
  void clear_tschchartserieslinesymbolsize();
  float tschchartserieslinesymbolsize() const;
  void set_tschchartserieslinesymbolsize(float value);
  private:
  float _internal_tschchartserieslinesymbolsize() const;
  void _internal_set_tschchartserieslinesymbolsize(float value);
  public:

  // optional int32 tschchartserieslinevaluelabelposition = 22;
  bool has_tschchartserieslinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartserieslinevaluelabelposition() const;
  public:
  void clear_tschchartserieslinevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinevaluelabelposition() const;
  void set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinevaluelabelposition() const;
  void _internal_set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesareavaluelabelposition = 28;
  bool has_tschchartseriesareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesareavaluelabelposition() const;
  public:
  void clear_tschchartseriesareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareavaluelabelposition() const;
  void set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareavaluelabelposition() const;
  void _internal_set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesareasymbolsize = 32;
  bool has_tschchartseriesareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesareasymbolsize() const;
  public:
  void clear_tschchartseriesareasymbolsize();
  float tschchartseriesareasymbolsize() const;
  void set_tschchartseriesareasymbolsize(float value);
  private:
  float _internal_tschchartseriesareasymbolsize() const;
  void _internal_set_tschchartseriesareasymbolsize(float value);
  public:

  // optional float tschchartseriesscattersymbolsize = 44;
  bool has_tschchartseriesscattersymbolsize() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolsize() const;
  public:
  void clear_tschchartseriesscattersymbolsize();
  float tschchartseriesscattersymbolsize() const;
  void set_tschchartseriesscattersymbolsize(float value);
  private:
  float _internal_tschchartseriesscattersymbolsize() const;
  void _internal_set_tschchartseriesscattersymbolsize(float value);
  public:

  // optional int32 tschchartseriesscattervaluelabelposition = 46;
  bool has_tschchartseriesscattervaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesscattervaluelabelposition() const;
  public:
  void clear_tschchartseriesscattervaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelposition() const;
  void set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscattervaluelabelposition() const;
  void _internal_set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
  bool has_tschchartseriesdefaultvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesdefaultvaluelabelposition() const;
  public:
  void clear_tschchartseriesdefaultvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelposition() const;
  void set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultvaluelabelposition() const;
  void _internal_set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  bool has_tschchartseriesbubblevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbubblevaluelabelposition() const;
  public:
  void clear_tschchartseriesbubblevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelposition() const;
  void set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblevaluelabelposition() const;
  void _internal_set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
  bool has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultlabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
  bool has_tschchartseriesbarlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbarlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbarlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarlabelparagraphstyleindex() const;
  void set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbarlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
  bool has_tschchartserieslinelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartserieslinelabelparagraphstyleindex() const;
  public:
  void clear_tschchartserieslinelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelabelparagraphstyleindex() const;
  void set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinelabelparagraphstyleindex() const;
  void _internal_set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
  bool has_tschchartseriesarealabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesarealabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesarealabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesarealabelparagraphstyleindex() const;
  void set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesarealabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
  bool has_tschchartseriespielabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespielabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespielabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespielabelparagraphstyleindex() const;
  void set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespielabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
  bool has_tschchartseriesmixedlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlabelparagraphstyleindex() const;
  void set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaultopacity = 116;
  bool has_tschchartseriesdefaultopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaultopacity() const;
  public:
  void clear_tschchartseriesdefaultopacity();
  float tschchartseriesdefaultopacity() const;
  void set_tschchartseriesdefaultopacity(float value);
  private:
  float _internal_tschchartseriesdefaultopacity() const;
  void _internal_set_tschchartseriesdefaultopacity(float value);
  public:

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
  bool has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesscattersymbolfilluseseriesstroke();
  bool tschchartseriesscattersymbolfilluseseriesstroke() const;
  void set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesscattersymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
  bool has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesstroke();
  bool tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
  bool has_tschchartserieslinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesfill();
  bool tschchartserieslinesymbolfilluseseriesfill() const;
  void set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
  bool has_tschchartseriesareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesfill();
  bool tschchartseriesareasymbolfilluseseriesfill() const;
  void set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesfill();
  bool tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
  bool has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesfill();
  bool tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
  bool has_tschchartseriespiedeprecatedserieslabelson() const;
  private:
  bool _internal_has_tschchartseriespiedeprecatedserieslabelson() const;
  public:
  void clear_tschchartseriespiedeprecatedserieslabelson();
  bool tschchartseriespiedeprecatedserieslabelson() const;
  void set_tschchartseriespiedeprecatedserieslabelson(bool value);
  private:
  bool _internal_tschchartseriespiedeprecatedserieslabelson() const;
  void _internal_set_tschchartseriespiedeprecatedserieslabelson(bool value);
  public:

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
  bool has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolfilluseseriesstroke();
  bool tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
  bool has_tschchartserieslinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesstroke();
  bool tschchartserieslinesymbolfilluseseriesstroke() const;
  void set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
  bool has_tschchartseriesareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesstroke();
  bool tschchartseriesareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  public:

  // optional float tschchartseriesmixedlinesymbolsize = 135;
  bool has_tschchartseriesmixedlinesymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolsize() const;
  public:
  void clear_tschchartseriesmixedlinesymbolsize();
  float tschchartseriesmixedlinesymbolsize() const;
  void set_tschchartseriesmixedlinesymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedlinesymbolsize() const;
  void _internal_set_tschchartseriesmixedlinesymbolsize(float value);
  public:

  // optional float tschchartseriesmixedareasymbolsize = 136;
  bool has_tschchartseriesmixedareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolsize() const;
  public:
  void clear_tschchartseriesmixedareasymbolsize();
  float tschchartseriesmixedareasymbolsize() const;
  void set_tschchartseriesmixedareasymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedareasymbolsize() const;
  void _internal_set_tschchartseriesmixedareasymbolsize(float value);
  public:

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
  bool has_tschchartseriesmixedcolumnvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnvaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedcolumnvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedcolumnvaluelabelposition() const;
  void set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedcolumnvaluelabelposition() const;
  void _internal_set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
  bool has_tschchartseriesmixedlinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedlinevaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedlinevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinevaluelabelposition() const;
  void set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinevaluelabelposition() const;
  void _internal_set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
  bool has_tschchartseriesmixedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareavaluelabelposition() const;
  void set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedareavaluelabelposition() const;
  void _internal_set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
  bool has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
  bool has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbaroutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
  bool has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesareaoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
  bool has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespieoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
  bool has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
  bool has_tschchartseriesstackedbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedbarvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarvaluelabelposition() const;
  void set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedbarvaluelabelposition() const;
  void _internal_set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
  bool has_tschchartseriesstackedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareavaluelabelposition() const;
  void set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedareavaluelabelposition() const;
  void _internal_set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
  bool has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
  bool has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
  bool has_tschchartseriesdefaulttrendlineequationopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationopacity();
  float tschchartseriesdefaulttrendlineequationopacity() const;
  void set_tschchartseriesdefaulttrendlineequationopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationopacity(float value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  bool has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredopacity();
  float tschchartseriesdefaulttrendlinersquaredopacity() const;
  void set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartSeriesStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<4> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TSD::FillArchive* tschchartseriesbarfill_;
  ::TSD::StrokeArchive* tschchartseriesbarstroke_;
  ::TSD::StrokeArchive* tschchartserieslinestroke_;
  ::TSD::FillArchive* tschchartserieslinesymbolfill_;
  ::TSD::StrokeArchive* tschchartserieslinesymbolstroke_;
  ::TSD::FillArchive* tschchartseriesareafill_;
  ::TSD::StrokeArchive* tschchartseriesareastroke_;
  ::TSD::FillArchive* tschchartseriesareasymbolfill_;
  ::TSD::StrokeArchive* tschchartseriesareasymbolstroke_;
  ::TSD::FillArchive* tschchartseriespiefill_;
  ::TSD::StrokeArchive* tschchartseriespiestroke_;
  ::TSD::StrokeArchive* tschchartseriesscatterstroke_;
  ::TSD::FillArchive* tschchartseriesscattersymbolfill_;
  ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke_;
  ::TSD::FillArchive* tschchartseriesdefaultfill_;
  ::TSD::FillArchive* tschchartseriescolumnfill_;
  ::TSD::ShadowArchive* tschchartseriespieshadow_;
  ::TSD::ShadowArchive* tschchartseriesbarshadow_;
  ::TSD::ShadowArchive* tschchartseriesareashadow_;
  ::TSD::ShadowArchive* tschchartseriesscattershadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedlineshadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedareashadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow_;
  ::TSD::ShadowArchive* tschchartserieslineshadow_;
  ::TSD::ShadowArchive* tschchartseriesdefaultshadow_;
  ::TSD::FillArchive* tschchartseriesmixedcolumnfill_;
  ::TSD::FillArchive* tschchartseriesmixedareafill_;
  ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinestroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareastroke_;
  ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill_;
  ::TSD::FillArchive* tschchartseriesmixedareasymbolfill_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke_;
  ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow_;
  ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx_;
  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend_;
  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx_;
  ::TSD::FillArchive* tschchartseriesbubblesymbolfill_;
  ::TSD::StrokeArchive* tschchartseriesbubblestroke_;
  ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke_;
  ::TSD::ShadowArchive* tschchartseriesbubbleshadow_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesdefaultdeprecated3dfill_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesbardeprecated3dfill_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriescolumndeprecated3dfill_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartserieslinedeprecated3dfill_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesareadeprecated3dfill_;
  ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriespiedeprecated3dfill_;
  ::TSD::ShadowArchive* tschchartseries3dbarshadow_;
  ::TSD::ShadowArchive* tschchartseries3dcolumnshadow_;
  ::TSD::ShadowArchive* tschchartseries3dlineshadow_;
  ::TSD::ShadowArchive* tschchartseries3dareashadow_;
  ::TSD::ShadowArchive* tschchartseries3dpieshadow_;
  ::TSD::FillArchive* tschchartseries3dbarfill_;
  ::TSD::FillArchive* tschchartseries3dcolumnfill_;
  ::TSD::FillArchive* tschchartseries3dlinefill_;
  ::TSD::FillArchive* tschchartseries3dareafill_;
  ::TSD::FillArchive* tschchartseries3dpiefill_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarvaluelabelposition_;
  float tschchartserieslinesymbolsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareavaluelabelposition_;
  float tschchartseriesareasymbolsize_;
  float tschchartseriesscattersymbolsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesarealabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespielabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlabelparagraphstyleindex_;
  float tschchartseriesdefaultopacity_;
  bool tschchartseriesscattersymbolfilluseseriesstroke_;
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke_;
  bool tschchartseriesmixedareasymbolfilluseseriesstroke_;
  bool tschchartserieslinesymbolfilluseseriesfill_;
  bool tschchartseriesareasymbolfilluseseriesfill_;
  bool tschchartseriesmixedlinesymbolfilluseseriesfill_;
  bool tschchartseriesmixedareasymbolfilluseseriesfill_;
  bool tschchartseriespiedeprecatedserieslabelson_;
  bool tschchartseriesbubblesymbolfilluseseriesstroke_;
  bool tschchartserieslinesymbolfilluseseriesstroke_;
  bool tschchartseriesareasymbolfilluseseriesstroke_;
  float tschchartseriesmixedlinesymbolsize_;
  float tschchartseriesmixedareasymbolsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedcolumnvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareavaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbaroutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareavaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
  float tschchartseriesdefaulttrendlineequationopacity_;
  float tschchartseriesdefaulttrendlinersquaredopacity_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesNonStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PreUFF.ChartSeriesNonStyleArchive) */ {
 public:
  inline ChartSeriesNonStyleArchive() : ChartSeriesNonStyleArchive(nullptr) {}
  ~ChartSeriesNonStyleArchive() override;
  explicit constexpr ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from);
  ChartSeriesNonStyleArchive(ChartSeriesNonStyleArchive&& from) noexcept
    : ChartSeriesNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesNonStyleArchive& operator=(const ChartSeriesNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesNonStyleArchive& operator=(ChartSeriesNonStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesNonStyleArchive*>(
               &_ChartSeriesNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChartSeriesNonStyleArchive& a, ChartSeriesNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSeriesNonStyleArchive* New() const final {
    return CreateMaybeMessage<ChartSeriesNonStyleArchive>(nullptr);
  }

  ChartSeriesNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSeriesNonStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartSeriesNonStyleArchive& from);
  void MergeFrom(const ChartSeriesNonStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PreUFF.ChartSeriesNonStyleArchive";
  }
  protected:
  explicit ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriesdefaulttrendlinelabelstringFieldNumber = 164,
    kSuperFieldNumber = 1,
    kTschchartseriesdefaultnumberformatFieldNumber = 10,
    kTschchartseriespienumberformatFieldNumber = 52,
    kTschchartseriesstackedpercentnumberformatFieldNumber = 90,
    kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber = 190,
    kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber = 191,
    kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber = 192,
    kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber = 193,
    kTschchartseriesdefaultnumberformattypeFieldNumber = 11,
    kTschchartserieslinesymboltypeFieldNumber = 19,
    kTschchartseriesbarshowvaluelabelsFieldNumber = 12,
    kTschchartserieslineshowsymbolFieldNumber = 20,
    kTschchartserieslineshowvaluelabelsFieldNumber = 21,
    kTschchartseriesareashowvaluelabelsFieldNumber = 27,
    kTschchartserieslinelinetypeFieldNumber = 30,
    kTschchartseriesareasymboltypeFieldNumber = 31,
    kTschchartseriesareashowsymbolFieldNumber = 32,
    kTschchartseriespieshowvaluelabelsFieldNumber = 37,
    kTschchartseriesscattershowvaluelabelsFieldNumber = 45,
    kTschchartseriesdefaultshowvaluelabelsFieldNumber = 51,
    kTschchartseriespiewedgeexplosionFieldNumber = 50,
    kTschchartseriespienumberformattypeFieldNumber = 53,
    kTschchartseriespielabelexplosionFieldNumber = 54,
    kTschchartseriesmixedlinesymboltypeFieldNumber = 60,
    kTschchartseriesmixedareasymboltypeFieldNumber = 61,
    kTschchartseriesmixedlineshowsymbolFieldNumber = 58,
    kTschchartseriesmixedareashowsymbolFieldNumber = 59,
    kTschchartseriesmixedshowvaluelabelsFieldNumber = 62,
    kTschchartseriespieshowserieslabelsFieldNumber = 66,
    kTschchartseriesmixedlinelinetypeFieldNumber = 63,
    kTschchartseriesdefaultyaxisordinalFieldNumber = 65,
    kTschchartseriesscattersymboltypeFieldNumber = 70,
    kTschchartseriesscatterlinetypeFieldNumber = 71,
    kTschchartseriesscattershowsymbolFieldNumber = 69,
    kTschchartseriesscattershowlineFieldNumber = 72,
    kTschchartseriesdefaulttrendlineshowlabelFieldNumber = 163,
    kTschchartseriesdefaulttrendlineshowequationFieldNumber = 165,
    kTschchartseriesdefaultseriestypeFieldNumber = 126,
    kTschchartseriesdefaulttrendlinetypeFieldNumber = 160,
    kTschchartseriesdefaulttrendlineorderFieldNumber = 161,
    kTschchartseriesdefaulttrendlineperiodFieldNumber = 162,
    kTschchartseriesdefaulterrorbarsettingFieldNumber = 170,
    kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber = 171,
    kTschchartseriesdefaulterrorbartypeFieldNumber = 172,
    kTschchartseriesdefaulterrorbartypescatterxFieldNumber = 173,
    kTschchartseriesdefaulterrorbarfixedvalueFieldNumber = 174,
    kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber = 175,
    kTschchartseriesdefaulterrorbarpercentvalueFieldNumber = 176,
    kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber = 177,
    kTschchartseriesdefaulterrorbarstddevvalueFieldNumber = 178,
    kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber = 179,
    kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber = 166,
    kTschchartseriesdefaultshowtrendlineFieldNumber = 198,
    kTschchartseriesdefaultshowerrorbarFieldNumber = 199,
    kTschchartseriesdefaultshowerrorbarscatterxFieldNumber = 200,
    kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber = 194,
    kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber = 195,
    kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber = 196,
    kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber = 197,
    kTschchartseriesbubblesizedimensionFieldNumber = 208,
    kTschchartseriesbubblelinetypeFieldNumber = 210,
    kTschchartseriesbubbleshowvaluelabelsFieldNumber = 209,
    kTschchartseriesbubbleshownegativedataFieldNumber = 216,
    kTschchartseriesbubbleadjustmentscaleFieldNumber = 217,
  };
  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  bool has_tschchartseriesdefaulttrendlinelabelstring() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinelabelstring() const;
  public:
  void clear_tschchartseriesdefaulttrendlinelabelstring();
  const std::string& tschchartseriesdefaulttrendlinelabelstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartseriesdefaulttrendlinelabelstring();
  std::string* release_tschchartseriesdefaulttrendlinelabelstring();
  void set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring);
  private:
  const std::string& _internal_tschchartseriesdefaulttrendlinelabelstring() const;
  void _internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value);
  std::string* _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
  public:

  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
  bool has_tschchartseriesdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformat() const;
  public:
  void clear_tschchartseriesdefaultnumberformat();
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesdefaultnumberformat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartsNumberFormatArchive* release_tschchartseriesdefaultnumberformat();
  ::TSCH::PreUFF::ChartsNumberFormatArchive* mutable_tschchartseriesdefaultnumberformat();
  void set_allocated_tschchartseriesdefaultnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesdefaultnumberformat);
  private:
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& _internal_tschchartseriesdefaultnumberformat() const;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* _internal_mutable_tschchartseriesdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
      ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesdefaultnumberformat);
  ::TSCH::PreUFF::ChartsNumberFormatArchive* unsafe_arena_release_tschchartseriesdefaultnumberformat();

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
  bool has_tschchartseriespienumberformat() const;
  private:
  bool _internal_has_tschchartseriespienumberformat() const;
  public:
  void clear_tschchartseriespienumberformat();
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriespienumberformat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartsNumberFormatArchive* release_tschchartseriespienumberformat();
  ::TSCH::PreUFF::ChartsNumberFormatArchive* mutable_tschchartseriespienumberformat();
  void set_allocated_tschchartseriespienumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriespienumberformat);
  private:
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& _internal_tschchartseriespienumberformat() const;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* _internal_mutable_tschchartseriespienumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriespienumberformat(
      ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriespienumberformat);
  ::TSCH::PreUFF::ChartsNumberFormatArchive* unsafe_arena_release_tschchartseriespienumberformat();

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
  bool has_tschchartseriesstackedpercentnumberformat() const;
  private:
  bool _internal_has_tschchartseriesstackedpercentnumberformat() const;
  public:
  void clear_tschchartseriesstackedpercentnumberformat();
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesstackedpercentnumberformat() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::PreUFF::ChartsNumberFormatArchive* release_tschchartseriesstackedpercentnumberformat();
  ::TSCH::PreUFF::ChartsNumberFormatArchive* mutable_tschchartseriesstackedpercentnumberformat();
  void set_allocated_tschchartseriesstackedpercentnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesstackedpercentnumberformat);
  private:
  const ::TSCH::PreUFF::ChartsNumberFormatArchive& _internal_tschchartseriesstackedpercentnumberformat() const;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* _internal_mutable_tschchartseriesstackedpercentnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
      ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesstackedpercentnumberformat);
  ::TSCH::PreUFF::ChartsNumberFormatArchive* unsafe_arena_release_tschchartseriesstackedpercentnumberformat();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
  bool has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
  bool has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();

  // optional int32 tschchartseriesdefaultnumberformattype = 11;
  bool has_tschchartseriesdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformattype() const;
  public:
  void clear_tschchartseriesdefaultnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultnumberformattype() const;
  void set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultnumberformattype() const;
  void _internal_set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinesymboltype = 19;
  bool has_tschchartserieslinesymboltype() const;
  private:
  bool _internal_has_tschchartserieslinesymboltype() const;
  public:
  void clear_tschchartserieslinesymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinesymboltype() const;
  void set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinesymboltype() const;
  void _internal_set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesbarshowvaluelabels = 12;
  bool has_tschchartseriesbarshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbarshowvaluelabels() const;
  public:
  void clear_tschchartseriesbarshowvaluelabels();
  bool tschchartseriesbarshowvaluelabels() const;
  void set_tschchartseriesbarshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbarshowvaluelabels() const;
  void _internal_set_tschchartseriesbarshowvaluelabels(bool value);
  public:

  // optional bool tschchartserieslineshowsymbol = 20;
  bool has_tschchartserieslineshowsymbol() const;
  private:
  bool _internal_has_tschchartserieslineshowsymbol() const;
  public:
  void clear_tschchartserieslineshowsymbol();
  bool tschchartserieslineshowsymbol() const;
  void set_tschchartserieslineshowsymbol(bool value);
  private:
  bool _internal_tschchartserieslineshowsymbol() const;
  void _internal_set_tschchartserieslineshowsymbol(bool value);
  public:

  // optional bool tschchartserieslineshowvaluelabels = 21;
  bool has_tschchartserieslineshowvaluelabels() const;
  private:
  bool _internal_has_tschchartserieslineshowvaluelabels() const;
  public:
  void clear_tschchartserieslineshowvaluelabels();
  bool tschchartserieslineshowvaluelabels() const;
  void set_tschchartserieslineshowvaluelabels(bool value);
  private:
  bool _internal_tschchartserieslineshowvaluelabels() const;
  void _internal_set_tschchartserieslineshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesareashowvaluelabels = 27;
  bool has_tschchartseriesareashowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesareashowvaluelabels() const;
  public:
  void clear_tschchartseriesareashowvaluelabels();
  bool tschchartseriesareashowvaluelabels() const;
  void set_tschchartseriesareashowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesareashowvaluelabels() const;
  void _internal_set_tschchartseriesareashowvaluelabels(bool value);
  public:

  // optional int32 tschchartserieslinelinetype = 30;
  bool has_tschchartserieslinelinetype() const;
  private:
  bool _internal_has_tschchartserieslinelinetype() const;
  public:
  void clear_tschchartserieslinelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelinetype() const;
  void set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinelinetype() const;
  void _internal_set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesareasymboltype = 31;
  bool has_tschchartseriesareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesareasymboltype() const;
  public:
  void clear_tschchartseriesareasymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareasymboltype() const;
  void set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareasymboltype() const;
  void _internal_set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesareashowsymbol = 32;
  bool has_tschchartseriesareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesareashowsymbol() const;
  public:
  void clear_tschchartseriesareashowsymbol();
  bool tschchartseriesareashowsymbol() const;
  void set_tschchartseriesareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesareashowsymbol() const;
  void _internal_set_tschchartseriesareashowsymbol(bool value);
  public:

  // optional bool tschchartseriespieshowvaluelabels = 37;
  bool has_tschchartseriespieshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriespieshowvaluelabels() const;
  public:
  void clear_tschchartseriespieshowvaluelabels();
  bool tschchartseriespieshowvaluelabels() const;
  void set_tschchartseriespieshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriespieshowvaluelabels() const;
  void _internal_set_tschchartseriespieshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  bool has_tschchartseriesscattershowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesscattershowvaluelabels() const;
  public:
  void clear_tschchartseriesscattershowvaluelabels();
  bool tschchartseriesscattershowvaluelabels() const;
  void set_tschchartseriesscattershowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesscattershowvaluelabels() const;
  void _internal_set_tschchartseriesscattershowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesdefaultshowvaluelabels = 51;
  bool has_tschchartseriesdefaultshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowvaluelabels() const;
  public:
  void clear_tschchartseriesdefaultshowvaluelabels();
  bool tschchartseriesdefaultshowvaluelabels() const;
  void set_tschchartseriesdefaultshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowvaluelabels() const;
  void _internal_set_tschchartseriesdefaultshowvaluelabels(bool value);
  public:

  // optional float tschchartseriespiewedgeexplosion = 50;
  bool has_tschchartseriespiewedgeexplosion() const;
  private:
  bool _internal_has_tschchartseriespiewedgeexplosion() const;
  public:
  void clear_tschchartseriespiewedgeexplosion();
  float tschchartseriespiewedgeexplosion() const;
  void set_tschchartseriespiewedgeexplosion(float value);
  private:
  float _internal_tschchartseriespiewedgeexplosion() const;
  void _internal_set_tschchartseriespiewedgeexplosion(float value);
  public:

  // optional int32 tschchartseriespienumberformattype = 53;
  bool has_tschchartseriespienumberformattype() const;
  private:
  bool _internal_has_tschchartseriespienumberformattype() const;
  public:
  void clear_tschchartseriespienumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespienumberformattype() const;
  void set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespienumberformattype() const;
  void _internal_set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriespielabelexplosion = 54;
  bool has_tschchartseriespielabelexplosion() const;
  private:
  bool _internal_has_tschchartseriespielabelexplosion() const;
  public:
  void clear_tschchartseriespielabelexplosion();
  float tschchartseriespielabelexplosion() const;
  void set_tschchartseriespielabelexplosion(float value);
  private:
  float _internal_tschchartseriespielabelexplosion() const;
  void _internal_set_tschchartseriespielabelexplosion(float value);
  public:

  // optional int32 tschchartseriesmixedlinesymboltype = 60;
  bool has_tschchartseriesmixedlinesymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymboltype() const;
  public:
  void clear_tschchartseriesmixedlinesymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinesymboltype() const;
  void set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinesymboltype() const;
  void _internal_set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedareasymboltype = 61;
  bool has_tschchartseriesmixedareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymboltype() const;
  public:
  void clear_tschchartseriesmixedareasymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareasymboltype() const;
  void set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedareasymboltype() const;
  void _internal_set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesmixedlineshowsymbol = 58;
  bool has_tschchartseriesmixedlineshowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshowsymbol() const;
  public:
  void clear_tschchartseriesmixedlineshowsymbol();
  bool tschchartseriesmixedlineshowsymbol() const;
  void set_tschchartseriesmixedlineshowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedlineshowsymbol() const;
  void _internal_set_tschchartseriesmixedlineshowsymbol(bool value);
  public:

  // optional bool tschchartseriesmixedareashowsymbol = 59;
  bool has_tschchartseriesmixedareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedareashowsymbol() const;
  public:
  void clear_tschchartseriesmixedareashowsymbol();
  bool tschchartseriesmixedareashowsymbol() const;
  void set_tschchartseriesmixedareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedareashowsymbol() const;
  void _internal_set_tschchartseriesmixedareashowsymbol(bool value);
  public:

  // optional bool tschchartseriesmixedshowvaluelabels = 62;
  bool has_tschchartseriesmixedshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesmixedshowvaluelabels() const;
  public:
  void clear_tschchartseriesmixedshowvaluelabels();
  bool tschchartseriesmixedshowvaluelabels() const;
  void set_tschchartseriesmixedshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesmixedshowvaluelabels() const;
  void _internal_set_tschchartseriesmixedshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriespieshowserieslabels = 66;
  bool has_tschchartseriespieshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriespieshowserieslabels() const;
  public:
  void clear_tschchartseriespieshowserieslabels();
  bool tschchartseriespieshowserieslabels() const;
  void set_tschchartseriespieshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriespieshowserieslabels() const;
  void _internal_set_tschchartseriespieshowserieslabels(bool value);
  public:

  // optional int32 tschchartseriesmixedlinelinetype = 63;
  bool has_tschchartseriesmixedlinelinetype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinelinetype() const;
  public:
  void clear_tschchartseriesmixedlinelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinelinetype() const;
  void set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinelinetype() const;
  void _internal_set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultyaxisordinal = 65;
  bool has_tschchartseriesdefaultyaxisordinal() const;
  private:
  bool _internal_has_tschchartseriesdefaultyaxisordinal() const;
  public:
  void clear_tschchartseriesdefaultyaxisordinal();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultyaxisordinal() const;
  void set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultyaxisordinal() const;
  void _internal_set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscattersymboltype = 70;
  bool has_tschchartseriesscattersymboltype() const;
  private:
  bool _internal_has_tschchartseriesscattersymboltype() const;
  public:
  void clear_tschchartseriesscattersymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattersymboltype() const;
  void set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscattersymboltype() const;
  void _internal_set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscatterlinetype = 71;
  bool has_tschchartseriesscatterlinetype() const;
  private:
  bool _internal_has_tschchartseriesscatterlinetype() const;
  public:
  void clear_tschchartseriesscatterlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterlinetype() const;
  void set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscatterlinetype() const;
  void _internal_set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesscattershowsymbol = 69;
  bool has_tschchartseriesscattershowsymbol() const;
  private:
  bool _internal_has_tschchartseriesscattershowsymbol() const;
  public:
  void clear_tschchartseriesscattershowsymbol();
  bool tschchartseriesscattershowsymbol() const;
  void set_tschchartseriesscattershowsymbol(bool value);
  private:
  bool _internal_tschchartseriesscattershowsymbol() const;
  void _internal_set_tschchartseriesscattershowsymbol(bool value);
  public:

  // optional bool tschchartseriesscattershowline = 72;
  bool has_tschchartseriesscattershowline() const;
  private:
  bool _internal_has_tschchartseriesscattershowline() const;
  public:
  void clear_tschchartseriesscattershowline();
  bool tschchartseriesscattershowline() const;
  void set_tschchartseriesscattershowline(bool value);
  private:
  bool _internal_tschchartseriesscattershowline() const;
  void _internal_set_tschchartseriesscattershowline(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
  bool has_tschchartseriesdefaulttrendlineshowlabel() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowlabel() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowlabel();
  bool tschchartseriesdefaulttrendlineshowlabel() const;
  void set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowlabel() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
  bool has_tschchartseriesdefaulttrendlineshowequation() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowequation() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowequation();
  bool tschchartseriesdefaulttrendlineshowequation() const;
  void set_tschchartseriesdefaulttrendlineshowequation(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowequation() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowequation(bool value);
  public:

  // optional int32 tschchartseriesdefaultseriestype = 126;
  bool has_tschchartseriesdefaultseriestype() const;
  private:
  bool _internal_has_tschchartseriesdefaultseriestype() const;
  public:
  void clear_tschchartseriesdefaultseriestype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultseriestype() const;
  void set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultseriestype() const;
  void _internal_set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinetype = 160;
  bool has_tschchartseriesdefaulttrendlinetype() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinetype() const;
  public:
  void clear_tschchartseriesdefaulttrendlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinetype() const;
  void set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlinetype() const;
  void _internal_set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineorder = 161;
  bool has_tschchartseriesdefaulttrendlineorder() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineorder() const;
  public:
  void clear_tschchartseriesdefaulttrendlineorder();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineorder() const;
  void set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineorder() const;
  void _internal_set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
  bool has_tschchartseriesdefaulttrendlineperiod() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineperiod() const;
  public:
  void clear_tschchartseriesdefaulttrendlineperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineperiod() const;
  void set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineperiod() const;
  void _internal_set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
  bool has_tschchartseriesdefaulterrorbarsetting() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsetting() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsetting() const;
  void set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarsetting() const;
  void _internal_set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
  bool has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsettingscatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsettingscatterx() const;
  void set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarsettingscatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartype = 172;
  bool has_tschchartseriesdefaulterrorbartype() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartype() const;
  public:
  void clear_tschchartseriesdefaulterrorbartype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartype() const;
  void set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbartype() const;
  void _internal_set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
  bool has_tschchartseriesdefaulterrorbartypescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartypescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbartypescatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartypescatterx() const;
  void set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbartypescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
  bool has_tschchartseriesdefaulterrorbarfixedvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvalue();
  float tschchartseriesdefaulterrorbarfixedvalue() const;
  void set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
  bool has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  float tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
  bool has_tschchartseriesdefaulterrorbarpercentvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvalue();
  float tschchartseriesdefaulterrorbarpercentvalue() const;
  void set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
  bool has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  float tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
  bool has_tschchartseriesdefaulterrorbarstddevvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvalue();
  float tschchartseriesdefaulterrorbarstddevvalue() const;
  void set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
  bool has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  float tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
  bool has_tschchartseriesdefaulttrendlineshowr2value() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowr2value() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowr2value();
  bool tschchartseriesdefaulttrendlineshowr2value() const;
  void set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowr2value() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  public:

  // optional bool tschchartseriesdefaultshowtrendline = 198;
  bool has_tschchartseriesdefaultshowtrendline() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowtrendline() const;
  public:
  void clear_tschchartseriesdefaultshowtrendline();
  bool tschchartseriesdefaultshowtrendline() const;
  void set_tschchartseriesdefaultshowtrendline(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowtrendline() const;
  void _internal_set_tschchartseriesdefaultshowtrendline(bool value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbar = 199;
  bool has_tschchartseriesdefaultshowerrorbar() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbar() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbar();
  bool tschchartseriesdefaultshowerrorbar() const;
  void set_tschchartseriesdefaultshowerrorbar(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbar() const;
  void _internal_set_tschchartseriesdefaultshowerrorbar(bool value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
  bool has_tschchartseriesdefaultshowerrorbarscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbarscatterx() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbarscatterx();
  bool tschchartseriesdefaultshowerrorbarscatterx() const;
  void set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbarscatterx() const;
  void _internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
  bool has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsetx();
  float tschchartseriesdefaulttrendlineequationoffsetx() const;
  void set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
  bool has_tschchartseriesdefaulttrendlineequationoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsety();
  float tschchartseriesdefaulttrendlineequationoffsety() const;
  void set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsetx();
  float tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsety();
  float tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  public:

  // optional int32 tschchartseriesbubblesizedimension = 208;
  bool has_tschchartseriesbubblesizedimension() const;
  private:
  bool _internal_has_tschchartseriesbubblesizedimension() const;
  public:
  void clear_tschchartseriesbubblesizedimension();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblesizedimension() const;
  void set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblesizedimension() const;
  void _internal_set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbubblelinetype = 210;
  bool has_tschchartseriesbubblelinetype() const;
  private:
  bool _internal_has_tschchartseriesbubblelinetype() const;
  public:
  void clear_tschchartseriesbubblelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblelinetype() const;
  void set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblelinetype() const;
  void _internal_set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesbubbleshowvaluelabels = 209;
  bool has_tschchartseriesbubbleshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowvaluelabels() const;
  public:
  void clear_tschchartseriesbubbleshowvaluelabels();
  bool tschchartseriesbubbleshowvaluelabels() const;
  void set_tschchartseriesbubbleshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowvaluelabels() const;
  void _internal_set_tschchartseriesbubbleshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesbubbleshownegativedata = 216;
  bool has_tschchartseriesbubbleshownegativedata() const;
  private:
  bool _internal_has_tschchartseriesbubbleshownegativedata() const;
  public:
  void clear_tschchartseriesbubbleshownegativedata();
  bool tschchartseriesbubbleshownegativedata() const;
  void set_tschchartseriesbubbleshownegativedata(bool value);
  private:
  bool _internal_tschchartseriesbubbleshownegativedata() const;
  void _internal_set_tschchartseriesbubbleshownegativedata(bool value);
  public:

  // optional float tschchartseriesbubbleadjustmentscale = 217;
  bool has_tschchartseriesbubbleadjustmentscale() const;
  private:
  bool _internal_has_tschchartseriesbubbleadjustmentscale() const;
  public:
  void clear_tschchartseriesbubbleadjustmentscale();
  float tschchartseriesbubbleadjustmentscale() const;
  void set_tschchartseriesbubbleadjustmentscale(float value);
  private:
  float _internal_tschchartseriesbubbleadjustmentscale() const;
  void _internal_set_tschchartseriesbubbleadjustmentscale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PreUFF.ChartSeriesNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartseriesdefaulttrendlinelabelstring_;
  ::TSS::StyleArchive* super_;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesdefaultnumberformat_;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriespienumberformat_;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesstackedpercentnumberformat_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultnumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinesymboltype_;
  bool tschchartseriesbarshowvaluelabels_;
  bool tschchartserieslineshowsymbol_;
  bool tschchartserieslineshowvaluelabels_;
  bool tschchartseriesareashowvaluelabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareasymboltype_;
  bool tschchartseriesareashowsymbol_;
  bool tschchartseriespieshowvaluelabels_;
  bool tschchartseriesscattershowvaluelabels_;
  bool tschchartseriesdefaultshowvaluelabels_;
  float tschchartseriespiewedgeexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespienumberformattype_;
  float tschchartseriespielabelexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinesymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareasymboltype_;
  bool tschchartseriesmixedlineshowsymbol_;
  bool tschchartseriesmixedareashowsymbol_;
  bool tschchartseriesmixedshowvaluelabels_;
  bool tschchartseriespieshowserieslabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultyaxisordinal_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattersymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterlinetype_;
  bool tschchartseriesscattershowsymbol_;
  bool tschchartseriesscattershowline_;
  bool tschchartseriesdefaulttrendlineshowlabel_;
  bool tschchartseriesdefaulttrendlineshowequation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultseriestype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineperiod_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsettingscatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartypescatterx_;
  float tschchartseriesdefaulterrorbarfixedvalue_;
  float tschchartseriesdefaulterrorbarfixedvaluescatterx_;
  float tschchartseriesdefaulterrorbarpercentvalue_;
  float tschchartseriesdefaulterrorbarpercentvaluescatterx_;
  float tschchartseriesdefaulterrorbarstddevvalue_;
  float tschchartseriesdefaulterrorbarstddevvaluescatterx_;
  bool tschchartseriesdefaulttrendlineshowr2value_;
  bool tschchartseriesdefaultshowtrendline_;
  bool tschchartseriesdefaultshowerrorbar_;
  bool tschchartseriesdefaultshowerrorbarscatterx_;
  float tschchartseriesdefaulttrendlineequationoffsetx_;
  float tschchartseriesdefaulttrendlineequationoffsety_;
  float tschchartseriesdefaulttrendlinersquaredoffsetx_;
  float tschchartseriesdefaulttrendlinersquaredoffsety_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblesizedimension_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblelinetype_;
  bool tschchartseriesbubbleshowvaluelabels_;
  bool tschchartseriesbubbleshownegativedata_;
  float tschchartseriesbubbleadjustmentscale_;
  friend struct ::TableStruct_TSCHPreUFFArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartInfoArchive

// required .TSD.DrawableArchive super = 1;
inline bool ChartInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableArchive& ChartInfoArchive::_internal_super() const {
  const ::TSD::DrawableArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableArchive&>(
      ::TSD::_DrawableArchive_default_instance_);
}
inline const ::TSD::DrawableArchive& ChartInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.super)
  return _internal_super();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.super)
}
inline ::TSD::DrawableArchive* ChartInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableArchive* ChartInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableArchive* ChartInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableArchive* ChartInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.super)
  return _internal_mutable_super();
}
inline void ChartInfoArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.super)
}

// required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
inline bool ChartInfoArchive::_internal_has_chart_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chart_model_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_chart_model() const {
  return _internal_has_chart_model();
}
inline void ChartInfoArchive::clear_chart_model() {
  if (chart_model_ != nullptr) chart_model_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::PreUFF::ChartModelArchive& ChartInfoArchive::_internal_chart_model() const {
  const ::TSCH::PreUFF::ChartModelArchive* p = chart_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartModelArchive&>(
      ::TSCH::PreUFF::_ChartModelArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartModelArchive& ChartInfoArchive::chart_model() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.chart_model)
  return _internal_chart_model();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_chart_model(
    ::TSCH::PreUFF::ChartModelArchive* chart_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_model_);
  }
  chart_model_ = chart_model;
  if (chart_model) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.chart_model)
}
inline ::TSCH::PreUFF::ChartModelArchive* ChartInfoArchive::release_chart_model() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::PreUFF::ChartModelArchive* temp = chart_model_;
  chart_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartModelArchive* ChartInfoArchive::unsafe_arena_release_chart_model() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.chart_model)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::PreUFF::ChartModelArchive* temp = chart_model_;
  chart_model_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartModelArchive* ChartInfoArchive::_internal_mutable_chart_model() {
  _has_bits_[0] |= 0x00000002u;
  if (chart_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartModelArchive>(GetArena());
    chart_model_ = p;
  }
  return chart_model_;
}
inline ::TSCH::PreUFF::ChartModelArchive* ChartInfoArchive::mutable_chart_model() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.chart_model)
  return _internal_mutable_chart_model();
}
inline void ChartInfoArchive::set_allocated_chart_model(::TSCH::PreUFF::ChartModelArchive* chart_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chart_model_;
  }
  if (chart_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chart_model);
    if (message_arena != submessage_arena) {
      chart_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chart_model_ = chart_model;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.chart_model)
}

// optional .TSP.Reference style = 3;
inline bool ChartInfoArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartInfoArchive::style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.style)
  return _internal_style();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.style)
}
inline ::TSP::Reference* ChartInfoArchive::release_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000004u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* ChartInfoArchive::mutable_style() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.style)
  return _internal_mutable_style();
}
inline void ChartInfoArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style)->GetArena();
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.style)
}

// required .TSCH.ChartType chart_type = 4;
inline bool ChartInfoArchive::_internal_has_chart_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartInfoArchive::has_chart_type() const {
  return _internal_has_chart_type();
}
inline void ChartInfoArchive::clear_chart_type() {
  chart_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::TSCH::ChartType ChartInfoArchive::_internal_chart_type() const {
  return static_cast< ::TSCH::ChartType >(chart_type_);
}
inline ::TSCH::ChartType ChartInfoArchive::chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.chart_type)
  return _internal_chart_type();
}
inline void ChartInfoArchive::_internal_set_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  chart_type_ = value;
}
inline void ChartInfoArchive::set_chart_type(::TSCH::ChartType value) {
  _internal_set_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartInfoArchive.chart_type)
}

// optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
inline bool ChartInfoArchive::_internal_has_legend_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || legend_model_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_legend_model() const {
  return _internal_has_legend_model();
}
inline void ChartInfoArchive::clear_legend_model() {
  if (legend_model_ != nullptr) legend_model_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCH::PreUFF::LegendModelArchive& ChartInfoArchive::_internal_legend_model() const {
  const ::TSCH::PreUFF::LegendModelArchive* p = legend_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::LegendModelArchive&>(
      ::TSCH::PreUFF::_LegendModelArchive_default_instance_);
}
inline const ::TSCH::PreUFF::LegendModelArchive& ChartInfoArchive::legend_model() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.legend_model)
  return _internal_legend_model();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_legend_model(
    ::TSCH::PreUFF::LegendModelArchive* legend_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_model_);
  }
  legend_model_ = legend_model;
  if (legend_model) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.legend_model)
}
inline ::TSCH::PreUFF::LegendModelArchive* ChartInfoArchive::release_legend_model() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PreUFF::LegendModelArchive* temp = legend_model_;
  legend_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::LegendModelArchive* ChartInfoArchive::unsafe_arena_release_legend_model() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.legend_model)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PreUFF::LegendModelArchive* temp = legend_model_;
  legend_model_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::LegendModelArchive* ChartInfoArchive::_internal_mutable_legend_model() {
  _has_bits_[0] |= 0x00000008u;
  if (legend_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::LegendModelArchive>(GetArena());
    legend_model_ = p;
  }
  return legend_model_;
}
inline ::TSCH::PreUFF::LegendModelArchive* ChartInfoArchive::mutable_legend_model() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.legend_model)
  return _internal_mutable_legend_model();
}
inline void ChartInfoArchive::set_allocated_legend_model(::TSCH::PreUFF::LegendModelArchive* legend_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete legend_model_;
  }
  if (legend_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(legend_model);
    if (message_arena != submessage_arena) {
      legend_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  legend_model_ = legend_model;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.legend_model)
}

// required .TSCH.RectArchive inner_chart_frame = 6;
inline bool ChartInfoArchive::_internal_has_inner_chart_frame() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || inner_chart_frame_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_inner_chart_frame() const {
  return _internal_has_inner_chart_frame();
}
inline const ::TSCH::RectArchive& ChartInfoArchive::_internal_inner_chart_frame() const {
  const ::TSCH::RectArchive* p = inner_chart_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& ChartInfoArchive::inner_chart_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.inner_chart_frame)
  return _internal_inner_chart_frame();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_inner_chart_frame(
    ::TSCH::RectArchive* inner_chart_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_chart_frame_);
  }
  inner_chart_frame_ = inner_chart_frame;
  if (inner_chart_frame) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.inner_chart_frame)
}
inline ::TSCH::RectArchive* ChartInfoArchive::release_inner_chart_frame() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::RectArchive* temp = inner_chart_frame_;
  inner_chart_frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::RectArchive* ChartInfoArchive::unsafe_arena_release_inner_chart_frame() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.inner_chart_frame)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::RectArchive* temp = inner_chart_frame_;
  inner_chart_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* ChartInfoArchive::_internal_mutable_inner_chart_frame() {
  _has_bits_[0] |= 0x00000010u;
  if (inner_chart_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArena());
    inner_chart_frame_ = p;
  }
  return inner_chart_frame_;
}
inline ::TSCH::RectArchive* ChartInfoArchive::mutable_inner_chart_frame() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.inner_chart_frame)
  return _internal_mutable_inner_chart_frame();
}
inline void ChartInfoArchive::set_allocated_inner_chart_frame(::TSCH::RectArchive* inner_chart_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_chart_frame_);
  }
  if (inner_chart_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_chart_frame)->GetArena();
    if (message_arena != submessage_arena) {
      inner_chart_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_chart_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  inner_chart_frame_ = inner_chart_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.inner_chart_frame)
}

// repeated .TSP.Reference value_axis_styles = 7;
inline int ChartInfoArchive::_internal_value_axis_styles_size() const {
  return value_axis_styles_.size();
}
inline int ChartInfoArchive::value_axis_styles_size() const {
  return _internal_value_axis_styles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_value_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.value_axis_styles)
  return value_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_value_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.value_axis_styles)
  return &value_axis_styles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_value_axis_styles(int index) const {
  return value_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::value_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.value_axis_styles)
  return _internal_value_axis_styles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_value_axis_styles() {
  return value_axis_styles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_value_axis_styles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.value_axis_styles)
  return _internal_add_value_axis_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::value_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.value_axis_styles)
  return value_axis_styles_;
}

// repeated .TSP.Reference category_axis_styles = 8;
inline int ChartInfoArchive::_internal_category_axis_styles_size() const {
  return category_axis_styles_.size();
}
inline int ChartInfoArchive::category_axis_styles_size() const {
  return _internal_category_axis_styles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_category_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.category_axis_styles)
  return category_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_category_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.category_axis_styles)
  return &category_axis_styles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_category_axis_styles(int index) const {
  return category_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::category_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.category_axis_styles)
  return _internal_category_axis_styles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_category_axis_styles() {
  return category_axis_styles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_category_axis_styles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.category_axis_styles)
  return _internal_add_category_axis_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::category_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.category_axis_styles)
  return category_axis_styles_;
}

// repeated .TSP.Reference value_axis_nonstyles = 9;
inline int ChartInfoArchive::_internal_value_axis_nonstyles_size() const {
  return value_axis_nonstyles_.size();
}
inline int ChartInfoArchive::value_axis_nonstyles_size() const {
  return _internal_value_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_value_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles)
  return value_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles)
  return &value_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_value_axis_nonstyles(int index) const {
  return value_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::value_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles)
  return _internal_value_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_value_axis_nonstyles() {
  return value_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles)
  return _internal_add_value_axis_nonstyles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::value_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles)
  return value_axis_nonstyles_;
}

// repeated .TSP.Reference category_axis_nonstyles = 10;
inline int ChartInfoArchive::_internal_category_axis_nonstyles_size() const {
  return category_axis_nonstyles_.size();
}
inline int ChartInfoArchive::category_axis_nonstyles_size() const {
  return _internal_category_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_category_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles)
  return category_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles)
  return &category_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_category_axis_nonstyles(int index) const {
  return category_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::category_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles)
  return _internal_category_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_category_axis_nonstyles() {
  return category_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles)
  return _internal_add_category_axis_nonstyles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::category_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles)
  return category_axis_nonstyles_;
}

// repeated .TSP.Reference series_theme_styles = 11;
inline int ChartInfoArchive::_internal_series_theme_styles_size() const {
  return series_theme_styles_.size();
}
inline int ChartInfoArchive::series_theme_styles_size() const {
  return _internal_series_theme_styles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_series_theme_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.series_theme_styles)
  return series_theme_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_series_theme_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.series_theme_styles)
  return &series_theme_styles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_series_theme_styles(int index) const {
  return series_theme_styles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::series_theme_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.series_theme_styles)
  return _internal_series_theme_styles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_series_theme_styles() {
  return series_theme_styles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_series_theme_styles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.series_theme_styles)
  return _internal_add_series_theme_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::series_theme_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.series_theme_styles)
  return series_theme_styles_;
}

// optional .TSP.SparseReferenceArray series_private_styles = 12;
inline bool ChartInfoArchive::_internal_has_series_private_styles() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || series_private_styles_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_series_private_styles() const {
  return _internal_has_series_private_styles();
}
inline const ::TSP::SparseReferenceArray& ChartInfoArchive::_internal_series_private_styles() const {
  const ::TSP::SparseReferenceArray* p = series_private_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& ChartInfoArchive::series_private_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.series_private_styles)
  return _internal_series_private_styles();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_series_private_styles(
    ::TSP::SparseReferenceArray* series_private_styles) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles_);
  }
  series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.series_private_styles)
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::release_series_private_styles() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::SparseReferenceArray* temp = series_private_styles_;
  series_private_styles_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::unsafe_arena_release_series_private_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.series_private_styles)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::SparseReferenceArray* temp = series_private_styles_;
  series_private_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::_internal_mutable_series_private_styles() {
  _has_bits_[0] |= 0x00000020u;
  if (series_private_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArena());
    series_private_styles_ = p;
  }
  return series_private_styles_;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::mutable_series_private_styles() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.series_private_styles)
  return _internal_mutable_series_private_styles();
}
inline void ChartInfoArchive::set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles_);
  }
  if (series_private_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles)->GetArena();
    if (message_arena != submessage_arena) {
      series_private_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_private_styles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  series_private_styles_ = series_private_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.series_private_styles)
}

// optional .TSP.SparseReferenceArray series_non_styles = 13;
inline bool ChartInfoArchive::_internal_has_series_non_styles() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || series_non_styles_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_series_non_styles() const {
  return _internal_has_series_non_styles();
}
inline const ::TSP::SparseReferenceArray& ChartInfoArchive::_internal_series_non_styles() const {
  const ::TSP::SparseReferenceArray* p = series_non_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& ChartInfoArchive::series_non_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.series_non_styles)
  return _internal_series_non_styles();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_series_non_styles(
    ::TSP::SparseReferenceArray* series_non_styles) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_non_styles_);
  }
  series_non_styles_ = series_non_styles;
  if (series_non_styles) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.series_non_styles)
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::release_series_non_styles() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::SparseReferenceArray* temp = series_non_styles_;
  series_non_styles_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::unsafe_arena_release_series_non_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.series_non_styles)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::SparseReferenceArray* temp = series_non_styles_;
  series_non_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::_internal_mutable_series_non_styles() {
  _has_bits_[0] |= 0x00000040u;
  if (series_non_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArena());
    series_non_styles_ = p;
  }
  return series_non_styles_;
}
inline ::TSP::SparseReferenceArray* ChartInfoArchive::mutable_series_non_styles() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.series_non_styles)
  return _internal_mutable_series_non_styles();
}
inline void ChartInfoArchive::set_allocated_series_non_styles(::TSP::SparseReferenceArray* series_non_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_non_styles_);
  }
  if (series_non_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_non_styles)->GetArena();
    if (message_arena != submessage_arena) {
      series_non_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_non_styles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  series_non_styles_ = series_non_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.series_non_styles)
}

// optional .TSP.Reference non_style = 14;
inline bool ChartInfoArchive::_internal_has_non_style() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || non_style_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_non_style() const {
  return _internal_has_non_style();
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_non_style() const {
  const ::TSP::Reference* p = non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartInfoArchive::non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.non_style)
  return _internal_non_style();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_non_style(
    ::TSP::Reference* non_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  non_style_ = non_style;
  if (non_style) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.non_style)
}
inline ::TSP::Reference* ChartInfoArchive::release_non_style() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::unsafe_arena_release_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.non_style)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::_internal_mutable_non_style() {
  _has_bits_[0] |= 0x00000080u;
  if (non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    non_style_ = p;
  }
  return non_style_;
}
inline ::TSP::Reference* ChartInfoArchive::mutable_non_style() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.non_style)
  return _internal_mutable_non_style();
}
inline void ChartInfoArchive::set_allocated_non_style(::TSP::Reference* non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  if (non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style)->GetArena();
    if (message_arena != submessage_arena) {
      non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  non_style_ = non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.non_style)
}

// optional .TSP.Reference mediator = 15;
inline bool ChartInfoArchive::_internal_has_mediator() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || mediator_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_mediator() const {
  return _internal_has_mediator();
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_mediator() const {
  const ::TSP::Reference* p = mediator_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartInfoArchive::mediator() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.mediator)
  return _internal_mediator();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_mediator(
    ::TSP::Reference* mediator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator_);
  }
  mediator_ = mediator;
  if (mediator) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.mediator)
}
inline ::TSP::Reference* ChartInfoArchive::release_mediator() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = mediator_;
  mediator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::unsafe_arena_release_mediator() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.mediator)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = mediator_;
  mediator_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::_internal_mutable_mediator() {
  _has_bits_[0] |= 0x00000100u;
  if (mediator_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    mediator_ = p;
  }
  return mediator_;
}
inline ::TSP::Reference* ChartInfoArchive::mutable_mediator() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.mediator)
  return _internal_mutable_mediator();
}
inline void ChartInfoArchive::set_allocated_mediator(::TSP::Reference* mediator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator_);
  }
  if (mediator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator)->GetArena();
    if (message_arena != submessage_arena) {
      mediator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  mediator_ = mediator;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.mediator)
}

// optional .TSP.Point cde_preview_origin = 16;
inline bool ChartInfoArchive::_internal_has_cde_preview_origin() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || cde_preview_origin_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_cde_preview_origin() const {
  return _internal_has_cde_preview_origin();
}
inline const ::TSP::Point& ChartInfoArchive::_internal_cde_preview_origin() const {
  const ::TSP::Point* p = cde_preview_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ChartInfoArchive::cde_preview_origin() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.cde_preview_origin)
  return _internal_cde_preview_origin();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_cde_preview_origin(
    ::TSP::Point* cde_preview_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_preview_origin_);
  }
  cde_preview_origin_ = cde_preview_origin;
  if (cde_preview_origin) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.cde_preview_origin)
}
inline ::TSP::Point* ChartInfoArchive::release_cde_preview_origin() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Point* temp = cde_preview_origin_;
  cde_preview_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* ChartInfoArchive::unsafe_arena_release_cde_preview_origin() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.cde_preview_origin)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Point* temp = cde_preview_origin_;
  cde_preview_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* ChartInfoArchive::_internal_mutable_cde_preview_origin() {
  _has_bits_[0] |= 0x00000200u;
  if (cde_preview_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    cde_preview_origin_ = p;
  }
  return cde_preview_origin_;
}
inline ::TSP::Point* ChartInfoArchive::mutable_cde_preview_origin() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.cde_preview_origin)
  return _internal_mutable_cde_preview_origin();
}
inline void ChartInfoArchive::set_allocated_cde_preview_origin(::TSP::Point* cde_preview_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_preview_origin_);
  }
  if (cde_preview_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cde_preview_origin)->GetArena();
    if (message_arena != submessage_arena) {
      cde_preview_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cde_preview_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  cde_preview_origin_ = cde_preview_origin;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.cde_preview_origin)
}

// optional .TSP.Reference chart_style_preset = 17;
inline bool ChartInfoArchive::_internal_has_chart_style_preset() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || chart_style_preset_ != nullptr);
  return value;
}
inline bool ChartInfoArchive::has_chart_style_preset() const {
  return _internal_has_chart_style_preset();
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_chart_style_preset() const {
  const ::TSP::Reference* p = chart_style_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartInfoArchive::chart_style_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.chart_style_preset)
  return _internal_chart_style_preset();
}
inline void ChartInfoArchive::unsafe_arena_set_allocated_chart_style_preset(
    ::TSP::Reference* chart_style_preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_preset_);
  }
  chart_style_preset_ = chart_style_preset;
  if (chart_style_preset) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartInfoArchive.chart_style_preset)
}
inline ::TSP::Reference* ChartInfoArchive::release_chart_style_preset() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = chart_style_preset_;
  chart_style_preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::unsafe_arena_release_chart_style_preset() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartInfoArchive.chart_style_preset)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = chart_style_preset_;
  chart_style_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartInfoArchive::_internal_mutable_chart_style_preset() {
  _has_bits_[0] |= 0x00000400u;
  if (chart_style_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    chart_style_preset_ = p;
  }
  return chart_style_preset_;
}
inline ::TSP::Reference* ChartInfoArchive::mutable_chart_style_preset() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.chart_style_preset)
  return _internal_mutable_chart_style_preset();
}
inline void ChartInfoArchive::set_allocated_chart_style_preset(::TSP::Reference* chart_style_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_preset_);
  }
  if (chart_style_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style_preset)->GetArena();
    if (message_arena != submessage_arena) {
      chart_style_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  chart_style_preset_ = chart_style_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartInfoArchive.chart_style_preset)
}

// repeated .TSP.Reference paragraph_styles = 18;
inline int ChartInfoArchive::_internal_paragraph_styles_size() const {
  return paragraph_styles_.size();
}
inline int ChartInfoArchive::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* ChartInfoArchive::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartInfoArchive.paragraph_styles)
  return paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartInfoArchive::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartInfoArchive.paragraph_styles)
  return &paragraph_styles_;
}
inline const ::TSP::Reference& ChartInfoArchive::_internal_paragraph_styles(int index) const {
  return paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& ChartInfoArchive::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* ChartInfoArchive::_internal_add_paragraph_styles() {
  return paragraph_styles_.Add();
}
inline ::TSP::Reference* ChartInfoArchive::add_paragraph_styles() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartInfoArchive.paragraph_styles)
  return _internal_add_paragraph_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartInfoArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartInfoArchive.paragraph_styles)
  return paragraph_styles_;
}

// optional int32 last_row_sected_in_the_cde = 19;
inline bool ChartInfoArchive::_internal_has_last_row_sected_in_the_cde() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartInfoArchive::has_last_row_sected_in_the_cde() const {
  return _internal_has_last_row_sected_in_the_cde();
}
inline void ChartInfoArchive::clear_last_row_sected_in_the_cde() {
  last_row_sected_in_the_cde_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::_internal_last_row_sected_in_the_cde() const {
  return last_row_sected_in_the_cde_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::last_row_sected_in_the_cde() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.last_row_sected_in_the_cde)
  return _internal_last_row_sected_in_the_cde();
}
inline void ChartInfoArchive::_internal_set_last_row_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  last_row_sected_in_the_cde_ = value;
}
inline void ChartInfoArchive::set_last_row_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_row_sected_in_the_cde(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartInfoArchive.last_row_sected_in_the_cde)
}

// optional int32 last_column_sected_in_the_cde = 20;
inline bool ChartInfoArchive::_internal_has_last_column_sected_in_the_cde() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartInfoArchive::has_last_column_sected_in_the_cde() const {
  return _internal_has_last_column_sected_in_the_cde();
}
inline void ChartInfoArchive::clear_last_column_sected_in_the_cde() {
  last_column_sected_in_the_cde_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::_internal_last_column_sected_in_the_cde() const {
  return last_column_sected_in_the_cde_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::last_column_sected_in_the_cde() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.last_column_sected_in_the_cde)
  return _internal_last_column_sected_in_the_cde();
}
inline void ChartInfoArchive::_internal_set_last_column_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  last_column_sected_in_the_cde_ = value;
}
inline void ChartInfoArchive::set_last_column_sected_in_the_cde(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_column_sected_in_the_cde(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartInfoArchive.last_column_sected_in_the_cde)
}

// optional int32 chart_style_preset_index = 21;
inline bool ChartInfoArchive::_internal_has_chart_style_preset_index() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartInfoArchive::has_chart_style_preset_index() const {
  return _internal_has_chart_style_preset_index();
}
inline void ChartInfoArchive::clear_chart_style_preset_index() {
  chart_style_preset_index_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::_internal_chart_style_preset_index() const {
  return chart_style_preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartInfoArchive::chart_style_preset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.chart_style_preset_index)
  return _internal_chart_style_preset_index();
}
inline void ChartInfoArchive::_internal_set_chart_style_preset_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  chart_style_preset_index_ = value;
}
inline void ChartInfoArchive::set_chart_style_preset_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chart_style_preset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartInfoArchive.chart_style_preset_index)
}

// optional bool needs_calc_engine_deferred_import_action = 22;
inline bool ChartInfoArchive::_internal_has_needs_calc_engine_deferred_import_action() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartInfoArchive::has_needs_calc_engine_deferred_import_action() const {
  return _internal_has_needs_calc_engine_deferred_import_action();
}
inline void ChartInfoArchive::clear_needs_calc_engine_deferred_import_action() {
  needs_calc_engine_deferred_import_action_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ChartInfoArchive::_internal_needs_calc_engine_deferred_import_action() const {
  return needs_calc_engine_deferred_import_action_;
}
inline bool ChartInfoArchive::needs_calc_engine_deferred_import_action() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartInfoArchive.needs_calc_engine_deferred_import_action)
  return _internal_needs_calc_engine_deferred_import_action();
}
inline void ChartInfoArchive::_internal_set_needs_calc_engine_deferred_import_action(bool value) {
  _has_bits_[0] |= 0x00008000u;
  needs_calc_engine_deferred_import_action_ = value;
}
inline void ChartInfoArchive::set_needs_calc_engine_deferred_import_action(bool value) {
  _internal_set_needs_calc_engine_deferred_import_action(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartInfoArchive.needs_calc_engine_deferred_import_action)
}

// -------------------------------------------------------------------

// LegendModelArchive

// optional .TSP.Reference info = 1;
inline bool LegendModelArchive::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool LegendModelArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& LegendModelArchive::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LegendModelArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendModelArchive.info)
  return _internal_info();
}
inline void LegendModelArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendModelArchive.info)
}
inline ::TSP::Reference* LegendModelArchive::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendModelArchive.info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* LegendModelArchive::mutable_info() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendModelArchive.info)
  return _internal_mutable_info();
}
inline void LegendModelArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendModelArchive.info)
}

// required .TSCH.RectArchive frame = 2;
inline bool LegendModelArchive::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool LegendModelArchive::has_frame() const {
  return _internal_has_frame();
}
inline const ::TSCH::RectArchive& LegendModelArchive::_internal_frame() const {
  const ::TSCH::RectArchive* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& LegendModelArchive::frame() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendModelArchive.frame)
  return _internal_frame();
}
inline void LegendModelArchive::unsafe_arena_set_allocated_frame(
    ::TSCH::RectArchive* frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendModelArchive.frame)
}
inline ::TSCH::RectArchive* LegendModelArchive::release_frame() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = frame_;
  frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::RectArchive* LegendModelArchive::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendModelArchive.frame)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* LegendModelArchive::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArena());
    frame_ = p;
  }
  return frame_;
}
inline ::TSCH::RectArchive* LegendModelArchive::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendModelArchive.frame)
  return _internal_mutable_frame();
}
inline void LegendModelArchive::set_allocated_frame(::TSCH::RectArchive* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame)->GetArena();
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendModelArchive.frame)
}

// required .TSP.Reference style = 3;
inline bool LegendModelArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool LegendModelArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& LegendModelArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LegendModelArchive::style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendModelArchive.style)
  return _internal_style();
}
inline void LegendModelArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendModelArchive.style)
}
inline ::TSP::Reference* LegendModelArchive::release_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendModelArchive.style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000004u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* LegendModelArchive::mutable_style() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendModelArchive.style)
  return _internal_mutable_style();
}
inline void LegendModelArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style)->GetArena();
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendModelArchive.style)
}

// required .TSP.Reference non_style = 4;
inline bool LegendModelArchive::_internal_has_non_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || non_style_ != nullptr);
  return value;
}
inline bool LegendModelArchive::has_non_style() const {
  return _internal_has_non_style();
}
inline const ::TSP::Reference& LegendModelArchive::_internal_non_style() const {
  const ::TSP::Reference* p = non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LegendModelArchive::non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendModelArchive.non_style)
  return _internal_non_style();
}
inline void LegendModelArchive::unsafe_arena_set_allocated_non_style(
    ::TSP::Reference* non_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  non_style_ = non_style;
  if (non_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendModelArchive.non_style)
}
inline ::TSP::Reference* LegendModelArchive::release_non_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::unsafe_arena_release_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendModelArchive.non_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = non_style_;
  non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LegendModelArchive::_internal_mutable_non_style() {
  _has_bits_[0] |= 0x00000008u;
  if (non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    non_style_ = p;
  }
  return non_style_;
}
inline ::TSP::Reference* LegendModelArchive::mutable_non_style() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendModelArchive.non_style)
  return _internal_mutable_non_style();
}
inline void LegendModelArchive::set_allocated_non_style(::TSP::Reference* non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style_);
  }
  if (non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style)->GetArena();
    if (message_arena != submessage_arena) {
      non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  non_style_ = non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendModelArchive.non_style)
}

// -------------------------------------------------------------------

// ChartModelArchive

// optional .TSP.Reference info = 1;
inline bool ChartModelArchive::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool ChartModelArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ChartModelArchive::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartModelArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.info)
  return _internal_info();
}
inline void ChartModelArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartModelArchive.info)
}
inline ::TSP::Reference* ChartModelArchive::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartModelArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartModelArchive.info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartModelArchive::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* ChartModelArchive::mutable_info() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartModelArchive.info)
  return _internal_mutable_info();
}
inline void ChartModelArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartModelArchive.info)
}

// required .TSP.Reference grid = 2;
inline bool ChartModelArchive::_internal_has_grid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || grid_ != nullptr);
  return value;
}
inline bool ChartModelArchive::has_grid() const {
  return _internal_has_grid();
}
inline const ::TSP::Reference& ChartModelArchive::_internal_grid() const {
  const ::TSP::Reference* p = grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartModelArchive::grid() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.grid)
  return _internal_grid();
}
inline void ChartModelArchive::unsafe_arena_set_allocated_grid(
    ::TSP::Reference* grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartModelArchive.grid)
}
inline ::TSP::Reference* ChartModelArchive::release_grid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = grid_;
  grid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartModelArchive::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartModelArchive.grid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartModelArchive::_internal_mutable_grid() {
  _has_bits_[0] |= 0x00000002u;
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    grid_ = p;
  }
  return grid_;
}
inline ::TSP::Reference* ChartModelArchive::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartModelArchive.grid)
  return _internal_mutable_grid();
}
inline void ChartModelArchive::set_allocated_grid(::TSP::Reference* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid)->GetArena();
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartModelArchive.grid)
}

// repeated uint32 series_types = 3;
inline int ChartModelArchive::_internal_series_types_size() const {
  return series_types_.size();
}
inline int ChartModelArchive::series_types_size() const {
  return _internal_series_types_size();
}
inline void ChartModelArchive::clear_series_types() {
  series_types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::_internal_series_types(int index) const {
  return series_types_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::series_types(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.series_types)
  return _internal_series_types(index);
}
inline void ChartModelArchive::set_series_types(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  series_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartModelArchive.series_types)
}
inline void ChartModelArchive::_internal_add_series_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  series_types_.Add(value);
}
inline void ChartModelArchive::add_series_types(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_series_types(value);
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartModelArchive.series_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ChartModelArchive::_internal_series_types() const {
  return series_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ChartModelArchive::series_types() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartModelArchive.series_types)
  return _internal_series_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ChartModelArchive::_internal_mutable_series_types() {
  return &series_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ChartModelArchive::mutable_series_types() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartModelArchive.series_types)
  return _internal_mutable_series_types();
}

// optional uint32 scatter_format = 4;
inline bool ChartModelArchive::_internal_has_scatter_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartModelArchive::has_scatter_format() const {
  return _internal_has_scatter_format();
}
inline void ChartModelArchive::clear_scatter_format() {
  scatter_format_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::_internal_scatter_format() const {
  return scatter_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::scatter_format() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.scatter_format)
  return _internal_scatter_format();
}
inline void ChartModelArchive::_internal_set_scatter_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  scatter_format_ = value;
}
inline void ChartModelArchive::set_scatter_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scatter_format(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartModelArchive.scatter_format)
}

// optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
inline bool ChartModelArchive::_internal_has_inline_grid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inline_grid_ != nullptr);
  return value;
}
inline bool ChartModelArchive::has_inline_grid() const {
  return _internal_has_inline_grid();
}
inline void ChartModelArchive::clear_inline_grid() {
  if (inline_grid_ != nullptr) inline_grid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::PreUFF::ChartGridArchive& ChartModelArchive::_internal_inline_grid() const {
  const ::TSCH::PreUFF::ChartGridArchive* p = inline_grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartGridArchive&>(
      ::TSCH::PreUFF::_ChartGridArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartGridArchive& ChartModelArchive::inline_grid() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.inline_grid)
  return _internal_inline_grid();
}
inline void ChartModelArchive::unsafe_arena_set_allocated_inline_grid(
    ::TSCH::PreUFF::ChartGridArchive* inline_grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_grid_);
  }
  inline_grid_ = inline_grid;
  if (inline_grid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartModelArchive.inline_grid)
}
inline ::TSCH::PreUFF::ChartGridArchive* ChartModelArchive::release_inline_grid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PreUFF::ChartGridArchive* temp = inline_grid_;
  inline_grid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartGridArchive* ChartModelArchive::unsafe_arena_release_inline_grid() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartModelArchive.inline_grid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PreUFF::ChartGridArchive* temp = inline_grid_;
  inline_grid_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartGridArchive* ChartModelArchive::_internal_mutable_inline_grid() {
  _has_bits_[0] |= 0x00000004u;
  if (inline_grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartGridArchive>(GetArena());
    inline_grid_ = p;
  }
  return inline_grid_;
}
inline ::TSCH::PreUFF::ChartGridArchive* ChartModelArchive::mutable_inline_grid() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartModelArchive.inline_grid)
  return _internal_mutable_inline_grid();
}
inline void ChartModelArchive::set_allocated_inline_grid(::TSCH::PreUFF::ChartGridArchive* inline_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inline_grid_;
  }
  if (inline_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inline_grid);
    if (message_arena != submessage_arena) {
      inline_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inline_grid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inline_grid_ = inline_grid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartModelArchive.inline_grid)
}

// optional uint32 multidataset_index = 6;
inline bool ChartModelArchive::_internal_has_multidataset_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartModelArchive::has_multidataset_index() const {
  return _internal_has_multidataset_index();
}
inline void ChartModelArchive::clear_multidataset_index() {
  multidataset_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::_internal_multidataset_index() const {
  return multidataset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartModelArchive::multidataset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartModelArchive.multidataset_index)
  return _internal_multidataset_index();
}
inline void ChartModelArchive::_internal_set_multidataset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  multidataset_index_ = value;
}
inline void ChartModelArchive::set_multidataset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multidataset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartModelArchive.multidataset_index)
}

// -------------------------------------------------------------------

// ChartGridArchive_ValueRow

// repeated double value = 1;
inline int ChartGridArchive_ValueRow::_internal_value_size() const {
  return value_.size();
}
inline int ChartGridArchive_ValueRow::value_size() const {
  return _internal_value_size();
}
inline void ChartGridArchive_ValueRow::clear_value() {
  value_.Clear();
}
inline double ChartGridArchive_ValueRow::_internal_value(int index) const {
  return value_.Get(index);
}
inline double ChartGridArchive_ValueRow::value(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.ValueRow.value)
  return _internal_value(index);
}
inline void ChartGridArchive_ValueRow::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.ValueRow.value)
}
inline void ChartGridArchive_ValueRow::_internal_add_value(double value) {
  value_.Add(value);
}
inline void ChartGridArchive_ValueRow::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.ValueRow.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ChartGridArchive_ValueRow::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ChartGridArchive_ValueRow::value() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartGridArchive.ValueRow.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ChartGridArchive_ValueRow::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ChartGridArchive_ValueRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartGridArchive.ValueRow.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// ChartGridArchive

// required int32 direction = 1;
inline bool ChartGridArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGridArchive::has_direction() const {
  return _internal_has_direction();
}
inline void ChartGridArchive::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGridArchive::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGridArchive::direction() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.direction)
  return _internal_direction();
}
inline void ChartGridArchive::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  direction_ = value;
}
inline void ChartGridArchive::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.direction)
}

// repeated string row_name = 2;
inline int ChartGridArchive::_internal_row_name_size() const {
  return row_name_.size();
}
inline int ChartGridArchive::row_name_size() const {
  return _internal_row_name_size();
}
inline void ChartGridArchive::clear_row_name() {
  row_name_.Clear();
}
inline std::string* ChartGridArchive::add_row_name() {
  // @@protoc_insertion_point(field_add_mutable:TSCH.PreUFF.ChartGridArchive.row_name)
  return _internal_add_row_name();
}
inline const std::string& ChartGridArchive::_internal_row_name(int index) const {
  return row_name_.Get(index);
}
inline const std::string& ChartGridArchive::row_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.row_name)
  return _internal_row_name(index);
}
inline std::string* ChartGridArchive::mutable_row_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartGridArchive.row_name)
  return row_name_.Mutable(index);
}
inline void ChartGridArchive::set_row_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.row_name)
  row_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_row_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.row_name)
  row_name_.Mutable(index)->assign(std::move(value));
}
inline void ChartGridArchive::set_row_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, const char* value, size_t size) {
  row_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline std::string* ChartGridArchive::_internal_add_row_name() {
  return row_name_.Add();
}
inline void ChartGridArchive::add_row_name(const std::string& value) {
  row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(std::string&& value) {
  row_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value, size_t size) {
  row_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.PreUFF.ChartGridArchive.row_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::row_name() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartGridArchive.row_name)
  return row_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_row_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartGridArchive.row_name)
  return &row_name_;
}

// repeated string column_name = 3;
inline int ChartGridArchive::_internal_column_name_size() const {
  return column_name_.size();
}
inline int ChartGridArchive::column_name_size() const {
  return _internal_column_name_size();
}
inline void ChartGridArchive::clear_column_name() {
  column_name_.Clear();
}
inline std::string* ChartGridArchive::add_column_name() {
  // @@protoc_insertion_point(field_add_mutable:TSCH.PreUFF.ChartGridArchive.column_name)
  return _internal_add_column_name();
}
inline const std::string& ChartGridArchive::_internal_column_name(int index) const {
  return column_name_.Get(index);
}
inline const std::string& ChartGridArchive::column_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.column_name)
  return _internal_column_name(index);
}
inline std::string* ChartGridArchive::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartGridArchive.column_name)
  return column_name_.Mutable(index);
}
inline void ChartGridArchive::set_column_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.column_name)
  column_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_column_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.column_name)
  column_name_.Mutable(index)->assign(std::move(value));
}
inline void ChartGridArchive::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline std::string* ChartGridArchive::_internal_add_column_name() {
  return column_name_.Add();
}
inline void ChartGridArchive::add_column_name(const std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(std::string&& value) {
  column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.PreUFF.ChartGridArchive.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::column_name() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartGridArchive.column_name)
  return column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartGridArchive.column_name)
  return &column_name_;
}

// repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
inline int ChartGridArchive::_internal_value_row_size() const {
  return value_row_.size();
}
inline int ChartGridArchive::value_row_size() const {
  return _internal_value_row_size();
}
inline void ChartGridArchive::clear_value_row() {
  value_row_.Clear();
}
inline ::TSCH::PreUFF::ChartGridArchive_ValueRow* ChartGridArchive::mutable_value_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartGridArchive.value_row)
  return value_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::PreUFF::ChartGridArchive_ValueRow >*
ChartGridArchive::mutable_value_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartGridArchive.value_row)
  return &value_row_;
}
inline const ::TSCH::PreUFF::ChartGridArchive_ValueRow& ChartGridArchive::_internal_value_row(int index) const {
  return value_row_.Get(index);
}
inline const ::TSCH::PreUFF::ChartGridArchive_ValueRow& ChartGridArchive::value_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.value_row)
  return _internal_value_row(index);
}
inline ::TSCH::PreUFF::ChartGridArchive_ValueRow* ChartGridArchive::_internal_add_value_row() {
  return value_row_.Add();
}
inline ::TSCH::PreUFF::ChartGridArchive_ValueRow* ChartGridArchive::add_value_row() {
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartGridArchive.value_row)
  return _internal_add_value_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::PreUFF::ChartGridArchive_ValueRow >&
ChartGridArchive::value_row() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartGridArchive.value_row)
  return value_row_;
}

// required bool dirty = 6;
inline bool ChartGridArchive::_internal_has_dirty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGridArchive::has_dirty() const {
  return _internal_has_dirty();
}
inline void ChartGridArchive::clear_dirty() {
  dirty_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ChartGridArchive::_internal_dirty() const {
  return dirty_;
}
inline bool ChartGridArchive::dirty() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartGridArchive.dirty)
  return _internal_dirty();
}
inline void ChartGridArchive::_internal_set_dirty(bool value) {
  _has_bits_[0] |= 0x00000002u;
  dirty_ = value;
}
inline void ChartGridArchive::set_dirty(bool value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartGridArchive.dirty)
}

// -------------------------------------------------------------------

// ChartsNumberFormatArchive

// required .TSCH.NumberValueType value_type = 1;
inline bool ChartsNumberFormatArchive::_internal_has_value_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_value_type() const {
  return _internal_has_value_type();
}
inline void ChartsNumberFormatArchive::clear_value_type() {
  value_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::TSCH::NumberValueType ChartsNumberFormatArchive::_internal_value_type() const {
  return static_cast< ::TSCH::NumberValueType >(value_type_);
}
inline ::TSCH::NumberValueType ChartsNumberFormatArchive::value_type() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.value_type)
  return _internal_value_type();
}
inline void ChartsNumberFormatArchive::_internal_set_value_type(::TSCH::NumberValueType value) {
  assert(::TSCH::NumberValueType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  value_type_ = value;
}
inline void ChartsNumberFormatArchive::set_value_type(::TSCH::NumberValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.value_type)
}

// optional string format_string = 2;
inline bool ChartsNumberFormatArchive::_internal_has_format_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_format_string() const {
  return _internal_has_format_string();
}
inline void ChartsNumberFormatArchive::clear_format_string() {
  format_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartsNumberFormatArchive::format_string() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.format_string)
  return _internal_format_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartsNumberFormatArchive::set_format_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.format_string)
}
inline std::string* ChartsNumberFormatArchive::mutable_format_string() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.format_string)
  return _internal_mutable_format_string();
}
inline const std::string& ChartsNumberFormatArchive::_internal_format_string() const {
  return format_string_.Get();
}
inline void ChartsNumberFormatArchive::_internal_set_format_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartsNumberFormatArchive::_internal_mutable_format_string() {
  _has_bits_[0] |= 0x00000001u;
  return format_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartsNumberFormatArchive::release_format_string() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.format_string)
  if (!_internal_has_format_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return format_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartsNumberFormatArchive::set_allocated_format_string(std::string* format_string) {
  if (format_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.format_string)
}

// required uint32 decimal_places = 3;
inline bool ChartsNumberFormatArchive::_internal_has_decimal_places() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void ChartsNumberFormatArchive::clear_decimal_places() {
  decimal_places_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_decimal_places() const {
  return decimal_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.decimal_places)
  return _internal_decimal_places();
}
inline void ChartsNumberFormatArchive::_internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  decimal_places_ = value;
}
inline void ChartsNumberFormatArchive::set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.decimal_places)
}

// optional string currency_code = 4;
inline bool ChartsNumberFormatArchive::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void ChartsNumberFormatArchive::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartsNumberFormatArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartsNumberFormatArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.currency_code)
}
inline std::string* ChartsNumberFormatArchive::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& ChartsNumberFormatArchive::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void ChartsNumberFormatArchive::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartsNumberFormatArchive::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000002u;
  return currency_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartsNumberFormatArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return currency_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartsNumberFormatArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.currency_code)
}

// required .TSCH.NegativeNumberStyle negative_style = 5;
inline bool ChartsNumberFormatArchive::_internal_has_negative_style() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_negative_style() const {
  return _internal_has_negative_style();
}
inline void ChartsNumberFormatArchive::clear_negative_style() {
  negative_style_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TSCH::NegativeNumberStyle ChartsNumberFormatArchive::_internal_negative_style() const {
  return static_cast< ::TSCH::NegativeNumberStyle >(negative_style_);
}
inline ::TSCH::NegativeNumberStyle ChartsNumberFormatArchive::negative_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.negative_style)
  return _internal_negative_style();
}
inline void ChartsNumberFormatArchive::_internal_set_negative_style(::TSCH::NegativeNumberStyle value) {
  assert(::TSCH::NegativeNumberStyle_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  negative_style_ = value;
}
inline void ChartsNumberFormatArchive::set_negative_style(::TSCH::NegativeNumberStyle value) {
  _internal_set_negative_style(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.negative_style)
}

// required bool show_thousands_separator = 6;
inline bool ChartsNumberFormatArchive::_internal_has_show_thousands_separator() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void ChartsNumberFormatArchive::clear_show_thousands_separator() {
  show_thousands_separator_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChartsNumberFormatArchive::_internal_show_thousands_separator() const {
  return show_thousands_separator_;
}
inline bool ChartsNumberFormatArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void ChartsNumberFormatArchive::_internal_set_show_thousands_separator(bool value) {
  _has_bits_[0] |= 0x00001000u;
  show_thousands_separator_ = value;
}
inline void ChartsNumberFormatArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.show_thousands_separator)
}

// required .TSCH.FractionAccuracy fraction_accuracy = 7;
inline bool ChartsNumberFormatArchive::_internal_has_fraction_accuracy() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void ChartsNumberFormatArchive::clear_fraction_accuracy() {
  fraction_accuracy_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::TSCH::FractionAccuracy ChartsNumberFormatArchive::_internal_fraction_accuracy() const {
  return static_cast< ::TSCH::FractionAccuracy >(fraction_accuracy_);
}
inline ::TSCH::FractionAccuracy ChartsNumberFormatArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void ChartsNumberFormatArchive::_internal_set_fraction_accuracy(::TSCH::FractionAccuracy value) {
  assert(::TSCH::FractionAccuracy_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  fraction_accuracy_ = value;
}
inline void ChartsNumberFormatArchive::set_fraction_accuracy(::TSCH::FractionAccuracy value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.fraction_accuracy)
}

// optional string suffix_string = 8;
inline bool ChartsNumberFormatArchive::_internal_has_suffix_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_suffix_string() const {
  return _internal_has_suffix_string();
}
inline void ChartsNumberFormatArchive::clear_suffix_string() {
  suffix_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChartsNumberFormatArchive::suffix_string() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string)
  return _internal_suffix_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartsNumberFormatArchive::set_suffix_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 suffix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string)
}
inline std::string* ChartsNumberFormatArchive::mutable_suffix_string() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string)
  return _internal_mutable_suffix_string();
}
inline const std::string& ChartsNumberFormatArchive::_internal_suffix_string() const {
  return suffix_string_.Get();
}
inline void ChartsNumberFormatArchive::_internal_set_suffix_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  suffix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartsNumberFormatArchive::_internal_mutable_suffix_string() {
  _has_bits_[0] |= 0x00000004u;
  return suffix_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartsNumberFormatArchive::release_suffix_string() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string)
  if (!_internal_has_suffix_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return suffix_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartsNumberFormatArchive::set_allocated_suffix_string(std::string* suffix_string) {
  if (suffix_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  suffix_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string)
}

// required uint32 base = 9;
inline bool ChartsNumberFormatArchive::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_base() const {
  return _internal_has_base();
}
inline void ChartsNumberFormatArchive::clear_base() {
  base_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::base() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.base)
  return _internal_base();
}
inline void ChartsNumberFormatArchive::_internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  base_ = value;
}
inline void ChartsNumberFormatArchive::set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.base)
}

// required uint32 base_places = 10;
inline bool ChartsNumberFormatArchive::_internal_has_base_places() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void ChartsNumberFormatArchive::clear_base_places() {
  base_places_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_base_places() const {
  return base_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.base_places)
  return _internal_base_places();
}
inline void ChartsNumberFormatArchive::_internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  base_places_ = value;
}
inline void ChartsNumberFormatArchive::set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.base_places)
}

// required bool base_use_minus_sign = 11;
inline bool ChartsNumberFormatArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void ChartsNumberFormatArchive::clear_base_use_minus_sign() {
  base_use_minus_sign_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ChartsNumberFormatArchive::_internal_base_use_minus_sign() const {
  return base_use_minus_sign_;
}
inline bool ChartsNumberFormatArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void ChartsNumberFormatArchive::_internal_set_base_use_minus_sign(bool value) {
  _has_bits_[0] |= 0x00002000u;
  base_use_minus_sign_ = value;
}
inline void ChartsNumberFormatArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.base_use_minus_sign)
}

// required bool use_accounting_style = 12;
inline bool ChartsNumberFormatArchive::_internal_has_use_accounting_style() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void ChartsNumberFormatArchive::clear_use_accounting_style() {
  use_accounting_style_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ChartsNumberFormatArchive::_internal_use_accounting_style() const {
  return use_accounting_style_;
}
inline bool ChartsNumberFormatArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void ChartsNumberFormatArchive::_internal_set_use_accounting_style(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_accounting_style_ = value;
}
inline void ChartsNumberFormatArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.use_accounting_style)
}

// required bool is_custom = 13;
inline bool ChartsNumberFormatArchive::_internal_has_is_custom() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_is_custom() const {
  return _internal_has_is_custom();
}
inline void ChartsNumberFormatArchive::clear_is_custom() {
  is_custom_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ChartsNumberFormatArchive::_internal_is_custom() const {
  return is_custom_;
}
inline bool ChartsNumberFormatArchive::is_custom() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.is_custom)
  return _internal_is_custom();
}
inline void ChartsNumberFormatArchive::_internal_set_is_custom(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_custom_ = value;
}
inline void ChartsNumberFormatArchive::set_is_custom(bool value) {
  _internal_set_is_custom(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.is_custom)
}

// required double scale_factor = 14;
inline bool ChartsNumberFormatArchive::_internal_has_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline void ChartsNumberFormatArchive::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double ChartsNumberFormatArchive::_internal_scale_factor() const {
  return scale_factor_;
}
inline double ChartsNumberFormatArchive::scale_factor() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.scale_factor)
  return _internal_scale_factor();
}
inline void ChartsNumberFormatArchive::_internal_set_scale_factor(double value) {
  _has_bits_[0] |= 0x00020000u;
  scale_factor_ = value;
}
inline void ChartsNumberFormatArchive::set_scale_factor(double value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.scale_factor)
}

// repeated string interstitial_strings = 15;
inline int ChartsNumberFormatArchive::_internal_interstitial_strings_size() const {
  return interstitial_strings_.size();
}
inline int ChartsNumberFormatArchive::interstitial_strings_size() const {
  return _internal_interstitial_strings_size();
}
inline void ChartsNumberFormatArchive::clear_interstitial_strings() {
  interstitial_strings_.Clear();
}
inline std::string* ChartsNumberFormatArchive::add_interstitial_strings() {
  // @@protoc_insertion_point(field_add_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  return _internal_add_interstitial_strings();
}
inline const std::string& ChartsNumberFormatArchive::_internal_interstitial_strings(int index) const {
  return interstitial_strings_.Get(index);
}
inline const std::string& ChartsNumberFormatArchive::interstitial_strings(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  return _internal_interstitial_strings(index);
}
inline std::string* ChartsNumberFormatArchive::mutable_interstitial_strings(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  return interstitial_strings_.Mutable(index);
}
inline void ChartsNumberFormatArchive::set_interstitial_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  interstitial_strings_.Mutable(index)->assign(value);
}
inline void ChartsNumberFormatArchive::set_interstitial_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  interstitial_strings_.Mutable(index)->assign(std::move(value));
}
inline void ChartsNumberFormatArchive::set_interstitial_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interstitial_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline void ChartsNumberFormatArchive::set_interstitial_strings(int index, const char* value, size_t size) {
  interstitial_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline std::string* ChartsNumberFormatArchive::_internal_add_interstitial_strings() {
  return interstitial_strings_.Add();
}
inline void ChartsNumberFormatArchive::add_interstitial_strings(const std::string& value) {
  interstitial_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline void ChartsNumberFormatArchive::add_interstitial_strings(std::string&& value) {
  interstitial_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline void ChartsNumberFormatArchive::add_interstitial_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interstitial_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline void ChartsNumberFormatArchive::add_interstitial_strings(const char* value, size_t size) {
  interstitial_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartsNumberFormatArchive::interstitial_strings() const {
  // @@protoc_insertion_point(field_list:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  return interstitial_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartsNumberFormatArchive::mutable_interstitial_strings() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings)
  return &interstitial_strings_;
}

// required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
inline bool ChartsNumberFormatArchive::_internal_has_interstitial_string_insertion_indexes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || interstitial_string_insertion_indexes_ != nullptr);
  return value;
}
inline bool ChartsNumberFormatArchive::has_interstitial_string_insertion_indexes() const {
  return _internal_has_interstitial_string_insertion_indexes();
}
inline const ::TSP::IndexSet& ChartsNumberFormatArchive::_internal_interstitial_string_insertion_indexes() const {
  const ::TSP::IndexSet* p = interstitial_string_insertion_indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& ChartsNumberFormatArchive::interstitial_string_insertion_indexes() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes)
  return _internal_interstitial_string_insertion_indexes();
}
inline void ChartsNumberFormatArchive::unsafe_arena_set_allocated_interstitial_string_insertion_indexes(
    ::TSP::IndexSet* interstitial_string_insertion_indexes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interstitial_string_insertion_indexes_);
  }
  interstitial_string_insertion_indexes_ = interstitial_string_insertion_indexes;
  if (interstitial_string_insertion_indexes) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes)
}
inline ::TSP::IndexSet* ChartsNumberFormatArchive::release_interstitial_string_insertion_indexes() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::IndexSet* temp = interstitial_string_insertion_indexes_;
  interstitial_string_insertion_indexes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* ChartsNumberFormatArchive::unsafe_arena_release_interstitial_string_insertion_indexes() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::IndexSet* temp = interstitial_string_insertion_indexes_;
  interstitial_string_insertion_indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* ChartsNumberFormatArchive::_internal_mutable_interstitial_string_insertion_indexes() {
  _has_bits_[0] |= 0x00000020u;
  if (interstitial_string_insertion_indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    interstitial_string_insertion_indexes_ = p;
  }
  return interstitial_string_insertion_indexes_;
}
inline ::TSP::IndexSet* ChartsNumberFormatArchive::mutable_interstitial_string_insertion_indexes() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes)
  return _internal_mutable_interstitial_string_insertion_indexes();
}
inline void ChartsNumberFormatArchive::set_allocated_interstitial_string_insertion_indexes(::TSP::IndexSet* interstitial_string_insertion_indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interstitial_string_insertion_indexes_);
  }
  if (interstitial_string_insertion_indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interstitial_string_insertion_indexes)->GetArena();
    if (message_arena != submessage_arena) {
      interstitial_string_insertion_indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interstitial_string_insertion_indexes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  interstitial_string_insertion_indexes_ = interstitial_string_insertion_indexes;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes)
}

// required uint32 index_from_right_of_last_digit_placeholder = 17;
inline bool ChartsNumberFormatArchive::_internal_has_index_from_right_of_last_digit_placeholder() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_index_from_right_of_last_digit_placeholder() const {
  return _internal_has_index_from_right_of_last_digit_placeholder();
}
inline void ChartsNumberFormatArchive::clear_index_from_right_of_last_digit_placeholder() {
  index_from_right_of_last_digit_placeholder_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_index_from_right_of_last_digit_placeholder() const {
  return index_from_right_of_last_digit_placeholder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::index_from_right_of_last_digit_placeholder() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.index_from_right_of_last_digit_placeholder)
  return _internal_index_from_right_of_last_digit_placeholder();
}
inline void ChartsNumberFormatArchive::_internal_set_index_from_right_of_last_digit_placeholder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  index_from_right_of_last_digit_placeholder_ = value;
}
inline void ChartsNumberFormatArchive::set_index_from_right_of_last_digit_placeholder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index_from_right_of_last_digit_placeholder(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.index_from_right_of_last_digit_placeholder)
}

// required bool is_text_format = 18;
inline bool ChartsNumberFormatArchive::_internal_has_is_text_format() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_is_text_format() const {
  return _internal_has_is_text_format();
}
inline void ChartsNumberFormatArchive::clear_is_text_format() {
  is_text_format_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ChartsNumberFormatArchive::_internal_is_text_format() const {
  return is_text_format_;
}
inline bool ChartsNumberFormatArchive::is_text_format() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.is_text_format)
  return _internal_is_text_format();
}
inline void ChartsNumberFormatArchive::_internal_set_is_text_format(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_text_format_ = value;
}
inline void ChartsNumberFormatArchive::set_is_text_format(bool value) {
  _internal_set_is_text_format(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.is_text_format)
}

// required uint32 minimum_integer_width = 19;
inline bool ChartsNumberFormatArchive::_internal_has_minimum_integer_width() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_minimum_integer_width() const {
  return _internal_has_minimum_integer_width();
}
inline void ChartsNumberFormatArchive::clear_minimum_integer_width() {
  minimum_integer_width_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_minimum_integer_width() const {
  return minimum_integer_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::minimum_integer_width() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.minimum_integer_width)
  return _internal_minimum_integer_width();
}
inline void ChartsNumberFormatArchive::_internal_set_minimum_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  minimum_integer_width_ = value;
}
inline void ChartsNumberFormatArchive::set_minimum_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minimum_integer_width(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.minimum_integer_width)
}

// required uint32 decimal_width = 20;
inline bool ChartsNumberFormatArchive::_internal_has_decimal_width() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_decimal_width() const {
  return _internal_has_decimal_width();
}
inline void ChartsNumberFormatArchive::clear_decimal_width() {
  decimal_width_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_decimal_width() const {
  return decimal_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::decimal_width() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.decimal_width)
  return _internal_decimal_width();
}
inline void ChartsNumberFormatArchive::_internal_set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  decimal_width_ = value;
}
inline void ChartsNumberFormatArchive::set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimal_width(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.decimal_width)
}

// required uint32 number_of_non_space_integer_placeholder_digits = 21;
inline bool ChartsNumberFormatArchive::_internal_has_number_of_non_space_integer_placeholder_digits() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_number_of_non_space_integer_placeholder_digits() const {
  return _internal_has_number_of_non_space_integer_placeholder_digits();
}
inline void ChartsNumberFormatArchive::clear_number_of_non_space_integer_placeholder_digits() {
  number_of_non_space_integer_placeholder_digits_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_number_of_non_space_integer_placeholder_digits() const {
  return number_of_non_space_integer_placeholder_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::number_of_non_space_integer_placeholder_digits() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.number_of_non_space_integer_placeholder_digits)
  return _internal_number_of_non_space_integer_placeholder_digits();
}
inline void ChartsNumberFormatArchive::_internal_set_number_of_non_space_integer_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  number_of_non_space_integer_placeholder_digits_ = value;
}
inline void ChartsNumberFormatArchive::set_number_of_non_space_integer_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_non_space_integer_placeholder_digits(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.number_of_non_space_integer_placeholder_digits)
}

// required uint32 number_of_non_space_decimal_placeholder_digits = 22;
inline bool ChartsNumberFormatArchive::_internal_has_number_of_non_space_decimal_placeholder_digits() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_number_of_non_space_decimal_placeholder_digits() const {
  return _internal_has_number_of_non_space_decimal_placeholder_digits();
}
inline void ChartsNumberFormatArchive::clear_number_of_non_space_decimal_placeholder_digits() {
  number_of_non_space_decimal_placeholder_digits_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::_internal_number_of_non_space_decimal_placeholder_digits() const {
  return number_of_non_space_decimal_placeholder_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChartsNumberFormatArchive::number_of_non_space_decimal_placeholder_digits() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.number_of_non_space_decimal_placeholder_digits)
  return _internal_number_of_non_space_decimal_placeholder_digits();
}
inline void ChartsNumberFormatArchive::_internal_set_number_of_non_space_decimal_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  number_of_non_space_decimal_placeholder_digits_ = value;
}
inline void ChartsNumberFormatArchive::set_number_of_non_space_decimal_placeholder_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_non_space_decimal_placeholder_digits(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.number_of_non_space_decimal_placeholder_digits)
}

// optional string format_name = 23;
inline bool ChartsNumberFormatArchive::_internal_has_format_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_format_name() const {
  return _internal_has_format_name();
}
inline void ChartsNumberFormatArchive::clear_format_name() {
  format_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChartsNumberFormatArchive::format_name() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.format_name)
  return _internal_format_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartsNumberFormatArchive::set_format_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.format_name)
}
inline std::string* ChartsNumberFormatArchive::mutable_format_name() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.format_name)
  return _internal_mutable_format_name();
}
inline const std::string& ChartsNumberFormatArchive::_internal_format_name() const {
  return format_name_.Get();
}
inline void ChartsNumberFormatArchive::_internal_set_format_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartsNumberFormatArchive::_internal_mutable_format_name() {
  _has_bits_[0] |= 0x00000008u;
  return format_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartsNumberFormatArchive::release_format_name() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.format_name)
  if (!_internal_has_format_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return format_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartsNumberFormatArchive::set_allocated_format_name(std::string* format_name) {
  if (format_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  format_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.format_name)
}

// optional string prefix_string = 24;
inline bool ChartsNumberFormatArchive::_internal_has_prefix_string() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartsNumberFormatArchive::has_prefix_string() const {
  return _internal_has_prefix_string();
}
inline void ChartsNumberFormatArchive::clear_prefix_string() {
  prefix_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ChartsNumberFormatArchive::prefix_string() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string)
  return _internal_prefix_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartsNumberFormatArchive::set_prefix_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 prefix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string)
}
inline std::string* ChartsNumberFormatArchive::mutable_prefix_string() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string)
  return _internal_mutable_prefix_string();
}
inline const std::string& ChartsNumberFormatArchive::_internal_prefix_string() const {
  return prefix_string_.Get();
}
inline void ChartsNumberFormatArchive::_internal_set_prefix_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  prefix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartsNumberFormatArchive::_internal_mutable_prefix_string() {
  _has_bits_[0] |= 0x00000010u;
  return prefix_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartsNumberFormatArchive::release_prefix_string() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string)
  if (!_internal_has_prefix_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return prefix_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartsNumberFormatArchive::set_allocated_prefix_string(std::string* prefix_string) {
  if (prefix_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  prefix_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string)
}

// -------------------------------------------------------------------

// ChartStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.super)
  return _internal_super();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.super)
}

// optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundfill() const {
  return _internal_has_tschchartinfodefaultbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfodefaultbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _internal_tschchartinfodefaultbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill_);
  }
  tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  if (tschchartinfodefaultbackgroundfill) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartinfodefaultbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartinfodefaultbackgroundfill_ = p;
  }
  return tschchartinfodefaultbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _internal_mutable_tschchartinfodefaultbackgroundfill();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill_);
  }
  if (tschchartinfodefaultbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}

// optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundstroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbackgroundstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundstroke() const {
  return _internal_has_tschchartinfodefaultbackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfodefaultbackgroundstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultbackgroundstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _internal_tschchartinfodefaultbackgroundstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke_);
  }
  tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  if (tschchartinfodefaultbackgroundstroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartinfodefaultbackgroundstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartinfodefaultbackgroundstroke_ = p;
  }
  return tschchartinfodefaultbackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _internal_mutable_tschchartinfodefaultbackgroundstroke();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke_);
  }
  if (tschchartinfodefaultbackgroundstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}

// optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultgridbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundfill() const {
  return _internal_has_tschchartinfodefaultgridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfodefaultgridbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultgridbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _internal_tschchartinfodefaultgridbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill_);
  }
  tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  if (tschchartinfodefaultgridbackgroundfill) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::FillArchive* temp = tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultgridbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::FillArchive* temp = tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartinfodefaultgridbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartinfodefaultgridbackgroundfill_ = p;
  }
  return tschchartinfodefaultgridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultgridbackgroundfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _internal_mutable_tschchartinfodefaultgridbackgroundfill();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill_);
  }
  if (tschchartinfodefaultgridbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultgridbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultgridbackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}

// optional float tschchartinfodefaultintersetgap = 13;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultintersetgap() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultintersetgap() const {
  return _internal_has_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultintersetgap() {
  tschchartinfodefaultintersetgap_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultintersetgap() const {
  return tschchartinfodefaultintersetgap_;
}
inline float ChartStyleArchive::tschchartinfodefaultintersetgap() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultintersetgap)
  return _internal_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultintersetgap(float value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartinfodefaultintersetgap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultintersetgap(float value) {
  _internal_set_tschchartinfodefaultintersetgap(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultintersetgap)
}

// optional float tschchartinfodefaultinterbargap = 14;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultinterbargap() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultinterbargap() const {
  return _internal_has_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultinterbargap() {
  tschchartinfodefaultinterbargap_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultinterbargap() const {
  return tschchartinfodefaultinterbargap_;
}
inline float ChartStyleArchive::tschchartinfodefaultinterbargap() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultinterbargap)
  return _internal_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultinterbargap(float value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartinfodefaultinterbargap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultinterbargap(float value) {
  _internal_set_tschchartinfodefaultinterbargap(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultinterbargap)
}

// optional bool tschchartinfodefaultshowborder = 15;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultshowborder() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultshowborder() const {
  return _internal_has_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultshowborder() {
  tschchartinfodefaultshowborder_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultshowborder() const {
  return tschchartinfodefaultshowborder_;
}
inline bool ChartStyleArchive::tschchartinfodefaultshowborder() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultshowborder)
  return _internal_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultshowborder(bool value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartinfodefaultshowborder_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultshowborder(bool value) {
  _internal_set_tschchartinfodefaultshowborder(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultshowborder)
}

// optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderstroke() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultborderstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderstroke() const {
  return _internal_has_tschchartinfodefaultborderstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultborderstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfodefaultborderstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultborderstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _internal_tschchartinfodefaultborderstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke_);
  }
  tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  if (tschchartinfodefaultborderstroke) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultborderstroke() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultborderstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderstroke)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultborderstroke() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartinfodefaultborderstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartinfodefaultborderstroke_ = p;
  }
  return tschchartinfodefaultborderstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultborderstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _internal_mutable_tschchartinfodefaultborderstroke();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke_);
  }
  if (tschchartinfodefaultborderstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultborderstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultborderstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderstroke)
}

// optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitlecolor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaulttitlecolor_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitlecolor() const {
  return _internal_has_tschchartinfodefaulttitlecolor();
}
inline const ::TSP::Color& ChartStyleArchive::_internal_tschchartinfodefaulttitlecolor() const {
  const ::TSP::Color* p = tschchartinfodefaulttitlecolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ChartStyleArchive::tschchartinfodefaulttitlecolor() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _internal_tschchartinfodefaulttitlecolor();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
    ::TSP::Color* tschchartinfodefaulttitlecolor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor_);
  }
  tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  if (tschchartinfodefaulttitlecolor) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}
inline ::TSP::Color* ChartStyleArchive::release_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Color* temp = tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaulttitlecolor() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Color* temp = tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = nullptr;
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::_internal_mutable_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartinfodefaulttitlecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    tschchartinfodefaulttitlecolor_ = p;
  }
  return tschchartinfodefaulttitlecolor_;
}
inline ::TSP::Color* ChartStyleArchive::mutable_tschchartinfodefaulttitlecolor() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _internal_mutable_tschchartinfodefaulttitlecolor();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor_);
  }
  if (tschchartinfodefaulttitlecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaulttitlecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaulttitlecolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}

// optional float tschchartinfodefaultgridbackgroundopacity = 19;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundopacity() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundopacity() const {
  return _internal_has_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundopacity() {
  tschchartinfodefaultgridbackgroundopacity_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundopacity() const {
  return tschchartinfodefaultgridbackgroundopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultgridbackgroundopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
  return _internal_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartinfodefaultgridbackgroundopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _internal_set_tschchartinfodefaultgridbackgroundopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
}

// optional bool tschchartinfodefaultcombinelayers = 20;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultcombinelayers() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultcombinelayers() const {
  return _internal_has_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultcombinelayers() {
  tschchartinfodefaultcombinelayers_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultcombinelayers() const {
  return tschchartinfodefaultcombinelayers_;
}
inline bool ChartStyleArchive::tschchartinfodefaultcombinelayers() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultcombinelayers)
  return _internal_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultcombinelayers(bool value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartinfodefaultcombinelayers_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultcombinelayers(bool value) {
  _internal_set_tschchartinfodefaultcombinelayers(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultcombinelayers)
}

// optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbordershadow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbordershadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbordershadow() const {
  return _internal_has_tschchartinfodefaultbordershadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfodefaultbordershadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfodefaultbordershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultbordershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _internal_tschchartinfodefaultbordershadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
    ::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow_);
  }
  tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  if (tschchartinfodefaultbordershadow) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbordershadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultbordershadow() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbordershadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbordershadow)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbordershadow() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartinfodefaultbordershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfodefaultbordershadow_ = p;
  }
  return tschchartinfodefaultbordershadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultbordershadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _internal_mutable_tschchartinfodefaultbordershadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow_);
  }
  if (tschchartinfodefaultbordershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbordershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbordershadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultbordershadow)
}

// optional float tschchartinfodefaultborderopacity = 22;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderopacity() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderopacity() const {
  return _internal_has_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultborderopacity() {
  tschchartinfodefaultborderopacity_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultborderopacity() const {
  return tschchartinfodefaultborderopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultborderopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderopacity)
  return _internal_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultborderopacity(float value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartinfodefaultborderopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultborderopacity(float value) {
  _internal_set_tschchartinfodefaultborderopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultborderopacity)
}

// optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitleparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaulttitleparagraphstyleindex() {
  tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaulttitleparagraphstyleindex() const {
  return tschchartinfodefaulttitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
  return _internal_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartinfodefaulttitleparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
}

// optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedmainfontfamily() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedmainfontfamily() const {
  return _internal_has_tschchartinfodefaultdeprecatedmainfontfamily();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedmainfontfamily() {
  tschchartinfodefaultdeprecatedmainfontfamily_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartStyleArchive::tschchartinfodefaultdeprecatedmainfontfamily() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily)
  return _internal_tschchartinfodefaultdeprecatedmainfontfamily();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedmainfontfamily(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartinfodefaultdeprecatedmainfontfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily)
}
inline std::string* ChartStyleArchive::mutable_tschchartinfodefaultdeprecatedmainfontfamily() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily)
  return _internal_mutable_tschchartinfodefaultdeprecatedmainfontfamily();
}
inline const std::string& ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedmainfontfamily() const {
  return tschchartinfodefaultdeprecatedmainfontfamily_.Get();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedmainfontfamily(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartinfodefaultdeprecatedmainfontfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartStyleArchive::_internal_mutable_tschchartinfodefaultdeprecatedmainfontfamily() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartinfodefaultdeprecatedmainfontfamily_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartStyleArchive::release_tschchartinfodefaultdeprecatedmainfontfamily() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily)
  if (!_internal_has_tschchartinfodefaultdeprecatedmainfontfamily()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartinfodefaultdeprecatedmainfontfamily_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultdeprecatedmainfontfamily(std::string* tschchartinfodefaultdeprecatedmainfontfamily) {
  if (tschchartinfodefaultdeprecatedmainfontfamily != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartinfodefaultdeprecatedmainfontfamily_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartinfodefaultdeprecatedmainfontfamily,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily)
}

// optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedmainfontnamedsize() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedmainfontnamedsize() const {
  return _internal_has_tschchartinfodefaultdeprecatedmainfontnamedsize();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedmainfontnamedsize() {
  tschchartinfodefaultdeprecatedmainfontnamedsize_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedmainfontnamedsize() const {
  return tschchartinfodefaultdeprecatedmainfontnamedsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaultdeprecatedmainfontnamedsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontnamedsize)
  return _internal_tschchartinfodefaultdeprecatedmainfontnamedsize();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartinfodefaultdeprecatedmainfontnamedsize_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdeprecatedmainfontnamedsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontnamedsize)
}

// optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() {
  tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const {
  return tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex)
  return _internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex)
}

// optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() {
  tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const {
  return tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex)
  return _internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultdeprecatedtrendlineequationshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlineequationshadow() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlineequationshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlineequationshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow)
  return _internal_tschchartinfodefaultdeprecatedtrendlineequationshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultdeprecatedtrendlineequationshadow(
    ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlineequationshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlineequationshadow_);
  }
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = tschchartinfodefaultdeprecatedtrendlineequationshadow;
  if (tschchartinfodefaultdeprecatedtrendlineequationshadow) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartinfodefaultdeprecatedtrendlineequationshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfodefaultdeprecatedtrendlineequationshadow_ = p;
  }
  return tschchartinfodefaultdeprecatedtrendlineequationshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow)
  return _internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultdeprecatedtrendlineequationshadow(::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlineequationshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlineequationshadow_);
  }
  if (tschchartinfodefaultdeprecatedtrendlineequationshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlineequationshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultdeprecatedtrendlineequationshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultdeprecatedtrendlineequationshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartinfodefaultdeprecatedtrendlineequationshadow_ = tschchartinfodefaultdeprecatedtrendlineequationshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow)
}

// optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlinersquaredshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow)
  return _internal_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(
    ::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlinersquaredshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
  }
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = tschchartinfodefaultdeprecatedtrendlinersquaredshadow;
  if (tschchartinfodefaultdeprecatedtrendlinersquaredshadow) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = p;
  }
  return tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow)
  return _internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(::TSD::ShadowArchive* tschchartinfodefaultdeprecatedtrendlinersquaredshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
  }
  if (tschchartinfodefaultdeprecatedtrendlinersquaredshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecatedtrendlinersquaredshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultdeprecatedtrendlinersquaredshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultdeprecatedtrendlinersquaredshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = tschchartinfodefaultdeprecatedtrendlinersquaredshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow)
}

// optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlineequationopacity() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlineequationopacity() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlineequationopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlineequationopacity() {
  tschchartinfodefaultdeprecatedtrendlineequationopacity_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlineequationopacity() const {
  return tschchartinfodefaultdeprecatedtrendlineequationopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlineequationopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationopacity)
  return _internal_tschchartinfodefaultdeprecatedtrendlineequationopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedtrendlineequationopacity(float value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartinfodefaultdeprecatedtrendlineequationopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedtrendlineequationopacity(float value) {
  _internal_set_tschchartinfodefaultdeprecatedtrendlineequationopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationopacity)
}

// optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const {
  return _internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() {
  tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const {
  return tschchartinfodefaultdeprecatedtrendlinersquaredopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultdeprecatedtrendlinersquaredopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredopacity)
  return _internal_tschchartinfodefaultdeprecatedtrendlinersquaredopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(float value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(float value) {
  _internal_set_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredopacity)
}

// optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
inline bool ChartStyleArchive::_internal_has_tschchartinfobardeprecated3dshadow() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobardeprecated3dshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfobardeprecated3dshadow() const {
  return _internal_has_tschchartinfobardeprecated3dshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfobardeprecated3dshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfobardeprecated3dshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfobardeprecated3dshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dshadow)
  return _internal_tschchartinfobardeprecated3dshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfobardeprecated3dshadow(
    ::TSD::ShadowArchive* tschchartinfobardeprecated3dshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dshadow_);
  }
  tschchartinfobardeprecated3dshadow_ = tschchartinfobardeprecated3dshadow;
  if (tschchartinfobardeprecated3dshadow) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfobardeprecated3dshadow() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::ShadowArchive* temp = tschchartinfobardeprecated3dshadow_;
  tschchartinfobardeprecated3dshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfobardeprecated3dshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dshadow)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::ShadowArchive* temp = tschchartinfobardeprecated3dshadow_;
  tschchartinfobardeprecated3dshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfobardeprecated3dshadow() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartinfobardeprecated3dshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfobardeprecated3dshadow_ = p;
  }
  return tschchartinfobardeprecated3dshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfobardeprecated3dshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dshadow)
  return _internal_mutable_tschchartinfobardeprecated3dshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfobardeprecated3dshadow(::TSD::ShadowArchive* tschchartinfobardeprecated3dshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dshadow_);
  }
  if (tschchartinfobardeprecated3dshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfobardeprecated3dshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobardeprecated3dshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartinfobardeprecated3dshadow_ = tschchartinfobardeprecated3dshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dshadow)
}

// optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
inline bool ChartStyleArchive::_internal_has_tschchartinfocolumndeprecated3dshadow() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumndeprecated3dshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfocolumndeprecated3dshadow() const {
  return _internal_has_tschchartinfocolumndeprecated3dshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfocolumndeprecated3dshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfocolumndeprecated3dshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfocolumndeprecated3dshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dshadow)
  return _internal_tschchartinfocolumndeprecated3dshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumndeprecated3dshadow(
    ::TSD::ShadowArchive* tschchartinfocolumndeprecated3dshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dshadow_);
  }
  tschchartinfocolumndeprecated3dshadow_ = tschchartinfocolumndeprecated3dshadow;
  if (tschchartinfocolumndeprecated3dshadow) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfocolumndeprecated3dshadow() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::ShadowArchive* temp = tschchartinfocolumndeprecated3dshadow_;
  tschchartinfocolumndeprecated3dshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfocolumndeprecated3dshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dshadow)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::ShadowArchive* temp = tschchartinfocolumndeprecated3dshadow_;
  tschchartinfocolumndeprecated3dshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfocolumndeprecated3dshadow() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartinfocolumndeprecated3dshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfocolumndeprecated3dshadow_ = p;
  }
  return tschchartinfocolumndeprecated3dshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfocolumndeprecated3dshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dshadow)
  return _internal_mutable_tschchartinfocolumndeprecated3dshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfocolumndeprecated3dshadow(::TSD::ShadowArchive* tschchartinfocolumndeprecated3dshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dshadow_);
  }
  if (tschchartinfocolumndeprecated3dshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfocolumndeprecated3dshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumndeprecated3dshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartinfocolumndeprecated3dshadow_ = tschchartinfocolumndeprecated3dshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dshadow)
}

// optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
inline bool ChartStyleArchive::_internal_has_tschchartinfolinedeprecated3dshadow() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfolinedeprecated3dshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfolinedeprecated3dshadow() const {
  return _internal_has_tschchartinfolinedeprecated3dshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfolinedeprecated3dshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfolinedeprecated3dshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfolinedeprecated3dshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfolinedeprecated3dshadow)
  return _internal_tschchartinfolinedeprecated3dshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfolinedeprecated3dshadow(
    ::TSD::ShadowArchive* tschchartinfolinedeprecated3dshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dshadow_);
  }
  tschchartinfolinedeprecated3dshadow_ = tschchartinfolinedeprecated3dshadow;
  if (tschchartinfolinedeprecated3dshadow) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfolinedeprecated3dshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfolinedeprecated3dshadow() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::ShadowArchive* temp = tschchartinfolinedeprecated3dshadow_;
  tschchartinfolinedeprecated3dshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfolinedeprecated3dshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfolinedeprecated3dshadow)
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::ShadowArchive* temp = tschchartinfolinedeprecated3dshadow_;
  tschchartinfolinedeprecated3dshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfolinedeprecated3dshadow() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartinfolinedeprecated3dshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfolinedeprecated3dshadow_ = p;
  }
  return tschchartinfolinedeprecated3dshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfolinedeprecated3dshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfolinedeprecated3dshadow)
  return _internal_mutable_tschchartinfolinedeprecated3dshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfolinedeprecated3dshadow(::TSD::ShadowArchive* tschchartinfolinedeprecated3dshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dshadow_);
  }
  if (tschchartinfolinedeprecated3dshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfolinedeprecated3dshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfolinedeprecated3dshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartinfolinedeprecated3dshadow_ = tschchartinfolinedeprecated3dshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfolinedeprecated3dshadow)
}

// optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
inline bool ChartStyleArchive::_internal_has_tschchartinfoareadeprecated3dshadow() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoareadeprecated3dshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoareadeprecated3dshadow() const {
  return _internal_has_tschchartinfoareadeprecated3dshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfoareadeprecated3dshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfoareadeprecated3dshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfoareadeprecated3dshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfoareadeprecated3dshadow)
  return _internal_tschchartinfoareadeprecated3dshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoareadeprecated3dshadow(
    ::TSD::ShadowArchive* tschchartinfoareadeprecated3dshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dshadow_);
  }
  tschchartinfoareadeprecated3dshadow_ = tschchartinfoareadeprecated3dshadow;
  if (tschchartinfoareadeprecated3dshadow) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoareadeprecated3dshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfoareadeprecated3dshadow() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ShadowArchive* temp = tschchartinfoareadeprecated3dshadow_;
  tschchartinfoareadeprecated3dshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoareadeprecated3dshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfoareadeprecated3dshadow)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ShadowArchive* temp = tschchartinfoareadeprecated3dshadow_;
  tschchartinfoareadeprecated3dshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfoareadeprecated3dshadow() {
  _has_bits_[0] |= 0x00002000u;
  if (tschchartinfoareadeprecated3dshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfoareadeprecated3dshadow_ = p;
  }
  return tschchartinfoareadeprecated3dshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfoareadeprecated3dshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfoareadeprecated3dshadow)
  return _internal_mutable_tschchartinfoareadeprecated3dshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfoareadeprecated3dshadow(::TSD::ShadowArchive* tschchartinfoareadeprecated3dshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dshadow_);
  }
  if (tschchartinfoareadeprecated3dshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoareadeprecated3dshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoareadeprecated3dshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tschchartinfoareadeprecated3dshadow_ = tschchartinfoareadeprecated3dshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoareadeprecated3dshadow)
}

// optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
inline bool ChartStyleArchive::_internal_has_tschchartinfopiedeprecated3dshadow() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopiedeprecated3dshadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfopiedeprecated3dshadow() const {
  return _internal_has_tschchartinfopiedeprecated3dshadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfopiedeprecated3dshadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfopiedeprecated3dshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfopiedeprecated3dshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dshadow)
  return _internal_tschchartinfopiedeprecated3dshadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfopiedeprecated3dshadow(
    ::TSD::ShadowArchive* tschchartinfopiedeprecated3dshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dshadow_);
  }
  tschchartinfopiedeprecated3dshadow_ = tschchartinfopiedeprecated3dshadow;
  if (tschchartinfopiedeprecated3dshadow) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dshadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfopiedeprecated3dshadow() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::ShadowArchive* temp = tschchartinfopiedeprecated3dshadow_;
  tschchartinfopiedeprecated3dshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfopiedeprecated3dshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dshadow)
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::ShadowArchive* temp = tschchartinfopiedeprecated3dshadow_;
  tschchartinfopiedeprecated3dshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfopiedeprecated3dshadow() {
  _has_bits_[0] |= 0x00004000u;
  if (tschchartinfopiedeprecated3dshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartinfopiedeprecated3dshadow_ = p;
  }
  return tschchartinfopiedeprecated3dshadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfopiedeprecated3dshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dshadow)
  return _internal_mutable_tschchartinfopiedeprecated3dshadow();
}
inline void ChartStyleArchive::set_allocated_tschchartinfopiedeprecated3dshadow(::TSD::ShadowArchive* tschchartinfopiedeprecated3dshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dshadow_);
  }
  if (tschchartinfopiedeprecated3dshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfopiedeprecated3dshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopiedeprecated3dshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  tschchartinfopiedeprecated3dshadow_ = tschchartinfopiedeprecated3dshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dshadow)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dlightingpackage() const {
  return _internal_has_tschchartinfodefault3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfodefault3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfodefault3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfodefault3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _internal_tschchartinfodefault3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage_);
  }
  tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  if (tschchartinfodefault3dlightingpackage) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefault3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  _has_bits_[0] &= ~0x00008000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] |= 0x00008000u;
  if (tschchartinfodefault3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfodefault3dlightingpackage_ = p;
  }
  return tschchartinfodefault3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfodefault3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _internal_mutable_tschchartinfodefault3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage_);
  }
  if (tschchartinfodefault3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
inline bool ChartStyleArchive::_internal_has_tschchartinfocolumn3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumn3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfocolumn3dlightingpackage() const {
  return _internal_has_tschchartinfocolumn3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfocolumn3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfocolumn3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfocolumn3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _internal_tschchartinfocolumn3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage_);
  }
  tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  if (tschchartinfocolumn3dlightingpackage) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfocolumn3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  _has_bits_[0] &= ~0x00010000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] |= 0x00010000u;
  if (tschchartinfocolumn3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfocolumn3dlightingpackage_ = p;
  }
  return tschchartinfocolumn3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfocolumn3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _internal_mutable_tschchartinfocolumn3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage_);
  }
  if (tschchartinfocolumn3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
inline bool ChartStyleArchive::_internal_has_tschchartinfobar3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobar3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfobar3dlightingpackage() const {
  return _internal_has_tschchartinfobar3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfobar3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfobar3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfobar3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _internal_tschchartinfobar3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage_);
  }
  tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  if (tschchartinfobar3dlightingpackage) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfobar3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  _has_bits_[0] &= ~0x00020000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] |= 0x00020000u;
  if (tschchartinfobar3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfobar3dlightingpackage_ = p;
  }
  return tschchartinfobar3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfobar3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _internal_mutable_tschchartinfobar3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage_);
  }
  if (tschchartinfobar3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfobar3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
inline bool ChartStyleArchive::_internal_has_tschchartinfoline3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoline3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoline3dlightingpackage() const {
  return _internal_has_tschchartinfoline3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoline3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfoline3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoline3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _internal_tschchartinfoline3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage_);
  }
  tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  if (tschchartinfoline3dlightingpackage) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoline3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  _has_bits_[0] &= ~0x00040000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] |= 0x00040000u;
  if (tschchartinfoline3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfoline3dlightingpackage_ = p;
  }
  return tschchartinfoline3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoline3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _internal_mutable_tschchartinfoline3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage_);
  }
  if (tschchartinfoline3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoline3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
inline bool ChartStyleArchive::_internal_has_tschchartinfoarea3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoarea3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoarea3dlightingpackage() const {
  return _internal_has_tschchartinfoarea3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoarea3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfoarea3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoarea3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _internal_tschchartinfoarea3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage_);
  }
  tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  if (tschchartinfoarea3dlightingpackage) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoarea3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  _has_bits_[0] &= ~0x00080000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] |= 0x00080000u;
  if (tschchartinfoarea3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfoarea3dlightingpackage_ = p;
  }
  return tschchartinfoarea3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoarea3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _internal_mutable_tschchartinfoarea3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage_);
  }
  if (tschchartinfoarea3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
inline bool ChartStyleArchive::_internal_has_tschchartinfopie3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopie3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfopie3dlightingpackage() const {
  return _internal_has_tschchartinfopie3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfopie3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfopie3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfopie3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _internal_tschchartinfopie3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage_);
  }
  tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  if (tschchartinfopie3dlightingpackage) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfopie3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  _has_bits_[0] &= ~0x00100000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] |= 0x00100000u;
  if (tschchartinfopie3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfopie3dlightingpackage_ = p;
  }
  return tschchartinfopie3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfopie3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _internal_mutable_tschchartinfopie3dlightingpackage();
}
inline void ChartStyleArchive::set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage_);
  }
  if (tschchartinfopie3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfopie3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}

// optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecated3dbeveledges() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecated3dbeveledges() const {
  return _internal_has_tschchartinfodefaultdeprecated3dbeveledges();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecated3dbeveledges() {
  tschchartinfodefaultdeprecated3dbeveledges_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultdeprecated3dbeveledges() const {
  return tschchartinfodefaultdeprecated3dbeveledges_;
}
inline bool ChartStyleArchive::tschchartinfodefaultdeprecated3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecated3dbeveledges)
  return _internal_tschchartinfodefaultdeprecated3dbeveledges();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecated3dbeveledges(bool value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartinfodefaultdeprecated3dbeveledges_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecated3dbeveledges(bool value) {
  _internal_set_tschchartinfodefaultdeprecated3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecated3dbeveledges)
}

// optional bool tschchartinfopiedeprecated3dbeveledges = 327;
inline bool ChartStyleArchive::_internal_has_tschchartinfopiedeprecated3dbeveledges() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfopiedeprecated3dbeveledges() const {
  return _internal_has_tschchartinfopiedeprecated3dbeveledges();
}
inline void ChartStyleArchive::clear_tschchartinfopiedeprecated3dbeveledges() {
  tschchartinfopiedeprecated3dbeveledges_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartStyleArchive::_internal_tschchartinfopiedeprecated3dbeveledges() const {
  return tschchartinfopiedeprecated3dbeveledges_;
}
inline bool ChartStyleArchive::tschchartinfopiedeprecated3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dbeveledges)
  return _internal_tschchartinfopiedeprecated3dbeveledges();
}
inline void ChartStyleArchive::_internal_set_tschchartinfopiedeprecated3dbeveledges(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartinfopiedeprecated3dbeveledges_ = value;
}
inline void ChartStyleArchive::set_tschchartinfopiedeprecated3dbeveledges(bool value) {
  _internal_set_tschchartinfopiedeprecated3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfopiedeprecated3dbeveledges)
}

// optional bool tschchartinfobardeprecated3dbeveledges = 328;
inline bool ChartStyleArchive::_internal_has_tschchartinfobardeprecated3dbeveledges() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfobardeprecated3dbeveledges() const {
  return _internal_has_tschchartinfobardeprecated3dbeveledges();
}
inline void ChartStyleArchive::clear_tschchartinfobardeprecated3dbeveledges() {
  tschchartinfobardeprecated3dbeveledges_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ChartStyleArchive::_internal_tschchartinfobardeprecated3dbeveledges() const {
  return tschchartinfobardeprecated3dbeveledges_;
}
inline bool ChartStyleArchive::tschchartinfobardeprecated3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dbeveledges)
  return _internal_tschchartinfobardeprecated3dbeveledges();
}
inline void ChartStyleArchive::_internal_set_tschchartinfobardeprecated3dbeveledges(bool value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartinfobardeprecated3dbeveledges_ = value;
}
inline void ChartStyleArchive::set_tschchartinfobardeprecated3dbeveledges(bool value) {
  _internal_set_tschchartinfobardeprecated3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfobardeprecated3dbeveledges)
}

// optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
inline bool ChartStyleArchive::_internal_has_tschchartinfocolumndeprecated3dbeveledges() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfocolumndeprecated3dbeveledges() const {
  return _internal_has_tschchartinfocolumndeprecated3dbeveledges();
}
inline void ChartStyleArchive::clear_tschchartinfocolumndeprecated3dbeveledges() {
  tschchartinfocolumndeprecated3dbeveledges_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool ChartStyleArchive::_internal_tschchartinfocolumndeprecated3dbeveledges() const {
  return tschchartinfocolumndeprecated3dbeveledges_;
}
inline bool ChartStyleArchive::tschchartinfocolumndeprecated3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dbeveledges)
  return _internal_tschchartinfocolumndeprecated3dbeveledges();
}
inline void ChartStyleArchive::_internal_set_tschchartinfocolumndeprecated3dbeveledges(bool value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartinfocolumndeprecated3dbeveledges_ = value;
}
inline void ChartStyleArchive::set_tschchartinfocolumndeprecated3dbeveledges(bool value) {
  _internal_set_tschchartinfocolumndeprecated3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfocolumndeprecated3dbeveledges)
}

// optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdeprecated3dbarshape() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdeprecated3dbarshape() const {
  return _internal_has_tschchartinfodefaultdeprecated3dbarshape();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdeprecated3dbarshape() {
  tschchartinfodefaultdeprecated3dbarshape_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaultdeprecated3dbarshape() const {
  return tschchartinfodefaultdeprecated3dbarshape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaultdeprecated3dbarshape() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecated3dbarshape)
  return _internal_tschchartinfodefaultdeprecated3dbarshape();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdeprecated3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartinfodefaultdeprecated3dbarshape_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdeprecated3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdeprecated3dbarshape(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecated3dbarshape)
}

// optional float tschchartinfodefault3dchartopacity = 335;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dchartopacity() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dchartopacity() const {
  return _internal_has_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefault3dchartopacity() {
  tschchartinfodefault3dchartopacity_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefault3dchartopacity() const {
  return tschchartinfodefault3dchartopacity_;
}
inline float ChartStyleArchive::tschchartinfodefault3dchartopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dchartopacity)
  return _internal_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefault3dchartopacity(float value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartinfodefault3dchartopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefault3dchartopacity(float value) {
  _internal_set_tschchartinfodefault3dchartopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartStyleArchive.tschchartinfodefault3dchartopacity)
}

// -------------------------------------------------------------------

// ChartNonStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartNonStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartNonStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartNonStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.super)
  return _internal_super();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartNonStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartNonStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartNonStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartNonStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartNonStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.super)
}

// optional string tschchartinfodefaulttitle = 10;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaulttitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaulttitle() const {
  return _internal_has_tschchartinfodefaulttitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaulttitle() {
  tschchartinfodefaulttitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartNonStyleArchive::tschchartinfodefaulttitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _internal_tschchartinfodefaulttitle();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartNonStyleArchive::set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle)
}
inline std::string* ChartNonStyleArchive::mutable_tschchartinfodefaulttitle() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _internal_mutable_tschchartinfodefaulttitle();
}
inline const std::string& ChartNonStyleArchive::_internal_tschchartinfodefaulttitle() const {
  return tschchartinfodefaulttitle_.Get();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaulttitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartNonStyleArchive::_internal_mutable_tschchartinfodefaulttitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartinfodefaulttitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartNonStyleArchive::release_tschchartinfodefaulttitle() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle)
  if (!_internal_has_tschchartinfodefaulttitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartinfodefaulttitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle) {
  if (tschchartinfodefaulttitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartinfodefaulttitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartinfodefaulttitle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle)
}

// optional bool tschchartinfodefaultshowlegend = 11;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowlegend() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowlegend() const {
  return _internal_has_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowlegend() {
  tschchartinfodefaultshowlegend_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowlegend() const {
  return tschchartinfodefaultshowlegend_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowlegend() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
  return _internal_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowlegend(bool value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartinfodefaultshowlegend_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowlegend(bool value) {
  _internal_set_tschchartinfodefaultshowlegend(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
}

// optional float tschchartinfodefaultpiestartangle = 12;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultpiestartangle() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultpiestartangle() const {
  return _internal_has_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultpiestartangle() {
  tschchartinfodefaultpiestartangle_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefaultpiestartangle() const {
  return tschchartinfodefaultpiestartangle_;
}
inline float ChartNonStyleArchive::tschchartinfodefaultpiestartangle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
  return _internal_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultpiestartangle(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartinfodefaultpiestartangle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultpiestartangle(float value) {
  _internal_set_tschchartinfodefaultpiestartangle(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
}

// optional bool tschchartinfodefaultshowtitle = 13;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowtitle() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowtitle() const {
  return _internal_has_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowtitle() {
  tschchartinfodefaultshowtitle_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowtitle() const {
  return tschchartinfodefaultshowtitle_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
  return _internal_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowtitle(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartinfodefaultshowtitle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowtitle(bool value) {
  _internal_set_tschchartinfodefaultshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
}

// optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const {
  return _internal_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdeprecatedagainmainfontnamedsize() {
  tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize() const {
  return tschchartinfodefaultdeprecatedagainmainfontnamedsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefaultdeprecatedagainmainfontnamedsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecatedagainmainfontnamedsize)
  return _internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdeprecatedagainmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdeprecatedagainmainfontnamedsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdeprecatedagainmainfontnamedsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecatedagainmainfontnamedsize)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3drotation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3drotation_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3drotation() const {
  return _internal_has_tschchartinfodefault3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3drotation() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3drotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3drotation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _internal_tschchartinfodefault3drotation();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3drotation(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation_);
  }
  tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  if (tschchartinfodefault3drotation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3drotation)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3drotation() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3drotation() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3drotation)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3drotation() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartinfodefault3drotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfodefault3drotation_ = p;
  }
  return tschchartinfodefault3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3drotation() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _internal_mutable_tschchartinfodefault3drotation();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation_);
  }
  if (tschchartinfodefault3drotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefault3drotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3drotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3drotation)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dscale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dscale() const {
  return _internal_has_tschchartinfodefault3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _internal_tschchartinfodefault3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale_);
  }
  tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  if (tschchartinfodefault3dscale) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dscale() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dscale)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dscale() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartinfodefault3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfodefault3dscale_ = p;
  }
  return tschchartinfodefault3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _internal_mutable_tschchartinfodefault3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale_);
  }
  if (tschchartinfodefault3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfocolumn3dscale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumn3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfocolumn3dscale() const {
  return _internal_has_tschchartinfocolumn3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfocolumn3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfocolumn3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfocolumn3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _internal_tschchartinfocolumn3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale_);
  }
  tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  if (tschchartinfocolumn3dscale) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfocolumn3dscale() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfocolumn3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfocolumn3dscale() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartinfocolumn3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfocolumn3dscale_ = p;
  }
  return tschchartinfocolumn3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfocolumn3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _internal_mutable_tschchartinfocolumn3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale_);
  }
  if (tschchartinfocolumn3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobar3dscale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobar3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobar3dscale() const {
  return _internal_has_tschchartinfobar3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfobar3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfobar3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfobar3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _internal_tschchartinfobar3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale_);
  }
  tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  if (tschchartinfobar3dscale) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobar3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfobar3dscale() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfobar3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobar3dscale)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfobar3dscale() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartinfobar3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfobar3dscale_ = p;
  }
  return tschchartinfobar3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfobar3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _internal_mutable_tschchartinfobar3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale_);
  }
  if (tschchartinfobar3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfobar3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobar3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoline3dscale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoline3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoline3dscale() const {
  return _internal_has_tschchartinfoline3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoline3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfoline3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoline3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _internal_tschchartinfoline3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale_);
  }
  tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  if (tschchartinfoline3dscale) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoline3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoline3dscale() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoline3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoline3dscale)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoline3dscale() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartinfoline3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfoline3dscale_ = p;
  }
  return tschchartinfoline3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoline3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _internal_mutable_tschchartinfoline3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale_);
  }
  if (tschchartinfoline3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoline3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoline3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoarea3dscale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoarea3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoarea3dscale() const {
  return _internal_has_tschchartinfoarea3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoarea3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfoarea3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoarea3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _internal_tschchartinfoarea3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale_);
  }
  tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  if (tschchartinfoarea3dscale) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoarea3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoarea3dscale() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoarea3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoarea3dscale)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoarea3dscale() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartinfoarea3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfoarea3dscale_ = p;
  }
  return tschchartinfoarea3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoarea3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _internal_mutable_tschchartinfoarea3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale_);
  }
  if (tschchartinfoarea3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoarea3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfopie3dscale() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopie3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfopie3dscale() const {
  return _internal_has_tschchartinfopie3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfopie3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfopie3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfopie3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _internal_tschchartinfopie3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale_);
  }
  tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  if (tschchartinfopie3dscale) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopie3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfopie3dscale() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfopie3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopie3dscale)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfopie3dscale() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartinfopie3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfopie3dscale_ = p;
  }
  return tschchartinfopie3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfopie3dscale() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _internal_mutable_tschchartinfopie3dscale();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale_);
  }
  if (tschchartinfopie3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfopie3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopie3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dviewport() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dviewport_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dviewport() const {
  return _internal_has_tschchartinfodefault3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dviewport() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3dviewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dviewport() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _internal_tschchartinfodefault3dviewport();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport_);
  }
  tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  if (tschchartinfodefault3dviewport) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dviewport() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dviewport() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  _has_bits_[0] &= ~0x00000200u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dviewport() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartinfodefault3dviewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArena());
    tschchartinfodefault3dviewport_ = p;
  }
  return tschchartinfodefault3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dviewport() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _internal_mutable_tschchartinfodefault3dviewport();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport_);
  }
  if (tschchartinfodefault3dviewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dviewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dviewport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultdeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfodefaultdeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfodefaultdeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfodefaultdeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfodefaultdeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage)
  return _internal_tschchartinfodefaultdeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultdeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefaultdeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecated3dlightingpackage_);
  }
  tschchartinfodefaultdeprecated3dlightingpackage_ = tschchartinfodefaultdeprecated3dlightingpackage;
  if (tschchartinfodefaultdeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfodefaultdeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefaultdeprecated3dlightingpackage_;
  tschchartinfodefaultdeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefaultdeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00000400u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefaultdeprecated3dlightingpackage_;
  tschchartinfodefaultdeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartinfodefaultdeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfodefaultdeprecated3dlightingpackage_ = p;
  }
  return tschchartinfodefaultdeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfodefaultdeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefaultdeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefaultdeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecated3dlightingpackage_);
  }
  if (tschchartinfodefaultdeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultdeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfodefaultdeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultdeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartinfodefaultdeprecated3dlightingpackage_ = tschchartinfodefaultdeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfocolumndeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumndeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfocolumndeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfocolumndeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfocolumndeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfocolumndeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfocolumndeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage)
  return _internal_tschchartinfocolumndeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumndeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumndeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dlightingpackage_);
  }
  tschchartinfocolumndeprecated3dlightingpackage_ = tschchartinfocolumndeprecated3dlightingpackage;
  if (tschchartinfocolumndeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfocolumndeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumndeprecated3dlightingpackage_;
  tschchartinfocolumndeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfocolumndeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumndeprecated3dlightingpackage_;
  tschchartinfocolumndeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfocolumndeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartinfocolumndeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfocolumndeprecated3dlightingpackage_ = p;
  }
  return tschchartinfocolumndeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfocolumndeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfocolumndeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfocolumndeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumndeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dlightingpackage_);
  }
  if (tschchartinfocolumndeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumndeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfocolumndeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumndeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartinfocolumndeprecated3dlightingpackage_ = tschchartinfocolumndeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobardeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobardeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobardeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfobardeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfobardeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfobardeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfobardeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage)
  return _internal_tschchartinfobardeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfobardeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfobardeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dlightingpackage_);
  }
  tschchartinfobardeprecated3dlightingpackage_ = tschchartinfobardeprecated3dlightingpackage;
  if (tschchartinfobardeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfobardeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobardeprecated3dlightingpackage_;
  tschchartinfobardeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfobardeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00001000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobardeprecated3dlightingpackage_;
  tschchartinfobardeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfobardeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartinfobardeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfobardeprecated3dlightingpackage_ = p;
  }
  return tschchartinfobardeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfobardeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfobardeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfobardeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobardeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dlightingpackage_);
  }
  if (tschchartinfobardeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobardeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfobardeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobardeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartinfobardeprecated3dlightingpackage_ = tschchartinfobardeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfolinedeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfolinedeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfolinedeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfolinedeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfolinedeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfolinedeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfolinedeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage)
  return _internal_tschchartinfolinedeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfolinedeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfolinedeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dlightingpackage_);
  }
  tschchartinfolinedeprecated3dlightingpackage_ = tschchartinfolinedeprecated3dlightingpackage;
  if (tschchartinfolinedeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfolinedeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfolinedeprecated3dlightingpackage_;
  tschchartinfolinedeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfolinedeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00002000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfolinedeprecated3dlightingpackage_;
  tschchartinfolinedeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfolinedeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00002000u;
  if (tschchartinfolinedeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfolinedeprecated3dlightingpackage_ = p;
  }
  return tschchartinfolinedeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfolinedeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfolinedeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfolinedeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfolinedeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dlightingpackage_);
  }
  if (tschchartinfolinedeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfolinedeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfolinedeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfolinedeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tschchartinfolinedeprecated3dlightingpackage_ = tschchartinfolinedeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoareadeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoareadeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoareadeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfoareadeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfoareadeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfoareadeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfoareadeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage)
  return _internal_tschchartinfoareadeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoareadeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoareadeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dlightingpackage_);
  }
  tschchartinfoareadeprecated3dlightingpackage_ = tschchartinfoareadeprecated3dlightingpackage;
  if (tschchartinfoareadeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfoareadeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoareadeprecated3dlightingpackage_;
  tschchartinfoareadeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoareadeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00004000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoareadeprecated3dlightingpackage_;
  tschchartinfoareadeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoareadeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00004000u;
  if (tschchartinfoareadeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfoareadeprecated3dlightingpackage_ = p;
  }
  return tschchartinfoareadeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfoareadeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfoareadeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoareadeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoareadeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dlightingpackage_);
  }
  if (tschchartinfoareadeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoareadeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfoareadeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoareadeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  tschchartinfoareadeprecated3dlightingpackage_ = tschchartinfoareadeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfopiedeprecated3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopiedeprecated3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfopiedeprecated3dlightingpackage() const {
  return _internal_has_tschchartinfopiedeprecated3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::_internal_tschchartinfopiedeprecated3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfopiedeprecated3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartNonStyleArchive::tschchartinfopiedeprecated3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage)
  return _internal_tschchartinfopiedeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfopiedeprecated3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfopiedeprecated3dlightingpackage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dlightingpackage_);
  }
  tschchartinfopiedeprecated3dlightingpackage_ = tschchartinfopiedeprecated3dlightingpackage;
  if (tschchartinfopiedeprecated3dlightingpackage) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::release_tschchartinfopiedeprecated3dlightingpackage() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopiedeprecated3dlightingpackage_;
  tschchartinfopiedeprecated3dlightingpackage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfopiedeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage)
  _has_bits_[0] &= ~0x00008000u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopiedeprecated3dlightingpackage_;
  tschchartinfopiedeprecated3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfopiedeprecated3dlightingpackage() {
  _has_bits_[0] |= 0x00008000u;
  if (tschchartinfopiedeprecated3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArena());
    tschchartinfopiedeprecated3dlightingpackage_ = p;
  }
  return tschchartinfopiedeprecated3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartNonStyleArchive::mutable_tschchartinfopiedeprecated3dlightingpackage() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage)
  return _internal_mutable_tschchartinfopiedeprecated3dlightingpackage();
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfopiedeprecated3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopiedeprecated3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dlightingpackage_);
  }
  if (tschchartinfopiedeprecated3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopiedeprecated3dlightingpackage)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartinfopiedeprecated3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopiedeprecated3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  tschchartinfopiedeprecated3dlightingpackage_ = tschchartinfopiedeprecated3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage)
}

// optional bool tschchartinfodefaultskiphiddendata = 326;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultskiphiddendata() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultskiphiddendata() const {
  return _internal_has_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultskiphiddendata() {
  tschchartinfodefaultskiphiddendata_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultskiphiddendata() const {
  return tschchartinfodefaultskiphiddendata_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultskiphiddendata() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
  return _internal_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultskiphiddendata(bool value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartinfodefaultskiphiddendata_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultskiphiddendata(bool value) {
  _internal_set_tschchartinfodefaultskiphiddendata(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
}

// optional bool tschchartinfodefault3dbeveledges = 327;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbeveledges() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbeveledges() const {
  return _internal_has_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbeveledges() {
  tschchartinfodefault3dbeveledges_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefault3dbeveledges() const {
  return tschchartinfodefault3dbeveledges_;
}
inline bool ChartNonStyleArchive::tschchartinfodefault3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
  return _internal_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbeveledges(bool value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartinfodefault3dbeveledges_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbeveledges(bool value) {
  _internal_set_tschchartinfodefault3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
}

// optional int32 tschchartinfodefault3dbarshape = 336;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbarshape() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbarshape() const {
  return _internal_has_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbarshape() {
  tschchartinfodefault3dbarshape_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefault3dbarshape() const {
  return tschchartinfodefault3dbarshape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefault3dbarshape() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
  return _internal_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartinfodefault3dbarshape_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefault3dbarshape(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
}

// optional float tschchartinfodefault3dintersetdepthgap = 331;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dintersetdepthgap() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dintersetdepthgap() const {
  return _internal_has_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dintersetdepthgap() {
  tschchartinfodefault3dintersetdepthgap_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefault3dintersetdepthgap() const {
  return tschchartinfodefault3dintersetdepthgap_;
}
inline float ChartNonStyleArchive::tschchartinfodefault3dintersetdepthgap() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
  return _internal_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dintersetdepthgap(float value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartinfodefault3dintersetdepthgap_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dintersetdepthgap(float value) {
  _internal_set_tschchartinfodefault3dintersetdepthgap(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
}

// -------------------------------------------------------------------

// LegendStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool LegendStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& LegendStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& LegendStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.super)
  return _internal_super();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendStyleArchive.super)
}
inline ::TSS::StyleArchive* LegendStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* LegendStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* LegendStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* LegendStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendStyleArchive.super)
  return _internal_mutable_super();
}
inline void LegendStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendStyleArchive.super)
}

// optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultfill() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultfill_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultfill() const {
  return _internal_has_tschlegendmodeldefaultfill();
}
inline const ::TSD::FillArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultfill() const {
  const ::TSD::FillArchive* p = tschlegendmodeldefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& LegendStyleArchive::tschlegendmodeldefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _internal_tschlegendmodeldefaultfill();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
    ::TSD::FillArchive* tschlegendmodeldefaultfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill_);
  }
  tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  if (tschlegendmodeldefaultfill) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultfill)
}
inline ::TSD::FillArchive* LegendStyleArchive::release_tschlegendmodeldefaultfill() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultfill)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultfill() {
  _has_bits_[0] |= 0x00000002u;
  if (tschlegendmodeldefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschlegendmodeldefaultfill_ = p;
  }
  return tschlegendmodeldefaultfill_;
}
inline ::TSD::FillArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _internal_mutable_tschlegendmodeldefaultfill();
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill_);
  }
  if (tschlegendmodeldefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultfill)
}

// optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultstroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultstroke_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultstroke() const {
  return _internal_has_tschlegendmodeldefaultstroke();
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultstroke() const {
  const ::TSD::StrokeArchive* p = tschlegendmodeldefaultstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::tschlegendmodeldefaultstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _internal_tschlegendmodeldefaultstroke();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
    ::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke_);
  }
  tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  if (tschlegendmodeldefaultstroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultstroke)
}
inline ::TSD::StrokeArchive* LegendStyleArchive::release_tschlegendmodeldefaultstroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultstroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultstroke() {
  _has_bits_[0] |= 0x00000004u;
  if (tschlegendmodeldefaultstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschlegendmodeldefaultstroke_ = p;
  }
  return tschlegendmodeldefaultstroke_;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _internal_mutable_tschlegendmodeldefaultstroke();
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke_);
  }
  if (tschlegendmodeldefaultstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultstroke)
}

// optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultshadow() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultshadow_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultshadow() const {
  return _internal_has_tschlegendmodeldefaultshadow();
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultshadow() const {
  const ::TSD::ShadowArchive* p = tschlegendmodeldefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::tschlegendmodeldefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _internal_tschlegendmodeldefaultshadow();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
    ::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow_);
  }
  tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  if (tschlegendmodeldefaultshadow) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultshadow)
}
inline ::TSD::ShadowArchive* LegendStyleArchive::release_tschlegendmodeldefaultshadow() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultshadow)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultshadow() {
  _has_bits_[0] |= 0x00000008u;
  if (tschlegendmodeldefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschlegendmodeldefaultshadow_ = p;
  }
  return tschlegendmodeldefaultshadow_;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _internal_mutable_tschlegendmodeldefaultshadow();
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow_);
  }
  if (tschlegendmodeldefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultshadow)
}

// optional float tschlegendmodeldefaultopacity = 15;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultopacity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultopacity() const {
  return _internal_has_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultopacity() {
  tschlegendmodeldefaultopacity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LegendStyleArchive::_internal_tschlegendmodeldefaultopacity() const {
  return tschlegendmodeldefaultopacity_;
}
inline float LegendStyleArchive::tschlegendmodeldefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultopacity)
  return _internal_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultopacity(float value) {
  _has_bits_[0] |= 0x00000010u;
  tschlegendmodeldefaultopacity_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultopacity(float value) {
  _internal_set_tschlegendmodeldefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultopacity)
}

// optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultlabelparagraphstyleindex() {
  tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendStyleArchive::_internal_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return tschlegendmodeldefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendStyleArchive::tschlegendmodeldefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
  return _internal_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  tschlegendmodeldefaultlabelparagraphstyleindex_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
}

// -------------------------------------------------------------------

// LegendNonStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool LegendNonStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool LegendNonStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& LegendNonStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& LegendNonStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.LegendNonStyleArchive.super)
  return _internal_super();
}
inline void LegendNonStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.LegendNonStyleArchive.super)
}
inline ::TSS::StyleArchive* LegendNonStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* LegendNonStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.LegendNonStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* LegendNonStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* LegendNonStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.LegendNonStyleArchive.super)
  return _internal_mutable_super();
}
inline void LegendNonStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.LegendNonStyleArchive.super)
}

// -------------------------------------------------------------------

// ChartAxisStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartAxisStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartAxisStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartAxisStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.super)
  return _internal_super();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartAxisStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartAxisStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartAxisStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartAxisStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartAxisStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.super)
}

// optional bool tschchartaxisvalueshowmajorgridlines = 10;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajorgridlines() const {
  return _internal_has_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajorgridlines() {
  tschchartaxisvalueshowmajorgridlines_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajorgridlines() const {
  return tschchartaxisvalueshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
  return _internal_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartaxisvalueshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
}

// optional bool tschchartaxisvalueshowminorgridlines = 11;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminorgridlines() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminorgridlines() const {
  return _internal_has_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminorgridlines() {
  tschchartaxisvalueshowminorgridlines_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminorgridlines() const {
  return tschchartaxisvalueshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
  return _internal_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminorgridlines(bool value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartaxisvalueshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
}

// optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvaluemajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlinestroke() const {
  return _internal_has_tschchartaxisvaluemajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvaluemajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _internal_tschchartaxisvaluemajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke_);
  }
  tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  if (tschchartaxisvaluemajorgridlinestroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartaxisvaluemajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxisvaluemajorgridlinestroke_ = p;
  }
  return tschchartaxisvaluemajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke_);
  }
  if (tschchartaxisvaluemajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalueminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlinestroke() const {
  return _internal_has_tschchartaxisvalueminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvalueminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _internal_tschchartaxisvalueminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke_);
  }
  tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  if (tschchartaxisvalueminorgridlinestroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartaxisvalueminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxisvalueminorgridlinestroke_ = p;
  }
  return tschchartaxisvalueminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _internal_mutable_tschchartaxisvalueminorgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke_);
  }
  if (tschchartaxisvalueminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}

// optional int32 tschchartaxisvaluetickmarklocation = 14;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetickmarklocation() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetickmarklocation() const {
  return _internal_has_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetickmarklocation() {
  tschchartaxisvaluetickmarklocation_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluetickmarklocation() const {
  return tschchartaxisvaluetickmarklocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluetickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
  return _internal_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartaxisvaluetickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluetickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
}

// optional bool tschchartaxisvalueshowmajortickmarks = 15;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajortickmarks() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajortickmarks() const {
  return _internal_has_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajortickmarks() {
  tschchartaxisvalueshowmajortickmarks_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajortickmarks() const {
  return tschchartaxisvalueshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
  return _internal_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartaxisvalueshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
}

// optional bool tschchartaxisvalueshowminortickmarks = 16;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminortickmarks() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminortickmarks() const {
  return _internal_has_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminortickmarks() {
  tschchartaxisvalueshowminortickmarks_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminortickmarks() const {
  return tschchartaxisvalueshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
  return _internal_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminortickmarks(bool value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartaxisvalueshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
}

// optional float tschchartaxisvaluelabelsorientation = 17;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelsorientation() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelsorientation() const {
  return _internal_has_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelsorientation() {
  tschchartaxisvaluelabelsorientation_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelsorientation() const {
  return tschchartaxisvaluelabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluelabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
  return _internal_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelsorientation(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartaxisvaluelabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelsorientation(float value) {
  _internal_set_tschchartaxisvaluelabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
}

// optional bool tschchartaxisvalueshowminimumlabel = 18;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminimumlabel() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminimumlabel() const {
  return _internal_has_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminimumlabel() {
  tschchartaxisvalueshowminimumlabel_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminimumlabel() const {
  return tschchartaxisvalueshowminimumlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminimumlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
  return _internal_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminimumlabel(bool value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartaxisvalueshowminimumlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminimumlabel(bool value) {
  _internal_set_tschchartaxisvalueshowminimumlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
}

// optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvaluemajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineshadow() const {
  return _internal_has_tschchartaxisvaluemajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxisvaluemajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _internal_tschchartaxisvaluemajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow_);
  }
  tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  if (tschchartaxisvaluemajorgridlineshadow) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartaxisvaluemajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartaxisvaluemajorgridlineshadow_ = p;
  }
  return tschchartaxisvaluemajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow_);
  }
  if (tschchartaxisvaluemajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalueminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineshadow() const {
  return _internal_has_tschchartaxisvalueminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxisvalueminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _internal_tschchartaxisvalueminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow_);
  }
  tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  if (tschchartaxisvalueminorgridlineshadow) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartaxisvalueminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartaxisvalueminorgridlineshadow_ = p;
  }
  return tschchartaxisvalueminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _internal_mutable_tschchartaxisvalueminorgridlineshadow();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow_);
  }
  if (tschchartaxisvalueminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}

// optional float tschchartaxisvaluemajorgridlineopacity = 23;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineopacity() const {
  return _internal_has_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineopacity() {
  tschchartaxisvaluemajorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineopacity() const {
  return tschchartaxisvaluemajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
  return _internal_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartaxisvaluemajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _internal_set_tschchartaxisvaluemajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
}

// optional float tschchartaxisvalueminorgridlineopacity = 24;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineopacity() const {
  return _internal_has_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineopacity() {
  tschchartaxisvalueminorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineopacity() const {
  return tschchartaxisvalueminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalueminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
  return _internal_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueminorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartaxisvalueminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueminorgridlineopacity(float value) {
  _internal_set_tschchartaxisvalueminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
}

// optional bool tschchartaxisvalueshowaxis = 25;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowaxis() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowaxis() const {
  return _internal_has_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowaxis() {
  tschchartaxisvalueshowaxis_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowaxis() const {
  return tschchartaxisvalueshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
  return _internal_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowaxis(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartaxisvalueshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowaxis(bool value) {
  _internal_set_tschchartaxisvalueshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
}

// optional bool tschchartaxiscategoryshowmajorgridlines = 50;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajorgridlines() {
  tschchartaxiscategoryshowmajorgridlines_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajorgridlines() const {
  return tschchartaxiscategoryshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
  return _internal_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartaxiscategoryshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
}

// optional bool tschchartaxiscategoryshowminorgridlines = 51;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminorgridlines() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminorgridlines() {
  tschchartaxiscategoryshowminorgridlines_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminorgridlines() const {
  return tschchartaxiscategoryshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
  return _internal_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartaxiscategoryshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
}

// optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategorymajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlinestroke() const {
  return _internal_has_tschchartaxiscategorymajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategorymajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _internal_tschchartaxiscategorymajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke_);
  }
  tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  if (tschchartaxiscategorymajorgridlinestroke) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartaxiscategorymajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxiscategorymajorgridlinestroke_ = p;
  }
  return tschchartaxiscategorymajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke_);
  }
  if (tschchartaxiscategorymajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategoryminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlinestroke() const {
  return _internal_has_tschchartaxiscategoryminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategoryminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _internal_tschchartaxiscategoryminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke_);
  }
  tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  if (tschchartaxiscategoryminorgridlinestroke) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartaxiscategoryminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxiscategoryminorgridlinestroke_ = p;
  }
  return tschchartaxiscategoryminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke_);
  }
  if (tschchartaxiscategoryminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}

// optional int32 tschchartaxiscategorytickmarklocation = 54;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytickmarklocation() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytickmarklocation() const {
  return _internal_has_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytickmarklocation() {
  tschchartaxiscategorytickmarklocation_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorytickmarklocation() const {
  return tschchartaxiscategorytickmarklocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorytickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
  return _internal_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartaxiscategorytickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorytickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
}

// optional bool tschchartaxiscategoryshowmajortickmarks = 55;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajortickmarks() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajortickmarks() {
  tschchartaxiscategoryshowmajortickmarks_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajortickmarks() const {
  return tschchartaxiscategoryshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
  return _internal_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartaxiscategoryshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
}

// optional bool tschchartaxiscategoryshowminortickmarks = 56;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminortickmarks() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminortickmarks() {
  tschchartaxiscategoryshowminortickmarks_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminortickmarks() const {
  return tschchartaxiscategoryshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
  return _internal_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartaxiscategoryshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
}

// optional float tschchartaxiscategorylabelsorientation = 57;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelsorientation() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelsorientation() const {
  return _internal_has_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelsorientation() {
  tschchartaxiscategorylabelsorientation_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelsorientation() const {
  return tschchartaxiscategorylabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorylabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
  return _internal_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelsorientation(float value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartaxiscategorylabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelsorientation(float value) {
  _internal_set_tschchartaxiscategorylabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
}

// optional int32 tschchartaxiscategoryhorizontalspacing = 58;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryhorizontalspacing() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryhorizontalspacing() const {
  return _internal_has_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryhorizontalspacing() {
  tschchartaxiscategoryhorizontalspacing_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategoryhorizontalspacing() const {
  return tschchartaxiscategoryhorizontalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategoryhorizontalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
  return _internal_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartaxiscategoryhorizontalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategoryhorizontalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
}

// optional int32 tschchartaxiscategoryverticalspacing = 59;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryverticalspacing() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryverticalspacing() const {
  return _internal_has_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryverticalspacing() {
  tschchartaxiscategoryverticalspacing_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategoryverticalspacing() const {
  return tschchartaxiscategoryverticalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategoryverticalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
  return _internal_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartaxiscategoryverticalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategoryverticalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
}

// optional bool tschchartaxiscategoryshowlastlabel = 60;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowlastlabel() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowlastlabel() const {
  return _internal_has_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowlastlabel() {
  tschchartaxiscategoryshowlastlabel_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowlastlabel() const {
  return tschchartaxiscategoryshowlastlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowlastlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
  return _internal_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowlastlabel(bool value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartaxiscategoryshowlastlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowlastlabel(bool value) {
  _internal_set_tschchartaxiscategoryshowlastlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
}

// optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategorymajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineshadow() const {
  return _internal_has_tschchartaxiscategorymajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxiscategorymajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _internal_tschchartaxiscategorymajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow_);
  }
  tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  if (tschchartaxiscategorymajorgridlineshadow) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartaxiscategorymajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartaxiscategorymajorgridlineshadow_ = p;
  }
  return tschchartaxiscategorymajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow_);
  }
  if (tschchartaxiscategorymajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategoryminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineshadow() const {
  return _internal_has_tschchartaxiscategoryminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxiscategoryminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _internal_tschchartaxiscategoryminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow_);
  }
  tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  if (tschchartaxiscategoryminorgridlineshadow) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartaxiscategoryminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartaxiscategoryminorgridlineshadow_ = p;
  }
  return tschchartaxiscategoryminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow_);
  }
  if (tschchartaxiscategoryminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}

// optional float tschchartaxiscategorymajorgridlineopacity = 65;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineopacity() const {
  return _internal_has_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineopacity() {
  tschchartaxiscategorymajorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineopacity() const {
  return tschchartaxiscategorymajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
  return _internal_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartaxiscategorymajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategorymajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
}

// optional float tschchartaxiscategoryminorgridlineopacity = 66;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineopacity() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineopacity() const {
  return _internal_has_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineopacity() {
  tschchartaxiscategoryminorgridlineopacity_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineopacity() const {
  return tschchartaxiscategoryminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
  return _internal_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartaxiscategoryminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategoryminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
}

// optional bool tschchartaxiscategoryshowaxis = 67;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowaxis() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowaxis() const {
  return _internal_has_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowaxis() {
  tschchartaxiscategoryshowaxis_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowaxis() const {
  return tschchartaxiscategoryshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
  return _internal_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowaxis(bool value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartaxiscategoryshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowaxis(bool value) {
  _internal_set_tschchartaxiscategoryshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
}

// optional float tschchartaxisdefaultlabelsorientation = 102;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelsorientation() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelsorientation() const {
  return _internal_has_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelsorientation() {
  tschchartaxisdefaultlabelsorientation_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelsorientation() const {
  return tschchartaxisdefaultlabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisdefaultlabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
  return _internal_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelsorientation(float value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartaxisdefaultlabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelsorientation(float value) {
  _internal_set_tschchartaxisdefaultlabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
}

// optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaulttitleparagraphstyleindex() {
  tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return tschchartaxisdefaulttitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisdefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
  return _internal_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartaxisdefaulttitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
}

// optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelparagraphstyleindex() {
  tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return tschchartaxisdefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
  return _internal_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartaxisdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetitleparagraphstyleindex() {
  tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluetitleparagraphstyleindex() const {
  return tschchartaxisvaluetitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluetitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
  return _internal_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartaxisvaluetitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluetitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
}

// optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelparagraphstyleindex() {
  tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelparagraphstyleindex() const {
  return tschchartaxisvaluelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
  return _internal_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartaxisvaluelabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
}

// optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytitleparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytitleparagraphstyleindex() {
  tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorytitleparagraphstyleindex() const {
  return tschchartaxiscategorytitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorytitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
  return _internal_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartaxiscategorytitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorytitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
}

// optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelparagraphstyleindex() {
  tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelparagraphstyleindex() const {
  return tschchartaxiscategorylabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorylabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
  return _internal_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  tschchartaxiscategorylabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorylabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
}

// optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalue3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlinestroke() const {
  return _internal_has_tschchartaxisvalue3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvalue3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalue3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _internal_tschchartaxisvalue3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke_);
  }
  tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  if (tschchartaxisvalue3dgridlinestroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalue3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartaxisvalue3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxisvalue3dgridlinestroke_ = p;
  }
  return tschchartaxisvalue3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalue3dgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _internal_mutable_tschchartaxisvalue3dgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke_);
  }
  if (tschchartaxisvalue3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisvalue3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalue3dgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategory3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlinestroke() const {
  return _internal_has_tschchartaxiscategory3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategory3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategory3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _internal_tschchartaxiscategory3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke_);
  }
  tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  if (tschchartaxiscategory3dgridlinestroke) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategory3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartaxiscategory3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartaxiscategory3dgridlinestroke_ = p;
  }
  return tschchartaxiscategory3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategory3dgridlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _internal_mutable_tschchartaxiscategory3dgridlinestroke();
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke_);
  }
  if (tschchartaxiscategory3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxiscategory3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategory3dgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}

// optional float tschchartaxisvalue3dgridlineopacity = 333;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlineopacity() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlineopacity() const {
  return _internal_has_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlineopacity() {
  tschchartaxisvalue3dgridlineopacity_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlineopacity() const {
  return tschchartaxisvalue3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalue3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
  return _internal_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalue3dgridlineopacity(float value) {
  _has_bits_[1] |= 0x00000100u;
  tschchartaxisvalue3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalue3dgridlineopacity(float value) {
  _internal_set_tschchartaxisvalue3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
}

// optional float tschchartaxiscategory3dgridlineopacity = 334;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlineopacity() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlineopacity() const {
  return _internal_has_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlineopacity() {
  tschchartaxiscategory3dgridlineopacity_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlineopacity() const {
  return tschchartaxiscategory3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategory3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
  return _internal_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategory3dgridlineopacity(float value) {
  _has_bits_[1] |= 0x00000200u;
  tschchartaxiscategory3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategory3dgridlineopacity(float value) {
  _internal_set_tschchartaxiscategory3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
}

// -------------------------------------------------------------------

// ChartAxisNonStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartAxisNonStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartAxisNonStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartAxisNonStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.super)
  return _internal_super();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartAxisNonStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartAxisNonStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartAxisNonStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartAxisNonStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.super)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultusermin_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermin() const {
  return _internal_has_tschchartaxisdefaultusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermin() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisdefaultusermin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermin() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _internal_tschchartaxisdefaultusermin();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin_);
  }
  tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  if (tschchartaxisdefaultusermin) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermin() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermin() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermin() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartaxisdefaultusermin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArena());
    tschchartaxisdefaultusermin_ = p;
  }
  return tschchartaxisdefaultusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermin() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _internal_mutable_tschchartaxisdefaultusermin();
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin_);
  }
  if (tschchartaxisdefaultusermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermax() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultusermax_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermax() const {
  return _internal_has_tschchartaxisdefaultusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermax() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisdefaultusermax_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermax() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _internal_tschchartaxisdefaultusermax();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax_);
  }
  tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  if (tschchartaxisdefaultusermax) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermax() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermax() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermax() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartaxisdefaultusermax_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArena());
    tschchartaxisdefaultusermax_ = p;
  }
  return tschchartaxisdefaultusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermax() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _internal_mutable_tschchartaxisdefaultusermax();
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax_);
  }
  if (tschchartaxisdefaultusermax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermax, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}

// optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformat() const {
  return _internal_has_tschchartaxisdefaultnumberformat();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformat() {
  if (tschchartaxisdefaultnumberformat_ != nullptr) tschchartaxisdefaultnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformat() const {
  const ::TSCH::PreUFF::ChartsNumberFormatArchive* p = tschchartaxisdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartsNumberFormatArchive&>(
      ::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _internal_tschchartaxisdefaultnumberformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
    ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartaxisdefaultnumberformat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultnumberformat_);
  }
  tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  if (tschchartaxisdefaultnumberformat) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartaxisdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartsNumberFormatArchive>(GetArena());
    tschchartaxisdefaultnumberformat_ = p;
  }
  return tschchartaxisdefaultnumberformat_;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultnumberformat() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _internal_mutable_tschchartaxisdefaultnumberformat();
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartaxisdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tschchartaxisdefaultnumberformat_;
  }
  if (tschchartaxisdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tschchartaxisdefaultnumberformat);
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}

// optional bool tschchartaxisdefaultshowlabels = 14;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultshowlabels() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultshowlabels() const {
  return _internal_has_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultshowlabels() {
  tschchartaxisdefaultshowlabels_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultshowlabels() const {
  return tschchartaxisdefaultshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisdefaultshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
  return _internal_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultshowlabels(bool value) {
  _has_bits_[0] |= 0x00000400u;
  tschchartaxisdefaultshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultshowlabels(bool value) {
  _internal_set_tschchartaxisdefaultshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
}

// optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofminorgridlines() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofminorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofminorgridlines() {
  tschchartaxisvaluenumberofminorgridlines_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofminorgridlines() const {
  return tschchartaxisvaluenumberofminorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
  return _internal_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  tschchartaxisvaluenumberofminorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
}

// optional int32 tschchartaxisvaluescale = 51;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluescale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluescale() const {
  return _internal_has_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluescale() {
  tschchartaxisvaluescale_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluescale() const {
  return tschchartaxisvaluescale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluescale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
  return _internal_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  tschchartaxisvaluescale_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluescale(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
}

// optional int32 tschchartaxisvaluenumberofdecades = 52;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofdecades() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofdecades() const {
  return _internal_has_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofdecades() {
  tschchartaxisvaluenumberofdecades_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofdecades() const {
  return tschchartaxisvaluenumberofdecades_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofdecades() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
  return _internal_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  tschchartaxisvaluenumberofdecades_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofdecades(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
}

// optional bool tschchartaxisvalueshowlabels = 53;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowlabels() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowlabels() const {
  return _internal_has_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowlabels() {
  tschchartaxisvalueshowlabels_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowlabels() const {
  return tschchartaxisvalueshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
  return _internal_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowlabels(bool value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartaxisvalueshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowlabels(bool value) {
  _internal_set_tschchartaxisvalueshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
}

// optional bool tschchartaxisvalueshowtitle = 54;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowtitle() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowtitle() const {
  return _internal_has_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowtitle() {
  tschchartaxisvalueshowtitle_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowtitle() const {
  return tschchartaxisvalueshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
  return _internal_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowtitle(bool value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartaxisvalueshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowtitle(bool value) {
  _internal_set_tschchartaxisvalueshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
}

// optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofmajorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofmajorgridlines() {
  tschchartaxisvaluenumberofmajorgridlines_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofmajorgridlines() const {
  return tschchartaxisvaluenumberofmajorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
  return _internal_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tschchartaxisvaluenumberofmajorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
}

// optional string tschchartaxisvaluetitle = 56;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluetitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluetitle() const {
  return _internal_has_tschchartaxisvaluetitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluetitle() {
  tschchartaxisvaluetitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxisvaluetitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _internal_tschchartaxisvaluetitle();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxisvaluetitle() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _internal_mutable_tschchartaxisvaluetitle();
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxisvaluetitle() const {
  return tschchartaxisvaluetitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluetitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisvaluetitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartaxisvaluetitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxisvaluetitle() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  if (!_internal_has_tschchartaxisvaluetitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartaxisvaluetitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle) {
  if (tschchartaxisvaluetitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartaxisvaluetitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartaxisvaluetitle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}

// optional bool tschchartaxiscategoryshowlabels = 100;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowlabels() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowlabels() const {
  return _internal_has_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowlabels() {
  tschchartaxiscategoryshowlabels_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowlabels() const {
  return tschchartaxiscategoryshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
  return _internal_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowlabels(bool value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartaxiscategoryshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowlabels(bool value) {
  _internal_set_tschchartaxiscategoryshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
}

// optional bool tschchartaxiscategoryshowserieslabels = 101;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowserieslabels() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowserieslabels() const {
  return _internal_has_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowserieslabels() {
  tschchartaxiscategoryshowserieslabels_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowserieslabels() const {
  return tschchartaxiscategoryshowserieslabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
  return _internal_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowserieslabels(bool value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartaxiscategoryshowserieslabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowserieslabels(bool value) {
  _internal_set_tschchartaxiscategoryshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
}

// optional bool tschchartaxiscategoryshowtitle = 102;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowtitle() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowtitle() const {
  return _internal_has_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowtitle() {
  tschchartaxiscategoryshowtitle_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowtitle() const {
  return tschchartaxiscategoryshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
  return _internal_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowtitle(bool value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartaxiscategoryshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowtitle(bool value) {
  _internal_set_tschchartaxiscategoryshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
}

// optional string tschchartaxiscategorytitle = 103;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategorytitle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategorytitle() const {
  return _internal_has_tschchartaxiscategorytitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategorytitle() {
  tschchartaxiscategorytitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxiscategorytitle() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _internal_tschchartaxiscategorytitle();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxiscategorytitle() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _internal_mutable_tschchartaxiscategorytitle();
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxiscategorytitle() const {
  return tschchartaxiscategorytitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategorytitle(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxiscategorytitle() {
  _has_bits_[0] |= 0x00000002u;
  return tschchartaxiscategorytitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxiscategorytitle() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  if (!_internal_has_tschchartaxiscategorytitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tschchartaxiscategorytitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle) {
  if (tschchartaxiscategorytitle != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartaxiscategorytitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartaxiscategorytitle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}

// optional int32 tschchartaxisdefaultnumberformattype = 120;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformattype() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformattype() const {
  return _internal_has_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformattype() {
  tschchartaxisdefaultnumberformattype_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformattype() const {
  return tschchartaxisdefaultnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
  return _internal_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartaxisdefaultnumberformattype_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
}

// optional int32 tschchartaxisdefault3dlabelposition = 336;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefault3dlabelposition() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault3dlabelposition() const {
  return _internal_has_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault3dlabelposition() {
  tschchartaxisdefault3dlabelposition_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisdefault3dlabelposition() const {
  return tschchartaxisdefault3dlabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisdefault3dlabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
  return _internal_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartaxisdefault3dlabelposition_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefault3dlabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
}

// optional bool tschchartaxiscategoryplottoedges = 116;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryplottoedges() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryplottoedges() const {
  return _internal_has_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryplottoedges() {
  tschchartaxiscategoryplottoedges_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryplottoedges() const {
  return tschchartaxiscategoryplottoedges_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryplottoedges() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
  return _internal_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryplottoedges(bool value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartaxiscategoryplottoedges_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryplottoedges(bool value) {
  _internal_set_tschchartaxiscategoryplottoedges(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
}

// -------------------------------------------------------------------

// ChartSeriesStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartSeriesStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartSeriesStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartSeriesStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.super)
  return _internal_super();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartSeriesStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartSeriesStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartSeriesStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartSeriesStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartSeriesStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.super)
}

// optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000020u;
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
}

// optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000040u;
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
}

// optional float tschchartseriesdefaulttrendlineequationopacity = 205;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationopacity() const {
  bool value = (_has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationopacity() {
  tschchartseriesdefaulttrendlineequationopacity_ = 0;
  _has_bits_[3] &= ~0x00000080u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationopacity() const {
  return tschchartseriesdefaulttrendlineequationopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
  return _internal_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _has_bits_[3] |= 0x00000080u;
  tschchartseriesdefaulttrendlineequationopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
}

// optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  bool value = (_has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredopacity() {
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  _has_bits_[3] &= ~0x00000100u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return tschchartseriesdefaulttrendlinersquaredopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
  return _internal_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _has_bits_[3] |= 0x00000100u;
  tschchartseriesdefaulttrendlinersquaredopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
}

// optional .TSD.FillArchive tschchartseriesbarfill = 10;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarfill() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarfill() const {
  return _internal_has_tschchartseriesbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarfill() const {
  const ::TSD::FillArchive* p = tschchartseriesbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _internal_tschchartseriesbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarfill(
    ::TSD::FillArchive* tschchartseriesbarfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill_);
  }
  tschchartseriesbarfill_ = tschchartseriesbarfill;
  if (tschchartseriesbarfill) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbarfill() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = tschchartseriesbarfill_;
  tschchartseriesbarfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarfill)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = tschchartseriesbarfill_;
  tschchartseriesbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarfill() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartseriesbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesbarfill_ = p;
  }
  return tschchartseriesbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _internal_mutable_tschchartseriesbarfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill_);
  }
  if (tschchartseriesbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartseriesbarfill_ = tschchartseriesbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarfill)
}

// optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarstroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarstroke() const {
  return _internal_has_tschchartseriesbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _internal_tschchartseriesbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarstroke(
    ::TSD::StrokeArchive* tschchartseriesbarstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke_);
  }
  tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  if (tschchartseriesbarstroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbarstroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarstroke() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartseriesbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesbarstroke_ = p;
  }
  return tschchartseriesbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _internal_mutable_tschchartseriesbarstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke_);
  }
  if (tschchartseriesbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}

// optional int32 tschchartseriesbarvaluelabelposition = 13;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarvaluelabelposition() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarvaluelabelposition() const {
  return _internal_has_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarvaluelabelposition() {
  tschchartseriesbarvaluelabelposition_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbarvaluelabelposition() const {
  return tschchartseriesbarvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
  return _internal_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x40000000u;
  tschchartseriesbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
}

// optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinestroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinestroke() const {
  return _internal_has_tschchartserieslinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartserieslinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _internal_tschchartserieslinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinestroke(
    ::TSD::StrokeArchive* tschchartserieslinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke_);
  }
  tschchartserieslinestroke_ = tschchartserieslinestroke;
  if (tschchartserieslinestroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinestroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartserieslinestroke_;
  tschchartserieslinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinestroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartserieslinestroke_;
  tschchartserieslinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinestroke() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartserieslinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartserieslinestroke_ = p;
  }
  return tschchartserieslinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _internal_mutable_tschchartserieslinestroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke_);
  }
  if (tschchartserieslinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartserieslinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartserieslinestroke_ = tschchartserieslinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinestroke)
}

// optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfill() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfill() const {
  return _internal_has_tschchartserieslinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartserieslinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _internal_tschchartserieslinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
    ::TSD::FillArchive* tschchartserieslinesymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill_);
  }
  tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  if (tschchartserieslinesymbolfill) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolfill() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::FillArchive* temp = tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::FillArchive* temp = tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolfill() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartserieslinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartserieslinesymbolfill_ = p;
  }
  return tschchartserieslinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _internal_mutable_tschchartserieslinesymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill_);
  }
  if (tschchartserieslinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}

// optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolstroke() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolstroke() const {
  return _internal_has_tschchartserieslinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartserieslinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _internal_tschchartserieslinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
    ::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke_);
  }
  tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  if (tschchartserieslinesymbolstroke) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolstroke() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolstroke() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartserieslinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartserieslinesymbolstroke_ = p;
  }
  return tschchartserieslinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _internal_mutable_tschchartserieslinesymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke_);
  }
  if (tschchartserieslinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}

// optional float tschchartserieslinesymbolsize = 20;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolsize() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolsize() const {
  return _internal_has_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolsize() {
  tschchartserieslinesymbolsize_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolsize() const {
  return tschchartserieslinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartserieslinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
  return _internal_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolsize(float value) {
  _has_bits_[1] |= 0x80000000u;
  tschchartserieslinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolsize(float value) {
  _internal_set_tschchartserieslinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
}

// optional int32 tschchartserieslinevaluelabelposition = 22;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinevaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinevaluelabelposition() const {
  return _internal_has_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinevaluelabelposition() {
  tschchartserieslinevaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartserieslinevaluelabelposition() const {
  return tschchartserieslinevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartserieslinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
  return _internal_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000001u;
  tschchartserieslinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
}

// optional .TSD.FillArchive tschchartseriesareafill = 25;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareafill() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareafill() const {
  return _internal_has_tschchartseriesareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareafill() const {
  const ::TSD::FillArchive* p = tschchartseriesareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _internal_tschchartseriesareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareafill(
    ::TSD::FillArchive* tschchartseriesareafill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill_);
  }
  tschchartseriesareafill_ = tschchartseriesareafill;
  if (tschchartseriesareafill) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareafill() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartseriesareafill_;
  tschchartseriesareafill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareafill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareafill)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartseriesareafill_;
  tschchartseriesareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareafill() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartseriesareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesareafill_ = p;
  }
  return tschchartseriesareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareafill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _internal_mutable_tschchartseriesareafill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill_);
  }
  if (tschchartseriesareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareafill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartseriesareafill_ = tschchartseriesareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareafill)
}

// optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareastroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareastroke() const {
  return _internal_has_tschchartseriesareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareastroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _internal_tschchartseriesareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareastroke(
    ::TSD::StrokeArchive* tschchartseriesareastroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke_);
  }
  tschchartseriesareastroke_ = tschchartseriesareastroke;
  if (tschchartseriesareastroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareastroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriesareastroke_;
  tschchartseriesareastroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareastroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriesareastroke_;
  tschchartseriesareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareastroke() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartseriesareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesareastroke_ = p;
  }
  return tschchartseriesareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareastroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _internal_mutable_tschchartseriesareastroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke_);
  }
  if (tschchartseriesareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareastroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartseriesareastroke_ = tschchartseriesareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareastroke)
}

// optional int32 tschchartseriesareavaluelabelposition = 28;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareavaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareavaluelabelposition() const {
  return _internal_has_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareavaluelabelposition() {
  tschchartseriesareavaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesareavaluelabelposition() const {
  return tschchartseriesareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
  return _internal_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  tschchartseriesareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
}

// optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfill() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfill() const {
  return _internal_has_tschchartseriesareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _internal_tschchartseriesareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
    ::TSD::FillArchive* tschchartseriesareasymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill_);
  }
  tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  if (tschchartseriesareasymbolfill) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolfill() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolfill() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartseriesareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesareasymbolfill_ = p;
  }
  return tschchartseriesareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _internal_mutable_tschchartseriesareasymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill_);
  }
  if (tschchartseriesareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}

// optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolstroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolstroke() const {
  return _internal_has_tschchartseriesareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _internal_tschchartseriesareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke_);
  }
  tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  if (tschchartseriesareasymbolstroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolstroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolstroke() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartseriesareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesareasymbolstroke_ = p;
  }
  return tschchartseriesareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _internal_mutable_tschchartseriesareasymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke_);
  }
  if (tschchartseriesareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}

// optional float tschchartseriesareasymbolsize = 32;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolsize() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolsize() const {
  return _internal_has_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolsize() {
  tschchartseriesareasymbolsize_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolsize() const {
  return tschchartseriesareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
  return _internal_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolsize(float value) {
  _has_bits_[2] |= 0x00000004u;
  tschchartseriesareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolsize(float value) {
  _internal_set_tschchartseriesareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
}

// optional .TSD.FillArchive tschchartseriespiefill = 35;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiefill() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiefill() const {
  return _internal_has_tschchartseriespiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiefill() const {
  const ::TSD::FillArchive* p = tschchartseriespiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriespiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _internal_tschchartseriespiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiefill(
    ::TSD::FillArchive* tschchartseriespiefill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill_);
  }
  tschchartseriespiefill_ = tschchartseriespiefill;
  if (tschchartseriespiefill) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriespiefill() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriespiefill_;
  tschchartseriespiefill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiefill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiefill)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriespiefill_;
  tschchartseriespiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiefill() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartseriespiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriespiefill_ = p;
  }
  return tschchartseriespiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiefill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _internal_mutable_tschchartseriespiefill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill_);
  }
  if (tschchartseriespiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriespiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiefill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartseriespiefill_ = tschchartseriespiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiefill)
}

// optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiestroke() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespiestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiestroke() const {
  return _internal_has_tschchartseriespiestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriespiestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriespiestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _internal_tschchartseriespiestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiestroke(
    ::TSD::StrokeArchive* tschchartseriespiestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke_);
  }
  tschchartseriespiestroke_ = tschchartseriespiestroke;
  if (tschchartseriespiestroke) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriespiestroke() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = tschchartseriespiestroke_;
  tschchartseriespiestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiestroke)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = tschchartseriespiestroke_;
  tschchartseriespiestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiestroke() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartseriespiestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriespiestroke_ = p;
  }
  return tschchartseriespiestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _internal_mutable_tschchartseriespiestroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke_);
  }
  if (tschchartseriespiestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriespiestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartseriespiestroke_ = tschchartseriespiestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiestroke)
}

// optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscatterstroke() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscatterstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscatterstroke() const {
  return _internal_has_tschchartseriesscatterstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscatterstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesscatterstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscatterstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _internal_tschchartseriesscatterstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscatterstroke(
    ::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke_);
  }
  tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  if (tschchartseriesscatterstroke) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscatterstroke() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscatterstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscatterstroke() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartseriesscatterstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesscatterstroke_ = p;
  }
  return tschchartseriesscatterstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscatterstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _internal_mutable_tschchartseriesscatterstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke_);
  }
  if (tschchartseriesscatterstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesscatterstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscatterstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}

// optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfill() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattersymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfill() const {
  return _internal_has_tschchartseriesscattersymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesscattersymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _internal_tschchartseriesscattersymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
    ::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill_);
  }
  tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  if (tschchartseriesscattersymbolfill) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolfill() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolfill() {
  _has_bits_[0] |= 0x00002000u;
  if (tschchartseriesscattersymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesscattersymbolfill_ = p;
  }
  return tschchartseriesscattersymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _internal_mutable_tschchartseriesscattersymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill_);
  }
  if (tschchartseriesscattersymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}

// optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolstroke() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattersymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolstroke() const {
  return _internal_has_tschchartseriesscattersymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesscattersymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _internal_tschchartseriesscattersymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke_);
  }
  tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  if (tschchartseriesscattersymbolstroke) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolstroke() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolstroke() {
  _has_bits_[0] |= 0x00004000u;
  if (tschchartseriesscattersymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesscattersymbolstroke_ = p;
  }
  return tschchartseriesscattersymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _internal_mutable_tschchartseriesscattersymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke_);
  }
  if (tschchartseriesscattersymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}

// optional float tschchartseriesscattersymbolsize = 44;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolsize() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolsize() const {
  return _internal_has_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolsize() {
  tschchartseriesscattersymbolsize_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolsize() const {
  return tschchartseriesscattersymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesscattersymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
  return _internal_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolsize(float value) {
  _has_bits_[2] |= 0x00000008u;
  tschchartseriesscattersymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolsize(float value) {
  _internal_set_tschchartseriesscattersymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
}

// optional int32 tschchartseriesscattervaluelabelposition = 46;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattervaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattervaluelabelposition() const {
  return _internal_has_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattervaluelabelposition() {
  tschchartseriesscattervaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesscattervaluelabelposition() const {
  return tschchartseriesscattervaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesscattervaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
  return _internal_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000010u;
  tschchartseriesscattervaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscattervaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
}

// optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultfill() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultfill() const {
  return _internal_has_tschchartseriesdefaultfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultfill() const {
  const ::TSD::FillArchive* p = tschchartseriesdefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesdefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _internal_tschchartseriesdefaultfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultfill(
    ::TSD::FillArchive* tschchartseriesdefaultfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill_);
  }
  tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  if (tschchartseriesdefaultfill) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultfill() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultfill() {
  _has_bits_[0] |= 0x00008000u;
  if (tschchartseriesdefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesdefaultfill_ = p;
  }
  return tschchartseriesdefaultfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _internal_mutable_tschchartseriesdefaultfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill_);
  }
  if (tschchartseriesdefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}

// optional int32 tschchartseriesdefaultvaluelabelposition = 52;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultvaluelabelposition() const {
  return _internal_has_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultvaluelabelposition() {
  tschchartseriesdefaultvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultvaluelabelposition() const {
  return tschchartseriesdefaultvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
  return _internal_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000020u;
  tschchartseriesdefaultvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
}

// optional bool tschchartseriespiedeprecatedserieslabelson = 60;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiedeprecatedserieslabelson() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiedeprecatedserieslabelson() const {
  return _internal_has_tschchartseriespiedeprecatedserieslabelson();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespiedeprecatedserieslabelson() {
  tschchartseriespiedeprecatedserieslabelson_ = false;
  _has_bits_[2] &= ~0x00200000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriespiedeprecatedserieslabelson() const {
  return tschchartseriespiedeprecatedserieslabelson_;
}
inline bool ChartSeriesStyleArchive::tschchartseriespiedeprecatedserieslabelson() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecatedserieslabelson)
  return _internal_tschchartseriespiedeprecatedserieslabelson();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespiedeprecatedserieslabelson(bool value) {
  _has_bits_[2] |= 0x00200000u;
  tschchartseriespiedeprecatedserieslabelson_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespiedeprecatedserieslabelson(bool value) {
  _internal_set_tschchartseriespiedeprecatedserieslabelson(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecatedserieslabelson)
}

// optional .TSD.FillArchive tschchartseriescolumnfill = 62;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriescolumnfill() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriescolumnfill() const {
  return _internal_has_tschchartseriescolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriescolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseriescolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriescolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _internal_tschchartseriescolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriescolumnfill(
    ::TSD::FillArchive* tschchartseriescolumnfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill_);
  }
  tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  if (tschchartseriescolumnfill) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriescolumnfill() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriescolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriescolumnfill() {
  _has_bits_[0] |= 0x00010000u;
  if (tschchartseriescolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriescolumnfill_ = p;
  }
  return tschchartseriescolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriescolumnfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _internal_mutable_tschchartseriescolumnfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill_);
  }
  if (tschchartseriescolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriescolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescolumnfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}

// optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieshadow() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieshadow() const {
  return _internal_has_tschchartseriespieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriespieshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriespieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriespieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _internal_tschchartseriespieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespieshadow(
    ::TSD::ShadowArchive* tschchartseriespieshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow_);
  }
  tschchartseriespieshadow_ = tschchartseriespieshadow;
  if (tschchartseriespieshadow) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriespieshadow() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = tschchartseriespieshadow_;
  tschchartseriespieshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieshadow)
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = tschchartseriespieshadow_;
  tschchartseriespieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespieshadow() {
  _has_bits_[0] |= 0x00020000u;
  if (tschchartseriespieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriespieshadow_ = p;
  }
  return tschchartseriespieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriespieshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _internal_mutable_tschchartseriespieshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow_);
  }
  if (tschchartseriespieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriespieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespieshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  tschchartseriespieshadow_ = tschchartseriespieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieshadow)
}

// optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarshadow() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarshadow() const {
  return _internal_has_tschchartseriesbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _internal_tschchartseriesbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarshadow(
    ::TSD::ShadowArchive* tschchartseriesbarshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow_);
  }
  tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  if (tschchartseriesbarshadow) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbarshadow() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  _has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarshadow() {
  _has_bits_[0] |= 0x00040000u;
  if (tschchartseriesbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesbarshadow_ = p;
  }
  return tschchartseriesbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _internal_mutable_tschchartseriesbarshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow_);
  }
  if (tschchartseriesbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}

// optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareashadow() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareashadow() const {
  return _internal_has_tschchartseriesareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _internal_tschchartseriesareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareashadow(
    ::TSD::ShadowArchive* tschchartseriesareashadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow_);
  }
  tschchartseriesareashadow_ = tschchartseriesareashadow;
  if (tschchartseriesareashadow) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesareashadow() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = tschchartseriesareashadow_;
  tschchartseriesareashadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareashadow)
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = tschchartseriesareashadow_;
  tschchartseriesareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareashadow() {
  _has_bits_[0] |= 0x00080000u;
  if (tschchartseriesareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesareashadow_ = p;
  }
  return tschchartseriesareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareashadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _internal_mutable_tschchartseriesareashadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow_);
  }
  if (tschchartseriesareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareashadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  tschchartseriesareashadow_ = tschchartseriesareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattershadow() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattershadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattershadow() const {
  return _internal_has_tschchartseriesscattershadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattershadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesscattershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesscattershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _internal_tschchartseriesscattershadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattershadow(
    ::TSD::ShadowArchive* tschchartseriesscattershadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow_);
  }
  tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  if (tschchartseriesscattershadow) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesscattershadow() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattershadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattershadow() {
  _has_bits_[0] |= 0x00100000u;
  if (tschchartseriesscattershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesscattershadow_ = p;
  }
  return tschchartseriesscattershadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattershadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _internal_mutable_tschchartseriesscattershadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow_);
  }
  if (tschchartseriesscattershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesscattershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattershadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlineshadow() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlineshadow() const {
  return _internal_has_tschchartseriesmixedlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _internal_tschchartseriesmixedlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow_);
  }
  tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  if (tschchartseriesmixedlineshadow) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlineshadow() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlineshadow() {
  _has_bits_[0] |= 0x00200000u;
  if (tschchartseriesmixedlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesmixedlineshadow_ = p;
  }
  return tschchartseriesmixedlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _internal_mutable_tschchartseriesmixedlineshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow_);
  }
  if (tschchartseriesmixedlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareashadow() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareashadow() const {
  return _internal_has_tschchartseriesmixedareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _internal_tschchartseriesmixedareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
    ::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow_);
  }
  tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  if (tschchartseriesmixedareashadow) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareashadow() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareashadow() {
  _has_bits_[0] |= 0x00400000u;
  if (tschchartseriesmixedareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesmixedareashadow_ = p;
  }
  return tschchartseriesmixedareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareashadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _internal_mutable_tschchartseriesmixedareashadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow_);
  }
  if (tschchartseriesmixedareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareashadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnshadow() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnshadow() const {
  return _internal_has_tschchartseriesmixedcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _internal_tschchartseriesmixedcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow_);
  }
  tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  if (tschchartseriesmixedcolumnshadow) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnshadow() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnshadow() {
  _has_bits_[0] |= 0x00800000u;
  if (tschchartseriesmixedcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesmixedcolumnshadow_ = p;
  }
  return tschchartseriesmixedcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _internal_mutable_tschchartseriesmixedcolumnshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow_);
  }
  if (tschchartseriesmixedcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslineshadow() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslineshadow() const {
  return _internal_has_tschchartserieslineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartserieslineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartserieslineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartserieslineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _internal_tschchartserieslineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslineshadow(
    ::TSD::ShadowArchive* tschchartserieslineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow_);
  }
  tschchartserieslineshadow_ = tschchartserieslineshadow;
  if (tschchartserieslineshadow) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartserieslineshadow() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartserieslineshadow_;
  tschchartserieslineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslineshadow)
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartserieslineshadow_;
  tschchartserieslineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslineshadow() {
  _has_bits_[0] |= 0x01000000u;
  if (tschchartserieslineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartserieslineshadow_ = p;
  }
  return tschchartserieslineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartserieslineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _internal_mutable_tschchartserieslineshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow_);
  }
  if (tschchartserieslineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartserieslineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  tschchartserieslineshadow_ = tschchartserieslineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslineshadow)
}

// optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultshadow() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultshadow() const {
  return _internal_has_tschchartseriesdefaultshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _internal_tschchartseriesdefaultshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow_);
  }
  tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  if (tschchartseriesdefaultshadow) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultshadow() {
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultshadow() {
  _has_bits_[0] |= 0x02000000u;
  if (tschchartseriesdefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesdefaultshadow_ = p;
  }
  return tschchartseriesdefaultshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _internal_mutable_tschchartseriesdefaultshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow_);
  }
  if (tschchartseriesdefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}

// optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfill() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfill() const {
  return _internal_has_tschchartseriesbubblesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesbubblesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _internal_tschchartseriesbubblesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
    ::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill_);
  }
  tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  if (tschchartseriesbubblesymbolfill) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] |= 0x00000400u;
  if (tschchartseriesbubblesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesbubblesymbolfill_ = p;
  }
  return tschchartseriesbubblesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _internal_mutable_tschchartseriesbubblesymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill_);
  }
  if (tschchartseriesbubblesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}

// optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblestroke() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblestroke() const {
  return _internal_has_tschchartseriesbubblestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbubblestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _internal_tschchartseriesbubblestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblestroke(
    ::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke_);
  }
  tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  if (tschchartseriesbubblestroke) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblestroke() {
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblestroke() {
  _has_bits_[1] |= 0x00000800u;
  if (tschchartseriesbubblestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesbubblestroke_ = p;
  }
  return tschchartseriesbubblestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _internal_mutable_tschchartseriesbubblestroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke_);
  }
  if (tschchartseriesbubblestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbubblestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}

// optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolstroke() const {
  return _internal_has_tschchartseriesbubblesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbubblesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _internal_tschchartseriesbubblesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke_);
  }
  tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  if (tschchartseriesbubblesymbolstroke) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolstroke() {
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolstroke() {
  _has_bits_[1] |= 0x00001000u;
  if (tschchartseriesbubblesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesbubblesymbolstroke_ = p;
  }
  return tschchartseriesbubblesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _internal_mutable_tschchartseriesbubblesymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke_);
  }
  if (tschchartseriesbubblesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}

// optional int32 tschchartseriesbubblevaluelabelposition = 213;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblevaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblevaluelabelposition() const {
  return _internal_has_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblevaluelabelposition() {
  tschchartseriesbubblevaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbubblevaluelabelposition() const {
  return tschchartseriesbubblevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbubblevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
  return _internal_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000040u;
  tschchartseriesbubblevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
}

// optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubbleshadow() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubbleshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubbleshadow() const {
  return _internal_has_tschchartseriesbubbleshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubbleshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesbubbleshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbubbleshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _internal_tschchartseriesbubbleshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
    ::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow_);
  }
  tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  if (tschchartseriesbubbleshadow) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbubbleshadow() {
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubbleshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubbleshadow() {
  _has_bits_[1] |= 0x00002000u;
  if (tschchartseriesbubbleshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesbubbleshadow_ = p;
  }
  return tschchartseriesbubbleshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubbleshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _internal_mutable_tschchartseriesbubbleshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow_);
  }
  if (tschchartseriesbubbleshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbubbleshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubbleshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}

// optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfilluseseriesstroke() {
  tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00400000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return tschchartseriesbubblesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesbubblesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
  return _internal_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00400000u;
  tschchartseriesbubblesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
}

// optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarshadow() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarshadow() const {
  return _internal_has_tschchartseries3dbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _internal_tschchartseries3dbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarshadow(
    ::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow_);
  }
  tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  if (tschchartseries3dbarshadow) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarshadow() {
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarshadow() {
  _has_bits_[1] |= 0x00100000u;
  if (tschchartseries3dbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseries3dbarshadow_ = p;
  }
  return tschchartseries3dbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _internal_mutable_tschchartseries3dbarshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow_);
  }
  if (tschchartseries3dbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnshadow() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnshadow() const {
  return _internal_has_tschchartseries3dcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _internal_tschchartseries3dcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
    ::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow_);
  }
  tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  if (tschchartseries3dcolumnshadow) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnshadow() {
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnshadow() {
  _has_bits_[1] |= 0x00200000u;
  if (tschchartseries3dcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseries3dcolumnshadow_ = p;
  }
  return tschchartseries3dcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _internal_mutable_tschchartseries3dcolumnshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow_);
  }
  if (tschchartseries3dcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlineshadow() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlineshadow() const {
  return _internal_has_tschchartseries3dlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _internal_tschchartseries3dlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlineshadow(
    ::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow_);
  }
  tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  if (tschchartseries3dlineshadow) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dlineshadow() {
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlineshadow() {
  _has_bits_[1] |= 0x00400000u;
  if (tschchartseries3dlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseries3dlineshadow_ = p;
  }
  return tschchartseries3dlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _internal_mutable_tschchartseries3dlineshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow_);
  }
  if (tschchartseries3dlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlineshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareashadow() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareashadow() const {
  return _internal_has_tschchartseries3dareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _internal_tschchartseries3dareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareashadow(
    ::TSD::ShadowArchive* tschchartseries3dareashadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow_);
  }
  tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  if (tschchartseries3dareashadow) {
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dareashadow() {
  _has_bits_[1] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  _has_bits_[1] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareashadow() {
  _has_bits_[1] |= 0x00800000u;
  if (tschchartseries3dareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseries3dareashadow_ = p;
  }
  return tschchartseries3dareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareashadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _internal_mutable_tschchartseries3dareashadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow_);
  }
  if (tschchartseries3dareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareashadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}

// optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpieshadow() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dpieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpieshadow() const {
  return _internal_has_tschchartseries3dpieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpieshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dpieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dpieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _internal_tschchartseries3dpieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpieshadow(
    ::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow_);
  }
  tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  if (tschchartseries3dpieshadow) {
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dpieshadow() {
  _has_bits_[1] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  _has_bits_[1] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpieshadow() {
  _has_bits_[1] |= 0x01000000u;
  if (tschchartseries3dpieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseries3dpieshadow_ = p;
  }
  return tschchartseries3dpieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpieshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _internal_mutable_tschchartseries3dpieshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow_);
  }
  if (tschchartseries3dpieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dpieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpieshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}

// optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultlabelparagraphstyleindex() {
  tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return tschchartseriesdefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000080u;
  tschchartseriesdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarlabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarlabelparagraphstyleindex() {
  tschchartseriesbarlabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbarlabelparagraphstyleindex() const {
  return tschchartseriesbarlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbarlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
  return _internal_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000100u;
  tschchartseriesbarlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbarlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
}

// optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinelabelparagraphstyleindex() const {
  return _internal_has_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinelabelparagraphstyleindex() {
  tschchartserieslinelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartserieslinelabelparagraphstyleindex() const {
  return tschchartserieslinelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartserieslinelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
  return _internal_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000200u;
  tschchartserieslinelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
}

// optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesarealabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesarealabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesarealabelparagraphstyleindex() {
  tschchartseriesarealabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesarealabelparagraphstyleindex() const {
  return tschchartseriesarealabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesarealabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
  return _internal_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000400u;
  tschchartseriesarealabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesarealabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
}

// optional int32 tschchartseriespielabelparagraphstyleindex = 114;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespielabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespielabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespielabelparagraphstyleindex() {
  tschchartseriespielabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriespielabelparagraphstyleindex() const {
  return tschchartseriespielabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriespielabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
  return _internal_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000800u;
  tschchartseriespielabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespielabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlabelparagraphstyleindex() {
  tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedlabelparagraphstyleindex() const {
  return tschchartseriesmixedlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
  return _internal_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00001000u;
  tschchartseriesmixedlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
}

// optional float tschchartseriesdefaultopacity = 116;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultopacity() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultopacity() const {
  return _internal_has_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultopacity() {
  tschchartseriesdefaultopacity_ = 0;
  _has_bits_[2] &= ~0x00002000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaultopacity() const {
  return tschchartseriesdefaultopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
  return _internal_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultopacity(float value) {
  _has_bits_[2] |= 0x00002000u;
  tschchartseriesdefaultopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultopacity(float value) {
  _internal_set_tschchartseriesdefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
}

// optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesstroke() {
  tschchartserieslinesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00800000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesstroke() const {
  return tschchartserieslinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
  return _internal_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00800000u;
  tschchartserieslinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesstroke() {
  tschchartseriesareasymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x01000000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesstroke() const {
  return tschchartseriesareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x01000000u;
  tschchartseriesareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
}

// optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfilluseseriesstroke() {
  tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00004000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return tschchartseriesscattersymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesscattersymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
  return _internal_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00004000u;
  tschchartseriesscattersymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00008000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return tschchartseriesmixedlinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00008000u;
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00010000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return tschchartseriesmixedareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00010000u;
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
}

// optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesfill() {
  tschchartserieslinesymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00020000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesfill() const {
  return tschchartserieslinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
  return _internal_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00020000u;
  tschchartserieslinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesfill() {
  tschchartseriesareasymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00040000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesfill() const {
  return tschchartseriesareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
  return _internal_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00040000u;
  tschchartseriesareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00080000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return tschchartseriesmixedlinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00080000u;
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesfill() {
  tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00100000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return tschchartseriesmixedareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00100000u;
  tschchartseriesmixedareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
}

// optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnfill() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnfill() const {
  return _internal_has_tschchartseriesmixedcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _internal_tschchartseriesmixedcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
    ::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill_);
  }
  tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  if (tschchartseriesmixedcolumnfill) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] |= 0x04000000u;
  if (tschchartseriesmixedcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesmixedcolumnfill_ = p;
  }
  return tschchartseriesmixedcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _internal_mutable_tschchartseriesmixedcolumnfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill_);
  }
  if (tschchartseriesmixedcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnfill, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareafill() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareafill() const {
  return _internal_has_tschchartseriesmixedareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareafill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _internal_tschchartseriesmixedareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareafill(
    ::TSD::FillArchive* tschchartseriesmixedareafill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill_);
  }
  tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  if (tschchartseriesmixedareafill) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareafill() {
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareafill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareafill() {
  _has_bits_[0] |= 0x08000000u;
  if (tschchartseriesmixedareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesmixedareafill_ = p;
  }
  return tschchartseriesmixedareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareafill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _internal_mutable_tschchartseriesmixedareafill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill_);
  }
  if (tschchartseriesmixedareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareafill, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}

// optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnstroke() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnstroke() const {
  return _internal_has_tschchartseriesmixedcolumnstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedcolumnstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _internal_tschchartseriesmixedcolumnstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke_);
  }
  tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  if (tschchartseriesmixedcolumnstroke) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnstroke() {
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnstroke() {
  _has_bits_[0] |= 0x10000000u;
  if (tschchartseriesmixedcolumnstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesmixedcolumnstroke_ = p;
  }
  return tschchartseriesmixedcolumnstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _internal_mutable_tschchartseriesmixedcolumnstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke_);
  }
  if (tschchartseriesmixedcolumnstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinestroke() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinestroke() const {
  return _internal_has_tschchartseriesmixedlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _internal_tschchartseriesmixedlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke_);
  }
  tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  if (tschchartseriesmixedlinestroke) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinestroke() {
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinestroke() {
  _has_bits_[0] |= 0x20000000u;
  if (tschchartseriesmixedlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesmixedlinestroke_ = p;
  }
  return tschchartseriesmixedlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _internal_mutable_tschchartseriesmixedlinestroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke_);
  }
  if (tschchartseriesmixedlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareastroke() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareastroke() const {
  return _internal_has_tschchartseriesmixedareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareastroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _internal_tschchartseriesmixedareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke_);
  }
  tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  if (tschchartseriesmixedareastroke) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareastroke() {
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareastroke() {
  _has_bits_[0] |= 0x40000000u;
  if (tschchartseriesmixedareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesmixedareastroke_ = p;
  }
  return tschchartseriesmixedareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareastroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _internal_mutable_tschchartseriesmixedareastroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke_);
  }
  if (tschchartseriesmixedareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareastroke, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}

// optional float tschchartseriesmixedlinesymbolsize = 135;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolsize() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolsize() const {
  return _internal_has_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolsize() {
  tschchartseriesmixedlinesymbolsize_ = 0;
  _has_bits_[2] &= ~0x02000000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolsize() const {
  return tschchartseriesmixedlinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
  return _internal_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolsize(float value) {
  _has_bits_[2] |= 0x02000000u;
  tschchartseriesmixedlinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolsize(float value) {
  _internal_set_tschchartseriesmixedlinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
}

// optional float tschchartseriesmixedareasymbolsize = 136;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolsize() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolsize() const {
  return _internal_has_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolsize() {
  tschchartseriesmixedareasymbolsize_ = 0;
  _has_bits_[2] &= ~0x04000000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolsize() const {
  return tschchartseriesmixedareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
  return _internal_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolsize(float value) {
  _has_bits_[2] |= 0x04000000u;
  tschchartseriesmixedareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolsize(float value) {
  _internal_set_tschchartseriesmixedareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
}

// optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfill() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedlinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _internal_tschchartseriesmixedlinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill_);
  }
  tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  if (tschchartseriesmixedlinesymbolfill) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[0] |= 0x80000000u;
  if (tschchartseriesmixedlinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesmixedlinesymbolfill_ = p;
  }
  return tschchartseriesmixedlinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _internal_mutable_tschchartseriesmixedlinesymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill_);
  }
  if (tschchartseriesmixedlinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolfill, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfill() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _internal_tschchartseriesmixedareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill_);
  }
  tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  if (tschchartseriesmixedareasymbolfill) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] |= 0x00000001u;
  if (tschchartseriesmixedareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseriesmixedareasymbolfill_ = p;
  }
  return tschchartseriesmixedareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _internal_mutable_tschchartseriesmixedareasymbolfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill_);
  }
  if (tschchartseriesmixedareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedlinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _internal_tschchartseriesmixedlinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke_);
  }
  tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  if (tschchartseriesmixedlinesymbolstroke) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[1] |= 0x00000002u;
  if (tschchartseriesmixedlinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesmixedlinesymbolstroke_ = p;
  }
  return tschchartseriesmixedlinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _internal_mutable_tschchartseriesmixedlinesymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke_);
  }
  if (tschchartseriesmixedlinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _internal_tschchartseriesmixedareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke_);
  }
  tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  if (tschchartseriesmixedareasymbolstroke) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[1] |= 0x00000004u;
  if (tschchartseriesmixedareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesmixedareasymbolstroke_ = p;
  }
  return tschchartseriesmixedareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _internal_mutable_tschchartseriesmixedareasymbolstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke_);
  }
  if (tschchartseriesmixedareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}

// optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnvaluelabelposition() const {
  return _internal_has_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnvaluelabelposition() {
  tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnvaluelabelposition() const {
  return tschchartseriesmixedcolumnvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedcolumnvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
  return _internal_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x08000000u;
  tschchartseriesmixedcolumnvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedcolumnvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
}

// optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinevaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinevaluelabelposition() const {
  return _internal_has_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinevaluelabelposition() {
  tschchartseriesmixedlinevaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinevaluelabelposition() const {
  return tschchartseriesmixedlinevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedlinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
  return _internal_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x10000000u;
  tschchartseriesmixedlinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
}

// optional int32 tschchartseriesmixedareavaluelabelposition = 143;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareavaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareavaluelabelposition() const {
  return _internal_has_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareavaluelabelposition() {
  tschchartseriesmixedareavaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedareavaluelabelposition() const {
  return tschchartseriesmixedareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
  return _internal_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x20000000u;
  tschchartseriesmixedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
}

// optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x40000000u;
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return tschchartseriesbaroutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x80000000u;
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return tschchartseriesareaoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000001u;
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespieoutsidelabelparagraphstyleindex() {
  tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return tschchartseriespieoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriespieoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000002u;
  tschchartseriespieoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return tschchartseriesmixedoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000004u;
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedbarvaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedbarvaluelabelposition() const {
  return _internal_has_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedbarvaluelabelposition() {
  tschchartseriesstackedbarvaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesstackedbarvaluelabelposition() const {
  return tschchartseriesstackedbarvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesstackedbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
  return _internal_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000008u;
  tschchartseriesstackedbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
}

// optional int32 tschchartseriesstackedareavaluelabelposition = 157;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedareavaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedareavaluelabelposition() const {
  return _internal_has_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedareavaluelabelposition() {
  tschchartseriesstackedareavaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesstackedareavaluelabelposition() const {
  return tschchartseriesstackedareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesstackedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
  return _internal_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000010u;
  tschchartseriesstackedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinestroke() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulttrendlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinestroke() const {
  return _internal_has_tschchartseriesdefaulttrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulttrendlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _internal_tschchartseriesdefaulttrendlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke_);
  }
  tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  if (tschchartseriesdefaulttrendlinestroke) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[1] |= 0x00000008u;
  if (tschchartseriesdefaulttrendlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesdefaulttrendlinestroke_ = p;
  }
  return tschchartseriesdefaulttrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlinestroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _internal_mutable_tschchartseriesdefaulttrendlinestroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke_);
  }
  if (tschchartseriesdefaulttrendlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlinestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshadow() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulttrendlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineshadow() const {
  return _internal_has_tschchartseriesdefaulttrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaulttrendlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _internal_tschchartseriesdefaulttrendlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow_);
  }
  tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  if (tschchartseriesdefaulttrendlineshadow) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[1] |= 0x00000010u;
  if (tschchartseriesdefaulttrendlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesdefaulttrendlineshadow_ = p;
  }
  return tschchartseriesdefaulttrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlineshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _internal_mutable_tschchartseriesdefaulttrendlineshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow_);
  }
  if (tschchartseriesdefaulttrendlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlineshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarshadow() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarshadow() const {
  return _internal_has_tschchartseriesdefaulterrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaulterrorbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _internal_tschchartseriesdefaulterrorbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow_);
  }
  tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  if (tschchartseriesdefaulterrorbarshadow) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[1] |= 0x00000020u;
  if (tschchartseriesdefaulterrorbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArena());
    tschchartseriesdefaulterrorbarshadow_ = p;
  }
  return tschchartseriesdefaulterrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarshadow() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _internal_mutable_tschchartseriesdefaulterrorbarshadow();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow_);
  }
  if (tschchartseriesdefaulterrorbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstroke() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstroke() const {
  return _internal_has_tschchartseriesdefaulterrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulterrorbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _internal_tschchartseriesdefaulterrorbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke_);
  }
  tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  if (tschchartseriesdefaulterrorbarstroke) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[1] |= 0x00000040u;
  if (tschchartseriesdefaulterrorbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesdefaulterrorbarstroke_ = p;
  }
  return tschchartseriesdefaulterrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstroke() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _internal_mutable_tschchartseriesdefaulterrorbarstroke();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke_);
  }
  if (tschchartseriesdefaulterrorbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstrokescatterx() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulterrorbarstrokescatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstrokescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _internal_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[1] |= 0x00000080u;
  if (tschchartseriesdefaulterrorbarstrokescatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    tschchartseriesdefaulterrorbarstrokescatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstrokescatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstrokescatterx, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineend() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineend() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaulterrorbarlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _internal_tschchartseriesdefaulterrorbarlineend();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend_);
  }
  tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  if (tschchartseriesdefaulterrorbarlineend) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineend() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[1] |= 0x00000100u;
  if (tschchartseriesdefaulterrorbarlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArena());
    tschchartseriesdefaulterrorbarlineend_ = p;
  }
  return tschchartseriesdefaulterrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineend() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _internal_mutable_tschchartseriesdefaulterrorbarlineend();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend_);
  }
  if (tschchartseriesdefaulterrorbarlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineend, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineendscatterx() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaulterrorbarlineendscatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineendscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _internal_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[1] |= 0x00000200u;
  if (tschchartseriesdefaulterrorbarlineendscatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArena());
    tschchartseriesdefaulterrorbarlineendscatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineendscatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineendscatterx, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultdeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultdeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultdeprecated3dfill() const {
  return _internal_has_tschchartseriesdefaultdeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultdeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartseriesdefaultdeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartseriesdefaultdeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill)
  return _internal_tschchartseriesdefaultdeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultdeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesdefaultdeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdeprecated3dfill_);
  }
  tschchartseriesdefaultdeprecated3dfill_ = tschchartseriesdefaultdeprecated3dfill;
  if (tschchartseriesdefaultdeprecated3dfill) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultdeprecated3dfill() {
  _has_bits_[1] &= ~0x00004000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesdefaultdeprecated3dfill_;
  tschchartseriesdefaultdeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultdeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill)
  _has_bits_[1] &= ~0x00004000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesdefaultdeprecated3dfill_;
  tschchartseriesdefaultdeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultdeprecated3dfill() {
  _has_bits_[1] |= 0x00004000u;
  if (tschchartseriesdefaultdeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartseriesdefaultdeprecated3dfill_ = p;
  }
  return tschchartseriesdefaultdeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultdeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill)
  return _internal_mutable_tschchartseriesdefaultdeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultdeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesdefaultdeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdeprecated3dfill_);
  }
  if (tschchartseriesdefaultdeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultdeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultdeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  tschchartseriesdefaultdeprecated3dfill_ = tschchartseriesdefaultdeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbardeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbardeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbardeprecated3dfill() const {
  return _internal_has_tschchartseriesbardeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbardeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartseriesbardeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartseriesbardeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill)
  return _internal_tschchartseriesbardeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbardeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesbardeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbardeprecated3dfill_);
  }
  tschchartseriesbardeprecated3dfill_ = tschchartseriesbardeprecated3dfill;
  if (tschchartseriesbardeprecated3dfill) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartseriesbardeprecated3dfill() {
  _has_bits_[1] &= ~0x00008000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesbardeprecated3dfill_;
  tschchartseriesbardeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbardeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill)
  _has_bits_[1] &= ~0x00008000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesbardeprecated3dfill_;
  tschchartseriesbardeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbardeprecated3dfill() {
  _has_bits_[1] |= 0x00008000u;
  if (tschchartseriesbardeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartseriesbardeprecated3dfill_ = p;
  }
  return tschchartseriesbardeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbardeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill)
  return _internal_mutable_tschchartseriesbardeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbardeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesbardeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbardeprecated3dfill_);
  }
  if (tschchartseriesbardeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbardeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesbardeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbardeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  tschchartseriesbardeprecated3dfill_ = tschchartseriesbardeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriescolumndeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescolumndeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriescolumndeprecated3dfill() const {
  return _internal_has_tschchartseriescolumndeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartseriescolumndeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartseriescolumndeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartseriescolumndeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill)
  return _internal_tschchartseriescolumndeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriescolumndeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriescolumndeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumndeprecated3dfill_);
  }
  tschchartseriescolumndeprecated3dfill_ = tschchartseriescolumndeprecated3dfill;
  if (tschchartseriescolumndeprecated3dfill) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartseriescolumndeprecated3dfill() {
  _has_bits_[1] &= ~0x00010000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriescolumndeprecated3dfill_;
  tschchartseriescolumndeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriescolumndeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill)
  _has_bits_[1] &= ~0x00010000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriescolumndeprecated3dfill_;
  tschchartseriescolumndeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriescolumndeprecated3dfill() {
  _has_bits_[1] |= 0x00010000u;
  if (tschchartseriescolumndeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartseriescolumndeprecated3dfill_ = p;
  }
  return tschchartseriescolumndeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartseriescolumndeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill)
  return _internal_mutable_tschchartseriescolumndeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriescolumndeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriescolumndeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumndeprecated3dfill_);
  }
  if (tschchartseriescolumndeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumndeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriescolumndeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescolumndeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  tschchartseriescolumndeprecated3dfill_ = tschchartseriescolumndeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinedeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinedeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinedeprecated3dfill() const {
  return _internal_has_tschchartserieslinedeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinedeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartserieslinedeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartserieslinedeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill)
  return _internal_tschchartserieslinedeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinedeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartserieslinedeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinedeprecated3dfill_);
  }
  tschchartserieslinedeprecated3dfill_ = tschchartserieslinedeprecated3dfill;
  if (tschchartserieslinedeprecated3dfill) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartserieslinedeprecated3dfill() {
  _has_bits_[1] &= ~0x00020000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartserieslinedeprecated3dfill_;
  tschchartserieslinedeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinedeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill)
  _has_bits_[1] &= ~0x00020000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartserieslinedeprecated3dfill_;
  tschchartserieslinedeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinedeprecated3dfill() {
  _has_bits_[1] |= 0x00020000u;
  if (tschchartserieslinedeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartserieslinedeprecated3dfill_ = p;
  }
  return tschchartserieslinedeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinedeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill)
  return _internal_mutable_tschchartserieslinedeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinedeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartserieslinedeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinedeprecated3dfill_);
  }
  if (tschchartserieslinedeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinedeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartserieslinedeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinedeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  tschchartserieslinedeprecated3dfill_ = tschchartserieslinedeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareadeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareadeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareadeprecated3dfill() const {
  return _internal_has_tschchartseriesareadeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareadeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartseriesareadeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartseriesareadeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill)
  return _internal_tschchartseriesareadeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareadeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesareadeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareadeprecated3dfill_);
  }
  tschchartseriesareadeprecated3dfill_ = tschchartseriesareadeprecated3dfill;
  if (tschchartseriesareadeprecated3dfill) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartseriesareadeprecated3dfill() {
  _has_bits_[1] &= ~0x00040000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesareadeprecated3dfill_;
  tschchartseriesareadeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareadeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill)
  _has_bits_[1] &= ~0x00040000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriesareadeprecated3dfill_;
  tschchartseriesareadeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareadeprecated3dfill() {
  _has_bits_[1] |= 0x00040000u;
  if (tschchartseriesareadeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartseriesareadeprecated3dfill_ = p;
  }
  return tschchartseriesareadeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareadeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill)
  return _internal_mutable_tschchartseriesareadeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareadeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriesareadeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareadeprecated3dfill_);
  }
  if (tschchartseriesareadeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareadeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesareadeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareadeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  tschchartseriesareadeprecated3dfill_ = tschchartseriesareadeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill)
}

// optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiedeprecated3dfill() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespiedeprecated3dfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiedeprecated3dfill() const {
  return _internal_has_tschchartseriespiedeprecated3dfill();
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiedeprecated3dfill() const {
  const ::TSCH::DEPRECATEDChart3DFillArchive* p = tschchartseriespiedeprecated3dfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::DEPRECATEDChart3DFillArchive&>(
      ::TSCH::_DEPRECATEDChart3DFillArchive_default_instance_);
}
inline const ::TSCH::DEPRECATEDChart3DFillArchive& ChartSeriesStyleArchive::tschchartseriespiedeprecated3dfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill)
  return _internal_tschchartseriespiedeprecated3dfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiedeprecated3dfill(
    ::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriespiedeprecated3dfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiedeprecated3dfill_);
  }
  tschchartseriespiedeprecated3dfill_ = tschchartseriespiedeprecated3dfill;
  if (tschchartseriespiedeprecated3dfill) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill)
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::release_tschchartseriespiedeprecated3dfill() {
  _has_bits_[1] &= ~0x00080000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriespiedeprecated3dfill_;
  tschchartseriespiedeprecated3dfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiedeprecated3dfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill)
  _has_bits_[1] &= ~0x00080000u;
  ::TSCH::DEPRECATEDChart3DFillArchive* temp = tschchartseriespiedeprecated3dfill_;
  tschchartseriespiedeprecated3dfill_ = nullptr;
  return temp;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiedeprecated3dfill() {
  _has_bits_[1] |= 0x00080000u;
  if (tschchartseriespiedeprecated3dfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::DEPRECATEDChart3DFillArchive>(GetArena());
    tschchartseriespiedeprecated3dfill_ = p;
  }
  return tschchartseriespiedeprecated3dfill_;
}
inline ::TSCH::DEPRECATEDChart3DFillArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiedeprecated3dfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill)
  return _internal_mutable_tschchartseriespiedeprecated3dfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiedeprecated3dfill(::TSCH::DEPRECATEDChart3DFillArchive* tschchartseriespiedeprecated3dfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiedeprecated3dfill_);
  }
  if (tschchartseriespiedeprecated3dfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiedeprecated3dfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriespiedeprecated3dfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiedeprecated3dfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  tschchartseriespiedeprecated3dfill_ = tschchartseriespiedeprecated3dfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill)
}

// optional .TSD.FillArchive tschchartseries3dbarfill = 320;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarfill() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarfill() const {
  return _internal_has_tschchartseries3dbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarfill() const {
  const ::TSD::FillArchive* p = tschchartseries3dbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _internal_tschchartseries3dbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarfill(
    ::TSD::FillArchive* tschchartseries3dbarfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill_);
  }
  tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  if (tschchartseries3dbarfill) {
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarfill() {
  _has_bits_[1] &= ~0x02000000u;
  ::TSD::FillArchive* temp = tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  _has_bits_[1] &= ~0x02000000u;
  ::TSD::FillArchive* temp = tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarfill() {
  _has_bits_[1] |= 0x02000000u;
  if (tschchartseries3dbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseries3dbarfill_ = p;
  }
  return tschchartseries3dbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _internal_mutable_tschchartseries3dbarfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill_);
  }
  if (tschchartseries3dbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarfill, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}

// optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnfill() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnfill() const {
  return _internal_has_tschchartseries3dcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseries3dcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _internal_tschchartseries3dcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
    ::TSD::FillArchive* tschchartseries3dcolumnfill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill_);
  }
  tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  if (tschchartseries3dcolumnfill) {
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnfill() {
  _has_bits_[1] &= ~0x04000000u;
  ::TSD::FillArchive* temp = tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  _has_bits_[1] &= ~0x04000000u;
  ::TSD::FillArchive* temp = tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnfill() {
  _has_bits_[1] |= 0x04000000u;
  if (tschchartseries3dcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseries3dcolumnfill_ = p;
  }
  return tschchartseries3dcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnfill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _internal_mutable_tschchartseries3dcolumnfill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill_);
  }
  if (tschchartseries3dcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnfill, submessage_arena);
    }
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}

// optional .TSD.FillArchive tschchartseries3dlinefill = 322;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlinefill() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dlinefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlinefill() const {
  return _internal_has_tschchartseries3dlinefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlinefill() const {
  const ::TSD::FillArchive* p = tschchartseries3dlinefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dlinefill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _internal_tschchartseries3dlinefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlinefill(
    ::TSD::FillArchive* tschchartseries3dlinefill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill_);
  }
  tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  if (tschchartseries3dlinefill) {
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dlinefill() {
  _has_bits_[1] &= ~0x08000000u;
  ::TSD::FillArchive* temp = tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlinefill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  _has_bits_[1] &= ~0x08000000u;
  ::TSD::FillArchive* temp = tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlinefill() {
  _has_bits_[1] |= 0x08000000u;
  if (tschchartseries3dlinefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseries3dlinefill_ = p;
  }
  return tschchartseries3dlinefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlinefill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _internal_mutable_tschchartseries3dlinefill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill_);
  }
  if (tschchartseries3dlinefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dlinefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlinefill, submessage_arena);
    }
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}

// optional .TSD.FillArchive tschchartseries3dareafill = 323;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareafill() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareafill() const {
  return _internal_has_tschchartseries3dareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareafill() const {
  const ::TSD::FillArchive* p = tschchartseries3dareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _internal_tschchartseries3dareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareafill(
    ::TSD::FillArchive* tschchartseries3dareafill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill_);
  }
  tschchartseries3dareafill_ = tschchartseries3dareafill;
  if (tschchartseries3dareafill) {
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dareafill() {
  _has_bits_[1] &= ~0x10000000u;
  ::TSD::FillArchive* temp = tschchartseries3dareafill_;
  tschchartseries3dareafill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareafill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareafill)
  _has_bits_[1] &= ~0x10000000u;
  ::TSD::FillArchive* temp = tschchartseries3dareafill_;
  tschchartseries3dareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareafill() {
  _has_bits_[1] |= 0x10000000u;
  if (tschchartseries3dareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseries3dareafill_ = p;
  }
  return tschchartseries3dareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareafill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _internal_mutable_tschchartseries3dareafill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill_);
  }
  if (tschchartseries3dareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareafill, submessage_arena);
    }
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  tschchartseries3dareafill_ = tschchartseries3dareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dareafill)
}

// optional .TSD.FillArchive tschchartseries3dpiefill = 324;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpiefill() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dpiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpiefill() const {
  return _internal_has_tschchartseries3dpiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpiefill() const {
  const ::TSD::FillArchive* p = tschchartseries3dpiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dpiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _internal_tschchartseries3dpiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpiefill(
    ::TSD::FillArchive* tschchartseries3dpiefill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill_);
  }
  tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  if (tschchartseries3dpiefill) {
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dpiefill() {
  _has_bits_[1] &= ~0x20000000u;
  ::TSD::FillArchive* temp = tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpiefill() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  _has_bits_[1] &= ~0x20000000u;
  ::TSD::FillArchive* temp = tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpiefill() {
  _has_bits_[1] |= 0x20000000u;
  if (tschchartseries3dpiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    tschchartseries3dpiefill_ = p;
  }
  return tschchartseries3dpiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpiefill() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _internal_mutable_tschchartseries3dpiefill();
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill_);
  }
  if (tschchartseries3dpiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseries3dpiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpiefill, submessage_arena);
    }
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}

// -------------------------------------------------------------------

// ChartSeriesNonStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool ChartSeriesNonStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& ChartSeriesNonStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& ChartSeriesNonStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.super)
  return _internal_super();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.super)
}
inline ::TSS::StyleArchive* ChartSeriesNonStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* ChartSeriesNonStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* ChartSeriesNonStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.super)
  return _internal_mutable_super();
}
inline void ChartSeriesNonStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.super)
}

// optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformat() const {
  return _internal_has_tschchartseriesdefaultnumberformat();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformat() {
  if (tschchartseriesdefaultnumberformat_ != nullptr) tschchartseriesdefaultnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformat() const {
  const ::TSCH::PreUFF::ChartsNumberFormatArchive* p = tschchartseriesdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartsNumberFormatArchive&>(
      ::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _internal_tschchartseriesdefaultnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
    ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesdefaultnumberformat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultnumberformat_);
  }
  tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  if (tschchartseriesdefaultnumberformat) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartseriesdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartsNumberFormatArchive>(GetArena());
    tschchartseriesdefaultnumberformat_ = p;
  }
  return tschchartseriesdefaultnumberformat_;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultnumberformat() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _internal_mutable_tschchartseriesdefaultnumberformat();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tschchartseriesdefaultnumberformat_;
  }
  if (tschchartseriesdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tschchartseriesdefaultnumberformat);
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}

// optional int32 tschchartseriesdefaultnumberformattype = 11;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformattype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformattype() const {
  return _internal_has_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformattype() {
  tschchartseriesdefaultnumberformattype_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformattype() const {
  return tschchartseriesdefaultnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
  return _internal_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tschchartseriesdefaultnumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
}

// optional bool tschchartseriesbarshowvaluelabels = 12;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbarshowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarshowvaluelabels() const {
  return _internal_has_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarshowvaluelabels() {
  tschchartseriesbarshowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbarshowvaluelabels() const {
  return tschchartseriesbarshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbarshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
  return _internal_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbarshowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartseriesbarshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbarshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
}

// optional int32 tschchartserieslinesymboltype = 19;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinesymboltype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinesymboltype() const {
  return _internal_has_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinesymboltype() {
  tschchartserieslinesymboltype_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartserieslinesymboltype() const {
  return tschchartserieslinesymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartserieslinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
  return _internal_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  tschchartserieslinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
}

// optional bool tschchartserieslineshowsymbol = 20;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowsymbol() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowsymbol() const {
  return _internal_has_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowsymbol() {
  tschchartserieslineshowsymbol_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowsymbol() const {
  return tschchartserieslineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
  return _internal_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowsymbol(bool value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartserieslineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowsymbol(bool value) {
  _internal_set_tschchartserieslineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
}

// optional bool tschchartserieslineshowvaluelabels = 21;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowvaluelabels() const {
  return _internal_has_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowvaluelabels() {
  tschchartserieslineshowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowvaluelabels() const {
  return tschchartserieslineshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
  return _internal_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartserieslineshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowvaluelabels(bool value) {
  _internal_set_tschchartserieslineshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
}

// optional bool tschchartseriesareashowvaluelabels = 27;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowvaluelabels() const {
  return _internal_has_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowvaluelabels() {
  tschchartseriesareashowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowvaluelabels() const {
  return tschchartseriesareashowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
  return _internal_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartseriesareashowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowvaluelabels(bool value) {
  _internal_set_tschchartseriesareashowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
}

// optional int32 tschchartserieslinelinetype = 30;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinelinetype() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinelinetype() const {
  return _internal_has_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinelinetype() {
  tschchartserieslinelinetype_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartserieslinelinetype() const {
  return tschchartserieslinelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartserieslinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
  return _internal_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartserieslinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
}

// optional int32 tschchartseriesareasymboltype = 31;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareasymboltype() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareasymboltype() const {
  return _internal_has_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareasymboltype() {
  tschchartseriesareasymboltype_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesareasymboltype() const {
  return tschchartseriesareasymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
  return _internal_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartseriesareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
}

// optional bool tschchartseriesareashowsymbol = 32;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowsymbol() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowsymbol() const {
  return _internal_has_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowsymbol() {
  tschchartseriesareashowsymbol_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowsymbol() const {
  return tschchartseriesareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
  return _internal_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowsymbol(bool value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartseriesareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowsymbol(bool value) {
  _internal_set_tschchartseriesareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
}

// optional bool tschchartseriespieshowvaluelabels = 37;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowvaluelabels() const {
  return _internal_has_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowvaluelabels() {
  tschchartseriespieshowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowvaluelabels() const {
  return tschchartseriespieshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
  return _internal_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartseriespieshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowvaluelabels(bool value) {
  _internal_set_tschchartseriespieshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
}

// optional bool tschchartseriesscattershowvaluelabels = 45;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowvaluelabels() const {
  return _internal_has_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowvaluelabels() {
  tschchartseriesscattershowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowvaluelabels() const {
  return tschchartseriesscattershowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
  return _internal_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartseriesscattershowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowvaluelabels(bool value) {
  _internal_set_tschchartseriesscattershowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
}

// optional float tschchartseriespiewedgeexplosion = 50;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespiewedgeexplosion() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespiewedgeexplosion() const {
  return _internal_has_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespiewedgeexplosion() {
  tschchartseriespiewedgeexplosion_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespiewedgeexplosion() const {
  return tschchartseriespiewedgeexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespiewedgeexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
  return _internal_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespiewedgeexplosion(float value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartseriespiewedgeexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespiewedgeexplosion(float value) {
  _internal_set_tschchartseriespiewedgeexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
}

// optional bool tschchartseriesdefaultshowvaluelabels = 51;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowvaluelabels() const {
  return _internal_has_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowvaluelabels() {
  tschchartseriesdefaultshowvaluelabels_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowvaluelabels() const {
  return tschchartseriesdefaultshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
  return _internal_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartseriesdefaultshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _internal_set_tschchartseriesdefaultshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
}

// optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespienumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformat() const {
  return _internal_has_tschchartseriespienumberformat();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformat() {
  if (tschchartseriespienumberformat_ != nullptr) tschchartseriespienumberformat_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformat() const {
  const ::TSCH::PreUFF::ChartsNumberFormatArchive* p = tschchartseriespienumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartsNumberFormatArchive&>(
      ::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::tschchartseriespienumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _internal_tschchartseriespienumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriespienumberformat(
    ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriespienumberformat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespienumberformat_);
  }
  tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  if (tschchartseriespienumberformat) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::release_tschchartseriespienumberformat() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriespienumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriespienumberformat() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartseriespienumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartsNumberFormatArchive>(GetArena());
    tschchartseriespienumberformat_ = p;
  }
  return tschchartseriespienumberformat_;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespienumberformat() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _internal_mutable_tschchartseriespienumberformat();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespienumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriespienumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tschchartseriespienumberformat_;
  }
  if (tschchartseriespienumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tschchartseriespienumberformat);
    if (message_arena != submessage_arena) {
      tschchartseriespienumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespienumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}

// optional int32 tschchartseriespienumberformattype = 53;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformattype() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformattype() const {
  return _internal_has_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformattype() {
  tschchartseriespienumberformattype_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformattype() const {
  return tschchartseriespienumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriespienumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
  return _internal_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartseriespienumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespienumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
}

// optional float tschchartseriespielabelexplosion = 54;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespielabelexplosion() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespielabelexplosion() const {
  return _internal_has_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespielabelexplosion() {
  tschchartseriespielabelexplosion_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespielabelexplosion() const {
  return tschchartseriespielabelexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespielabelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
  return _internal_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespielabelexplosion(float value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartseriespielabelexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespielabelexplosion(float value) {
  _internal_set_tschchartseriespielabelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
}

// optional bool tschchartseriesmixedlineshowsymbol = 58;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlineshowsymbol() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlineshowsymbol() const {
  return _internal_has_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlineshowsymbol() {
  tschchartseriesmixedlineshowsymbol_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlineshowsymbol() const {
  return tschchartseriesmixedlineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedlineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
  return _internal_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlineshowsymbol(bool value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartseriesmixedlineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlineshowsymbol(bool value) {
  _internal_set_tschchartseriesmixedlineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
}

// optional bool tschchartseriesmixedareashowsymbol = 59;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareashowsymbol() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareashowsymbol() const {
  return _internal_has_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareashowsymbol() {
  tschchartseriesmixedareashowsymbol_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareashowsymbol() const {
  return tschchartseriesmixedareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
  return _internal_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareashowsymbol(bool value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartseriesmixedareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareashowsymbol(bool value) {
  _internal_set_tschchartseriesmixedareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
}

// optional int32 tschchartseriesmixedlinesymboltype = 60;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinesymboltype() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinesymboltype() const {
  return _internal_has_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinesymboltype() {
  tschchartseriesmixedlinesymboltype_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinesymboltype() const {
  return tschchartseriesmixedlinesymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
  return _internal_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartseriesmixedlinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
}

// optional int32 tschchartseriesmixedareasymboltype = 61;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareasymboltype() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareasymboltype() const {
  return _internal_has_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareasymboltype() {
  tschchartseriesmixedareasymboltype_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareasymboltype() const {
  return tschchartseriesmixedareasymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
  return _internal_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartseriesmixedareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
}

// optional bool tschchartseriesmixedshowvaluelabels = 62;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedshowvaluelabels() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedshowvaluelabels() const {
  return _internal_has_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedshowvaluelabels() {
  tschchartseriesmixedshowvaluelabels_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedshowvaluelabels() const {
  return tschchartseriesmixedshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
  return _internal_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedshowvaluelabels(bool value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartseriesmixedshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedshowvaluelabels(bool value) {
  _internal_set_tschchartseriesmixedshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
}

// optional int32 tschchartseriesmixedlinelinetype = 63;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinelinetype() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinelinetype() const {
  return _internal_has_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinelinetype() {
  tschchartseriesmixedlinelinetype_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinelinetype() const {
  return tschchartseriesmixedlinelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
  return _internal_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartseriesmixedlinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
}

// optional int32 tschchartseriesdefaultyaxisordinal = 65;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultyaxisordinal() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultyaxisordinal() const {
  return _internal_has_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultyaxisordinal() {
  tschchartseriesdefaultyaxisordinal_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultyaxisordinal() const {
  return tschchartseriesdefaultyaxisordinal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultyaxisordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
  return _internal_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartseriesdefaultyaxisordinal_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultyaxisordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
}

// optional bool tschchartseriespieshowserieslabels = 66;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowserieslabels() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowserieslabels() const {
  return _internal_has_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowserieslabels() {
  tschchartseriespieshowserieslabels_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowserieslabels() const {
  return tschchartseriespieshowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
  return _internal_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowserieslabels(bool value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartseriespieshowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowserieslabels(bool value) {
  _internal_set_tschchartseriespieshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
}

// optional bool tschchartseriesscattershowsymbol = 69;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowsymbol() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowsymbol() const {
  return _internal_has_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowsymbol() {
  tschchartseriesscattershowsymbol_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowsymbol() const {
  return tschchartseriesscattershowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
  return _internal_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowsymbol(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartseriesscattershowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowsymbol(bool value) {
  _internal_set_tschchartseriesscattershowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
}

// optional int32 tschchartseriesscattersymboltype = 70;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattersymboltype() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattersymboltype() const {
  return _internal_has_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattersymboltype() {
  tschchartseriesscattersymboltype_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscattersymboltype() const {
  return tschchartseriesscattersymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscattersymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
  return _internal_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartseriesscattersymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscattersymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
}

// optional int32 tschchartseriesscatterlinetype = 71;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscatterlinetype() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterlinetype() const {
  return _internal_has_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterlinetype() {
  tschchartseriesscatterlinetype_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscatterlinetype() const {
  return tschchartseriesscatterlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscatterlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
  return _internal_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartseriesscatterlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscatterlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
}

// optional bool tschchartseriesscattershowline = 72;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowline() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowline() const {
  return _internal_has_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowline() {
  tschchartseriesscattershowline_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowline() const {
  return tschchartseriesscattershowline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowline() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
  return _internal_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowline(bool value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartseriesscattershowline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowline(bool value) {
  _internal_set_tschchartseriesscattershowline(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
}

// optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedpercentnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesstackedpercentnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedpercentnumberformat() const {
  return _internal_has_tschchartseriesstackedpercentnumberformat();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedpercentnumberformat() {
  if (tschchartseriesstackedpercentnumberformat_ != nullptr) tschchartseriesstackedpercentnumberformat_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedpercentnumberformat() const {
  const ::TSCH::PreUFF::ChartsNumberFormatArchive* p = tschchartseriesstackedpercentnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PreUFF::ChartsNumberFormatArchive&>(
      ::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_);
}
inline const ::TSCH::PreUFF::ChartsNumberFormatArchive& ChartSeriesNonStyleArchive::tschchartseriesstackedpercentnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _internal_tschchartseriesstackedpercentnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
    ::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesstackedpercentnumberformat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstackedpercentnumberformat_);
  }
  tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  if (tschchartseriesstackedpercentnumberformat) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::release_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesstackedpercentnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::PreUFF::ChartsNumberFormatArchive* temp = tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = nullptr;
  return temp;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartseriesstackedpercentnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PreUFF::ChartsNumberFormatArchive>(GetArena());
    tschchartseriesstackedpercentnumberformat_ = p;
  }
  return tschchartseriesstackedpercentnumberformat_;
}
inline ::TSCH::PreUFF::ChartsNumberFormatArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesstackedpercentnumberformat() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _internal_mutable_tschchartseriesstackedpercentnumberformat();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesstackedpercentnumberformat(::TSCH::PreUFF::ChartsNumberFormatArchive* tschchartseriesstackedpercentnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tschchartseriesstackedpercentnumberformat_;
  }
  if (tschchartseriesstackedpercentnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tschchartseriesstackedpercentnumberformat);
    if (message_arena != submessage_arena) {
      tschchartseriesstackedpercentnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesstackedpercentnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}

// optional int32 tschchartseriesdefaultseriestype = 126;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultseriestype() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultseriestype() const {
  return _internal_has_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultseriestype() {
  tschchartseriesdefaultseriestype_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultseriestype() const {
  return tschchartseriesdefaultseriestype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultseriestype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
  return _internal_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartseriesdefaultseriestype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultseriestype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
}

// optional int32 tschchartseriesdefaulttrendlinetype = 160;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinetype() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinetype() const {
  return _internal_has_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinetype() {
  tschchartseriesdefaulttrendlinetype_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinetype() const {
  return tschchartseriesdefaulttrendlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
  return _internal_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  tschchartseriesdefaulttrendlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
}

// optional int32 tschchartseriesdefaulttrendlineorder = 161;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineorder() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineorder() const {
  return _internal_has_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineorder() {
  tschchartseriesdefaulttrendlineorder_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineorder() const {
  return tschchartseriesdefaulttrendlineorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineorder() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
  return _internal_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  tschchartseriesdefaulttrendlineorder_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineorder(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
}

// optional int32 tschchartseriesdefaulttrendlineperiod = 162;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineperiod() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineperiod() const {
  return _internal_has_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineperiod() {
  tschchartseriesdefaulttrendlineperiod_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineperiod() const {
  return tschchartseriesdefaulttrendlineperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineperiod() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
  return _internal_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  tschchartseriesdefaulttrendlineperiod_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineperiod(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
}

// optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowlabel() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowlabel() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowlabel() {
  tschchartseriesdefaulttrendlineshowlabel_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowlabel() const {
  return tschchartseriesdefaulttrendlineshowlabel_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
  return _internal_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartseriesdefaulttrendlineshowlabel_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
}

// optional string tschchartseriesdefaulttrendlinelabelstring = 164;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinelabelstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinelabelstring() const {
  return _internal_has_tschchartseriesdefaulttrendlinelabelstring();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinelabelstring() {
  tschchartseriesdefaulttrendlinelabelstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinelabelstring() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _internal_tschchartseriesdefaulttrendlinelabelstring();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}
inline std::string* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulttrendlinelabelstring() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
}
inline const std::string& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinelabelstring() const {
  return tschchartseriesdefaulttrendlinelabelstring_.Get();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinelabelstring() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartseriesdefaulttrendlinelabelstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulttrendlinelabelstring() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  if (!_internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartseriesdefaulttrendlinelabelstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring) {
  if (tschchartseriesdefaulttrendlinelabelstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartseriesdefaulttrendlinelabelstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartseriesdefaulttrendlinelabelstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}

// optional bool tschchartseriesdefaulttrendlineshowequation = 165;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowequation() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowequation() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowequation() {
  tschchartseriesdefaulttrendlineshowequation_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowequation() const {
  return tschchartseriesdefaulttrendlineshowequation_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowequation() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
  return _internal_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartseriesdefaulttrendlineshowequation_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowequation(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
}

// optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowr2value() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowr2value() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowr2value() {
  tschchartseriesdefaulttrendlineshowr2value_ = false;
  _has_bits_[1] &= ~0x00100000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowr2value() const {
  return tschchartseriesdefaulttrendlineshowr2value_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowr2value() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
  return _internal_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _has_bits_[1] |= 0x00100000u;
  tschchartseriesdefaulttrendlineshowr2value_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowr2value(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
}

// optional int32 tschchartseriesdefaulterrorbarsetting = 170;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsetting() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsetting() const {
  return _internal_has_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsetting() {
  tschchartseriesdefaulterrorbarsetting_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsetting() const {
  return tschchartseriesdefaulterrorbarsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsetting() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
  return _internal_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  tschchartseriesdefaulterrorbarsetting_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarsetting(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
}

// optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsettingscatterx() {
  tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return tschchartseriesdefaulterrorbarsettingscatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsettingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
  return _internal_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  tschchartseriesdefaulterrorbarsettingscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
}

// optional int32 tschchartseriesdefaulterrorbartype = 172;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartype() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartype() const {
  return _internal_has_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartype() {
  tschchartseriesdefaulterrorbartype_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartype() const {
  return tschchartseriesdefaulterrorbartype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
  return _internal_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  tschchartseriesdefaulterrorbartype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbartype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
}

// optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartypescatterx() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartypescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartypescatterx() {
  tschchartseriesdefaulterrorbartypescatterx_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartypescatterx() const {
  return tschchartseriesdefaulterrorbartypescatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartypescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
  return _internal_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  tschchartseriesdefaulterrorbartypescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbartypescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
}

// optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvalue() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvalue() {
  tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvalue() const {
  return tschchartseriesdefaulterrorbarfixedvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
  return _internal_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _has_bits_[1] |= 0x00004000u;
  tschchartseriesdefaulterrorbarfixedvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
}

// optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return tschchartseriesdefaulterrorbarfixedvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _has_bits_[1] |= 0x00008000u;
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
}

// optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvalue() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvalue() {
  tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvalue() const {
  return tschchartseriesdefaulterrorbarpercentvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
  return _internal_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _has_bits_[1] |= 0x00010000u;
  tschchartseriesdefaulterrorbarpercentvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
}

// optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return tschchartseriesdefaulterrorbarpercentvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _has_bits_[1] |= 0x00020000u;
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
}

// optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvalue() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvalue() {
  tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvalue() const {
  return tschchartseriesdefaulterrorbarstddevvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
  return _internal_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _has_bits_[1] |= 0x00040000u;
  tschchartseriesdefaulterrorbarstddevvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
}

// optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return tschchartseriesdefaulterrorbarstddevvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _has_bits_[1] |= 0x00080000u;
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustompositivedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedata() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartseriesdefaulterrorbarcustompositivedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArena());
    tschchartseriesdefaulterrorbarcustompositivedata_ = p;
  }
  return tschchartseriesdefaulterrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArena());
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustomnegativedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArena());
    tschchartseriesdefaulterrorbarcustomnegativedata_ = p;
  }
  return tschchartseriesdefaulterrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArena());
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  // @@protoc_insertion_point(field_mutable:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx)->GetArena();
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}

// optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsetx() {
  tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return tschchartseriesdefaulttrendlineequationoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
  return _internal_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _has_bits_[1] |= 0x01000000u;
  tschchartseriesdefaulttrendlineequationoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
}

// optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsety() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsety() {
  tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsety() const {
  return tschchartseriesdefaulttrendlineequationoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
  return _internal_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _has_bits_[1] |= 0x02000000u;
  tschchartseriesdefaulttrendlineequationoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return tschchartseriesdefaulttrendlinersquaredoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _has_bits_[1] |= 0x04000000u;
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsety() {
  tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return tschchartseriesdefaulttrendlinersquaredoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _has_bits_[1] |= 0x08000000u;
  tschchartseriesdefaulttrendlinersquaredoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
}

// optional bool tschchartseriesdefaultshowtrendline = 198;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowtrendline() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowtrendline() const {
  return _internal_has_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowtrendline() {
  tschchartseriesdefaultshowtrendline_ = false;
  _has_bits_[1] &= ~0x00200000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowtrendline() const {
  return tschchartseriesdefaultshowtrendline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowtrendline() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
  return _internal_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowtrendline(bool value) {
  _has_bits_[1] |= 0x00200000u;
  tschchartseriesdefaultshowtrendline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowtrendline(bool value) {
  _internal_set_tschchartseriesdefaultshowtrendline(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
}

// optional bool tschchartseriesdefaultshowerrorbar = 199;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbar() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbar() const {
  return _internal_has_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbar() {
  tschchartseriesdefaultshowerrorbar_ = false;
  _has_bits_[1] &= ~0x00400000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbar() const {
  return tschchartseriesdefaultshowerrorbar_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbar() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
  return _internal_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbar(bool value) {
  _has_bits_[1] |= 0x00400000u;
  tschchartseriesdefaultshowerrorbar_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbar(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbar(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
}

// optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbarscatterx() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbarscatterx() const {
  return _internal_has_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbarscatterx() {
  tschchartseriesdefaultshowerrorbarscatterx_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbarscatterx() const {
  return tschchartseriesdefaultshowerrorbarscatterx_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbarscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
  return _internal_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _has_bits_[1] |= 0x00800000u;
  tschchartseriesdefaultshowerrorbarscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbarscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
}

// optional int32 tschchartseriesbubblesizedimension = 208;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblesizedimension() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblesizedimension() const {
  return _internal_has_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblesizedimension() {
  tschchartseriesbubblesizedimension_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblesizedimension() const {
  return tschchartseriesbubblesizedimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblesizedimension() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
  return _internal_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x10000000u;
  tschchartseriesbubblesizedimension_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblesizedimension(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
}

// optional bool tschchartseriesbubbleshowvaluelabels = 209;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowvaluelabels() const {
  return _internal_has_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowvaluelabels() {
  tschchartseriesbubbleshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowvaluelabels() const {
  return tschchartseriesbubbleshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
  return _internal_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x40000000u;
  tschchartseriesbubbleshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbubbleshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
}

// optional int32 tschchartseriesbubblelinetype = 210;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblelinetype() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblelinetype() const {
  return _internal_has_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblelinetype() {
  tschchartseriesbubblelinetype_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblelinetype() const {
  return tschchartseriesbubblelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
  return _internal_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x20000000u;
  tschchartseriesbubblelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
}

// optional bool tschchartseriesbubbleshownegativedata = 216;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshownegativedata() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshownegativedata() const {
  return _internal_has_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshownegativedata() {
  tschchartseriesbubbleshownegativedata_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshownegativedata() const {
  return tschchartseriesbubbleshownegativedata_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshownegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
  return _internal_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshownegativedata(bool value) {
  _has_bits_[1] |= 0x80000000u;
  tschchartseriesbubbleshownegativedata_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshownegativedata(bool value) {
  _internal_set_tschchartseriesbubbleshownegativedata(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
}

// optional float tschchartseriesbubbleadjustmentscale = 217;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleadjustmentscale() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleadjustmentscale() const {
  return _internal_has_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleadjustmentscale() {
  tschchartseriesbubbleadjustmentscale_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleadjustmentscale() const {
  return tschchartseriesbubbleadjustmentscale_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesbubbleadjustmentscale() const {
  // @@protoc_insertion_point(field_get:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
  return _internal_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleadjustmentscale(float value) {
  _has_bits_[2] |= 0x00000001u;
  tschchartseriesbubbleadjustmentscale_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleadjustmentscale(float value) {
  _internal_set_tschchartseriesbubbleadjustmentscale(value);
  // @@protoc_insertion_point(field_set:TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PreUFF
}  // namespace TSCH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHPreUFFArchives_2eproto
