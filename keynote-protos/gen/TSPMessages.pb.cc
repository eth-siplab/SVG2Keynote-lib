// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPMessages.proto

#include "TSPMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSP {
constexpr Reference::Reference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(PROTOBUF_ULONGLONG(0))
  , deprecated_type_(0)
  , deprecated_is_external_(false){}
struct ReferenceDefaultTypeInternal {
  constexpr ReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceDefaultTypeInternal _Reference_default_instance_;
constexpr DataReference::DataReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(PROTOBUF_ULONGLONG(0)){}
struct DataReferenceDefaultTypeInternal {
  constexpr DataReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataReferenceDefaultTypeInternal() {}
  union {
    DataReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataReferenceDefaultTypeInternal _DataReference_default_instance_;
constexpr SparseReferenceArray_Entry::SparseReferenceArray_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_(nullptr)
  , index_(0u){}
struct SparseReferenceArray_EntryDefaultTypeInternal {
  constexpr SparseReferenceArray_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseReferenceArray_EntryDefaultTypeInternal() {}
  union {
    SparseReferenceArray_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseReferenceArray_EntryDefaultTypeInternal _SparseReferenceArray_Entry_default_instance_;
constexpr SparseReferenceArray::SparseReferenceArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , count_(0u){}
struct SparseReferenceArrayDefaultTypeInternal {
  constexpr SparseReferenceArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseReferenceArrayDefaultTypeInternal() {}
  union {
    SparseReferenceArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseReferenceArrayDefaultTypeInternal _SparseReferenceArray_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Size::Size(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct SizeDefaultTypeInternal {
  constexpr SizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SizeDefaultTypeInternal _Size_default_instance_;
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(0u)
  , length_(0u){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr Date::Date(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(0){}
struct DateDefaultTypeInternal {
  constexpr DateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DateDefaultTypeInternal() {}
  union {
    Date _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DateDefaultTypeInternal _Date_default_instance_;
constexpr IndexSet::IndexSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranges_(){}
struct IndexSetDefaultTypeInternal {
  constexpr IndexSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexSetDefaultTypeInternal() {}
  union {
    IndexSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexSetDefaultTypeInternal _IndexSet_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , c_(0)
  , m_(0)
  , y_(0)
  , k_(0)
  , w_(0)
  , rgbspace_(1)

  , model_(1)

  , a_(1){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr Path_Element::Path_Element(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , type_(1)
{}
struct Path_ElementDefaultTypeInternal {
  constexpr Path_ElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Path_ElementDefaultTypeInternal() {}
  union {
    Path_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Path_ElementDefaultTypeInternal _Path_Element_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_(){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr ReferenceDictionary_Entry::ReferenceDictionary_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , value_(nullptr){}
struct ReferenceDictionary_EntryDefaultTypeInternal {
  constexpr ReferenceDictionary_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceDictionary_EntryDefaultTypeInternal() {}
  union {
    ReferenceDictionary_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceDictionary_EntryDefaultTypeInternal _ReferenceDictionary_Entry_default_instance_;
constexpr ReferenceDictionary::ReferenceDictionary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct ReferenceDictionaryDefaultTypeInternal {
  constexpr ReferenceDictionaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceDictionaryDefaultTypeInternal() {}
  union {
    ReferenceDictionary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceDictionaryDefaultTypeInternal _ReferenceDictionary_default_instance_;
constexpr UUID::UUID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lower_(PROTOBUF_ULONGLONG(0))
  , upper_(PROTOBUF_ULONGLONG(0)){}
struct UUIDDefaultTypeInternal {
  constexpr UUIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDDefaultTypeInternal() {}
  union {
    UUID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDDefaultTypeInternal _UUID_default_instance_;
constexpr CFUUIDArchive::CFUUIDArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_w0_(0u)
  , uuid_w1_(0u)
  , uuid_w2_(0u)
  , uuid_w3_(0u){}
struct CFUUIDArchiveDefaultTypeInternal {
  constexpr CFUUIDArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFUUIDArchiveDefaultTypeInternal() {}
  union {
    CFUUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFUUIDArchiveDefaultTypeInternal _CFUUIDArchive_default_instance_;
constexpr UUIDSetArchive::UUIDSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uids_(){}
struct UUIDSetArchiveDefaultTypeInternal {
  constexpr UUIDSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDSetArchiveDefaultTypeInternal() {}
  union {
    UUIDSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDSetArchiveDefaultTypeInternal _UUIDSetArchive_default_instance_;
constexpr UUIDMapArchive::UUIDMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_()
  , target_(){}
struct UUIDMapArchiveDefaultTypeInternal {
  constexpr UUIDMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDMapArchiveDefaultTypeInternal() {}
  union {
    UUIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDMapArchiveDefaultTypeInternal _UUIDMapArchive_default_instance_;
constexpr UUIDMultiMapArchive::UUIDMultiMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_()
  , target_(){}
struct UUIDMultiMapArchiveDefaultTypeInternal {
  constexpr UUIDMultiMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDMultiMapArchiveDefaultTypeInternal() {}
  union {
    UUIDMultiMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDMultiMapArchiveDefaultTypeInternal _UUIDMultiMapArchive_default_instance_;
constexpr UUIDCoordArchive::UUIDCoordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_uid_(nullptr)
  , column_uid_(nullptr){}
struct UUIDCoordArchiveDefaultTypeInternal {
  constexpr UUIDCoordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDCoordArchiveDefaultTypeInternal() {}
  union {
    UUIDCoordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDCoordArchiveDefaultTypeInternal _UUIDCoordArchive_default_instance_;
constexpr UUIDRectArchive::UUIDRectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uids_()
  , row_uids_(){}
struct UUIDRectArchiveDefaultTypeInternal {
  constexpr UUIDRectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDRectArchiveDefaultTypeInternal() {}
  union {
    UUIDRectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDRectArchiveDefaultTypeInternal _UUIDRectArchive_default_instance_;
constexpr SparseUUIDArray_Entry::SparseUUIDArray_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(nullptr)
  , index_(0u){}
struct SparseUUIDArray_EntryDefaultTypeInternal {
  constexpr SparseUUIDArray_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseUUIDArray_EntryDefaultTypeInternal() {}
  union {
    SparseUUIDArray_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseUUIDArray_EntryDefaultTypeInternal _SparseUUIDArray_Entry_default_instance_;
constexpr SparseUUIDArray::SparseUUIDArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , count_(0u){}
struct SparseUUIDArrayDefaultTypeInternal {
  constexpr SparseUUIDArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseUUIDArrayDefaultTypeInternal() {}
  union {
    SparseUUIDArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseUUIDArrayDefaultTypeInternal _SparseUUIDArray_default_instance_;
constexpr UUIDPath::UUIDPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuids_(){}
struct UUIDPathDefaultTypeInternal {
  constexpr UUIDPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDPathDefaultTypeInternal() {}
  union {
    UUIDPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDPathDefaultTypeInternal _UUIDPath_default_instance_;
constexpr SparseUUIDPathArray_Entry::SparseUUIDPathArray_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_path_(nullptr)
  , index_(0u){}
struct SparseUUIDPathArray_EntryDefaultTypeInternal {
  constexpr SparseUUIDPathArray_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseUUIDPathArray_EntryDefaultTypeInternal() {}
  union {
    SparseUUIDPathArray_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseUUIDPathArray_EntryDefaultTypeInternal _SparseUUIDPathArray_Entry_default_instance_;
constexpr SparseUUIDPathArray::SparseUUIDPathArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , count_(0u){}
struct SparseUUIDPathArrayDefaultTypeInternal {
  constexpr SparseUUIDPathArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseUUIDPathArrayDefaultTypeInternal() {}
  union {
    SparseUUIDPathArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseUUIDPathArrayDefaultTypeInternal _SparseUUIDPathArray_default_instance_;
constexpr PasteboardObject::PasteboardObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , styles_()
  , presets_()
  , top_level_objects_()
  , stylesheet_(nullptr)
  , wp_storage_(nullptr)
  , app_native_object_(nullptr)
  , guide_storage_(nullptr)
  , native_content_description_(nullptr)
  , is_text_primary_(false)
  , is_smart_(false){}
struct PasteboardObjectDefaultTypeInternal {
  constexpr PasteboardObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteboardObjectDefaultTypeInternal() {}
  union {
    PasteboardObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteboardObjectDefaultTypeInternal _PasteboardObject_default_instance_;
constexpr ObjectCollection::ObjectCollection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_(){}
struct ObjectCollectionDefaultTypeInternal {
  constexpr ObjectCollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectCollectionDefaultTypeInternal() {}
  union {
    ObjectCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectCollectionDefaultTypeInternal _ObjectCollection_default_instance_;
constexpr ObjectContainer::ObjectContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , identifier_(0u){}
struct ObjectContainerDefaultTypeInternal {
  constexpr ObjectContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectContainerDefaultTypeInternal() {}
  union {
    ObjectContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectContainerDefaultTypeInternal _ObjectContainer_default_instance_;
constexpr DataAttributes::DataAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DataAttributesDefaultTypeInternal {
  constexpr DataAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataAttributesDefaultTypeInternal() {}
  union {
    DataAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataAttributesDefaultTypeInternal _DataAttributes_default_instance_;
constexpr LargeArraySegment::LargeArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_locator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , should_delay_archiving_(false)
  , delayed_archiving_priority_(0u){}
struct LargeArraySegmentDefaultTypeInternal {
  constexpr LargeArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeArraySegmentDefaultTypeInternal() {}
  union {
    LargeArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeArraySegmentDefaultTypeInternal _LargeArraySegment_default_instance_;
constexpr LargeNumberArraySegment::LargeNumberArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct LargeNumberArraySegmentDefaultTypeInternal {
  constexpr LargeNumberArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeNumberArraySegmentDefaultTypeInternal() {}
  union {
    LargeNumberArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeNumberArraySegmentDefaultTypeInternal _LargeNumberArraySegment_default_instance_;
constexpr LargeStringArraySegment_OptionalElement::LargeStringArraySegment_OptionalElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LargeStringArraySegment_OptionalElementDefaultTypeInternal {
  constexpr LargeStringArraySegment_OptionalElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeStringArraySegment_OptionalElementDefaultTypeInternal() {}
  union {
    LargeStringArraySegment_OptionalElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeStringArraySegment_OptionalElementDefaultTypeInternal _LargeStringArraySegment_OptionalElement_default_instance_;
constexpr LargeStringArraySegment::LargeStringArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct LargeStringArraySegmentDefaultTypeInternal {
  constexpr LargeStringArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeStringArraySegmentDefaultTypeInternal() {}
  union {
    LargeStringArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeStringArraySegmentDefaultTypeInternal _LargeStringArraySegment_default_instance_;
constexpr LargeUUIDArraySegment::LargeUUIDArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct LargeUUIDArraySegmentDefaultTypeInternal {
  constexpr LargeUUIDArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeUUIDArraySegmentDefaultTypeInternal() {}
  union {
    LargeUUIDArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeUUIDArraySegmentDefaultTypeInternal _LargeUUIDArraySegment_default_instance_;
constexpr LargeLazyObjectArraySegment::LargeLazyObjectArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct LargeLazyObjectArraySegmentDefaultTypeInternal {
  constexpr LargeLazyObjectArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeLazyObjectArraySegmentDefaultTypeInternal() {}
  union {
    LargeLazyObjectArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeLazyObjectArraySegmentDefaultTypeInternal _LargeLazyObjectArraySegment_default_instance_;
constexpr LargeObjectArraySegment::LargeObjectArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct LargeObjectArraySegmentDefaultTypeInternal {
  constexpr LargeObjectArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeObjectArraySegmentDefaultTypeInternal() {}
  union {
    LargeObjectArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeObjectArraySegmentDefaultTypeInternal _LargeObjectArraySegment_default_instance_;
constexpr LargeArray::LargeArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranges_()
  , segments_()
  , max_segment_element_count_(PROTOBUF_ULONGLONG(0))
  , max_segment_size_(PROTOBUF_ULONGLONG(0))
  , delayed_archiving_priority_(0u)
  , should_delay_archiving_(false)
  , store_outside_object_archive_(false)
  , estimated_byte_size_(PROTOBUF_ULONGLONG(0)){}
struct LargeArrayDefaultTypeInternal {
  constexpr LargeArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeArrayDefaultTypeInternal() {}
  union {
    LargeArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeArrayDefaultTypeInternal _LargeArray_default_instance_;
constexpr LargeNumberArray::LargeNumberArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LargeNumberArrayDefaultTypeInternal {
  constexpr LargeNumberArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeNumberArrayDefaultTypeInternal() {}
  union {
    LargeNumberArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeNumberArrayDefaultTypeInternal _LargeNumberArray_default_instance_;
constexpr LargeStringArray::LargeStringArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LargeStringArrayDefaultTypeInternal {
  constexpr LargeStringArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeStringArrayDefaultTypeInternal() {}
  union {
    LargeStringArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeStringArrayDefaultTypeInternal _LargeStringArray_default_instance_;
constexpr LargeLazyObjectArray::LargeLazyObjectArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LargeLazyObjectArrayDefaultTypeInternal {
  constexpr LargeLazyObjectArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeLazyObjectArrayDefaultTypeInternal() {}
  union {
    LargeLazyObjectArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeLazyObjectArrayDefaultTypeInternal _LargeLazyObjectArray_default_instance_;
constexpr LargeObjectArray::LargeObjectArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LargeObjectArrayDefaultTypeInternal {
  constexpr LargeObjectArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeObjectArrayDefaultTypeInternal() {}
  union {
    LargeObjectArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeObjectArrayDefaultTypeInternal _LargeObjectArray_default_instance_;
constexpr LargeUUIDArray::LargeUUIDArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LargeUUIDArrayDefaultTypeInternal {
  constexpr LargeUUIDArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LargeUUIDArrayDefaultTypeInternal() {}
  union {
    LargeUUIDArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LargeUUIDArrayDefaultTypeInternal _LargeUUIDArray_default_instance_;
}  // namespace TSP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSPMessages_2eproto[43];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSPMessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSPMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSPMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSP::Reference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Reference, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::Reference, deprecated_type_),
  PROTOBUF_FIELD_OFFSET(::TSP::Reference, deprecated_is_external_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSP::DataReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::DataReference, identifier_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray_Entry, index_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray_Entry, reference_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray, count_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseReferenceArray, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Point, x_),
  PROTOBUF_FIELD_OFFSET(::TSP::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::Size, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Size, width_),
  PROTOBUF_FIELD_OFFSET(::TSP::Size, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::Range, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Range, location_),
  PROTOBUF_FIELD_OFFSET(::TSP::Range, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::Date, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Date, seconds_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::IndexSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::IndexSet, ranges_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Color, model_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, r_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, g_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, b_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, rgbspace_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, a_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, c_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, m_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, y_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, k_),
  PROTOBUF_FIELD_OFFSET(::TSP::Color, w_),
  9,
  0,
  1,
  2,
  8,
  10,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSP::Path_Element, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::Path_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Path_Element, type_),
  PROTOBUF_FIELD_OFFSET(::TSP::Path_Element, points_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::Path, elements_),
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary_Entry, key_),
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary_Entry, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ReferenceDictionary, entries_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUID, lower_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUID, upper_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, uuid_bytes_),
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, uuid_w0_),
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, uuid_w1_),
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, uuid_w2_),
  PROTOBUF_FIELD_OFFSET(::TSP::CFUUIDArchive, uuid_w3_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDSetArchive, uids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMapArchive, source_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMapArchive, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMultiMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMultiMapArchive, source_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDMultiMapArchive, target_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDCoordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDCoordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDCoordArchive, row_uid_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDCoordArchive, column_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDRectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDRectArchive, column_uids_),
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDRectArchive, row_uids_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray_Entry, index_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray_Entry, uuid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray, count_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDArray, entries_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::UUIDPath, uuids_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray_Entry, index_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray_Entry, uuid_path_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray, count_),
  PROTOBUF_FIELD_OFFSET(::TSP::SparseUUIDPathArray, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, drawables_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, styles_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, wp_storage_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, guide_storage_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, app_native_object_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, is_text_primary_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, is_smart_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, presets_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, top_level_objects_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardObject, native_content_description_),
  0,
  ~0u,
  ~0u,
  1,
  3,
  2,
  5,
  6,
  ~0u,
  ~0u,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectCollection, objects_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectContainer, identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ObjectContainer, objects_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::DataAttributes, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataAttributes, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArraySegment, should_delay_archiving_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArraySegment, delayed_archiving_priority_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArraySegment, package_locator_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment_OptionalElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment_OptionalElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment_OptionalElement, element_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, ranges_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, segments_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, max_segment_element_count_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, max_segment_size_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, should_delay_archiving_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, delayed_archiving_priority_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, store_outside_object_archive_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeArray, estimated_byte_size_),
  ~0u,
  ~0u,
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeNumberArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeStringArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeLazyObjectArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeObjectArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSP::LargeUUIDArray, large_array_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TSP::Reference)},
  { 11, 17, sizeof(::TSP::DataReference)},
  { 18, 25, sizeof(::TSP::SparseReferenceArray_Entry)},
  { 27, 34, sizeof(::TSP::SparseReferenceArray)},
  { 36, 43, sizeof(::TSP::Point)},
  { 45, 52, sizeof(::TSP::Size)},
  { 54, 61, sizeof(::TSP::Range)},
  { 63, 69, sizeof(::TSP::Date)},
  { 70, -1, sizeof(::TSP::IndexSet)},
  { 76, 92, sizeof(::TSP::Color)},
  { 103, 110, sizeof(::TSP::Path_Element)},
  { 112, -1, sizeof(::TSP::Path)},
  { 118, 125, sizeof(::TSP::ReferenceDictionary_Entry)},
  { 127, -1, sizeof(::TSP::ReferenceDictionary)},
  { 133, 140, sizeof(::TSP::UUID)},
  { 142, 152, sizeof(::TSP::CFUUIDArchive)},
  { 157, -1, sizeof(::TSP::UUIDSetArchive)},
  { 163, -1, sizeof(::TSP::UUIDMapArchive)},
  { 170, -1, sizeof(::TSP::UUIDMultiMapArchive)},
  { 177, 184, sizeof(::TSP::UUIDCoordArchive)},
  { 186, -1, sizeof(::TSP::UUIDRectArchive)},
  { 193, 200, sizeof(::TSP::SparseUUIDArray_Entry)},
  { 202, 209, sizeof(::TSP::SparseUUIDArray)},
  { 211, -1, sizeof(::TSP::UUIDPath)},
  { 217, 224, sizeof(::TSP::SparseUUIDPathArray_Entry)},
  { 226, 233, sizeof(::TSP::SparseUUIDPathArray)},
  { 235, 251, sizeof(::TSP::PasteboardObject)},
  { 262, -1, sizeof(::TSP::ObjectCollection)},
  { 268, 275, sizeof(::TSP::ObjectContainer)},
  { 277, -1, sizeof(::TSP::DataAttributes)},
  { 282, 290, sizeof(::TSP::LargeArraySegment)},
  { 293, 300, sizeof(::TSP::LargeNumberArraySegment)},
  { 302, 308, sizeof(::TSP::LargeStringArraySegment_OptionalElement)},
  { 309, 316, sizeof(::TSP::LargeStringArraySegment)},
  { 318, 325, sizeof(::TSP::LargeUUIDArraySegment)},
  { 327, 334, sizeof(::TSP::LargeLazyObjectArraySegment)},
  { 336, 343, sizeof(::TSP::LargeObjectArraySegment)},
  { 345, 358, sizeof(::TSP::LargeArray)},
  { 366, 372, sizeof(::TSP::LargeNumberArray)},
  { 373, 379, sizeof(::TSP::LargeStringArray)},
  { 380, 386, sizeof(::TSP::LargeLazyObjectArray)},
  { 387, 393, sizeof(::TSP::LargeObjectArray)},
  { 394, 400, sizeof(::TSP::LargeUUIDArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseReferenceArray_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseReferenceArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_IndexSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Path_Element_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ReferenceDictionary_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ReferenceDictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_CFUUIDArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDMultiMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDCoordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDRectArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseUUIDArray_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseUUIDArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_UUIDPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseUUIDPathArray_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_SparseUUIDPathArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_PasteboardObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_ObjectContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_DataAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeNumberArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeStringArraySegment_OptionalElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeStringArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeUUIDArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeLazyObjectArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeObjectArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeNumberArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeStringArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeLazyObjectArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeObjectArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSP::_LargeUUIDArray_default_instance_),
};

const char descriptor_table_protodef_TSPMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSPMessages.proto\022\003TSP\"X\n\tReference\022\022\n"
  "\nidentifier\030\001 \002(\004\022\027\n\017deprecated_type\030\002 \001"
  "(\005\022\036\n\026deprecated_is_external\030\003 \001(\010\"#\n\rDa"
  "taReference\022\022\n\nidentifier\030\001 \002(\004\"\222\001\n\024Spar"
  "seReferenceArray\022\r\n\005count\030\001 \002(\r\0220\n\007entri"
  "es\030\002 \003(\0132\037.TSP.SparseReferenceArray.Entr"
  "y\0329\n\005Entry\022\r\n\005index\030\001 \002(\r\022!\n\treference\030\002"
  " \002(\0132\016.TSP.Reference\"\035\n\005Point\022\t\n\001x\030\001 \002(\002"
  "\022\t\n\001y\030\002 \002(\002\"%\n\004Size\022\r\n\005width\030\001 \002(\002\022\016\n\006he"
  "ight\030\002 \002(\002\")\n\005Range\022\020\n\010location\030\001 \002(\r\022\016\n"
  "\006length\030\002 \002(\r\"\027\n\004Date\022\017\n\007seconds\030\001 \002(\001\"&"
  "\n\010IndexSet\022\032\n\006ranges\030\001 \003(\0132\n.TSP.Range\"\216"
  "\002\n\005Color\022$\n\005model\030\001 \002(\0162\025.TSP.Color.Colo"
  "rModel\022\t\n\001r\030\003 \001(\002\022\t\n\001g\030\004 \001(\002\022\t\n\001b\030\005 \001(\002\022"
  "*\n\010rgbspace\030\014 \001(\0162\030.TSP.Color.RGBColorSp"
  "ace\022\014\n\001a\030\006 \001(\002:\0011\022\t\n\001c\030\007 \001(\002\022\t\n\001m\030\010 \001(\002\022"
  "\t\n\001y\030\t \001(\002\022\t\n\001k\030\n \001(\002\022\t\n\001w\030\013 \001(\002\"*\n\nColo"
  "rModel\022\007\n\003rgb\020\001\022\010\n\004cmyk\020\002\022\t\n\005white\020\003\"!\n\r"
  "RGBColorSpace\022\010\n\004srgb\020\001\022\006\n\002p3\020\002\"\316\001\n\004Path"
  "\022#\n\010elements\030\001 \003(\0132\021.TSP.Path.Element\032J\n"
  "\007Element\022#\n\004type\030\001 \002(\0162\025.TSP.Path.Elemen"
  "tType\022\032\n\006points\030\002 \003(\0132\n.TSP.Point\"U\n\013Ele"
  "mentType\022\n\n\006moveTo\020\001\022\n\n\006lineTo\020\002\022\017\n\013quad"
  "CurveTo\020\003\022\013\n\007curveTo\020\004\022\020\n\014closeSubpath\020\005"
  "\"\213\001\n\023ReferenceDictionary\022/\n\007entries\030\001 \003("
  "\0132\036.TSP.ReferenceDictionary.Entry\032C\n\005Ent"
  "ry\022\033\n\003key\030\001 \002(\0132\016.TSP.Reference\022\035\n\005value"
  "\030\002 \002(\0132\016.TSP.Reference\"$\n\004UUID\022\r\n\005lower\030"
  "\001 \002(\004\022\r\n\005upper\030\002 \002(\004\"g\n\rCFUUIDArchive\022\022\n"
  "\nuuid_bytes\030\001 \001(\014\022\017\n\007uuid_w0\030\002 \001(\r\022\017\n\007uu"
  "id_w1\030\003 \001(\r\022\017\n\007uuid_w2\030\004 \001(\r\022\017\n\007uuid_w3\030"
  "\005 \001(\r\")\n\016UUIDSetArchive\022\027\n\004uids\030\001 \003(\0132\t."
  "TSP.UUID\"F\n\016UUIDMapArchive\022\031\n\006source\030\001 \003"
  "(\0132\t.TSP.UUID\022\031\n\006target\030\002 \003(\0132\t.TSP.UUID"
  "\"K\n\023UUIDMultiMapArchive\022\031\n\006source\030\001 \003(\0132"
  "\t.TSP.UUID\022\031\n\006target\030\002 \003(\0132\t.TSP.UUID\"M\n"
  "\020UUIDCoordArchive\022\032\n\007row_uid\030\001 \002(\0132\t.TSP"
  ".UUID\022\035\n\ncolumn_uid\030\002 \002(\0132\t.TSP.UUID\"N\n\017"
  "UUIDRectArchive\022\036\n\013column_uids\030\001 \003(\0132\t.T"
  "SP.UUID\022\033\n\010row_uids\030\002 \003(\0132\t.TSP.UUID\"~\n\017"
  "SparseUUIDArray\022\r\n\005count\030\001 \002(\r\022+\n\007entrie"
  "s\030\002 \003(\0132\032.TSP.SparseUUIDArray.Entry\032/\n\005E"
  "ntry\022\r\n\005index\030\001 \002(\r\022\027\n\004uuid\030\002 \002(\0132\t.TSP."
  "UUID\"$\n\010UUIDPath\022\030\n\005uuids\030\001 \003(\0132\t.TSP.UU"
  "ID\"\217\001\n\023SparseUUIDPathArray\022\r\n\005count\030\001 \002("
  "\r\022/\n\007entries\030\002 \003(\0132\036.TSP.SparseUUIDPathA"
  "rray.Entry\0328\n\005Entry\022\r\n\005index\030\001 \002(\r\022 \n\tuu"
  "id_path\030\002 \002(\0132\r.TSP.UUIDPath\"\250\003\n\020Pastebo"
  "ardObject\022\"\n\nstylesheet\030\001 \001(\0132\016.TSP.Refe"
  "rence\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Reference"
  "\022\036\n\006styles\030\003 \003(\0132\016.TSP.Reference\022\"\n\nwp_s"
  "torage\030\005 \001(\0132\016.TSP.Reference\022%\n\rguide_st"
  "orage\030\t \001(\0132\016.TSP.Reference\022)\n\021app_nativ"
  "e_object\030\006 \001(\0132\016.TSP.Reference\022\036\n\017is_tex"
  "t_primary\030\007 \001(\010:\005false\022\027\n\010is_smart\030\010 \001(\010"
  ":\005false\022\037\n\007presets\030\n \003(\0132\016.TSP.Reference"
  "\022)\n\021top_level_objects\030\013 \003(\0132\016.TSP.Refere"
  "nce\0222\n\032native_content_description\030\014 \001(\0132"
  "\016.TSP.Reference\"3\n\020ObjectCollection\022\037\n\007o"
  "bjects\030\001 \003(\0132\016.TSP.Reference\"F\n\017ObjectCo"
  "ntainer\022\022\n\nidentifier\030\001 \001(\r\022\037\n\007objects\030\002"
  " \003(\0132\016.TSP.Reference\"\032\n\016DataAttributes*\010"
  "\010d\020\200\200\200\200\002\"p\n\021LargeArraySegment\022\036\n\026should_"
  "delay_archiving\030\001 \001(\010\022\"\n\032delayed_archivi"
  "ng_priority\030\002 \001(\r\022\027\n\017package_locator\030\003 \001"
  "(\t\"`\n\027LargeNumberArraySegment\0223\n\023large_a"
  "rray_segment\030\001 \001(\0132\026.TSP.LargeArraySegme"
  "nt\022\020\n\010elements\030\002 \003(\001\"\262\001\n\027LargeStringArra"
  "ySegment\0223\n\023large_array_segment\030\001 \001(\0132\026."
  "TSP.LargeArraySegment\022>\n\010elements\030\002 \003(\0132"
  ",.TSP.LargeStringArraySegment.OptionalEl"
  "ement\032\"\n\017OptionalElement\022\017\n\007element\030\001 \001("
  "\t\"i\n\025LargeUUIDArraySegment\0223\n\023large_arra"
  "y_segment\030\001 \001(\0132\026.TSP.LargeArraySegment\022"
  "\033\n\010elements\030\002 \003(\0132\t.TSP.UUID\"t\n\033LargeLaz"
  "yObjectArraySegment\0223\n\023large_array_segme"
  "nt\030\001 \001(\0132\026.TSP.LargeArraySegment\022 \n\010elem"
  "ents\030\002 \003(\0132\016.TSP.Reference\"p\n\027LargeObjec"
  "tArraySegment\0223\n\023large_array_segment\030\001 \001"
  "(\0132\026.TSP.LargeArraySegment\022 \n\010elements\030\002"
  " \003(\0132\016.TSP.Reference\"\216\002\n\nLargeArray\022\032\n\006r"
  "anges\030\001 \003(\0132\n.TSP.Range\022 \n\010segments\030\002 \003("
  "\0132\016.TSP.Reference\022!\n\031max_segment_element"
  "_count\030\003 \001(\004\022\030\n\020max_segment_size\030\004 \001(\004\022\036"
  "\n\026should_delay_archiving\030\005 \001(\010\022\"\n\032delaye"
  "d_archiving_priority\030\006 \001(\r\022$\n\034store_outs"
  "ide_object_archive\030\007 \001(\010\022\033\n\023estimated_by"
  "te_size\030\010 \001(\004\"8\n\020LargeNumberArray\022$\n\013lar"
  "ge_array\030\001 \001(\0132\017.TSP.LargeArray\"8\n\020Large"
  "StringArray\022$\n\013large_array\030\001 \001(\0132\017.TSP.L"
  "argeArray\"<\n\024LargeLazyObjectArray\022$\n\013lar"
  "ge_array\030\001 \001(\0132\017.TSP.LargeArray\"8\n\020Large"
  "ObjectArray\022$\n\013large_array\030\001 \001(\0132\017.TSP.L"
  "argeArray\"6\n\016LargeUUIDArray\022$\n\013large_arr"
  "ay\030\001 \001(\0132\017.TSP.LargeArray*\354\001\n\020DataUpload"
  "Status\022\034\n\030DataUploadStatus_Pending\020\000\022\035\n\031"
  "DataUploadStatus_Reserved\020\001\022$\n DataUploa"
  "dStatus_UnableToReserve\020\002\022\036\n\032DataUploadS"
  "tatus_Corrupted\020\003\0227\n3DataUploadStatus_Do"
  "cumentMayExceedDocumentSizeLimit\020\004\022\034\n\030Da"
  "taUploadStatus_Expired\020\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSPMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSPMessages_2eproto = {
  false, false, 4024, descriptor_table_protodef_TSPMessages_2eproto, "TSPMessages.proto", 
  &descriptor_table_TSPMessages_2eproto_once, nullptr, 0, 43,
  schemas, file_default_instances, TableStruct_TSPMessages_2eproto::offsets,
  file_level_metadata_TSPMessages_2eproto, file_level_enum_descriptors_TSPMessages_2eproto, file_level_service_descriptors_TSPMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSPMessages_2eproto_getter() {
  return &descriptor_table_TSPMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSPMessages_2eproto(&descriptor_table_TSPMessages_2eproto);
namespace TSP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_ColorModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPMessages_2eproto);
  return file_level_enum_descriptors_TSPMessages_2eproto[0];
}
bool Color_ColorModel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Color_ColorModel Color::rgb;
constexpr Color_ColorModel Color::cmyk;
constexpr Color_ColorModel Color::white;
constexpr Color_ColorModel Color::ColorModel_MIN;
constexpr Color_ColorModel Color::ColorModel_MAX;
constexpr int Color::ColorModel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_RGBColorSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPMessages_2eproto);
  return file_level_enum_descriptors_TSPMessages_2eproto[1];
}
bool Color_RGBColorSpace_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Color_RGBColorSpace Color::srgb;
constexpr Color_RGBColorSpace Color::p3;
constexpr Color_RGBColorSpace Color::RGBColorSpace_MIN;
constexpr Color_RGBColorSpace Color::RGBColorSpace_MAX;
constexpr int Color::RGBColorSpace_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Path_ElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPMessages_2eproto);
  return file_level_enum_descriptors_TSPMessages_2eproto[2];
}
bool Path_ElementType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Path_ElementType Path::moveTo;
constexpr Path_ElementType Path::lineTo;
constexpr Path_ElementType Path::quadCurveTo;
constexpr Path_ElementType Path::curveTo;
constexpr Path_ElementType Path::closeSubpath;
constexpr Path_ElementType Path::ElementType_MIN;
constexpr Path_ElementType Path::ElementType_MAX;
constexpr int Path::ElementType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataUploadStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPMessages_2eproto);
  return file_level_enum_descriptors_TSPMessages_2eproto[3];
}
bool DataUploadStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Reference::_Internal {
 public:
  using HasBits = decltype(std::declval<Reference>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_is_external(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_is_external_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(deprecated_is_external_));
  // @@protoc_insertion_point(copy_constructor:TSP.Reference)
}

void Reference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_is_external_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(deprecated_is_external_));
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:TSP.Reference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_is_external_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(deprecated_is_external_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deprecated_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deprecated_type(&has_bits);
          deprecated_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deprecated_is_external = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deprecated_is_external(&has_bits);
          deprecated_is_external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // optional int32 deprecated_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deprecated_type(), target);
  }

  // optional bool deprecated_is_external = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_deprecated_is_external(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Reference)
  size_t total_size = 0;

  // required uint64 identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 deprecated_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deprecated_type());
    }

    // optional bool deprecated_is_external = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      deprecated_type_ = from.deprecated_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      deprecated_is_external_ = from.deprecated_is_external_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reference, deprecated_is_external_)
      + sizeof(Reference::deprecated_is_external_)
      - PROTOBUF_FIELD_OFFSET(Reference, identifier_)>(
          reinterpret_cast<char*>(&identifier_),
          reinterpret_cast<char*>(&other->identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[0]);
}

// ===================================================================

class DataReference::_Internal {
 public:
  using HasBits = decltype(std::declval<DataReference>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DataReference::DataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataReference)
}
DataReference::DataReference(const DataReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.DataReference)
}

void DataReference::SharedCtor() {
identifier_ = PROTOBUF_ULONGLONG(0);
}

DataReference::~DataReference() {
  // @@protoc_insertion_point(destructor:TSP.DataReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataReference::ArenaDtor(void* object) {
  DataReference* _this = reinterpret_cast< DataReference* >(object);
  (void)_this;
}
void DataReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataReference)
  return target;
}

size_t DataReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataReference)
  size_t total_size = 0;

  // required uint64 identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataReference)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataReference)
    MergeFrom(*source);
  }
}

void DataReference::MergeFrom(const DataReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void DataReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReference::CopyFrom(const DataReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataReference::InternalSwap(DataReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(identifier_, other->identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[1]);
}

// ===================================================================

class SparseReferenceArray_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseReferenceArray_Entry>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& reference(const SparseReferenceArray_Entry* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SparseReferenceArray_Entry::_Internal::reference(const SparseReferenceArray_Entry* msg) {
  return *msg->reference_;
}
SparseReferenceArray_Entry::SparseReferenceArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseReferenceArray.Entry)
}
SparseReferenceArray_Entry::SparseReferenceArray_Entry(const SparseReferenceArray_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    reference_ = new ::TSP::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseReferenceArray.Entry)
}

void SparseReferenceArray_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(index_));
}

SparseReferenceArray_Entry::~SparseReferenceArray_Entry() {
  // @@protoc_insertion_point(destructor:TSP.SparseReferenceArray.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseReferenceArray_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_;
}

void SparseReferenceArray_Entry::ArenaDtor(void* object) {
  SparseReferenceArray_Entry* _this = reinterpret_cast< SparseReferenceArray_Entry* >(object);
  (void)_this;
}
void SparseReferenceArray_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseReferenceArray_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseReferenceArray_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseReferenceArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reference_ != nullptr);
    reference_->Clear();
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseReferenceArray_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseReferenceArray_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseReferenceArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required .TSP.Reference reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseReferenceArray.Entry)
  return target;
}

size_t SparseReferenceArray_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.SparseReferenceArray.Entry)
  size_t total_size = 0;

  if (_internal_has_reference()) {
    // required .TSP.Reference reference = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t SparseReferenceArray_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseReferenceArray.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference reference = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);

    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseReferenceArray_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseReferenceArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseReferenceArray_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseReferenceArray_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseReferenceArray.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseReferenceArray.Entry)
    MergeFrom(*source);
  }
}

void SparseReferenceArray_Entry::MergeFrom(const SparseReferenceArray_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseReferenceArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reference()->::TSP::Reference::MergeFrom(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseReferenceArray_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseReferenceArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseReferenceArray_Entry::CopyFrom(const SparseReferenceArray_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseReferenceArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseReferenceArray_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_reference()) {
    if (!reference_->IsInitialized()) return false;
  }
  return true;
}

void SparseReferenceArray_Entry::InternalSwap(SparseReferenceArray_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseReferenceArray_Entry, index_)
      + sizeof(SparseReferenceArray_Entry::index_)
      - PROTOBUF_FIELD_OFFSET(SparseReferenceArray_Entry, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseReferenceArray_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[2]);
}

// ===================================================================

class SparseReferenceArray::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseReferenceArray>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SparseReferenceArray::SparseReferenceArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseReferenceArray)
}
SparseReferenceArray::SparseReferenceArray(const SparseReferenceArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseReferenceArray)
}

void SparseReferenceArray::SharedCtor() {
count_ = 0u;
}

SparseReferenceArray::~SparseReferenceArray() {
  // @@protoc_insertion_point(destructor:TSP.SparseReferenceArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseReferenceArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SparseReferenceArray::ArenaDtor(void* object) {
  SparseReferenceArray* _this = reinterpret_cast< SparseReferenceArray* >(object);
  (void)_this;
}
void SparseReferenceArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseReferenceArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseReferenceArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseReferenceArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseReferenceArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.SparseReferenceArray.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseReferenceArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseReferenceArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .TSP.SparseReferenceArray.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseReferenceArray)
  return target;
}

size_t SparseReferenceArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseReferenceArray)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (_internal_has_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.SparseReferenceArray.Entry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseReferenceArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseReferenceArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseReferenceArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseReferenceArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseReferenceArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseReferenceArray)
    MergeFrom(*source);
  }
}

void SparseReferenceArray::MergeFrom(const SparseReferenceArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseReferenceArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void SparseReferenceArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseReferenceArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseReferenceArray::CopyFrom(const SparseReferenceArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseReferenceArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseReferenceArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void SparseReferenceArray::InternalSwap(SparseReferenceArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseReferenceArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[3]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:TSP.Point)
}

void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:TSP.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Point)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[4]);
}

// ===================================================================

class Size::_Internal {
 public:
  using HasBits = decltype(std::declval<Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:TSP.Size)
}

void Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:TSP.Size)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Size::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // required float height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Size)
  return target;
}

size_t Size::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.Size)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required float width = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Size)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float width = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Size)
  GOOGLE_DCHECK_NE(&from, this);
  const Size* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Size>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Size)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Size)
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Size::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[5]);
}

// ===================================================================

class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._has_bits_);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&location_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:TSP.Range)
}

void Range::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&location_)) + sizeof(length_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:TSP.Range)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&location_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_location(&has_bits);
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_location(), target);
  }

  // required uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Range)
  return target;
}

size_t Range::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.Range)
  size_t total_size = 0;

  if (_internal_has_location()) {
    // required uint32 location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_location());
  }

  if (_internal_has_length()) {
    // required uint32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  return total_size;
}
size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Range)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_location());

    // required uint32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, length_)
      + sizeof(Range::length_)
      - PROTOBUF_FIELD_OFFSET(Range, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[6]);
}

// ===================================================================

class Date::_Internal {
 public:
  using HasBits = decltype(std::declval<Date>()._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_ = from.seconds_;
  // @@protoc_insertion_point(copy_constructor:TSP.Date)
}

void Date::SharedCtor() {
seconds_ = 0;
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:TSP.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Date::ArenaDtor(void* object) {
  Date* _this = reinterpret_cast< Date* >(object);
  (void)_this;
}
void Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Date)
  size_t total_size = 0;

  // required double seconds = 1;
  if (_internal_has_seconds()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seconds()) {
    _internal_set_seconds(from._internal_seconds());
  }
}

void Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seconds_, other->seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[7]);
}

// ===================================================================

class IndexSet::_Internal {
 public:
};

IndexSet::IndexSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.IndexSet)
}
IndexSet::IndexSet(const IndexSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.IndexSet)
}

void IndexSet::SharedCtor() {
}

IndexSet::~IndexSet() {
  // @@protoc_insertion_point(destructor:TSP.IndexSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexSet::ArenaDtor(void* object) {
  IndexSet* _this = reinterpret_cast< IndexSet* >(object);
  (void)_this;
}
void IndexSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexSet::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.IndexSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Range ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.IndexSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Range ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.IndexSet)
  return target;
}

size_t IndexSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.IndexSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Range ranges = 1;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.IndexSet)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.IndexSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.IndexSet)
    MergeFrom(*source);
  }
}

void IndexSet::MergeFrom(const IndexSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.IndexSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
}

void IndexSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.IndexSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSet::CopyFrom(const IndexSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.IndexSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ranges_)) return false;
  return true;
}

void IndexSet::InternalSwap(IndexSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[8]);
}

// ===================================================================

class Color::_Internal {
 public:
  using HasBits = decltype(std::declval<Color>()._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rgbspace(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:TSP.Color)
}

void Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&r_)) + sizeof(w_));
rgbspace_ = 1;
model_ = 1;
a_ = 1;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:TSP.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&r_)) + sizeof(w_));
  }
  if (cached_has_bits & 0x00000700u) {
    rgbspace_ = 1;
    model_ = 1;
    a_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Color.ColorModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::Color_ColorModel_IsValid(val))) {
            _internal_set_model(static_cast<::TSP::Color_ColorModel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float a = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float c = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_m(&has_bits);
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float k = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float w = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color.RGBColorSpace rgbspace = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::Color_RGBColorSpace_IsValid(val))) {
            _internal_set_rgbspace(static_cast<::TSP::Color_RGBColorSpace>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Color.ColorModel model = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // optional float r = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_r(), target);
  }

  // optional float g = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_g(), target);
  }

  // optional float b = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_b(), target);
  }

  // optional float a = 6 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_a(), target);
  }

  // optional float c = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_c(), target);
  }

  // optional float m = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m(), target);
  }

  // optional float y = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_y(), target);
  }

  // optional float k = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_k(), target);
  }

  // optional float w = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_w(), target);
  }

  // optional .TSP.Color.RGBColorSpace rgbspace = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_rgbspace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Color)
  size_t total_size = 0;

  // required .TSP.Color.ColorModel model = 1;
  if (_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float r = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float g = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float c = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float m = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float y = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float k = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float w = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional .TSP.Color.RGBColorSpace rgbspace = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rgbspace());
  }

  // optional float a = 6 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_ = from.m_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      k_ = from.k_;
    }
    if (cached_has_bits & 0x00000080u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      rgbspace_ = from.rgbspace_;
    }
    if (cached_has_bits & 0x00000200u) {
      model_ = from.model_;
    }
    if (cached_has_bits & 0x00000400u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, w_)
      + sizeof(Color::w_)
      - PROTOBUF_FIELD_OFFSET(Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
  swap(rgbspace_, other->rgbspace_);
  swap(model_, other->model_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[9]);
}

// ===================================================================

class Path_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<Path_Element>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Path_Element::Path_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Path.Element)
}
Path_Element::Path_Element(const Path_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TSP.Path.Element)
}

void Path_Element::SharedCtor() {
type_ = 1;
}

Path_Element::~Path_Element() {
  // @@protoc_insertion_point(destructor:TSP.Path.Element)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Path_Element::ArenaDtor(void* object) {
  Path_Element* _this = reinterpret_cast< Path_Element* >(object);
  (void)_this;
}
void Path_Element::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path_Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Path.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path_Element::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Path.ElementType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::Path_ElementType_IsValid(val))) {
            _internal_set_type(static_cast<::TSP::Path_ElementType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Point points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path_Element::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Path.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Path.ElementType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TSP.Point points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Path.Element)
  return target;
}

size_t Path_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Path.Element)
  size_t total_size = 0;

  // required .TSP.Path.ElementType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Point points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path_Element::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Path.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const Path_Element* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path_Element>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Path.Element)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Path.Element)
    MergeFrom(*source);
  }
}

void Path_Element::MergeFrom(const Path_Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Path.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void Path_Element::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Path.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path_Element::CopyFrom(const Path_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Path.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path_Element::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void Path_Element::InternalSwap(Path_Element* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path_Element::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[10]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:TSP.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Path.Element elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Path.Element elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Path.Element elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[11]);
}

// ===================================================================

class ReferenceDictionary_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceDictionary_Entry>()._has_bits_);
  static const ::TSP::Reference& key(const ReferenceDictionary_Entry* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& value(const ReferenceDictionary_Entry* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
ReferenceDictionary_Entry::_Internal::key(const ReferenceDictionary_Entry* msg) {
  return *msg->key_;
}
const ::TSP::Reference&
ReferenceDictionary_Entry::_Internal::value(const ReferenceDictionary_Entry* msg) {
  return *msg->value_;
}
ReferenceDictionary_Entry::ReferenceDictionary_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ReferenceDictionary.Entry)
}
ReferenceDictionary_Entry::ReferenceDictionary_Entry(const ReferenceDictionary_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::TSP::Reference(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::TSP::Reference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ReferenceDictionary.Entry)
}

void ReferenceDictionary_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

ReferenceDictionary_Entry::~ReferenceDictionary_Entry() {
  // @@protoc_insertion_point(destructor:TSP.ReferenceDictionary.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceDictionary_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void ReferenceDictionary_Entry::ArenaDtor(void* object) {
  ReferenceDictionary_Entry* _this = reinterpret_cast< ReferenceDictionary_Entry* >(object);
  (void)_this;
}
void ReferenceDictionary_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceDictionary_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceDictionary_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ReferenceDictionary.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceDictionary_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceDictionary_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ReferenceDictionary.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // required .TSP.Reference value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ReferenceDictionary.Entry)
  return target;
}

size_t ReferenceDictionary_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ReferenceDictionary.Entry)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required .TSP.Reference key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (_internal_has_value()) {
    // required .TSP.Reference value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t ReferenceDictionary_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ReferenceDictionary.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);

    // required .TSP.Reference value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceDictionary_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ReferenceDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceDictionary_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceDictionary_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ReferenceDictionary.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ReferenceDictionary.Entry)
    MergeFrom(*source);
  }
}

void ReferenceDictionary_Entry::MergeFrom(const ReferenceDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ReferenceDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key()->::TSP::Reference::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::TSP::Reference::MergeFrom(from._internal_value());
    }
  }
}

void ReferenceDictionary_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ReferenceDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceDictionary_Entry::CopyFrom(const ReferenceDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ReferenceDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceDictionary_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_key()) {
    if (!key_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceDictionary_Entry::InternalSwap(ReferenceDictionary_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceDictionary_Entry, value_)
      + sizeof(ReferenceDictionary_Entry::value_)
      - PROTOBUF_FIELD_OFFSET(ReferenceDictionary_Entry, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceDictionary_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[12]);
}

// ===================================================================

class ReferenceDictionary::_Internal {
 public:
};

ReferenceDictionary::ReferenceDictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ReferenceDictionary)
}
ReferenceDictionary::ReferenceDictionary(const ReferenceDictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.ReferenceDictionary)
}

void ReferenceDictionary::SharedCtor() {
}

ReferenceDictionary::~ReferenceDictionary() {
  // @@protoc_insertion_point(destructor:TSP.ReferenceDictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceDictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReferenceDictionary::ArenaDtor(void* object) {
  ReferenceDictionary* _this = reinterpret_cast< ReferenceDictionary* >(object);
  (void)_this;
}
void ReferenceDictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceDictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceDictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ReferenceDictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceDictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.ReferenceDictionary.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceDictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ReferenceDictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ReferenceDictionary)
  return target;
}

size_t ReferenceDictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ReferenceDictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceDictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ReferenceDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceDictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceDictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ReferenceDictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ReferenceDictionary)
    MergeFrom(*source);
  }
}

void ReferenceDictionary::MergeFrom(const ReferenceDictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ReferenceDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void ReferenceDictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ReferenceDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceDictionary::CopyFrom(const ReferenceDictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ReferenceDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceDictionary::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void ReferenceDictionary::InternalSwap(ReferenceDictionary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceDictionary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[13]);
}

// ===================================================================

class UUID::_Internal {
 public:
  using HasBits = decltype(std::declval<UUID>()._has_bits_);
  static void set_has_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UUID::UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUID)
}
UUID::UUID(const UUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lower_, &from.lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  // @@protoc_insertion_point(copy_constructor:TSP.UUID)
}

void UUID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lower_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
}

UUID::~UUID() {
  // @@protoc_insertion_point(destructor:TSP.UUID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUID::ArenaDtor(void* object) {
  UUID* _this = reinterpret_cast< UUID* >(object);
  (void)_this;
}
void UUID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upper_) -
        reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 lower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lower(&has_bits);
          lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 upper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_upper(&has_bits);
          upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 lower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lower(), target);
  }

  // required uint64 upper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUID)
  return target;
}

size_t UUID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.UUID)
  size_t total_size = 0;

  if (_internal_has_lower()) {
    // required uint64 lower = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lower());
  }

  if (_internal_has_upper()) {
    // required uint64 upper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upper());
  }

  return total_size;
}
size_t UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUID)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 lower = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lower());

    // required uint64 upper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_upper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  const UUID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUID)
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lower_ = from.lower_;
    }
    if (cached_has_bits & 0x00000002u) {
      upper_ = from.upper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UUID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UUID::InternalSwap(UUID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UUID, upper_)
      + sizeof(UUID::upper_)
      - PROTOBUF_FIELD_OFFSET(UUID, lower_)>(
          reinterpret_cast<char*>(&lower_),
          reinterpret_cast<char*>(&other->lower_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UUID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[14]);
}

// ===================================================================

class CFUUIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CFUUIDArchive>()._has_bits_);
  static void set_has_uuid_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid_w0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid_w1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uuid_w2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uuid_w3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CFUUIDArchive::CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.CFUUIDArchive)
}
CFUUIDArchive::CFUUIDArchive(const CFUUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid_bytes()) {
    uuid_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid_bytes(), 
      GetArena());
  }
  ::memcpy(&uuid_w0_, &from.uuid_w0_,
    static_cast<size_t>(reinterpret_cast<char*>(&uuid_w3_) -
    reinterpret_cast<char*>(&uuid_w0_)) + sizeof(uuid_w3_));
  // @@protoc_insertion_point(copy_constructor:TSP.CFUUIDArchive)
}

void CFUUIDArchive::SharedCtor() {
uuid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_w0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_w3_) -
    reinterpret_cast<char*>(&uuid_w0_)) + sizeof(uuid_w3_));
}

CFUUIDArchive::~CFUUIDArchive() {
  // @@protoc_insertion_point(destructor:TSP.CFUUIDArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CFUUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFUUIDArchive::ArenaDtor(void* object) {
  CFUUIDArchive* _this = reinterpret_cast< CFUUIDArchive* >(object);
  (void)_this;
}
void CFUUIDArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFUUIDArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFUUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.CFUUIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uuid_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uuid_w0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uuid_w3_) -
        reinterpret_cast<char*>(&uuid_w0_)) + sizeof(uuid_w3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFUUIDArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes uuid_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uuid_w0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uuid_w0(&has_bits);
          uuid_w0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uuid_w1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uuid_w1(&has_bits);
          uuid_w1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uuid_w2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uuid_w2(&has_bits);
          uuid_w2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uuid_w3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uuid_w3(&has_bits);
          uuid_w3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFUUIDArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.CFUUIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes uuid_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid_bytes(), target);
  }

  // optional uint32 uuid_w0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uuid_w0(), target);
  }

  // optional uint32 uuid_w1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uuid_w1(), target);
  }

  // optional uint32 uuid_w2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uuid_w2(), target);
  }

  // optional uint32 uuid_w3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uuid_w3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.CFUUIDArchive)
  return target;
}

size_t CFUUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.CFUUIDArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes uuid_bytes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid_bytes());
    }

    // optional uint32 uuid_w0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uuid_w0());
    }

    // optional uint32 uuid_w1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uuid_w1());
    }

    // optional uint32 uuid_w2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uuid_w2());
    }

    // optional uint32 uuid_w3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uuid_w3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFUUIDArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.CFUUIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CFUUIDArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFUUIDArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.CFUUIDArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.CFUUIDArchive)
    MergeFrom(*source);
  }
}

void CFUUIDArchive::MergeFrom(const CFUUIDArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.CFUUIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid_bytes(from._internal_uuid_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_w0_ = from.uuid_w0_;
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_w1_ = from.uuid_w1_;
    }
    if (cached_has_bits & 0x00000008u) {
      uuid_w2_ = from.uuid_w2_;
    }
    if (cached_has_bits & 0x00000010u) {
      uuid_w3_ = from.uuid_w3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CFUUIDArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.CFUUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFUUIDArchive::CopyFrom(const CFUUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.CFUUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFUUIDArchive::IsInitialized() const {
  return true;
}

void CFUUIDArchive::InternalSwap(CFUUIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_bytes_.Swap(&other->uuid_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFUUIDArchive, uuid_w3_)
      + sizeof(CFUUIDArchive::uuid_w3_)
      - PROTOBUF_FIELD_OFFSET(CFUUIDArchive, uuid_w0_)>(
          reinterpret_cast<char*>(&uuid_w0_),
          reinterpret_cast<char*>(&other->uuid_w0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFUUIDArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[15]);
}

// ===================================================================

class UUIDSetArchive::_Internal {
 public:
};

UUIDSetArchive::UUIDSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDSetArchive)
}
UUIDSetArchive::UUIDSetArchive(const UUIDSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDSetArchive)
}

void UUIDSetArchive::SharedCtor() {
}

UUIDSetArchive::~UUIDSetArchive() {
  // @@protoc_insertion_point(destructor:TSP.UUIDSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUIDSetArchive::ArenaDtor(void* object) {
  UUIDSetArchive* _this = reinterpret_cast< UUIDSetArchive* >(object);
  (void)_this;
}
void UUIDSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDSetArchive)
  return target;
}

size_t UUIDSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 1;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDSetArchive)
    MergeFrom(*source);
  }
}

void UUIDSetArchive::MergeFrom(const UUIDSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void UUIDSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDSetArchive::CopyFrom(const UUIDSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_)) return false;
  return true;
}

void UUIDSetArchive::InternalSwap(UUIDSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[16]);
}

// ===================================================================

class UUIDMapArchive::_Internal {
 public:
};

UUIDMapArchive::UUIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_(arena),
  target_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDMapArchive)
}
UUIDMapArchive::UUIDMapArchive(const UUIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_(from.source_),
      target_(from.target_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDMapArchive)
}

void UUIDMapArchive::SharedCtor() {
}

UUIDMapArchive::~UUIDMapArchive() {
  // @@protoc_insertion_point(destructor:TSP.UUIDMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUIDMapArchive::ArenaDtor(void* object) {
  UUIDMapArchive* _this = reinterpret_cast< UUIDMapArchive* >(object);
  (void)_this;
}
void UUIDMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.Clear();
  target_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID source = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_source(i), target, stream);
  }

  // repeated .TSP.UUID target = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_target(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDMapArchive)
  return target;
}

size_t UUIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID source = 1;
  total_size += 1UL * this->_internal_source_size();
  for (const auto& msg : this->source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID target = 2;
  total_size += 1UL * this->_internal_target_size();
  for (const auto& msg : this->target_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDMapArchive)
    MergeFrom(*source);
  }
}

void UUIDMapArchive::MergeFrom(const UUIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_.MergeFrom(from.source_);
  target_.MergeFrom(from.target_);
}

void UUIDMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDMapArchive::CopyFrom(const UUIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(source_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(target_)) return false;
  return true;
}

void UUIDMapArchive::InternalSwap(UUIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  source_.InternalSwap(&other->source_);
  target_.InternalSwap(&other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[17]);
}

// ===================================================================

class UUIDMultiMapArchive::_Internal {
 public:
};

UUIDMultiMapArchive::UUIDMultiMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_(arena),
  target_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDMultiMapArchive)
}
UUIDMultiMapArchive::UUIDMultiMapArchive(const UUIDMultiMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_(from.source_),
      target_(from.target_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDMultiMapArchive)
}

void UUIDMultiMapArchive::SharedCtor() {
}

UUIDMultiMapArchive::~UUIDMultiMapArchive() {
  // @@protoc_insertion_point(destructor:TSP.UUIDMultiMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDMultiMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUIDMultiMapArchive::ArenaDtor(void* object) {
  UUIDMultiMapArchive* _this = reinterpret_cast< UUIDMultiMapArchive* >(object);
  (void)_this;
}
void UUIDMultiMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDMultiMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDMultiMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDMultiMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.Clear();
  target_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDMultiMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDMultiMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDMultiMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID source = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_source(i), target, stream);
  }

  // repeated .TSP.UUID target = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_target(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDMultiMapArchive)
  return target;
}

size_t UUIDMultiMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDMultiMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID source = 1;
  total_size += 1UL * this->_internal_source_size();
  for (const auto& msg : this->source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID target = 2;
  total_size += 1UL * this->_internal_target_size();
  for (const auto& msg : this->target_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDMultiMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDMultiMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDMultiMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDMultiMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDMultiMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDMultiMapArchive)
    MergeFrom(*source);
  }
}

void UUIDMultiMapArchive::MergeFrom(const UUIDMultiMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDMultiMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_.MergeFrom(from.source_);
  target_.MergeFrom(from.target_);
}

void UUIDMultiMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDMultiMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDMultiMapArchive::CopyFrom(const UUIDMultiMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDMultiMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDMultiMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(source_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(target_)) return false;
  return true;
}

void UUIDMultiMapArchive::InternalSwap(UUIDMultiMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  source_.InternalSwap(&other->source_);
  target_.InternalSwap(&other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDMultiMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[18]);
}

// ===================================================================

class UUIDCoordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UUIDCoordArchive>()._has_bits_);
  static const ::TSP::UUID& row_uid(const UUIDCoordArchive* msg);
  static void set_has_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& column_uid(const UUIDCoordArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
UUIDCoordArchive::_Internal::row_uid(const UUIDCoordArchive* msg) {
  return *msg->row_uid_;
}
const ::TSP::UUID&
UUIDCoordArchive::_Internal::column_uid(const UUIDCoordArchive* msg) {
  return *msg->column_uid_;
}
UUIDCoordArchive::UUIDCoordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDCoordArchive)
}
UUIDCoordArchive::UUIDCoordArchive(const UUIDCoordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row_uid()) {
    row_uid_ = new ::TSP::UUID(*from.row_uid_);
  } else {
    row_uid_ = nullptr;
  }
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDCoordArchive)
}

void UUIDCoordArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_uid_) -
    reinterpret_cast<char*>(&row_uid_)) + sizeof(column_uid_));
}

UUIDCoordArchive::~UUIDCoordArchive() {
  // @@protoc_insertion_point(destructor:TSP.UUIDCoordArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDCoordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete row_uid_;
  if (this != internal_default_instance()) delete column_uid_;
}

void UUIDCoordArchive::ArenaDtor(void* object) {
  UUIDCoordArchive* _this = reinterpret_cast< UUIDCoordArchive* >(object);
  (void)_this;
}
void UUIDCoordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDCoordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDCoordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDCoordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(row_uid_ != nullptr);
      row_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDCoordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID row_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID column_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDCoordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDCoordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID row_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::row_uid(this), target, stream);
  }

  // required .TSP.UUID column_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::column_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDCoordArchive)
  return target;
}

size_t UUIDCoordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.UUIDCoordArchive)
  size_t total_size = 0;

  if (_internal_has_row_uid()) {
    // required .TSP.UUID row_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uid_);
  }

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  return total_size;
}
size_t UUIDCoordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDCoordArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID row_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uid_);

    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDCoordArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDCoordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDCoordArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDCoordArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDCoordArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDCoordArchive)
    MergeFrom(*source);
  }
}

void UUIDCoordArchive::MergeFrom(const UUIDCoordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDCoordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_row_uid()->::TSP::UUID::MergeFrom(from._internal_row_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
  }
}

void UUIDCoordArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDCoordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDCoordArchive::CopyFrom(const UUIDCoordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDCoordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDCoordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_row_uid()) {
    if (!row_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  return true;
}

void UUIDCoordArchive::InternalSwap(UUIDCoordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UUIDCoordArchive, column_uid_)
      + sizeof(UUIDCoordArchive::column_uid_)
      - PROTOBUF_FIELD_OFFSET(UUIDCoordArchive, row_uid_)>(
          reinterpret_cast<char*>(&row_uid_),
          reinterpret_cast<char*>(&other->row_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDCoordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[19]);
}

// ===================================================================

class UUIDRectArchive::_Internal {
 public:
};

UUIDRectArchive::UUIDRectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_uids_(arena),
  row_uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDRectArchive)
}
UUIDRectArchive::UUIDRectArchive(const UUIDRectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_uids_(from.column_uids_),
      row_uids_(from.row_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDRectArchive)
}

void UUIDRectArchive::SharedCtor() {
}

UUIDRectArchive::~UUIDRectArchive() {
  // @@protoc_insertion_point(destructor:TSP.UUIDRectArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDRectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUIDRectArchive::ArenaDtor(void* object) {
  UUIDRectArchive* _this = reinterpret_cast< UUIDRectArchive* >(object);
  (void)_this;
}
void UUIDRectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDRectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDRectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDRectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_uids_.Clear();
  row_uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDRectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID column_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDRectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDRectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID column_uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_column_uids(i), target, stream);
  }

  // repeated .TSP.UUID row_uids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_row_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDRectArchive)
  return target;
}

size_t UUIDRectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDRectArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID column_uids = 1;
  total_size += 1UL * this->_internal_column_uids_size();
  for (const auto& msg : this->column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID row_uids = 2;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDRectArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDRectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDRectArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDRectArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDRectArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDRectArchive)
    MergeFrom(*source);
  }
}

void UUIDRectArchive::MergeFrom(const UUIDRectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDRectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_uids_.MergeFrom(from.column_uids_);
  row_uids_.MergeFrom(from.row_uids_);
}

void UUIDRectArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDRectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDRectArchive::CopyFrom(const UUIDRectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDRectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDRectArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_uids_)) return false;
  return true;
}

void UUIDRectArchive::InternalSwap(UUIDRectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_uids_.InternalSwap(&other->column_uids_);
  row_uids_.InternalSwap(&other->row_uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDRectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[20]);
}

// ===================================================================

class SparseUUIDArray_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseUUIDArray_Entry>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const SparseUUIDArray_Entry* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
SparseUUIDArray_Entry::_Internal::uuid(const SparseUUIDArray_Entry* msg) {
  return *msg->uuid_;
}
SparseUUIDArray_Entry::SparseUUIDArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseUUIDArray.Entry)
}
SparseUUIDArray_Entry::SparseUUIDArray_Entry(const SparseUUIDArray_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseUUIDArray.Entry)
}

void SparseUUIDArray_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(index_));
}

SparseUUIDArray_Entry::~SparseUUIDArray_Entry() {
  // @@protoc_insertion_point(destructor:TSP.SparseUUIDArray.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseUUIDArray_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
}

void SparseUUIDArray_Entry::ArenaDtor(void* object) {
  SparseUUIDArray_Entry* _this = reinterpret_cast< SparseUUIDArray_Entry* >(object);
  (void)_this;
}
void SparseUUIDArray_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseUUIDArray_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseUUIDArray_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseUUIDArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uuid_ != nullptr);
    uuid_->Clear();
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseUUIDArray_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseUUIDArray_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseUUIDArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required .TSP.UUID uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseUUIDArray.Entry)
  return target;
}

size_t SparseUUIDArray_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.SparseUUIDArray.Entry)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t SparseUUIDArray_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseUUIDArray.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseUUIDArray_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseUUIDArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseUUIDArray_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseUUIDArray_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseUUIDArray.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseUUIDArray.Entry)
    MergeFrom(*source);
  }
}

void SparseUUIDArray_Entry::MergeFrom(const SparseUUIDArray_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseUUIDArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseUUIDArray_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseUUIDArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseUUIDArray_Entry::CopyFrom(const SparseUUIDArray_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseUUIDArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseUUIDArray_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void SparseUUIDArray_Entry::InternalSwap(SparseUUIDArray_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseUUIDArray_Entry, index_)
      + sizeof(SparseUUIDArray_Entry::index_)
      - PROTOBUF_FIELD_OFFSET(SparseUUIDArray_Entry, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseUUIDArray_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[21]);
}

// ===================================================================

class SparseUUIDArray::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseUUIDArray>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SparseUUIDArray::SparseUUIDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseUUIDArray)
}
SparseUUIDArray::SparseUUIDArray(const SparseUUIDArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseUUIDArray)
}

void SparseUUIDArray::SharedCtor() {
count_ = 0u;
}

SparseUUIDArray::~SparseUUIDArray() {
  // @@protoc_insertion_point(destructor:TSP.SparseUUIDArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseUUIDArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SparseUUIDArray::ArenaDtor(void* object) {
  SparseUUIDArray* _this = reinterpret_cast< SparseUUIDArray* >(object);
  (void)_this;
}
void SparseUUIDArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseUUIDArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseUUIDArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseUUIDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseUUIDArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.SparseUUIDArray.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseUUIDArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseUUIDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .TSP.SparseUUIDArray.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseUUIDArray)
  return target;
}

size_t SparseUUIDArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseUUIDArray)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (_internal_has_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.SparseUUIDArray.Entry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseUUIDArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseUUIDArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseUUIDArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseUUIDArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseUUIDArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseUUIDArray)
    MergeFrom(*source);
  }
}

void SparseUUIDArray::MergeFrom(const SparseUUIDArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseUUIDArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void SparseUUIDArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseUUIDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseUUIDArray::CopyFrom(const SparseUUIDArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseUUIDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseUUIDArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void SparseUUIDArray::InternalSwap(SparseUUIDArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseUUIDArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[22]);
}

// ===================================================================

class UUIDPath::_Internal {
 public:
};

UUIDPath::UUIDPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.UUIDPath)
}
UUIDPath::UUIDPath(const UUIDPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuids_(from.uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.UUIDPath)
}

void UUIDPath::SharedCtor() {
}

UUIDPath::~UUIDPath() {
  // @@protoc_insertion_point(destructor:TSP.UUIDPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UUIDPath::ArenaDtor(void* object) {
  UUIDPath* _this = reinterpret_cast< UUIDPath* >(object);
  (void)_this;
}
void UUIDPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDPath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.UUIDPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.UUIDPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.UUIDPath)
  return target;
}

size_t UUIDPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.UUIDPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.UUIDPath)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.UUIDPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.UUIDPath)
    MergeFrom(*source);
  }
}

void UUIDPath::MergeFrom(const UUIDPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.UUIDPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
}

void UUIDPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.UUIDPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDPath::CopyFrom(const UUIDPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.UUIDPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDPath::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuids_)) return false;
  return true;
}

void UUIDPath::InternalSwap(UUIDPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[23]);
}

// ===================================================================

class SparseUUIDPathArray_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseUUIDPathArray_Entry>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& uuid_path(const SparseUUIDPathArray_Entry* msg);
  static void set_has_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUIDPath&
SparseUUIDPathArray_Entry::_Internal::uuid_path(const SparseUUIDPathArray_Entry* msg) {
  return *msg->uuid_path_;
}
SparseUUIDPathArray_Entry::SparseUUIDPathArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseUUIDPathArray.Entry)
}
SparseUUIDPathArray_Entry::SparseUUIDPathArray_Entry(const SparseUUIDPathArray_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid_path()) {
    uuid_path_ = new ::TSP::UUIDPath(*from.uuid_path_);
  } else {
    uuid_path_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseUUIDPathArray.Entry)
}

void SparseUUIDPathArray_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&uuid_path_)) + sizeof(index_));
}

SparseUUIDPathArray_Entry::~SparseUUIDPathArray_Entry() {
  // @@protoc_insertion_point(destructor:TSP.SparseUUIDPathArray.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseUUIDPathArray_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_path_;
}

void SparseUUIDPathArray_Entry::ArenaDtor(void* object) {
  SparseUUIDPathArray_Entry* _this = reinterpret_cast< SparseUUIDPathArray_Entry* >(object);
  (void)_this;
}
void SparseUUIDPathArray_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseUUIDPathArray_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseUUIDPathArray_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseUUIDPathArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uuid_path_ != nullptr);
    uuid_path_->Clear();
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseUUIDPathArray_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseUUIDPathArray_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseUUIDPathArray.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required .TSP.UUIDPath uuid_path = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseUUIDPathArray.Entry)
  return target;
}

size_t SparseUUIDPathArray_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.SparseUUIDPathArray.Entry)
  size_t total_size = 0;

  if (_internal_has_uuid_path()) {
    // required .TSP.UUIDPath uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_path_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t SparseUUIDPathArray_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseUUIDPathArray.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUIDPath uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_path_);

    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseUUIDPathArray_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseUUIDPathArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseUUIDPathArray_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseUUIDPathArray_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseUUIDPathArray.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseUUIDPathArray.Entry)
    MergeFrom(*source);
  }
}

void SparseUUIDPathArray_Entry::MergeFrom(const SparseUUIDPathArray_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseUUIDPathArray.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_uuid_path());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseUUIDPathArray_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseUUIDPathArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseUUIDPathArray_Entry::CopyFrom(const SparseUUIDPathArray_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseUUIDPathArray.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseUUIDPathArray_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid_path()) {
    if (!uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void SparseUUIDPathArray_Entry::InternalSwap(SparseUUIDPathArray_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseUUIDPathArray_Entry, index_)
      + sizeof(SparseUUIDPathArray_Entry::index_)
      - PROTOBUF_FIELD_OFFSET(SparseUUIDPathArray_Entry, uuid_path_)>(
          reinterpret_cast<char*>(&uuid_path_),
          reinterpret_cast<char*>(&other->uuid_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseUUIDPathArray_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[24]);
}

// ===================================================================

class SparseUUIDPathArray::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseUUIDPathArray>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SparseUUIDPathArray::SparseUUIDPathArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.SparseUUIDPathArray)
}
SparseUUIDPathArray::SparseUUIDPathArray(const SparseUUIDPathArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:TSP.SparseUUIDPathArray)
}

void SparseUUIDPathArray::SharedCtor() {
count_ = 0u;
}

SparseUUIDPathArray::~SparseUUIDPathArray() {
  // @@protoc_insertion_point(destructor:TSP.SparseUUIDPathArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SparseUUIDPathArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SparseUUIDPathArray::ArenaDtor(void* object) {
  SparseUUIDPathArray* _this = reinterpret_cast< SparseUUIDPathArray* >(object);
  (void)_this;
}
void SparseUUIDPathArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseUUIDPathArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseUUIDPathArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.SparseUUIDPathArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseUUIDPathArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.SparseUUIDPathArray.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseUUIDPathArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.SparseUUIDPathArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .TSP.SparseUUIDPathArray.Entry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.SparseUUIDPathArray)
  return target;
}

size_t SparseUUIDPathArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.SparseUUIDPathArray)
  size_t total_size = 0;

  // required uint32 count = 1;
  if (_internal_has_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.SparseUUIDPathArray.Entry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseUUIDPathArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.SparseUUIDPathArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseUUIDPathArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseUUIDPathArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.SparseUUIDPathArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.SparseUUIDPathArray)
    MergeFrom(*source);
  }
}

void SparseUUIDPathArray::MergeFrom(const SparseUUIDPathArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.SparseUUIDPathArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void SparseUUIDPathArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.SparseUUIDPathArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseUUIDPathArray::CopyFrom(const SparseUUIDPathArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.SparseUUIDPathArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseUUIDPathArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void SparseUUIDPathArray::InternalSwap(SparseUUIDPathArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseUUIDPathArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[25]);
}

// ===================================================================

class PasteboardObject::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardObject>()._has_bits_);
  static const ::TSP::Reference& stylesheet(const PasteboardObject* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& wp_storage(const PasteboardObject* msg);
  static void set_has_wp_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& guide_storage(const PasteboardObject* msg);
  static void set_has_guide_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& app_native_object(const PasteboardObject* msg);
  static void set_has_app_native_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_text_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_smart(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& native_content_description(const PasteboardObject* msg);
  static void set_has_native_content_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
PasteboardObject::_Internal::stylesheet(const PasteboardObject* msg) {
  return *msg->stylesheet_;
}
const ::TSP::Reference&
PasteboardObject::_Internal::wp_storage(const PasteboardObject* msg) {
  return *msg->wp_storage_;
}
const ::TSP::Reference&
PasteboardObject::_Internal::guide_storage(const PasteboardObject* msg) {
  return *msg->guide_storage_;
}
const ::TSP::Reference&
PasteboardObject::_Internal::app_native_object(const PasteboardObject* msg) {
  return *msg->app_native_object_;
}
const ::TSP::Reference&
PasteboardObject::_Internal::native_content_description(const PasteboardObject* msg) {
  return *msg->native_content_description_;
}
PasteboardObject::PasteboardObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena),
  styles_(arena),
  presets_(arena),
  top_level_objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.PasteboardObject)
}
PasteboardObject::PasteboardObject(const PasteboardObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_),
      styles_(from.styles_),
      presets_(from.presets_),
      top_level_objects_(from.top_level_objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stylesheet()) {
    stylesheet_ = new ::TSP::Reference(*from.stylesheet_);
  } else {
    stylesheet_ = nullptr;
  }
  if (from._internal_has_wp_storage()) {
    wp_storage_ = new ::TSP::Reference(*from.wp_storage_);
  } else {
    wp_storage_ = nullptr;
  }
  if (from._internal_has_app_native_object()) {
    app_native_object_ = new ::TSP::Reference(*from.app_native_object_);
  } else {
    app_native_object_ = nullptr;
  }
  if (from._internal_has_guide_storage()) {
    guide_storage_ = new ::TSP::Reference(*from.guide_storage_);
  } else {
    guide_storage_ = nullptr;
  }
  if (from._internal_has_native_content_description()) {
    native_content_description_ = new ::TSP::Reference(*from.native_content_description_);
  } else {
    native_content_description_ = nullptr;
  }
  ::memcpy(&is_text_primary_, &from.is_text_primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_smart_) -
    reinterpret_cast<char*>(&is_text_primary_)) + sizeof(is_smart_));
  // @@protoc_insertion_point(copy_constructor:TSP.PasteboardObject)
}

void PasteboardObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stylesheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_smart_) -
    reinterpret_cast<char*>(&stylesheet_)) + sizeof(is_smart_));
}

PasteboardObject::~PasteboardObject() {
  // @@protoc_insertion_point(destructor:TSP.PasteboardObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PasteboardObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stylesheet_;
  if (this != internal_default_instance()) delete wp_storage_;
  if (this != internal_default_instance()) delete app_native_object_;
  if (this != internal_default_instance()) delete guide_storage_;
  if (this != internal_default_instance()) delete native_content_description_;
}

void PasteboardObject::ArenaDtor(void* object) {
  PasteboardObject* _this = reinterpret_cast< PasteboardObject* >(object);
  (void)_this;
}
void PasteboardObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteboardObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteboardObject::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PasteboardObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  styles_.Clear();
  presets_.Clear();
  top_level_objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stylesheet_ != nullptr);
      stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wp_storage_ != nullptr);
      wp_storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(app_native_object_ != nullptr);
      app_native_object_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(guide_storage_ != nullptr);
      guide_storage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(native_content_description_ != nullptr);
      native_content_description_->Clear();
    }
  }
  ::memset(&is_text_primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_smart_) -
      reinterpret_cast<char*>(&is_text_primary_)) + sizeof(is_smart_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference stylesheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference wp_storage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wp_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference app_native_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_native_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_text_primary = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_text_primary(&has_bits);
          is_text_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_smart = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_smart(&has_bits);
          is_smart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference guide_storage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_guide_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference presets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference top_level_objects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_level_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference native_content_description = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_native_content_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteboardObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PasteboardObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference stylesheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stylesheet(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drawables(i), target, stream);
  }

  // repeated .TSP.Reference styles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_styles(i), target, stream);
  }

  // optional .TSP.Reference wp_storage = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wp_storage(this), target, stream);
  }

  // optional .TSP.Reference app_native_object = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::app_native_object(this), target, stream);
  }

  // optional bool is_text_primary = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_text_primary(), target);
  }

  // optional bool is_smart = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_smart(), target);
  }

  // optional .TSP.Reference guide_storage = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::guide_storage(this), target, stream);
  }

  // repeated .TSP.Reference presets = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_presets(i), target, stream);
  }

  // repeated .TSP.Reference top_level_objects = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_level_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_top_level_objects(i), target, stream);
  }

  // optional .TSP.Reference native_content_description = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::native_content_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PasteboardObject)
  return target;
}

size_t PasteboardObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PasteboardObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference styles = 3;
  total_size += 1UL * this->_internal_styles_size();
  for (const auto& msg : this->styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference presets = 10;
  total_size += 1UL * this->_internal_presets_size();
  for (const auto& msg : this->presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference top_level_objects = 11;
  total_size += 1UL * this->_internal_top_level_objects_size();
  for (const auto& msg : this->top_level_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Reference stylesheet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stylesheet_);
    }

    // optional .TSP.Reference wp_storage = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wp_storage_);
    }

    // optional .TSP.Reference app_native_object = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_native_object_);
    }

    // optional .TSP.Reference guide_storage = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guide_storage_);
    }

    // optional .TSP.Reference native_content_description = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_content_description_);
    }

    // optional bool is_text_primary = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_smart = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasteboardObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.PasteboardObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PasteboardObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasteboardObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.PasteboardObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.PasteboardObject)
    MergeFrom(*source);
  }
}

void PasteboardObject::MergeFrom(const PasteboardObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.PasteboardObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  styles_.MergeFrom(from.styles_);
  presets_.MergeFrom(from.presets_);
  top_level_objects_.MergeFrom(from.top_level_objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_wp_storage()->::TSP::Reference::MergeFrom(from._internal_wp_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_app_native_object()->::TSP::Reference::MergeFrom(from._internal_app_native_object());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_guide_storage()->::TSP::Reference::MergeFrom(from._internal_guide_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_native_content_description()->::TSP::Reference::MergeFrom(from._internal_native_content_description());
    }
    if (cached_has_bits & 0x00000020u) {
      is_text_primary_ = from.is_text_primary_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_smart_ = from.is_smart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PasteboardObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.PasteboardObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteboardObject::CopyFrom(const PasteboardObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PasteboardObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardObject::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(top_level_objects_)) return false;
  if (_internal_has_stylesheet()) {
    if (!stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_wp_storage()) {
    if (!wp_storage_->IsInitialized()) return false;
  }
  if (_internal_has_app_native_object()) {
    if (!app_native_object_->IsInitialized()) return false;
  }
  if (_internal_has_guide_storage()) {
    if (!guide_storage_->IsInitialized()) return false;
  }
  if (_internal_has_native_content_description()) {
    if (!native_content_description_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardObject::InternalSwap(PasteboardObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  styles_.InternalSwap(&other->styles_);
  presets_.InternalSwap(&other->presets_);
  top_level_objects_.InternalSwap(&other->top_level_objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardObject, is_smart_)
      + sizeof(PasteboardObject::is_smart_)
      - PROTOBUF_FIELD_OFFSET(PasteboardObject, stylesheet_)>(
          reinterpret_cast<char*>(&stylesheet_),
          reinterpret_cast<char*>(&other->stylesheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[26]);
}

// ===================================================================

class ObjectCollection::_Internal {
 public:
};

ObjectCollection::ObjectCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectCollection)
}
ObjectCollection::ObjectCollection(const ObjectCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectCollection)
}

void ObjectCollection::SharedCtor() {
}

ObjectCollection::~ObjectCollection() {
  // @@protoc_insertion_point(destructor:TSP.ObjectCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectCollection::ArenaDtor(void* object) {
  ObjectCollection* _this = reinterpret_cast< ObjectCollection* >(object);
  (void)_this;
}
void ObjectCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectCollection)
  return target;
}

size_t ObjectCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectCollection)
    MergeFrom(*source);
  }
}

void ObjectCollection::MergeFrom(const ObjectCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void ObjectCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectCollection::CopyFrom(const ObjectCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectCollection::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(objects_)) return false;
  return true;
}

void ObjectCollection::InternalSwap(ObjectCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectCollection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[27]);
}

// ===================================================================

class ObjectContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectContainer>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectContainer::ObjectContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.ObjectContainer)
}
ObjectContainer::ObjectContainer(const ObjectContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_ = from.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ObjectContainer)
}

void ObjectContainer::SharedCtor() {
identifier_ = 0u;
}

ObjectContainer::~ObjectContainer() {
  // @@protoc_insertion_point(destructor:TSP.ObjectContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectContainer::ArenaDtor(void* object) {
  ObjectContainer* _this = reinterpret_cast< ObjectContainer* >(object);
  (void)_this;
}
void ObjectContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ObjectContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  identifier_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ObjectContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_identifier(), target);
  }

  // repeated .TSP.Reference objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ObjectContainer)
  return target;
}

size_t ObjectContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ObjectContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 identifier = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.ObjectContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.ObjectContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.ObjectContainer)
    MergeFrom(*source);
  }
}

void ObjectContainer::MergeFrom(const ObjectContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.ObjectContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void ObjectContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.ObjectContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectContainer::CopyFrom(const ObjectContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ObjectContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectContainer::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(objects_)) return false;
  return true;
}

void ObjectContainer::InternalSwap(ObjectContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  swap(identifier_, other->identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[28]);
}

// ===================================================================

class DataAttributes::_Internal {
 public:
};

DataAttributes::DataAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.DataAttributes)
}
DataAttributes::DataAttributes(const DataAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:TSP.DataAttributes)
}

void DataAttributes::SharedCtor() {
}

DataAttributes::~DataAttributes() {
  // @@protoc_insertion_point(destructor:TSP.DataAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataAttributes::ArenaDtor(void* object) {
  DataAttributes* _this = reinterpret_cast< DataAttributes* >(object);
  (void)_this;
}
void DataAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataAttributes)
  return target;
}

size_t DataAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataAttributes)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.DataAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const DataAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.DataAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.DataAttributes)
    MergeFrom(*source);
  }
}

void DataAttributes::MergeFrom(const DataAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DataAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.DataAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataAttributes::CopyFrom(const DataAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataAttributes::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void DataAttributes::InternalSwap(DataAttributes* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[29]);
}

// ===================================================================

class LargeArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeArraySegment>()._has_bits_);
  static void set_has_should_delay_archiving(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delayed_archiving_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LargeArraySegment::LargeArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeArraySegment)
}
LargeArraySegment::LargeArraySegment(const LargeArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_package_locator()) {
    package_locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_package_locator(), 
      GetArena());
  }
  ::memcpy(&should_delay_archiving_, &from.should_delay_archiving_,
    static_cast<size_t>(reinterpret_cast<char*>(&delayed_archiving_priority_) -
    reinterpret_cast<char*>(&should_delay_archiving_)) + sizeof(delayed_archiving_priority_));
  // @@protoc_insertion_point(copy_constructor:TSP.LargeArraySegment)
}

void LargeArraySegment::SharedCtor() {
package_locator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&should_delay_archiving_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delayed_archiving_priority_) -
    reinterpret_cast<char*>(&should_delay_archiving_)) + sizeof(delayed_archiving_priority_));
}

LargeArraySegment::~LargeArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  package_locator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LargeArraySegment::ArenaDtor(void* object) {
  LargeArraySegment* _this = reinterpret_cast< LargeArraySegment* >(object);
  (void)_this;
}
void LargeArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_locator_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&should_delay_archiving_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delayed_archiving_priority_) -
        reinterpret_cast<char*>(&should_delay_archiving_)) + sizeof(delayed_archiving_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool should_delay_archiving = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_should_delay_archiving(&has_bits);
          should_delay_archiving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delayed_archiving_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delayed_archiving_priority(&has_bits);
          delayed_archiving_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_package_locator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.LargeArraySegment.package_locator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_delay_archiving = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_should_delay_archiving(), target);
  }

  // optional uint32 delayed_archiving_priority = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_delayed_archiving_priority(), target);
  }

  // optional string package_locator = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package_locator().data(), static_cast<int>(this->_internal_package_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.LargeArraySegment.package_locator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_package_locator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeArraySegment)
  return target;
}

size_t LargeArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string package_locator = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_locator());
    }

    // optional bool should_delay_archiving = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 delayed_archiving_priority = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayed_archiving_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeArraySegment)
    MergeFrom(*source);
  }
}

void LargeArraySegment::MergeFrom(const LargeArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_package_locator(from._internal_package_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      should_delay_archiving_ = from.should_delay_archiving_;
    }
    if (cached_has_bits & 0x00000004u) {
      delayed_archiving_priority_ = from.delayed_archiving_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LargeArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeArraySegment::CopyFrom(const LargeArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeArraySegment::IsInitialized() const {
  return true;
}

void LargeArraySegment::InternalSwap(LargeArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_locator_.Swap(&other->package_locator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LargeArraySegment, delayed_archiving_priority_)
      + sizeof(LargeArraySegment::delayed_archiving_priority_)
      - PROTOBUF_FIELD_OFFSET(LargeArraySegment, should_delay_archiving_)>(
          reinterpret_cast<char*>(&should_delay_archiving_),
          reinterpret_cast<char*>(&other->should_delay_archiving_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[30]);
}

// ===================================================================

class LargeNumberArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeNumberArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const LargeNumberArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
LargeNumberArraySegment::_Internal::large_array_segment(const LargeNumberArraySegment* msg) {
  return *msg->large_array_segment_;
}
LargeNumberArraySegment::LargeNumberArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeNumberArraySegment)
}
LargeNumberArraySegment::LargeNumberArraySegment(const LargeNumberArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeNumberArraySegment)
}

void LargeNumberArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

LargeNumberArraySegment::~LargeNumberArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeNumberArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeNumberArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void LargeNumberArraySegment::ArenaDtor(void* object) {
  LargeNumberArraySegment* _this = reinterpret_cast< LargeNumberArraySegment* >(object);
  (void)_this;
}
void LargeNumberArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeNumberArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeNumberArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeNumberArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeNumberArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_elements(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_elements(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeNumberArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeNumberArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated double elements = 2;
  for (int i = 0, n = this->_internal_elements_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_elements(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeNumberArraySegment)
  return target;
}

size_t LargeNumberArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeNumberArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double elements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_elements_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_elements_size());
    total_size += data_size;
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeNumberArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeNumberArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeNumberArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeNumberArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeNumberArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeNumberArraySegment)
    MergeFrom(*source);
  }
}

void LargeNumberArraySegment::MergeFrom(const LargeNumberArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeNumberArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
}

void LargeNumberArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeNumberArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeNumberArraySegment::CopyFrom(const LargeNumberArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeNumberArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeNumberArraySegment::IsInitialized() const {
  return true;
}

void LargeNumberArraySegment::InternalSwap(LargeNumberArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeNumberArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[31]);
}

// ===================================================================

class LargeStringArraySegment_OptionalElement::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeStringArraySegment_OptionalElement>()._has_bits_);
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LargeStringArraySegment_OptionalElement::LargeStringArraySegment_OptionalElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeStringArraySegment.OptionalElement)
}
LargeStringArraySegment_OptionalElement::LargeStringArraySegment_OptionalElement(const LargeStringArraySegment_OptionalElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_element()) {
    element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeStringArraySegment.OptionalElement)
}

void LargeStringArraySegment_OptionalElement::SharedCtor() {
element_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LargeStringArraySegment_OptionalElement::~LargeStringArraySegment_OptionalElement() {
  // @@protoc_insertion_point(destructor:TSP.LargeStringArraySegment.OptionalElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeStringArraySegment_OptionalElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  element_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LargeStringArraySegment_OptionalElement::ArenaDtor(void* object) {
  LargeStringArraySegment_OptionalElement* _this = reinterpret_cast< LargeStringArraySegment_OptionalElement* >(object);
  (void)_this;
}
void LargeStringArraySegment_OptionalElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeStringArraySegment_OptionalElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeStringArraySegment_OptionalElement::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeStringArraySegment.OptionalElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    element_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeStringArraySegment_OptionalElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSP.LargeStringArraySegment.OptionalElement.element");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeStringArraySegment_OptionalElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeStringArraySegment.OptionalElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element().data(), static_cast<int>(this->_internal_element().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.LargeStringArraySegment.OptionalElement.element");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeStringArraySegment.OptionalElement)
  return target;
}

size_t LargeStringArraySegment_OptionalElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeStringArraySegment.OptionalElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string element = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeStringArraySegment_OptionalElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeStringArraySegment.OptionalElement)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeStringArraySegment_OptionalElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeStringArraySegment_OptionalElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeStringArraySegment.OptionalElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeStringArraySegment.OptionalElement)
    MergeFrom(*source);
  }
}

void LargeStringArraySegment_OptionalElement::MergeFrom(const LargeStringArraySegment_OptionalElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeStringArraySegment.OptionalElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element()) {
    _internal_set_element(from._internal_element());
  }
}

void LargeStringArraySegment_OptionalElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeStringArraySegment.OptionalElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeStringArraySegment_OptionalElement::CopyFrom(const LargeStringArraySegment_OptionalElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeStringArraySegment.OptionalElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeStringArraySegment_OptionalElement::IsInitialized() const {
  return true;
}

void LargeStringArraySegment_OptionalElement::InternalSwap(LargeStringArraySegment_OptionalElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_.Swap(&other->element_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeStringArraySegment_OptionalElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[32]);
}

// ===================================================================

class LargeStringArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeStringArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const LargeStringArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
LargeStringArraySegment::_Internal::large_array_segment(const LargeStringArraySegment* msg) {
  return *msg->large_array_segment_;
}
LargeStringArraySegment::LargeStringArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeStringArraySegment)
}
LargeStringArraySegment::LargeStringArraySegment(const LargeStringArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeStringArraySegment)
}

void LargeStringArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

LargeStringArraySegment::~LargeStringArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeStringArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeStringArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void LargeStringArraySegment::ArenaDtor(void* object) {
  LargeStringArraySegment* _this = reinterpret_cast< LargeStringArraySegment* >(object);
  (void)_this;
}
void LargeStringArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeStringArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeStringArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeStringArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeStringArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.LargeStringArraySegment.OptionalElement elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeStringArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeStringArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TSP.LargeStringArraySegment.OptionalElement elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeStringArraySegment)
  return target;
}

size_t LargeStringArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeStringArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.LargeStringArraySegment.OptionalElement elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeStringArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeStringArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeStringArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeStringArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeStringArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeStringArraySegment)
    MergeFrom(*source);
  }
}

void LargeStringArraySegment::MergeFrom(const LargeStringArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeStringArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
}

void LargeStringArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeStringArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeStringArraySegment::CopyFrom(const LargeStringArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeStringArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeStringArraySegment::IsInitialized() const {
  return true;
}

void LargeStringArraySegment::InternalSwap(LargeStringArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeStringArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[33]);
}

// ===================================================================

class LargeUUIDArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeUUIDArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const LargeUUIDArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
LargeUUIDArraySegment::_Internal::large_array_segment(const LargeUUIDArraySegment* msg) {
  return *msg->large_array_segment_;
}
LargeUUIDArraySegment::LargeUUIDArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeUUIDArraySegment)
}
LargeUUIDArraySegment::LargeUUIDArraySegment(const LargeUUIDArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeUUIDArraySegment)
}

void LargeUUIDArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

LargeUUIDArraySegment::~LargeUUIDArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeUUIDArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeUUIDArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void LargeUUIDArraySegment::ArenaDtor(void* object) {
  LargeUUIDArraySegment* _this = reinterpret_cast< LargeUUIDArraySegment* >(object);
  (void)_this;
}
void LargeUUIDArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeUUIDArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeUUIDArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeUUIDArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeUUIDArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeUUIDArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeUUIDArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TSP.UUID elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeUUIDArraySegment)
  return target;
}

size_t LargeUUIDArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeUUIDArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeUUIDArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeUUIDArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeUUIDArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeUUIDArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeUUIDArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeUUIDArraySegment)
    MergeFrom(*source);
  }
}

void LargeUUIDArraySegment::MergeFrom(const LargeUUIDArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeUUIDArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
}

void LargeUUIDArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeUUIDArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeUUIDArraySegment::CopyFrom(const LargeUUIDArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeUUIDArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeUUIDArraySegment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void LargeUUIDArraySegment::InternalSwap(LargeUUIDArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeUUIDArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[34]);
}

// ===================================================================

class LargeLazyObjectArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeLazyObjectArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const LargeLazyObjectArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
LargeLazyObjectArraySegment::_Internal::large_array_segment(const LargeLazyObjectArraySegment* msg) {
  return *msg->large_array_segment_;
}
LargeLazyObjectArraySegment::LargeLazyObjectArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeLazyObjectArraySegment)
}
LargeLazyObjectArraySegment::LargeLazyObjectArraySegment(const LargeLazyObjectArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeLazyObjectArraySegment)
}

void LargeLazyObjectArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

LargeLazyObjectArraySegment::~LargeLazyObjectArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeLazyObjectArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeLazyObjectArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void LargeLazyObjectArraySegment::ArenaDtor(void* object) {
  LargeLazyObjectArraySegment* _this = reinterpret_cast< LargeLazyObjectArraySegment* >(object);
  (void)_this;
}
void LargeLazyObjectArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeLazyObjectArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeLazyObjectArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeLazyObjectArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeLazyObjectArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeLazyObjectArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeLazyObjectArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TSP.Reference elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeLazyObjectArraySegment)
  return target;
}

size_t LargeLazyObjectArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeLazyObjectArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeLazyObjectArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeLazyObjectArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeLazyObjectArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeLazyObjectArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeLazyObjectArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeLazyObjectArraySegment)
    MergeFrom(*source);
  }
}

void LargeLazyObjectArraySegment::MergeFrom(const LargeLazyObjectArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeLazyObjectArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
}

void LargeLazyObjectArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeLazyObjectArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeLazyObjectArraySegment::CopyFrom(const LargeLazyObjectArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeLazyObjectArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeLazyObjectArraySegment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void LargeLazyObjectArraySegment::InternalSwap(LargeLazyObjectArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeLazyObjectArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[35]);
}

// ===================================================================

class LargeObjectArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeObjectArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const LargeObjectArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
LargeObjectArraySegment::_Internal::large_array_segment(const LargeObjectArraySegment* msg) {
  return *msg->large_array_segment_;
}
LargeObjectArraySegment::LargeObjectArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeObjectArraySegment)
}
LargeObjectArraySegment::LargeObjectArraySegment(const LargeObjectArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeObjectArraySegment)
}

void LargeObjectArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

LargeObjectArraySegment::~LargeObjectArraySegment() {
  // @@protoc_insertion_point(destructor:TSP.LargeObjectArraySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeObjectArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void LargeObjectArraySegment::ArenaDtor(void* object) {
  LargeObjectArraySegment* _this = reinterpret_cast< LargeObjectArraySegment* >(object);
  (void)_this;
}
void LargeObjectArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeObjectArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeObjectArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeObjectArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeObjectArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeObjectArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeObjectArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TSP.Reference elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeObjectArraySegment)
  return target;
}

size_t LargeObjectArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeObjectArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeObjectArraySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeObjectArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeObjectArraySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeObjectArraySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeObjectArraySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeObjectArraySegment)
    MergeFrom(*source);
  }
}

void LargeObjectArraySegment::MergeFrom(const LargeObjectArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeObjectArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
}

void LargeObjectArraySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeObjectArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeObjectArraySegment::CopyFrom(const LargeObjectArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeObjectArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeObjectArraySegment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void LargeObjectArraySegment::InternalSwap(LargeObjectArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeObjectArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[36]);
}

// ===================================================================

class LargeArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeArray>()._has_bits_);
  static void set_has_max_segment_element_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_segment_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_delay_archiving(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delayed_archiving_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_store_outside_object_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_estimated_byte_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LargeArray::LargeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeArray)
}
LargeArray::LargeArray(const LargeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_segment_element_count_, &from.max_segment_element_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_byte_size_) -
    reinterpret_cast<char*>(&max_segment_element_count_)) + sizeof(estimated_byte_size_));
  // @@protoc_insertion_point(copy_constructor:TSP.LargeArray)
}

void LargeArray::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_segment_element_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estimated_byte_size_) -
    reinterpret_cast<char*>(&max_segment_element_count_)) + sizeof(estimated_byte_size_));
}

LargeArray::~LargeArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LargeArray::ArenaDtor(void* object) {
  LargeArray* _this = reinterpret_cast< LargeArray* >(object);
  (void)_this;
}
void LargeArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  segments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&max_segment_element_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_byte_size_) -
        reinterpret_cast<char*>(&max_segment_element_count_)) + sizeof(estimated_byte_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Range ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference segments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 max_segment_element_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_segment_element_count(&has_bits);
          max_segment_element_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_segment_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_segment_size(&has_bits);
          max_segment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_delay_archiving = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_should_delay_archiving(&has_bits);
          should_delay_archiving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delayed_archiving_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_delayed_archiving_priority(&has_bits);
          delayed_archiving_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool store_outside_object_archive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_store_outside_object_archive(&has_bits);
          store_outside_object_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 estimated_byte_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_estimated_byte_size(&has_bits);
          estimated_byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Range ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranges(i), target, stream);
  }

  // repeated .TSP.Reference segments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_segments(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 max_segment_element_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_segment_element_count(), target);
  }

  // optional uint64 max_segment_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_segment_size(), target);
  }

  // optional bool should_delay_archiving = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_should_delay_archiving(), target);
  }

  // optional uint32 delayed_archiving_priority = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_delayed_archiving_priority(), target);
  }

  // optional bool store_outside_object_archive = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_store_outside_object_archive(), target);
  }

  // optional uint64 estimated_byte_size = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_estimated_byte_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeArray)
  return target;
}

size_t LargeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Range ranges = 1;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference segments = 2;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 max_segment_element_count = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_segment_element_count());
    }

    // optional uint64 max_segment_size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_segment_size());
    }

    // optional uint32 delayed_archiving_priority = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delayed_archiving_priority());
    }

    // optional bool should_delay_archiving = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool store_outside_object_archive = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint64 estimated_byte_size = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_estimated_byte_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeArray)
    MergeFrom(*source);
  }
}

void LargeArray::MergeFrom(const LargeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  segments_.MergeFrom(from.segments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      max_segment_element_count_ = from.max_segment_element_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_segment_size_ = from.max_segment_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      delayed_archiving_priority_ = from.delayed_archiving_priority_;
    }
    if (cached_has_bits & 0x00000008u) {
      should_delay_archiving_ = from.should_delay_archiving_;
    }
    if (cached_has_bits & 0x00000010u) {
      store_outside_object_archive_ = from.store_outside_object_archive_;
    }
    if (cached_has_bits & 0x00000020u) {
      estimated_byte_size_ = from.estimated_byte_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LargeArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeArray::CopyFrom(const LargeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeArray::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(segments_)) return false;
  return true;
}

void LargeArray::InternalSwap(LargeArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_.InternalSwap(&other->ranges_);
  segments_.InternalSwap(&other->segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LargeArray, estimated_byte_size_)
      + sizeof(LargeArray::estimated_byte_size_)
      - PROTOBUF_FIELD_OFFSET(LargeArray, max_segment_element_count_)>(
          reinterpret_cast<char*>(&max_segment_element_count_),
          reinterpret_cast<char*>(&other->max_segment_element_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[37]);
}

// ===================================================================

class LargeNumberArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeNumberArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LargeNumberArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
LargeNumberArray::_Internal::large_array(const LargeNumberArray* msg) {
  return *msg->large_array_;
}
LargeNumberArray::LargeNumberArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeNumberArray)
}
LargeNumberArray::LargeNumberArray(const LargeNumberArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeNumberArray)
}

void LargeNumberArray::SharedCtor() {
large_array_ = nullptr;
}

LargeNumberArray::~LargeNumberArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeNumberArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeNumberArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LargeNumberArray::ArenaDtor(void* object) {
  LargeNumberArray* _this = reinterpret_cast< LargeNumberArray* >(object);
  (void)_this;
}
void LargeNumberArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeNumberArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeNumberArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeNumberArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeNumberArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeNumberArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeNumberArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeNumberArray)
  return target;
}

size_t LargeNumberArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeNumberArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeNumberArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeNumberArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeNumberArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeNumberArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeNumberArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeNumberArray)
    MergeFrom(*source);
  }
}

void LargeNumberArray::MergeFrom(const LargeNumberArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeNumberArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
}

void LargeNumberArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeNumberArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeNumberArray::CopyFrom(const LargeNumberArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeNumberArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeNumberArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LargeNumberArray::InternalSwap(LargeNumberArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeNumberArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[38]);
}

// ===================================================================

class LargeStringArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeStringArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LargeStringArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
LargeStringArray::_Internal::large_array(const LargeStringArray* msg) {
  return *msg->large_array_;
}
LargeStringArray::LargeStringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeStringArray)
}
LargeStringArray::LargeStringArray(const LargeStringArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeStringArray)
}

void LargeStringArray::SharedCtor() {
large_array_ = nullptr;
}

LargeStringArray::~LargeStringArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeStringArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeStringArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LargeStringArray::ArenaDtor(void* object) {
  LargeStringArray* _this = reinterpret_cast< LargeStringArray* >(object);
  (void)_this;
}
void LargeStringArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeStringArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeStringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeStringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeStringArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeStringArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeStringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeStringArray)
  return target;
}

size_t LargeStringArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeStringArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeStringArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeStringArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeStringArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeStringArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeStringArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeStringArray)
    MergeFrom(*source);
  }
}

void LargeStringArray::MergeFrom(const LargeStringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeStringArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
}

void LargeStringArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeStringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeStringArray::CopyFrom(const LargeStringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeStringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeStringArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LargeStringArray::InternalSwap(LargeStringArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeStringArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[39]);
}

// ===================================================================

class LargeLazyObjectArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeLazyObjectArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LargeLazyObjectArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
LargeLazyObjectArray::_Internal::large_array(const LargeLazyObjectArray* msg) {
  return *msg->large_array_;
}
LargeLazyObjectArray::LargeLazyObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeLazyObjectArray)
}
LargeLazyObjectArray::LargeLazyObjectArray(const LargeLazyObjectArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeLazyObjectArray)
}

void LargeLazyObjectArray::SharedCtor() {
large_array_ = nullptr;
}

LargeLazyObjectArray::~LargeLazyObjectArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeLazyObjectArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeLazyObjectArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LargeLazyObjectArray::ArenaDtor(void* object) {
  LargeLazyObjectArray* _this = reinterpret_cast< LargeLazyObjectArray* >(object);
  (void)_this;
}
void LargeLazyObjectArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeLazyObjectArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeLazyObjectArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeLazyObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeLazyObjectArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeLazyObjectArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeLazyObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeLazyObjectArray)
  return target;
}

size_t LargeLazyObjectArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeLazyObjectArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeLazyObjectArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeLazyObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeLazyObjectArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeLazyObjectArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeLazyObjectArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeLazyObjectArray)
    MergeFrom(*source);
  }
}

void LargeLazyObjectArray::MergeFrom(const LargeLazyObjectArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeLazyObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
}

void LargeLazyObjectArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeLazyObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeLazyObjectArray::CopyFrom(const LargeLazyObjectArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeLazyObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeLazyObjectArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LargeLazyObjectArray::InternalSwap(LargeLazyObjectArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeLazyObjectArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[40]);
}

// ===================================================================

class LargeObjectArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeObjectArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LargeObjectArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
LargeObjectArray::_Internal::large_array(const LargeObjectArray* msg) {
  return *msg->large_array_;
}
LargeObjectArray::LargeObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeObjectArray)
}
LargeObjectArray::LargeObjectArray(const LargeObjectArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeObjectArray)
}

void LargeObjectArray::SharedCtor() {
large_array_ = nullptr;
}

LargeObjectArray::~LargeObjectArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeObjectArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeObjectArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LargeObjectArray::ArenaDtor(void* object) {
  LargeObjectArray* _this = reinterpret_cast< LargeObjectArray* >(object);
  (void)_this;
}
void LargeObjectArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeObjectArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeObjectArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeObjectArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeObjectArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeObjectArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeObjectArray)
  return target;
}

size_t LargeObjectArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeObjectArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeObjectArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeObjectArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeObjectArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeObjectArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeObjectArray)
    MergeFrom(*source);
  }
}

void LargeObjectArray::MergeFrom(const LargeObjectArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeObjectArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
}

void LargeObjectArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeObjectArray::CopyFrom(const LargeObjectArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeObjectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeObjectArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LargeObjectArray::InternalSwap(LargeObjectArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeObjectArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[41]);
}

// ===================================================================

class LargeUUIDArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LargeUUIDArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LargeUUIDArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
LargeUUIDArray::_Internal::large_array(const LargeUUIDArray* msg) {
  return *msg->large_array_;
}
LargeUUIDArray::LargeUUIDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSP.LargeUUIDArray)
}
LargeUUIDArray::LargeUUIDArray(const LargeUUIDArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSP.LargeUUIDArray)
}

void LargeUUIDArray::SharedCtor() {
large_array_ = nullptr;
}

LargeUUIDArray::~LargeUUIDArray() {
  // @@protoc_insertion_point(destructor:TSP.LargeUUIDArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LargeUUIDArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LargeUUIDArray::ArenaDtor(void* object) {
  LargeUUIDArray* _this = reinterpret_cast< LargeUUIDArray* >(object);
  (void)_this;
}
void LargeUUIDArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LargeUUIDArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LargeUUIDArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.LargeUUIDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LargeUUIDArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeUUIDArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.LargeUUIDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.LargeUUIDArray)
  return target;
}

size_t LargeUUIDArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.LargeUUIDArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeUUIDArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSP.LargeUUIDArray)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeUUIDArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeUUIDArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSP.LargeUUIDArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSP.LargeUUIDArray)
    MergeFrom(*source);
  }
}

void LargeUUIDArray::MergeFrom(const LargeUUIDArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSP.LargeUUIDArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
}

void LargeUUIDArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSP.LargeUUIDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeUUIDArray::CopyFrom(const LargeUUIDArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.LargeUUIDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeUUIDArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LargeUUIDArray::InternalSwap(LargeUUIDArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeUUIDArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSPMessages_2eproto_getter, &descriptor_table_TSPMessages_2eproto_once,
      file_level_metadata_TSPMessages_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSP::Reference* Arena::CreateMaybeMessage< ::TSP::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataReference* Arena::CreateMaybeMessage< ::TSP::DataReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseReferenceArray_Entry* Arena::CreateMaybeMessage< ::TSP::SparseReferenceArray_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseReferenceArray_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseReferenceArray* Arena::CreateMaybeMessage< ::TSP::SparseReferenceArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseReferenceArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Point* Arena::CreateMaybeMessage< ::TSP::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Size* Arena::CreateMaybeMessage< ::TSP::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Range* Arena::CreateMaybeMessage< ::TSP::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Date* Arena::CreateMaybeMessage< ::TSP::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::IndexSet* Arena::CreateMaybeMessage< ::TSP::IndexSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::IndexSet >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Color* Arena::CreateMaybeMessage< ::TSP::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Path_Element* Arena::CreateMaybeMessage< ::TSP::Path_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Path_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::Path* Arena::CreateMaybeMessage< ::TSP::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ReferenceDictionary_Entry* Arena::CreateMaybeMessage< ::TSP::ReferenceDictionary_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ReferenceDictionary_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ReferenceDictionary* Arena::CreateMaybeMessage< ::TSP::ReferenceDictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ReferenceDictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUID* Arena::CreateMaybeMessage< ::TSP::UUID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUID >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::CFUUIDArchive* Arena::CreateMaybeMessage< ::TSP::CFUUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::CFUUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDSetArchive* Arena::CreateMaybeMessage< ::TSP::UUIDSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDMapArchive* Arena::CreateMaybeMessage< ::TSP::UUIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDMultiMapArchive* Arena::CreateMaybeMessage< ::TSP::UUIDMultiMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDMultiMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDCoordArchive* Arena::CreateMaybeMessage< ::TSP::UUIDCoordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDCoordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDRectArchive* Arena::CreateMaybeMessage< ::TSP::UUIDRectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDRectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseUUIDArray_Entry* Arena::CreateMaybeMessage< ::TSP::SparseUUIDArray_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseUUIDArray_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseUUIDArray* Arena::CreateMaybeMessage< ::TSP::SparseUUIDArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseUUIDArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::UUIDPath* Arena::CreateMaybeMessage< ::TSP::UUIDPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::UUIDPath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseUUIDPathArray_Entry* Arena::CreateMaybeMessage< ::TSP::SparseUUIDPathArray_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseUUIDPathArray_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::SparseUUIDPathArray* Arena::CreateMaybeMessage< ::TSP::SparseUUIDPathArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::SparseUUIDPathArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PasteboardObject* Arena::CreateMaybeMessage< ::TSP::PasteboardObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PasteboardObject >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectCollection* Arena::CreateMaybeMessage< ::TSP::ObjectCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ObjectContainer* Arena::CreateMaybeMessage< ::TSP::ObjectContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ObjectContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataAttributes* Arena::CreateMaybeMessage< ::TSP::DataAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeNumberArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeNumberArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeNumberArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeStringArraySegment_OptionalElement* Arena::CreateMaybeMessage< ::TSP::LargeStringArraySegment_OptionalElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeStringArraySegment_OptionalElement >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeStringArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeStringArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeStringArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeUUIDArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeUUIDArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeUUIDArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeLazyObjectArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeLazyObjectArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeLazyObjectArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeObjectArraySegment* Arena::CreateMaybeMessage< ::TSP::LargeObjectArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeObjectArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeArray* Arena::CreateMaybeMessage< ::TSP::LargeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeNumberArray* Arena::CreateMaybeMessage< ::TSP::LargeNumberArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeNumberArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeStringArray* Arena::CreateMaybeMessage< ::TSP::LargeStringArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeStringArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeLazyObjectArray* Arena::CreateMaybeMessage< ::TSP::LargeLazyObjectArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeLazyObjectArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeObjectArray* Arena::CreateMaybeMessage< ::TSP::LargeObjectArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeObjectArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::LargeUUIDArray* Arena::CreateMaybeMessage< ::TSP::LargeUUIDArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::LargeUUIDArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
