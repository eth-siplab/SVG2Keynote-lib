// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTStylePropertyArchiving.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSTStylePropertyArchiving_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSTStylePropertyArchiving_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSWPArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSTStylePropertyArchiving_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSTStylePropertyArchiving_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTStylePropertyArchiving_2eproto;
namespace TST {
class CellStylePropertiesArchive;
struct CellStylePropertiesArchiveDefaultTypeInternal;
extern CellStylePropertiesArchiveDefaultTypeInternal _CellStylePropertiesArchive_default_instance_;
class Deprecated_StrokePresetDataArchive;
struct Deprecated_StrokePresetDataArchiveDefaultTypeInternal;
extern Deprecated_StrokePresetDataArchiveDefaultTypeInternal _Deprecated_StrokePresetDataArchive_default_instance_;
class Deprecated_TableStrokeArchive;
struct Deprecated_TableStrokeArchiveDefaultTypeInternal;
extern Deprecated_TableStrokeArchiveDefaultTypeInternal _Deprecated_TableStrokeArchive_default_instance_;
class StrokePresetDataArchive;
struct StrokePresetDataArchiveDefaultTypeInternal;
extern StrokePresetDataArchiveDefaultTypeInternal _StrokePresetDataArchive_default_instance_;
class StrokePresetListArchive;
struct StrokePresetListArchiveDefaultTypeInternal;
extern StrokePresetListArchiveDefaultTypeInternal _StrokePresetListArchive_default_instance_;
class TableStrokePresetArchive;
struct TableStrokePresetArchiveDefaultTypeInternal;
extern TableStrokePresetArchiveDefaultTypeInternal _TableStrokePresetArchive_default_instance_;
class TableStylePresetArchive;
struct TableStylePresetArchiveDefaultTypeInternal;
extern TableStylePresetArchiveDefaultTypeInternal _TableStylePresetArchive_default_instance_;
class TableStylePropertiesArchive;
struct TableStylePropertiesArchiveDefaultTypeInternal;
extern TableStylePropertiesArchiveDefaultTypeInternal _TableStylePropertiesArchive_default_instance_;
class ThemePresetsArchive;
struct ThemePresetsArchiveDefaultTypeInternal;
extern ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> ::TST::CellStylePropertiesArchive* Arena::CreateMaybeMessage<::TST::CellStylePropertiesArchive>(Arena*);
template<> ::TST::Deprecated_StrokePresetDataArchive* Arena::CreateMaybeMessage<::TST::Deprecated_StrokePresetDataArchive>(Arena*);
template<> ::TST::Deprecated_TableStrokeArchive* Arena::CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(Arena*);
template<> ::TST::StrokePresetDataArchive* Arena::CreateMaybeMessage<::TST::StrokePresetDataArchive>(Arena*);
template<> ::TST::StrokePresetListArchive* Arena::CreateMaybeMessage<::TST::StrokePresetListArchive>(Arena*);
template<> ::TST::TableStrokePresetArchive* Arena::CreateMaybeMessage<::TST::TableStrokePresetArchive>(Arena*);
template<> ::TST::TableStylePresetArchive* Arena::CreateMaybeMessage<::TST::TableStylePresetArchive>(Arena*);
template<> ::TST::TableStylePropertiesArchive* Arena::CreateMaybeMessage<::TST::TableStylePropertiesArchive>(Arena*);
template<> ::TST::ThemePresetsArchive* Arena::CreateMaybeMessage<::TST::ThemePresetsArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TST {

// ===================================================================

class Deprecated_TableStrokeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.Deprecated_TableStrokeArchive) */ {
 public:
  inline Deprecated_TableStrokeArchive() : Deprecated_TableStrokeArchive(nullptr) {}
  ~Deprecated_TableStrokeArchive() override;
  explicit constexpr Deprecated_TableStrokeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deprecated_TableStrokeArchive(const Deprecated_TableStrokeArchive& from);
  Deprecated_TableStrokeArchive(Deprecated_TableStrokeArchive&& from) noexcept
    : Deprecated_TableStrokeArchive() {
    *this = ::std::move(from);
  }

  inline Deprecated_TableStrokeArchive& operator=(const Deprecated_TableStrokeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deprecated_TableStrokeArchive& operator=(Deprecated_TableStrokeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deprecated_TableStrokeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deprecated_TableStrokeArchive* internal_default_instance() {
    return reinterpret_cast<const Deprecated_TableStrokeArchive*>(
               &_Deprecated_TableStrokeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Deprecated_TableStrokeArchive& a, Deprecated_TableStrokeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Deprecated_TableStrokeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deprecated_TableStrokeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deprecated_TableStrokeArchive* New() const final {
    return CreateMaybeMessage<Deprecated_TableStrokeArchive>(nullptr);
  }

  Deprecated_TableStrokeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deprecated_TableStrokeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deprecated_TableStrokeArchive& from);
  void MergeFrom(const Deprecated_TableStrokeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deprecated_TableStrokeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.Deprecated_TableStrokeArchive";
  }
  protected:
  explicit Deprecated_TableStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrokeFieldNumber = 1,
    kOpacityFieldNumber = 3,
    kBackgroundFieldNumber = 2,
    kEmptyFieldNumber = 4,
  };
  // optional .TSD.StrokeArchive stroke = 1;
  bool has_stroke() const;
  private:
  bool _internal_has_stroke() const;
  public:
  void clear_stroke();
  const ::TSD::StrokeArchive& stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_stroke();
  ::TSD::StrokeArchive* mutable_stroke();
  void set_allocated_stroke(::TSD::StrokeArchive* stroke);
  private:
  const ::TSD::StrokeArchive& _internal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_stroke();
  public:
  void unsafe_arena_set_allocated_stroke(
      ::TSD::StrokeArchive* stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_stroke();

  // optional float opacity = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_opacity() const;
  private:
  bool _internal_has_opacity() const;
  public:
  PROTOBUF_DEPRECATED void clear_opacity();
  PROTOBUF_DEPRECATED float opacity() const;
  PROTOBUF_DEPRECATED void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // optional bool background = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  PROTOBUF_DEPRECATED void clear_background();
  PROTOBUF_DEPRECATED bool background() const;
  PROTOBUF_DEPRECATED void set_background(bool value);
  private:
  bool _internal_background() const;
  void _internal_set_background(bool value);
  public:

  // optional bool empty = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  PROTOBUF_DEPRECATED void clear_empty();
  PROTOBUF_DEPRECATED bool empty() const;
  PROTOBUF_DEPRECATED void set_empty(bool value);
  private:
  bool _internal_empty() const;
  void _internal_set_empty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.Deprecated_TableStrokeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* stroke_;
  float opacity_;
  bool background_;
  bool empty_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class CellStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellStylePropertiesArchive) */ {
 public:
  inline CellStylePropertiesArchive() : CellStylePropertiesArchive(nullptr) {}
  ~CellStylePropertiesArchive() override;
  explicit constexpr CellStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellStylePropertiesArchive(const CellStylePropertiesArchive& from);
  CellStylePropertiesArchive(CellStylePropertiesArchive&& from) noexcept
    : CellStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline CellStylePropertiesArchive& operator=(const CellStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellStylePropertiesArchive& operator=(CellStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const CellStylePropertiesArchive*>(
               &_CellStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellStylePropertiesArchive& a, CellStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<CellStylePropertiesArchive>(nullptr);
  }

  CellStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellStylePropertiesArchive& from);
  void MergeFrom(const CellStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellStylePropertiesArchive";
  }
  protected:
  explicit CellStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFillFieldNumber = 1,
    kDeprecatedTopStrokeFieldNumber = 4,
    kDeprecatedRightStrokeFieldNumber = 5,
    kDeprecatedBottomStrokeFieldNumber = 6,
    kDeprecatedLeftStrokeFieldNumber = 7,
    kPaddingFieldNumber = 9,
    kTopStrokeFieldNumber = 10,
    kRightStrokeFieldNumber = 11,
    kBottomStrokeFieldNumber = 12,
    kLeftStrokeFieldNumber = 13,
    kTextWrapFieldNumber = 3,
    kVerticalAlignmentFieldNumber = 8,
  };
  // optional .TSD.FillArchive cell_fill = 1;
  bool has_cell_fill() const;
  private:
  bool _internal_has_cell_fill() const;
  public:
  void clear_cell_fill();
  const ::TSD::FillArchive& cell_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_cell_fill();
  ::TSD::FillArchive* mutable_cell_fill();
  void set_allocated_cell_fill(::TSD::FillArchive* cell_fill);
  private:
  const ::TSD::FillArchive& _internal_cell_fill() const;
  ::TSD::FillArchive* _internal_mutable_cell_fill();
  public:
  void unsafe_arena_set_allocated_cell_fill(
      ::TSD::FillArchive* cell_fill);
  ::TSD::FillArchive* unsafe_arena_release_cell_fill();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
  bool has_deprecated_top_stroke() const;
  private:
  bool _internal_has_deprecated_top_stroke() const;
  public:
  void clear_deprecated_top_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_top_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_top_stroke();
  void set_allocated_deprecated_top_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_top_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_top_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_top_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_top_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
  bool has_deprecated_right_stroke() const;
  private:
  bool _internal_has_deprecated_right_stroke() const;
  public:
  void clear_deprecated_right_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_right_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_right_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_right_stroke();
  void set_allocated_deprecated_right_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_right_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_right_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_right_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_right_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
  bool has_deprecated_bottom_stroke() const;
  private:
  bool _internal_has_deprecated_bottom_stroke() const;
  public:
  void clear_deprecated_bottom_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_bottom_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_bottom_stroke();
  void set_allocated_deprecated_bottom_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_bottom_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_bottom_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_bottom_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
  bool has_deprecated_left_stroke() const;
  private:
  bool _internal_has_deprecated_left_stroke() const;
  public:
  void clear_deprecated_left_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_left_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_left_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_left_stroke();
  void set_allocated_deprecated_left_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_left_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_left_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_left_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_left_stroke();

  // optional .TSWP.PaddingArchive padding = 9;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const ::TSWP::PaddingArchive& padding() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::PaddingArchive* release_padding();
  ::TSWP::PaddingArchive* mutable_padding();
  void set_allocated_padding(::TSWP::PaddingArchive* padding);
  private:
  const ::TSWP::PaddingArchive& _internal_padding() const;
  ::TSWP::PaddingArchive* _internal_mutable_padding();
  public:
  void unsafe_arena_set_allocated_padding(
      ::TSWP::PaddingArchive* padding);
  ::TSWP::PaddingArchive* unsafe_arena_release_padding();

  // optional .TSD.StrokeArchive top_stroke = 10;
  bool has_top_stroke() const;
  private:
  bool _internal_has_top_stroke() const;
  public:
  void clear_top_stroke();
  const ::TSD::StrokeArchive& top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_top_stroke();
  ::TSD::StrokeArchive* mutable_top_stroke();
  void set_allocated_top_stroke(::TSD::StrokeArchive* top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_top_stroke();
  public:
  void unsafe_arena_set_allocated_top_stroke(
      ::TSD::StrokeArchive* top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_top_stroke();

  // optional .TSD.StrokeArchive right_stroke = 11;
  bool has_right_stroke() const;
  private:
  bool _internal_has_right_stroke() const;
  public:
  void clear_right_stroke();
  const ::TSD::StrokeArchive& right_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_right_stroke();
  ::TSD::StrokeArchive* mutable_right_stroke();
  void set_allocated_right_stroke(::TSD::StrokeArchive* right_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_right_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_right_stroke();
  public:
  void unsafe_arena_set_allocated_right_stroke(
      ::TSD::StrokeArchive* right_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_right_stroke();

  // optional .TSD.StrokeArchive bottom_stroke = 12;
  bool has_bottom_stroke() const;
  private:
  bool _internal_has_bottom_stroke() const;
  public:
  void clear_bottom_stroke();
  const ::TSD::StrokeArchive& bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_bottom_stroke();
  ::TSD::StrokeArchive* mutable_bottom_stroke();
  void set_allocated_bottom_stroke(::TSD::StrokeArchive* bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_bottom_stroke(
      ::TSD::StrokeArchive* bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_bottom_stroke();

  // optional .TSD.StrokeArchive left_stroke = 13;
  bool has_left_stroke() const;
  private:
  bool _internal_has_left_stroke() const;
  public:
  void clear_left_stroke();
  const ::TSD::StrokeArchive& left_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_left_stroke();
  ::TSD::StrokeArchive* mutable_left_stroke();
  void set_allocated_left_stroke(::TSD::StrokeArchive* left_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_left_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_left_stroke();
  public:
  void unsafe_arena_set_allocated_left_stroke(
      ::TSD::StrokeArchive* left_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_left_stroke();

  // optional bool text_wrap = 3;
  bool has_text_wrap() const;
  private:
  bool _internal_has_text_wrap() const;
  public:
  void clear_text_wrap();
  bool text_wrap() const;
  void set_text_wrap(bool value);
  private:
  bool _internal_text_wrap() const;
  void _internal_set_text_wrap(bool value);
  public:

  // optional int32 vertical_alignment = 8;
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_alignment() const;
  void set_vertical_alignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* cell_fill_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke_;
  ::TSWP::PaddingArchive* padding_;
  ::TSD::StrokeArchive* top_stroke_;
  ::TSD::StrokeArchive* right_stroke_;
  ::TSD::StrokeArchive* bottom_stroke_;
  ::TSD::StrokeArchive* left_stroke_;
  bool text_wrap_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_alignment_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class Deprecated_StrokePresetDataArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.Deprecated_StrokePresetDataArchive) */ {
 public:
  inline Deprecated_StrokePresetDataArchive() : Deprecated_StrokePresetDataArchive(nullptr) {}
  ~Deprecated_StrokePresetDataArchive() override;
  explicit constexpr Deprecated_StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deprecated_StrokePresetDataArchive(const Deprecated_StrokePresetDataArchive& from);
  Deprecated_StrokePresetDataArchive(Deprecated_StrokePresetDataArchive&& from) noexcept
    : Deprecated_StrokePresetDataArchive() {
    *this = ::std::move(from);
  }

  inline Deprecated_StrokePresetDataArchive& operator=(const Deprecated_StrokePresetDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deprecated_StrokePresetDataArchive& operator=(Deprecated_StrokePresetDataArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deprecated_StrokePresetDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deprecated_StrokePresetDataArchive* internal_default_instance() {
    return reinterpret_cast<const Deprecated_StrokePresetDataArchive*>(
               &_Deprecated_StrokePresetDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Deprecated_StrokePresetDataArchive& a, Deprecated_StrokePresetDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(Deprecated_StrokePresetDataArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deprecated_StrokePresetDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deprecated_StrokePresetDataArchive* New() const final {
    return CreateMaybeMessage<Deprecated_StrokePresetDataArchive>(nullptr);
  }

  Deprecated_StrokePresetDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deprecated_StrokePresetDataArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deprecated_StrokePresetDataArchive& from);
  void MergeFrom(const Deprecated_StrokePresetDataArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deprecated_StrokePresetDataArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.Deprecated_StrokePresetDataArchive";
  }
  protected:
  explicit Deprecated_StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedVerticalStrokeFieldNumber = 1,
    kDeprecatedHorizontalStrokeFieldNumber = 2,
    kDeprecatedExteriorStrokeFieldNumber = 3,
    kDeprecatedVisibleMaskFieldNumber = 5,
  };
  // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
  bool has_deprecated_vertical_stroke() const;
  private:
  bool _internal_has_deprecated_vertical_stroke() const;
  public:
  void clear_deprecated_vertical_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_vertical_stroke();
  void set_allocated_deprecated_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_vertical_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_vertical_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_vertical_stroke();

  // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
  bool has_deprecated_horizontal_stroke() const;
  private:
  bool _internal_has_deprecated_horizontal_stroke() const;
  public:
  void clear_deprecated_horizontal_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_horizontal_stroke();
  void set_allocated_deprecated_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_horizontal_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_horizontal_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_horizontal_stroke();

  // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
  bool has_deprecated_exterior_stroke() const;
  private:
  bool _internal_has_deprecated_exterior_stroke() const;
  public:
  void clear_deprecated_exterior_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_exterior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_exterior_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_exterior_stroke();
  void set_allocated_deprecated_exterior_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_exterior_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_exterior_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_exterior_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_exterior_stroke();

  // required int32 deprecated_visible_mask = 5;
  bool has_deprecated_visible_mask() const;
  private:
  bool _internal_has_deprecated_visible_mask() const;
  public:
  void clear_deprecated_visible_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_visible_mask() const;
  void set_deprecated_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deprecated_visible_mask() const;
  void _internal_set_deprecated_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.Deprecated_StrokePresetDataArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_visible_mask_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class StrokePresetDataArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokePresetDataArchive) */ {
 public:
  inline StrokePresetDataArchive() : StrokePresetDataArchive(nullptr) {}
  ~StrokePresetDataArchive() override;
  explicit constexpr StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokePresetDataArchive(const StrokePresetDataArchive& from);
  StrokePresetDataArchive(StrokePresetDataArchive&& from) noexcept
    : StrokePresetDataArchive() {
    *this = ::std::move(from);
  }

  inline StrokePresetDataArchive& operator=(const StrokePresetDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokePresetDataArchive& operator=(StrokePresetDataArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokePresetDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokePresetDataArchive* internal_default_instance() {
    return reinterpret_cast<const StrokePresetDataArchive*>(
               &_StrokePresetDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StrokePresetDataArchive& a, StrokePresetDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokePresetDataArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokePresetDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokePresetDataArchive* New() const final {
    return CreateMaybeMessage<StrokePresetDataArchive>(nullptr);
  }

  StrokePresetDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokePresetDataArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokePresetDataArchive& from);
  void MergeFrom(const StrokePresetDataArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokePresetDataArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokePresetDataArchive";
  }
  protected:
  explicit StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorizontalStrokeFieldNumber = 1,
    kVerticalStrokeFieldNumber = 2,
    kExteriorStrokeFieldNumber = 3,
    kVisibleMaskFieldNumber = 4,
  };
  // optional .TSD.StrokeArchive horizontal_stroke = 1;
  bool has_horizontal_stroke() const;
  private:
  bool _internal_has_horizontal_stroke() const;
  public:
  void clear_horizontal_stroke();
  const ::TSD::StrokeArchive& horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_horizontal_stroke();
  ::TSD::StrokeArchive* mutable_horizontal_stroke();
  void set_allocated_horizontal_stroke(::TSD::StrokeArchive* horizontal_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_horizontal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_horizontal_stroke(
      ::TSD::StrokeArchive* horizontal_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_horizontal_stroke();

  // optional .TSD.StrokeArchive vertical_stroke = 2;
  bool has_vertical_stroke() const;
  private:
  bool _internal_has_vertical_stroke() const;
  public:
  void clear_vertical_stroke();
  const ::TSD::StrokeArchive& vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_vertical_stroke();
  ::TSD::StrokeArchive* mutable_vertical_stroke();
  void set_allocated_vertical_stroke(::TSD::StrokeArchive* vertical_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_vertical_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_vertical_stroke(
      ::TSD::StrokeArchive* vertical_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_vertical_stroke();

  // optional .TSD.StrokeArchive exterior_stroke = 3;
  bool has_exterior_stroke() const;
  private:
  bool _internal_has_exterior_stroke() const;
  public:
  void clear_exterior_stroke();
  const ::TSD::StrokeArchive& exterior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_exterior_stroke();
  ::TSD::StrokeArchive* mutable_exterior_stroke();
  void set_allocated_exterior_stroke(::TSD::StrokeArchive* exterior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_exterior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_exterior_stroke();
  public:
  void unsafe_arena_set_allocated_exterior_stroke(
      ::TSD::StrokeArchive* exterior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_exterior_stroke();

  // optional int32 visible_mask = 4;
  bool has_visible_mask() const;
  private:
  bool _internal_has_visible_mask() const;
  public:
  void clear_visible_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 visible_mask() const;
  void set_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_visible_mask() const;
  void _internal_set_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokePresetDataArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* horizontal_stroke_;
  ::TSD::StrokeArchive* vertical_stroke_;
  ::TSD::StrokeArchive* exterior_stroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 visible_mask_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class StrokePresetListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokePresetListArchive) */ {
 public:
  inline StrokePresetListArchive() : StrokePresetListArchive(nullptr) {}
  ~StrokePresetListArchive() override;
  explicit constexpr StrokePresetListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokePresetListArchive(const StrokePresetListArchive& from);
  StrokePresetListArchive(StrokePresetListArchive&& from) noexcept
    : StrokePresetListArchive() {
    *this = ::std::move(from);
  }

  inline StrokePresetListArchive& operator=(const StrokePresetListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokePresetListArchive& operator=(StrokePresetListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokePresetListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokePresetListArchive* internal_default_instance() {
    return reinterpret_cast<const StrokePresetListArchive*>(
               &_StrokePresetListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StrokePresetListArchive& a, StrokePresetListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokePresetListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokePresetListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokePresetListArchive* New() const final {
    return CreateMaybeMessage<StrokePresetListArchive>(nullptr);
  }

  StrokePresetListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokePresetListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokePresetListArchive& from);
  void MergeFrom(const StrokePresetListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokePresetListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokePresetListArchive";
  }
  protected:
  explicit StrokePresetListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedPresetFieldNumber = 2,
    kPresetFieldNumber = 3,
    kCountFieldNumber = 1,
  };
  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  int deprecated_preset_size() const;
  private:
  int _internal_deprecated_preset_size() const;
  public:
  void clear_deprecated_preset();
  ::TST::Deprecated_StrokePresetDataArchive* mutable_deprecated_preset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >*
      mutable_deprecated_preset();
  private:
  const ::TST::Deprecated_StrokePresetDataArchive& _internal_deprecated_preset(int index) const;
  ::TST::Deprecated_StrokePresetDataArchive* _internal_add_deprecated_preset();
  public:
  const ::TST::Deprecated_StrokePresetDataArchive& deprecated_preset(int index) const;
  ::TST::Deprecated_StrokePresetDataArchive* add_deprecated_preset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >&
      deprecated_preset() const;

  // repeated .TST.StrokePresetDataArchive preset = 3;
  int preset_size() const;
  private:
  int _internal_preset_size() const;
  public:
  void clear_preset();
  ::TST::StrokePresetDataArchive* mutable_preset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokePresetDataArchive >*
      mutable_preset();
  private:
  const ::TST::StrokePresetDataArchive& _internal_preset(int index) const;
  ::TST::StrokePresetDataArchive* _internal_add_preset();
  public:
  const ::TST::StrokePresetDataArchive& preset(int index) const;
  ::TST::StrokePresetDataArchive* add_preset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokePresetDataArchive >&
      preset() const;

  // required int32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokePresetListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive > deprecated_preset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokePresetDataArchive > preset_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class TableStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableStylePropertiesArchive) */ {
 public:
  inline TableStylePropertiesArchive() : TableStylePropertiesArchive(nullptr) {}
  ~TableStylePropertiesArchive() override;
  explicit constexpr TableStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableStylePropertiesArchive(const TableStylePropertiesArchive& from);
  TableStylePropertiesArchive(TableStylePropertiesArchive&& from) noexcept
    : TableStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline TableStylePropertiesArchive& operator=(const TableStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStylePropertiesArchive& operator=(TableStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const TableStylePropertiesArchive*>(
               &_TableStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TableStylePropertiesArchive& a, TableStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<TableStylePropertiesArchive>(nullptr);
  }

  TableStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStylePropertiesArchive& from);
  void MergeFrom(const TableStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableStylePropertiesArchive";
  }
  protected:
  explicit TableStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFontFamilyFieldNumber = 41,
    kBandedFillFieldNumber = 2,
    kDeprecatedHeaderRowSeparatorStrokeFieldNumber = 4,
    kDeprecatedHeaderRowBorderStrokeFieldNumber = 5,
    kDeprecatedHeaderColumnBorderStrokeFieldNumber = 7,
    kDeprecatedHeaderColumnSeparatorStrokeFieldNumber = 8,
    kDeprecatedFooterRowSeparatorStrokeFieldNumber = 10,
    kDeprecatedFooterRowBorderStrokeFieldNumber = 11,
    kDeprecatedTableBodyHorizontalBorderStrokeFieldNumber = 12,
    kDeprecatedHeaderRowHorizontalStrokeFieldNumber = 23,
    kDeprecatedHeaderRowVerticalStrokeFieldNumber = 24,
    kDeprecatedHeaderColumnHorizontalStrokeFieldNumber = 25,
    kDeprecatedHeaderColumnVerticalStrokeFieldNumber = 26,
    kDeprecatedFooterRowHorizontalStrokeFieldNumber = 27,
    kDeprecatedFooterRowVerticalStrokeFieldNumber = 28,
    kDeprecatedTableBodyVerticalBorderStrokeFieldNumber = 29,
    kDeprecatedTableBodyHorizontalStrokeFieldNumber = 30,
    kDeprecatedTableBodyVerticalStrokeFieldNumber = 31,
    kStrokePresetListFieldNumber = 32,
    kHeaderRowSeparatorStrokeFieldNumber = 46,
    kHeaderRowBorderStrokeFieldNumber = 47,
    kHeaderRowHorizontalStrokeFieldNumber = 48,
    kHeaderRowVerticalStrokeFieldNumber = 49,
    kHeaderColumnBorderStrokeFieldNumber = 50,
    kHeaderColumnSeparatorStrokeFieldNumber = 51,
    kHeaderColumnHorizontalStrokeFieldNumber = 52,
    kHeaderColumnVerticalStrokeFieldNumber = 53,
    kFooterRowSeparatorStrokeFieldNumber = 54,
    kFooterRowBorderStrokeFieldNumber = 55,
    kFooterRowHorizontalStrokeFieldNumber = 56,
    kFooterRowVerticalStrokeFieldNumber = 57,
    kTableBodyHorizontalBorderStrokeFieldNumber = 58,
    kTableBodyVerticalBorderStrokeFieldNumber = 59,
    kTableBodyHorizontalStrokeFieldNumber = 60,
    kTableBodyVerticalStrokeFieldNumber = 61,
    kCategoryLevel1TopStrokeFieldNumber = 62,
    kCategoryLevel2TopStrokeFieldNumber = 63,
    kCategoryLevel3TopStrokeFieldNumber = 64,
    kCategoryLevel4TopStrokeFieldNumber = 65,
    kCategoryLevel5TopStrokeFieldNumber = 66,
    kCategoryLevel1BottomStrokeFieldNumber = 67,
    kCategoryLevel2BottomStrokeFieldNumber = 68,
    kCategoryLevel3BottomStrokeFieldNumber = 69,
    kCategoryLevel4BottomStrokeFieldNumber = 70,
    kCategoryLevel5BottomStrokeFieldNumber = 71,
    kCategoryLevel1InteriorStrokeFieldNumber = 72,
    kCategoryLevel2InteriorStrokeFieldNumber = 73,
    kCategoryLevel3InteriorStrokeFieldNumber = 74,
    kCategoryLevel4InteriorStrokeFieldNumber = 75,
    kCategoryLevel5InteriorStrokeFieldNumber = 76,
    kCategoryLevel1LabelSeparatorStrokeFieldNumber = 77,
    kCategoryLevel2LabelSeparatorStrokeFieldNumber = 78,
    kCategoryLevel3LabelSeparatorStrokeFieldNumber = 79,
    kCategoryLevel4LabelSeparatorStrokeFieldNumber = 80,
    kCategoryLevel5LabelSeparatorStrokeFieldNumber = 81,
    kBandedRowsFieldNumber = 1,
    kBehavesLikeSpreadsheetFieldNumber = 21,
    kAutoResizeFieldNumber = 22,
    kVStrokesVisibleFieldNumber = 33,
    kHStrokesVisibleFieldNumber = 34,
    kHrSeparatorVisibleFieldNumber = 35,
    kHcSeparatorVisibleFieldNumber = 36,
    kFooterSeparatorVisibleFieldNumber = 37,
    kOBSOLETEMasterFontSizeFieldNumber = 40,
    kTableBorderVisibleFieldNumber = 38,
    kTableHeaderBorderVisibleFieldNumber = 39,
    kTableHcDividerVisibleFieldNumber = 42,
    kTableHrDividerVisibleFieldNumber = 43,
    kTableFooterDividerVisibleFieldNumber = 44,
    kWritingDirectionFieldNumber = 45,
  };
  // optional string master_font_family = 41;
  bool has_master_font_family() const;
  private:
  bool _internal_has_master_font_family() const;
  public:
  void clear_master_font_family();
  const std::string& master_font_family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_master_font_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_master_font_family();
  std::string* release_master_font_family();
  void set_allocated_master_font_family(std::string* master_font_family);
  private:
  const std::string& _internal_master_font_family() const;
  void _internal_set_master_font_family(const std::string& value);
  std::string* _internal_mutable_master_font_family();
  public:

  // optional .TSD.FillArchive banded_fill = 2;
  bool has_banded_fill() const;
  private:
  bool _internal_has_banded_fill() const;
  public:
  void clear_banded_fill();
  const ::TSD::FillArchive& banded_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_banded_fill();
  ::TSD::FillArchive* mutable_banded_fill();
  void set_allocated_banded_fill(::TSD::FillArchive* banded_fill);
  private:
  const ::TSD::FillArchive& _internal_banded_fill() const;
  ::TSD::FillArchive* _internal_mutable_banded_fill();
  public:
  void unsafe_arena_set_allocated_banded_fill(
      ::TSD::FillArchive* banded_fill);
  ::TSD::FillArchive* unsafe_arena_release_banded_fill();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
  bool has_deprecated_header_row_separator_stroke() const;
  private:
  bool _internal_has_deprecated_header_row_separator_stroke() const;
  public:
  void clear_deprecated_header_row_separator_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_separator_stroke();
  void set_allocated_deprecated_header_row_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_row_separator_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_row_separator_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_row_separator_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_row_separator_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
  bool has_deprecated_header_row_border_stroke() const;
  private:
  bool _internal_has_deprecated_header_row_border_stroke() const;
  public:
  void clear_deprecated_header_row_border_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_border_stroke();
  void set_allocated_deprecated_header_row_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_row_border_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_row_border_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_row_border_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_row_border_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
  bool has_deprecated_header_column_border_stroke() const;
  private:
  bool _internal_has_deprecated_header_column_border_stroke() const;
  public:
  void clear_deprecated_header_column_border_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_border_stroke();
  void set_allocated_deprecated_header_column_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_column_border_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_column_border_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_column_border_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_column_border_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
  bool has_deprecated_header_column_separator_stroke() const;
  private:
  bool _internal_has_deprecated_header_column_separator_stroke() const;
  public:
  void clear_deprecated_header_column_separator_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_separator_stroke();
  void set_allocated_deprecated_header_column_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_column_separator_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_column_separator_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_column_separator_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_column_separator_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
  bool has_deprecated_footer_row_separator_stroke() const;
  private:
  bool _internal_has_deprecated_footer_row_separator_stroke() const;
  public:
  void clear_deprecated_footer_row_separator_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_separator_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_separator_stroke();
  void set_allocated_deprecated_footer_row_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_footer_row_separator_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_footer_row_separator_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_footer_row_separator_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_footer_row_separator_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
  bool has_deprecated_footer_row_border_stroke() const;
  private:
  bool _internal_has_deprecated_footer_row_border_stroke() const;
  public:
  void clear_deprecated_footer_row_border_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_border_stroke();
  void set_allocated_deprecated_footer_row_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_footer_row_border_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_footer_row_border_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_footer_row_border_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_footer_row_border_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
  bool has_deprecated_table_body_horizontal_border_stroke() const;
  private:
  bool _internal_has_deprecated_table_body_horizontal_border_stroke() const;
  public:
  void clear_deprecated_table_body_horizontal_border_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_horizontal_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_horizontal_border_stroke();
  void set_allocated_deprecated_table_body_horizontal_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_table_body_horizontal_border_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_table_body_horizontal_border_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_table_body_horizontal_border_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_table_body_horizontal_border_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
  bool has_deprecated_header_row_horizontal_stroke() const;
  private:
  bool _internal_has_deprecated_header_row_horizontal_stroke() const;
  public:
  void clear_deprecated_header_row_horizontal_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_horizontal_stroke();
  void set_allocated_deprecated_header_row_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_row_horizontal_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_row_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_row_horizontal_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_row_horizontal_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
  bool has_deprecated_header_row_vertical_stroke() const;
  private:
  bool _internal_has_deprecated_header_row_vertical_stroke() const;
  public:
  void clear_deprecated_header_row_vertical_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_row_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_row_vertical_stroke();
  void set_allocated_deprecated_header_row_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_row_vertical_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_row_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_row_vertical_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_row_vertical_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
  bool has_deprecated_header_column_horizontal_stroke() const;
  private:
  bool _internal_has_deprecated_header_column_horizontal_stroke() const;
  public:
  void clear_deprecated_header_column_horizontal_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_horizontal_stroke();
  void set_allocated_deprecated_header_column_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_column_horizontal_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_column_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_column_horizontal_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_column_horizontal_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
  bool has_deprecated_header_column_vertical_stroke() const;
  private:
  bool _internal_has_deprecated_header_column_vertical_stroke() const;
  public:
  void clear_deprecated_header_column_vertical_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_header_column_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_header_column_vertical_stroke();
  void set_allocated_deprecated_header_column_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_header_column_vertical_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_header_column_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_header_column_vertical_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_header_column_vertical_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
  bool has_deprecated_footer_row_horizontal_stroke() const;
  private:
  bool _internal_has_deprecated_footer_row_horizontal_stroke() const;
  public:
  void clear_deprecated_footer_row_horizontal_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_horizontal_stroke();
  void set_allocated_deprecated_footer_row_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_footer_row_horizontal_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_footer_row_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_footer_row_horizontal_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_footer_row_horizontal_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
  bool has_deprecated_footer_row_vertical_stroke() const;
  private:
  bool _internal_has_deprecated_footer_row_vertical_stroke() const;
  public:
  void clear_deprecated_footer_row_vertical_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_footer_row_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_footer_row_vertical_stroke();
  void set_allocated_deprecated_footer_row_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_footer_row_vertical_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_footer_row_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_footer_row_vertical_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_footer_row_vertical_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
  bool has_deprecated_table_body_vertical_border_stroke() const;
  private:
  bool _internal_has_deprecated_table_body_vertical_border_stroke() const;
  public:
  void clear_deprecated_table_body_vertical_border_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_vertical_border_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_vertical_border_stroke();
  void set_allocated_deprecated_table_body_vertical_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_table_body_vertical_border_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_table_body_vertical_border_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_table_body_vertical_border_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_table_body_vertical_border_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
  bool has_deprecated_table_body_horizontal_stroke() const;
  private:
  bool _internal_has_deprecated_table_body_horizontal_stroke() const;
  public:
  void clear_deprecated_table_body_horizontal_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_horizontal_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_horizontal_stroke();
  void set_allocated_deprecated_table_body_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_table_body_horizontal_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_table_body_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_table_body_horizontal_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_table_body_horizontal_stroke();

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
  bool has_deprecated_table_body_vertical_stroke() const;
  private:
  bool _internal_has_deprecated_table_body_vertical_stroke() const;
  public:
  void clear_deprecated_table_body_vertical_stroke();
  const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Deprecated_TableStrokeArchive* release_deprecated_table_body_vertical_stroke();
  ::TST::Deprecated_TableStrokeArchive* mutable_deprecated_table_body_vertical_stroke();
  void set_allocated_deprecated_table_body_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke);
  private:
  const ::TST::Deprecated_TableStrokeArchive& _internal_deprecated_table_body_vertical_stroke() const;
  ::TST::Deprecated_TableStrokeArchive* _internal_mutable_deprecated_table_body_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_deprecated_table_body_vertical_stroke(
      ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke);
  ::TST::Deprecated_TableStrokeArchive* unsafe_arena_release_deprecated_table_body_vertical_stroke();

  // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
  bool has_stroke_preset_list() const;
  private:
  bool _internal_has_stroke_preset_list() const;
  public:
  void clear_stroke_preset_list();
  const ::TST::StrokePresetListArchive& stroke_preset_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::StrokePresetListArchive* release_stroke_preset_list();
  ::TST::StrokePresetListArchive* mutable_stroke_preset_list();
  void set_allocated_stroke_preset_list(::TST::StrokePresetListArchive* stroke_preset_list);
  private:
  const ::TST::StrokePresetListArchive& _internal_stroke_preset_list() const;
  ::TST::StrokePresetListArchive* _internal_mutable_stroke_preset_list();
  public:
  void unsafe_arena_set_allocated_stroke_preset_list(
      ::TST::StrokePresetListArchive* stroke_preset_list);
  ::TST::StrokePresetListArchive* unsafe_arena_release_stroke_preset_list();

  // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
  bool has_header_row_separator_stroke() const;
  private:
  bool _internal_has_header_row_separator_stroke() const;
  public:
  void clear_header_row_separator_stroke();
  const ::TSD::StrokeArchive& header_row_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_row_separator_stroke();
  ::TSD::StrokeArchive* mutable_header_row_separator_stroke();
  void set_allocated_header_row_separator_stroke(::TSD::StrokeArchive* header_row_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_row_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_row_separator_stroke();
  public:
  void unsafe_arena_set_allocated_header_row_separator_stroke(
      ::TSD::StrokeArchive* header_row_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_row_separator_stroke();

  // optional .TSD.StrokeArchive header_row_border_stroke = 47;
  bool has_header_row_border_stroke() const;
  private:
  bool _internal_has_header_row_border_stroke() const;
  public:
  void clear_header_row_border_stroke();
  const ::TSD::StrokeArchive& header_row_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_row_border_stroke();
  ::TSD::StrokeArchive* mutable_header_row_border_stroke();
  void set_allocated_header_row_border_stroke(::TSD::StrokeArchive* header_row_border_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_row_border_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_row_border_stroke();
  public:
  void unsafe_arena_set_allocated_header_row_border_stroke(
      ::TSD::StrokeArchive* header_row_border_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_row_border_stroke();

  // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
  bool has_header_row_horizontal_stroke() const;
  private:
  bool _internal_has_header_row_horizontal_stroke() const;
  public:
  void clear_header_row_horizontal_stroke();
  const ::TSD::StrokeArchive& header_row_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_row_horizontal_stroke();
  ::TSD::StrokeArchive* mutable_header_row_horizontal_stroke();
  void set_allocated_header_row_horizontal_stroke(::TSD::StrokeArchive* header_row_horizontal_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_row_horizontal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_row_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_header_row_horizontal_stroke(
      ::TSD::StrokeArchive* header_row_horizontal_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_row_horizontal_stroke();

  // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
  bool has_header_row_vertical_stroke() const;
  private:
  bool _internal_has_header_row_vertical_stroke() const;
  public:
  void clear_header_row_vertical_stroke();
  const ::TSD::StrokeArchive& header_row_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_row_vertical_stroke();
  ::TSD::StrokeArchive* mutable_header_row_vertical_stroke();
  void set_allocated_header_row_vertical_stroke(::TSD::StrokeArchive* header_row_vertical_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_row_vertical_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_row_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_header_row_vertical_stroke(
      ::TSD::StrokeArchive* header_row_vertical_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_row_vertical_stroke();

  // optional .TSD.StrokeArchive header_column_border_stroke = 50;
  bool has_header_column_border_stroke() const;
  private:
  bool _internal_has_header_column_border_stroke() const;
  public:
  void clear_header_column_border_stroke();
  const ::TSD::StrokeArchive& header_column_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_column_border_stroke();
  ::TSD::StrokeArchive* mutable_header_column_border_stroke();
  void set_allocated_header_column_border_stroke(::TSD::StrokeArchive* header_column_border_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_column_border_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_column_border_stroke();
  public:
  void unsafe_arena_set_allocated_header_column_border_stroke(
      ::TSD::StrokeArchive* header_column_border_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_column_border_stroke();

  // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
  bool has_header_column_separator_stroke() const;
  private:
  bool _internal_has_header_column_separator_stroke() const;
  public:
  void clear_header_column_separator_stroke();
  const ::TSD::StrokeArchive& header_column_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_column_separator_stroke();
  ::TSD::StrokeArchive* mutable_header_column_separator_stroke();
  void set_allocated_header_column_separator_stroke(::TSD::StrokeArchive* header_column_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_column_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_column_separator_stroke();
  public:
  void unsafe_arena_set_allocated_header_column_separator_stroke(
      ::TSD::StrokeArchive* header_column_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_column_separator_stroke();

  // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
  bool has_header_column_horizontal_stroke() const;
  private:
  bool _internal_has_header_column_horizontal_stroke() const;
  public:
  void clear_header_column_horizontal_stroke();
  const ::TSD::StrokeArchive& header_column_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_column_horizontal_stroke();
  ::TSD::StrokeArchive* mutable_header_column_horizontal_stroke();
  void set_allocated_header_column_horizontal_stroke(::TSD::StrokeArchive* header_column_horizontal_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_column_horizontal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_column_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_header_column_horizontal_stroke(
      ::TSD::StrokeArchive* header_column_horizontal_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_column_horizontal_stroke();

  // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
  bool has_header_column_vertical_stroke() const;
  private:
  bool _internal_has_header_column_vertical_stroke() const;
  public:
  void clear_header_column_vertical_stroke();
  const ::TSD::StrokeArchive& header_column_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_header_column_vertical_stroke();
  ::TSD::StrokeArchive* mutable_header_column_vertical_stroke();
  void set_allocated_header_column_vertical_stroke(::TSD::StrokeArchive* header_column_vertical_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_header_column_vertical_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_header_column_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_header_column_vertical_stroke(
      ::TSD::StrokeArchive* header_column_vertical_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_header_column_vertical_stroke();

  // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
  bool has_footer_row_separator_stroke() const;
  private:
  bool _internal_has_footer_row_separator_stroke() const;
  public:
  void clear_footer_row_separator_stroke();
  const ::TSD::StrokeArchive& footer_row_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_footer_row_separator_stroke();
  ::TSD::StrokeArchive* mutable_footer_row_separator_stroke();
  void set_allocated_footer_row_separator_stroke(::TSD::StrokeArchive* footer_row_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_footer_row_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_footer_row_separator_stroke();
  public:
  void unsafe_arena_set_allocated_footer_row_separator_stroke(
      ::TSD::StrokeArchive* footer_row_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_footer_row_separator_stroke();

  // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
  bool has_footer_row_border_stroke() const;
  private:
  bool _internal_has_footer_row_border_stroke() const;
  public:
  void clear_footer_row_border_stroke();
  const ::TSD::StrokeArchive& footer_row_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_footer_row_border_stroke();
  ::TSD::StrokeArchive* mutable_footer_row_border_stroke();
  void set_allocated_footer_row_border_stroke(::TSD::StrokeArchive* footer_row_border_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_footer_row_border_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_footer_row_border_stroke();
  public:
  void unsafe_arena_set_allocated_footer_row_border_stroke(
      ::TSD::StrokeArchive* footer_row_border_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_footer_row_border_stroke();

  // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
  bool has_footer_row_horizontal_stroke() const;
  private:
  bool _internal_has_footer_row_horizontal_stroke() const;
  public:
  void clear_footer_row_horizontal_stroke();
  const ::TSD::StrokeArchive& footer_row_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_footer_row_horizontal_stroke();
  ::TSD::StrokeArchive* mutable_footer_row_horizontal_stroke();
  void set_allocated_footer_row_horizontal_stroke(::TSD::StrokeArchive* footer_row_horizontal_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_footer_row_horizontal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_footer_row_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_footer_row_horizontal_stroke(
      ::TSD::StrokeArchive* footer_row_horizontal_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_footer_row_horizontal_stroke();

  // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
  bool has_footer_row_vertical_stroke() const;
  private:
  bool _internal_has_footer_row_vertical_stroke() const;
  public:
  void clear_footer_row_vertical_stroke();
  const ::TSD::StrokeArchive& footer_row_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_footer_row_vertical_stroke();
  ::TSD::StrokeArchive* mutable_footer_row_vertical_stroke();
  void set_allocated_footer_row_vertical_stroke(::TSD::StrokeArchive* footer_row_vertical_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_footer_row_vertical_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_footer_row_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_footer_row_vertical_stroke(
      ::TSD::StrokeArchive* footer_row_vertical_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_footer_row_vertical_stroke();

  // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
  bool has_table_body_horizontal_border_stroke() const;
  private:
  bool _internal_has_table_body_horizontal_border_stroke() const;
  public:
  void clear_table_body_horizontal_border_stroke();
  const ::TSD::StrokeArchive& table_body_horizontal_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_table_body_horizontal_border_stroke();
  ::TSD::StrokeArchive* mutable_table_body_horizontal_border_stroke();
  void set_allocated_table_body_horizontal_border_stroke(::TSD::StrokeArchive* table_body_horizontal_border_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_table_body_horizontal_border_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_table_body_horizontal_border_stroke();
  public:
  void unsafe_arena_set_allocated_table_body_horizontal_border_stroke(
      ::TSD::StrokeArchive* table_body_horizontal_border_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_table_body_horizontal_border_stroke();

  // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
  bool has_table_body_vertical_border_stroke() const;
  private:
  bool _internal_has_table_body_vertical_border_stroke() const;
  public:
  void clear_table_body_vertical_border_stroke();
  const ::TSD::StrokeArchive& table_body_vertical_border_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_table_body_vertical_border_stroke();
  ::TSD::StrokeArchive* mutable_table_body_vertical_border_stroke();
  void set_allocated_table_body_vertical_border_stroke(::TSD::StrokeArchive* table_body_vertical_border_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_table_body_vertical_border_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_table_body_vertical_border_stroke();
  public:
  void unsafe_arena_set_allocated_table_body_vertical_border_stroke(
      ::TSD::StrokeArchive* table_body_vertical_border_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_table_body_vertical_border_stroke();

  // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
  bool has_table_body_horizontal_stroke() const;
  private:
  bool _internal_has_table_body_horizontal_stroke() const;
  public:
  void clear_table_body_horizontal_stroke();
  const ::TSD::StrokeArchive& table_body_horizontal_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_table_body_horizontal_stroke();
  ::TSD::StrokeArchive* mutable_table_body_horizontal_stroke();
  void set_allocated_table_body_horizontal_stroke(::TSD::StrokeArchive* table_body_horizontal_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_table_body_horizontal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_table_body_horizontal_stroke();
  public:
  void unsafe_arena_set_allocated_table_body_horizontal_stroke(
      ::TSD::StrokeArchive* table_body_horizontal_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_table_body_horizontal_stroke();

  // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
  bool has_table_body_vertical_stroke() const;
  private:
  bool _internal_has_table_body_vertical_stroke() const;
  public:
  void clear_table_body_vertical_stroke();
  const ::TSD::StrokeArchive& table_body_vertical_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_table_body_vertical_stroke();
  ::TSD::StrokeArchive* mutable_table_body_vertical_stroke();
  void set_allocated_table_body_vertical_stroke(::TSD::StrokeArchive* table_body_vertical_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_table_body_vertical_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_table_body_vertical_stroke();
  public:
  void unsafe_arena_set_allocated_table_body_vertical_stroke(
      ::TSD::StrokeArchive* table_body_vertical_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_table_body_vertical_stroke();

  // optional .TSD.StrokeArchive category_level1_top_stroke = 62;
  bool has_category_level1_top_stroke() const;
  private:
  bool _internal_has_category_level1_top_stroke() const;
  public:
  void clear_category_level1_top_stroke();
  const ::TSD::StrokeArchive& category_level1_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level1_top_stroke();
  ::TSD::StrokeArchive* mutable_category_level1_top_stroke();
  void set_allocated_category_level1_top_stroke(::TSD::StrokeArchive* category_level1_top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level1_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level1_top_stroke();
  public:
  void unsafe_arena_set_allocated_category_level1_top_stroke(
      ::TSD::StrokeArchive* category_level1_top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level1_top_stroke();

  // optional .TSD.StrokeArchive category_level2_top_stroke = 63;
  bool has_category_level2_top_stroke() const;
  private:
  bool _internal_has_category_level2_top_stroke() const;
  public:
  void clear_category_level2_top_stroke();
  const ::TSD::StrokeArchive& category_level2_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level2_top_stroke();
  ::TSD::StrokeArchive* mutable_category_level2_top_stroke();
  void set_allocated_category_level2_top_stroke(::TSD::StrokeArchive* category_level2_top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level2_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level2_top_stroke();
  public:
  void unsafe_arena_set_allocated_category_level2_top_stroke(
      ::TSD::StrokeArchive* category_level2_top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level2_top_stroke();

  // optional .TSD.StrokeArchive category_level3_top_stroke = 64;
  bool has_category_level3_top_stroke() const;
  private:
  bool _internal_has_category_level3_top_stroke() const;
  public:
  void clear_category_level3_top_stroke();
  const ::TSD::StrokeArchive& category_level3_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level3_top_stroke();
  ::TSD::StrokeArchive* mutable_category_level3_top_stroke();
  void set_allocated_category_level3_top_stroke(::TSD::StrokeArchive* category_level3_top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level3_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level3_top_stroke();
  public:
  void unsafe_arena_set_allocated_category_level3_top_stroke(
      ::TSD::StrokeArchive* category_level3_top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level3_top_stroke();

  // optional .TSD.StrokeArchive category_level4_top_stroke = 65;
  bool has_category_level4_top_stroke() const;
  private:
  bool _internal_has_category_level4_top_stroke() const;
  public:
  void clear_category_level4_top_stroke();
  const ::TSD::StrokeArchive& category_level4_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level4_top_stroke();
  ::TSD::StrokeArchive* mutable_category_level4_top_stroke();
  void set_allocated_category_level4_top_stroke(::TSD::StrokeArchive* category_level4_top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level4_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level4_top_stroke();
  public:
  void unsafe_arena_set_allocated_category_level4_top_stroke(
      ::TSD::StrokeArchive* category_level4_top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level4_top_stroke();

  // optional .TSD.StrokeArchive category_level5_top_stroke = 66;
  bool has_category_level5_top_stroke() const;
  private:
  bool _internal_has_category_level5_top_stroke() const;
  public:
  void clear_category_level5_top_stroke();
  const ::TSD::StrokeArchive& category_level5_top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level5_top_stroke();
  ::TSD::StrokeArchive* mutable_category_level5_top_stroke();
  void set_allocated_category_level5_top_stroke(::TSD::StrokeArchive* category_level5_top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level5_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level5_top_stroke();
  public:
  void unsafe_arena_set_allocated_category_level5_top_stroke(
      ::TSD::StrokeArchive* category_level5_top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level5_top_stroke();

  // optional .TSD.StrokeArchive category_level1_bottom_stroke = 67;
  bool has_category_level1_bottom_stroke() const;
  private:
  bool _internal_has_category_level1_bottom_stroke() const;
  public:
  void clear_category_level1_bottom_stroke();
  const ::TSD::StrokeArchive& category_level1_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level1_bottom_stroke();
  ::TSD::StrokeArchive* mutable_category_level1_bottom_stroke();
  void set_allocated_category_level1_bottom_stroke(::TSD::StrokeArchive* category_level1_bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level1_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level1_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_category_level1_bottom_stroke(
      ::TSD::StrokeArchive* category_level1_bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level1_bottom_stroke();

  // optional .TSD.StrokeArchive category_level2_bottom_stroke = 68;
  bool has_category_level2_bottom_stroke() const;
  private:
  bool _internal_has_category_level2_bottom_stroke() const;
  public:
  void clear_category_level2_bottom_stroke();
  const ::TSD::StrokeArchive& category_level2_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level2_bottom_stroke();
  ::TSD::StrokeArchive* mutable_category_level2_bottom_stroke();
  void set_allocated_category_level2_bottom_stroke(::TSD::StrokeArchive* category_level2_bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level2_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level2_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_category_level2_bottom_stroke(
      ::TSD::StrokeArchive* category_level2_bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level2_bottom_stroke();

  // optional .TSD.StrokeArchive category_level3_bottom_stroke = 69;
  bool has_category_level3_bottom_stroke() const;
  private:
  bool _internal_has_category_level3_bottom_stroke() const;
  public:
  void clear_category_level3_bottom_stroke();
  const ::TSD::StrokeArchive& category_level3_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level3_bottom_stroke();
  ::TSD::StrokeArchive* mutable_category_level3_bottom_stroke();
  void set_allocated_category_level3_bottom_stroke(::TSD::StrokeArchive* category_level3_bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level3_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level3_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_category_level3_bottom_stroke(
      ::TSD::StrokeArchive* category_level3_bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level3_bottom_stroke();

  // optional .TSD.StrokeArchive category_level4_bottom_stroke = 70;
  bool has_category_level4_bottom_stroke() const;
  private:
  bool _internal_has_category_level4_bottom_stroke() const;
  public:
  void clear_category_level4_bottom_stroke();
  const ::TSD::StrokeArchive& category_level4_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level4_bottom_stroke();
  ::TSD::StrokeArchive* mutable_category_level4_bottom_stroke();
  void set_allocated_category_level4_bottom_stroke(::TSD::StrokeArchive* category_level4_bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level4_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level4_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_category_level4_bottom_stroke(
      ::TSD::StrokeArchive* category_level4_bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level4_bottom_stroke();

  // optional .TSD.StrokeArchive category_level5_bottom_stroke = 71;
  bool has_category_level5_bottom_stroke() const;
  private:
  bool _internal_has_category_level5_bottom_stroke() const;
  public:
  void clear_category_level5_bottom_stroke();
  const ::TSD::StrokeArchive& category_level5_bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level5_bottom_stroke();
  ::TSD::StrokeArchive* mutable_category_level5_bottom_stroke();
  void set_allocated_category_level5_bottom_stroke(::TSD::StrokeArchive* category_level5_bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level5_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level5_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_category_level5_bottom_stroke(
      ::TSD::StrokeArchive* category_level5_bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level5_bottom_stroke();

  // optional .TSD.StrokeArchive category_level1_interior_stroke = 72;
  bool has_category_level1_interior_stroke() const;
  private:
  bool _internal_has_category_level1_interior_stroke() const;
  public:
  void clear_category_level1_interior_stroke();
  const ::TSD::StrokeArchive& category_level1_interior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level1_interior_stroke();
  ::TSD::StrokeArchive* mutable_category_level1_interior_stroke();
  void set_allocated_category_level1_interior_stroke(::TSD::StrokeArchive* category_level1_interior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level1_interior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level1_interior_stroke();
  public:
  void unsafe_arena_set_allocated_category_level1_interior_stroke(
      ::TSD::StrokeArchive* category_level1_interior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level1_interior_stroke();

  // optional .TSD.StrokeArchive category_level2_interior_stroke = 73;
  bool has_category_level2_interior_stroke() const;
  private:
  bool _internal_has_category_level2_interior_stroke() const;
  public:
  void clear_category_level2_interior_stroke();
  const ::TSD::StrokeArchive& category_level2_interior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level2_interior_stroke();
  ::TSD::StrokeArchive* mutable_category_level2_interior_stroke();
  void set_allocated_category_level2_interior_stroke(::TSD::StrokeArchive* category_level2_interior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level2_interior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level2_interior_stroke();
  public:
  void unsafe_arena_set_allocated_category_level2_interior_stroke(
      ::TSD::StrokeArchive* category_level2_interior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level2_interior_stroke();

  // optional .TSD.StrokeArchive category_level3_interior_stroke = 74;
  bool has_category_level3_interior_stroke() const;
  private:
  bool _internal_has_category_level3_interior_stroke() const;
  public:
  void clear_category_level3_interior_stroke();
  const ::TSD::StrokeArchive& category_level3_interior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level3_interior_stroke();
  ::TSD::StrokeArchive* mutable_category_level3_interior_stroke();
  void set_allocated_category_level3_interior_stroke(::TSD::StrokeArchive* category_level3_interior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level3_interior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level3_interior_stroke();
  public:
  void unsafe_arena_set_allocated_category_level3_interior_stroke(
      ::TSD::StrokeArchive* category_level3_interior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level3_interior_stroke();

  // optional .TSD.StrokeArchive category_level4_interior_stroke = 75;
  bool has_category_level4_interior_stroke() const;
  private:
  bool _internal_has_category_level4_interior_stroke() const;
  public:
  void clear_category_level4_interior_stroke();
  const ::TSD::StrokeArchive& category_level4_interior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level4_interior_stroke();
  ::TSD::StrokeArchive* mutable_category_level4_interior_stroke();
  void set_allocated_category_level4_interior_stroke(::TSD::StrokeArchive* category_level4_interior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level4_interior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level4_interior_stroke();
  public:
  void unsafe_arena_set_allocated_category_level4_interior_stroke(
      ::TSD::StrokeArchive* category_level4_interior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level4_interior_stroke();

  // optional .TSD.StrokeArchive category_level5_interior_stroke = 76;
  bool has_category_level5_interior_stroke() const;
  private:
  bool _internal_has_category_level5_interior_stroke() const;
  public:
  void clear_category_level5_interior_stroke();
  const ::TSD::StrokeArchive& category_level5_interior_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level5_interior_stroke();
  ::TSD::StrokeArchive* mutable_category_level5_interior_stroke();
  void set_allocated_category_level5_interior_stroke(::TSD::StrokeArchive* category_level5_interior_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level5_interior_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level5_interior_stroke();
  public:
  void unsafe_arena_set_allocated_category_level5_interior_stroke(
      ::TSD::StrokeArchive* category_level5_interior_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level5_interior_stroke();

  // optional .TSD.StrokeArchive category_level1_label_separator_stroke = 77;
  bool has_category_level1_label_separator_stroke() const;
  private:
  bool _internal_has_category_level1_label_separator_stroke() const;
  public:
  void clear_category_level1_label_separator_stroke();
  const ::TSD::StrokeArchive& category_level1_label_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level1_label_separator_stroke();
  ::TSD::StrokeArchive* mutable_category_level1_label_separator_stroke();
  void set_allocated_category_level1_label_separator_stroke(::TSD::StrokeArchive* category_level1_label_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level1_label_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level1_label_separator_stroke();
  public:
  void unsafe_arena_set_allocated_category_level1_label_separator_stroke(
      ::TSD::StrokeArchive* category_level1_label_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level1_label_separator_stroke();

  // optional .TSD.StrokeArchive category_level2_label_separator_stroke = 78;
  bool has_category_level2_label_separator_stroke() const;
  private:
  bool _internal_has_category_level2_label_separator_stroke() const;
  public:
  void clear_category_level2_label_separator_stroke();
  const ::TSD::StrokeArchive& category_level2_label_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level2_label_separator_stroke();
  ::TSD::StrokeArchive* mutable_category_level2_label_separator_stroke();
  void set_allocated_category_level2_label_separator_stroke(::TSD::StrokeArchive* category_level2_label_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level2_label_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level2_label_separator_stroke();
  public:
  void unsafe_arena_set_allocated_category_level2_label_separator_stroke(
      ::TSD::StrokeArchive* category_level2_label_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level2_label_separator_stroke();

  // optional .TSD.StrokeArchive category_level3_label_separator_stroke = 79;
  bool has_category_level3_label_separator_stroke() const;
  private:
  bool _internal_has_category_level3_label_separator_stroke() const;
  public:
  void clear_category_level3_label_separator_stroke();
  const ::TSD::StrokeArchive& category_level3_label_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level3_label_separator_stroke();
  ::TSD::StrokeArchive* mutable_category_level3_label_separator_stroke();
  void set_allocated_category_level3_label_separator_stroke(::TSD::StrokeArchive* category_level3_label_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level3_label_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level3_label_separator_stroke();
  public:
  void unsafe_arena_set_allocated_category_level3_label_separator_stroke(
      ::TSD::StrokeArchive* category_level3_label_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level3_label_separator_stroke();

  // optional .TSD.StrokeArchive category_level4_label_separator_stroke = 80;
  bool has_category_level4_label_separator_stroke() const;
  private:
  bool _internal_has_category_level4_label_separator_stroke() const;
  public:
  void clear_category_level4_label_separator_stroke();
  const ::TSD::StrokeArchive& category_level4_label_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level4_label_separator_stroke();
  ::TSD::StrokeArchive* mutable_category_level4_label_separator_stroke();
  void set_allocated_category_level4_label_separator_stroke(::TSD::StrokeArchive* category_level4_label_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level4_label_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level4_label_separator_stroke();
  public:
  void unsafe_arena_set_allocated_category_level4_label_separator_stroke(
      ::TSD::StrokeArchive* category_level4_label_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level4_label_separator_stroke();

  // optional .TSD.StrokeArchive category_level5_label_separator_stroke = 81;
  bool has_category_level5_label_separator_stroke() const;
  private:
  bool _internal_has_category_level5_label_separator_stroke() const;
  public:
  void clear_category_level5_label_separator_stroke();
  const ::TSD::StrokeArchive& category_level5_label_separator_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_category_level5_label_separator_stroke();
  ::TSD::StrokeArchive* mutable_category_level5_label_separator_stroke();
  void set_allocated_category_level5_label_separator_stroke(::TSD::StrokeArchive* category_level5_label_separator_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_category_level5_label_separator_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_category_level5_label_separator_stroke();
  public:
  void unsafe_arena_set_allocated_category_level5_label_separator_stroke(
      ::TSD::StrokeArchive* category_level5_label_separator_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_category_level5_label_separator_stroke();

  // optional bool banded_rows = 1;
  bool has_banded_rows() const;
  private:
  bool _internal_has_banded_rows() const;
  public:
  void clear_banded_rows();
  bool banded_rows() const;
  void set_banded_rows(bool value);
  private:
  bool _internal_banded_rows() const;
  void _internal_set_banded_rows(bool value);
  public:

  // optional bool behaves_like_spreadsheet = 21;
  bool has_behaves_like_spreadsheet() const;
  private:
  bool _internal_has_behaves_like_spreadsheet() const;
  public:
  void clear_behaves_like_spreadsheet();
  bool behaves_like_spreadsheet() const;
  void set_behaves_like_spreadsheet(bool value);
  private:
  bool _internal_behaves_like_spreadsheet() const;
  void _internal_set_behaves_like_spreadsheet(bool value);
  public:

  // optional bool auto_resize = 22;
  bool has_auto_resize() const;
  private:
  bool _internal_has_auto_resize() const;
  public:
  void clear_auto_resize();
  bool auto_resize() const;
  void set_auto_resize(bool value);
  private:
  bool _internal_auto_resize() const;
  void _internal_set_auto_resize(bool value);
  public:

  // optional bool v_strokes_visible = 33;
  bool has_v_strokes_visible() const;
  private:
  bool _internal_has_v_strokes_visible() const;
  public:
  void clear_v_strokes_visible();
  bool v_strokes_visible() const;
  void set_v_strokes_visible(bool value);
  private:
  bool _internal_v_strokes_visible() const;
  void _internal_set_v_strokes_visible(bool value);
  public:

  // optional bool h_strokes_visible = 34;
  bool has_h_strokes_visible() const;
  private:
  bool _internal_has_h_strokes_visible() const;
  public:
  void clear_h_strokes_visible();
  bool h_strokes_visible() const;
  void set_h_strokes_visible(bool value);
  private:
  bool _internal_h_strokes_visible() const;
  void _internal_set_h_strokes_visible(bool value);
  public:

  // optional bool hr_separator_visible = 35;
  bool has_hr_separator_visible() const;
  private:
  bool _internal_has_hr_separator_visible() const;
  public:
  void clear_hr_separator_visible();
  bool hr_separator_visible() const;
  void set_hr_separator_visible(bool value);
  private:
  bool _internal_hr_separator_visible() const;
  void _internal_set_hr_separator_visible(bool value);
  public:

  // optional bool hc_separator_visible = 36;
  bool has_hc_separator_visible() const;
  private:
  bool _internal_has_hc_separator_visible() const;
  public:
  void clear_hc_separator_visible();
  bool hc_separator_visible() const;
  void set_hc_separator_visible(bool value);
  private:
  bool _internal_hc_separator_visible() const;
  void _internal_set_hc_separator_visible(bool value);
  public:

  // optional bool footer_separator_visible = 37;
  bool has_footer_separator_visible() const;
  private:
  bool _internal_has_footer_separator_visible() const;
  public:
  void clear_footer_separator_visible();
  bool footer_separator_visible() const;
  void set_footer_separator_visible(bool value);
  private:
  bool _internal_footer_separator_visible() const;
  void _internal_set_footer_separator_visible(bool value);
  public:

  // optional int32 OBSOLETE_master_font_size = 40;
  bool has_obsolete_master_font_size() const;
  private:
  bool _internal_has_obsolete_master_font_size() const;
  public:
  void clear_obsolete_master_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 obsolete_master_font_size() const;
  void set_obsolete_master_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obsolete_master_font_size() const;
  void _internal_set_obsolete_master_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool table_border_visible = 38;
  bool has_table_border_visible() const;
  private:
  bool _internal_has_table_border_visible() const;
  public:
  void clear_table_border_visible();
  bool table_border_visible() const;
  void set_table_border_visible(bool value);
  private:
  bool _internal_table_border_visible() const;
  void _internal_set_table_border_visible(bool value);
  public:

  // optional bool table_header_border_visible = 39;
  bool has_table_header_border_visible() const;
  private:
  bool _internal_has_table_header_border_visible() const;
  public:
  void clear_table_header_border_visible();
  bool table_header_border_visible() const;
  void set_table_header_border_visible(bool value);
  private:
  bool _internal_table_header_border_visible() const;
  void _internal_set_table_header_border_visible(bool value);
  public:

  // optional bool table_hc_divider_visible = 42;
  bool has_table_hc_divider_visible() const;
  private:
  bool _internal_has_table_hc_divider_visible() const;
  public:
  void clear_table_hc_divider_visible();
  bool table_hc_divider_visible() const;
  void set_table_hc_divider_visible(bool value);
  private:
  bool _internal_table_hc_divider_visible() const;
  void _internal_set_table_hc_divider_visible(bool value);
  public:

  // optional bool table_hr_divider_visible = 43;
  bool has_table_hr_divider_visible() const;
  private:
  bool _internal_has_table_hr_divider_visible() const;
  public:
  void clear_table_hr_divider_visible();
  bool table_hr_divider_visible() const;
  void set_table_hr_divider_visible(bool value);
  private:
  bool _internal_table_hr_divider_visible() const;
  void _internal_set_table_hr_divider_visible(bool value);
  public:

  // optional bool table_footer_divider_visible = 44;
  bool has_table_footer_divider_visible() const;
  private:
  bool _internal_has_table_footer_divider_visible() const;
  public:
  void clear_table_footer_divider_visible();
  bool table_footer_divider_visible() const;
  void set_table_footer_divider_visible(bool value);
  private:
  bool _internal_table_footer_divider_visible() const;
  void _internal_set_table_footer_divider_visible(bool value);
  public:

  // optional .TSWP.WritingDirectionType writing_direction = 45;
  bool has_writing_direction() const;
  private:
  bool _internal_has_writing_direction() const;
  public:
  void clear_writing_direction();
  ::TSWP::WritingDirectionType writing_direction() const;
  void set_writing_direction(::TSWP::WritingDirectionType value);
  private:
  ::TSWP::WritingDirectionType _internal_writing_direction() const;
  void _internal_set_writing_direction(::TSWP::WritingDirectionType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_font_family_;
  ::TSD::FillArchive* banded_fill_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke_;
  ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke_;
  ::TST::StrokePresetListArchive* stroke_preset_list_;
  ::TSD::StrokeArchive* header_row_separator_stroke_;
  ::TSD::StrokeArchive* header_row_border_stroke_;
  ::TSD::StrokeArchive* header_row_horizontal_stroke_;
  ::TSD::StrokeArchive* header_row_vertical_stroke_;
  ::TSD::StrokeArchive* header_column_border_stroke_;
  ::TSD::StrokeArchive* header_column_separator_stroke_;
  ::TSD::StrokeArchive* header_column_horizontal_stroke_;
  ::TSD::StrokeArchive* header_column_vertical_stroke_;
  ::TSD::StrokeArchive* footer_row_separator_stroke_;
  ::TSD::StrokeArchive* footer_row_border_stroke_;
  ::TSD::StrokeArchive* footer_row_horizontal_stroke_;
  ::TSD::StrokeArchive* footer_row_vertical_stroke_;
  ::TSD::StrokeArchive* table_body_horizontal_border_stroke_;
  ::TSD::StrokeArchive* table_body_vertical_border_stroke_;
  ::TSD::StrokeArchive* table_body_horizontal_stroke_;
  ::TSD::StrokeArchive* table_body_vertical_stroke_;
  ::TSD::StrokeArchive* category_level1_top_stroke_;
  ::TSD::StrokeArchive* category_level2_top_stroke_;
  ::TSD::StrokeArchive* category_level3_top_stroke_;
  ::TSD::StrokeArchive* category_level4_top_stroke_;
  ::TSD::StrokeArchive* category_level5_top_stroke_;
  ::TSD::StrokeArchive* category_level1_bottom_stroke_;
  ::TSD::StrokeArchive* category_level2_bottom_stroke_;
  ::TSD::StrokeArchive* category_level3_bottom_stroke_;
  ::TSD::StrokeArchive* category_level4_bottom_stroke_;
  ::TSD::StrokeArchive* category_level5_bottom_stroke_;
  ::TSD::StrokeArchive* category_level1_interior_stroke_;
  ::TSD::StrokeArchive* category_level2_interior_stroke_;
  ::TSD::StrokeArchive* category_level3_interior_stroke_;
  ::TSD::StrokeArchive* category_level4_interior_stroke_;
  ::TSD::StrokeArchive* category_level5_interior_stroke_;
  ::TSD::StrokeArchive* category_level1_label_separator_stroke_;
  ::TSD::StrokeArchive* category_level2_label_separator_stroke_;
  ::TSD::StrokeArchive* category_level3_label_separator_stroke_;
  ::TSD::StrokeArchive* category_level4_label_separator_stroke_;
  ::TSD::StrokeArchive* category_level5_label_separator_stroke_;
  bool banded_rows_;
  bool behaves_like_spreadsheet_;
  bool auto_resize_;
  bool v_strokes_visible_;
  bool h_strokes_visible_;
  bool hr_separator_visible_;
  bool hc_separator_visible_;
  bool footer_separator_visible_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsolete_master_font_size_;
  bool table_border_visible_;
  bool table_header_border_visible_;
  bool table_hc_divider_visible_;
  bool table_hr_divider_visible_;
  bool table_footer_divider_visible_;
  int writing_direction_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class TableStylePresetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableStylePresetArchive) */ {
 public:
  inline TableStylePresetArchive() : TableStylePresetArchive(nullptr) {}
  ~TableStylePresetArchive() override;
  explicit constexpr TableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableStylePresetArchive(const TableStylePresetArchive& from);
  TableStylePresetArchive(TableStylePresetArchive&& from) noexcept
    : TableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline TableStylePresetArchive& operator=(const TableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStylePresetArchive& operator=(TableStylePresetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const TableStylePresetArchive*>(
               &_TableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TableStylePresetArchive& a, TableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStylePresetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStylePresetArchive* New() const final {
    return CreateMaybeMessage<TableStylePresetArchive>(nullptr);
  }

  TableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStylePresetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStylePresetArchive& from);
  void MergeFrom(const TableStylePresetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStylePresetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableStylePresetArchive";
  }
  protected:
  explicit TableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kStyleNetworkFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // optional .TSP.Reference image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::TSP::Reference& image() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_image();
  ::TSP::Reference* mutable_image();
  void set_allocated_image(::TSP::Reference* image);
  private:
  const ::TSP::Reference& _internal_image() const;
  ::TSP::Reference* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::TSP::Reference* image);
  ::TSP::Reference* unsafe_arena_release_image();

  // optional .TSP.Reference style_network = 3;
  bool has_style_network() const;
  private:
  bool _internal_has_style_network() const;
  public:
  void clear_style_network();
  const ::TSP::Reference& style_network() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style_network();
  ::TSP::Reference* mutable_style_network();
  void set_allocated_style_network(::TSP::Reference* style_network);
  private:
  const ::TSP::Reference& _internal_style_network() const;
  ::TSP::Reference* _internal_mutable_style_network();
  public:
  void unsafe_arena_set_allocated_style_network(
      ::TSP::Reference* style_network);
  ::TSP::Reference* unsafe_arena_release_style_network();

  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableStylePresetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* image_;
  ::TSP::Reference* style_network_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class TableStrokePresetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableStrokePresetArchive) */ {
 public:
  inline TableStrokePresetArchive() : TableStrokePresetArchive(nullptr) {}
  ~TableStrokePresetArchive() override;
  explicit constexpr TableStrokePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableStrokePresetArchive(const TableStrokePresetArchive& from);
  TableStrokePresetArchive(TableStrokePresetArchive&& from) noexcept
    : TableStrokePresetArchive() {
    *this = ::std::move(from);
  }

  inline TableStrokePresetArchive& operator=(const TableStrokePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStrokePresetArchive& operator=(TableStrokePresetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStrokePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStrokePresetArchive* internal_default_instance() {
    return reinterpret_cast<const TableStrokePresetArchive*>(
               &_TableStrokePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TableStrokePresetArchive& a, TableStrokePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStrokePresetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStrokePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStrokePresetArchive* New() const final {
    return CreateMaybeMessage<TableStrokePresetArchive>(nullptr);
  }

  TableStrokePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStrokePresetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStrokePresetArchive& from);
  void MergeFrom(const TableStrokePresetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStrokePresetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableStrokePresetArchive";
  }
  protected:
  explicit TableStrokePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // required int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableStrokePresetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// -------------------------------------------------------------------

class ThemePresetsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ThemePresetsArchive) */ {
 public:
  inline ThemePresetsArchive() : ThemePresetsArchive(nullptr) {}
  ~ThemePresetsArchive() override;
  explicit constexpr ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemePresetsArchive(const ThemePresetsArchive& from);
  ThemePresetsArchive(ThemePresetsArchive&& from) noexcept
    : ThemePresetsArchive() {
    *this = ::std::move(from);
  }

  inline ThemePresetsArchive& operator=(const ThemePresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemePresetsArchive& operator=(ThemePresetsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemePresetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemePresetsArchive* internal_default_instance() {
    return reinterpret_cast<const ThemePresetsArchive*>(
               &_ThemePresetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ThemePresetsArchive& a, ThemePresetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemePresetsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemePresetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemePresetsArchive* New() const final {
    return CreateMaybeMessage<ThemePresetsArchive>(nullptr);
  }

  ThemePresetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemePresetsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemePresetsArchive& from);
  void MergeFrom(const ThemePresetsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemePresetsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ThemePresetsArchive";
  }
  protected:
  explicit ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableStylePresetsFieldNumber = 1,
    kTableCellStrokePresetsFieldNumber = 2,
  };
  // repeated .TSP.Reference table_style_presets = 1;
  int table_style_presets_size() const;
  private:
  int _internal_table_style_presets_size() const;
  public:
  void clear_table_style_presets();
  ::TSP::Reference* mutable_table_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_table_style_presets();
  private:
  const ::TSP::Reference& _internal_table_style_presets(int index) const;
  ::TSP::Reference* _internal_add_table_style_presets();
  public:
  const ::TSP::Reference& table_style_presets(int index) const;
  ::TSP::Reference* add_table_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      table_style_presets() const;

  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  int table_cell_stroke_presets_size() const;
  private:
  int _internal_table_cell_stroke_presets_size() const;
  public:
  void clear_table_cell_stroke_presets();
  ::TSP::Reference* mutable_table_cell_stroke_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_table_cell_stroke_presets();
  private:
  const ::TSP::Reference& _internal_table_cell_stroke_presets(int index) const;
  ::TSP::Reference* _internal_add_table_cell_stroke_presets();
  public:
  const ::TSP::Reference& table_cell_stroke_presets(int index) const;
  ::TSP::Reference* add_table_cell_stroke_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      table_cell_stroke_presets() const;

  static const int kExtensionFieldNumber = 200;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::ThemePresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TST.ThemePresetsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > table_style_presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > table_cell_stroke_presets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTStylePropertyArchiving_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Deprecated_TableStrokeArchive

// optional .TSD.StrokeArchive stroke = 1;
inline bool Deprecated_TableStrokeArchive::_internal_has_stroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stroke_ != nullptr);
  return value;
}
inline bool Deprecated_TableStrokeArchive::has_stroke() const {
  return _internal_has_stroke();
}
inline const ::TSD::StrokeArchive& Deprecated_TableStrokeArchive::_internal_stroke() const {
  const ::TSD::StrokeArchive* p = stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& Deprecated_TableStrokeArchive::stroke() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_TableStrokeArchive.stroke)
  return _internal_stroke();
}
inline void Deprecated_TableStrokeArchive::unsafe_arena_set_allocated_stroke(
    ::TSD::StrokeArchive* stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  stroke_ = stroke;
  if (stroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Deprecated_TableStrokeArchive.stroke)
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::release_stroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::unsafe_arena_release_stroke() {
  // @@protoc_insertion_point(field_release:TST.Deprecated_TableStrokeArchive.stroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::_internal_mutable_stroke() {
  _has_bits_[0] |= 0x00000001u;
  if (stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    stroke_ = p;
  }
  return stroke_;
}
inline ::TSD::StrokeArchive* Deprecated_TableStrokeArchive::mutable_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.Deprecated_TableStrokeArchive.stroke)
  return _internal_mutable_stroke();
}
inline void Deprecated_TableStrokeArchive::set_allocated_stroke(::TSD::StrokeArchive* stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  if (stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke)->GetArena();
    if (message_arena != submessage_arena) {
      stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stroke_ = stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.Deprecated_TableStrokeArchive.stroke)
}

// optional bool background = 2 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Deprecated_TableStrokeArchive::has_background() const {
  return _internal_has_background();
}
inline void Deprecated_TableStrokeArchive::clear_background() {
  background_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Deprecated_TableStrokeArchive::_internal_background() const {
  return background_;
}
inline bool Deprecated_TableStrokeArchive::background() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_TableStrokeArchive.background)
  return _internal_background();
}
inline void Deprecated_TableStrokeArchive::_internal_set_background(bool value) {
  _has_bits_[0] |= 0x00000004u;
  background_ = value;
}
inline void Deprecated_TableStrokeArchive::set_background(bool value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:TST.Deprecated_TableStrokeArchive.background)
}

// optional float opacity = 3 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::_internal_has_opacity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Deprecated_TableStrokeArchive::has_opacity() const {
  return _internal_has_opacity();
}
inline void Deprecated_TableStrokeArchive::clear_opacity() {
  opacity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Deprecated_TableStrokeArchive::_internal_opacity() const {
  return opacity_;
}
inline float Deprecated_TableStrokeArchive::opacity() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_TableStrokeArchive.opacity)
  return _internal_opacity();
}
inline void Deprecated_TableStrokeArchive::_internal_set_opacity(float value) {
  _has_bits_[0] |= 0x00000002u;
  opacity_ = value;
}
inline void Deprecated_TableStrokeArchive::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:TST.Deprecated_TableStrokeArchive.opacity)
}

// optional bool empty = 4 [deprecated = true];
inline bool Deprecated_TableStrokeArchive::_internal_has_empty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Deprecated_TableStrokeArchive::has_empty() const {
  return _internal_has_empty();
}
inline void Deprecated_TableStrokeArchive::clear_empty() {
  empty_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Deprecated_TableStrokeArchive::_internal_empty() const {
  return empty_;
}
inline bool Deprecated_TableStrokeArchive::empty() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_TableStrokeArchive.empty)
  return _internal_empty();
}
inline void Deprecated_TableStrokeArchive::_internal_set_empty(bool value) {
  _has_bits_[0] |= 0x00000008u;
  empty_ = value;
}
inline void Deprecated_TableStrokeArchive::set_empty(bool value) {
  _internal_set_empty(value);
  // @@protoc_insertion_point(field_set:TST.Deprecated_TableStrokeArchive.empty)
}

// -------------------------------------------------------------------

// CellStylePropertiesArchive

// optional .TSD.FillArchive cell_fill = 1;
inline bool CellStylePropertiesArchive::_internal_has_cell_fill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_fill_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_cell_fill() const {
  return _internal_has_cell_fill();
}
inline const ::TSD::FillArchive& CellStylePropertiesArchive::_internal_cell_fill() const {
  const ::TSD::FillArchive* p = cell_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CellStylePropertiesArchive::cell_fill() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.cell_fill)
  return _internal_cell_fill();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_cell_fill(
    ::TSD::FillArchive* cell_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_fill_);
  }
  cell_fill_ = cell_fill;
  if (cell_fill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.cell_fill)
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::release_cell_fill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = cell_fill_;
  cell_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::unsafe_arena_release_cell_fill() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.cell_fill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = cell_fill_;
  cell_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::_internal_mutable_cell_fill() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    cell_fill_ = p;
  }
  return cell_fill_;
}
inline ::TSD::FillArchive* CellStylePropertiesArchive::mutable_cell_fill() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.cell_fill)
  return _internal_mutable_cell_fill();
}
inline void CellStylePropertiesArchive::set_allocated_cell_fill(::TSD::FillArchive* cell_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_fill_);
  }
  if (cell_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_fill)->GetArena();
    if (message_arena != submessage_arena) {
      cell_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_fill_ = cell_fill;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.cell_fill)
}

// optional bool text_wrap = 3;
inline bool CellStylePropertiesArchive::_internal_has_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CellStylePropertiesArchive::has_text_wrap() const {
  return _internal_has_text_wrap();
}
inline void CellStylePropertiesArchive::clear_text_wrap() {
  text_wrap_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CellStylePropertiesArchive::_internal_text_wrap() const {
  return text_wrap_;
}
inline bool CellStylePropertiesArchive::text_wrap() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.text_wrap)
  return _internal_text_wrap();
}
inline void CellStylePropertiesArchive::_internal_set_text_wrap(bool value) {
  _has_bits_[0] |= 0x00000400u;
  text_wrap_ = value;
}
inline void CellStylePropertiesArchive::set_text_wrap(bool value) {
  _internal_set_text_wrap(value);
  // @@protoc_insertion_point(field_set:TST.CellStylePropertiesArchive.text_wrap)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
inline bool CellStylePropertiesArchive::_internal_has_deprecated_top_stroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_top_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_deprecated_top_stroke() const {
  return _internal_has_deprecated_top_stroke();
}
inline void CellStylePropertiesArchive::clear_deprecated_top_stroke() {
  if (deprecated_top_stroke_ != nullptr) deprecated_top_stroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::_internal_deprecated_top_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.deprecated_top_stroke)
  return _internal_deprecated_top_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_top_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_top_stroke_);
  }
  deprecated_top_stroke_ = deprecated_top_stroke;
  if (deprecated_top_stroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.deprecated_top_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_top_stroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_top_stroke_;
  deprecated_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_deprecated_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.deprecated_top_stroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_top_stroke_;
  deprecated_top_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::_internal_mutable_deprecated_top_stroke() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_top_stroke_ = p;
  }
  return deprecated_top_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.deprecated_top_stroke)
  return _internal_mutable_deprecated_top_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_deprecated_top_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_top_stroke_;
  }
  if (deprecated_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_top_stroke);
    if (message_arena != submessage_arena) {
      deprecated_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_top_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_top_stroke_ = deprecated_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.deprecated_top_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
inline bool CellStylePropertiesArchive::_internal_has_deprecated_right_stroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_right_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_deprecated_right_stroke() const {
  return _internal_has_deprecated_right_stroke();
}
inline void CellStylePropertiesArchive::clear_deprecated_right_stroke() {
  if (deprecated_right_stroke_ != nullptr) deprecated_right_stroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::_internal_deprecated_right_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_right_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_right_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.deprecated_right_stroke)
  return _internal_deprecated_right_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_right_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_right_stroke_);
  }
  deprecated_right_stroke_ = deprecated_right_stroke;
  if (deprecated_right_stroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.deprecated_right_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_right_stroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_right_stroke_;
  deprecated_right_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_deprecated_right_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.deprecated_right_stroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_right_stroke_;
  deprecated_right_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::_internal_mutable_deprecated_right_stroke() {
  _has_bits_[0] |= 0x00000004u;
  if (deprecated_right_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_right_stroke_ = p;
  }
  return deprecated_right_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_right_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.deprecated_right_stroke)
  return _internal_mutable_deprecated_right_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_deprecated_right_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_right_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_right_stroke_;
  }
  if (deprecated_right_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_right_stroke);
    if (message_arena != submessage_arena) {
      deprecated_right_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_right_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deprecated_right_stroke_ = deprecated_right_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.deprecated_right_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
inline bool CellStylePropertiesArchive::_internal_has_deprecated_bottom_stroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_bottom_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_deprecated_bottom_stroke() const {
  return _internal_has_deprecated_bottom_stroke();
}
inline void CellStylePropertiesArchive::clear_deprecated_bottom_stroke() {
  if (deprecated_bottom_stroke_ != nullptr) deprecated_bottom_stroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::_internal_deprecated_bottom_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.deprecated_bottom_stroke)
  return _internal_deprecated_bottom_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_bottom_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_bottom_stroke_);
  }
  deprecated_bottom_stroke_ = deprecated_bottom_stroke;
  if (deprecated_bottom_stroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.deprecated_bottom_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_bottom_stroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_bottom_stroke_;
  deprecated_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_deprecated_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.deprecated_bottom_stroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_bottom_stroke_;
  deprecated_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::_internal_mutable_deprecated_bottom_stroke() {
  _has_bits_[0] |= 0x00000008u;
  if (deprecated_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_bottom_stroke_ = p;
  }
  return deprecated_bottom_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.deprecated_bottom_stroke)
  return _internal_mutable_deprecated_bottom_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_deprecated_bottom_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_bottom_stroke_;
  }
  if (deprecated_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_bottom_stroke);
    if (message_arena != submessage_arena) {
      deprecated_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_bottom_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deprecated_bottom_stroke_ = deprecated_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.deprecated_bottom_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
inline bool CellStylePropertiesArchive::_internal_has_deprecated_left_stroke() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_left_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_deprecated_left_stroke() const {
  return _internal_has_deprecated_left_stroke();
}
inline void CellStylePropertiesArchive::clear_deprecated_left_stroke() {
  if (deprecated_left_stroke_ != nullptr) deprecated_left_stroke_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::_internal_deprecated_left_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_left_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& CellStylePropertiesArchive::deprecated_left_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.deprecated_left_stroke)
  return _internal_deprecated_left_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_left_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_left_stroke_);
  }
  deprecated_left_stroke_ = deprecated_left_stroke;
  if (deprecated_left_stroke) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.deprecated_left_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::release_deprecated_left_stroke() {
  _has_bits_[0] &= ~0x00000010u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_left_stroke_;
  deprecated_left_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_deprecated_left_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.deprecated_left_stroke)
  _has_bits_[0] &= ~0x00000010u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_left_stroke_;
  deprecated_left_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::_internal_mutable_deprecated_left_stroke() {
  _has_bits_[0] |= 0x00000010u;
  if (deprecated_left_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_left_stroke_ = p;
  }
  return deprecated_left_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* CellStylePropertiesArchive::mutable_deprecated_left_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.deprecated_left_stroke)
  return _internal_mutable_deprecated_left_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_deprecated_left_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_left_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_left_stroke_;
  }
  if (deprecated_left_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_left_stroke);
    if (message_arena != submessage_arena) {
      deprecated_left_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_left_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  deprecated_left_stroke_ = deprecated_left_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.deprecated_left_stroke)
}

// optional int32 vertical_alignment = 8;
inline bool CellStylePropertiesArchive::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CellStylePropertiesArchive::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void CellStylePropertiesArchive::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellStylePropertiesArchive::_internal_vertical_alignment() const {
  return vertical_alignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellStylePropertiesArchive::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void CellStylePropertiesArchive::_internal_set_vertical_alignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  vertical_alignment_ = value;
}
inline void CellStylePropertiesArchive::set_vertical_alignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:TST.CellStylePropertiesArchive.vertical_alignment)
}

// optional .TSWP.PaddingArchive padding = 9;
inline bool CellStylePropertiesArchive::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || padding_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_padding() const {
  return _internal_has_padding();
}
inline const ::TSWP::PaddingArchive& CellStylePropertiesArchive::_internal_padding() const {
  const ::TSWP::PaddingArchive* p = padding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::PaddingArchive&>(
      ::TSWP::_PaddingArchive_default_instance_);
}
inline const ::TSWP::PaddingArchive& CellStylePropertiesArchive::padding() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.padding)
  return _internal_padding();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_padding(
    ::TSWP::PaddingArchive* padding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(padding_);
  }
  padding_ = padding;
  if (padding) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.padding)
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::release_padding() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::unsafe_arena_release_padding() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.padding)
  _has_bits_[0] &= ~0x00000020u;
  ::TSWP::PaddingArchive* temp = padding_;
  padding_ = nullptr;
  return temp;
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000020u;
  if (padding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::PaddingArchive>(GetArena());
    padding_ = p;
  }
  return padding_;
}
inline ::TSWP::PaddingArchive* CellStylePropertiesArchive::mutable_padding() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.padding)
  return _internal_mutable_padding();
}
inline void CellStylePropertiesArchive::set_allocated_padding(::TSWP::PaddingArchive* padding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(padding_);
  }
  if (padding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(padding)->GetArena();
    if (message_arena != submessage_arena) {
      padding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, padding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  padding_ = padding;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.padding)
}

// optional .TSD.StrokeArchive top_stroke = 10;
inline bool CellStylePropertiesArchive::_internal_has_top_stroke() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || top_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_top_stroke() const {
  return _internal_has_top_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::_internal_top_stroke() const {
  const ::TSD::StrokeArchive* p = top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.top_stroke)
  return _internal_top_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_top_stroke(
    ::TSD::StrokeArchive* top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke_);
  }
  top_stroke_ = top_stroke;
  if (top_stroke) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.top_stroke)
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_top_stroke() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = top_stroke_;
  top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.top_stroke)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = top_stroke_;
  top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::_internal_mutable_top_stroke() {
  _has_bits_[0] |= 0x00000040u;
  if (top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    top_stroke_ = p;
  }
  return top_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.top_stroke)
  return _internal_mutable_top_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_top_stroke(::TSD::StrokeArchive* top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke_);
  }
  if (top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  top_stroke_ = top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.top_stroke)
}

// optional .TSD.StrokeArchive right_stroke = 11;
inline bool CellStylePropertiesArchive::_internal_has_right_stroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || right_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_right_stroke() const {
  return _internal_has_right_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::_internal_right_stroke() const {
  const ::TSD::StrokeArchive* p = right_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::right_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.right_stroke)
  return _internal_right_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_right_stroke(
    ::TSD::StrokeArchive* right_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke_);
  }
  right_stroke_ = right_stroke;
  if (right_stroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.right_stroke)
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_right_stroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = right_stroke_;
  right_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_right_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.right_stroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = right_stroke_;
  right_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::_internal_mutable_right_stroke() {
  _has_bits_[0] |= 0x00000080u;
  if (right_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    right_stroke_ = p;
  }
  return right_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_right_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.right_stroke)
  return _internal_mutable_right_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_right_stroke(::TSD::StrokeArchive* right_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke_);
  }
  if (right_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      right_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  right_stroke_ = right_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.right_stroke)
}

// optional .TSD.StrokeArchive bottom_stroke = 12;
inline bool CellStylePropertiesArchive::_internal_has_bottom_stroke() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || bottom_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_bottom_stroke() const {
  return _internal_has_bottom_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::_internal_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.bottom_stroke)
  return _internal_bottom_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_bottom_stroke(
    ::TSD::StrokeArchive* bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke_);
  }
  bottom_stroke_ = bottom_stroke;
  if (bottom_stroke) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.bottom_stroke)
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_bottom_stroke() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = bottom_stroke_;
  bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.bottom_stroke)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = bottom_stroke_;
  bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::_internal_mutable_bottom_stroke() {
  _has_bits_[0] |= 0x00000100u;
  if (bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    bottom_stroke_ = p;
  }
  return bottom_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.bottom_stroke)
  return _internal_mutable_bottom_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_bottom_stroke(::TSD::StrokeArchive* bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke_);
  }
  if (bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  bottom_stroke_ = bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.bottom_stroke)
}

// optional .TSD.StrokeArchive left_stroke = 13;
inline bool CellStylePropertiesArchive::_internal_has_left_stroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || left_stroke_ != nullptr);
  return value;
}
inline bool CellStylePropertiesArchive::has_left_stroke() const {
  return _internal_has_left_stroke();
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::_internal_left_stroke() const {
  const ::TSD::StrokeArchive* p = left_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellStylePropertiesArchive::left_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellStylePropertiesArchive.left_stroke)
  return _internal_left_stroke();
}
inline void CellStylePropertiesArchive::unsafe_arena_set_allocated_left_stroke(
    ::TSD::StrokeArchive* left_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke_);
  }
  left_stroke_ = left_stroke;
  if (left_stroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStylePropertiesArchive.left_stroke)
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::release_left_stroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = left_stroke_;
  left_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::unsafe_arena_release_left_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellStylePropertiesArchive.left_stroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = left_stroke_;
  left_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::_internal_mutable_left_stroke() {
  _has_bits_[0] |= 0x00000200u;
  if (left_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    left_stroke_ = p;
  }
  return left_stroke_;
}
inline ::TSD::StrokeArchive* CellStylePropertiesArchive::mutable_left_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellStylePropertiesArchive.left_stroke)
  return _internal_mutable_left_stroke();
}
inline void CellStylePropertiesArchive::set_allocated_left_stroke(::TSD::StrokeArchive* left_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke_);
  }
  if (left_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      left_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  left_stroke_ = left_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStylePropertiesArchive.left_stroke)
}

// -------------------------------------------------------------------

// Deprecated_StrokePresetDataArchive

// required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
inline bool Deprecated_StrokePresetDataArchive::_internal_has_deprecated_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_horizontal_stroke_ != nullptr);
  return value;
}
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_horizontal_stroke() const {
  return _internal_has_deprecated_horizontal_stroke();
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_horizontal_stroke() {
  if (deprecated_horizontal_stroke_ != nullptr) deprecated_horizontal_stroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::_internal_deprecated_horizontal_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke)
  return _internal_deprecated_horizontal_stroke();
}
inline void Deprecated_StrokePresetDataArchive::unsafe_arena_set_allocated_deprecated_horizontal_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_horizontal_stroke_);
  }
  deprecated_horizontal_stroke_ = deprecated_horizontal_stroke;
  if (deprecated_horizontal_stroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_horizontal_stroke_;
  deprecated_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::unsafe_arena_release_deprecated_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_horizontal_stroke_;
  deprecated_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::_internal_mutable_deprecated_horizontal_stroke() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_horizontal_stroke_ = p;
  }
  return deprecated_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke)
  return _internal_mutable_deprecated_horizontal_stroke();
}
inline void Deprecated_StrokePresetDataArchive::set_allocated_deprecated_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_horizontal_stroke_;
  }
  if (deprecated_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_horizontal_stroke);
    if (message_arena != submessage_arena) {
      deprecated_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_horizontal_stroke_ = deprecated_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke)
}

// required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
inline bool Deprecated_StrokePresetDataArchive::_internal_has_deprecated_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_vertical_stroke_ != nullptr);
  return value;
}
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_vertical_stroke() const {
  return _internal_has_deprecated_vertical_stroke();
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_vertical_stroke() {
  if (deprecated_vertical_stroke_ != nullptr) deprecated_vertical_stroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::_internal_deprecated_vertical_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke)
  return _internal_deprecated_vertical_stroke();
}
inline void Deprecated_StrokePresetDataArchive::unsafe_arena_set_allocated_deprecated_vertical_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_vertical_stroke_);
  }
  deprecated_vertical_stroke_ = deprecated_vertical_stroke;
  if (deprecated_vertical_stroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_vertical_stroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_vertical_stroke_;
  deprecated_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::unsafe_arena_release_deprecated_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_vertical_stroke_;
  deprecated_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::_internal_mutable_deprecated_vertical_stroke() {
  _has_bits_[0] |= 0x00000001u;
  if (deprecated_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_vertical_stroke_ = p;
  }
  return deprecated_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke)
  return _internal_mutable_deprecated_vertical_stroke();
}
inline void Deprecated_StrokePresetDataArchive::set_allocated_deprecated_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_vertical_stroke_;
  }
  if (deprecated_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_vertical_stroke);
    if (message_arena != submessage_arena) {
      deprecated_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_vertical_stroke_ = deprecated_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke)
}

// required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
inline bool Deprecated_StrokePresetDataArchive::_internal_has_deprecated_exterior_stroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_exterior_stroke_ != nullptr);
  return value;
}
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_exterior_stroke() const {
  return _internal_has_deprecated_exterior_stroke();
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_exterior_stroke() {
  if (deprecated_exterior_stroke_ != nullptr) deprecated_exterior_stroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::_internal_deprecated_exterior_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_exterior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& Deprecated_StrokePresetDataArchive::deprecated_exterior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke)
  return _internal_deprecated_exterior_stroke();
}
inline void Deprecated_StrokePresetDataArchive::unsafe_arena_set_allocated_deprecated_exterior_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_exterior_stroke_);
  }
  deprecated_exterior_stroke_ = deprecated_exterior_stroke;
  if (deprecated_exterior_stroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::release_deprecated_exterior_stroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_exterior_stroke_;
  deprecated_exterior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::unsafe_arena_release_deprecated_exterior_stroke() {
  // @@protoc_insertion_point(field_release:TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_exterior_stroke_;
  deprecated_exterior_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::_internal_mutable_deprecated_exterior_stroke() {
  _has_bits_[0] |= 0x00000004u;
  if (deprecated_exterior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_exterior_stroke_ = p;
  }
  return deprecated_exterior_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* Deprecated_StrokePresetDataArchive::mutable_deprecated_exterior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke)
  return _internal_mutable_deprecated_exterior_stroke();
}
inline void Deprecated_StrokePresetDataArchive::set_allocated_deprecated_exterior_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_exterior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_exterior_stroke_;
  }
  if (deprecated_exterior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_exterior_stroke);
    if (message_arena != submessage_arena) {
      deprecated_exterior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_exterior_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deprecated_exterior_stroke_ = deprecated_exterior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke)
}

// required int32 deprecated_visible_mask = 5;
inline bool Deprecated_StrokePresetDataArchive::_internal_has_deprecated_visible_mask() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Deprecated_StrokePresetDataArchive::has_deprecated_visible_mask() const {
  return _internal_has_deprecated_visible_mask();
}
inline void Deprecated_StrokePresetDataArchive::clear_deprecated_visible_mask() {
  deprecated_visible_mask_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Deprecated_StrokePresetDataArchive::_internal_deprecated_visible_mask() const {
  return deprecated_visible_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Deprecated_StrokePresetDataArchive::deprecated_visible_mask() const {
  // @@protoc_insertion_point(field_get:TST.Deprecated_StrokePresetDataArchive.deprecated_visible_mask)
  return _internal_deprecated_visible_mask();
}
inline void Deprecated_StrokePresetDataArchive::_internal_set_deprecated_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  deprecated_visible_mask_ = value;
}
inline void Deprecated_StrokePresetDataArchive::set_deprecated_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deprecated_visible_mask(value);
  // @@protoc_insertion_point(field_set:TST.Deprecated_StrokePresetDataArchive.deprecated_visible_mask)
}

// -------------------------------------------------------------------

// StrokePresetDataArchive

// optional .TSD.StrokeArchive horizontal_stroke = 1;
inline bool StrokePresetDataArchive::_internal_has_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || horizontal_stroke_ != nullptr);
  return value;
}
inline bool StrokePresetDataArchive::has_horizontal_stroke() const {
  return _internal_has_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::_internal_horizontal_stroke() const {
  const ::TSD::StrokeArchive* p = horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetDataArchive.horizontal_stroke)
  return _internal_horizontal_stroke();
}
inline void StrokePresetDataArchive::unsafe_arena_set_allocated_horizontal_stroke(
    ::TSD::StrokeArchive* horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontal_stroke_);
  }
  horizontal_stroke_ = horizontal_stroke;
  if (horizontal_stroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokePresetDataArchive.horizontal_stroke)
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = horizontal_stroke_;
  horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::unsafe_arena_release_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.StrokePresetDataArchive.horizontal_stroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = horizontal_stroke_;
  horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::_internal_mutable_horizontal_stroke() {
  _has_bits_[0] |= 0x00000001u;
  if (horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    horizontal_stroke_ = p;
  }
  return horizontal_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.StrokePresetDataArchive.horizontal_stroke)
  return _internal_mutable_horizontal_stroke();
}
inline void StrokePresetDataArchive::set_allocated_horizontal_stroke(::TSD::StrokeArchive* horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontal_stroke_);
  }
  if (horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontal_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  horizontal_stroke_ = horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokePresetDataArchive.horizontal_stroke)
}

// optional .TSD.StrokeArchive vertical_stroke = 2;
inline bool StrokePresetDataArchive::_internal_has_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vertical_stroke_ != nullptr);
  return value;
}
inline bool StrokePresetDataArchive::has_vertical_stroke() const {
  return _internal_has_vertical_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::_internal_vertical_stroke() const {
  const ::TSD::StrokeArchive* p = vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetDataArchive.vertical_stroke)
  return _internal_vertical_stroke();
}
inline void StrokePresetDataArchive::unsafe_arena_set_allocated_vertical_stroke(
    ::TSD::StrokeArchive* vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertical_stroke_);
  }
  vertical_stroke_ = vertical_stroke;
  if (vertical_stroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokePresetDataArchive.vertical_stroke)
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_vertical_stroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = vertical_stroke_;
  vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::unsafe_arena_release_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.StrokePresetDataArchive.vertical_stroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = vertical_stroke_;
  vertical_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::_internal_mutable_vertical_stroke() {
  _has_bits_[0] |= 0x00000002u;
  if (vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    vertical_stroke_ = p;
  }
  return vertical_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.StrokePresetDataArchive.vertical_stroke)
  return _internal_mutable_vertical_stroke();
}
inline void StrokePresetDataArchive::set_allocated_vertical_stroke(::TSD::StrokeArchive* vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertical_stroke_);
  }
  if (vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertical_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vertical_stroke_ = vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokePresetDataArchive.vertical_stroke)
}

// optional .TSD.StrokeArchive exterior_stroke = 3;
inline bool StrokePresetDataArchive::_internal_has_exterior_stroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || exterior_stroke_ != nullptr);
  return value;
}
inline bool StrokePresetDataArchive::has_exterior_stroke() const {
  return _internal_has_exterior_stroke();
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::_internal_exterior_stroke() const {
  const ::TSD::StrokeArchive* p = exterior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& StrokePresetDataArchive::exterior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetDataArchive.exterior_stroke)
  return _internal_exterior_stroke();
}
inline void StrokePresetDataArchive::unsafe_arena_set_allocated_exterior_stroke(
    ::TSD::StrokeArchive* exterior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_stroke_);
  }
  exterior_stroke_ = exterior_stroke;
  if (exterior_stroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokePresetDataArchive.exterior_stroke)
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::release_exterior_stroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = exterior_stroke_;
  exterior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::unsafe_arena_release_exterior_stroke() {
  // @@protoc_insertion_point(field_release:TST.StrokePresetDataArchive.exterior_stroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = exterior_stroke_;
  exterior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::_internal_mutable_exterior_stroke() {
  _has_bits_[0] |= 0x00000004u;
  if (exterior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    exterior_stroke_ = p;
  }
  return exterior_stroke_;
}
inline ::TSD::StrokeArchive* StrokePresetDataArchive::mutable_exterior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.StrokePresetDataArchive.exterior_stroke)
  return _internal_mutable_exterior_stroke();
}
inline void StrokePresetDataArchive::set_allocated_exterior_stroke(::TSD::StrokeArchive* exterior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_stroke_);
  }
  if (exterior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      exterior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exterior_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exterior_stroke_ = exterior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokePresetDataArchive.exterior_stroke)
}

// optional int32 visible_mask = 4;
inline bool StrokePresetDataArchive::_internal_has_visible_mask() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StrokePresetDataArchive::has_visible_mask() const {
  return _internal_has_visible_mask();
}
inline void StrokePresetDataArchive::clear_visible_mask() {
  visible_mask_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokePresetDataArchive::_internal_visible_mask() const {
  return visible_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokePresetDataArchive::visible_mask() const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetDataArchive.visible_mask)
  return _internal_visible_mask();
}
inline void StrokePresetDataArchive::_internal_set_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  visible_mask_ = value;
}
inline void StrokePresetDataArchive::set_visible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_visible_mask(value);
  // @@protoc_insertion_point(field_set:TST.StrokePresetDataArchive.visible_mask)
}

// -------------------------------------------------------------------

// StrokePresetListArchive

// required int32 count = 1;
inline bool StrokePresetListArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrokePresetListArchive::has_count() const {
  return _internal_has_count();
}
inline void StrokePresetListArchive::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokePresetListArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokePresetListArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetListArchive.count)
  return _internal_count();
}
inline void StrokePresetListArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void StrokePresetListArchive::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.StrokePresetListArchive.count)
}

// repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
inline int StrokePresetListArchive::_internal_deprecated_preset_size() const {
  return deprecated_preset_.size();
}
inline int StrokePresetListArchive::deprecated_preset_size() const {
  return _internal_deprecated_preset_size();
}
inline void StrokePresetListArchive::clear_deprecated_preset() {
  deprecated_preset_.Clear();
}
inline ::TST::Deprecated_StrokePresetDataArchive* StrokePresetListArchive::mutable_deprecated_preset(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokePresetListArchive.deprecated_preset)
  return deprecated_preset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >*
StrokePresetListArchive::mutable_deprecated_preset() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokePresetListArchive.deprecated_preset)
  return &deprecated_preset_;
}
inline const ::TST::Deprecated_StrokePresetDataArchive& StrokePresetListArchive::_internal_deprecated_preset(int index) const {
  return deprecated_preset_.Get(index);
}
inline const ::TST::Deprecated_StrokePresetDataArchive& StrokePresetListArchive::deprecated_preset(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetListArchive.deprecated_preset)
  return _internal_deprecated_preset(index);
}
inline ::TST::Deprecated_StrokePresetDataArchive* StrokePresetListArchive::_internal_add_deprecated_preset() {
  return deprecated_preset_.Add();
}
inline ::TST::Deprecated_StrokePresetDataArchive* StrokePresetListArchive::add_deprecated_preset() {
  // @@protoc_insertion_point(field_add:TST.StrokePresetListArchive.deprecated_preset)
  return _internal_add_deprecated_preset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::Deprecated_StrokePresetDataArchive >&
StrokePresetListArchive::deprecated_preset() const {
  // @@protoc_insertion_point(field_list:TST.StrokePresetListArchive.deprecated_preset)
  return deprecated_preset_;
}

// repeated .TST.StrokePresetDataArchive preset = 3;
inline int StrokePresetListArchive::_internal_preset_size() const {
  return preset_.size();
}
inline int StrokePresetListArchive::preset_size() const {
  return _internal_preset_size();
}
inline void StrokePresetListArchive::clear_preset() {
  preset_.Clear();
}
inline ::TST::StrokePresetDataArchive* StrokePresetListArchive::mutable_preset(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokePresetListArchive.preset)
  return preset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokePresetDataArchive >*
StrokePresetListArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokePresetListArchive.preset)
  return &preset_;
}
inline const ::TST::StrokePresetDataArchive& StrokePresetListArchive::_internal_preset(int index) const {
  return preset_.Get(index);
}
inline const ::TST::StrokePresetDataArchive& StrokePresetListArchive::preset(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokePresetListArchive.preset)
  return _internal_preset(index);
}
inline ::TST::StrokePresetDataArchive* StrokePresetListArchive::_internal_add_preset() {
  return preset_.Add();
}
inline ::TST::StrokePresetDataArchive* StrokePresetListArchive::add_preset() {
  // @@protoc_insertion_point(field_add:TST.StrokePresetListArchive.preset)
  return _internal_add_preset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokePresetDataArchive >&
StrokePresetListArchive::preset() const {
  // @@protoc_insertion_point(field_list:TST.StrokePresetListArchive.preset)
  return preset_;
}

// -------------------------------------------------------------------

// TableStylePropertiesArchive

// optional bool banded_rows = 1;
inline bool TableStylePropertiesArchive::_internal_has_banded_rows() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_banded_rows() const {
  return _internal_has_banded_rows();
}
inline void TableStylePropertiesArchive::clear_banded_rows() {
  banded_rows_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool TableStylePropertiesArchive::_internal_banded_rows() const {
  return banded_rows_;
}
inline bool TableStylePropertiesArchive::banded_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.banded_rows)
  return _internal_banded_rows();
}
inline void TableStylePropertiesArchive::_internal_set_banded_rows(bool value) {
  _has_bits_[1] |= 0x00800000u;
  banded_rows_ = value;
}
inline void TableStylePropertiesArchive::set_banded_rows(bool value) {
  _internal_set_banded_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.banded_rows)
}

// optional .TSD.FillArchive banded_fill = 2;
inline bool TableStylePropertiesArchive::_internal_has_banded_fill() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || banded_fill_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_banded_fill() const {
  return _internal_has_banded_fill();
}
inline const ::TSD::FillArchive& TableStylePropertiesArchive::_internal_banded_fill() const {
  const ::TSD::FillArchive* p = banded_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& TableStylePropertiesArchive::banded_fill() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.banded_fill)
  return _internal_banded_fill();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_banded_fill(
    ::TSD::FillArchive* banded_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(banded_fill_);
  }
  banded_fill_ = banded_fill;
  if (banded_fill) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.banded_fill)
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::release_banded_fill() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = banded_fill_;
  banded_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::unsafe_arena_release_banded_fill() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.banded_fill)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = banded_fill_;
  banded_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::_internal_mutable_banded_fill() {
  _has_bits_[0] |= 0x00000002u;
  if (banded_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    banded_fill_ = p;
  }
  return banded_fill_;
}
inline ::TSD::FillArchive* TableStylePropertiesArchive::mutable_banded_fill() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.banded_fill)
  return _internal_mutable_banded_fill();
}
inline void TableStylePropertiesArchive::set_allocated_banded_fill(::TSD::FillArchive* banded_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(banded_fill_);
  }
  if (banded_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(banded_fill)->GetArena();
    if (message_arena != submessage_arena) {
      banded_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, banded_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  banded_fill_ = banded_fill;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.banded_fill)
}

// optional bool behaves_like_spreadsheet = 21;
inline bool TableStylePropertiesArchive::_internal_has_behaves_like_spreadsheet() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_behaves_like_spreadsheet() const {
  return _internal_has_behaves_like_spreadsheet();
}
inline void TableStylePropertiesArchive::clear_behaves_like_spreadsheet() {
  behaves_like_spreadsheet_ = false;
  _has_bits_[1] &= ~0x01000000u;
}
inline bool TableStylePropertiesArchive::_internal_behaves_like_spreadsheet() const {
  return behaves_like_spreadsheet_;
}
inline bool TableStylePropertiesArchive::behaves_like_spreadsheet() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.behaves_like_spreadsheet)
  return _internal_behaves_like_spreadsheet();
}
inline void TableStylePropertiesArchive::_internal_set_behaves_like_spreadsheet(bool value) {
  _has_bits_[1] |= 0x01000000u;
  behaves_like_spreadsheet_ = value;
}
inline void TableStylePropertiesArchive::set_behaves_like_spreadsheet(bool value) {
  _internal_set_behaves_like_spreadsheet(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.behaves_like_spreadsheet)
}

// optional bool auto_resize = 22;
inline bool TableStylePropertiesArchive::_internal_has_auto_resize() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_auto_resize() const {
  return _internal_has_auto_resize();
}
inline void TableStylePropertiesArchive::clear_auto_resize() {
  auto_resize_ = false;
  _has_bits_[1] &= ~0x02000000u;
}
inline bool TableStylePropertiesArchive::_internal_auto_resize() const {
  return auto_resize_;
}
inline bool TableStylePropertiesArchive::auto_resize() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.auto_resize)
  return _internal_auto_resize();
}
inline void TableStylePropertiesArchive::_internal_set_auto_resize(bool value) {
  _has_bits_[1] |= 0x02000000u;
  auto_resize_ = value;
}
inline void TableStylePropertiesArchive::set_auto_resize(bool value) {
  _internal_set_auto_resize(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.auto_resize)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_row_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_row_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_row_separator_stroke() const {
  return _internal_has_deprecated_header_row_separator_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_separator_stroke() {
  if (deprecated_header_row_separator_stroke_ != nullptr) deprecated_header_row_separator_stroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_row_separator_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_row_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke)
  return _internal_deprecated_header_row_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_row_separator_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_row_separator_stroke_);
  }
  deprecated_header_row_separator_stroke_ = deprecated_header_row_separator_stroke;
  if (deprecated_header_row_separator_stroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_separator_stroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_separator_stroke_;
  deprecated_header_row_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_row_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_separator_stroke_;
  deprecated_header_row_separator_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_row_separator_stroke() {
  _has_bits_[0] |= 0x00000004u;
  if (deprecated_header_row_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_row_separator_stroke_ = p;
  }
  return deprecated_header_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke)
  return _internal_mutable_deprecated_header_row_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_row_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_row_separator_stroke_;
  }
  if (deprecated_header_row_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_row_separator_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_row_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_row_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deprecated_header_row_separator_stroke_ = deprecated_header_row_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_row_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_row_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_row_border_stroke() const {
  return _internal_has_deprecated_header_row_border_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_border_stroke() {
  if (deprecated_header_row_border_stroke_ != nullptr) deprecated_header_row_border_stroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_row_border_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_row_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke)
  return _internal_deprecated_header_row_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_row_border_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_row_border_stroke_);
  }
  deprecated_header_row_border_stroke_ = deprecated_header_row_border_stroke;
  if (deprecated_header_row_border_stroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_border_stroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_border_stroke_;
  deprecated_header_row_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_row_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_border_stroke_;
  deprecated_header_row_border_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_row_border_stroke() {
  _has_bits_[0] |= 0x00000008u;
  if (deprecated_header_row_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_row_border_stroke_ = p;
  }
  return deprecated_header_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke)
  return _internal_mutable_deprecated_header_row_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_row_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_row_border_stroke_;
  }
  if (deprecated_header_row_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_row_border_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_row_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_row_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deprecated_header_row_border_stroke_ = deprecated_header_row_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_row_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_row_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_row_horizontal_stroke() const {
  return _internal_has_deprecated_header_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_horizontal_stroke() {
  if (deprecated_header_row_horizontal_stroke_ != nullptr) deprecated_header_row_horizontal_stroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_row_horizontal_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_row_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke)
  return _internal_deprecated_header_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_row_horizontal_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_row_horizontal_stroke_);
  }
  deprecated_header_row_horizontal_stroke_ = deprecated_header_row_horizontal_stroke;
  if (deprecated_header_row_horizontal_stroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_horizontal_stroke_;
  deprecated_header_row_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_horizontal_stroke_;
  deprecated_header_row_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_row_horizontal_stroke() {
  _has_bits_[0] |= 0x00000200u;
  if (deprecated_header_row_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_row_horizontal_stroke_ = p;
  }
  return deprecated_header_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke)
  return _internal_mutable_deprecated_header_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_row_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_row_horizontal_stroke_;
  }
  if (deprecated_header_row_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_row_horizontal_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_row_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_row_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  deprecated_header_row_horizontal_stroke_ = deprecated_header_row_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_row_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_row_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_row_vertical_stroke() const {
  return _internal_has_deprecated_header_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_row_vertical_stroke() {
  if (deprecated_header_row_vertical_stroke_ != nullptr) deprecated_header_row_vertical_stroke_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_row_vertical_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_row_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_row_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke)
  return _internal_deprecated_header_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_row_vertical_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_row_vertical_stroke_);
  }
  deprecated_header_row_vertical_stroke_ = deprecated_header_row_vertical_stroke;
  if (deprecated_header_row_vertical_stroke) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_row_vertical_stroke() {
  _has_bits_[0] &= ~0x00000400u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_vertical_stroke_;
  deprecated_header_row_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_row_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke)
  _has_bits_[0] &= ~0x00000400u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_row_vertical_stroke_;
  deprecated_header_row_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_row_vertical_stroke() {
  _has_bits_[0] |= 0x00000400u;
  if (deprecated_header_row_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_row_vertical_stroke_ = p;
  }
  return deprecated_header_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_row_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke)
  return _internal_mutable_deprecated_header_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_row_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_row_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_row_vertical_stroke_;
  }
  if (deprecated_header_row_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_row_vertical_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_row_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_row_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  deprecated_header_row_vertical_stroke_ = deprecated_header_row_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_column_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_column_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_column_border_stroke() const {
  return _internal_has_deprecated_header_column_border_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_border_stroke() {
  if (deprecated_header_column_border_stroke_ != nullptr) deprecated_header_column_border_stroke_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_column_border_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_column_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke)
  return _internal_deprecated_header_column_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_column_border_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_column_border_stroke_);
  }
  deprecated_header_column_border_stroke_ = deprecated_header_column_border_stroke;
  if (deprecated_header_column_border_stroke) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_border_stroke() {
  _has_bits_[0] &= ~0x00000010u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_border_stroke_;
  deprecated_header_column_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_column_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke)
  _has_bits_[0] &= ~0x00000010u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_border_stroke_;
  deprecated_header_column_border_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_column_border_stroke() {
  _has_bits_[0] |= 0x00000010u;
  if (deprecated_header_column_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_column_border_stroke_ = p;
  }
  return deprecated_header_column_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke)
  return _internal_mutable_deprecated_header_column_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_column_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_column_border_stroke_;
  }
  if (deprecated_header_column_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_column_border_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_column_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_column_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  deprecated_header_column_border_stroke_ = deprecated_header_column_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_column_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_column_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_column_separator_stroke() const {
  return _internal_has_deprecated_header_column_separator_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_separator_stroke() {
  if (deprecated_header_column_separator_stroke_ != nullptr) deprecated_header_column_separator_stroke_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_column_separator_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_column_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke)
  return _internal_deprecated_header_column_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_column_separator_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_column_separator_stroke_);
  }
  deprecated_header_column_separator_stroke_ = deprecated_header_column_separator_stroke;
  if (deprecated_header_column_separator_stroke) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_separator_stroke() {
  _has_bits_[0] &= ~0x00000020u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_separator_stroke_;
  deprecated_header_column_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_column_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke)
  _has_bits_[0] &= ~0x00000020u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_separator_stroke_;
  deprecated_header_column_separator_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_column_separator_stroke() {
  _has_bits_[0] |= 0x00000020u;
  if (deprecated_header_column_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_column_separator_stroke_ = p;
  }
  return deprecated_header_column_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke)
  return _internal_mutable_deprecated_header_column_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_column_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_column_separator_stroke_;
  }
  if (deprecated_header_column_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_column_separator_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_column_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_column_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  deprecated_header_column_separator_stroke_ = deprecated_header_column_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_column_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_column_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_column_horizontal_stroke() const {
  return _internal_has_deprecated_header_column_horizontal_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_horizontal_stroke() {
  if (deprecated_header_column_horizontal_stroke_ != nullptr) deprecated_header_column_horizontal_stroke_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_column_horizontal_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_column_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke)
  return _internal_deprecated_header_column_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_column_horizontal_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_column_horizontal_stroke_);
  }
  deprecated_header_column_horizontal_stroke_ = deprecated_header_column_horizontal_stroke;
  if (deprecated_header_column_horizontal_stroke) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_horizontal_stroke() {
  _has_bits_[0] &= ~0x00000800u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_horizontal_stroke_;
  deprecated_header_column_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_column_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke)
  _has_bits_[0] &= ~0x00000800u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_horizontal_stroke_;
  deprecated_header_column_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_column_horizontal_stroke() {
  _has_bits_[0] |= 0x00000800u;
  if (deprecated_header_column_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_column_horizontal_stroke_ = p;
  }
  return deprecated_header_column_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke)
  return _internal_mutable_deprecated_header_column_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_column_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_column_horizontal_stroke_;
  }
  if (deprecated_header_column_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_column_horizontal_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_column_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_column_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  deprecated_header_column_horizontal_stroke_ = deprecated_header_column_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_header_column_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_header_column_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_header_column_vertical_stroke() const {
  return _internal_has_deprecated_header_column_vertical_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_header_column_vertical_stroke() {
  if (deprecated_header_column_vertical_stroke_ != nullptr) deprecated_header_column_vertical_stroke_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_header_column_vertical_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_header_column_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_header_column_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke)
  return _internal_deprecated_header_column_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_header_column_vertical_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_header_column_vertical_stroke_);
  }
  deprecated_header_column_vertical_stroke_ = deprecated_header_column_vertical_stroke;
  if (deprecated_header_column_vertical_stroke) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_header_column_vertical_stroke() {
  _has_bits_[0] &= ~0x00001000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_vertical_stroke_;
  deprecated_header_column_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_header_column_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke)
  _has_bits_[0] &= ~0x00001000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_header_column_vertical_stroke_;
  deprecated_header_column_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_header_column_vertical_stroke() {
  _has_bits_[0] |= 0x00001000u;
  if (deprecated_header_column_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_header_column_vertical_stroke_ = p;
  }
  return deprecated_header_column_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_header_column_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke)
  return _internal_mutable_deprecated_header_column_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_header_column_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_header_column_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_header_column_vertical_stroke_;
  }
  if (deprecated_header_column_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_header_column_vertical_stroke);
    if (message_arena != submessage_arena) {
      deprecated_header_column_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_header_column_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  deprecated_header_column_vertical_stroke_ = deprecated_header_column_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_footer_row_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_footer_row_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_separator_stroke() const {
  return _internal_has_deprecated_footer_row_separator_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_separator_stroke() {
  if (deprecated_footer_row_separator_stroke_ != nullptr) deprecated_footer_row_separator_stroke_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_footer_row_separator_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_footer_row_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke)
  return _internal_deprecated_footer_row_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_footer_row_separator_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_footer_row_separator_stroke_);
  }
  deprecated_footer_row_separator_stroke_ = deprecated_footer_row_separator_stroke;
  if (deprecated_footer_row_separator_stroke) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_separator_stroke() {
  _has_bits_[0] &= ~0x00000040u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_separator_stroke_;
  deprecated_footer_row_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_footer_row_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke)
  _has_bits_[0] &= ~0x00000040u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_separator_stroke_;
  deprecated_footer_row_separator_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_footer_row_separator_stroke() {
  _has_bits_[0] |= 0x00000040u;
  if (deprecated_footer_row_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_footer_row_separator_stroke_ = p;
  }
  return deprecated_footer_row_separator_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke)
  return _internal_mutable_deprecated_footer_row_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_footer_row_separator_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_footer_row_separator_stroke_;
  }
  if (deprecated_footer_row_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_footer_row_separator_stroke);
    if (message_arena != submessage_arena) {
      deprecated_footer_row_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_footer_row_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  deprecated_footer_row_separator_stroke_ = deprecated_footer_row_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_footer_row_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_footer_row_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_border_stroke() const {
  return _internal_has_deprecated_footer_row_border_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_border_stroke() {
  if (deprecated_footer_row_border_stroke_ != nullptr) deprecated_footer_row_border_stroke_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_footer_row_border_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_footer_row_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke)
  return _internal_deprecated_footer_row_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_footer_row_border_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_footer_row_border_stroke_);
  }
  deprecated_footer_row_border_stroke_ = deprecated_footer_row_border_stroke;
  if (deprecated_footer_row_border_stroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_border_stroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_border_stroke_;
  deprecated_footer_row_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_footer_row_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_border_stroke_;
  deprecated_footer_row_border_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_footer_row_border_stroke() {
  _has_bits_[0] |= 0x00000080u;
  if (deprecated_footer_row_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_footer_row_border_stroke_ = p;
  }
  return deprecated_footer_row_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke)
  return _internal_mutable_deprecated_footer_row_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_footer_row_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_footer_row_border_stroke_;
  }
  if (deprecated_footer_row_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_footer_row_border_stroke);
    if (message_arena != submessage_arena) {
      deprecated_footer_row_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_footer_row_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  deprecated_footer_row_border_stroke_ = deprecated_footer_row_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_footer_row_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_footer_row_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_horizontal_stroke() const {
  return _internal_has_deprecated_footer_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_horizontal_stroke() {
  if (deprecated_footer_row_horizontal_stroke_ != nullptr) deprecated_footer_row_horizontal_stroke_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_footer_row_horizontal_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_footer_row_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke)
  return _internal_deprecated_footer_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_footer_row_horizontal_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_footer_row_horizontal_stroke_);
  }
  deprecated_footer_row_horizontal_stroke_ = deprecated_footer_row_horizontal_stroke;
  if (deprecated_footer_row_horizontal_stroke) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x00002000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_horizontal_stroke_;
  deprecated_footer_row_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_footer_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke)
  _has_bits_[0] &= ~0x00002000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_horizontal_stroke_;
  deprecated_footer_row_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_footer_row_horizontal_stroke() {
  _has_bits_[0] |= 0x00002000u;
  if (deprecated_footer_row_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_footer_row_horizontal_stroke_ = p;
  }
  return deprecated_footer_row_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke)
  return _internal_mutable_deprecated_footer_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_footer_row_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_footer_row_horizontal_stroke_;
  }
  if (deprecated_footer_row_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_footer_row_horizontal_stroke);
    if (message_arena != submessage_arena) {
      deprecated_footer_row_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_footer_row_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  deprecated_footer_row_horizontal_stroke_ = deprecated_footer_row_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_footer_row_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_footer_row_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_footer_row_vertical_stroke() const {
  return _internal_has_deprecated_footer_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_footer_row_vertical_stroke() {
  if (deprecated_footer_row_vertical_stroke_ != nullptr) deprecated_footer_row_vertical_stroke_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_footer_row_vertical_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_footer_row_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_footer_row_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke)
  return _internal_deprecated_footer_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_footer_row_vertical_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_footer_row_vertical_stroke_);
  }
  deprecated_footer_row_vertical_stroke_ = deprecated_footer_row_vertical_stroke;
  if (deprecated_footer_row_vertical_stroke) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_footer_row_vertical_stroke() {
  _has_bits_[0] &= ~0x00004000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_vertical_stroke_;
  deprecated_footer_row_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_footer_row_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke)
  _has_bits_[0] &= ~0x00004000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_footer_row_vertical_stroke_;
  deprecated_footer_row_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_footer_row_vertical_stroke() {
  _has_bits_[0] |= 0x00004000u;
  if (deprecated_footer_row_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_footer_row_vertical_stroke_ = p;
  }
  return deprecated_footer_row_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_footer_row_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke)
  return _internal_mutable_deprecated_footer_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_footer_row_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_footer_row_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_footer_row_vertical_stroke_;
  }
  if (deprecated_footer_row_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_footer_row_vertical_stroke);
    if (message_arena != submessage_arena) {
      deprecated_footer_row_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_footer_row_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  deprecated_footer_row_vertical_stroke_ = deprecated_footer_row_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_table_body_horizontal_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_table_body_horizontal_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_table_body_horizontal_border_stroke() const {
  return _internal_has_deprecated_table_body_horizontal_border_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_horizontal_border_stroke() {
  if (deprecated_table_body_horizontal_border_stroke_ != nullptr) deprecated_table_body_horizontal_border_stroke_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_table_body_horizontal_border_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_table_body_horizontal_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_horizontal_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke)
  return _internal_deprecated_table_body_horizontal_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_table_body_horizontal_border_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_table_body_horizontal_border_stroke_);
  }
  deprecated_table_body_horizontal_border_stroke_ = deprecated_table_body_horizontal_border_stroke;
  if (deprecated_table_body_horizontal_border_stroke) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_horizontal_border_stroke() {
  _has_bits_[0] &= ~0x00000100u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_border_stroke_;
  deprecated_table_body_horizontal_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_table_body_horizontal_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke)
  _has_bits_[0] &= ~0x00000100u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_border_stroke_;
  deprecated_table_body_horizontal_border_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_table_body_horizontal_border_stroke() {
  _has_bits_[0] |= 0x00000100u;
  if (deprecated_table_body_horizontal_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_table_body_horizontal_border_stroke_ = p;
  }
  return deprecated_table_body_horizontal_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_horizontal_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke)
  return _internal_mutable_deprecated_table_body_horizontal_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_table_body_horizontal_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_table_body_horizontal_border_stroke_;
  }
  if (deprecated_table_body_horizontal_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_table_body_horizontal_border_stroke);
    if (message_arena != submessage_arena) {
      deprecated_table_body_horizontal_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_table_body_horizontal_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  deprecated_table_body_horizontal_border_stroke_ = deprecated_table_body_horizontal_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_table_body_vertical_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_table_body_vertical_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_table_body_vertical_border_stroke() const {
  return _internal_has_deprecated_table_body_vertical_border_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_vertical_border_stroke() {
  if (deprecated_table_body_vertical_border_stroke_ != nullptr) deprecated_table_body_vertical_border_stroke_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_table_body_vertical_border_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_table_body_vertical_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_vertical_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke)
  return _internal_deprecated_table_body_vertical_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_table_body_vertical_border_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_table_body_vertical_border_stroke_);
  }
  deprecated_table_body_vertical_border_stroke_ = deprecated_table_body_vertical_border_stroke;
  if (deprecated_table_body_vertical_border_stroke) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_vertical_border_stroke() {
  _has_bits_[0] &= ~0x00008000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_border_stroke_;
  deprecated_table_body_vertical_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_table_body_vertical_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke)
  _has_bits_[0] &= ~0x00008000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_border_stroke_;
  deprecated_table_body_vertical_border_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_table_body_vertical_border_stroke() {
  _has_bits_[0] |= 0x00008000u;
  if (deprecated_table_body_vertical_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_table_body_vertical_border_stroke_ = p;
  }
  return deprecated_table_body_vertical_border_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_vertical_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke)
  return _internal_mutable_deprecated_table_body_vertical_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_table_body_vertical_border_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_table_body_vertical_border_stroke_;
  }
  if (deprecated_table_body_vertical_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_table_body_vertical_border_stroke);
    if (message_arena != submessage_arena) {
      deprecated_table_body_vertical_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_table_body_vertical_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  deprecated_table_body_vertical_border_stroke_ = deprecated_table_body_vertical_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_table_body_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_table_body_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_table_body_horizontal_stroke() const {
  return _internal_has_deprecated_table_body_horizontal_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_horizontal_stroke() {
  if (deprecated_table_body_horizontal_stroke_ != nullptr) deprecated_table_body_horizontal_stroke_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_table_body_horizontal_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_table_body_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke)
  return _internal_deprecated_table_body_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_table_body_horizontal_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_table_body_horizontal_stroke_);
  }
  deprecated_table_body_horizontal_stroke_ = deprecated_table_body_horizontal_stroke;
  if (deprecated_table_body_horizontal_stroke) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_horizontal_stroke() {
  _has_bits_[0] &= ~0x00010000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_stroke_;
  deprecated_table_body_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_table_body_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke)
  _has_bits_[0] &= ~0x00010000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_horizontal_stroke_;
  deprecated_table_body_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_table_body_horizontal_stroke() {
  _has_bits_[0] |= 0x00010000u;
  if (deprecated_table_body_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_table_body_horizontal_stroke_ = p;
  }
  return deprecated_table_body_horizontal_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke)
  return _internal_mutable_deprecated_table_body_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_table_body_horizontal_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_table_body_horizontal_stroke_;
  }
  if (deprecated_table_body_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_table_body_horizontal_stroke);
    if (message_arena != submessage_arena) {
      deprecated_table_body_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_table_body_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  deprecated_table_body_horizontal_stroke_ = deprecated_table_body_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke)
}

// optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
inline bool TableStylePropertiesArchive::_internal_has_deprecated_table_body_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_table_body_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_deprecated_table_body_vertical_stroke() const {
  return _internal_has_deprecated_table_body_vertical_stroke();
}
inline void TableStylePropertiesArchive::clear_deprecated_table_body_vertical_stroke() {
  if (deprecated_table_body_vertical_stroke_ != nullptr) deprecated_table_body_vertical_stroke_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::_internal_deprecated_table_body_vertical_stroke() const {
  const ::TST::Deprecated_TableStrokeArchive* p = deprecated_table_body_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Deprecated_TableStrokeArchive&>(
      ::TST::_Deprecated_TableStrokeArchive_default_instance_);
}
inline const ::TST::Deprecated_TableStrokeArchive& TableStylePropertiesArchive::deprecated_table_body_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke)
  return _internal_deprecated_table_body_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_deprecated_table_body_vertical_stroke(
    ::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_table_body_vertical_stroke_);
  }
  deprecated_table_body_vertical_stroke_ = deprecated_table_body_vertical_stroke;
  if (deprecated_table_body_vertical_stroke) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke)
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::release_deprecated_table_body_vertical_stroke() {
  _has_bits_[0] &= ~0x00020000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_stroke_;
  deprecated_table_body_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_deprecated_table_body_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke)
  _has_bits_[0] &= ~0x00020000u;
  ::TST::Deprecated_TableStrokeArchive* temp = deprecated_table_body_vertical_stroke_;
  deprecated_table_body_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::_internal_mutable_deprecated_table_body_vertical_stroke() {
  _has_bits_[0] |= 0x00020000u;
  if (deprecated_table_body_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Deprecated_TableStrokeArchive>(GetArena());
    deprecated_table_body_vertical_stroke_ = p;
  }
  return deprecated_table_body_vertical_stroke_;
}
inline ::TST::Deprecated_TableStrokeArchive* TableStylePropertiesArchive::mutable_deprecated_table_body_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke)
  return _internal_mutable_deprecated_table_body_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_deprecated_table_body_vertical_stroke(::TST::Deprecated_TableStrokeArchive* deprecated_table_body_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_table_body_vertical_stroke_;
  }
  if (deprecated_table_body_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_table_body_vertical_stroke);
    if (message_arena != submessage_arena) {
      deprecated_table_body_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_table_body_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  deprecated_table_body_vertical_stroke_ = deprecated_table_body_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke)
}

// optional .TST.StrokePresetListArchive stroke_preset_list = 32;
inline bool TableStylePropertiesArchive::_internal_has_stroke_preset_list() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || stroke_preset_list_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_stroke_preset_list() const {
  return _internal_has_stroke_preset_list();
}
inline void TableStylePropertiesArchive::clear_stroke_preset_list() {
  if (stroke_preset_list_ != nullptr) stroke_preset_list_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::TST::StrokePresetListArchive& TableStylePropertiesArchive::_internal_stroke_preset_list() const {
  const ::TST::StrokePresetListArchive* p = stroke_preset_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::StrokePresetListArchive&>(
      ::TST::_StrokePresetListArchive_default_instance_);
}
inline const ::TST::StrokePresetListArchive& TableStylePropertiesArchive::stroke_preset_list() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.stroke_preset_list)
  return _internal_stroke_preset_list();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_stroke_preset_list(
    ::TST::StrokePresetListArchive* stroke_preset_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_preset_list_);
  }
  stroke_preset_list_ = stroke_preset_list;
  if (stroke_preset_list) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.stroke_preset_list)
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::release_stroke_preset_list() {
  _has_bits_[0] &= ~0x00040000u;
  ::TST::StrokePresetListArchive* temp = stroke_preset_list_;
  stroke_preset_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::unsafe_arena_release_stroke_preset_list() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.stroke_preset_list)
  _has_bits_[0] &= ~0x00040000u;
  ::TST::StrokePresetListArchive* temp = stroke_preset_list_;
  stroke_preset_list_ = nullptr;
  return temp;
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::_internal_mutable_stroke_preset_list() {
  _has_bits_[0] |= 0x00040000u;
  if (stroke_preset_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::StrokePresetListArchive>(GetArena());
    stroke_preset_list_ = p;
  }
  return stroke_preset_list_;
}
inline ::TST::StrokePresetListArchive* TableStylePropertiesArchive::mutable_stroke_preset_list() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.stroke_preset_list)
  return _internal_mutable_stroke_preset_list();
}
inline void TableStylePropertiesArchive::set_allocated_stroke_preset_list(::TST::StrokePresetListArchive* stroke_preset_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stroke_preset_list_;
  }
  if (stroke_preset_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stroke_preset_list);
    if (message_arena != submessage_arena) {
      stroke_preset_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stroke_preset_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  stroke_preset_list_ = stroke_preset_list;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.stroke_preset_list)
}

// optional bool v_strokes_visible = 33;
inline bool TableStylePropertiesArchive::_internal_has_v_strokes_visible() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_v_strokes_visible() const {
  return _internal_has_v_strokes_visible();
}
inline void TableStylePropertiesArchive::clear_v_strokes_visible() {
  v_strokes_visible_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool TableStylePropertiesArchive::_internal_v_strokes_visible() const {
  return v_strokes_visible_;
}
inline bool TableStylePropertiesArchive::v_strokes_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.v_strokes_visible)
  return _internal_v_strokes_visible();
}
inline void TableStylePropertiesArchive::_internal_set_v_strokes_visible(bool value) {
  _has_bits_[1] |= 0x04000000u;
  v_strokes_visible_ = value;
}
inline void TableStylePropertiesArchive::set_v_strokes_visible(bool value) {
  _internal_set_v_strokes_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.v_strokes_visible)
}

// optional bool h_strokes_visible = 34;
inline bool TableStylePropertiesArchive::_internal_has_h_strokes_visible() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_h_strokes_visible() const {
  return _internal_has_h_strokes_visible();
}
inline void TableStylePropertiesArchive::clear_h_strokes_visible() {
  h_strokes_visible_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool TableStylePropertiesArchive::_internal_h_strokes_visible() const {
  return h_strokes_visible_;
}
inline bool TableStylePropertiesArchive::h_strokes_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.h_strokes_visible)
  return _internal_h_strokes_visible();
}
inline void TableStylePropertiesArchive::_internal_set_h_strokes_visible(bool value) {
  _has_bits_[1] |= 0x08000000u;
  h_strokes_visible_ = value;
}
inline void TableStylePropertiesArchive::set_h_strokes_visible(bool value) {
  _internal_set_h_strokes_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.h_strokes_visible)
}

// optional bool hr_separator_visible = 35;
inline bool TableStylePropertiesArchive::_internal_has_hr_separator_visible() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_hr_separator_visible() const {
  return _internal_has_hr_separator_visible();
}
inline void TableStylePropertiesArchive::clear_hr_separator_visible() {
  hr_separator_visible_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool TableStylePropertiesArchive::_internal_hr_separator_visible() const {
  return hr_separator_visible_;
}
inline bool TableStylePropertiesArchive::hr_separator_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.hr_separator_visible)
  return _internal_hr_separator_visible();
}
inline void TableStylePropertiesArchive::_internal_set_hr_separator_visible(bool value) {
  _has_bits_[1] |= 0x10000000u;
  hr_separator_visible_ = value;
}
inline void TableStylePropertiesArchive::set_hr_separator_visible(bool value) {
  _internal_set_hr_separator_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.hr_separator_visible)
}

// optional bool hc_separator_visible = 36;
inline bool TableStylePropertiesArchive::_internal_has_hc_separator_visible() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_hc_separator_visible() const {
  return _internal_has_hc_separator_visible();
}
inline void TableStylePropertiesArchive::clear_hc_separator_visible() {
  hc_separator_visible_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool TableStylePropertiesArchive::_internal_hc_separator_visible() const {
  return hc_separator_visible_;
}
inline bool TableStylePropertiesArchive::hc_separator_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.hc_separator_visible)
  return _internal_hc_separator_visible();
}
inline void TableStylePropertiesArchive::_internal_set_hc_separator_visible(bool value) {
  _has_bits_[1] |= 0x20000000u;
  hc_separator_visible_ = value;
}
inline void TableStylePropertiesArchive::set_hc_separator_visible(bool value) {
  _internal_set_hc_separator_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.hc_separator_visible)
}

// optional bool footer_separator_visible = 37;
inline bool TableStylePropertiesArchive::_internal_has_footer_separator_visible() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_footer_separator_visible() const {
  return _internal_has_footer_separator_visible();
}
inline void TableStylePropertiesArchive::clear_footer_separator_visible() {
  footer_separator_visible_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool TableStylePropertiesArchive::_internal_footer_separator_visible() const {
  return footer_separator_visible_;
}
inline bool TableStylePropertiesArchive::footer_separator_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.footer_separator_visible)
  return _internal_footer_separator_visible();
}
inline void TableStylePropertiesArchive::_internal_set_footer_separator_visible(bool value) {
  _has_bits_[1] |= 0x40000000u;
  footer_separator_visible_ = value;
}
inline void TableStylePropertiesArchive::set_footer_separator_visible(bool value) {
  _internal_set_footer_separator_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.footer_separator_visible)
}

// optional bool table_border_visible = 38;
inline bool TableStylePropertiesArchive::_internal_has_table_border_visible() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_table_border_visible() const {
  return _internal_has_table_border_visible();
}
inline void TableStylePropertiesArchive::clear_table_border_visible() {
  table_border_visible_ = false;
  _has_bits_[2] &= ~0x00000001u;
}
inline bool TableStylePropertiesArchive::_internal_table_border_visible() const {
  return table_border_visible_;
}
inline bool TableStylePropertiesArchive::table_border_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_border_visible)
  return _internal_table_border_visible();
}
inline void TableStylePropertiesArchive::_internal_set_table_border_visible(bool value) {
  _has_bits_[2] |= 0x00000001u;
  table_border_visible_ = value;
}
inline void TableStylePropertiesArchive::set_table_border_visible(bool value) {
  _internal_set_table_border_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.table_border_visible)
}

// optional bool table_header_border_visible = 39;
inline bool TableStylePropertiesArchive::_internal_has_table_header_border_visible() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_table_header_border_visible() const {
  return _internal_has_table_header_border_visible();
}
inline void TableStylePropertiesArchive::clear_table_header_border_visible() {
  table_header_border_visible_ = false;
  _has_bits_[2] &= ~0x00000002u;
}
inline bool TableStylePropertiesArchive::_internal_table_header_border_visible() const {
  return table_header_border_visible_;
}
inline bool TableStylePropertiesArchive::table_header_border_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_header_border_visible)
  return _internal_table_header_border_visible();
}
inline void TableStylePropertiesArchive::_internal_set_table_header_border_visible(bool value) {
  _has_bits_[2] |= 0x00000002u;
  table_header_border_visible_ = value;
}
inline void TableStylePropertiesArchive::set_table_header_border_visible(bool value) {
  _internal_set_table_header_border_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.table_header_border_visible)
}

// optional bool table_hc_divider_visible = 42;
inline bool TableStylePropertiesArchive::_internal_has_table_hc_divider_visible() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_table_hc_divider_visible() const {
  return _internal_has_table_hc_divider_visible();
}
inline void TableStylePropertiesArchive::clear_table_hc_divider_visible() {
  table_hc_divider_visible_ = false;
  _has_bits_[2] &= ~0x00000004u;
}
inline bool TableStylePropertiesArchive::_internal_table_hc_divider_visible() const {
  return table_hc_divider_visible_;
}
inline bool TableStylePropertiesArchive::table_hc_divider_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_hc_divider_visible)
  return _internal_table_hc_divider_visible();
}
inline void TableStylePropertiesArchive::_internal_set_table_hc_divider_visible(bool value) {
  _has_bits_[2] |= 0x00000004u;
  table_hc_divider_visible_ = value;
}
inline void TableStylePropertiesArchive::set_table_hc_divider_visible(bool value) {
  _internal_set_table_hc_divider_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.table_hc_divider_visible)
}

// optional bool table_hr_divider_visible = 43;
inline bool TableStylePropertiesArchive::_internal_has_table_hr_divider_visible() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_table_hr_divider_visible() const {
  return _internal_has_table_hr_divider_visible();
}
inline void TableStylePropertiesArchive::clear_table_hr_divider_visible() {
  table_hr_divider_visible_ = false;
  _has_bits_[2] &= ~0x00000008u;
}
inline bool TableStylePropertiesArchive::_internal_table_hr_divider_visible() const {
  return table_hr_divider_visible_;
}
inline bool TableStylePropertiesArchive::table_hr_divider_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_hr_divider_visible)
  return _internal_table_hr_divider_visible();
}
inline void TableStylePropertiesArchive::_internal_set_table_hr_divider_visible(bool value) {
  _has_bits_[2] |= 0x00000008u;
  table_hr_divider_visible_ = value;
}
inline void TableStylePropertiesArchive::set_table_hr_divider_visible(bool value) {
  _internal_set_table_hr_divider_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.table_hr_divider_visible)
}

// optional bool table_footer_divider_visible = 44;
inline bool TableStylePropertiesArchive::_internal_has_table_footer_divider_visible() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_table_footer_divider_visible() const {
  return _internal_has_table_footer_divider_visible();
}
inline void TableStylePropertiesArchive::clear_table_footer_divider_visible() {
  table_footer_divider_visible_ = false;
  _has_bits_[2] &= ~0x00000010u;
}
inline bool TableStylePropertiesArchive::_internal_table_footer_divider_visible() const {
  return table_footer_divider_visible_;
}
inline bool TableStylePropertiesArchive::table_footer_divider_visible() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_footer_divider_visible)
  return _internal_table_footer_divider_visible();
}
inline void TableStylePropertiesArchive::_internal_set_table_footer_divider_visible(bool value) {
  _has_bits_[2] |= 0x00000010u;
  table_footer_divider_visible_ = value;
}
inline void TableStylePropertiesArchive::set_table_footer_divider_visible(bool value) {
  _internal_set_table_footer_divider_visible(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.table_footer_divider_visible)
}

// optional int32 OBSOLETE_master_font_size = 40;
inline bool TableStylePropertiesArchive::_internal_has_obsolete_master_font_size() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_obsolete_master_font_size() const {
  return _internal_has_obsolete_master_font_size();
}
inline void TableStylePropertiesArchive::clear_obsolete_master_font_size() {
  obsolete_master_font_size_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStylePropertiesArchive::_internal_obsolete_master_font_size() const {
  return obsolete_master_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStylePropertiesArchive::obsolete_master_font_size() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.OBSOLETE_master_font_size)
  return _internal_obsolete_master_font_size();
}
inline void TableStylePropertiesArchive::_internal_set_obsolete_master_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x80000000u;
  obsolete_master_font_size_ = value;
}
inline void TableStylePropertiesArchive::set_obsolete_master_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obsolete_master_font_size(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.OBSOLETE_master_font_size)
}

// optional string master_font_family = 41;
inline bool TableStylePropertiesArchive::_internal_has_master_font_family() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_master_font_family() const {
  return _internal_has_master_font_family();
}
inline void TableStylePropertiesArchive::clear_master_font_family() {
  master_font_family_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableStylePropertiesArchive::master_font_family() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.master_font_family)
  return _internal_master_font_family();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableStylePropertiesArchive::set_master_font_family(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 master_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.master_font_family)
}
inline std::string* TableStylePropertiesArchive::mutable_master_font_family() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.master_font_family)
  return _internal_mutable_master_font_family();
}
inline const std::string& TableStylePropertiesArchive::_internal_master_font_family() const {
  return master_font_family_.Get();
}
inline void TableStylePropertiesArchive::_internal_set_master_font_family(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  master_font_family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableStylePropertiesArchive::_internal_mutable_master_font_family() {
  _has_bits_[0] |= 0x00000001u;
  return master_font_family_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableStylePropertiesArchive::release_master_font_family() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.master_font_family)
  if (!_internal_has_master_font_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return master_font_family_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableStylePropertiesArchive::set_allocated_master_font_family(std::string* master_font_family) {
  if (master_font_family != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  master_font_family_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_font_family,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.master_font_family)
}

// optional .TSWP.WritingDirectionType writing_direction = 45;
inline bool TableStylePropertiesArchive::_internal_has_writing_direction() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool TableStylePropertiesArchive::has_writing_direction() const {
  return _internal_has_writing_direction();
}
inline void TableStylePropertiesArchive::clear_writing_direction() {
  writing_direction_ = -1;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::TSWP::WritingDirectionType TableStylePropertiesArchive::_internal_writing_direction() const {
  return static_cast< ::TSWP::WritingDirectionType >(writing_direction_);
}
inline ::TSWP::WritingDirectionType TableStylePropertiesArchive::writing_direction() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.writing_direction)
  return _internal_writing_direction();
}
inline void TableStylePropertiesArchive::_internal_set_writing_direction(::TSWP::WritingDirectionType value) {
  assert(::TSWP::WritingDirectionType_IsValid(value));
  _has_bits_[2] |= 0x00000020u;
  writing_direction_ = value;
}
inline void TableStylePropertiesArchive::set_writing_direction(::TSWP::WritingDirectionType value) {
  _internal_set_writing_direction(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePropertiesArchive.writing_direction)
}

// optional .TSD.StrokeArchive header_row_separator_stroke = 46;
inline bool TableStylePropertiesArchive::_internal_has_header_row_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || header_row_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_row_separator_stroke() const {
  return _internal_has_header_row_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_row_separator_stroke() const {
  const ::TSD::StrokeArchive* p = header_row_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_row_separator_stroke)
  return _internal_header_row_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_row_separator_stroke(
    ::TSD::StrokeArchive* header_row_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_separator_stroke_);
  }
  header_row_separator_stroke_ = header_row_separator_stroke;
  if (header_row_separator_stroke) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_row_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_separator_stroke() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = header_row_separator_stroke_;
  header_row_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_row_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_row_separator_stroke)
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = header_row_separator_stroke_;
  header_row_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_row_separator_stroke() {
  _has_bits_[0] |= 0x00080000u;
  if (header_row_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_row_separator_stroke_ = p;
  }
  return header_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_row_separator_stroke)
  return _internal_mutable_header_row_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_row_separator_stroke(::TSD::StrokeArchive* header_row_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_separator_stroke_);
  }
  if (header_row_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  header_row_separator_stroke_ = header_row_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_row_separator_stroke)
}

// optional .TSD.StrokeArchive header_row_border_stroke = 47;
inline bool TableStylePropertiesArchive::_internal_has_header_row_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || header_row_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_row_border_stroke() const {
  return _internal_has_header_row_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_row_border_stroke() const {
  const ::TSD::StrokeArchive* p = header_row_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_row_border_stroke)
  return _internal_header_row_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_row_border_stroke(
    ::TSD::StrokeArchive* header_row_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_border_stroke_);
  }
  header_row_border_stroke_ = header_row_border_stroke;
  if (header_row_border_stroke) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_row_border_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_border_stroke() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = header_row_border_stroke_;
  header_row_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_row_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_row_border_stroke)
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = header_row_border_stroke_;
  header_row_border_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_row_border_stroke() {
  _has_bits_[0] |= 0x00100000u;
  if (header_row_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_row_border_stroke_ = p;
  }
  return header_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_row_border_stroke)
  return _internal_mutable_header_row_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_row_border_stroke(::TSD::StrokeArchive* header_row_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_border_stroke_);
  }
  if (header_row_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_border_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  header_row_border_stroke_ = header_row_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_row_border_stroke)
}

// optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
inline bool TableStylePropertiesArchive::_internal_has_header_row_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || header_row_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_row_horizontal_stroke() const {
  return _internal_has_header_row_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_row_horizontal_stroke() const {
  const ::TSD::StrokeArchive* p = header_row_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_row_horizontal_stroke)
  return _internal_header_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_row_horizontal_stroke(
    ::TSD::StrokeArchive* header_row_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_horizontal_stroke_);
  }
  header_row_horizontal_stroke_ = header_row_horizontal_stroke;
  if (header_row_horizontal_stroke) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_row_horizontal_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = header_row_horizontal_stroke_;
  header_row_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_row_horizontal_stroke)
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = header_row_horizontal_stroke_;
  header_row_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_row_horizontal_stroke() {
  _has_bits_[0] |= 0x00200000u;
  if (header_row_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_row_horizontal_stroke_ = p;
  }
  return header_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_row_horizontal_stroke)
  return _internal_mutable_header_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_row_horizontal_stroke(::TSD::StrokeArchive* header_row_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_horizontal_stroke_);
  }
  if (header_row_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_horizontal_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  header_row_horizontal_stroke_ = header_row_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_row_horizontal_stroke)
}

// optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
inline bool TableStylePropertiesArchive::_internal_has_header_row_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || header_row_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_row_vertical_stroke() const {
  return _internal_has_header_row_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_row_vertical_stroke() const {
  const ::TSD::StrokeArchive* p = header_row_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_row_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_row_vertical_stroke)
  return _internal_header_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_row_vertical_stroke(
    ::TSD::StrokeArchive* header_row_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_vertical_stroke_);
  }
  header_row_vertical_stroke_ = header_row_vertical_stroke;
  if (header_row_vertical_stroke) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_row_vertical_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_row_vertical_stroke() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = header_row_vertical_stroke_;
  header_row_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_row_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_row_vertical_stroke)
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = header_row_vertical_stroke_;
  header_row_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_row_vertical_stroke() {
  _has_bits_[0] |= 0x00400000u;
  if (header_row_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_row_vertical_stroke_ = p;
  }
  return header_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_row_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_row_vertical_stroke)
  return _internal_mutable_header_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_row_vertical_stroke(::TSD::StrokeArchive* header_row_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_vertical_stroke_);
  }
  if (header_row_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_vertical_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  header_row_vertical_stroke_ = header_row_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_row_vertical_stroke)
}

// optional .TSD.StrokeArchive header_column_border_stroke = 50;
inline bool TableStylePropertiesArchive::_internal_has_header_column_border_stroke() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || header_column_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_column_border_stroke() const {
  return _internal_has_header_column_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_column_border_stroke() const {
  const ::TSD::StrokeArchive* p = header_column_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_column_border_stroke)
  return _internal_header_column_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_column_border_stroke(
    ::TSD::StrokeArchive* header_column_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_border_stroke_);
  }
  header_column_border_stroke_ = header_column_border_stroke;
  if (header_column_border_stroke) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_column_border_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_border_stroke() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = header_column_border_stroke_;
  header_column_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_column_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_column_border_stroke)
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = header_column_border_stroke_;
  header_column_border_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_column_border_stroke() {
  _has_bits_[0] |= 0x00800000u;
  if (header_column_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_column_border_stroke_ = p;
  }
  return header_column_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_column_border_stroke)
  return _internal_mutable_header_column_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_column_border_stroke(::TSD::StrokeArchive* header_column_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_border_stroke_);
  }
  if (header_column_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_border_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  header_column_border_stroke_ = header_column_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_column_border_stroke)
}

// optional .TSD.StrokeArchive header_column_separator_stroke = 51;
inline bool TableStylePropertiesArchive::_internal_has_header_column_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || header_column_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_column_separator_stroke() const {
  return _internal_has_header_column_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_column_separator_stroke() const {
  const ::TSD::StrokeArchive* p = header_column_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_column_separator_stroke)
  return _internal_header_column_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_column_separator_stroke(
    ::TSD::StrokeArchive* header_column_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_separator_stroke_);
  }
  header_column_separator_stroke_ = header_column_separator_stroke;
  if (header_column_separator_stroke) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_column_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_separator_stroke() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::StrokeArchive* temp = header_column_separator_stroke_;
  header_column_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_column_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_column_separator_stroke)
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::StrokeArchive* temp = header_column_separator_stroke_;
  header_column_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_column_separator_stroke() {
  _has_bits_[0] |= 0x01000000u;
  if (header_column_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_column_separator_stroke_ = p;
  }
  return header_column_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_column_separator_stroke)
  return _internal_mutable_header_column_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_column_separator_stroke(::TSD::StrokeArchive* header_column_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_separator_stroke_);
  }
  if (header_column_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  header_column_separator_stroke_ = header_column_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_column_separator_stroke)
}

// optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
inline bool TableStylePropertiesArchive::_internal_has_header_column_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || header_column_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_column_horizontal_stroke() const {
  return _internal_has_header_column_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_column_horizontal_stroke() const {
  const ::TSD::StrokeArchive* p = header_column_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_column_horizontal_stroke)
  return _internal_header_column_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_column_horizontal_stroke(
    ::TSD::StrokeArchive* header_column_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_horizontal_stroke_);
  }
  header_column_horizontal_stroke_ = header_column_horizontal_stroke;
  if (header_column_horizontal_stroke) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_column_horizontal_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_horizontal_stroke() {
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::StrokeArchive* temp = header_column_horizontal_stroke_;
  header_column_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_column_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_column_horizontal_stroke)
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::StrokeArchive* temp = header_column_horizontal_stroke_;
  header_column_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_column_horizontal_stroke() {
  _has_bits_[0] |= 0x02000000u;
  if (header_column_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_column_horizontal_stroke_ = p;
  }
  return header_column_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_column_horizontal_stroke)
  return _internal_mutable_header_column_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_column_horizontal_stroke(::TSD::StrokeArchive* header_column_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_horizontal_stroke_);
  }
  if (header_column_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_horizontal_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  header_column_horizontal_stroke_ = header_column_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_column_horizontal_stroke)
}

// optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
inline bool TableStylePropertiesArchive::_internal_has_header_column_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || header_column_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_header_column_vertical_stroke() const {
  return _internal_has_header_column_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_header_column_vertical_stroke() const {
  const ::TSD::StrokeArchive* p = header_column_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::header_column_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.header_column_vertical_stroke)
  return _internal_header_column_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_header_column_vertical_stroke(
    ::TSD::StrokeArchive* header_column_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_vertical_stroke_);
  }
  header_column_vertical_stroke_ = header_column_vertical_stroke;
  if (header_column_vertical_stroke) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.header_column_vertical_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_header_column_vertical_stroke() {
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::StrokeArchive* temp = header_column_vertical_stroke_;
  header_column_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_header_column_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.header_column_vertical_stroke)
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::StrokeArchive* temp = header_column_vertical_stroke_;
  header_column_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_header_column_vertical_stroke() {
  _has_bits_[0] |= 0x04000000u;
  if (header_column_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    header_column_vertical_stroke_ = p;
  }
  return header_column_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_header_column_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.header_column_vertical_stroke)
  return _internal_mutable_header_column_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_header_column_vertical_stroke(::TSD::StrokeArchive* header_column_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_vertical_stroke_);
  }
  if (header_column_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_vertical_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  header_column_vertical_stroke_ = header_column_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.header_column_vertical_stroke)
}

// optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
inline bool TableStylePropertiesArchive::_internal_has_footer_row_separator_stroke() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_footer_row_separator_stroke() const {
  return _internal_has_footer_row_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_footer_row_separator_stroke() const {
  const ::TSD::StrokeArchive* p = footer_row_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.footer_row_separator_stroke)
  return _internal_footer_row_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_footer_row_separator_stroke(
    ::TSD::StrokeArchive* footer_row_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_separator_stroke_);
  }
  footer_row_separator_stroke_ = footer_row_separator_stroke;
  if (footer_row_separator_stroke) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.footer_row_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_separator_stroke() {
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::StrokeArchive* temp = footer_row_separator_stroke_;
  footer_row_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_footer_row_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.footer_row_separator_stroke)
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::StrokeArchive* temp = footer_row_separator_stroke_;
  footer_row_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_footer_row_separator_stroke() {
  _has_bits_[0] |= 0x08000000u;
  if (footer_row_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    footer_row_separator_stroke_ = p;
  }
  return footer_row_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.footer_row_separator_stroke)
  return _internal_mutable_footer_row_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_footer_row_separator_stroke(::TSD::StrokeArchive* footer_row_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_separator_stroke_);
  }
  if (footer_row_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_separator_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  footer_row_separator_stroke_ = footer_row_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.footer_row_separator_stroke)
}

// optional .TSD.StrokeArchive footer_row_border_stroke = 55;
inline bool TableStylePropertiesArchive::_internal_has_footer_row_border_stroke() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_footer_row_border_stroke() const {
  return _internal_has_footer_row_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_footer_row_border_stroke() const {
  const ::TSD::StrokeArchive* p = footer_row_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.footer_row_border_stroke)
  return _internal_footer_row_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_footer_row_border_stroke(
    ::TSD::StrokeArchive* footer_row_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_border_stroke_);
  }
  footer_row_border_stroke_ = footer_row_border_stroke;
  if (footer_row_border_stroke) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.footer_row_border_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_border_stroke() {
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::StrokeArchive* temp = footer_row_border_stroke_;
  footer_row_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_footer_row_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.footer_row_border_stroke)
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::StrokeArchive* temp = footer_row_border_stroke_;
  footer_row_border_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_footer_row_border_stroke() {
  _has_bits_[0] |= 0x10000000u;
  if (footer_row_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    footer_row_border_stroke_ = p;
  }
  return footer_row_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.footer_row_border_stroke)
  return _internal_mutable_footer_row_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_footer_row_border_stroke(::TSD::StrokeArchive* footer_row_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_border_stroke_);
  }
  if (footer_row_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_border_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  footer_row_border_stroke_ = footer_row_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.footer_row_border_stroke)
}

// optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
inline bool TableStylePropertiesArchive::_internal_has_footer_row_horizontal_stroke() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_footer_row_horizontal_stroke() const {
  return _internal_has_footer_row_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_footer_row_horizontal_stroke() const {
  const ::TSD::StrokeArchive* p = footer_row_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.footer_row_horizontal_stroke)
  return _internal_footer_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_footer_row_horizontal_stroke(
    ::TSD::StrokeArchive* footer_row_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_horizontal_stroke_);
  }
  footer_row_horizontal_stroke_ = footer_row_horizontal_stroke;
  if (footer_row_horizontal_stroke) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.footer_row_horizontal_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_horizontal_stroke() {
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::StrokeArchive* temp = footer_row_horizontal_stroke_;
  footer_row_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_footer_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.footer_row_horizontal_stroke)
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::StrokeArchive* temp = footer_row_horizontal_stroke_;
  footer_row_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_footer_row_horizontal_stroke() {
  _has_bits_[0] |= 0x20000000u;
  if (footer_row_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    footer_row_horizontal_stroke_ = p;
  }
  return footer_row_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.footer_row_horizontal_stroke)
  return _internal_mutable_footer_row_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_footer_row_horizontal_stroke(::TSD::StrokeArchive* footer_row_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_horizontal_stroke_);
  }
  if (footer_row_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_horizontal_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_horizontal_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  footer_row_horizontal_stroke_ = footer_row_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.footer_row_horizontal_stroke)
}

// optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
inline bool TableStylePropertiesArchive::_internal_has_footer_row_vertical_stroke() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_footer_row_vertical_stroke() const {
  return _internal_has_footer_row_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_footer_row_vertical_stroke() const {
  const ::TSD::StrokeArchive* p = footer_row_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::footer_row_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.footer_row_vertical_stroke)
  return _internal_footer_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_footer_row_vertical_stroke(
    ::TSD::StrokeArchive* footer_row_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_vertical_stroke_);
  }
  footer_row_vertical_stroke_ = footer_row_vertical_stroke;
  if (footer_row_vertical_stroke) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.footer_row_vertical_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_footer_row_vertical_stroke() {
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::StrokeArchive* temp = footer_row_vertical_stroke_;
  footer_row_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_footer_row_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.footer_row_vertical_stroke)
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::StrokeArchive* temp = footer_row_vertical_stroke_;
  footer_row_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_footer_row_vertical_stroke() {
  _has_bits_[0] |= 0x40000000u;
  if (footer_row_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    footer_row_vertical_stroke_ = p;
  }
  return footer_row_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_footer_row_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.footer_row_vertical_stroke)
  return _internal_mutable_footer_row_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_footer_row_vertical_stroke(::TSD::StrokeArchive* footer_row_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_vertical_stroke_);
  }
  if (footer_row_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_vertical_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_vertical_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  footer_row_vertical_stroke_ = footer_row_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.footer_row_vertical_stroke)
}

// optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
inline bool TableStylePropertiesArchive::_internal_has_table_body_horizontal_border_stroke() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || table_body_horizontal_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_table_body_horizontal_border_stroke() const {
  return _internal_has_table_body_horizontal_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_table_body_horizontal_border_stroke() const {
  const ::TSD::StrokeArchive* p = table_body_horizontal_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_horizontal_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke)
  return _internal_table_body_horizontal_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_table_body_horizontal_border_stroke(
    ::TSD::StrokeArchive* table_body_horizontal_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_border_stroke_);
  }
  table_body_horizontal_border_stroke_ = table_body_horizontal_border_stroke;
  if (table_body_horizontal_border_stroke) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_horizontal_border_stroke() {
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::StrokeArchive* temp = table_body_horizontal_border_stroke_;
  table_body_horizontal_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_table_body_horizontal_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke)
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::StrokeArchive* temp = table_body_horizontal_border_stroke_;
  table_body_horizontal_border_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_table_body_horizontal_border_stroke() {
  _has_bits_[0] |= 0x80000000u;
  if (table_body_horizontal_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    table_body_horizontal_border_stroke_ = p;
  }
  return table_body_horizontal_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_horizontal_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke)
  return _internal_mutable_table_body_horizontal_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_table_body_horizontal_border_stroke(::TSD::StrokeArchive* table_body_horizontal_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_border_stroke_);
  }
  if (table_body_horizontal_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_border_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      table_body_horizontal_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_body_horizontal_border_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  table_body_horizontal_border_stroke_ = table_body_horizontal_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke)
}

// optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
inline bool TableStylePropertiesArchive::_internal_has_table_body_vertical_border_stroke() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_body_vertical_border_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_table_body_vertical_border_stroke() const {
  return _internal_has_table_body_vertical_border_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_table_body_vertical_border_stroke() const {
  const ::TSD::StrokeArchive* p = table_body_vertical_border_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_vertical_border_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_body_vertical_border_stroke)
  return _internal_table_body_vertical_border_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_table_body_vertical_border_stroke(
    ::TSD::StrokeArchive* table_body_vertical_border_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_border_stroke_);
  }
  table_body_vertical_border_stroke_ = table_body_vertical_border_stroke;
  if (table_body_vertical_border_stroke) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.table_body_vertical_border_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_vertical_border_stroke() {
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = table_body_vertical_border_stroke_;
  table_body_vertical_border_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_table_body_vertical_border_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.table_body_vertical_border_stroke)
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = table_body_vertical_border_stroke_;
  table_body_vertical_border_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_table_body_vertical_border_stroke() {
  _has_bits_[1] |= 0x00000001u;
  if (table_body_vertical_border_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    table_body_vertical_border_stroke_ = p;
  }
  return table_body_vertical_border_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_vertical_border_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.table_body_vertical_border_stroke)
  return _internal_mutable_table_body_vertical_border_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_table_body_vertical_border_stroke(::TSD::StrokeArchive* table_body_vertical_border_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_border_stroke_);
  }
  if (table_body_vertical_border_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_border_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      table_body_vertical_border_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_body_vertical_border_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  table_body_vertical_border_stroke_ = table_body_vertical_border_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.table_body_vertical_border_stroke)
}

// optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
inline bool TableStylePropertiesArchive::_internal_has_table_body_horizontal_stroke() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_body_horizontal_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_table_body_horizontal_stroke() const {
  return _internal_has_table_body_horizontal_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_table_body_horizontal_stroke() const {
  const ::TSD::StrokeArchive* p = table_body_horizontal_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_horizontal_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_body_horizontal_stroke)
  return _internal_table_body_horizontal_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_table_body_horizontal_stroke(
    ::TSD::StrokeArchive* table_body_horizontal_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_stroke_);
  }
  table_body_horizontal_stroke_ = table_body_horizontal_stroke;
  if (table_body_horizontal_stroke) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.table_body_horizontal_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_horizontal_stroke() {
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = table_body_horizontal_stroke_;
  table_body_horizontal_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_table_body_horizontal_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.table_body_horizontal_stroke)
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = table_body_horizontal_stroke_;
  table_body_horizontal_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_table_body_horizontal_stroke() {
  _has_bits_[1] |= 0x00000002u;
  if (table_body_horizontal_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    table_body_horizontal_stroke_ = p;
  }
  return table_body_horizontal_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_horizontal_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.table_body_horizontal_stroke)
  return _internal_mutable_table_body_horizontal_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_table_body_horizontal_stroke(::TSD::StrokeArchive* table_body_horizontal_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_stroke_);
  }
  if (table_body_horizontal_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_horizontal_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      table_body_horizontal_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_body_horizontal_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  table_body_horizontal_stroke_ = table_body_horizontal_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.table_body_horizontal_stroke)
}

// optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
inline bool TableStylePropertiesArchive::_internal_has_table_body_vertical_stroke() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || table_body_vertical_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_table_body_vertical_stroke() const {
  return _internal_has_table_body_vertical_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_table_body_vertical_stroke() const {
  const ::TSD::StrokeArchive* p = table_body_vertical_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::table_body_vertical_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.table_body_vertical_stroke)
  return _internal_table_body_vertical_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_table_body_vertical_stroke(
    ::TSD::StrokeArchive* table_body_vertical_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_stroke_);
  }
  table_body_vertical_stroke_ = table_body_vertical_stroke;
  if (table_body_vertical_stroke) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.table_body_vertical_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_table_body_vertical_stroke() {
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = table_body_vertical_stroke_;
  table_body_vertical_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_table_body_vertical_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.table_body_vertical_stroke)
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = table_body_vertical_stroke_;
  table_body_vertical_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_table_body_vertical_stroke() {
  _has_bits_[1] |= 0x00000004u;
  if (table_body_vertical_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    table_body_vertical_stroke_ = p;
  }
  return table_body_vertical_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_table_body_vertical_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.table_body_vertical_stroke)
  return _internal_mutable_table_body_vertical_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_table_body_vertical_stroke(::TSD::StrokeArchive* table_body_vertical_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_stroke_);
  }
  if (table_body_vertical_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_body_vertical_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      table_body_vertical_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_body_vertical_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  table_body_vertical_stroke_ = table_body_vertical_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.table_body_vertical_stroke)
}

// optional .TSD.StrokeArchive category_level1_top_stroke = 62;
inline bool TableStylePropertiesArchive::_internal_has_category_level1_top_stroke() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || category_level1_top_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level1_top_stroke() const {
  return _internal_has_category_level1_top_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level1_top_stroke() const {
  const ::TSD::StrokeArchive* p = category_level1_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level1_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level1_top_stroke)
  return _internal_category_level1_top_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level1_top_stroke(
    ::TSD::StrokeArchive* category_level1_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_top_stroke_);
  }
  category_level1_top_stroke_ = category_level1_top_stroke;
  if (category_level1_top_stroke) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level1_top_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level1_top_stroke() {
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = category_level1_top_stroke_;
  category_level1_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level1_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level1_top_stroke)
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = category_level1_top_stroke_;
  category_level1_top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level1_top_stroke() {
  _has_bits_[1] |= 0x00000008u;
  if (category_level1_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level1_top_stroke_ = p;
  }
  return category_level1_top_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level1_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level1_top_stroke)
  return _internal_mutable_category_level1_top_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level1_top_stroke(::TSD::StrokeArchive* category_level1_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_top_stroke_);
  }
  if (category_level1_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level1_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level1_top_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  category_level1_top_stroke_ = category_level1_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level1_top_stroke)
}

// optional .TSD.StrokeArchive category_level2_top_stroke = 63;
inline bool TableStylePropertiesArchive::_internal_has_category_level2_top_stroke() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || category_level2_top_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level2_top_stroke() const {
  return _internal_has_category_level2_top_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level2_top_stroke() const {
  const ::TSD::StrokeArchive* p = category_level2_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level2_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level2_top_stroke)
  return _internal_category_level2_top_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level2_top_stroke(
    ::TSD::StrokeArchive* category_level2_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_top_stroke_);
  }
  category_level2_top_stroke_ = category_level2_top_stroke;
  if (category_level2_top_stroke) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level2_top_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level2_top_stroke() {
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = category_level2_top_stroke_;
  category_level2_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level2_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level2_top_stroke)
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = category_level2_top_stroke_;
  category_level2_top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level2_top_stroke() {
  _has_bits_[1] |= 0x00000010u;
  if (category_level2_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level2_top_stroke_ = p;
  }
  return category_level2_top_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level2_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level2_top_stroke)
  return _internal_mutable_category_level2_top_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level2_top_stroke(::TSD::StrokeArchive* category_level2_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_top_stroke_);
  }
  if (category_level2_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level2_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level2_top_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  category_level2_top_stroke_ = category_level2_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level2_top_stroke)
}

// optional .TSD.StrokeArchive category_level3_top_stroke = 64;
inline bool TableStylePropertiesArchive::_internal_has_category_level3_top_stroke() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || category_level3_top_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level3_top_stroke() const {
  return _internal_has_category_level3_top_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level3_top_stroke() const {
  const ::TSD::StrokeArchive* p = category_level3_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level3_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level3_top_stroke)
  return _internal_category_level3_top_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level3_top_stroke(
    ::TSD::StrokeArchive* category_level3_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_top_stroke_);
  }
  category_level3_top_stroke_ = category_level3_top_stroke;
  if (category_level3_top_stroke) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level3_top_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level3_top_stroke() {
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = category_level3_top_stroke_;
  category_level3_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level3_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level3_top_stroke)
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = category_level3_top_stroke_;
  category_level3_top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level3_top_stroke() {
  _has_bits_[1] |= 0x00000020u;
  if (category_level3_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level3_top_stroke_ = p;
  }
  return category_level3_top_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level3_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level3_top_stroke)
  return _internal_mutable_category_level3_top_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level3_top_stroke(::TSD::StrokeArchive* category_level3_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_top_stroke_);
  }
  if (category_level3_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level3_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level3_top_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  category_level3_top_stroke_ = category_level3_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level3_top_stroke)
}

// optional .TSD.StrokeArchive category_level4_top_stroke = 65;
inline bool TableStylePropertiesArchive::_internal_has_category_level4_top_stroke() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || category_level4_top_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level4_top_stroke() const {
  return _internal_has_category_level4_top_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level4_top_stroke() const {
  const ::TSD::StrokeArchive* p = category_level4_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level4_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level4_top_stroke)
  return _internal_category_level4_top_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level4_top_stroke(
    ::TSD::StrokeArchive* category_level4_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_top_stroke_);
  }
  category_level4_top_stroke_ = category_level4_top_stroke;
  if (category_level4_top_stroke) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level4_top_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level4_top_stroke() {
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = category_level4_top_stroke_;
  category_level4_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level4_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level4_top_stroke)
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = category_level4_top_stroke_;
  category_level4_top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level4_top_stroke() {
  _has_bits_[1] |= 0x00000040u;
  if (category_level4_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level4_top_stroke_ = p;
  }
  return category_level4_top_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level4_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level4_top_stroke)
  return _internal_mutable_category_level4_top_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level4_top_stroke(::TSD::StrokeArchive* category_level4_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_top_stroke_);
  }
  if (category_level4_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level4_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level4_top_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  category_level4_top_stroke_ = category_level4_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level4_top_stroke)
}

// optional .TSD.StrokeArchive category_level5_top_stroke = 66;
inline bool TableStylePropertiesArchive::_internal_has_category_level5_top_stroke() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || category_level5_top_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level5_top_stroke() const {
  return _internal_has_category_level5_top_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level5_top_stroke() const {
  const ::TSD::StrokeArchive* p = category_level5_top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level5_top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level5_top_stroke)
  return _internal_category_level5_top_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level5_top_stroke(
    ::TSD::StrokeArchive* category_level5_top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_top_stroke_);
  }
  category_level5_top_stroke_ = category_level5_top_stroke;
  if (category_level5_top_stroke) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level5_top_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level5_top_stroke() {
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = category_level5_top_stroke_;
  category_level5_top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level5_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level5_top_stroke)
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = category_level5_top_stroke_;
  category_level5_top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level5_top_stroke() {
  _has_bits_[1] |= 0x00000080u;
  if (category_level5_top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level5_top_stroke_ = p;
  }
  return category_level5_top_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level5_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level5_top_stroke)
  return _internal_mutable_category_level5_top_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level5_top_stroke(::TSD::StrokeArchive* category_level5_top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_top_stroke_);
  }
  if (category_level5_top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level5_top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level5_top_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  category_level5_top_stroke_ = category_level5_top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level5_top_stroke)
}

// optional .TSD.StrokeArchive category_level1_bottom_stroke = 67;
inline bool TableStylePropertiesArchive::_internal_has_category_level1_bottom_stroke() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || category_level1_bottom_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level1_bottom_stroke() const {
  return _internal_has_category_level1_bottom_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level1_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = category_level1_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level1_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level1_bottom_stroke)
  return _internal_category_level1_bottom_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level1_bottom_stroke(
    ::TSD::StrokeArchive* category_level1_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_bottom_stroke_);
  }
  category_level1_bottom_stroke_ = category_level1_bottom_stroke;
  if (category_level1_bottom_stroke) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level1_bottom_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level1_bottom_stroke() {
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = category_level1_bottom_stroke_;
  category_level1_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level1_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level1_bottom_stroke)
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = category_level1_bottom_stroke_;
  category_level1_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level1_bottom_stroke() {
  _has_bits_[1] |= 0x00000100u;
  if (category_level1_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level1_bottom_stroke_ = p;
  }
  return category_level1_bottom_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level1_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level1_bottom_stroke)
  return _internal_mutable_category_level1_bottom_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level1_bottom_stroke(::TSD::StrokeArchive* category_level1_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_bottom_stroke_);
  }
  if (category_level1_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level1_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level1_bottom_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  category_level1_bottom_stroke_ = category_level1_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level1_bottom_stroke)
}

// optional .TSD.StrokeArchive category_level2_bottom_stroke = 68;
inline bool TableStylePropertiesArchive::_internal_has_category_level2_bottom_stroke() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || category_level2_bottom_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level2_bottom_stroke() const {
  return _internal_has_category_level2_bottom_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level2_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = category_level2_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level2_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level2_bottom_stroke)
  return _internal_category_level2_bottom_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level2_bottom_stroke(
    ::TSD::StrokeArchive* category_level2_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_bottom_stroke_);
  }
  category_level2_bottom_stroke_ = category_level2_bottom_stroke;
  if (category_level2_bottom_stroke) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level2_bottom_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level2_bottom_stroke() {
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = category_level2_bottom_stroke_;
  category_level2_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level2_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level2_bottom_stroke)
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = category_level2_bottom_stroke_;
  category_level2_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level2_bottom_stroke() {
  _has_bits_[1] |= 0x00000200u;
  if (category_level2_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level2_bottom_stroke_ = p;
  }
  return category_level2_bottom_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level2_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level2_bottom_stroke)
  return _internal_mutable_category_level2_bottom_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level2_bottom_stroke(::TSD::StrokeArchive* category_level2_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_bottom_stroke_);
  }
  if (category_level2_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level2_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level2_bottom_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  category_level2_bottom_stroke_ = category_level2_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level2_bottom_stroke)
}

// optional .TSD.StrokeArchive category_level3_bottom_stroke = 69;
inline bool TableStylePropertiesArchive::_internal_has_category_level3_bottom_stroke() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || category_level3_bottom_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level3_bottom_stroke() const {
  return _internal_has_category_level3_bottom_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level3_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = category_level3_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level3_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level3_bottom_stroke)
  return _internal_category_level3_bottom_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level3_bottom_stroke(
    ::TSD::StrokeArchive* category_level3_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_bottom_stroke_);
  }
  category_level3_bottom_stroke_ = category_level3_bottom_stroke;
  if (category_level3_bottom_stroke) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level3_bottom_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level3_bottom_stroke() {
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = category_level3_bottom_stroke_;
  category_level3_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level3_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level3_bottom_stroke)
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::StrokeArchive* temp = category_level3_bottom_stroke_;
  category_level3_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level3_bottom_stroke() {
  _has_bits_[1] |= 0x00000400u;
  if (category_level3_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level3_bottom_stroke_ = p;
  }
  return category_level3_bottom_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level3_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level3_bottom_stroke)
  return _internal_mutable_category_level3_bottom_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level3_bottom_stroke(::TSD::StrokeArchive* category_level3_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_bottom_stroke_);
  }
  if (category_level3_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level3_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level3_bottom_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  category_level3_bottom_stroke_ = category_level3_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level3_bottom_stroke)
}

// optional .TSD.StrokeArchive category_level4_bottom_stroke = 70;
inline bool TableStylePropertiesArchive::_internal_has_category_level4_bottom_stroke() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || category_level4_bottom_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level4_bottom_stroke() const {
  return _internal_has_category_level4_bottom_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level4_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = category_level4_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level4_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level4_bottom_stroke)
  return _internal_category_level4_bottom_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level4_bottom_stroke(
    ::TSD::StrokeArchive* category_level4_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_bottom_stroke_);
  }
  category_level4_bottom_stroke_ = category_level4_bottom_stroke;
  if (category_level4_bottom_stroke) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level4_bottom_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level4_bottom_stroke() {
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = category_level4_bottom_stroke_;
  category_level4_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level4_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level4_bottom_stroke)
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::StrokeArchive* temp = category_level4_bottom_stroke_;
  category_level4_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level4_bottom_stroke() {
  _has_bits_[1] |= 0x00000800u;
  if (category_level4_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level4_bottom_stroke_ = p;
  }
  return category_level4_bottom_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level4_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level4_bottom_stroke)
  return _internal_mutable_category_level4_bottom_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level4_bottom_stroke(::TSD::StrokeArchive* category_level4_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_bottom_stroke_);
  }
  if (category_level4_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level4_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level4_bottom_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  category_level4_bottom_stroke_ = category_level4_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level4_bottom_stroke)
}

// optional .TSD.StrokeArchive category_level5_bottom_stroke = 71;
inline bool TableStylePropertiesArchive::_internal_has_category_level5_bottom_stroke() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || category_level5_bottom_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level5_bottom_stroke() const {
  return _internal_has_category_level5_bottom_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level5_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = category_level5_bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level5_bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level5_bottom_stroke)
  return _internal_category_level5_bottom_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level5_bottom_stroke(
    ::TSD::StrokeArchive* category_level5_bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_bottom_stroke_);
  }
  category_level5_bottom_stroke_ = category_level5_bottom_stroke;
  if (category_level5_bottom_stroke) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level5_bottom_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level5_bottom_stroke() {
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = category_level5_bottom_stroke_;
  category_level5_bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level5_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level5_bottom_stroke)
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::StrokeArchive* temp = category_level5_bottom_stroke_;
  category_level5_bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level5_bottom_stroke() {
  _has_bits_[1] |= 0x00001000u;
  if (category_level5_bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level5_bottom_stroke_ = p;
  }
  return category_level5_bottom_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level5_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level5_bottom_stroke)
  return _internal_mutable_category_level5_bottom_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level5_bottom_stroke(::TSD::StrokeArchive* category_level5_bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_bottom_stroke_);
  }
  if (category_level5_bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level5_bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level5_bottom_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  category_level5_bottom_stroke_ = category_level5_bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level5_bottom_stroke)
}

// optional .TSD.StrokeArchive category_level1_interior_stroke = 72;
inline bool TableStylePropertiesArchive::_internal_has_category_level1_interior_stroke() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || category_level1_interior_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level1_interior_stroke() const {
  return _internal_has_category_level1_interior_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level1_interior_stroke() const {
  const ::TSD::StrokeArchive* p = category_level1_interior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level1_interior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level1_interior_stroke)
  return _internal_category_level1_interior_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level1_interior_stroke(
    ::TSD::StrokeArchive* category_level1_interior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_interior_stroke_);
  }
  category_level1_interior_stroke_ = category_level1_interior_stroke;
  if (category_level1_interior_stroke) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level1_interior_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level1_interior_stroke() {
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::StrokeArchive* temp = category_level1_interior_stroke_;
  category_level1_interior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level1_interior_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level1_interior_stroke)
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::StrokeArchive* temp = category_level1_interior_stroke_;
  category_level1_interior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level1_interior_stroke() {
  _has_bits_[1] |= 0x00002000u;
  if (category_level1_interior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level1_interior_stroke_ = p;
  }
  return category_level1_interior_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level1_interior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level1_interior_stroke)
  return _internal_mutable_category_level1_interior_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level1_interior_stroke(::TSD::StrokeArchive* category_level1_interior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_interior_stroke_);
  }
  if (category_level1_interior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_interior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level1_interior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level1_interior_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  category_level1_interior_stroke_ = category_level1_interior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level1_interior_stroke)
}

// optional .TSD.StrokeArchive category_level2_interior_stroke = 73;
inline bool TableStylePropertiesArchive::_internal_has_category_level2_interior_stroke() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || category_level2_interior_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level2_interior_stroke() const {
  return _internal_has_category_level2_interior_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level2_interior_stroke() const {
  const ::TSD::StrokeArchive* p = category_level2_interior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level2_interior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level2_interior_stroke)
  return _internal_category_level2_interior_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level2_interior_stroke(
    ::TSD::StrokeArchive* category_level2_interior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_interior_stroke_);
  }
  category_level2_interior_stroke_ = category_level2_interior_stroke;
  if (category_level2_interior_stroke) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level2_interior_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level2_interior_stroke() {
  _has_bits_[1] &= ~0x00004000u;
  ::TSD::StrokeArchive* temp = category_level2_interior_stroke_;
  category_level2_interior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level2_interior_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level2_interior_stroke)
  _has_bits_[1] &= ~0x00004000u;
  ::TSD::StrokeArchive* temp = category_level2_interior_stroke_;
  category_level2_interior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level2_interior_stroke() {
  _has_bits_[1] |= 0x00004000u;
  if (category_level2_interior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level2_interior_stroke_ = p;
  }
  return category_level2_interior_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level2_interior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level2_interior_stroke)
  return _internal_mutable_category_level2_interior_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level2_interior_stroke(::TSD::StrokeArchive* category_level2_interior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_interior_stroke_);
  }
  if (category_level2_interior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_interior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level2_interior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level2_interior_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  category_level2_interior_stroke_ = category_level2_interior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level2_interior_stroke)
}

// optional .TSD.StrokeArchive category_level3_interior_stroke = 74;
inline bool TableStylePropertiesArchive::_internal_has_category_level3_interior_stroke() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || category_level3_interior_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level3_interior_stroke() const {
  return _internal_has_category_level3_interior_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level3_interior_stroke() const {
  const ::TSD::StrokeArchive* p = category_level3_interior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level3_interior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level3_interior_stroke)
  return _internal_category_level3_interior_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level3_interior_stroke(
    ::TSD::StrokeArchive* category_level3_interior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_interior_stroke_);
  }
  category_level3_interior_stroke_ = category_level3_interior_stroke;
  if (category_level3_interior_stroke) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level3_interior_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level3_interior_stroke() {
  _has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = category_level3_interior_stroke_;
  category_level3_interior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level3_interior_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level3_interior_stroke)
  _has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = category_level3_interior_stroke_;
  category_level3_interior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level3_interior_stroke() {
  _has_bits_[1] |= 0x00008000u;
  if (category_level3_interior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level3_interior_stroke_ = p;
  }
  return category_level3_interior_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level3_interior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level3_interior_stroke)
  return _internal_mutable_category_level3_interior_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level3_interior_stroke(::TSD::StrokeArchive* category_level3_interior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_interior_stroke_);
  }
  if (category_level3_interior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_interior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level3_interior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level3_interior_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  category_level3_interior_stroke_ = category_level3_interior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level3_interior_stroke)
}

// optional .TSD.StrokeArchive category_level4_interior_stroke = 75;
inline bool TableStylePropertiesArchive::_internal_has_category_level4_interior_stroke() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || category_level4_interior_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level4_interior_stroke() const {
  return _internal_has_category_level4_interior_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level4_interior_stroke() const {
  const ::TSD::StrokeArchive* p = category_level4_interior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level4_interior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level4_interior_stroke)
  return _internal_category_level4_interior_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level4_interior_stroke(
    ::TSD::StrokeArchive* category_level4_interior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_interior_stroke_);
  }
  category_level4_interior_stroke_ = category_level4_interior_stroke;
  if (category_level4_interior_stroke) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level4_interior_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level4_interior_stroke() {
  _has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = category_level4_interior_stroke_;
  category_level4_interior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level4_interior_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level4_interior_stroke)
  _has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = category_level4_interior_stroke_;
  category_level4_interior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level4_interior_stroke() {
  _has_bits_[1] |= 0x00010000u;
  if (category_level4_interior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level4_interior_stroke_ = p;
  }
  return category_level4_interior_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level4_interior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level4_interior_stroke)
  return _internal_mutable_category_level4_interior_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level4_interior_stroke(::TSD::StrokeArchive* category_level4_interior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_interior_stroke_);
  }
  if (category_level4_interior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_interior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level4_interior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level4_interior_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  category_level4_interior_stroke_ = category_level4_interior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level4_interior_stroke)
}

// optional .TSD.StrokeArchive category_level5_interior_stroke = 76;
inline bool TableStylePropertiesArchive::_internal_has_category_level5_interior_stroke() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || category_level5_interior_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level5_interior_stroke() const {
  return _internal_has_category_level5_interior_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level5_interior_stroke() const {
  const ::TSD::StrokeArchive* p = category_level5_interior_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level5_interior_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level5_interior_stroke)
  return _internal_category_level5_interior_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level5_interior_stroke(
    ::TSD::StrokeArchive* category_level5_interior_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_interior_stroke_);
  }
  category_level5_interior_stroke_ = category_level5_interior_stroke;
  if (category_level5_interior_stroke) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level5_interior_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level5_interior_stroke() {
  _has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = category_level5_interior_stroke_;
  category_level5_interior_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level5_interior_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level5_interior_stroke)
  _has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = category_level5_interior_stroke_;
  category_level5_interior_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level5_interior_stroke() {
  _has_bits_[1] |= 0x00020000u;
  if (category_level5_interior_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level5_interior_stroke_ = p;
  }
  return category_level5_interior_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level5_interior_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level5_interior_stroke)
  return _internal_mutable_category_level5_interior_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level5_interior_stroke(::TSD::StrokeArchive* category_level5_interior_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_interior_stroke_);
  }
  if (category_level5_interior_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_interior_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level5_interior_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level5_interior_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  category_level5_interior_stroke_ = category_level5_interior_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level5_interior_stroke)
}

// optional .TSD.StrokeArchive category_level1_label_separator_stroke = 77;
inline bool TableStylePropertiesArchive::_internal_has_category_level1_label_separator_stroke() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || category_level1_label_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level1_label_separator_stroke() const {
  return _internal_has_category_level1_label_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level1_label_separator_stroke() const {
  const ::TSD::StrokeArchive* p = category_level1_label_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level1_label_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level1_label_separator_stroke)
  return _internal_category_level1_label_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level1_label_separator_stroke(
    ::TSD::StrokeArchive* category_level1_label_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_label_separator_stroke_);
  }
  category_level1_label_separator_stroke_ = category_level1_label_separator_stroke;
  if (category_level1_label_separator_stroke) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level1_label_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level1_label_separator_stroke() {
  _has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = category_level1_label_separator_stroke_;
  category_level1_label_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level1_label_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level1_label_separator_stroke)
  _has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = category_level1_label_separator_stroke_;
  category_level1_label_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level1_label_separator_stroke() {
  _has_bits_[1] |= 0x00040000u;
  if (category_level1_label_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level1_label_separator_stroke_ = p;
  }
  return category_level1_label_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level1_label_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level1_label_separator_stroke)
  return _internal_mutable_category_level1_label_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level1_label_separator_stroke(::TSD::StrokeArchive* category_level1_label_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_label_separator_stroke_);
  }
  if (category_level1_label_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level1_label_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level1_label_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level1_label_separator_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  category_level1_label_separator_stroke_ = category_level1_label_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level1_label_separator_stroke)
}

// optional .TSD.StrokeArchive category_level2_label_separator_stroke = 78;
inline bool TableStylePropertiesArchive::_internal_has_category_level2_label_separator_stroke() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || category_level2_label_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level2_label_separator_stroke() const {
  return _internal_has_category_level2_label_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level2_label_separator_stroke() const {
  const ::TSD::StrokeArchive* p = category_level2_label_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level2_label_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level2_label_separator_stroke)
  return _internal_category_level2_label_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level2_label_separator_stroke(
    ::TSD::StrokeArchive* category_level2_label_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_label_separator_stroke_);
  }
  category_level2_label_separator_stroke_ = category_level2_label_separator_stroke;
  if (category_level2_label_separator_stroke) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level2_label_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level2_label_separator_stroke() {
  _has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = category_level2_label_separator_stroke_;
  category_level2_label_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level2_label_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level2_label_separator_stroke)
  _has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = category_level2_label_separator_stroke_;
  category_level2_label_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level2_label_separator_stroke() {
  _has_bits_[1] |= 0x00080000u;
  if (category_level2_label_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level2_label_separator_stroke_ = p;
  }
  return category_level2_label_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level2_label_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level2_label_separator_stroke)
  return _internal_mutable_category_level2_label_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level2_label_separator_stroke(::TSD::StrokeArchive* category_level2_label_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_label_separator_stroke_);
  }
  if (category_level2_label_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level2_label_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level2_label_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level2_label_separator_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  category_level2_label_separator_stroke_ = category_level2_label_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level2_label_separator_stroke)
}

// optional .TSD.StrokeArchive category_level3_label_separator_stroke = 79;
inline bool TableStylePropertiesArchive::_internal_has_category_level3_label_separator_stroke() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || category_level3_label_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level3_label_separator_stroke() const {
  return _internal_has_category_level3_label_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level3_label_separator_stroke() const {
  const ::TSD::StrokeArchive* p = category_level3_label_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level3_label_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level3_label_separator_stroke)
  return _internal_category_level3_label_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level3_label_separator_stroke(
    ::TSD::StrokeArchive* category_level3_label_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_label_separator_stroke_);
  }
  category_level3_label_separator_stroke_ = category_level3_label_separator_stroke;
  if (category_level3_label_separator_stroke) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level3_label_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level3_label_separator_stroke() {
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = category_level3_label_separator_stroke_;
  category_level3_label_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level3_label_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level3_label_separator_stroke)
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = category_level3_label_separator_stroke_;
  category_level3_label_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level3_label_separator_stroke() {
  _has_bits_[1] |= 0x00100000u;
  if (category_level3_label_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level3_label_separator_stroke_ = p;
  }
  return category_level3_label_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level3_label_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level3_label_separator_stroke)
  return _internal_mutable_category_level3_label_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level3_label_separator_stroke(::TSD::StrokeArchive* category_level3_label_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_label_separator_stroke_);
  }
  if (category_level3_label_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level3_label_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level3_label_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level3_label_separator_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  category_level3_label_separator_stroke_ = category_level3_label_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level3_label_separator_stroke)
}

// optional .TSD.StrokeArchive category_level4_label_separator_stroke = 80;
inline bool TableStylePropertiesArchive::_internal_has_category_level4_label_separator_stroke() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || category_level4_label_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level4_label_separator_stroke() const {
  return _internal_has_category_level4_label_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level4_label_separator_stroke() const {
  const ::TSD::StrokeArchive* p = category_level4_label_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level4_label_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level4_label_separator_stroke)
  return _internal_category_level4_label_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level4_label_separator_stroke(
    ::TSD::StrokeArchive* category_level4_label_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_label_separator_stroke_);
  }
  category_level4_label_separator_stroke_ = category_level4_label_separator_stroke;
  if (category_level4_label_separator_stroke) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level4_label_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level4_label_separator_stroke() {
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = category_level4_label_separator_stroke_;
  category_level4_label_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level4_label_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level4_label_separator_stroke)
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = category_level4_label_separator_stroke_;
  category_level4_label_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level4_label_separator_stroke() {
  _has_bits_[1] |= 0x00200000u;
  if (category_level4_label_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level4_label_separator_stroke_ = p;
  }
  return category_level4_label_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level4_label_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level4_label_separator_stroke)
  return _internal_mutable_category_level4_label_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level4_label_separator_stroke(::TSD::StrokeArchive* category_level4_label_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_label_separator_stroke_);
  }
  if (category_level4_label_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level4_label_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level4_label_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level4_label_separator_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  category_level4_label_separator_stroke_ = category_level4_label_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level4_label_separator_stroke)
}

// optional .TSD.StrokeArchive category_level5_label_separator_stroke = 81;
inline bool TableStylePropertiesArchive::_internal_has_category_level5_label_separator_stroke() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || category_level5_label_separator_stroke_ != nullptr);
  return value;
}
inline bool TableStylePropertiesArchive::has_category_level5_label_separator_stroke() const {
  return _internal_has_category_level5_label_separator_stroke();
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::_internal_category_level5_label_separator_stroke() const {
  const ::TSD::StrokeArchive* p = category_level5_label_separator_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& TableStylePropertiesArchive::category_level5_label_separator_stroke() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePropertiesArchive.category_level5_label_separator_stroke)
  return _internal_category_level5_label_separator_stroke();
}
inline void TableStylePropertiesArchive::unsafe_arena_set_allocated_category_level5_label_separator_stroke(
    ::TSD::StrokeArchive* category_level5_label_separator_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_label_separator_stroke_);
  }
  category_level5_label_separator_stroke_ = category_level5_label_separator_stroke;
  if (category_level5_label_separator_stroke) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePropertiesArchive.category_level5_label_separator_stroke)
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::release_category_level5_label_separator_stroke() {
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = category_level5_label_separator_stroke_;
  category_level5_label_separator_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::unsafe_arena_release_category_level5_label_separator_stroke() {
  // @@protoc_insertion_point(field_release:TST.TableStylePropertiesArchive.category_level5_label_separator_stroke)
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = category_level5_label_separator_stroke_;
  category_level5_label_separator_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::_internal_mutable_category_level5_label_separator_stroke() {
  _has_bits_[1] |= 0x00400000u;
  if (category_level5_label_separator_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    category_level5_label_separator_stroke_ = p;
  }
  return category_level5_label_separator_stroke_;
}
inline ::TSD::StrokeArchive* TableStylePropertiesArchive::mutable_category_level5_label_separator_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePropertiesArchive.category_level5_label_separator_stroke)
  return _internal_mutable_category_level5_label_separator_stroke();
}
inline void TableStylePropertiesArchive::set_allocated_category_level5_label_separator_stroke(::TSD::StrokeArchive* category_level5_label_separator_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_label_separator_stroke_);
  }
  if (category_level5_label_separator_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level5_label_separator_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      category_level5_label_separator_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level5_label_separator_stroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  category_level5_label_separator_stroke_ = category_level5_label_separator_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePropertiesArchive.category_level5_label_separator_stroke)
}

// -------------------------------------------------------------------

// TableStylePresetArchive

// optional int32 index = 1;
inline bool TableStylePresetArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TableStylePresetArchive::has_index() const {
  return _internal_has_index();
}
inline void TableStylePresetArchive::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStylePresetArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStylePresetArchive::index() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePresetArchive.index)
  return _internal_index();
}
inline void TableStylePresetArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void TableStylePresetArchive::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.TableStylePresetArchive.index)
}

// optional .TSP.Reference image = 2;
inline bool TableStylePresetArchive::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool TableStylePresetArchive::has_image() const {
  return _internal_has_image();
}
inline const ::TSP::Reference& TableStylePresetArchive::_internal_image() const {
  const ::TSP::Reference* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStylePresetArchive::image() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePresetArchive.image)
  return _internal_image();
}
inline void TableStylePresetArchive::unsafe_arena_set_allocated_image(
    ::TSP::Reference* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePresetArchive.image)
}
inline ::TSP::Reference* TableStylePresetArchive::release_image() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStylePresetArchive::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:TST.TableStylePresetArchive.image)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStylePresetArchive::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::TSP::Reference* TableStylePresetArchive::mutable_image() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePresetArchive.image)
  return _internal_mutable_image();
}
inline void TableStylePresetArchive::set_allocated_image(::TSP::Reference* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image)->GetArena();
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePresetArchive.image)
}

// optional .TSP.Reference style_network = 3;
inline bool TableStylePresetArchive::_internal_has_style_network() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || style_network_ != nullptr);
  return value;
}
inline bool TableStylePresetArchive::has_style_network() const {
  return _internal_has_style_network();
}
inline const ::TSP::Reference& TableStylePresetArchive::_internal_style_network() const {
  const ::TSP::Reference* p = style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStylePresetArchive::style_network() const {
  // @@protoc_insertion_point(field_get:TST.TableStylePresetArchive.style_network)
  return _internal_style_network();
}
inline void TableStylePresetArchive::unsafe_arena_set_allocated_style_network(
    ::TSP::Reference* style_network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_network_);
  }
  style_network_ = style_network;
  if (style_network) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStylePresetArchive.style_network)
}
inline ::TSP::Reference* TableStylePresetArchive::release_style_network() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_network_;
  style_network_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStylePresetArchive::unsafe_arena_release_style_network() {
  // @@protoc_insertion_point(field_release:TST.TableStylePresetArchive.style_network)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_network_;
  style_network_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStylePresetArchive::_internal_mutable_style_network() {
  _has_bits_[0] |= 0x00000002u;
  if (style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_network_ = p;
  }
  return style_network_;
}
inline ::TSP::Reference* TableStylePresetArchive::mutable_style_network() {
  // @@protoc_insertion_point(field_mutable:TST.TableStylePresetArchive.style_network)
  return _internal_mutable_style_network();
}
inline void TableStylePresetArchive::set_allocated_style_network(::TSP::Reference* style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_network_);
  }
  if (style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_network)->GetArena();
    if (message_arena != submessage_arena) {
      style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_network, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_network_ = style_network;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStylePresetArchive.style_network)
}

// -------------------------------------------------------------------

// TableStrokePresetArchive

// required int32 index = 1;
inline bool TableStrokePresetArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableStrokePresetArchive::has_index() const {
  return _internal_has_index();
}
inline void TableStrokePresetArchive::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStrokePresetArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableStrokePresetArchive::index() const {
  // @@protoc_insertion_point(field_get:TST.TableStrokePresetArchive.index)
  return _internal_index();
}
inline void TableStrokePresetArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void TableStrokePresetArchive::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.TableStrokePresetArchive.index)
}

// -------------------------------------------------------------------

// ThemePresetsArchive

// repeated .TSP.Reference table_style_presets = 1;
inline int ThemePresetsArchive::_internal_table_style_presets_size() const {
  return table_style_presets_.size();
}
inline int ThemePresetsArchive::table_style_presets_size() const {
  return _internal_table_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_table_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ThemePresetsArchive.table_style_presets)
  return table_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_table_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TST.ThemePresetsArchive.table_style_presets)
  return &table_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_table_style_presets(int index) const {
  return table_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::table_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TST.ThemePresetsArchive.table_style_presets)
  return _internal_table_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_table_style_presets() {
  return table_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_table_style_presets() {
  // @@protoc_insertion_point(field_add:TST.ThemePresetsArchive.table_style_presets)
  return _internal_add_table_style_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::table_style_presets() const {
  // @@protoc_insertion_point(field_list:TST.ThemePresetsArchive.table_style_presets)
  return table_style_presets_;
}

// repeated .TSP.Reference table_cell_stroke_presets = 2;
inline int ThemePresetsArchive::_internal_table_cell_stroke_presets_size() const {
  return table_cell_stroke_presets_.size();
}
inline int ThemePresetsArchive::table_cell_stroke_presets_size() const {
  return _internal_table_cell_stroke_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_table_cell_stroke_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ThemePresetsArchive.table_cell_stroke_presets)
  return table_cell_stroke_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_table_cell_stroke_presets() {
  // @@protoc_insertion_point(field_mutable_list:TST.ThemePresetsArchive.table_cell_stroke_presets)
  return &table_cell_stroke_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_table_cell_stroke_presets(int index) const {
  return table_cell_stroke_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::table_cell_stroke_presets(int index) const {
  // @@protoc_insertion_point(field_get:TST.ThemePresetsArchive.table_cell_stroke_presets)
  return _internal_table_cell_stroke_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_table_cell_stroke_presets() {
  return table_cell_stroke_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_table_cell_stroke_presets() {
  // @@protoc_insertion_point(field_add:TST.ThemePresetsArchive.table_cell_stroke_presets)
  return _internal_add_table_cell_stroke_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::table_cell_stroke_presets() const {
  // @@protoc_insertion_point(field_list:TST.ThemePresetsArchive.table_cell_stroke_presets)
  return table_cell_stroke_presets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSTStylePropertyArchiving_2eproto
